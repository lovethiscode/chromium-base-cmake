// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SURFACEFLINGER_TRANSACTIONS_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SURFACEFLINGER_TRANSACTIONS_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class BlurRegion;
class ColorTransformProto;
class DisplayInfo;
class DisplayState;
class LayerCreationArgs;
class LayerState;
class LayerState_BufferData;
class LayerState_Color3;
class LayerState_Matrix22;
class LayerState_WindowInfo;
class RectProto;
class RegionProto;
class TransactionState;
class TransactionTraceEntry;
class Transform;
namespace perfetto_pbzero_enum_LayerState_BufferData {
enum PixelFormat : int32_t;
}  // namespace perfetto_pbzero_enum_LayerState_BufferData
using LayerState_BufferData_PixelFormat = perfetto_pbzero_enum_LayerState_BufferData::PixelFormat;
namespace perfetto_pbzero_enum_LayerState {
enum DropInputMode : int32_t;
}  // namespace perfetto_pbzero_enum_LayerState
using LayerState_DropInputMode = perfetto_pbzero_enum_LayerState::DropInputMode;
enum TrustedOverlay : int32_t;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

namespace perfetto_pbzero_enum_DisplayState {
enum Changes : int32_t {
  eChangesNone = 0,
  eSurfaceChanged = 1,
  eLayerStackChanged = 2,
  eDisplayProjectionChanged = 4,
  eDisplaySizeChanged = 8,
  eFlagsChanged = 16,
};
} // namespace perfetto_pbzero_enum_DisplayState
using DisplayState_Changes = perfetto_pbzero_enum_DisplayState::Changes;


constexpr DisplayState_Changes DisplayState_Changes_MIN = DisplayState_Changes::eChangesNone;
constexpr DisplayState_Changes DisplayState_Changes_MAX = DisplayState_Changes::eFlagsChanged;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* DisplayState_Changes_Name(::perfetto::protos::pbzero::DisplayState_Changes value) {
  switch (value) {
  case ::perfetto::protos::pbzero::DisplayState_Changes::eChangesNone:
    return "eChangesNone";

  case ::perfetto::protos::pbzero::DisplayState_Changes::eSurfaceChanged:
    return "eSurfaceChanged";

  case ::perfetto::protos::pbzero::DisplayState_Changes::eLayerStackChanged:
    return "eLayerStackChanged";

  case ::perfetto::protos::pbzero::DisplayState_Changes::eDisplayProjectionChanged:
    return "eDisplayProjectionChanged";

  case ::perfetto::protos::pbzero::DisplayState_Changes::eDisplaySizeChanged:
    return "eDisplaySizeChanged";

  case ::perfetto::protos::pbzero::DisplayState_Changes::eFlagsChanged:
    return "eFlagsChanged";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_LayerState {
enum ChangesLsb : int32_t {
  eChangesLsbNone = 0,
  ePositionChanged = 1,
  eLayerChanged = 2,
  eAlphaChanged = 8,
  eMatrixChanged = 16,
  eTransparentRegionChanged = 32,
  eFlagsChanged = 64,
  eLayerStackChanged = 128,
  eReleaseBufferListenerChanged = 1024,
  eShadowRadiusChanged = 2048,
  eBufferCropChanged = 8192,
  eRelativeLayerChanged = 16384,
  eReparent = 32768,
  eColorChanged = 65536,
  eBufferTransformChanged = 262144,
  eTransformToDisplayInverseChanged = 524288,
  eCropChanged = 1048576,
  eBufferChanged = 2097152,
  eAcquireFenceChanged = 4194304,
  eDataspaceChanged = 8388608,
  eHdrMetadataChanged = 16777216,
  eSurfaceDamageRegionChanged = 33554432,
  eApiChanged = 67108864,
  eSidebandStreamChanged = 134217728,
  eColorTransformChanged = 268435456,
  eHasListenerCallbacksChanged = 536870912,
  eInputInfoChanged = 1073741824,
  eCornerRadiusChanged = -2147483648,
};
} // namespace perfetto_pbzero_enum_LayerState
using LayerState_ChangesLsb = perfetto_pbzero_enum_LayerState::ChangesLsb;


constexpr LayerState_ChangesLsb LayerState_ChangesLsb_MIN = LayerState_ChangesLsb::eCornerRadiusChanged;
constexpr LayerState_ChangesLsb LayerState_ChangesLsb_MAX = LayerState_ChangesLsb::eInputInfoChanged;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* LayerState_ChangesLsb_Name(::perfetto::protos::pbzero::LayerState_ChangesLsb value) {
  switch (value) {
  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eChangesLsbNone:
    return "eChangesLsbNone";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::ePositionChanged:
    return "ePositionChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eLayerChanged:
    return "eLayerChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eAlphaChanged:
    return "eAlphaChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eMatrixChanged:
    return "eMatrixChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eTransparentRegionChanged:
    return "eTransparentRegionChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eFlagsChanged:
    return "eFlagsChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eLayerStackChanged:
    return "eLayerStackChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eReleaseBufferListenerChanged:
    return "eReleaseBufferListenerChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eShadowRadiusChanged:
    return "eShadowRadiusChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eBufferCropChanged:
    return "eBufferCropChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eRelativeLayerChanged:
    return "eRelativeLayerChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eReparent:
    return "eReparent";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eColorChanged:
    return "eColorChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eBufferTransformChanged:
    return "eBufferTransformChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eTransformToDisplayInverseChanged:
    return "eTransformToDisplayInverseChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eCropChanged:
    return "eCropChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eBufferChanged:
    return "eBufferChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eAcquireFenceChanged:
    return "eAcquireFenceChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eDataspaceChanged:
    return "eDataspaceChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eHdrMetadataChanged:
    return "eHdrMetadataChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eSurfaceDamageRegionChanged:
    return "eSurfaceDamageRegionChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eApiChanged:
    return "eApiChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eSidebandStreamChanged:
    return "eSidebandStreamChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eColorTransformChanged:
    return "eColorTransformChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eHasListenerCallbacksChanged:
    return "eHasListenerCallbacksChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eInputInfoChanged:
    return "eInputInfoChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesLsb::eCornerRadiusChanged:
    return "eCornerRadiusChanged";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_LayerState {
enum ChangesMsb : int32_t {
  eChangesMsbNone = 0,
  eDestinationFrameChanged = 1,
  eCachedBufferChanged = 2,
  eBackgroundColorChanged = 4,
  eMetadataChanged = 8,
  eColorSpaceAgnosticChanged = 16,
  eFrameRateSelectionPriority = 32,
  eFrameRateChanged = 64,
  eBackgroundBlurRadiusChanged = 128,
  eProducerDisconnect = 256,
  eFixedTransformHintChanged = 512,
  eFrameNumberChanged = 1024,
  eBlurRegionsChanged = 2048,
  eAutoRefreshChanged = 4096,
  eStretchChanged = 8192,
  eTrustedOverlayChanged = 16384,
  eDropInputModeChanged = 32768,
};
} // namespace perfetto_pbzero_enum_LayerState
using LayerState_ChangesMsb = perfetto_pbzero_enum_LayerState::ChangesMsb;


constexpr LayerState_ChangesMsb LayerState_ChangesMsb_MIN = LayerState_ChangesMsb::eChangesMsbNone;
constexpr LayerState_ChangesMsb LayerState_ChangesMsb_MAX = LayerState_ChangesMsb::eDropInputModeChanged;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* LayerState_ChangesMsb_Name(::perfetto::protos::pbzero::LayerState_ChangesMsb value) {
  switch (value) {
  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eChangesMsbNone:
    return "eChangesMsbNone";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eDestinationFrameChanged:
    return "eDestinationFrameChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eCachedBufferChanged:
    return "eCachedBufferChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eBackgroundColorChanged:
    return "eBackgroundColorChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eMetadataChanged:
    return "eMetadataChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eColorSpaceAgnosticChanged:
    return "eColorSpaceAgnosticChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eFrameRateSelectionPriority:
    return "eFrameRateSelectionPriority";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eFrameRateChanged:
    return "eFrameRateChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eBackgroundBlurRadiusChanged:
    return "eBackgroundBlurRadiusChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eProducerDisconnect:
    return "eProducerDisconnect";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eFixedTransformHintChanged:
    return "eFixedTransformHintChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eFrameNumberChanged:
    return "eFrameNumberChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eBlurRegionsChanged:
    return "eBlurRegionsChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eAutoRefreshChanged:
    return "eAutoRefreshChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eStretchChanged:
    return "eStretchChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eTrustedOverlayChanged:
    return "eTrustedOverlayChanged";

  case ::perfetto::protos::pbzero::LayerState_ChangesMsb::eDropInputModeChanged:
    return "eDropInputModeChanged";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_LayerState {
enum Flags : int32_t {
  eFlagsNone = 0,
  eLayerHidden = 1,
  eLayerOpaque = 2,
  eLayerSkipScreenshot = 64,
  eLayerSecure = 128,
  eEnableBackpressure = 256,
  eLayerIsDisplayDecoration = 512,
};
} // namespace perfetto_pbzero_enum_LayerState
using LayerState_Flags = perfetto_pbzero_enum_LayerState::Flags;


constexpr LayerState_Flags LayerState_Flags_MIN = LayerState_Flags::eFlagsNone;
constexpr LayerState_Flags LayerState_Flags_MAX = LayerState_Flags::eLayerIsDisplayDecoration;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* LayerState_Flags_Name(::perfetto::protos::pbzero::LayerState_Flags value) {
  switch (value) {
  case ::perfetto::protos::pbzero::LayerState_Flags::eFlagsNone:
    return "eFlagsNone";

  case ::perfetto::protos::pbzero::LayerState_Flags::eLayerHidden:
    return "eLayerHidden";

  case ::perfetto::protos::pbzero::LayerState_Flags::eLayerOpaque:
    return "eLayerOpaque";

  case ::perfetto::protos::pbzero::LayerState_Flags::eLayerSkipScreenshot:
    return "eLayerSkipScreenshot";

  case ::perfetto::protos::pbzero::LayerState_Flags::eLayerSecure:
    return "eLayerSecure";

  case ::perfetto::protos::pbzero::LayerState_Flags::eEnableBackpressure:
    return "eEnableBackpressure";

  case ::perfetto::protos::pbzero::LayerState_Flags::eLayerIsDisplayDecoration:
    return "eLayerIsDisplayDecoration";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_LayerState {
enum DropInputMode : int32_t {
  NONE = 0,
  ALL = 1,
  OBSCURED = 2,
};
} // namespace perfetto_pbzero_enum_LayerState
using LayerState_DropInputMode = perfetto_pbzero_enum_LayerState::DropInputMode;


constexpr LayerState_DropInputMode LayerState_DropInputMode_MIN = LayerState_DropInputMode::NONE;
constexpr LayerState_DropInputMode LayerState_DropInputMode_MAX = LayerState_DropInputMode::OBSCURED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* LayerState_DropInputMode_Name(::perfetto::protos::pbzero::LayerState_DropInputMode value) {
  switch (value) {
  case ::perfetto::protos::pbzero::LayerState_DropInputMode::NONE:
    return "NONE";

  case ::perfetto::protos::pbzero::LayerState_DropInputMode::ALL:
    return "ALL";

  case ::perfetto::protos::pbzero::LayerState_DropInputMode::OBSCURED:
    return "OBSCURED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_LayerState_BufferData {
enum BufferDataChange : int32_t {
  BufferDataChangeNone = 0,
  fenceChanged = 1,
  frameNumberChanged = 2,
  cachedBufferChanged = 4,
};
} // namespace perfetto_pbzero_enum_LayerState_BufferData
using LayerState_BufferData_BufferDataChange = perfetto_pbzero_enum_LayerState_BufferData::BufferDataChange;


constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData_BufferDataChange_MIN = LayerState_BufferData_BufferDataChange::BufferDataChangeNone;
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData_BufferDataChange_MAX = LayerState_BufferData_BufferDataChange::cachedBufferChanged;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* LayerState_BufferData_BufferDataChange_Name(::perfetto::protos::pbzero::LayerState_BufferData_BufferDataChange value) {
  switch (value) {
  case ::perfetto::protos::pbzero::LayerState_BufferData_BufferDataChange::BufferDataChangeNone:
    return "BufferDataChangeNone";

  case ::perfetto::protos::pbzero::LayerState_BufferData_BufferDataChange::fenceChanged:
    return "fenceChanged";

  case ::perfetto::protos::pbzero::LayerState_BufferData_BufferDataChange::frameNumberChanged:
    return "frameNumberChanged";

  case ::perfetto::protos::pbzero::LayerState_BufferData_BufferDataChange::cachedBufferChanged:
    return "cachedBufferChanged";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_LayerState_BufferData {
enum PixelFormat : int32_t {
  PIXEL_FORMAT_UNKNOWN = 0,
  PIXEL_FORMAT_CUSTOM = -4,
  PIXEL_FORMAT_TRANSLUCENT = -3,
  PIXEL_FORMAT_TRANSPARENT = -2,
  PIXEL_FORMAT_OPAQUE = -1,
  PIXEL_FORMAT_RGBA_8888 = 1,
  PIXEL_FORMAT_RGBX_8888 = 2,
  PIXEL_FORMAT_RGB_888 = 3,
  PIXEL_FORMAT_RGB_565 = 4,
  PIXEL_FORMAT_BGRA_8888 = 5,
  PIXEL_FORMAT_RGBA_5551 = 6,
  PIXEL_FORMAT_RGBA_4444 = 7,
  PIXEL_FORMAT_RGBA_FP16 = 22,
  PIXEL_FORMAT_RGBA_1010102 = 43,
  PIXEL_FORMAT_R_8 = 56,
};
} // namespace perfetto_pbzero_enum_LayerState_BufferData
using LayerState_BufferData_PixelFormat = perfetto_pbzero_enum_LayerState_BufferData::PixelFormat;


constexpr LayerState_BufferData_PixelFormat LayerState_BufferData_PixelFormat_MIN = LayerState_BufferData_PixelFormat::PIXEL_FORMAT_CUSTOM;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData_PixelFormat_MAX = LayerState_BufferData_PixelFormat::PIXEL_FORMAT_R_8;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* LayerState_BufferData_PixelFormat_Name(::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat value) {
  switch (value) {
  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_UNKNOWN:
    return "PIXEL_FORMAT_UNKNOWN";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_CUSTOM:
    return "PIXEL_FORMAT_CUSTOM";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_TRANSLUCENT:
    return "PIXEL_FORMAT_TRANSLUCENT";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_TRANSPARENT:
    return "PIXEL_FORMAT_TRANSPARENT";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_OPAQUE:
    return "PIXEL_FORMAT_OPAQUE";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGBA_8888:
    return "PIXEL_FORMAT_RGBA_8888";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGBX_8888:
    return "PIXEL_FORMAT_RGBX_8888";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGB_888:
    return "PIXEL_FORMAT_RGB_888";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGB_565:
    return "PIXEL_FORMAT_RGB_565";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_BGRA_8888:
    return "PIXEL_FORMAT_BGRA_8888";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGBA_5551:
    return "PIXEL_FORMAT_RGBA_5551";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGBA_4444:
    return "PIXEL_FORMAT_RGBA_4444";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGBA_FP16:
    return "PIXEL_FORMAT_RGBA_FP16";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_RGBA_1010102:
    return "PIXEL_FORMAT_RGBA_1010102";

  case ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat::PIXEL_FORMAT_R_8:
    return "PIXEL_FORMAT_R_8";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_TransactionTraceFile {
enum MagicNumber : int32_t {
  INVALID = 0,
  MAGIC_NUMBER_L = 1415073364,
  MAGIC_NUMBER_H = 1162035538,
};
} // namespace perfetto_pbzero_enum_TransactionTraceFile
using TransactionTraceFile_MagicNumber = perfetto_pbzero_enum_TransactionTraceFile::MagicNumber;


constexpr TransactionTraceFile_MagicNumber TransactionTraceFile_MagicNumber_MIN = TransactionTraceFile_MagicNumber::INVALID;
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile_MagicNumber_MAX = TransactionTraceFile_MagicNumber::MAGIC_NUMBER_L;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* TransactionTraceFile_MagicNumber_Name(::perfetto::protos::pbzero::TransactionTraceFile_MagicNumber value) {
  switch (value) {
  case ::perfetto::protos::pbzero::TransactionTraceFile_MagicNumber::INVALID:
    return "INVALID";

  case ::perfetto::protos::pbzero::TransactionTraceFile_MagicNumber::MAGIC_NUMBER_L:
    return "MAGIC_NUMBER_L";

  case ::perfetto::protos::pbzero::TransactionTraceFile_MagicNumber::MAGIC_NUMBER_H:
    return "MAGIC_NUMBER_H";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

class DisplayState_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/9, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  DisplayState_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit DisplayState_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit DisplayState_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_id() const { return at<1>().valid(); }
  int32_t id() const { return at<1>().as_int32(); }
  bool has_what() const { return at<2>().valid(); }
  uint32_t what() const { return at<2>().as_uint32(); }
  bool has_flags() const { return at<3>().valid(); }
  uint32_t flags() const { return at<3>().as_uint32(); }
  bool has_layer_stack() const { return at<4>().valid(); }
  uint32_t layer_stack() const { return at<4>().as_uint32(); }
  bool has_orientation() const { return at<5>().valid(); }
  uint32_t orientation() const { return at<5>().as_uint32(); }
  bool has_layer_stack_space_rect() const { return at<6>().valid(); }
  ::protozero::ConstBytes layer_stack_space_rect() const { return at<6>().as_bytes(); }
  bool has_oriented_display_space_rect() const { return at<7>().valid(); }
  ::protozero::ConstBytes oriented_display_space_rect() const { return at<7>().as_bytes(); }
  bool has_width() const { return at<8>().valid(); }
  uint32_t width() const { return at<8>().as_uint32(); }
  bool has_height() const { return at<9>().valid(); }
  uint32_t height() const { return at<9>().as_uint32(); }
};

class DisplayState : public ::protozero::Message {
 public:
  using Decoder = DisplayState_Decoder;
  enum : int32_t {
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kLayerStackFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kLayerStackSpaceRectFieldNumber = 6,
    kOrientedDisplaySpaceRectFieldNumber = 7,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.DisplayState"; }


  using Changes = ::perfetto::protos::pbzero::DisplayState_Changes;
  static inline const char* Changes_Name(Changes value) {
    return ::perfetto::protos::pbzero::DisplayState_Changes_Name(value);
  }
  static inline const Changes eChangesNone = Changes::eChangesNone;
  static inline const Changes eSurfaceChanged = Changes::eSurfaceChanged;
  static inline const Changes eLayerStackChanged = Changes::eLayerStackChanged;
  static inline const Changes eDisplayProjectionChanged = Changes::eDisplayProjectionChanged;
  static inline const Changes eDisplaySizeChanged = Changes::eDisplaySizeChanged;
  static inline const Changes eFlagsChanged = Changes::eFlagsChanged;

  using FieldMetadata_Id =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      DisplayState>;

  static constexpr FieldMetadata_Id kId{};
  void set_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Id::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_What =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      DisplayState>;

  static constexpr FieldMetadata_What kWhat{};
  void set_what(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_What::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Flags =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      DisplayState>;

  static constexpr FieldMetadata_Flags kFlags{};
  void set_flags(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Flags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayerStack =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      DisplayState>;

  static constexpr FieldMetadata_LayerStack kLayerStack{};
  void set_layer_stack(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayerStack::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Orientation =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      DisplayState>;

  static constexpr FieldMetadata_Orientation kOrientation{};
  void set_orientation(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Orientation::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayerStackSpaceRect =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayState>;

  static constexpr FieldMetadata_LayerStackSpaceRect kLayerStackSpaceRect{};
  template <typename T = RectProto> T* set_layer_stack_space_rect() {
    return BeginNestedMessage<T>(6);
  }


  using FieldMetadata_OrientedDisplaySpaceRect =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayState>;

  static constexpr FieldMetadata_OrientedDisplaySpaceRect kOrientedDisplaySpaceRect{};
  template <typename T = RectProto> T* set_oriented_display_space_rect() {
    return BeginNestedMessage<T>(7);
  }


  using FieldMetadata_Width =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      DisplayState>;

  static constexpr FieldMetadata_Width kWidth{};
  void set_width(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Width::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Height =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      DisplayState>;

  static constexpr FieldMetadata_Height kHeight{};
  void set_height(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Height::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class LayerState_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/43, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  LayerState_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LayerState_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LayerState_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_layer_id() const { return at<1>().valid(); }
  uint32_t layer_id() const { return at<1>().as_uint32(); }
  bool has_what() const { return at<2>().valid(); }
  uint64_t what() const { return at<2>().as_uint64(); }
  bool has_x() const { return at<3>().valid(); }
  float x() const { return at<3>().as_float(); }
  bool has_y() const { return at<4>().valid(); }
  float y() const { return at<4>().as_float(); }
  bool has_z() const { return at<5>().valid(); }
  int32_t z() const { return at<5>().as_int32(); }
  bool has_w() const { return at<6>().valid(); }
  uint32_t w() const { return at<6>().as_uint32(); }
  bool has_h() const { return at<7>().valid(); }
  uint32_t h() const { return at<7>().as_uint32(); }
  bool has_layer_stack() const { return at<8>().valid(); }
  uint32_t layer_stack() const { return at<8>().as_uint32(); }
  bool has_flags() const { return at<9>().valid(); }
  uint32_t flags() const { return at<9>().as_uint32(); }
  bool has_mask() const { return at<10>().valid(); }
  uint32_t mask() const { return at<10>().as_uint32(); }
  bool has_matrix() const { return at<11>().valid(); }
  ::protozero::ConstBytes matrix() const { return at<11>().as_bytes(); }
  bool has_corner_radius() const { return at<12>().valid(); }
  float corner_radius() const { return at<12>().as_float(); }
  bool has_background_blur_radius() const { return at<13>().valid(); }
  uint32_t background_blur_radius() const { return at<13>().as_uint32(); }
  bool has_parent_id() const { return at<14>().valid(); }
  uint32_t parent_id() const { return at<14>().as_uint32(); }
  bool has_relative_parent_id() const { return at<15>().valid(); }
  uint32_t relative_parent_id() const { return at<15>().as_uint32(); }
  bool has_alpha() const { return at<16>().valid(); }
  float alpha() const { return at<16>().as_float(); }
  bool has_color() const { return at<17>().valid(); }
  ::protozero::ConstBytes color() const { return at<17>().as_bytes(); }
  bool has_transparent_region() const { return at<18>().valid(); }
  ::protozero::ConstBytes transparent_region() const { return at<18>().as_bytes(); }
  bool has_transform() const { return at<19>().valid(); }
  uint32_t transform() const { return at<19>().as_uint32(); }
  bool has_transform_to_display_inverse() const { return at<20>().valid(); }
  bool transform_to_display_inverse() const { return at<20>().as_bool(); }
  bool has_crop() const { return at<21>().valid(); }
  ::protozero::ConstBytes crop() const { return at<21>().as_bytes(); }
  bool has_buffer_data() const { return at<22>().valid(); }
  ::protozero::ConstBytes buffer_data() const { return at<22>().as_bytes(); }
  bool has_api() const { return at<23>().valid(); }
  int32_t api() const { return at<23>().as_int32(); }
  bool has_has_sideband_stream() const { return at<24>().valid(); }
  bool has_sideband_stream() const { return at<24>().as_bool(); }
  bool has_color_transform() const { return at<25>().valid(); }
  ::protozero::ConstBytes color_transform() const { return at<25>().as_bytes(); }
  bool has_blur_regions() const { return at<26>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> blur_regions() const { return GetRepeated<::protozero::ConstBytes>(26); }
  bool has_window_info_handle() const { return at<27>().valid(); }
  ::protozero::ConstBytes window_info_handle() const { return at<27>().as_bytes(); }
  bool has_bg_color_alpha() const { return at<28>().valid(); }
  float bg_color_alpha() const { return at<28>().as_float(); }
  bool has_bg_color_dataspace() const { return at<29>().valid(); }
  int32_t bg_color_dataspace() const { return at<29>().as_int32(); }
  bool has_color_space_agnostic() const { return at<30>().valid(); }
  bool color_space_agnostic() const { return at<30>().as_bool(); }
  bool has_shadow_radius() const { return at<31>().valid(); }
  float shadow_radius() const { return at<31>().as_float(); }
  bool has_frame_rate_selection_priority() const { return at<32>().valid(); }
  int32_t frame_rate_selection_priority() const { return at<32>().as_int32(); }
  bool has_frame_rate() const { return at<33>().valid(); }
  float frame_rate() const { return at<33>().as_float(); }
  bool has_frame_rate_compatibility() const { return at<34>().valid(); }
  int32_t frame_rate_compatibility() const { return at<34>().as_int32(); }
  bool has_change_frame_rate_strategy() const { return at<35>().valid(); }
  int32_t change_frame_rate_strategy() const { return at<35>().as_int32(); }
  bool has_fixed_transform_hint() const { return at<36>().valid(); }
  uint32_t fixed_transform_hint() const { return at<36>().as_uint32(); }
  bool has_frame_number() const { return at<37>().valid(); }
  uint64_t frame_number() const { return at<37>().as_uint64(); }
  bool has_auto_refresh() const { return at<38>().valid(); }
  bool auto_refresh() const { return at<38>().as_bool(); }
  bool has_is_trusted_overlay() const { return at<39>().valid(); }
  bool is_trusted_overlay() const { return at<39>().as_bool(); }
  bool has_buffer_crop() const { return at<40>().valid(); }
  ::protozero::ConstBytes buffer_crop() const { return at<40>().as_bytes(); }
  bool has_destination_frame() const { return at<41>().valid(); }
  ::protozero::ConstBytes destination_frame() const { return at<41>().as_bytes(); }
  bool has_drop_input_mode() const { return at<42>().valid(); }
  int32_t drop_input_mode() const { return at<42>().as_int32(); }
  bool has_trusted_overlay() const { return at<43>().valid(); }
  int32_t trusted_overlay() const { return at<43>().as_int32(); }
};

class LayerState : public ::protozero::Message {
 public:
  using Decoder = LayerState_Decoder;
  enum : int32_t {
    kLayerIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kWFieldNumber = 6,
    kHFieldNumber = 7,
    kLayerStackFieldNumber = 8,
    kFlagsFieldNumber = 9,
    kMaskFieldNumber = 10,
    kMatrixFieldNumber = 11,
    kCornerRadiusFieldNumber = 12,
    kBackgroundBlurRadiusFieldNumber = 13,
    kParentIdFieldNumber = 14,
    kRelativeParentIdFieldNumber = 15,
    kAlphaFieldNumber = 16,
    kColorFieldNumber = 17,
    kTransparentRegionFieldNumber = 18,
    kTransformFieldNumber = 19,
    kTransformToDisplayInverseFieldNumber = 20,
    kCropFieldNumber = 21,
    kBufferDataFieldNumber = 22,
    kApiFieldNumber = 23,
    kHasSidebandStreamFieldNumber = 24,
    kColorTransformFieldNumber = 25,
    kBlurRegionsFieldNumber = 26,
    kWindowInfoHandleFieldNumber = 27,
    kBgColorAlphaFieldNumber = 28,
    kBgColorDataspaceFieldNumber = 29,
    kColorSpaceAgnosticFieldNumber = 30,
    kShadowRadiusFieldNumber = 31,
    kFrameRateSelectionPriorityFieldNumber = 32,
    kFrameRateFieldNumber = 33,
    kFrameRateCompatibilityFieldNumber = 34,
    kChangeFrameRateStrategyFieldNumber = 35,
    kFixedTransformHintFieldNumber = 36,
    kFrameNumberFieldNumber = 37,
    kAutoRefreshFieldNumber = 38,
    kIsTrustedOverlayFieldNumber = 39,
    kBufferCropFieldNumber = 40,
    kDestinationFrameFieldNumber = 41,
    kDropInputModeFieldNumber = 42,
    kTrustedOverlayFieldNumber = 43,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LayerState"; }

  using Matrix22 = ::perfetto::protos::pbzero::LayerState_Matrix22;
  using Color3 = ::perfetto::protos::pbzero::LayerState_Color3;
  using BufferData = ::perfetto::protos::pbzero::LayerState_BufferData;
  using WindowInfo = ::perfetto::protos::pbzero::LayerState_WindowInfo;

  using ChangesLsb = ::perfetto::protos::pbzero::LayerState_ChangesLsb;
  static inline const char* ChangesLsb_Name(ChangesLsb value) {
    return ::perfetto::protos::pbzero::LayerState_ChangesLsb_Name(value);
  }

  using ChangesMsb = ::perfetto::protos::pbzero::LayerState_ChangesMsb;
  static inline const char* ChangesMsb_Name(ChangesMsb value) {
    return ::perfetto::protos::pbzero::LayerState_ChangesMsb_Name(value);
  }

  using Flags = ::perfetto::protos::pbzero::LayerState_Flags;
  static inline const char* Flags_Name(Flags value) {
    return ::perfetto::protos::pbzero::LayerState_Flags_Name(value);
  }

  using DropInputMode = ::perfetto::protos::pbzero::LayerState_DropInputMode;
  static inline const char* DropInputMode_Name(DropInputMode value) {
    return ::perfetto::protos::pbzero::LayerState_DropInputMode_Name(value);
  }
  static inline const ChangesLsb eChangesLsbNone = ChangesLsb::eChangesLsbNone;
  static inline const ChangesLsb ePositionChanged = ChangesLsb::ePositionChanged;
  static inline const ChangesLsb eLayerChanged = ChangesLsb::eLayerChanged;
  static inline const ChangesLsb eAlphaChanged = ChangesLsb::eAlphaChanged;
  static inline const ChangesLsb eMatrixChanged = ChangesLsb::eMatrixChanged;
  static inline const ChangesLsb eTransparentRegionChanged = ChangesLsb::eTransparentRegionChanged;
  static inline const ChangesLsb eFlagsChanged = ChangesLsb::eFlagsChanged;
  static inline const ChangesLsb eLayerStackChanged = ChangesLsb::eLayerStackChanged;
  static inline const ChangesLsb eReleaseBufferListenerChanged = ChangesLsb::eReleaseBufferListenerChanged;
  static inline const ChangesLsb eShadowRadiusChanged = ChangesLsb::eShadowRadiusChanged;
  static inline const ChangesLsb eBufferCropChanged = ChangesLsb::eBufferCropChanged;
  static inline const ChangesLsb eRelativeLayerChanged = ChangesLsb::eRelativeLayerChanged;
  static inline const ChangesLsb eReparent = ChangesLsb::eReparent;
  static inline const ChangesLsb eColorChanged = ChangesLsb::eColorChanged;
  static inline const ChangesLsb eBufferTransformChanged = ChangesLsb::eBufferTransformChanged;
  static inline const ChangesLsb eTransformToDisplayInverseChanged = ChangesLsb::eTransformToDisplayInverseChanged;
  static inline const ChangesLsb eCropChanged = ChangesLsb::eCropChanged;
  static inline const ChangesLsb eBufferChanged = ChangesLsb::eBufferChanged;
  static inline const ChangesLsb eAcquireFenceChanged = ChangesLsb::eAcquireFenceChanged;
  static inline const ChangesLsb eDataspaceChanged = ChangesLsb::eDataspaceChanged;
  static inline const ChangesLsb eHdrMetadataChanged = ChangesLsb::eHdrMetadataChanged;
  static inline const ChangesLsb eSurfaceDamageRegionChanged = ChangesLsb::eSurfaceDamageRegionChanged;
  static inline const ChangesLsb eApiChanged = ChangesLsb::eApiChanged;
  static inline const ChangesLsb eSidebandStreamChanged = ChangesLsb::eSidebandStreamChanged;
  static inline const ChangesLsb eColorTransformChanged = ChangesLsb::eColorTransformChanged;
  static inline const ChangesLsb eHasListenerCallbacksChanged = ChangesLsb::eHasListenerCallbacksChanged;
  static inline const ChangesLsb eInputInfoChanged = ChangesLsb::eInputInfoChanged;
  static inline const ChangesLsb eCornerRadiusChanged = ChangesLsb::eCornerRadiusChanged;
  static inline const ChangesMsb eChangesMsbNone = ChangesMsb::eChangesMsbNone;
  static inline const ChangesMsb eDestinationFrameChanged = ChangesMsb::eDestinationFrameChanged;
  static inline const ChangesMsb eCachedBufferChanged = ChangesMsb::eCachedBufferChanged;
  static inline const ChangesMsb eBackgroundColorChanged = ChangesMsb::eBackgroundColorChanged;
  static inline const ChangesMsb eMetadataChanged = ChangesMsb::eMetadataChanged;
  static inline const ChangesMsb eColorSpaceAgnosticChanged = ChangesMsb::eColorSpaceAgnosticChanged;
  static inline const ChangesMsb eFrameRateSelectionPriority = ChangesMsb::eFrameRateSelectionPriority;
  static inline const ChangesMsb eFrameRateChanged = ChangesMsb::eFrameRateChanged;
  static inline const ChangesMsb eBackgroundBlurRadiusChanged = ChangesMsb::eBackgroundBlurRadiusChanged;
  static inline const ChangesMsb eProducerDisconnect = ChangesMsb::eProducerDisconnect;
  static inline const ChangesMsb eFixedTransformHintChanged = ChangesMsb::eFixedTransformHintChanged;
  static inline const ChangesMsb eFrameNumberChanged = ChangesMsb::eFrameNumberChanged;
  static inline const ChangesMsb eBlurRegionsChanged = ChangesMsb::eBlurRegionsChanged;
  static inline const ChangesMsb eAutoRefreshChanged = ChangesMsb::eAutoRefreshChanged;
  static inline const ChangesMsb eStretchChanged = ChangesMsb::eStretchChanged;
  static inline const ChangesMsb eTrustedOverlayChanged = ChangesMsb::eTrustedOverlayChanged;
  static inline const ChangesMsb eDropInputModeChanged = ChangesMsb::eDropInputModeChanged;
  static inline const Flags eFlagsNone = Flags::eFlagsNone;
  static inline const Flags eLayerHidden = Flags::eLayerHidden;
  static inline const Flags eLayerOpaque = Flags::eLayerOpaque;
  static inline const Flags eLayerSkipScreenshot = Flags::eLayerSkipScreenshot;
  static inline const Flags eLayerSecure = Flags::eLayerSecure;
  static inline const Flags eEnableBackpressure = Flags::eEnableBackpressure;
  static inline const Flags eLayerIsDisplayDecoration = Flags::eLayerIsDisplayDecoration;
  static inline const DropInputMode NONE = DropInputMode::NONE;
  static inline const DropInputMode ALL = DropInputMode::ALL;
  static inline const DropInputMode OBSCURED = DropInputMode::OBSCURED;

  using FieldMetadata_LayerId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_LayerId kLayerId{};
  void set_layer_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayerId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_What =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      LayerState>;

  static constexpr FieldMetadata_What kWhat{};
  void set_what(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_What::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_X =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState>;

  static constexpr FieldMetadata_X kX{};
  void set_x(float value) {
    static constexpr uint32_t field_id = FieldMetadata_X::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Y =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState>;

  static constexpr FieldMetadata_Y kY{};
  void set_y(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Y::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Z =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState>;

  static constexpr FieldMetadata_Z kZ{};
  void set_z(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Z::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_W =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_W kW{};
  void set_w(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_W::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_H =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_H kH{};
  void set_h(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_H::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayerStack =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_LayerStack kLayerStack{};
  void set_layer_stack(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayerStack::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Flags =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_Flags kFlags{};
  void set_flags(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Flags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Mask =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_Mask kMask{};
  void set_mask(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Mask::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Matrix =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LayerState_Matrix22,
      LayerState>;

  static constexpr FieldMetadata_Matrix kMatrix{};
  template <typename T = LayerState_Matrix22> T* set_matrix() {
    return BeginNestedMessage<T>(11);
  }


  using FieldMetadata_CornerRadius =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState>;

  static constexpr FieldMetadata_CornerRadius kCornerRadius{};
  void set_corner_radius(float value) {
    static constexpr uint32_t field_id = FieldMetadata_CornerRadius::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BackgroundBlurRadius =
    ::protozero::proto_utils::FieldMetadata<
      13,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_BackgroundBlurRadius kBackgroundBlurRadius{};
  void set_background_blur_radius(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BackgroundBlurRadius::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ParentId =
    ::protozero::proto_utils::FieldMetadata<
      14,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_ParentId kParentId{};
  void set_parent_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ParentId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RelativeParentId =
    ::protozero::proto_utils::FieldMetadata<
      15,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_RelativeParentId kRelativeParentId{};
  void set_relative_parent_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RelativeParentId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Alpha =
    ::protozero::proto_utils::FieldMetadata<
      16,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState>;

  static constexpr FieldMetadata_Alpha kAlpha{};
  void set_alpha(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Alpha::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Color =
    ::protozero::proto_utils::FieldMetadata<
      17,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LayerState_Color3,
      LayerState>;

  static constexpr FieldMetadata_Color kColor{};
  template <typename T = LayerState_Color3> T* set_color() {
    return BeginNestedMessage<T>(17);
  }


  using FieldMetadata_TransparentRegion =
    ::protozero::proto_utils::FieldMetadata<
      18,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RegionProto,
      LayerState>;

  static constexpr FieldMetadata_TransparentRegion kTransparentRegion{};
  template <typename T = RegionProto> T* set_transparent_region() {
    return BeginNestedMessage<T>(18);
  }


  using FieldMetadata_Transform =
    ::protozero::proto_utils::FieldMetadata<
      19,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_Transform kTransform{};
  void set_transform(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Transform::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TransformToDisplayInverse =
    ::protozero::proto_utils::FieldMetadata<
      20,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState>;

  static constexpr FieldMetadata_TransformToDisplayInverse kTransformToDisplayInverse{};
  void set_transform_to_display_inverse(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_TransformToDisplayInverse::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Crop =
    ::protozero::proto_utils::FieldMetadata<
      21,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      LayerState>;

  static constexpr FieldMetadata_Crop kCrop{};
  template <typename T = RectProto> T* set_crop() {
    return BeginNestedMessage<T>(21);
  }


  using FieldMetadata_BufferData =
    ::protozero::proto_utils::FieldMetadata<
      22,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LayerState_BufferData,
      LayerState>;

  static constexpr FieldMetadata_BufferData kBufferData{};
  template <typename T = LayerState_BufferData> T* set_buffer_data() {
    return BeginNestedMessage<T>(22);
  }


  using FieldMetadata_Api =
    ::protozero::proto_utils::FieldMetadata<
      23,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState>;

  static constexpr FieldMetadata_Api kApi{};
  void set_api(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Api::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasSidebandStream =
    ::protozero::proto_utils::FieldMetadata<
      24,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState>;

  static constexpr FieldMetadata_HasSidebandStream kHasSidebandStream{};
  void set_has_sideband_stream(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasSidebandStream::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ColorTransform =
    ::protozero::proto_utils::FieldMetadata<
      25,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ColorTransformProto,
      LayerState>;

  static constexpr FieldMetadata_ColorTransform kColorTransform{};
  template <typename T = ColorTransformProto> T* set_color_transform() {
    return BeginNestedMessage<T>(25);
  }


  using FieldMetadata_BlurRegions =
    ::protozero::proto_utils::FieldMetadata<
      26,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlurRegion,
      LayerState>;

  static constexpr FieldMetadata_BlurRegions kBlurRegions{};
  template <typename T = BlurRegion> T* add_blur_regions() {
    return BeginNestedMessage<T>(26);
  }


  using FieldMetadata_WindowInfoHandle =
    ::protozero::proto_utils::FieldMetadata<
      27,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LayerState_WindowInfo,
      LayerState>;

  static constexpr FieldMetadata_WindowInfoHandle kWindowInfoHandle{};
  template <typename T = LayerState_WindowInfo> T* set_window_info_handle() {
    return BeginNestedMessage<T>(27);
  }


  using FieldMetadata_BgColorAlpha =
    ::protozero::proto_utils::FieldMetadata<
      28,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState>;

  static constexpr FieldMetadata_BgColorAlpha kBgColorAlpha{};
  void set_bg_color_alpha(float value) {
    static constexpr uint32_t field_id = FieldMetadata_BgColorAlpha::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BgColorDataspace =
    ::protozero::proto_utils::FieldMetadata<
      29,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState>;

  static constexpr FieldMetadata_BgColorDataspace kBgColorDataspace{};
  void set_bg_color_dataspace(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BgColorDataspace::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ColorSpaceAgnostic =
    ::protozero::proto_utils::FieldMetadata<
      30,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState>;

  static constexpr FieldMetadata_ColorSpaceAgnostic kColorSpaceAgnostic{};
  void set_color_space_agnostic(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ColorSpaceAgnostic::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ShadowRadius =
    ::protozero::proto_utils::FieldMetadata<
      31,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState>;

  static constexpr FieldMetadata_ShadowRadius kShadowRadius{};
  void set_shadow_radius(float value) {
    static constexpr uint32_t field_id = FieldMetadata_ShadowRadius::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameRateSelectionPriority =
    ::protozero::proto_utils::FieldMetadata<
      32,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState>;

  static constexpr FieldMetadata_FrameRateSelectionPriority kFrameRateSelectionPriority{};
  void set_frame_rate_selection_priority(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameRateSelectionPriority::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameRate =
    ::protozero::proto_utils::FieldMetadata<
      33,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState>;

  static constexpr FieldMetadata_FrameRate kFrameRate{};
  void set_frame_rate(float value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameRate::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameRateCompatibility =
    ::protozero::proto_utils::FieldMetadata<
      34,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState>;

  static constexpr FieldMetadata_FrameRateCompatibility kFrameRateCompatibility{};
  void set_frame_rate_compatibility(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameRateCompatibility::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ChangeFrameRateStrategy =
    ::protozero::proto_utils::FieldMetadata<
      35,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState>;

  static constexpr FieldMetadata_ChangeFrameRateStrategy kChangeFrameRateStrategy{};
  void set_change_frame_rate_strategy(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ChangeFrameRateStrategy::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FixedTransformHint =
    ::protozero::proto_utils::FieldMetadata<
      36,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState>;

  static constexpr FieldMetadata_FixedTransformHint kFixedTransformHint{};
  void set_fixed_transform_hint(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FixedTransformHint::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameNumber =
    ::protozero::proto_utils::FieldMetadata<
      37,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      LayerState>;

  static constexpr FieldMetadata_FrameNumber kFrameNumber{};
  void set_frame_number(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AutoRefresh =
    ::protozero::proto_utils::FieldMetadata<
      38,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState>;

  static constexpr FieldMetadata_AutoRefresh kAutoRefresh{};
  void set_auto_refresh(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_AutoRefresh::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsTrustedOverlay =
    ::protozero::proto_utils::FieldMetadata<
      39,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState>;

  static constexpr FieldMetadata_IsTrustedOverlay kIsTrustedOverlay{};
  void set_is_trusted_overlay(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsTrustedOverlay::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BufferCrop =
    ::protozero::proto_utils::FieldMetadata<
      40,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      LayerState>;

  static constexpr FieldMetadata_BufferCrop kBufferCrop{};
  template <typename T = RectProto> T* set_buffer_crop() {
    return BeginNestedMessage<T>(40);
  }


  using FieldMetadata_DestinationFrame =
    ::protozero::proto_utils::FieldMetadata<
      41,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      LayerState>;

  static constexpr FieldMetadata_DestinationFrame kDestinationFrame{};
  template <typename T = RectProto> T* set_destination_frame() {
    return BeginNestedMessage<T>(41);
  }


  using FieldMetadata_DropInputMode =
    ::protozero::proto_utils::FieldMetadata<
      42,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      LayerState_DropInputMode,
      LayerState>;

  static constexpr FieldMetadata_DropInputMode kDropInputMode{};
  void set_drop_input_mode(LayerState_DropInputMode value) {
    static constexpr uint32_t field_id = FieldMetadata_DropInputMode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TrustedOverlay =
    ::protozero::proto_utils::FieldMetadata<
      43,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      TrustedOverlay,
      LayerState>;

  static constexpr FieldMetadata_TrustedOverlay kTrustedOverlay{};
  void set_trusted_overlay(TrustedOverlay value) {
    static constexpr uint32_t field_id = FieldMetadata_TrustedOverlay::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class LayerState_WindowInfo_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/12, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LayerState_WindowInfo_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LayerState_WindowInfo_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LayerState_WindowInfo_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_layout_params_flags() const { return at<1>().valid(); }
  uint32_t layout_params_flags() const { return at<1>().as_uint32(); }
  bool has_layout_params_type() const { return at<2>().valid(); }
  int32_t layout_params_type() const { return at<2>().as_int32(); }
  bool has_touchable_region() const { return at<3>().valid(); }
  ::protozero::ConstBytes touchable_region() const { return at<3>().as_bytes(); }
  bool has_surface_inset() const { return at<4>().valid(); }
  int32_t surface_inset() const { return at<4>().as_int32(); }
  bool has_focusable() const { return at<5>().valid(); }
  bool focusable() const { return at<5>().as_bool(); }
  bool has_has_wallpaper() const { return at<6>().valid(); }
  bool has_wallpaper() const { return at<6>().as_bool(); }
  bool has_global_scale_factor() const { return at<7>().valid(); }
  float global_scale_factor() const { return at<7>().as_float(); }
  bool has_crop_layer_id() const { return at<8>().valid(); }
  uint32_t crop_layer_id() const { return at<8>().as_uint32(); }
  bool has_replace_touchable_region_with_crop() const { return at<9>().valid(); }
  bool replace_touchable_region_with_crop() const { return at<9>().as_bool(); }
  bool has_touchable_region_crop() const { return at<10>().valid(); }
  ::protozero::ConstBytes touchable_region_crop() const { return at<10>().as_bytes(); }
  bool has_transform() const { return at<11>().valid(); }
  ::protozero::ConstBytes transform() const { return at<11>().as_bytes(); }
  bool has_input_config() const { return at<12>().valid(); }
  uint32_t input_config() const { return at<12>().as_uint32(); }
};

class LayerState_WindowInfo : public ::protozero::Message {
 public:
  using Decoder = LayerState_WindowInfo_Decoder;
  enum : int32_t {
    kLayoutParamsFlagsFieldNumber = 1,
    kLayoutParamsTypeFieldNumber = 2,
    kTouchableRegionFieldNumber = 3,
    kSurfaceInsetFieldNumber = 4,
    kFocusableFieldNumber = 5,
    kHasWallpaperFieldNumber = 6,
    kGlobalScaleFactorFieldNumber = 7,
    kCropLayerIdFieldNumber = 8,
    kReplaceTouchableRegionWithCropFieldNumber = 9,
    kTouchableRegionCropFieldNumber = 10,
    kTransformFieldNumber = 11,
    kInputConfigFieldNumber = 12,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LayerState.WindowInfo"; }


  using FieldMetadata_LayoutParamsFlags =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_LayoutParamsFlags kLayoutParamsFlags{};
  void set_layout_params_flags(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayoutParamsFlags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayoutParamsType =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_LayoutParamsType kLayoutParamsType{};
  void set_layout_params_type(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayoutParamsType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TouchableRegion =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RegionProto,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_TouchableRegion kTouchableRegion{};
  template <typename T = RegionProto> T* set_touchable_region() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_SurfaceInset =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_SurfaceInset kSurfaceInset{};
  void set_surface_inset(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SurfaceInset::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Focusable =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_Focusable kFocusable{};
  void set_focusable(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_Focusable::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasWallpaper =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_HasWallpaper kHasWallpaper{};
  void set_has_wallpaper(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasWallpaper::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_GlobalScaleFactor =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_GlobalScaleFactor kGlobalScaleFactor{};
  void set_global_scale_factor(float value) {
    static constexpr uint32_t field_id = FieldMetadata_GlobalScaleFactor::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CropLayerId =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_CropLayerId kCropLayerId{};
  void set_crop_layer_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CropLayerId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ReplaceTouchableRegionWithCrop =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_ReplaceTouchableRegionWithCrop kReplaceTouchableRegionWithCrop{};
  void set_replace_touchable_region_with_crop(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ReplaceTouchableRegionWithCrop::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TouchableRegionCrop =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_TouchableRegionCrop kTouchableRegionCrop{};
  template <typename T = RectProto> T* set_touchable_region_crop() {
    return BeginNestedMessage<T>(10);
  }


  using FieldMetadata_Transform =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      Transform,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_Transform kTransform{};
  template <typename T = Transform> T* set_transform() {
    return BeginNestedMessage<T>(11);
  }


  using FieldMetadata_InputConfig =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState_WindowInfo>;

  static constexpr FieldMetadata_InputConfig kInputConfig{};
  void set_input_config(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_InputConfig::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class LayerState_BufferData_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/8, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LayerState_BufferData_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LayerState_BufferData_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LayerState_BufferData_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_buffer_id() const { return at<1>().valid(); }
  uint64_t buffer_id() const { return at<1>().as_uint64(); }
  bool has_width() const { return at<2>().valid(); }
  uint32_t width() const { return at<2>().as_uint32(); }
  bool has_height() const { return at<3>().valid(); }
  uint32_t height() const { return at<3>().as_uint32(); }
  bool has_frame_number() const { return at<4>().valid(); }
  uint64_t frame_number() const { return at<4>().as_uint64(); }
  bool has_flags() const { return at<5>().valid(); }
  uint32_t flags() const { return at<5>().as_uint32(); }
  bool has_cached_buffer_id() const { return at<6>().valid(); }
  uint64_t cached_buffer_id() const { return at<6>().as_uint64(); }
  bool has_pixel_format() const { return at<7>().valid(); }
  int32_t pixel_format() const { return at<7>().as_int32(); }
  bool has_usage() const { return at<8>().valid(); }
  uint64_t usage() const { return at<8>().as_uint64(); }
};

class LayerState_BufferData : public ::protozero::Message {
 public:
  using Decoder = LayerState_BufferData_Decoder;
  enum : int32_t {
    kBufferIdFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFrameNumberFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kCachedBufferIdFieldNumber = 6,
    kPixelFormatFieldNumber = 7,
    kUsageFieldNumber = 8,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LayerState.BufferData"; }


  using BufferDataChange = ::perfetto::protos::pbzero::LayerState_BufferData_BufferDataChange;
  static inline const char* BufferDataChange_Name(BufferDataChange value) {
    return ::perfetto::protos::pbzero::LayerState_BufferData_BufferDataChange_Name(value);
  }

  using PixelFormat = ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat;
  static inline const char* PixelFormat_Name(PixelFormat value) {
    return ::perfetto::protos::pbzero::LayerState_BufferData_PixelFormat_Name(value);
  }
  static inline const BufferDataChange BufferDataChangeNone = BufferDataChange::BufferDataChangeNone;
  static inline const BufferDataChange fenceChanged = BufferDataChange::fenceChanged;
  static inline const BufferDataChange frameNumberChanged = BufferDataChange::frameNumberChanged;
  static inline const BufferDataChange cachedBufferChanged = BufferDataChange::cachedBufferChanged;
  static inline const PixelFormat PIXEL_FORMAT_UNKNOWN = PixelFormat::PIXEL_FORMAT_UNKNOWN;
  static inline const PixelFormat PIXEL_FORMAT_CUSTOM = PixelFormat::PIXEL_FORMAT_CUSTOM;
  static inline const PixelFormat PIXEL_FORMAT_TRANSLUCENT = PixelFormat::PIXEL_FORMAT_TRANSLUCENT;
  static inline const PixelFormat PIXEL_FORMAT_TRANSPARENT = PixelFormat::PIXEL_FORMAT_TRANSPARENT;
  static inline const PixelFormat PIXEL_FORMAT_OPAQUE = PixelFormat::PIXEL_FORMAT_OPAQUE;
  static inline const PixelFormat PIXEL_FORMAT_RGBA_8888 = PixelFormat::PIXEL_FORMAT_RGBA_8888;
  static inline const PixelFormat PIXEL_FORMAT_RGBX_8888 = PixelFormat::PIXEL_FORMAT_RGBX_8888;
  static inline const PixelFormat PIXEL_FORMAT_RGB_888 = PixelFormat::PIXEL_FORMAT_RGB_888;
  static inline const PixelFormat PIXEL_FORMAT_RGB_565 = PixelFormat::PIXEL_FORMAT_RGB_565;
  static inline const PixelFormat PIXEL_FORMAT_BGRA_8888 = PixelFormat::PIXEL_FORMAT_BGRA_8888;
  static inline const PixelFormat PIXEL_FORMAT_RGBA_5551 = PixelFormat::PIXEL_FORMAT_RGBA_5551;
  static inline const PixelFormat PIXEL_FORMAT_RGBA_4444 = PixelFormat::PIXEL_FORMAT_RGBA_4444;
  static inline const PixelFormat PIXEL_FORMAT_RGBA_FP16 = PixelFormat::PIXEL_FORMAT_RGBA_FP16;
  static inline const PixelFormat PIXEL_FORMAT_RGBA_1010102 = PixelFormat::PIXEL_FORMAT_RGBA_1010102;
  static inline const PixelFormat PIXEL_FORMAT_R_8 = PixelFormat::PIXEL_FORMAT_R_8;

  using FieldMetadata_BufferId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      LayerState_BufferData>;

  static constexpr FieldMetadata_BufferId kBufferId{};
  void set_buffer_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BufferId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Width =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState_BufferData>;

  static constexpr FieldMetadata_Width kWidth{};
  void set_width(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Width::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Height =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState_BufferData>;

  static constexpr FieldMetadata_Height kHeight{};
  void set_height(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Height::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameNumber =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      LayerState_BufferData>;

  static constexpr FieldMetadata_FrameNumber kFrameNumber{};
  void set_frame_number(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Flags =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerState_BufferData>;

  static constexpr FieldMetadata_Flags kFlags{};
  void set_flags(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Flags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CachedBufferId =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      LayerState_BufferData>;

  static constexpr FieldMetadata_CachedBufferId kCachedBufferId{};
  void set_cached_buffer_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CachedBufferId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PixelFormat =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      LayerState_BufferData_PixelFormat,
      LayerState_BufferData>;

  static constexpr FieldMetadata_PixelFormat kPixelFormat{};
  void set_pixel_format(LayerState_BufferData_PixelFormat value) {
    static constexpr uint32_t field_id = FieldMetadata_PixelFormat::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Usage =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      LayerState_BufferData>;

  static constexpr FieldMetadata_Usage kUsage{};
  void set_usage(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Usage::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class LayerState_Color3_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LayerState_Color3_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LayerState_Color3_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LayerState_Color3_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_r() const { return at<1>().valid(); }
  float r() const { return at<1>().as_float(); }
  bool has_g() const { return at<2>().valid(); }
  float g() const { return at<2>().as_float(); }
  bool has_b() const { return at<3>().valid(); }
  float b() const { return at<3>().as_float(); }
};

class LayerState_Color3 : public ::protozero::Message {
 public:
  using Decoder = LayerState_Color3_Decoder;
  enum : int32_t {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LayerState.Color3"; }


  using FieldMetadata_R =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_Color3>;

  static constexpr FieldMetadata_R kR{};
  void set_r(float value) {
    static constexpr uint32_t field_id = FieldMetadata_R::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_G =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_Color3>;

  static constexpr FieldMetadata_G kG{};
  void set_g(float value) {
    static constexpr uint32_t field_id = FieldMetadata_G::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_B =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_Color3>;

  static constexpr FieldMetadata_B kB{};
  void set_b(float value) {
    static constexpr uint32_t field_id = FieldMetadata_B::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }
};

class LayerState_Matrix22_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LayerState_Matrix22_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LayerState_Matrix22_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LayerState_Matrix22_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_dsdx() const { return at<1>().valid(); }
  float dsdx() const { return at<1>().as_float(); }
  bool has_dtdx() const { return at<2>().valid(); }
  float dtdx() const { return at<2>().as_float(); }
  bool has_dtdy() const { return at<3>().valid(); }
  float dtdy() const { return at<3>().as_float(); }
  bool has_dsdy() const { return at<4>().valid(); }
  float dsdy() const { return at<4>().as_float(); }
};

class LayerState_Matrix22 : public ::protozero::Message {
 public:
  using Decoder = LayerState_Matrix22_Decoder;
  enum : int32_t {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDtdyFieldNumber = 3,
    kDsdyFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LayerState.Matrix22"; }


  using FieldMetadata_Dsdx =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_Matrix22>;

  static constexpr FieldMetadata_Dsdx kDsdx{};
  void set_dsdx(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dsdx::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Dtdx =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_Matrix22>;

  static constexpr FieldMetadata_Dtdx kDtdx{};
  void set_dtdx(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dtdx::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Dtdy =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_Matrix22>;

  static constexpr FieldMetadata_Dtdy kDtdy{};
  void set_dtdy(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dtdy::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Dsdy =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      LayerState_Matrix22>;

  static constexpr FieldMetadata_Dsdy kDsdy{};
  void set_dsdy(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dsdy::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }
};

class TransactionState_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/9, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  TransactionState_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit TransactionState_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit TransactionState_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_pid() const { return at<1>().valid(); }
  int32_t pid() const { return at<1>().as_int32(); }
  bool has_uid() const { return at<2>().valid(); }
  int32_t uid() const { return at<2>().as_int32(); }
  bool has_vsync_id() const { return at<3>().valid(); }
  int64_t vsync_id() const { return at<3>().as_int64(); }
  bool has_input_event_id() const { return at<4>().valid(); }
  int32_t input_event_id() const { return at<4>().as_int32(); }
  bool has_post_time() const { return at<5>().valid(); }
  int64_t post_time() const { return at<5>().as_int64(); }
  bool has_transaction_id() const { return at<6>().valid(); }
  uint64_t transaction_id() const { return at<6>().as_uint64(); }
  bool has_layer_changes() const { return at<7>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> layer_changes() const { return GetRepeated<::protozero::ConstBytes>(7); }
  bool has_display_changes() const { return at<8>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> display_changes() const { return GetRepeated<::protozero::ConstBytes>(8); }
  bool has_merged_transaction_ids() const { return at<9>().valid(); }
  ::protozero::RepeatedFieldIterator<uint64_t> merged_transaction_ids() const { return GetRepeated<uint64_t>(9); }
};

class TransactionState : public ::protozero::Message {
 public:
  using Decoder = TransactionState_Decoder;
  enum : int32_t {
    kPidFieldNumber = 1,
    kUidFieldNumber = 2,
    kVsyncIdFieldNumber = 3,
    kInputEventIdFieldNumber = 4,
    kPostTimeFieldNumber = 5,
    kTransactionIdFieldNumber = 6,
    kLayerChangesFieldNumber = 7,
    kDisplayChangesFieldNumber = 8,
    kMergedTransactionIdsFieldNumber = 9,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.TransactionState"; }


  using FieldMetadata_Pid =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      TransactionState>;

  static constexpr FieldMetadata_Pid kPid{};
  void set_pid(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Pid::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Uid =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      TransactionState>;

  static constexpr FieldMetadata_Uid kUid{};
  void set_uid(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Uid::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VsyncId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      TransactionState>;

  static constexpr FieldMetadata_VsyncId kVsyncId{};
  void set_vsync_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_VsyncId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputEventId =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      TransactionState>;

  static constexpr FieldMetadata_InputEventId kInputEventId{};
  void set_input_event_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_InputEventId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PostTime =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      TransactionState>;

  static constexpr FieldMetadata_PostTime kPostTime{};
  void set_post_time(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PostTime::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TransactionId =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      TransactionState>;

  static constexpr FieldMetadata_TransactionId kTransactionId{};
  void set_transaction_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TransactionId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayerChanges =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LayerState,
      TransactionState>;

  static constexpr FieldMetadata_LayerChanges kLayerChanges{};
  template <typename T = LayerState> T* add_layer_changes() {
    return BeginNestedMessage<T>(7);
  }


  using FieldMetadata_DisplayChanges =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DisplayState,
      TransactionState>;

  static constexpr FieldMetadata_DisplayChanges kDisplayChanges{};
  template <typename T = DisplayState> T* add_display_changes() {
    return BeginNestedMessage<T>(8);
  }


  using FieldMetadata_MergedTransactionIds =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      TransactionState>;

  static constexpr FieldMetadata_MergedTransactionIds kMergedTransactionIds{};
  void add_merged_transaction_ids(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_MergedTransactionIds::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class Transform_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  Transform_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit Transform_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit Transform_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_dsdx() const { return at<1>().valid(); }
  float dsdx() const { return at<1>().as_float(); }
  bool has_dtdx() const { return at<2>().valid(); }
  float dtdx() const { return at<2>().as_float(); }
  bool has_dtdy() const { return at<3>().valid(); }
  float dtdy() const { return at<3>().as_float(); }
  bool has_dsdy() const { return at<4>().valid(); }
  float dsdy() const { return at<4>().as_float(); }
  bool has_tx() const { return at<5>().valid(); }
  float tx() const { return at<5>().as_float(); }
  bool has_ty() const { return at<6>().valid(); }
  float ty() const { return at<6>().as_float(); }
};

class Transform : public ::protozero::Message {
 public:
  using Decoder = Transform_Decoder;
  enum : int32_t {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDtdyFieldNumber = 3,
    kDsdyFieldNumber = 4,
    kTxFieldNumber = 5,
    kTyFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.Transform"; }


  using FieldMetadata_Dsdx =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      Transform>;

  static constexpr FieldMetadata_Dsdx kDsdx{};
  void set_dsdx(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dsdx::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Dtdx =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      Transform>;

  static constexpr FieldMetadata_Dtdx kDtdx{};
  void set_dtdx(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dtdx::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Dtdy =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      Transform>;

  static constexpr FieldMetadata_Dtdy kDtdy{};
  void set_dtdy(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dtdy::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Dsdy =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      Transform>;

  static constexpr FieldMetadata_Dsdy kDsdy{};
  void set_dsdy(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Dsdy::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Tx =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      Transform>;

  static constexpr FieldMetadata_Tx kTx{};
  void set_tx(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Tx::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Ty =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      Transform>;

  static constexpr FieldMetadata_Ty kTy{};
  void set_ty(float value) {
    static constexpr uint32_t field_id = FieldMetadata_Ty::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }
};

class LayerCreationArgs_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LayerCreationArgs_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LayerCreationArgs_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LayerCreationArgs_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_layer_id() const { return at<1>().valid(); }
  uint32_t layer_id() const { return at<1>().as_uint32(); }
  bool has_name() const { return at<2>().valid(); }
  ::protozero::ConstChars name() const { return at<2>().as_string(); }
  bool has_flags() const { return at<3>().valid(); }
  uint32_t flags() const { return at<3>().as_uint32(); }
  bool has_parent_id() const { return at<4>().valid(); }
  uint32_t parent_id() const { return at<4>().as_uint32(); }
  bool has_mirror_from_id() const { return at<5>().valid(); }
  uint32_t mirror_from_id() const { return at<5>().as_uint32(); }
  bool has_add_to_root() const { return at<6>().valid(); }
  bool add_to_root() const { return at<6>().as_bool(); }
  bool has_layer_stack_to_mirror() const { return at<7>().valid(); }
  uint32_t layer_stack_to_mirror() const { return at<7>().as_uint32(); }
};

class LayerCreationArgs : public ::protozero::Message {
 public:
  using Decoder = LayerCreationArgs_Decoder;
  enum : int32_t {
    kLayerIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kParentIdFieldNumber = 4,
    kMirrorFromIdFieldNumber = 5,
    kAddToRootFieldNumber = 6,
    kLayerStackToMirrorFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LayerCreationArgs"; }


  using FieldMetadata_LayerId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerCreationArgs>;

  static constexpr FieldMetadata_LayerId kLayerId{};
  void set_layer_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayerId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Name =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      LayerCreationArgs>;

  static constexpr FieldMetadata_Name kName{};
  void set_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Name::kFieldId, data, size);
  }
  void set_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Name::kFieldId, chars.data, chars.size);
  }
  void set_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Name::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Flags =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerCreationArgs>;

  static constexpr FieldMetadata_Flags kFlags{};
  void set_flags(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Flags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ParentId =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerCreationArgs>;

  static constexpr FieldMetadata_ParentId kParentId{};
  void set_parent_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ParentId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_MirrorFromId =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerCreationArgs>;

  static constexpr FieldMetadata_MirrorFromId kMirrorFromId{};
  void set_mirror_from_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_MirrorFromId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AddToRoot =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      LayerCreationArgs>;

  static constexpr FieldMetadata_AddToRoot kAddToRoot{};
  void set_add_to_root(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_AddToRoot::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayerStackToMirror =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LayerCreationArgs>;

  static constexpr FieldMetadata_LayerStackToMirror kLayerStackToMirror{};
  void set_layer_stack_to_mirror(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayerStackToMirror::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class DisplayInfo_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/12, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  DisplayInfo_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit DisplayInfo_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit DisplayInfo_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_layer_stack() const { return at<1>().valid(); }
  uint32_t layer_stack() const { return at<1>().as_uint32(); }
  bool has_display_id() const { return at<2>().valid(); }
  int32_t display_id() const { return at<2>().as_int32(); }
  bool has_logical_width() const { return at<3>().valid(); }
  int32_t logical_width() const { return at<3>().as_int32(); }
  bool has_logical_height() const { return at<4>().valid(); }
  int32_t logical_height() const { return at<4>().as_int32(); }
  bool has_transform_inverse() const { return at<5>().valid(); }
  ::protozero::ConstBytes transform_inverse() const { return at<5>().as_bytes(); }
  bool has_transform() const { return at<6>().valid(); }
  ::protozero::ConstBytes transform() const { return at<6>().as_bytes(); }
  bool has_receives_input() const { return at<7>().valid(); }
  bool receives_input() const { return at<7>().as_bool(); }
  bool has_is_secure() const { return at<8>().valid(); }
  bool is_secure() const { return at<8>().as_bool(); }
  bool has_is_primary() const { return at<9>().valid(); }
  bool is_primary() const { return at<9>().as_bool(); }
  bool has_is_virtual() const { return at<10>().valid(); }
  bool is_virtual() const { return at<10>().as_bool(); }
  bool has_rotation_flags() const { return at<11>().valid(); }
  int32_t rotation_flags() const { return at<11>().as_int32(); }
  bool has_transform_hint() const { return at<12>().valid(); }
  int32_t transform_hint() const { return at<12>().as_int32(); }
};

class DisplayInfo : public ::protozero::Message {
 public:
  using Decoder = DisplayInfo_Decoder;
  enum : int32_t {
    kLayerStackFieldNumber = 1,
    kDisplayIdFieldNumber = 2,
    kLogicalWidthFieldNumber = 3,
    kLogicalHeightFieldNumber = 4,
    kTransformInverseFieldNumber = 5,
    kTransformFieldNumber = 6,
    kReceivesInputFieldNumber = 7,
    kIsSecureFieldNumber = 8,
    kIsPrimaryFieldNumber = 9,
    kIsVirtualFieldNumber = 10,
    kRotationFlagsFieldNumber = 11,
    kTransformHintFieldNumber = 12,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.DisplayInfo"; }


  using FieldMetadata_LayerStack =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      DisplayInfo>;

  static constexpr FieldMetadata_LayerStack kLayerStack{};
  void set_layer_stack(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayerStack::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DisplayId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      DisplayInfo>;

  static constexpr FieldMetadata_DisplayId kDisplayId{};
  void set_display_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DisplayId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LogicalWidth =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      DisplayInfo>;

  static constexpr FieldMetadata_LogicalWidth kLogicalWidth{};
  void set_logical_width(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LogicalWidth::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LogicalHeight =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      DisplayInfo>;

  static constexpr FieldMetadata_LogicalHeight kLogicalHeight{};
  void set_logical_height(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LogicalHeight::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TransformInverse =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      Transform,
      DisplayInfo>;

  static constexpr FieldMetadata_TransformInverse kTransformInverse{};
  template <typename T = Transform> T* set_transform_inverse() {
    return BeginNestedMessage<T>(5);
  }


  using FieldMetadata_Transform =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      Transform,
      DisplayInfo>;

  static constexpr FieldMetadata_Transform kTransform{};
  template <typename T = Transform> T* set_transform() {
    return BeginNestedMessage<T>(6);
  }


  using FieldMetadata_ReceivesInput =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      DisplayInfo>;

  static constexpr FieldMetadata_ReceivesInput kReceivesInput{};
  void set_receives_input(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ReceivesInput::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsSecure =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      DisplayInfo>;

  static constexpr FieldMetadata_IsSecure kIsSecure{};
  void set_is_secure(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsSecure::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsPrimary =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      DisplayInfo>;

  static constexpr FieldMetadata_IsPrimary kIsPrimary{};
  void set_is_primary(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsPrimary::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsVirtual =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      DisplayInfo>;

  static constexpr FieldMetadata_IsVirtual kIsVirtual{};
  void set_is_virtual(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsVirtual::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RotationFlags =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      DisplayInfo>;

  static constexpr FieldMetadata_RotationFlags kRotationFlags{};
  void set_rotation_flags(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RotationFlags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TransformHint =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      DisplayInfo>;

  static constexpr FieldMetadata_TransformHint kTransformHint{};
  void set_transform_hint(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TransformHint::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class TransactionTraceEntry_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/10, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  TransactionTraceEntry_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit TransactionTraceEntry_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit TransactionTraceEntry_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_elapsed_realtime_nanos() const { return at<1>().valid(); }
  int64_t elapsed_realtime_nanos() const { return at<1>().as_int64(); }
  bool has_vsync_id() const { return at<2>().valid(); }
  int64_t vsync_id() const { return at<2>().as_int64(); }
  bool has_transactions() const { return at<3>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> transactions() const { return GetRepeated<::protozero::ConstBytes>(3); }
  bool has_added_layers() const { return at<4>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> added_layers() const { return GetRepeated<::protozero::ConstBytes>(4); }
  bool has_destroyed_layers() const { return at<5>().valid(); }
  ::protozero::RepeatedFieldIterator<uint32_t> destroyed_layers() const { return GetRepeated<uint32_t>(5); }
  bool has_added_displays() const { return at<6>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> added_displays() const { return GetRepeated<::protozero::ConstBytes>(6); }
  bool has_removed_displays() const { return at<7>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> removed_displays() const { return GetRepeated<int32_t>(7); }
  bool has_destroyed_layer_handles() const { return at<8>().valid(); }
  ::protozero::RepeatedFieldIterator<uint32_t> destroyed_layer_handles() const { return GetRepeated<uint32_t>(8); }
  bool has_displays_changed() const { return at<9>().valid(); }
  bool displays_changed() const { return at<9>().as_bool(); }
  bool has_displays() const { return at<10>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> displays() const { return GetRepeated<::protozero::ConstBytes>(10); }
};

class TransactionTraceEntry : public ::protozero::Message {
 public:
  using Decoder = TransactionTraceEntry_Decoder;
  enum : int32_t {
    kElapsedRealtimeNanosFieldNumber = 1,
    kVsyncIdFieldNumber = 2,
    kTransactionsFieldNumber = 3,
    kAddedLayersFieldNumber = 4,
    kDestroyedLayersFieldNumber = 5,
    kAddedDisplaysFieldNumber = 6,
    kRemovedDisplaysFieldNumber = 7,
    kDestroyedLayerHandlesFieldNumber = 8,
    kDisplaysChangedFieldNumber = 9,
    kDisplaysFieldNumber = 10,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.TransactionTraceEntry"; }


  using FieldMetadata_ElapsedRealtimeNanos =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_ElapsedRealtimeNanos kElapsedRealtimeNanos{};
  void set_elapsed_realtime_nanos(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ElapsedRealtimeNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VsyncId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_VsyncId kVsyncId{};
  void set_vsync_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_VsyncId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Transactions =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      TransactionState,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_Transactions kTransactions{};
  template <typename T = TransactionState> T* add_transactions() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_AddedLayers =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LayerCreationArgs,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_AddedLayers kAddedLayers{};
  template <typename T = LayerCreationArgs> T* add_added_layers() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_DestroyedLayers =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_DestroyedLayers kDestroyedLayers{};
  void add_destroyed_layers(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DestroyedLayers::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AddedDisplays =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DisplayState,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_AddedDisplays kAddedDisplays{};
  template <typename T = DisplayState> T* add_added_displays() {
    return BeginNestedMessage<T>(6);
  }


  using FieldMetadata_RemovedDisplays =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_RemovedDisplays kRemovedDisplays{};
  void add_removed_displays(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RemovedDisplays::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DestroyedLayerHandles =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_DestroyedLayerHandles kDestroyedLayerHandles{};
  void add_destroyed_layer_handles(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DestroyedLayerHandles::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DisplaysChanged =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_DisplaysChanged kDisplaysChanged{};
  void set_displays_changed(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DisplaysChanged::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Displays =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DisplayInfo,
      TransactionTraceEntry>;

  static constexpr FieldMetadata_Displays kDisplays{};
  template <typename T = DisplayInfo> T* add_displays() {
    return BeginNestedMessage<T>(10);
  }

};

class TransactionTraceFile_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  TransactionTraceFile_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit TransactionTraceFile_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit TransactionTraceFile_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_magic_number() const { return at<1>().valid(); }
  uint64_t magic_number() const { return at<1>().as_uint64(); }
  bool has_entry() const { return at<2>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> entry() const { return GetRepeated<::protozero::ConstBytes>(2); }
  bool has_real_to_elapsed_time_offset_nanos() const { return at<3>().valid(); }
  uint64_t real_to_elapsed_time_offset_nanos() const { return at<3>().as_uint64(); }
  bool has_version() const { return at<4>().valid(); }
  uint32_t version() const { return at<4>().as_uint32(); }
};

class TransactionTraceFile : public ::protozero::Message {
 public:
  using Decoder = TransactionTraceFile_Decoder;
  enum : int32_t {
    kMagicNumberFieldNumber = 1,
    kEntryFieldNumber = 2,
    kRealToElapsedTimeOffsetNanosFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.TransactionTraceFile"; }


  using MagicNumber = ::perfetto::protos::pbzero::TransactionTraceFile_MagicNumber;
  static inline const char* MagicNumber_Name(MagicNumber value) {
    return ::perfetto::protos::pbzero::TransactionTraceFile_MagicNumber_Name(value);
  }
  static inline const MagicNumber INVALID = MagicNumber::INVALID;
  static inline const MagicNumber MAGIC_NUMBER_L = MagicNumber::MAGIC_NUMBER_L;
  static inline const MagicNumber MAGIC_NUMBER_H = MagicNumber::MAGIC_NUMBER_H;

  using FieldMetadata_MagicNumber =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      TransactionTraceFile>;

  static constexpr FieldMetadata_MagicNumber kMagicNumber{};
  void set_magic_number(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_MagicNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Entry =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      TransactionTraceEntry,
      TransactionTraceFile>;

  static constexpr FieldMetadata_Entry kEntry{};
  template <typename T = TransactionTraceEntry> T* add_entry() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_RealToElapsedTimeOffsetNanos =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      TransactionTraceFile>;

  static constexpr FieldMetadata_RealToElapsedTimeOffsetNanos kRealToElapsedTimeOffsetNanos{};
  void set_real_to_elapsed_time_offset_nanos(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RealToElapsedTimeOffsetNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Version =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      TransactionTraceFile>;

  static constexpr FieldMetadata_Version kVersion{};
  void set_version(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Version::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
