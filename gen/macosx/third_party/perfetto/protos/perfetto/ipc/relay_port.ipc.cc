// DO NOT EDIT. Autogenerated by Perfetto IPC
#include "protos/perfetto/ipc/relay_port.ipc.h"
#include "perfetto/ext/ipc/codegen_helpers.h"

#include <memory>

namespace perfetto {
namespace protos {
namespace gen {
::perfetto::ipc::ServiceDescriptor* RelayPort::NewDescriptor() {
  auto* desc = new ::perfetto::ipc::ServiceDescriptor();
  desc->service_name = "RelayPort";

  desc->methods.emplace_back(::perfetto::ipc::ServiceDescriptor::Method{
     "SyncClock",
     &_IPC_Decoder<SyncClockRequest>,
     &_IPC_Decoder<SyncClockResponse>,
     &_IPC_Invoker<RelayPort, SyncClockRequest, SyncClockResponse, &RelayPort::SyncClock>});
  desc->methods.shrink_to_fit();
  return desc;
}


const ::perfetto::ipc::ServiceDescriptor& RelayPort::GetDescriptorStatic() {
  static auto* instance = NewDescriptor();
  return *instance;
}

// Host-side definitions.
RelayPort::~RelayPort() = default;

const ::perfetto::ipc::ServiceDescriptor& RelayPort::GetDescriptor() {
  return GetDescriptorStatic();
}

// Client-side definitions.
RelayPortProxy::RelayPortProxy(::perfetto::ipc::ServiceProxy::EventListener* event_listener)
    : ::perfetto::ipc::ServiceProxy(event_listener) {}

RelayPortProxy::~RelayPortProxy() = default;

const ::perfetto::ipc::ServiceDescriptor& RelayPortProxy::GetDescriptor() {
  return RelayPort::GetDescriptorStatic();
}

void RelayPortProxy::SyncClock(const SyncClockRequest& request, DeferredSyncClockResponse reply, int fd) {
  BeginInvoke("SyncClock", request, ::perfetto::ipc::DeferredBase(std::move(reply)),
              fd);
}
}  // namespace perfetto
}  // namespace protos
}  // namespace gen
