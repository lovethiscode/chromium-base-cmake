// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/vulkan_memory_event.proto

#include "protos/perfetto/trace/gpu/vulkan_memory_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_iid_)*/uint64_t{0u}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct VulkanMemoryEventAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulkanMemoryEventAnnotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulkanMemoryEventAnnotationDefaultTypeInternal() {}
  union {
    VulkanMemoryEventAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulkanMemoryEventAnnotationDefaultTypeInternal _VulkanMemoryEventAnnotation_default_instance_;
PROTOBUF_CONSTEXPR VulkanMemoryEvent::VulkanMemoryEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.operation_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.memory_address_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_size_)*/uint64_t{0u}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.allocation_scope_)*/0
  , /*decltype(_impl_.caller_iid_)*/uint64_t{0u}
  , /*decltype(_impl_.device_)*/uint64_t{0u}
  , /*decltype(_impl_.device_memory_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_type_)*/0u
  , /*decltype(_impl_.heap_)*/0u
  , /*decltype(_impl_.object_handle_)*/uint64_t{0u}} {}
struct VulkanMemoryEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulkanMemoryEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulkanMemoryEventDefaultTypeInternal() {}
  union {
    VulkanMemoryEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulkanMemoryEventDefaultTypeInternal _VulkanMemoryEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool VulkanMemoryEvent_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VulkanMemoryEvent_Source_strings[6] = {};

static const char VulkanMemoryEvent_Source_names[] =
  "SOURCE_BUFFER"
  "SOURCE_DEVICE"
  "SOURCE_DEVICE_MEMORY"
  "SOURCE_DRIVER"
  "SOURCE_IMAGE"
  "SOURCE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VulkanMemoryEvent_Source_entries[] = {
  { {VulkanMemoryEvent_Source_names + 0, 13}, 4 },
  { {VulkanMemoryEvent_Source_names + 13, 13}, 2 },
  { {VulkanMemoryEvent_Source_names + 26, 20}, 3 },
  { {VulkanMemoryEvent_Source_names + 46, 13}, 1 },
  { {VulkanMemoryEvent_Source_names + 59, 12}, 5 },
  { {VulkanMemoryEvent_Source_names + 71, 18}, 0 },
};

static const int VulkanMemoryEvent_Source_entries_by_number[] = {
  5, // 0 -> SOURCE_UNSPECIFIED
  3, // 1 -> SOURCE_DRIVER
  1, // 2 -> SOURCE_DEVICE
  2, // 3 -> SOURCE_DEVICE_MEMORY
  0, // 4 -> SOURCE_BUFFER
  4, // 5 -> SOURCE_IMAGE
};

const std::string& VulkanMemoryEvent_Source_Name(
    VulkanMemoryEvent_Source value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VulkanMemoryEvent_Source_entries,
          VulkanMemoryEvent_Source_entries_by_number,
          6, VulkanMemoryEvent_Source_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VulkanMemoryEvent_Source_entries,
      VulkanMemoryEvent_Source_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VulkanMemoryEvent_Source_strings[idx].get();
}
bool VulkanMemoryEvent_Source_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VulkanMemoryEvent_Source* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VulkanMemoryEvent_Source_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<VulkanMemoryEvent_Source>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_UNSPECIFIED;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DRIVER;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DEVICE;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DEVICE_MEMORY;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_BUFFER;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_IMAGE;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::Source_MIN;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::Source_MAX;
constexpr int VulkanMemoryEvent::Source_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool VulkanMemoryEvent_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VulkanMemoryEvent_Operation_strings[6] = {};

static const char VulkanMemoryEvent_Operation_names[] =
  "OP_ANNOTATIONS"
  "OP_BIND"
  "OP_CREATE"
  "OP_DESTROY"
  "OP_DESTROY_BOUND"
  "OP_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VulkanMemoryEvent_Operation_entries[] = {
  { {VulkanMemoryEvent_Operation_names + 0, 14}, 5 },
  { {VulkanMemoryEvent_Operation_names + 14, 7}, 3 },
  { {VulkanMemoryEvent_Operation_names + 21, 9}, 1 },
  { {VulkanMemoryEvent_Operation_names + 30, 10}, 2 },
  { {VulkanMemoryEvent_Operation_names + 40, 16}, 4 },
  { {VulkanMemoryEvent_Operation_names + 56, 14}, 0 },
};

static const int VulkanMemoryEvent_Operation_entries_by_number[] = {
  5, // 0 -> OP_UNSPECIFIED
  2, // 1 -> OP_CREATE
  3, // 2 -> OP_DESTROY
  1, // 3 -> OP_BIND
  4, // 4 -> OP_DESTROY_BOUND
  0, // 5 -> OP_ANNOTATIONS
};

const std::string& VulkanMemoryEvent_Operation_Name(
    VulkanMemoryEvent_Operation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VulkanMemoryEvent_Operation_entries,
          VulkanMemoryEvent_Operation_entries_by_number,
          6, VulkanMemoryEvent_Operation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VulkanMemoryEvent_Operation_entries,
      VulkanMemoryEvent_Operation_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VulkanMemoryEvent_Operation_strings[idx].get();
}
bool VulkanMemoryEvent_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VulkanMemoryEvent_Operation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VulkanMemoryEvent_Operation_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<VulkanMemoryEvent_Operation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_UNSPECIFIED;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_CREATE;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_DESTROY;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_BIND;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_DESTROY_BOUND;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_ANNOTATIONS;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::Operation_MIN;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::Operation_MAX;
constexpr int VulkanMemoryEvent::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool VulkanMemoryEvent_AllocationScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VulkanMemoryEvent_AllocationScope_strings[6] = {};

static const char VulkanMemoryEvent_AllocationScope_names[] =
  "SCOPE_CACHE"
  "SCOPE_COMMAND"
  "SCOPE_DEVICE"
  "SCOPE_INSTANCE"
  "SCOPE_OBJECT"
  "SCOPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VulkanMemoryEvent_AllocationScope_entries[] = {
  { {VulkanMemoryEvent_AllocationScope_names + 0, 11}, 3 },
  { {VulkanMemoryEvent_AllocationScope_names + 11, 13}, 1 },
  { {VulkanMemoryEvent_AllocationScope_names + 24, 12}, 4 },
  { {VulkanMemoryEvent_AllocationScope_names + 36, 14}, 5 },
  { {VulkanMemoryEvent_AllocationScope_names + 50, 12}, 2 },
  { {VulkanMemoryEvent_AllocationScope_names + 62, 17}, 0 },
};

static const int VulkanMemoryEvent_AllocationScope_entries_by_number[] = {
  5, // 0 -> SCOPE_UNSPECIFIED
  1, // 1 -> SCOPE_COMMAND
  4, // 2 -> SCOPE_OBJECT
  0, // 3 -> SCOPE_CACHE
  2, // 4 -> SCOPE_DEVICE
  3, // 5 -> SCOPE_INSTANCE
};

const std::string& VulkanMemoryEvent_AllocationScope_Name(
    VulkanMemoryEvent_AllocationScope value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VulkanMemoryEvent_AllocationScope_entries,
          VulkanMemoryEvent_AllocationScope_entries_by_number,
          6, VulkanMemoryEvent_AllocationScope_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VulkanMemoryEvent_AllocationScope_entries,
      VulkanMemoryEvent_AllocationScope_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VulkanMemoryEvent_AllocationScope_strings[idx].get();
}
bool VulkanMemoryEvent_AllocationScope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VulkanMemoryEvent_AllocationScope* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VulkanMemoryEvent_AllocationScope_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<VulkanMemoryEvent_AllocationScope>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_UNSPECIFIED;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_COMMAND;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_OBJECT;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_CACHE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_DEVICE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_INSTANCE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::AllocationScope_MIN;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::AllocationScope_MAX;
constexpr int VulkanMemoryEvent::AllocationScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class VulkanMemoryEventAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanMemoryEventAnnotation>()._impl_._has_bits_);
  static void set_has_key_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VulkanMemoryEventAnnotation)
}
VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(const VulkanMemoryEventAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VulkanMemoryEventAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_iid_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.key_iid_ = from._impl_.key_iid_;
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringIid: {
      _this->_internal_set_string_iid(from._internal_string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanMemoryEventAnnotation)
}

inline void VulkanMemoryEventAnnotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_iid_){uint64_t{0u}}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

VulkanMemoryEventAnnotation::~VulkanMemoryEventAnnotation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanMemoryEventAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VulkanMemoryEventAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void VulkanMemoryEventAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VulkanMemoryEventAnnotation::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.VulkanMemoryEventAnnotation)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringIid: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void VulkanMemoryEventAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanMemoryEventAnnotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_iid_ = uint64_t{0u};
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VulkanMemoryEventAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 key_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key_iid(&has_bits);
          _impl_.key_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 string_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_string_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VulkanMemoryEventAnnotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VulkanMemoryEventAnnotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 key_iid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_key_iid(), target);
  }

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_int_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_value(), target);
      break;
    }
    case kStringIid: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_string_iid(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VulkanMemoryEventAnnotation)
  return target;
}

size_t VulkanMemoryEventAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanMemoryEventAnnotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 key_iid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_key_iid());
  }

  switch (value_case()) {
    // int64 int_value = 2;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int_value());
      break;
    }
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // uint64 string_iid = 4;
    case kStringIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanMemoryEventAnnotation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VulkanMemoryEventAnnotation*>(
      &from));
}

void VulkanMemoryEventAnnotation::MergeFrom(const VulkanMemoryEventAnnotation& from) {
  VulkanMemoryEventAnnotation* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanMemoryEventAnnotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_iid()) {
    _this->_internal_set_key_iid(from._internal_key_iid());
  }
  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringIid: {
      _this->_internal_set_string_iid(from._internal_string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VulkanMemoryEventAnnotation::CopyFrom(const VulkanMemoryEventAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanMemoryEventAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanMemoryEventAnnotation::IsInitialized() const {
  return true;
}

void VulkanMemoryEventAnnotation::InternalSwap(VulkanMemoryEventAnnotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.key_iid_, other->_impl_.key_iid_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string VulkanMemoryEventAnnotation::GetTypeName() const {
  return "perfetto.protos.VulkanMemoryEventAnnotation";
}


// ===================================================================

class VulkanMemoryEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanMemoryEvent>()._impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memory_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_memory_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_caller_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_allocation_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_device_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_memory_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_heap(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_object_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

VulkanMemoryEvent::VulkanMemoryEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VulkanMemoryEvent)
}
VulkanMemoryEvent::VulkanMemoryEvent(const VulkanMemoryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VulkanMemoryEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.source_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.memory_address_){}
    , decltype(_impl_.memory_size_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.allocation_scope_){}
    , decltype(_impl_.caller_iid_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.device_memory_){}
    , decltype(_impl_.memory_type_){}
    , decltype(_impl_.heap_){}
    , decltype(_impl_.object_handle_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_handle_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.object_handle_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanMemoryEvent)
}

inline void VulkanMemoryEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.operation_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.memory_address_){uint64_t{0u}}
    , decltype(_impl_.memory_size_){uint64_t{0u}}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.allocation_scope_){0}
    , decltype(_impl_.caller_iid_){uint64_t{0u}}
    , decltype(_impl_.device_){uint64_t{0u}}
    , decltype(_impl_.device_memory_){uint64_t{0u}}
    , decltype(_impl_.memory_type_){0u}
    , decltype(_impl_.heap_){0u}
    , decltype(_impl_.object_handle_){uint64_t{0u}}
  };
}

VulkanMemoryEvent::~VulkanMemoryEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanMemoryEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VulkanMemoryEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_.~RepeatedPtrField();
}

void VulkanMemoryEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VulkanMemoryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanMemoryEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.caller_iid_) -
        reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.caller_iid_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.object_handle_) -
        reinterpret_cast<char*>(&_impl_.device_)) + sizeof(_impl_.object_handle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VulkanMemoryEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_Source_IsValid(val))) {
            _internal_set_source(static_cast<::perfetto::protos::VulkanMemoryEvent_Source>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_Operation_IsValid(val))) {
            _internal_set_operation(static_cast<::perfetto::protos::VulkanMemoryEvent_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 memory_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_memory_address(&has_bits);
          _impl_.memory_address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 memory_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_memory_size(&has_bits);
          _impl_.memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 caller_iid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_caller_iid(&has_bits);
          _impl_.caller_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_AllocationScope_IsValid(val))) {
            _internal_set_allocation_scope(static_cast<::perfetto::protos::VulkanMemoryEvent_AllocationScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 device = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_device(&has_bits);
          _impl_.device_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 device_memory = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_device_memory(&has_bits);
          _impl_.device_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 memory_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_memory_type(&has_bits);
          _impl_.memory_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_heap(&has_bits);
          _impl_.heap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 object_handle = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_object_handle(&has_bits);
          _impl_.object_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VulkanMemoryEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VulkanMemoryEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source(), target);
  }

  // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // optional uint32 pid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pid(), target);
  }

  // optional fixed64 memory_address = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_memory_address(), target);
  }

  // optional uint64 memory_size = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_memory_size(), target);
  }

  // optional uint64 caller_iid = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_caller_iid(), target);
  }

  // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_allocation_scope(), target);
  }

  // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed64 device = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(16, this->_internal_device(), target);
  }

  // optional fixed64 device_memory = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(17, this->_internal_device_memory(), target);
  }

  // optional uint32 memory_type = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_memory_type(), target);
  }

  // optional uint32 heap = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_heap(), target);
  }

  // optional fixed64 object_handle = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(20, this->_internal_object_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VulkanMemoryEvent)
  return target;
}

size_t VulkanMemoryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanMemoryEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
    }

    // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

    // optional fixed64 memory_address = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 memory_size = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_size());
    }

    // optional uint32 pid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_allocation_scope());
    }

    // optional uint64 caller_iid = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_caller_iid());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional fixed64 device = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional fixed64 device_memory = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional uint32 memory_type = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_memory_type());
    }

    // optional uint32 heap = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_heap());
    }

    // optional fixed64 object_handle = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanMemoryEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VulkanMemoryEvent*>(
      &from));
}

void VulkanMemoryEvent::MergeFrom(const VulkanMemoryEvent& from) {
  VulkanMemoryEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanMemoryEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.memory_address_ = from._impl_.memory_address_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.memory_size_ = from._impl_.memory_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.allocation_scope_ = from._impl_.allocation_scope_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.caller_iid_ = from._impl_.caller_iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.device_ = from._impl_.device_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.device_memory_ = from._impl_.device_memory_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.memory_type_ = from._impl_.memory_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.heap_ = from._impl_.heap_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.object_handle_ = from._impl_.object_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VulkanMemoryEvent::CopyFrom(const VulkanMemoryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanMemoryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanMemoryEvent::IsInitialized() const {
  return true;
}

void VulkanMemoryEvent::InternalSwap(VulkanMemoryEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulkanMemoryEvent, _impl_.object_handle_)
      + sizeof(VulkanMemoryEvent::_impl_.object_handle_)
      - PROTOBUF_FIELD_OFFSET(VulkanMemoryEvent, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

std::string VulkanMemoryEvent::GetTypeName() const {
  return "perfetto.protos.VulkanMemoryEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanMemoryEventAnnotation*
Arena::CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEventAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VulkanMemoryEventAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanMemoryEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VulkanMemoryEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
