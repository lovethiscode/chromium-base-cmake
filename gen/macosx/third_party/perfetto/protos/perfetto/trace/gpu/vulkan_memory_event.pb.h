// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/vulkan_memory_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class VulkanMemoryEvent;
struct VulkanMemoryEventDefaultTypeInternal;
extern VulkanMemoryEventDefaultTypeInternal _VulkanMemoryEvent_default_instance_;
class VulkanMemoryEventAnnotation;
struct VulkanMemoryEventAnnotationDefaultTypeInternal;
extern VulkanMemoryEventAnnotationDefaultTypeInternal _VulkanMemoryEventAnnotation_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::VulkanMemoryEvent* Arena::CreateMaybeMessage<::perfetto::protos::VulkanMemoryEvent>(Arena*);
template<> ::perfetto::protos::VulkanMemoryEventAnnotation* Arena::CreateMaybeMessage<::perfetto::protos::VulkanMemoryEventAnnotation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum VulkanMemoryEvent_Source : int {
  VulkanMemoryEvent_Source_SOURCE_UNSPECIFIED = 0,
  VulkanMemoryEvent_Source_SOURCE_DRIVER = 1,
  VulkanMemoryEvent_Source_SOURCE_DEVICE = 2,
  VulkanMemoryEvent_Source_SOURCE_DEVICE_MEMORY = 3,
  VulkanMemoryEvent_Source_SOURCE_BUFFER = 4,
  VulkanMemoryEvent_Source_SOURCE_IMAGE = 5
};
bool VulkanMemoryEvent_Source_IsValid(int value);
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent_Source_Source_MIN = VulkanMemoryEvent_Source_SOURCE_UNSPECIFIED;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent_Source_Source_MAX = VulkanMemoryEvent_Source_SOURCE_IMAGE;
constexpr int VulkanMemoryEvent_Source_Source_ARRAYSIZE = VulkanMemoryEvent_Source_Source_MAX + 1;

const std::string& VulkanMemoryEvent_Source_Name(VulkanMemoryEvent_Source value);
template<typename T>
inline const std::string& VulkanMemoryEvent_Source_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VulkanMemoryEvent_Source>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VulkanMemoryEvent_Source_Name.");
  return VulkanMemoryEvent_Source_Name(static_cast<VulkanMemoryEvent_Source>(enum_t_value));
}
bool VulkanMemoryEvent_Source_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VulkanMemoryEvent_Source* value);
enum VulkanMemoryEvent_Operation : int {
  VulkanMemoryEvent_Operation_OP_UNSPECIFIED = 0,
  VulkanMemoryEvent_Operation_OP_CREATE = 1,
  VulkanMemoryEvent_Operation_OP_DESTROY = 2,
  VulkanMemoryEvent_Operation_OP_BIND = 3,
  VulkanMemoryEvent_Operation_OP_DESTROY_BOUND = 4,
  VulkanMemoryEvent_Operation_OP_ANNOTATIONS = 5
};
bool VulkanMemoryEvent_Operation_IsValid(int value);
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent_Operation_Operation_MIN = VulkanMemoryEvent_Operation_OP_UNSPECIFIED;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent_Operation_Operation_MAX = VulkanMemoryEvent_Operation_OP_ANNOTATIONS;
constexpr int VulkanMemoryEvent_Operation_Operation_ARRAYSIZE = VulkanMemoryEvent_Operation_Operation_MAX + 1;

const std::string& VulkanMemoryEvent_Operation_Name(VulkanMemoryEvent_Operation value);
template<typename T>
inline const std::string& VulkanMemoryEvent_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VulkanMemoryEvent_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VulkanMemoryEvent_Operation_Name.");
  return VulkanMemoryEvent_Operation_Name(static_cast<VulkanMemoryEvent_Operation>(enum_t_value));
}
bool VulkanMemoryEvent_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VulkanMemoryEvent_Operation* value);
enum VulkanMemoryEvent_AllocationScope : int {
  VulkanMemoryEvent_AllocationScope_SCOPE_UNSPECIFIED = 0,
  VulkanMemoryEvent_AllocationScope_SCOPE_COMMAND = 1,
  VulkanMemoryEvent_AllocationScope_SCOPE_OBJECT = 2,
  VulkanMemoryEvent_AllocationScope_SCOPE_CACHE = 3,
  VulkanMemoryEvent_AllocationScope_SCOPE_DEVICE = 4,
  VulkanMemoryEvent_AllocationScope_SCOPE_INSTANCE = 5
};
bool VulkanMemoryEvent_AllocationScope_IsValid(int value);
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent_AllocationScope_AllocationScope_MIN = VulkanMemoryEvent_AllocationScope_SCOPE_UNSPECIFIED;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent_AllocationScope_AllocationScope_MAX = VulkanMemoryEvent_AllocationScope_SCOPE_INSTANCE;
constexpr int VulkanMemoryEvent_AllocationScope_AllocationScope_ARRAYSIZE = VulkanMemoryEvent_AllocationScope_AllocationScope_MAX + 1;

const std::string& VulkanMemoryEvent_AllocationScope_Name(VulkanMemoryEvent_AllocationScope value);
template<typename T>
inline const std::string& VulkanMemoryEvent_AllocationScope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VulkanMemoryEvent_AllocationScope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VulkanMemoryEvent_AllocationScope_Name.");
  return VulkanMemoryEvent_AllocationScope_Name(static_cast<VulkanMemoryEvent_AllocationScope>(enum_t_value));
}
bool VulkanMemoryEvent_AllocationScope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VulkanMemoryEvent_AllocationScope* value);
// ===================================================================

class VulkanMemoryEventAnnotation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.VulkanMemoryEventAnnotation) */ {
 public:
  inline VulkanMemoryEventAnnotation() : VulkanMemoryEventAnnotation(nullptr) {}
  ~VulkanMemoryEventAnnotation() override;
  explicit PROTOBUF_CONSTEXPR VulkanMemoryEventAnnotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VulkanMemoryEventAnnotation(const VulkanMemoryEventAnnotation& from);
  VulkanMemoryEventAnnotation(VulkanMemoryEventAnnotation&& from) noexcept
    : VulkanMemoryEventAnnotation() {
    *this = ::std::move(from);
  }

  inline VulkanMemoryEventAnnotation& operator=(const VulkanMemoryEventAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline VulkanMemoryEventAnnotation& operator=(VulkanMemoryEventAnnotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VulkanMemoryEventAnnotation& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 2,
    kDoubleValue = 3,
    kStringIid = 4,
    VALUE_NOT_SET = 0,
  };

  static inline const VulkanMemoryEventAnnotation* internal_default_instance() {
    return reinterpret_cast<const VulkanMemoryEventAnnotation*>(
               &_VulkanMemoryEventAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VulkanMemoryEventAnnotation& a, VulkanMemoryEventAnnotation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(VulkanMemoryEventAnnotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VulkanMemoryEventAnnotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VulkanMemoryEventAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VulkanMemoryEventAnnotation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VulkanMemoryEventAnnotation& from);
  void MergeFrom(const VulkanMemoryEventAnnotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VulkanMemoryEventAnnotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.VulkanMemoryEventAnnotation";
  }
  protected:
  explicit VulkanMemoryEventAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIidFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kStringIidFieldNumber = 4,
  };
  // optional uint64 key_iid = 1;
  bool has_key_iid() const;
  private:
  bool _internal_has_key_iid() const;
  public:
  void clear_key_iid();
  uint64_t key_iid() const;
  void set_key_iid(uint64_t value);
  private:
  uint64_t _internal_key_iid() const;
  void _internal_set_key_iid(uint64_t value);
  public:

  // int64 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int64_t int_value() const;
  void set_int_value(int64_t value);
  private:
  int64_t _internal_int_value() const;
  void _internal_set_int_value(int64_t value);
  public:

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // uint64 string_iid = 4;
  bool has_string_iid() const;
  private:
  bool _internal_has_string_iid() const;
  public:
  void clear_string_iid();
  uint64_t string_iid() const;
  void set_string_iid(uint64_t value);
  private:
  uint64_t _internal_string_iid() const;
  void _internal_set_string_iid(uint64_t value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.VulkanMemoryEventAnnotation)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_double_value();
  void set_has_string_iid();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t key_iid_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t int_value_;
      double double_value_;
      uint64_t string_iid_;
    } value_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VulkanMemoryEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.VulkanMemoryEvent) */ {
 public:
  inline VulkanMemoryEvent() : VulkanMemoryEvent(nullptr) {}
  ~VulkanMemoryEvent() override;
  explicit PROTOBUF_CONSTEXPR VulkanMemoryEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VulkanMemoryEvent(const VulkanMemoryEvent& from);
  VulkanMemoryEvent(VulkanMemoryEvent&& from) noexcept
    : VulkanMemoryEvent() {
    *this = ::std::move(from);
  }

  inline VulkanMemoryEvent& operator=(const VulkanMemoryEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VulkanMemoryEvent& operator=(VulkanMemoryEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VulkanMemoryEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VulkanMemoryEvent* internal_default_instance() {
    return reinterpret_cast<const VulkanMemoryEvent*>(
               &_VulkanMemoryEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VulkanMemoryEvent& a, VulkanMemoryEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(VulkanMemoryEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VulkanMemoryEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VulkanMemoryEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VulkanMemoryEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VulkanMemoryEvent& from);
  void MergeFrom(const VulkanMemoryEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VulkanMemoryEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.VulkanMemoryEvent";
  }
  protected:
  explicit VulkanMemoryEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef VulkanMemoryEvent_Source Source;
  static constexpr Source SOURCE_UNSPECIFIED =
    VulkanMemoryEvent_Source_SOURCE_UNSPECIFIED;
  static constexpr Source SOURCE_DRIVER =
    VulkanMemoryEvent_Source_SOURCE_DRIVER;
  static constexpr Source SOURCE_DEVICE =
    VulkanMemoryEvent_Source_SOURCE_DEVICE;
  static constexpr Source SOURCE_DEVICE_MEMORY =
    VulkanMemoryEvent_Source_SOURCE_DEVICE_MEMORY;
  static constexpr Source SOURCE_BUFFER =
    VulkanMemoryEvent_Source_SOURCE_BUFFER;
  static constexpr Source SOURCE_IMAGE =
    VulkanMemoryEvent_Source_SOURCE_IMAGE;
  static inline bool Source_IsValid(int value) {
    return VulkanMemoryEvent_Source_IsValid(value);
  }
  static constexpr Source Source_MIN =
    VulkanMemoryEvent_Source_Source_MIN;
  static constexpr Source Source_MAX =
    VulkanMemoryEvent_Source_Source_MAX;
  static constexpr int Source_ARRAYSIZE =
    VulkanMemoryEvent_Source_Source_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Source_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Source>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Source_Name.");
    return VulkanMemoryEvent_Source_Name(enum_t_value);
  }
  static inline bool Source_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Source* value) {
    return VulkanMemoryEvent_Source_Parse(name, value);
  }

  typedef VulkanMemoryEvent_Operation Operation;
  static constexpr Operation OP_UNSPECIFIED =
    VulkanMemoryEvent_Operation_OP_UNSPECIFIED;
  static constexpr Operation OP_CREATE =
    VulkanMemoryEvent_Operation_OP_CREATE;
  static constexpr Operation OP_DESTROY =
    VulkanMemoryEvent_Operation_OP_DESTROY;
  static constexpr Operation OP_BIND =
    VulkanMemoryEvent_Operation_OP_BIND;
  static constexpr Operation OP_DESTROY_BOUND =
    VulkanMemoryEvent_Operation_OP_DESTROY_BOUND;
  static constexpr Operation OP_ANNOTATIONS =
    VulkanMemoryEvent_Operation_OP_ANNOTATIONS;
  static inline bool Operation_IsValid(int value) {
    return VulkanMemoryEvent_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    VulkanMemoryEvent_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    VulkanMemoryEvent_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    VulkanMemoryEvent_Operation_Operation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return VulkanMemoryEvent_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return VulkanMemoryEvent_Operation_Parse(name, value);
  }

  typedef VulkanMemoryEvent_AllocationScope AllocationScope;
  static constexpr AllocationScope SCOPE_UNSPECIFIED =
    VulkanMemoryEvent_AllocationScope_SCOPE_UNSPECIFIED;
  static constexpr AllocationScope SCOPE_COMMAND =
    VulkanMemoryEvent_AllocationScope_SCOPE_COMMAND;
  static constexpr AllocationScope SCOPE_OBJECT =
    VulkanMemoryEvent_AllocationScope_SCOPE_OBJECT;
  static constexpr AllocationScope SCOPE_CACHE =
    VulkanMemoryEvent_AllocationScope_SCOPE_CACHE;
  static constexpr AllocationScope SCOPE_DEVICE =
    VulkanMemoryEvent_AllocationScope_SCOPE_DEVICE;
  static constexpr AllocationScope SCOPE_INSTANCE =
    VulkanMemoryEvent_AllocationScope_SCOPE_INSTANCE;
  static inline bool AllocationScope_IsValid(int value) {
    return VulkanMemoryEvent_AllocationScope_IsValid(value);
  }
  static constexpr AllocationScope AllocationScope_MIN =
    VulkanMemoryEvent_AllocationScope_AllocationScope_MIN;
  static constexpr AllocationScope AllocationScope_MAX =
    VulkanMemoryEvent_AllocationScope_AllocationScope_MAX;
  static constexpr int AllocationScope_ARRAYSIZE =
    VulkanMemoryEvent_AllocationScope_AllocationScope_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AllocationScope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AllocationScope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AllocationScope_Name.");
    return VulkanMemoryEvent_AllocationScope_Name(enum_t_value);
  }
  static inline bool AllocationScope_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AllocationScope* value) {
    return VulkanMemoryEvent_AllocationScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 9,
    kSourceFieldNumber = 1,
    kOperationFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kMemoryAddressFieldNumber = 5,
    kMemorySizeFieldNumber = 6,
    kPidFieldNumber = 4,
    kAllocationScopeFieldNumber = 8,
    kCallerIidFieldNumber = 7,
    kDeviceFieldNumber = 16,
    kDeviceMemoryFieldNumber = 17,
    kMemoryTypeFieldNumber = 18,
    kHeapFieldNumber = 19,
    kObjectHandleFieldNumber = 20,
  };
  // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::perfetto::protos::VulkanMemoryEventAnnotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::VulkanMemoryEventAnnotation >*
      mutable_annotations();
  private:
  const ::perfetto::protos::VulkanMemoryEventAnnotation& _internal_annotations(int index) const;
  ::perfetto::protos::VulkanMemoryEventAnnotation* _internal_add_annotations();
  public:
  const ::perfetto::protos::VulkanMemoryEventAnnotation& annotations(int index) const;
  ::perfetto::protos::VulkanMemoryEventAnnotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::VulkanMemoryEventAnnotation >&
      annotations() const;

  // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::perfetto::protos::VulkanMemoryEvent_Source source() const;
  void set_source(::perfetto::protos::VulkanMemoryEvent_Source value);
  private:
  ::perfetto::protos::VulkanMemoryEvent_Source _internal_source() const;
  void _internal_set_source(::perfetto::protos::VulkanMemoryEvent_Source value);
  public:

  // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::perfetto::protos::VulkanMemoryEvent_Operation operation() const;
  void set_operation(::perfetto::protos::VulkanMemoryEvent_Operation value);
  private:
  ::perfetto::protos::VulkanMemoryEvent_Operation _internal_operation() const;
  void _internal_set_operation(::perfetto::protos::VulkanMemoryEvent_Operation value);
  public:

  // optional int64 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // optional fixed64 memory_address = 5;
  bool has_memory_address() const;
  private:
  bool _internal_has_memory_address() const;
  public:
  void clear_memory_address();
  uint64_t memory_address() const;
  void set_memory_address(uint64_t value);
  private:
  uint64_t _internal_memory_address() const;
  void _internal_set_memory_address(uint64_t value);
  public:

  // optional uint64 memory_size = 6;
  bool has_memory_size() const;
  private:
  bool _internal_has_memory_size() const;
  public:
  void clear_memory_size();
  uint64_t memory_size() const;
  void set_memory_size(uint64_t value);
  private:
  uint64_t _internal_memory_size() const;
  void _internal_set_memory_size(uint64_t value);
  public:

  // optional uint32 pid = 4;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
  bool has_allocation_scope() const;
  private:
  bool _internal_has_allocation_scope() const;
  public:
  void clear_allocation_scope();
  ::perfetto::protos::VulkanMemoryEvent_AllocationScope allocation_scope() const;
  void set_allocation_scope(::perfetto::protos::VulkanMemoryEvent_AllocationScope value);
  private:
  ::perfetto::protos::VulkanMemoryEvent_AllocationScope _internal_allocation_scope() const;
  void _internal_set_allocation_scope(::perfetto::protos::VulkanMemoryEvent_AllocationScope value);
  public:

  // optional uint64 caller_iid = 7;
  bool has_caller_iid() const;
  private:
  bool _internal_has_caller_iid() const;
  public:
  void clear_caller_iid();
  uint64_t caller_iid() const;
  void set_caller_iid(uint64_t value);
  private:
  uint64_t _internal_caller_iid() const;
  void _internal_set_caller_iid(uint64_t value);
  public:

  // optional fixed64 device = 16;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint64_t device() const;
  void set_device(uint64_t value);
  private:
  uint64_t _internal_device() const;
  void _internal_set_device(uint64_t value);
  public:

  // optional fixed64 device_memory = 17;
  bool has_device_memory() const;
  private:
  bool _internal_has_device_memory() const;
  public:
  void clear_device_memory();
  uint64_t device_memory() const;
  void set_device_memory(uint64_t value);
  private:
  uint64_t _internal_device_memory() const;
  void _internal_set_device_memory(uint64_t value);
  public:

  // optional uint32 memory_type = 18;
  bool has_memory_type() const;
  private:
  bool _internal_has_memory_type() const;
  public:
  void clear_memory_type();
  uint32_t memory_type() const;
  void set_memory_type(uint32_t value);
  private:
  uint32_t _internal_memory_type() const;
  void _internal_set_memory_type(uint32_t value);
  public:

  // optional uint32 heap = 19;
  bool has_heap() const;
  private:
  bool _internal_has_heap() const;
  public:
  void clear_heap();
  uint32_t heap() const;
  void set_heap(uint32_t value);
  private:
  uint32_t _internal_heap() const;
  void _internal_set_heap(uint32_t value);
  public:

  // optional fixed64 object_handle = 20;
  bool has_object_handle() const;
  private:
  bool _internal_has_object_handle() const;
  public:
  void clear_object_handle();
  uint64_t object_handle() const;
  void set_object_handle(uint64_t value);
  private:
  uint64_t _internal_object_handle() const;
  void _internal_set_object_handle(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.VulkanMemoryEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::VulkanMemoryEventAnnotation > annotations_;
    int source_;
    int operation_;
    int64_t timestamp_;
    uint64_t memory_address_;
    uint64_t memory_size_;
    uint32_t pid_;
    int allocation_scope_;
    uint64_t caller_iid_;
    uint64_t device_;
    uint64_t device_memory_;
    uint32_t memory_type_;
    uint32_t heap_;
    uint64_t object_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VulkanMemoryEventAnnotation

// optional uint64 key_iid = 1;
inline bool VulkanMemoryEventAnnotation::_internal_has_key_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VulkanMemoryEventAnnotation::has_key_iid() const {
  return _internal_has_key_iid();
}
inline void VulkanMemoryEventAnnotation::clear_key_iid() {
  _impl_.key_iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t VulkanMemoryEventAnnotation::_internal_key_iid() const {
  return _impl_.key_iid_;
}
inline uint64_t VulkanMemoryEventAnnotation::key_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEventAnnotation.key_iid)
  return _internal_key_iid();
}
inline void VulkanMemoryEventAnnotation::_internal_set_key_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_iid_ = value;
}
inline void VulkanMemoryEventAnnotation::set_key_iid(uint64_t value) {
  _internal_set_key_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEventAnnotation.key_iid)
}

// int64 int_value = 2;
inline bool VulkanMemoryEventAnnotation::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool VulkanMemoryEventAnnotation::has_int_value() const {
  return _internal_has_int_value();
}
inline void VulkanMemoryEventAnnotation::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void VulkanMemoryEventAnnotation::clear_int_value() {
  if (_internal_has_int_value()) {
    _impl_.value_.int_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t VulkanMemoryEventAnnotation::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return _impl_.value_.int_value_;
  }
  return int64_t{0};
}
inline void VulkanMemoryEventAnnotation::_internal_set_int_value(int64_t value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}
inline int64_t VulkanMemoryEventAnnotation::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEventAnnotation.int_value)
  return _internal_int_value();
}
inline void VulkanMemoryEventAnnotation::set_int_value(int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEventAnnotation.int_value)
}

// double double_value = 3;
inline bool VulkanMemoryEventAnnotation::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool VulkanMemoryEventAnnotation::has_double_value() const {
  return _internal_has_double_value();
}
inline void VulkanMemoryEventAnnotation::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void VulkanMemoryEventAnnotation::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double VulkanMemoryEventAnnotation::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void VulkanMemoryEventAnnotation::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}
inline double VulkanMemoryEventAnnotation::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEventAnnotation.double_value)
  return _internal_double_value();
}
inline void VulkanMemoryEventAnnotation::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEventAnnotation.double_value)
}

// uint64 string_iid = 4;
inline bool VulkanMemoryEventAnnotation::_internal_has_string_iid() const {
  return value_case() == kStringIid;
}
inline bool VulkanMemoryEventAnnotation::has_string_iid() const {
  return _internal_has_string_iid();
}
inline void VulkanMemoryEventAnnotation::set_has_string_iid() {
  _impl_._oneof_case_[0] = kStringIid;
}
inline void VulkanMemoryEventAnnotation::clear_string_iid() {
  if (_internal_has_string_iid()) {
    _impl_.value_.string_iid_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t VulkanMemoryEventAnnotation::_internal_string_iid() const {
  if (_internal_has_string_iid()) {
    return _impl_.value_.string_iid_;
  }
  return uint64_t{0u};
}
inline void VulkanMemoryEventAnnotation::_internal_set_string_iid(uint64_t value) {
  if (!_internal_has_string_iid()) {
    clear_value();
    set_has_string_iid();
  }
  _impl_.value_.string_iid_ = value;
}
inline uint64_t VulkanMemoryEventAnnotation::string_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEventAnnotation.string_iid)
  return _internal_string_iid();
}
inline void VulkanMemoryEventAnnotation::set_string_iid(uint64_t value) {
  _internal_set_string_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEventAnnotation.string_iid)
}

inline bool VulkanMemoryEventAnnotation::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void VulkanMemoryEventAnnotation::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline VulkanMemoryEventAnnotation::ValueCase VulkanMemoryEventAnnotation::value_case() const {
  return VulkanMemoryEventAnnotation::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// VulkanMemoryEvent

// optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
inline bool VulkanMemoryEvent::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_source() const {
  return _internal_has_source();
}
inline void VulkanMemoryEvent::clear_source() {
  _impl_.source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::VulkanMemoryEvent_Source VulkanMemoryEvent::_internal_source() const {
  return static_cast< ::perfetto::protos::VulkanMemoryEvent_Source >(_impl_.source_);
}
inline ::perfetto::protos::VulkanMemoryEvent_Source VulkanMemoryEvent::source() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.source)
  return _internal_source();
}
inline void VulkanMemoryEvent::_internal_set_source(::perfetto::protos::VulkanMemoryEvent_Source value) {
  assert(::perfetto::protos::VulkanMemoryEvent_Source_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_ = value;
}
inline void VulkanMemoryEvent::set_source(::perfetto::protos::VulkanMemoryEvent_Source value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.source)
}

// optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
inline bool VulkanMemoryEvent::_internal_has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_operation() const {
  return _internal_has_operation();
}
inline void VulkanMemoryEvent::clear_operation() {
  _impl_.operation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::VulkanMemoryEvent_Operation VulkanMemoryEvent::_internal_operation() const {
  return static_cast< ::perfetto::protos::VulkanMemoryEvent_Operation >(_impl_.operation_);
}
inline ::perfetto::protos::VulkanMemoryEvent_Operation VulkanMemoryEvent::operation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.operation)
  return _internal_operation();
}
inline void VulkanMemoryEvent::_internal_set_operation(::perfetto::protos::VulkanMemoryEvent_Operation value) {
  assert(::perfetto::protos::VulkanMemoryEvent_Operation_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.operation_ = value;
}
inline void VulkanMemoryEvent::set_operation(::perfetto::protos::VulkanMemoryEvent_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.operation)
}

// optional int64 timestamp = 3;
inline bool VulkanMemoryEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void VulkanMemoryEvent::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t VulkanMemoryEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t VulkanMemoryEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.timestamp)
  return _internal_timestamp();
}
inline void VulkanMemoryEvent::_internal_set_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void VulkanMemoryEvent::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.timestamp)
}

// optional uint32 pid = 4;
inline bool VulkanMemoryEvent::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_pid() const {
  return _internal_has_pid();
}
inline void VulkanMemoryEvent::clear_pid() {
  _impl_.pid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t VulkanMemoryEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t VulkanMemoryEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.pid)
  return _internal_pid();
}
inline void VulkanMemoryEvent::_internal_set_pid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pid_ = value;
}
inline void VulkanMemoryEvent::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.pid)
}

// optional fixed64 memory_address = 5;
inline bool VulkanMemoryEvent::_internal_has_memory_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_memory_address() const {
  return _internal_has_memory_address();
}
inline void VulkanMemoryEvent::clear_memory_address() {
  _impl_.memory_address_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t VulkanMemoryEvent::_internal_memory_address() const {
  return _impl_.memory_address_;
}
inline uint64_t VulkanMemoryEvent::memory_address() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.memory_address)
  return _internal_memory_address();
}
inline void VulkanMemoryEvent::_internal_set_memory_address(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.memory_address_ = value;
}
inline void VulkanMemoryEvent::set_memory_address(uint64_t value) {
  _internal_set_memory_address(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.memory_address)
}

// optional uint64 memory_size = 6;
inline bool VulkanMemoryEvent::_internal_has_memory_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_memory_size() const {
  return _internal_has_memory_size();
}
inline void VulkanMemoryEvent::clear_memory_size() {
  _impl_.memory_size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t VulkanMemoryEvent::_internal_memory_size() const {
  return _impl_.memory_size_;
}
inline uint64_t VulkanMemoryEvent::memory_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.memory_size)
  return _internal_memory_size();
}
inline void VulkanMemoryEvent::_internal_set_memory_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.memory_size_ = value;
}
inline void VulkanMemoryEvent::set_memory_size(uint64_t value) {
  _internal_set_memory_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.memory_size)
}

// optional uint64 caller_iid = 7;
inline bool VulkanMemoryEvent::_internal_has_caller_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_caller_iid() const {
  return _internal_has_caller_iid();
}
inline void VulkanMemoryEvent::clear_caller_iid() {
  _impl_.caller_iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t VulkanMemoryEvent::_internal_caller_iid() const {
  return _impl_.caller_iid_;
}
inline uint64_t VulkanMemoryEvent::caller_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.caller_iid)
  return _internal_caller_iid();
}
inline void VulkanMemoryEvent::_internal_set_caller_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.caller_iid_ = value;
}
inline void VulkanMemoryEvent::set_caller_iid(uint64_t value) {
  _internal_set_caller_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.caller_iid)
}

// optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
inline bool VulkanMemoryEvent::_internal_has_allocation_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_allocation_scope() const {
  return _internal_has_allocation_scope();
}
inline void VulkanMemoryEvent::clear_allocation_scope() {
  _impl_.allocation_scope_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::perfetto::protos::VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::_internal_allocation_scope() const {
  return static_cast< ::perfetto::protos::VulkanMemoryEvent_AllocationScope >(_impl_.allocation_scope_);
}
inline ::perfetto::protos::VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::allocation_scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.allocation_scope)
  return _internal_allocation_scope();
}
inline void VulkanMemoryEvent::_internal_set_allocation_scope(::perfetto::protos::VulkanMemoryEvent_AllocationScope value) {
  assert(::perfetto::protos::VulkanMemoryEvent_AllocationScope_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.allocation_scope_ = value;
}
inline void VulkanMemoryEvent::set_allocation_scope(::perfetto::protos::VulkanMemoryEvent_AllocationScope value) {
  _internal_set_allocation_scope(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.allocation_scope)
}

// repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
inline int VulkanMemoryEvent::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int VulkanMemoryEvent::annotations_size() const {
  return _internal_annotations_size();
}
inline void VulkanMemoryEvent::clear_annotations() {
  _impl_.annotations_.Clear();
}
inline ::perfetto::protos::VulkanMemoryEventAnnotation* VulkanMemoryEvent::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.VulkanMemoryEvent.annotations)
  return _impl_.annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::VulkanMemoryEventAnnotation >*
VulkanMemoryEvent::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.VulkanMemoryEvent.annotations)
  return &_impl_.annotations_;
}
inline const ::perfetto::protos::VulkanMemoryEventAnnotation& VulkanMemoryEvent::_internal_annotations(int index) const {
  return _impl_.annotations_.Get(index);
}
inline const ::perfetto::protos::VulkanMemoryEventAnnotation& VulkanMemoryEvent::annotations(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.annotations)
  return _internal_annotations(index);
}
inline ::perfetto::protos::VulkanMemoryEventAnnotation* VulkanMemoryEvent::_internal_add_annotations() {
  return _impl_.annotations_.Add();
}
inline ::perfetto::protos::VulkanMemoryEventAnnotation* VulkanMemoryEvent::add_annotations() {
  ::perfetto::protos::VulkanMemoryEventAnnotation* _add = _internal_add_annotations();
  // @@protoc_insertion_point(field_add:perfetto.protos.VulkanMemoryEvent.annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::VulkanMemoryEventAnnotation >&
VulkanMemoryEvent::annotations() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.VulkanMemoryEvent.annotations)
  return _impl_.annotations_;
}

// optional fixed64 device = 16;
inline bool VulkanMemoryEvent::_internal_has_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_device() const {
  return _internal_has_device();
}
inline void VulkanMemoryEvent::clear_device() {
  _impl_.device_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t VulkanMemoryEvent::_internal_device() const {
  return _impl_.device_;
}
inline uint64_t VulkanMemoryEvent::device() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.device)
  return _internal_device();
}
inline void VulkanMemoryEvent::_internal_set_device(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.device_ = value;
}
inline void VulkanMemoryEvent::set_device(uint64_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.device)
}

// optional fixed64 device_memory = 17;
inline bool VulkanMemoryEvent::_internal_has_device_memory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_device_memory() const {
  return _internal_has_device_memory();
}
inline void VulkanMemoryEvent::clear_device_memory() {
  _impl_.device_memory_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t VulkanMemoryEvent::_internal_device_memory() const {
  return _impl_.device_memory_;
}
inline uint64_t VulkanMemoryEvent::device_memory() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.device_memory)
  return _internal_device_memory();
}
inline void VulkanMemoryEvent::_internal_set_device_memory(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.device_memory_ = value;
}
inline void VulkanMemoryEvent::set_device_memory(uint64_t value) {
  _internal_set_device_memory(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.device_memory)
}

// optional uint32 memory_type = 18;
inline bool VulkanMemoryEvent::_internal_has_memory_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_memory_type() const {
  return _internal_has_memory_type();
}
inline void VulkanMemoryEvent::clear_memory_type() {
  _impl_.memory_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t VulkanMemoryEvent::_internal_memory_type() const {
  return _impl_.memory_type_;
}
inline uint32_t VulkanMemoryEvent::memory_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.memory_type)
  return _internal_memory_type();
}
inline void VulkanMemoryEvent::_internal_set_memory_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.memory_type_ = value;
}
inline void VulkanMemoryEvent::set_memory_type(uint32_t value) {
  _internal_set_memory_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.memory_type)
}

// optional uint32 heap = 19;
inline bool VulkanMemoryEvent::_internal_has_heap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_heap() const {
  return _internal_has_heap();
}
inline void VulkanMemoryEvent::clear_heap() {
  _impl_.heap_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t VulkanMemoryEvent::_internal_heap() const {
  return _impl_.heap_;
}
inline uint32_t VulkanMemoryEvent::heap() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.heap)
  return _internal_heap();
}
inline void VulkanMemoryEvent::_internal_set_heap(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.heap_ = value;
}
inline void VulkanMemoryEvent::set_heap(uint32_t value) {
  _internal_set_heap(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.heap)
}

// optional fixed64 object_handle = 20;
inline bool VulkanMemoryEvent::_internal_has_object_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VulkanMemoryEvent::has_object_handle() const {
  return _internal_has_object_handle();
}
inline void VulkanMemoryEvent::clear_object_handle() {
  _impl_.object_handle_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t VulkanMemoryEvent::_internal_object_handle() const {
  return _impl_.object_handle_;
}
inline uint64_t VulkanMemoryEvent::object_handle() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanMemoryEvent.object_handle)
  return _internal_object_handle();
}
inline void VulkanMemoryEvent::_internal_set_object_handle(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.object_handle_ = value;
}
inline void VulkanMemoryEvent::set_object_handle(uint64_t value) {
  _internal_set_object_handle(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanMemoryEvent.object_handle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::VulkanMemoryEvent_Source> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::VulkanMemoryEvent_Operation> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::VulkanMemoryEvent_AllocationScope> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto
