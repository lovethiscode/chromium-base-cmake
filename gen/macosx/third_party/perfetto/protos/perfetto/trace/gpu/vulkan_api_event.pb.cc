// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/vulkan_api_event.proto

#include "protos/perfetto/trace/gpu/vulkan_api_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR VulkanApiEvent_VkDebugUtilsObjectName::VulkanApiEvent_VkDebugUtilsObjectName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vk_device_)*/uint64_t{0u}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.object_type_)*/0
  , /*decltype(_impl_.object_)*/uint64_t{0u}} {}
struct VulkanApiEvent_VkDebugUtilsObjectNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulkanApiEvent_VkDebugUtilsObjectNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulkanApiEvent_VkDebugUtilsObjectNameDefaultTypeInternal() {}
  union {
    VulkanApiEvent_VkDebugUtilsObjectName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulkanApiEvent_VkDebugUtilsObjectNameDefaultTypeInternal _VulkanApiEvent_VkDebugUtilsObjectName_default_instance_;
PROTOBUF_CONSTEXPR VulkanApiEvent_VkQueueSubmit::VulkanApiEvent_VkQueueSubmit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vk_command_buffers_)*/{}
  , /*decltype(_impl_.duration_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.tid_)*/0u
  , /*decltype(_impl_.vk_queue_)*/uint64_t{0u}
  , /*decltype(_impl_.submission_id_)*/0u} {}
struct VulkanApiEvent_VkQueueSubmitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulkanApiEvent_VkQueueSubmitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulkanApiEvent_VkQueueSubmitDefaultTypeInternal() {}
  union {
    VulkanApiEvent_VkQueueSubmit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulkanApiEvent_VkQueueSubmitDefaultTypeInternal _VulkanApiEvent_VkQueueSubmit_default_instance_;
PROTOBUF_CONSTEXPR VulkanApiEvent::VulkanApiEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct VulkanApiEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulkanApiEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulkanApiEventDefaultTypeInternal() {}
  union {
    VulkanApiEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulkanApiEventDefaultTypeInternal _VulkanApiEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class VulkanApiEvent_VkDebugUtilsObjectName::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanApiEvent_VkDebugUtilsObjectName>()._impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vk_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_object_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VulkanApiEvent_VkDebugUtilsObjectName::VulkanApiEvent_VkDebugUtilsObjectName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
}
VulkanApiEvent_VkDebugUtilsObjectName::VulkanApiEvent_VkDebugUtilsObjectName(const VulkanApiEvent_VkDebugUtilsObjectName& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VulkanApiEvent_VkDebugUtilsObjectName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_name_){}
    , decltype(_impl_.vk_device_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.object_type_){}
    , decltype(_impl_.object_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_name()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vk_device_, &from._impl_.vk_device_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_) -
    reinterpret_cast<char*>(&_impl_.vk_device_)) + sizeof(_impl_.object_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
}

inline void VulkanApiEvent_VkDebugUtilsObjectName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_name_){}
    , decltype(_impl_.vk_device_){uint64_t{0u}}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.object_type_){0}
    , decltype(_impl_.object_){uint64_t{0u}}
  };
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VulkanApiEvent_VkDebugUtilsObjectName::~VulkanApiEvent_VkDebugUtilsObjectName() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VulkanApiEvent_VkDebugUtilsObjectName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_name_.Destroy();
}

void VulkanApiEvent_VkDebugUtilsObjectName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VulkanApiEvent_VkDebugUtilsObjectName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.object_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.vk_device_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.object_) -
        reinterpret_cast<char*>(&_impl_.vk_device_)) + sizeof(_impl_.object_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VulkanApiEvent_VkDebugUtilsObjectName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vk_device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vk_device(&has_bits);
          _impl_.vk_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 object_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_object_type(&has_bits);
          _impl_.object_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_object(&has_bits);
          _impl_.object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string object_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VulkanApiEvent_VkDebugUtilsObjectName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional uint64 vk_device = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_vk_device(), target);
  }

  // optional int32 object_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_object_type(), target);
  }

  // optional uint64 object = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_object(), target);
  }

  // optional string object_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_object_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
  return target;
}

size_t VulkanApiEvent_VkDebugUtilsObjectName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string object_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_object_name());
    }

    // optional uint64 vk_device = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vk_device());
    }

    // optional uint32 pid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional int32 object_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_type());
    }

    // optional uint64 object = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanApiEvent_VkDebugUtilsObjectName::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VulkanApiEvent_VkDebugUtilsObjectName*>(
      &from));
}

void VulkanApiEvent_VkDebugUtilsObjectName::MergeFrom(const VulkanApiEvent_VkDebugUtilsObjectName& from) {
  VulkanApiEvent_VkDebugUtilsObjectName* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_object_name(from._internal_object_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vk_device_ = from._impl_.vk_device_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.object_type_ = from._impl_.object_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.object_ = from._impl_.object_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VulkanApiEvent_VkDebugUtilsObjectName::CopyFrom(const VulkanApiEvent_VkDebugUtilsObjectName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanApiEvent_VkDebugUtilsObjectName::IsInitialized() const {
  return true;
}

void VulkanApiEvent_VkDebugUtilsObjectName::InternalSwap(VulkanApiEvent_VkDebugUtilsObjectName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_name_, lhs_arena,
      &other->_impl_.object_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulkanApiEvent_VkDebugUtilsObjectName, _impl_.object_)
      + sizeof(VulkanApiEvent_VkDebugUtilsObjectName::_impl_.object_)
      - PROTOBUF_FIELD_OFFSET(VulkanApiEvent_VkDebugUtilsObjectName, _impl_.vk_device_)>(
          reinterpret_cast<char*>(&_impl_.vk_device_),
          reinterpret_cast<char*>(&other->_impl_.vk_device_));
}

std::string VulkanApiEvent_VkDebugUtilsObjectName::GetTypeName() const {
  return "perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName";
}


// ===================================================================

class VulkanApiEvent_VkQueueSubmit::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanApiEvent_VkQueueSubmit>()._impl_._has_bits_);
  static void set_has_duration_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vk_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_submission_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

VulkanApiEvent_VkQueueSubmit::VulkanApiEvent_VkQueueSubmit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
}
VulkanApiEvent_VkQueueSubmit::VulkanApiEvent_VkQueueSubmit(const VulkanApiEvent_VkQueueSubmit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VulkanApiEvent_VkQueueSubmit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vk_command_buffers_){from._impl_.vk_command_buffers_}
    , decltype(_impl_.duration_ns_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.tid_){}
    , decltype(_impl_.vk_queue_){}
    , decltype(_impl_.submission_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.duration_ns_, &from._impl_.duration_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.submission_id_) -
    reinterpret_cast<char*>(&_impl_.duration_ns_)) + sizeof(_impl_.submission_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
}

inline void VulkanApiEvent_VkQueueSubmit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vk_command_buffers_){arena}
    , decltype(_impl_.duration_ns_){uint64_t{0u}}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.tid_){0u}
    , decltype(_impl_.vk_queue_){uint64_t{0u}}
    , decltype(_impl_.submission_id_){0u}
  };
}

VulkanApiEvent_VkQueueSubmit::~VulkanApiEvent_VkQueueSubmit() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VulkanApiEvent_VkQueueSubmit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vk_command_buffers_.~RepeatedField();
}

void VulkanApiEvent_VkQueueSubmit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VulkanApiEvent_VkQueueSubmit::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vk_command_buffers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.duration_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.submission_id_) -
        reinterpret_cast<char*>(&_impl_.duration_ns_)) + sizeof(_impl_.submission_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VulkanApiEvent_VkQueueSubmit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 duration_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_duration_ns(&has_bits);
          _impl_.duration_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tid(&has_bits);
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vk_queue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_vk_queue(&has_bits);
          _impl_.vk_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 vk_command_buffers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vk_command_buffers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_vk_command_buffers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 submission_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_submission_id(&has_bits);
          _impl_.submission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VulkanApiEvent_VkQueueSubmit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 duration_ns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_duration_ns(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tid(), target);
  }

  // optional uint64 vk_queue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_vk_queue(), target);
  }

  // repeated uint64 vk_command_buffers = 5;
  for (int i = 0, n = this->_internal_vk_command_buffers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_vk_command_buffers(i), target);
  }

  // optional uint32 submission_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_submission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
  return target;
}

size_t VulkanApiEvent_VkQueueSubmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 vk_command_buffers = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.vk_command_buffers_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vk_command_buffers_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 duration_ns = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_duration_ns());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 tid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
    }

    // optional uint64 vk_queue = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vk_queue());
    }

    // optional uint32 submission_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_submission_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanApiEvent_VkQueueSubmit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VulkanApiEvent_VkQueueSubmit*>(
      &from));
}

void VulkanApiEvent_VkQueueSubmit::MergeFrom(const VulkanApiEvent_VkQueueSubmit& from) {
  VulkanApiEvent_VkQueueSubmit* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vk_command_buffers_.MergeFrom(from._impl_.vk_command_buffers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.duration_ns_ = from._impl_.duration_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tid_ = from._impl_.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vk_queue_ = from._impl_.vk_queue_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.submission_id_ = from._impl_.submission_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VulkanApiEvent_VkQueueSubmit::CopyFrom(const VulkanApiEvent_VkQueueSubmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanApiEvent_VkQueueSubmit::IsInitialized() const {
  return true;
}

void VulkanApiEvent_VkQueueSubmit::InternalSwap(VulkanApiEvent_VkQueueSubmit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vk_command_buffers_.InternalSwap(&other->_impl_.vk_command_buffers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulkanApiEvent_VkQueueSubmit, _impl_.submission_id_)
      + sizeof(VulkanApiEvent_VkQueueSubmit::_impl_.submission_id_)
      - PROTOBUF_FIELD_OFFSET(VulkanApiEvent_VkQueueSubmit, _impl_.duration_ns_)>(
          reinterpret_cast<char*>(&_impl_.duration_ns_),
          reinterpret_cast<char*>(&other->_impl_.duration_ns_));
}

std::string VulkanApiEvent_VkQueueSubmit::GetTypeName() const {
  return "perfetto.protos.VulkanApiEvent.VkQueueSubmit";
}


// ===================================================================

class VulkanApiEvent::_Internal {
 public:
  static const ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName& vk_debug_utils_object_name(const VulkanApiEvent* msg);
  static const ::perfetto::protos::VulkanApiEvent_VkQueueSubmit& vk_queue_submit(const VulkanApiEvent* msg);
};

const ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName&
VulkanApiEvent::_Internal::vk_debug_utils_object_name(const VulkanApiEvent* msg) {
  return *msg->_impl_.event_.vk_debug_utils_object_name_;
}
const ::perfetto::protos::VulkanApiEvent_VkQueueSubmit&
VulkanApiEvent::_Internal::vk_queue_submit(const VulkanApiEvent* msg) {
  return *msg->_impl_.event_.vk_queue_submit_;
}
void VulkanApiEvent::set_allocated_vk_debug_utils_object_name(::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* vk_debug_utils_object_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (vk_debug_utils_object_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vk_debug_utils_object_name);
    if (message_arena != submessage_arena) {
      vk_debug_utils_object_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vk_debug_utils_object_name, submessage_arena);
    }
    set_has_vk_debug_utils_object_name();
    _impl_.event_.vk_debug_utils_object_name_ = vk_debug_utils_object_name;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.VulkanApiEvent.vk_debug_utils_object_name)
}
void VulkanApiEvent::set_allocated_vk_queue_submit(::perfetto::protos::VulkanApiEvent_VkQueueSubmit* vk_queue_submit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (vk_queue_submit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vk_queue_submit);
    if (message_arena != submessage_arena) {
      vk_queue_submit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vk_queue_submit, submessage_arena);
    }
    set_has_vk_queue_submit();
    _impl_.event_.vk_queue_submit_ = vk_queue_submit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.VulkanApiEvent.vk_queue_submit)
}
VulkanApiEvent::VulkanApiEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VulkanApiEvent)
}
VulkanApiEvent::VulkanApiEvent(const VulkanApiEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VulkanApiEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kVkDebugUtilsObjectName: {
      _this->_internal_mutable_vk_debug_utils_object_name()->::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName::MergeFrom(
          from._internal_vk_debug_utils_object_name());
      break;
    }
    case kVkQueueSubmit: {
      _this->_internal_mutable_vk_queue_submit()->::perfetto::protos::VulkanApiEvent_VkQueueSubmit::MergeFrom(
          from._internal_vk_queue_submit());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanApiEvent)
}

inline void VulkanApiEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

VulkanApiEvent::~VulkanApiEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanApiEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VulkanApiEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void VulkanApiEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VulkanApiEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.VulkanApiEvent)
  switch (event_case()) {
    case kVkDebugUtilsObjectName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.vk_debug_utils_object_name_;
      }
      break;
    }
    case kVkQueueSubmit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.vk_queue_submit_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void VulkanApiEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanApiEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<std::string>();
}

const char* VulkanApiEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName vk_debug_utils_object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vk_debug_utils_object_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.VulkanApiEvent.VkQueueSubmit vk_queue_submit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vk_queue_submit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VulkanApiEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VulkanApiEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kVkDebugUtilsObjectName: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::vk_debug_utils_object_name(this),
          _Internal::vk_debug_utils_object_name(this).GetCachedSize(), target, stream);
      break;
    }
    case kVkQueueSubmit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::vk_queue_submit(this),
          _Internal::vk_queue_submit(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VulkanApiEvent)
  return target;
}

size_t VulkanApiEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanApiEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName vk_debug_utils_object_name = 1;
    case kVkDebugUtilsObjectName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.vk_debug_utils_object_name_);
      break;
    }
    // .perfetto.protos.VulkanApiEvent.VkQueueSubmit vk_queue_submit = 2;
    case kVkQueueSubmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.vk_queue_submit_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulkanApiEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VulkanApiEvent*>(
      &from));
}

void VulkanApiEvent::MergeFrom(const VulkanApiEvent& from) {
  VulkanApiEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanApiEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kVkDebugUtilsObjectName: {
      _this->_internal_mutable_vk_debug_utils_object_name()->::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName::MergeFrom(
          from._internal_vk_debug_utils_object_name());
      break;
    }
    case kVkQueueSubmit: {
      _this->_internal_mutable_vk_queue_submit()->::perfetto::protos::VulkanApiEvent_VkQueueSubmit::MergeFrom(
          from._internal_vk_queue_submit());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VulkanApiEvent::CopyFrom(const VulkanApiEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanApiEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanApiEvent::IsInitialized() const {
  return true;
}

void VulkanApiEvent::InternalSwap(VulkanApiEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string VulkanApiEvent::GetTypeName() const {
  return "perfetto.protos.VulkanApiEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName*
Arena::CreateMaybeMessage< ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanApiEvent_VkQueueSubmit*
Arena::CreateMaybeMessage< ::perfetto::protos::VulkanApiEvent_VkQueueSubmit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VulkanApiEvent_VkQueueSubmit >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanApiEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VulkanApiEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VulkanApiEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
