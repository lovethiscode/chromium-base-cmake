// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/memory_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class MemoryTrackerSnapshot;
struct MemoryTrackerSnapshotDefaultTypeInternal;
extern MemoryTrackerSnapshotDefaultTypeInternal _MemoryTrackerSnapshot_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot;
struct MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge;
struct MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode;
struct MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_default_instance_;
class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry;
struct MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal;
extern MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::MemoryTrackerSnapshot* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode>(Arena*);
template<> ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* Arena::CreateMaybeMessage<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units : int {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED = 0,
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_BYTES = 1,
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT = 2
};
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(int value);
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MIN = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MAX = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT;
constexpr int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_ARRAYSIZE = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MAX + 1;

const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value);
template<typename T>
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name.");
  return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(static_cast<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>(enum_t_value));
}
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units* value);
enum MemoryTrackerSnapshot_LevelOfDetail : int {
  MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL = 0,
  MemoryTrackerSnapshot_LevelOfDetail_DETAIL_LIGHT = 1,
  MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND = 2
};
bool MemoryTrackerSnapshot_LevelOfDetail_IsValid(int value);
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MIN = MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MAX = MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND;
constexpr int MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_ARRAYSIZE = MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MAX + 1;

const std::string& MemoryTrackerSnapshot_LevelOfDetail_Name(MemoryTrackerSnapshot_LevelOfDetail value);
template<typename T>
inline const std::string& MemoryTrackerSnapshot_LevelOfDetail_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemoryTrackerSnapshot_LevelOfDetail>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemoryTrackerSnapshot_LevelOfDetail_Name.");
  return MemoryTrackerSnapshot_LevelOfDetail_Name(static_cast<MemoryTrackerSnapshot_LevelOfDetail>(enum_t_value));
}
bool MemoryTrackerSnapshot_LevelOfDetail_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MemoryTrackerSnapshot_LevelOfDetail* value);
// ===================================================================

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry) */ {
 public:
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry() : MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(nullptr) {}
  ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry() override;
  explicit PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from);
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& operator=(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& operator=(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& a, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry";
  }
  protected:
  explicit MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units Units;
  static constexpr Units UNSPECIFIED =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_UNSPECIFIED;
  static constexpr Units BYTES =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_BYTES;
  static constexpr Units COUNT =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_COUNT;
  static inline bool Units_IsValid(int value) {
    return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(value);
  }
  static constexpr Units Units_MIN =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MIN;
  static constexpr Units Units_MAX =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_MAX;
  static constexpr int Units_ARRAYSIZE =
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Units_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Units_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Units>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Units_Name.");
    return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(enum_t_value);
  }
  static inline bool Units_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Units* value) {
    return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueStringFieldNumber = 4,
    kValueUint64FieldNumber = 3,
    kUnitsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value_string = 4;
  bool has_value_string() const;
  private:
  bool _internal_has_value_string() const;
  public:
  void clear_value_string();
  const std::string& value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_string();
  PROTOBUF_NODISCARD std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);
  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(const std::string& value);
  std::string* _internal_mutable_value_string();
  public:

  // optional uint64 value_uint64 = 3;
  bool has_value_uint64() const;
  private:
  bool _internal_has_value_uint64() const;
  public:
  void clear_value_uint64();
  uint64_t value_uint64() const;
  void set_value_uint64(uint64_t value);
  private:
  uint64_t _internal_value_uint64() const;
  void _internal_set_value_uint64(uint64_t value);
  public:

  // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units units() const;
  void set_units(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value);
  private:
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units _internal_units() const;
  void _internal_set_units(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
    uint64_t value_uint64_;
    int units_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode) */ {
 public:
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode() : MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(nullptr) {}
  ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode() override;
  explicit PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from);
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& operator=(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& operator=(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& a, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode";
  }
  protected:
  explicit MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry MemoryNodeEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kAbsoluteNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kSizeBytesFieldNumber = 4,
    kWeakFieldNumber = 3,
  };
  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >*
      mutable_entries();
  private:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& _internal_entries(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* _internal_add_entries();
  public:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& entries(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >&
      entries() const;

  // optional string absolute_name = 2;
  bool has_absolute_name() const;
  private:
  bool _internal_has_absolute_name() const;
  public:
  void clear_absolute_name();
  const std::string& absolute_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_absolute_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_absolute_name();
  PROTOBUF_NODISCARD std::string* release_absolute_name();
  void set_allocated_absolute_name(std::string* absolute_name);
  private:
  const std::string& _internal_absolute_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_absolute_name(const std::string& value);
  std::string* _internal_mutable_absolute_name();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 size_bytes = 4;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  uint64_t size_bytes() const;
  void set_size_bytes(uint64_t value);
  private:
  uint64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(uint64_t value);
  public:

  // optional bool weak = 3;
  bool has_weak() const;
  private:
  bool _internal_has_weak() const;
  public:
  void clear_weak();
  bool weak() const;
  void set_weak(bool value);
  private:
  bool _internal_weak() const;
  void _internal_set_weak(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_name_;
    uint64_t id_;
    uint64_t size_bytes_;
    bool weak_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge) */ {
 public:
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge() : MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(nullptr) {}
  ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge() override;
  explicit PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from);
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& operator=(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& operator=(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& a, MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge";
  }
  protected:
  explicit MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kImportanceFieldNumber = 3,
    kOverridableFieldNumber = 4,
  };
  // optional uint64 source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  uint64_t source_id() const;
  void set_source_id(uint64_t value);
  private:
  uint64_t _internal_source_id() const;
  void _internal_set_source_id(uint64_t value);
  public:

  // optional uint64 target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  uint64_t target_id() const;
  void set_target_id(uint64_t value);
  private:
  uint64_t _internal_target_id() const;
  void _internal_set_target_id(uint64_t value);
  public:

  // optional uint32 importance = 3;
  bool has_importance() const;
  private:
  bool _internal_has_importance() const;
  public:
  void clear_importance();
  uint32_t importance() const;
  void set_importance(uint32_t value);
  private:
  uint32_t _internal_importance() const;
  void _internal_set_importance(uint32_t value);
  public:

  // optional bool overridable = 4;
  bool has_overridable() const;
  private:
  bool _internal_has_overridable() const;
  public:
  void clear_overridable();
  bool overridable() const;
  void set_overridable(bool value);
  private:
  bool _internal_overridable() const;
  void _internal_set_overridable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t source_id_;
    uint64_t target_id_;
    uint32_t importance_;
    bool overridable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot_ProcessSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot) */ {
 public:
  inline MemoryTrackerSnapshot_ProcessSnapshot() : MemoryTrackerSnapshot_ProcessSnapshot(nullptr) {}
  ~MemoryTrackerSnapshot_ProcessSnapshot() override;
  explicit PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryTrackerSnapshot_ProcessSnapshot(const MemoryTrackerSnapshot_ProcessSnapshot& from);
  MemoryTrackerSnapshot_ProcessSnapshot(MemoryTrackerSnapshot_ProcessSnapshot&& from) noexcept
    : MemoryTrackerSnapshot_ProcessSnapshot() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot_ProcessSnapshot& operator=(const MemoryTrackerSnapshot_ProcessSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot_ProcessSnapshot& operator=(MemoryTrackerSnapshot_ProcessSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MemoryTrackerSnapshot_ProcessSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryTrackerSnapshot_ProcessSnapshot* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot_ProcessSnapshot*>(
               &_MemoryTrackerSnapshot_ProcessSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryTrackerSnapshot_ProcessSnapshot& a, MemoryTrackerSnapshot_ProcessSnapshot& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MemoryTrackerSnapshot_ProcessSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryTrackerSnapshot_ProcessSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryTrackerSnapshot_ProcessSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot_ProcessSnapshot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from);
  void MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot";
  }
  protected:
  explicit MemoryTrackerSnapshot_ProcessSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode MemoryNode;
  typedef MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge MemoryEdge;

  // accessors -------------------------------------------------------

  enum : int {
    kAllocatorDumpsFieldNumber = 2,
    kMemoryEdgesFieldNumber = 3,
    kPidFieldNumber = 1,
  };
  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
  int allocator_dumps_size() const;
  private:
  int _internal_allocator_dumps_size() const;
  public:
  void clear_allocator_dumps();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* mutable_allocator_dumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >*
      mutable_allocator_dumps();
  private:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& _internal_allocator_dumps(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* _internal_add_allocator_dumps();
  public:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& allocator_dumps(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* add_allocator_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >&
      allocator_dumps() const;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
  int memory_edges_size() const;
  private:
  int _internal_memory_edges_size() const;
  public:
  void clear_memory_edges();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* mutable_memory_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >*
      mutable_memory_edges();
  private:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& _internal_memory_edges(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* _internal_add_memory_edges();
  public:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& memory_edges(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* add_memory_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >&
      memory_edges() const;

  // optional int32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode > allocator_dumps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge > memory_edges_;
    int32_t pid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class MemoryTrackerSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.MemoryTrackerSnapshot) */ {
 public:
  inline MemoryTrackerSnapshot() : MemoryTrackerSnapshot(nullptr) {}
  ~MemoryTrackerSnapshot() override;
  explicit PROTOBUF_CONSTEXPR MemoryTrackerSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryTrackerSnapshot(const MemoryTrackerSnapshot& from);
  MemoryTrackerSnapshot(MemoryTrackerSnapshot&& from) noexcept
    : MemoryTrackerSnapshot() {
    *this = ::std::move(from);
  }

  inline MemoryTrackerSnapshot& operator=(const MemoryTrackerSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryTrackerSnapshot& operator=(MemoryTrackerSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MemoryTrackerSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryTrackerSnapshot* internal_default_instance() {
    return reinterpret_cast<const MemoryTrackerSnapshot*>(
               &_MemoryTrackerSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MemoryTrackerSnapshot& a, MemoryTrackerSnapshot& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MemoryTrackerSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryTrackerSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryTrackerSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryTrackerSnapshot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemoryTrackerSnapshot& from);
  void MergeFrom(const MemoryTrackerSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryTrackerSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.MemoryTrackerSnapshot";
  }
  protected:
  explicit MemoryTrackerSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemoryTrackerSnapshot_ProcessSnapshot ProcessSnapshot;

  typedef MemoryTrackerSnapshot_LevelOfDetail LevelOfDetail;
  static constexpr LevelOfDetail DETAIL_FULL =
    MemoryTrackerSnapshot_LevelOfDetail_DETAIL_FULL;
  static constexpr LevelOfDetail DETAIL_LIGHT =
    MemoryTrackerSnapshot_LevelOfDetail_DETAIL_LIGHT;
  static constexpr LevelOfDetail DETAIL_BACKGROUND =
    MemoryTrackerSnapshot_LevelOfDetail_DETAIL_BACKGROUND;
  static inline bool LevelOfDetail_IsValid(int value) {
    return MemoryTrackerSnapshot_LevelOfDetail_IsValid(value);
  }
  static constexpr LevelOfDetail LevelOfDetail_MIN =
    MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MIN;
  static constexpr LevelOfDetail LevelOfDetail_MAX =
    MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_MAX;
  static constexpr int LevelOfDetail_ARRAYSIZE =
    MemoryTrackerSnapshot_LevelOfDetail_LevelOfDetail_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LevelOfDetail_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LevelOfDetail>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LevelOfDetail_Name.");
    return MemoryTrackerSnapshot_LevelOfDetail_Name(enum_t_value);
  }
  static inline bool LevelOfDetail_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LevelOfDetail* value) {
    return MemoryTrackerSnapshot_LevelOfDetail_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProcessMemoryDumpsFieldNumber = 3,
    kGlobalDumpIdFieldNumber = 1,
    kLevelOfDetailFieldNumber = 2,
  };
  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
  int process_memory_dumps_size() const;
  private:
  int _internal_process_memory_dumps_size() const;
  public:
  void clear_process_memory_dumps();
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* mutable_process_memory_dumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >*
      mutable_process_memory_dumps();
  private:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot& _internal_process_memory_dumps(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* _internal_add_process_memory_dumps();
  public:
  const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot& process_memory_dumps(int index) const;
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* add_process_memory_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >&
      process_memory_dumps() const;

  // optional uint64 global_dump_id = 1;
  bool has_global_dump_id() const;
  private:
  bool _internal_has_global_dump_id() const;
  public:
  void clear_global_dump_id();
  uint64_t global_dump_id() const;
  void set_global_dump_id(uint64_t value);
  private:
  uint64_t _internal_global_dump_id() const;
  void _internal_set_global_dump_id(uint64_t value);
  public:

  // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
  bool has_level_of_detail() const;
  private:
  bool _internal_has_level_of_detail() const;
  public:
  void clear_level_of_detail();
  ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail level_of_detail() const;
  void set_level_of_detail(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail value);
  private:
  ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail _internal_level_of_detail() const;
  void _internal_set_level_of_detail(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.MemoryTrackerSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot > process_memory_dumps_;
    uint64_t global_dump_id_;
    int level_of_detail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry

// optional string name = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_name() const {
  return _internal_has_name();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
  return _s;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.name)
}

// optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_has_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_units() const {
  return _internal_has_units();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_units() {
  _impl_.units_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_units() const {
  return static_cast< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units >(_impl_.units_);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::units() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.units)
  return _internal_units();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_set_units(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value) {
  assert(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.units_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_units(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.units)
}

// optional uint64 value_uint64 = 3;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_has_value_uint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_value_uint64() const {
  return _internal_has_value_uint64();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_value_uint64() {
  _impl_.value_uint64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_value_uint64() const {
  return _impl_.value_uint64_;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::value_uint64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_uint64)
  return _internal_value_uint64();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_set_value_uint64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_uint64_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_value_uint64(uint64_t value) {
  _internal_set_value_uint64(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_uint64)
}

// optional string value_string = 4;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_has_value_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::has_value_string() const {
  return _internal_has_value_string();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::clear_value_string() {
  _impl_.value_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::value_string() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
  return _internal_value_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_value_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::mutable_value_string() {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
  return _s;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_value_string() const {
  return _impl_.value_string_.Get();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_set_value_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_string_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_internal_mutable_value_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_string_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::release_value_string() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
  if (!_internal_has_value_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_string_.IsDefault()) {
    _impl_.value_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::set_allocated_value_string(std::string* value_string) {
  if (value_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_string_.SetAllocated(value_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_string_.IsDefault()) {
    _impl_.value_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.value_string)
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode

// optional uint64 id = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_id() const {
  return _internal_has_id();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.id)
  return _internal_id();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.id)
}

// optional string absolute_name = 2;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_has_absolute_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_absolute_name() const {
  return _internal_has_absolute_name();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_absolute_name() {
  _impl_.absolute_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::absolute_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
  return _internal_absolute_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_absolute_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.absolute_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::mutable_absolute_name() {
  std::string* _s = _internal_mutable_absolute_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
  return _s;
}
inline const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_absolute_name() const {
  return _impl_.absolute_name_.Get();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_set_absolute_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.absolute_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_mutable_absolute_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.absolute_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::release_absolute_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
  if (!_internal_has_absolute_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.absolute_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.absolute_name_.IsDefault()) {
    _impl_.absolute_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_allocated_absolute_name(std::string* absolute_name) {
  if (absolute_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.absolute_name_.SetAllocated(absolute_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.absolute_name_.IsDefault()) {
    _impl_.absolute_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.absolute_name)
}

// optional bool weak = 3;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_has_weak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_weak() const {
  return _internal_has_weak();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_weak() {
  _impl_.weak_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_weak() const {
  return _impl_.weak_;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::weak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.weak)
  return _internal_weak();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_set_weak(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.weak_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_weak(bool value) {
  _internal_set_weak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.weak)
}

// optional uint64 size_bytes = 4;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_has_size_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_size_bytes() {
  _impl_.size_bytes_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_size_bytes() const {
  return _impl_.size_bytes_;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::size_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.size_bytes)
  return _internal_size_bytes();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_set_size_bytes(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.size_bytes_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::set_size_bytes(uint64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.size_bytes)
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
inline int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::entries_size() const {
  return _internal_entries_size();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >*
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return &_impl_.entries_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::entries(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return _internal_entries(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::add_entries() {
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >&
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::entries() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge

// optional uint64 source_id = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_source_id() const {
  return _internal_has_source_id();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_source_id() {
  _impl_.source_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_source_id() const {
  return _impl_.source_id_;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::source_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.source_id)
  return _internal_source_id();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_set_source_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_id_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_source_id(uint64_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.source_id)
}

// optional uint64 target_id = 2;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_has_target_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_target_id() const {
  return _internal_has_target_id();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_target_id() {
  _impl_.target_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_target_id() const {
  return _impl_.target_id_;
}
inline uint64_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::target_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.target_id)
  return _internal_target_id();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_set_target_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_id_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_target_id(uint64_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.target_id)
}

// optional uint32 importance = 3;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_has_importance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_importance() const {
  return _internal_has_importance();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_importance() {
  _impl_.importance_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_importance() const {
  return _impl_.importance_;
}
inline uint32_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::importance() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.importance)
  return _internal_importance();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_set_importance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.importance_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_importance(uint32_t value) {
  _internal_set_importance(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.importance)
}

// optional bool overridable = 4;
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_has_overridable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::has_overridable() const {
  return _internal_has_overridable();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::clear_overridable() {
  _impl_.overridable_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_overridable() const {
  return _impl_.overridable_;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::overridable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.overridable)
  return _internal_overridable();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_internal_set_overridable(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.overridable_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::set_overridable(bool value) {
  _internal_set_overridable(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge.overridable)
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot_ProcessSnapshot

// optional int32 pid = 1;
inline bool MemoryTrackerSnapshot_ProcessSnapshot::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot_ProcessSnapshot::has_pid() const {
  return _internal_has_pid();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t MemoryTrackerSnapshot_ProcessSnapshot::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t MemoryTrackerSnapshot_ProcessSnapshot::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.pid)
  return _internal_pid();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::_internal_set_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_ = value;
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.pid)
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
inline int MemoryTrackerSnapshot_ProcessSnapshot::_internal_allocator_dumps_size() const {
  return _impl_.allocator_dumps_.size();
}
inline int MemoryTrackerSnapshot_ProcessSnapshot::allocator_dumps_size() const {
  return _internal_allocator_dumps_size();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::clear_allocator_dumps() {
  _impl_.allocator_dumps_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* MemoryTrackerSnapshot_ProcessSnapshot::mutable_allocator_dumps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return _impl_.allocator_dumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >*
MemoryTrackerSnapshot_ProcessSnapshot::mutable_allocator_dumps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return &_impl_.allocator_dumps_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& MemoryTrackerSnapshot_ProcessSnapshot::_internal_allocator_dumps(int index) const {
  return _impl_.allocator_dumps_.Get(index);
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& MemoryTrackerSnapshot_ProcessSnapshot::allocator_dumps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return _internal_allocator_dumps(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* MemoryTrackerSnapshot_ProcessSnapshot::_internal_add_allocator_dumps() {
  return _impl_.allocator_dumps_.Add();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* MemoryTrackerSnapshot_ProcessSnapshot::add_allocator_dumps() {
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* _add = _internal_add_allocator_dumps();
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >&
MemoryTrackerSnapshot_ProcessSnapshot::allocator_dumps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps)
  return _impl_.allocator_dumps_;
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
inline int MemoryTrackerSnapshot_ProcessSnapshot::_internal_memory_edges_size() const {
  return _impl_.memory_edges_.size();
}
inline int MemoryTrackerSnapshot_ProcessSnapshot::memory_edges_size() const {
  return _internal_memory_edges_size();
}
inline void MemoryTrackerSnapshot_ProcessSnapshot::clear_memory_edges() {
  _impl_.memory_edges_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* MemoryTrackerSnapshot_ProcessSnapshot::mutable_memory_edges(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return _impl_.memory_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >*
MemoryTrackerSnapshot_ProcessSnapshot::mutable_memory_edges() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return &_impl_.memory_edges_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& MemoryTrackerSnapshot_ProcessSnapshot::_internal_memory_edges(int index) const {
  return _impl_.memory_edges_.Get(index);
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& MemoryTrackerSnapshot_ProcessSnapshot::memory_edges(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return _internal_memory_edges(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* MemoryTrackerSnapshot_ProcessSnapshot::_internal_add_memory_edges() {
  return _impl_.memory_edges_.Add();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* MemoryTrackerSnapshot_ProcessSnapshot::add_memory_edges() {
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* _add = _internal_add_memory_edges();
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >&
MemoryTrackerSnapshot_ProcessSnapshot::memory_edges() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges)
  return _impl_.memory_edges_;
}

// -------------------------------------------------------------------

// MemoryTrackerSnapshot

// optional uint64 global_dump_id = 1;
inline bool MemoryTrackerSnapshot::_internal_has_global_dump_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot::has_global_dump_id() const {
  return _internal_has_global_dump_id();
}
inline void MemoryTrackerSnapshot::clear_global_dump_id() {
  _impl_.global_dump_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t MemoryTrackerSnapshot::_internal_global_dump_id() const {
  return _impl_.global_dump_id_;
}
inline uint64_t MemoryTrackerSnapshot::global_dump_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.global_dump_id)
  return _internal_global_dump_id();
}
inline void MemoryTrackerSnapshot::_internal_set_global_dump_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.global_dump_id_ = value;
}
inline void MemoryTrackerSnapshot::set_global_dump_id(uint64_t value) {
  _internal_set_global_dump_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.global_dump_id)
}

// optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
inline bool MemoryTrackerSnapshot::_internal_has_level_of_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemoryTrackerSnapshot::has_level_of_detail() const {
  return _internal_has_level_of_detail();
}
inline void MemoryTrackerSnapshot::clear_level_of_detail() {
  _impl_.level_of_detail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::_internal_level_of_detail() const {
  return static_cast< ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail >(_impl_.level_of_detail_);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::level_of_detail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.level_of_detail)
  return _internal_level_of_detail();
}
inline void MemoryTrackerSnapshot::_internal_set_level_of_detail(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail value) {
  assert(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.level_of_detail_ = value;
}
inline void MemoryTrackerSnapshot::set_level_of_detail(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail value) {
  _internal_set_level_of_detail(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MemoryTrackerSnapshot.level_of_detail)
}

// repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
inline int MemoryTrackerSnapshot::_internal_process_memory_dumps_size() const {
  return _impl_.process_memory_dumps_.size();
}
inline int MemoryTrackerSnapshot::process_memory_dumps_size() const {
  return _internal_process_memory_dumps_size();
}
inline void MemoryTrackerSnapshot::clear_process_memory_dumps() {
  _impl_.process_memory_dumps_.Clear();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* MemoryTrackerSnapshot::mutable_process_memory_dumps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return _impl_.process_memory_dumps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >*
MemoryTrackerSnapshot::mutable_process_memory_dumps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return &_impl_.process_memory_dumps_;
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot& MemoryTrackerSnapshot::_internal_process_memory_dumps(int index) const {
  return _impl_.process_memory_dumps_.Get(index);
}
inline const ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot& MemoryTrackerSnapshot::process_memory_dumps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return _internal_process_memory_dumps(index);
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* MemoryTrackerSnapshot::_internal_add_process_memory_dumps() {
  return _impl_.process_memory_dumps_.Add();
}
inline ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* MemoryTrackerSnapshot::add_process_memory_dumps() {
  ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot* _add = _internal_add_process_memory_dumps();
  // @@protoc_insertion_point(field_add:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >&
MemoryTrackerSnapshot::process_memory_dumps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps)
  return _impl_.process_memory_dumps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto
