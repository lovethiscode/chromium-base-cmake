// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/remote_clock_sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fremote_5fclock_5fsync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fremote_5fclock_5fsync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/clock_snapshot.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fremote_5fclock_5fsync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fremote_5fclock_5fsync_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class RemoteClockSync;
struct RemoteClockSyncDefaultTypeInternal;
extern RemoteClockSyncDefaultTypeInternal _RemoteClockSync_default_instance_;
class RemoteClockSync_SyncedClocks;
struct RemoteClockSync_SyncedClocksDefaultTypeInternal;
extern RemoteClockSync_SyncedClocksDefaultTypeInternal _RemoteClockSync_SyncedClocks_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::RemoteClockSync* Arena::CreateMaybeMessage<::perfetto::protos::RemoteClockSync>(Arena*);
template<> ::perfetto::protos::RemoteClockSync_SyncedClocks* Arena::CreateMaybeMessage<::perfetto::protos::RemoteClockSync_SyncedClocks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class RemoteClockSync_SyncedClocks final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RemoteClockSync.SyncedClocks) */ {
 public:
  inline RemoteClockSync_SyncedClocks() : RemoteClockSync_SyncedClocks(nullptr) {}
  ~RemoteClockSync_SyncedClocks() override;
  explicit PROTOBUF_CONSTEXPR RemoteClockSync_SyncedClocks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteClockSync_SyncedClocks(const RemoteClockSync_SyncedClocks& from);
  RemoteClockSync_SyncedClocks(RemoteClockSync_SyncedClocks&& from) noexcept
    : RemoteClockSync_SyncedClocks() {
    *this = ::std::move(from);
  }

  inline RemoteClockSync_SyncedClocks& operator=(const RemoteClockSync_SyncedClocks& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteClockSync_SyncedClocks& operator=(RemoteClockSync_SyncedClocks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteClockSync_SyncedClocks& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteClockSync_SyncedClocks* internal_default_instance() {
    return reinterpret_cast<const RemoteClockSync_SyncedClocks*>(
               &_RemoteClockSync_SyncedClocks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RemoteClockSync_SyncedClocks& a, RemoteClockSync_SyncedClocks& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RemoteClockSync_SyncedClocks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteClockSync_SyncedClocks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteClockSync_SyncedClocks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteClockSync_SyncedClocks>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteClockSync_SyncedClocks& from);
  void MergeFrom(const RemoteClockSync_SyncedClocks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteClockSync_SyncedClocks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RemoteClockSync.SyncedClocks";
  }
  protected:
  explicit RemoteClockSync_SyncedClocks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientClocksFieldNumber = 2,
    kHostClocksFieldNumber = 3,
  };
  // optional .perfetto.protos.ClockSnapshot client_clocks = 2;
  bool has_client_clocks() const;
  private:
  bool _internal_has_client_clocks() const;
  public:
  void clear_client_clocks();
  const ::perfetto::protos::ClockSnapshot& client_clocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClockSnapshot* release_client_clocks();
  ::perfetto::protos::ClockSnapshot* mutable_client_clocks();
  void set_allocated_client_clocks(::perfetto::protos::ClockSnapshot* client_clocks);
  private:
  const ::perfetto::protos::ClockSnapshot& _internal_client_clocks() const;
  ::perfetto::protos::ClockSnapshot* _internal_mutable_client_clocks();
  public:
  void unsafe_arena_set_allocated_client_clocks(
      ::perfetto::protos::ClockSnapshot* client_clocks);
  ::perfetto::protos::ClockSnapshot* unsafe_arena_release_client_clocks();

  // optional .perfetto.protos.ClockSnapshot host_clocks = 3;
  bool has_host_clocks() const;
  private:
  bool _internal_has_host_clocks() const;
  public:
  void clear_host_clocks();
  const ::perfetto::protos::ClockSnapshot& host_clocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClockSnapshot* release_host_clocks();
  ::perfetto::protos::ClockSnapshot* mutable_host_clocks();
  void set_allocated_host_clocks(::perfetto::protos::ClockSnapshot* host_clocks);
  private:
  const ::perfetto::protos::ClockSnapshot& _internal_host_clocks() const;
  ::perfetto::protos::ClockSnapshot* _internal_mutable_host_clocks();
  public:
  void unsafe_arena_set_allocated_host_clocks(
      ::perfetto::protos::ClockSnapshot* host_clocks);
  ::perfetto::protos::ClockSnapshot* unsafe_arena_release_host_clocks();

  // @@protoc_insertion_point(class_scope:perfetto.protos.RemoteClockSync.SyncedClocks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::ClockSnapshot* client_clocks_;
    ::perfetto::protos::ClockSnapshot* host_clocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fremote_5fclock_5fsync_2eproto;
};
// -------------------------------------------------------------------

class RemoteClockSync final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RemoteClockSync) */ {
 public:
  inline RemoteClockSync() : RemoteClockSync(nullptr) {}
  ~RemoteClockSync() override;
  explicit PROTOBUF_CONSTEXPR RemoteClockSync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteClockSync(const RemoteClockSync& from);
  RemoteClockSync(RemoteClockSync&& from) noexcept
    : RemoteClockSync() {
    *this = ::std::move(from);
  }

  inline RemoteClockSync& operator=(const RemoteClockSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteClockSync& operator=(RemoteClockSync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteClockSync& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteClockSync* internal_default_instance() {
    return reinterpret_cast<const RemoteClockSync*>(
               &_RemoteClockSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RemoteClockSync& a, RemoteClockSync& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RemoteClockSync* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteClockSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteClockSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteClockSync>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteClockSync& from);
  void MergeFrom(const RemoteClockSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteClockSync* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RemoteClockSync";
  }
  protected:
  explicit RemoteClockSync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RemoteClockSync_SyncedClocks SyncedClocks;

  // accessors -------------------------------------------------------

  enum : int {
    kSyncedClocksFieldNumber = 1,
  };
  // repeated .perfetto.protos.RemoteClockSync.SyncedClocks synced_clocks = 1;
  int synced_clocks_size() const;
  private:
  int _internal_synced_clocks_size() const;
  public:
  void clear_synced_clocks();
  ::perfetto::protos::RemoteClockSync_SyncedClocks* mutable_synced_clocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RemoteClockSync_SyncedClocks >*
      mutable_synced_clocks();
  private:
  const ::perfetto::protos::RemoteClockSync_SyncedClocks& _internal_synced_clocks(int index) const;
  ::perfetto::protos::RemoteClockSync_SyncedClocks* _internal_add_synced_clocks();
  public:
  const ::perfetto::protos::RemoteClockSync_SyncedClocks& synced_clocks(int index) const;
  ::perfetto::protos::RemoteClockSync_SyncedClocks* add_synced_clocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RemoteClockSync_SyncedClocks >&
      synced_clocks() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.RemoteClockSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RemoteClockSync_SyncedClocks > synced_clocks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fremote_5fclock_5fsync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteClockSync_SyncedClocks

// optional .perfetto.protos.ClockSnapshot client_clocks = 2;
inline bool RemoteClockSync_SyncedClocks::_internal_has_client_clocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_clocks_ != nullptr);
  return value;
}
inline bool RemoteClockSync_SyncedClocks::has_client_clocks() const {
  return _internal_has_client_clocks();
}
inline const ::perfetto::protos::ClockSnapshot& RemoteClockSync_SyncedClocks::_internal_client_clocks() const {
  const ::perfetto::protos::ClockSnapshot* p = _impl_.client_clocks_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ClockSnapshot&>(
      ::perfetto::protos::_ClockSnapshot_default_instance_);
}
inline const ::perfetto::protos::ClockSnapshot& RemoteClockSync_SyncedClocks::client_clocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RemoteClockSync.SyncedClocks.client_clocks)
  return _internal_client_clocks();
}
inline void RemoteClockSync_SyncedClocks::unsafe_arena_set_allocated_client_clocks(
    ::perfetto::protos::ClockSnapshot* client_clocks) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_clocks_);
  }
  _impl_.client_clocks_ = client_clocks;
  if (client_clocks) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.RemoteClockSync.SyncedClocks.client_clocks)
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::release_client_clocks() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ClockSnapshot* temp = _impl_.client_clocks_;
  _impl_.client_clocks_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::unsafe_arena_release_client_clocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RemoteClockSync.SyncedClocks.client_clocks)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ClockSnapshot* temp = _impl_.client_clocks_;
  _impl_.client_clocks_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::_internal_mutable_client_clocks() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.client_clocks_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ClockSnapshot>(GetArenaForAllocation());
    _impl_.client_clocks_ = p;
  }
  return _impl_.client_clocks_;
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::mutable_client_clocks() {
  ::perfetto::protos::ClockSnapshot* _msg = _internal_mutable_client_clocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RemoteClockSync.SyncedClocks.client_clocks)
  return _msg;
}
inline void RemoteClockSync_SyncedClocks::set_allocated_client_clocks(::perfetto::protos::ClockSnapshot* client_clocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_clocks_);
  }
  if (client_clocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_clocks));
    if (message_arena != submessage_arena) {
      client_clocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_clocks, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.client_clocks_ = client_clocks;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RemoteClockSync.SyncedClocks.client_clocks)
}

// optional .perfetto.protos.ClockSnapshot host_clocks = 3;
inline bool RemoteClockSync_SyncedClocks::_internal_has_host_clocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.host_clocks_ != nullptr);
  return value;
}
inline bool RemoteClockSync_SyncedClocks::has_host_clocks() const {
  return _internal_has_host_clocks();
}
inline const ::perfetto::protos::ClockSnapshot& RemoteClockSync_SyncedClocks::_internal_host_clocks() const {
  const ::perfetto::protos::ClockSnapshot* p = _impl_.host_clocks_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ClockSnapshot&>(
      ::perfetto::protos::_ClockSnapshot_default_instance_);
}
inline const ::perfetto::protos::ClockSnapshot& RemoteClockSync_SyncedClocks::host_clocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RemoteClockSync.SyncedClocks.host_clocks)
  return _internal_host_clocks();
}
inline void RemoteClockSync_SyncedClocks::unsafe_arena_set_allocated_host_clocks(
    ::perfetto::protos::ClockSnapshot* host_clocks) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_clocks_);
  }
  _impl_.host_clocks_ = host_clocks;
  if (host_clocks) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.RemoteClockSync.SyncedClocks.host_clocks)
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::release_host_clocks() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ClockSnapshot* temp = _impl_.host_clocks_;
  _impl_.host_clocks_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::unsafe_arena_release_host_clocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RemoteClockSync.SyncedClocks.host_clocks)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ClockSnapshot* temp = _impl_.host_clocks_;
  _impl_.host_clocks_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::_internal_mutable_host_clocks() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.host_clocks_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ClockSnapshot>(GetArenaForAllocation());
    _impl_.host_clocks_ = p;
  }
  return _impl_.host_clocks_;
}
inline ::perfetto::protos::ClockSnapshot* RemoteClockSync_SyncedClocks::mutable_host_clocks() {
  ::perfetto::protos::ClockSnapshot* _msg = _internal_mutable_host_clocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RemoteClockSync.SyncedClocks.host_clocks)
  return _msg;
}
inline void RemoteClockSync_SyncedClocks::set_allocated_host_clocks(::perfetto::protos::ClockSnapshot* host_clocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_clocks_);
  }
  if (host_clocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_clocks));
    if (message_arena != submessage_arena) {
      host_clocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_clocks, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.host_clocks_ = host_clocks;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RemoteClockSync.SyncedClocks.host_clocks)
}

// -------------------------------------------------------------------

// RemoteClockSync

// repeated .perfetto.protos.RemoteClockSync.SyncedClocks synced_clocks = 1;
inline int RemoteClockSync::_internal_synced_clocks_size() const {
  return _impl_.synced_clocks_.size();
}
inline int RemoteClockSync::synced_clocks_size() const {
  return _internal_synced_clocks_size();
}
inline void RemoteClockSync::clear_synced_clocks() {
  _impl_.synced_clocks_.Clear();
}
inline ::perfetto::protos::RemoteClockSync_SyncedClocks* RemoteClockSync::mutable_synced_clocks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RemoteClockSync.synced_clocks)
  return _impl_.synced_clocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RemoteClockSync_SyncedClocks >*
RemoteClockSync::mutable_synced_clocks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.RemoteClockSync.synced_clocks)
  return &_impl_.synced_clocks_;
}
inline const ::perfetto::protos::RemoteClockSync_SyncedClocks& RemoteClockSync::_internal_synced_clocks(int index) const {
  return _impl_.synced_clocks_.Get(index);
}
inline const ::perfetto::protos::RemoteClockSync_SyncedClocks& RemoteClockSync::synced_clocks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RemoteClockSync.synced_clocks)
  return _internal_synced_clocks(index);
}
inline ::perfetto::protos::RemoteClockSync_SyncedClocks* RemoteClockSync::_internal_add_synced_clocks() {
  return _impl_.synced_clocks_.Add();
}
inline ::perfetto::protos::RemoteClockSync_SyncedClocks* RemoteClockSync::add_synced_clocks() {
  ::perfetto::protos::RemoteClockSync_SyncedClocks* _add = _internal_add_synced_clocks();
  // @@protoc_insertion_point(field_add:perfetto.protos.RemoteClockSync.synced_clocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::RemoteClockSync_SyncedClocks >&
RemoteClockSync::synced_clocks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.RemoteClockSync.synced_clocks)
  return _impl_.synced_clocks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fremote_5fclock_5fsync_2eproto
