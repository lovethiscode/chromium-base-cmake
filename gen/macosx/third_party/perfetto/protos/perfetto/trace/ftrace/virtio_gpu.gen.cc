#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/virtio_gpu.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

VirtioGpuCmdResponseFtraceEvent::VirtioGpuCmdResponseFtraceEvent() = default;
VirtioGpuCmdResponseFtraceEvent::~VirtioGpuCmdResponseFtraceEvent() = default;
VirtioGpuCmdResponseFtraceEvent::VirtioGpuCmdResponseFtraceEvent(const VirtioGpuCmdResponseFtraceEvent&) = default;
VirtioGpuCmdResponseFtraceEvent& VirtioGpuCmdResponseFtraceEvent::operator=(const VirtioGpuCmdResponseFtraceEvent&) = default;
VirtioGpuCmdResponseFtraceEvent::VirtioGpuCmdResponseFtraceEvent(VirtioGpuCmdResponseFtraceEvent&&) noexcept = default;
VirtioGpuCmdResponseFtraceEvent& VirtioGpuCmdResponseFtraceEvent::operator=(VirtioGpuCmdResponseFtraceEvent&&) = default;

bool VirtioGpuCmdResponseFtraceEvent::operator==(const VirtioGpuCmdResponseFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(ctx_id_, other.ctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_id_, other.fence_id_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(num_free_, other.num_free_)
   && ::protozero::internal::gen_helpers::EqualsField(seqno_, other.seqno_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(vq_, other.vq_);
}

bool VirtioGpuCmdResponseFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* ctx_id */:
        field.get(&ctx_id_);
        break;
      case 2 /* dev */:
        field.get(&dev_);
        break;
      case 3 /* fence_id */:
        field.get(&fence_id_);
        break;
      case 4 /* flags */:
        field.get(&flags_);
        break;
      case 5 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 6 /* num_free */:
        field.get(&num_free_);
        break;
      case 7 /* seqno */:
        field.get(&seqno_);
        break;
      case 8 /* type */:
        field.get(&type_);
        break;
      case 9 /* vq */:
        field.get(&vq_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string VirtioGpuCmdResponseFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> VirtioGpuCmdResponseFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void VirtioGpuCmdResponseFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: ctx_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, ctx_id_, msg);
  }

  // Field 2: dev
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, dev_, msg);
  }

  // Field 3: fence_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, fence_id_, msg);
  }

  // Field 4: flags
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, flags_, msg);
  }

  // Field 5: name
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, name_, msg);
  }

  // Field 6: num_free
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, num_free_, msg);
  }

  // Field 7: seqno
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, seqno_, msg);
  }

  // Field 8: type
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, type_, msg);
  }

  // Field 9: vq
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, vq_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


VirtioGpuCmdQueueFtraceEvent::VirtioGpuCmdQueueFtraceEvent() = default;
VirtioGpuCmdQueueFtraceEvent::~VirtioGpuCmdQueueFtraceEvent() = default;
VirtioGpuCmdQueueFtraceEvent::VirtioGpuCmdQueueFtraceEvent(const VirtioGpuCmdQueueFtraceEvent&) = default;
VirtioGpuCmdQueueFtraceEvent& VirtioGpuCmdQueueFtraceEvent::operator=(const VirtioGpuCmdQueueFtraceEvent&) = default;
VirtioGpuCmdQueueFtraceEvent::VirtioGpuCmdQueueFtraceEvent(VirtioGpuCmdQueueFtraceEvent&&) noexcept = default;
VirtioGpuCmdQueueFtraceEvent& VirtioGpuCmdQueueFtraceEvent::operator=(VirtioGpuCmdQueueFtraceEvent&&) = default;

bool VirtioGpuCmdQueueFtraceEvent::operator==(const VirtioGpuCmdQueueFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(ctx_id_, other.ctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_id_, other.fence_id_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(num_free_, other.num_free_)
   && ::protozero::internal::gen_helpers::EqualsField(seqno_, other.seqno_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(vq_, other.vq_);
}

bool VirtioGpuCmdQueueFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* ctx_id */:
        field.get(&ctx_id_);
        break;
      case 2 /* dev */:
        field.get(&dev_);
        break;
      case 3 /* fence_id */:
        field.get(&fence_id_);
        break;
      case 4 /* flags */:
        field.get(&flags_);
        break;
      case 5 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 6 /* num_free */:
        field.get(&num_free_);
        break;
      case 7 /* seqno */:
        field.get(&seqno_);
        break;
      case 8 /* type */:
        field.get(&type_);
        break;
      case 9 /* vq */:
        field.get(&vq_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string VirtioGpuCmdQueueFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> VirtioGpuCmdQueueFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void VirtioGpuCmdQueueFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: ctx_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, ctx_id_, msg);
  }

  // Field 2: dev
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, dev_, msg);
  }

  // Field 3: fence_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, fence_id_, msg);
  }

  // Field 4: flags
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, flags_, msg);
  }

  // Field 5: name
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, name_, msg);
  }

  // Field 6: num_free
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, num_free_, msg);
  }

  // Field 7: seqno
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, seqno_, msg);
  }

  // Field 8: type
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, type_, msg);
  }

  // Field 9: vq
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, vq_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
