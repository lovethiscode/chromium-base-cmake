#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/sync.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

SyncWaitFtraceEvent::SyncWaitFtraceEvent() = default;
SyncWaitFtraceEvent::~SyncWaitFtraceEvent() = default;
SyncWaitFtraceEvent::SyncWaitFtraceEvent(const SyncWaitFtraceEvent&) = default;
SyncWaitFtraceEvent& SyncWaitFtraceEvent::operator=(const SyncWaitFtraceEvent&) = default;
SyncWaitFtraceEvent::SyncWaitFtraceEvent(SyncWaitFtraceEvent&&) noexcept = default;
SyncWaitFtraceEvent& SyncWaitFtraceEvent::operator=(SyncWaitFtraceEvent&&) = default;

bool SyncWaitFtraceEvent::operator==(const SyncWaitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(status_, other.status_)
   && ::protozero::internal::gen_helpers::EqualsField(begin_, other.begin_);
}

bool SyncWaitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* status */:
        field.get(&status_);
        break;
      case 3 /* begin */:
        field.get(&begin_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SyncWaitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SyncWaitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SyncWaitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: status
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, status_, msg);
  }

  // Field 3: begin
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, begin_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SyncTimelineFtraceEvent::SyncTimelineFtraceEvent() = default;
SyncTimelineFtraceEvent::~SyncTimelineFtraceEvent() = default;
SyncTimelineFtraceEvent::SyncTimelineFtraceEvent(const SyncTimelineFtraceEvent&) = default;
SyncTimelineFtraceEvent& SyncTimelineFtraceEvent::operator=(const SyncTimelineFtraceEvent&) = default;
SyncTimelineFtraceEvent::SyncTimelineFtraceEvent(SyncTimelineFtraceEvent&&) noexcept = default;
SyncTimelineFtraceEvent& SyncTimelineFtraceEvent::operator=(SyncTimelineFtraceEvent&&) = default;

bool SyncTimelineFtraceEvent::operator==(const SyncTimelineFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool SyncTimelineFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* value */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SyncTimelineFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SyncTimelineFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SyncTimelineFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SyncPtFtraceEvent::SyncPtFtraceEvent() = default;
SyncPtFtraceEvent::~SyncPtFtraceEvent() = default;
SyncPtFtraceEvent::SyncPtFtraceEvent(const SyncPtFtraceEvent&) = default;
SyncPtFtraceEvent& SyncPtFtraceEvent::operator=(const SyncPtFtraceEvent&) = default;
SyncPtFtraceEvent::SyncPtFtraceEvent(SyncPtFtraceEvent&&) noexcept = default;
SyncPtFtraceEvent& SyncPtFtraceEvent::operator=(SyncPtFtraceEvent&&) = default;

bool SyncPtFtraceEvent::operator==(const SyncPtFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(timeline_, other.timeline_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool SyncPtFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* timeline */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &timeline_);
        break;
      case 2 /* value */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SyncPtFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SyncPtFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SyncPtFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: timeline
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, timeline_, msg);
  }

  // Field 2: value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
