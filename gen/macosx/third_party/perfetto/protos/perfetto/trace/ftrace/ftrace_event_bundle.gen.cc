#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_stats.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_event.gen.h"
#include "protos/perfetto/trace/ftrace/generic.gen.h"
#include "protos/perfetto/trace/ftrace/workqueue.gen.h"
#include "protos/perfetto/trace/ftrace/vmscan.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_video.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_gpu.gen.h"
#include "protos/perfetto/trace/ftrace/v4l2.gen.h"
#include "protos/perfetto/trace/ftrace/ufs.gen.h"
#include "protos/perfetto/trace/ftrace/trusty.gen.h"
#include "protos/perfetto/trace/ftrace/thermal_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/thermal.gen.h"
#include "protos/perfetto/trace/ftrace/tcp.gen.h"
#include "protos/perfetto/trace/ftrace/task.gen.h"
#include "protos/perfetto/trace/ftrace/systrace.gen.h"
#include "protos/perfetto/trace/ftrace/synthetic.gen.h"
#include "protos/perfetto/trace/ftrace/sync.gen.h"
#include "protos/perfetto/trace/ftrace/sock.gen.h"
#include "protos/perfetto/trace/ftrace/skb.gen.h"
#include "protos/perfetto/trace/ftrace/signal.gen.h"
#include "protos/perfetto/trace/ftrace/sde.gen.h"
#include "protos/perfetto/trace/ftrace/scm.gen.h"
#include "protos/perfetto/trace/ftrace/sched.gen.h"
#include "protos/perfetto/trace/ftrace/samsung.gen.h"
#include "protos/perfetto/trace/ftrace/rpm.gen.h"
#include "protos/perfetto/trace/ftrace/regulator.gen.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.gen.h"
#include "protos/perfetto/trace/ftrace/printk.gen.h"
#include "protos/perfetto/trace/ftrace/power.gen.h"
#include "protos/perfetto/trace/ftrace/perf_trace_counters.gen.h"
#include "protos/perfetto/trace/ftrace/panel.gen.h"
#include "protos/perfetto/trace/ftrace/oom.gen.h"
#include "protos/perfetto/trace/ftrace/net.gen.h"
#include "protos/perfetto/trace/ftrace/mm_event.gen.h"
#include "protos/perfetto/trace/ftrace/mdss.gen.h"
#include "protos/perfetto/trace/ftrace/mali.gen.h"
#include "protos/perfetto/trace/ftrace/lwis.gen.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.gen.h"
#include "protos/perfetto/trace/ftrace/kvm.gen.h"
#include "protos/perfetto/trace/ftrace/kmem.gen.h"
#include "protos/perfetto/trace/ftrace/kgsl.gen.h"
#include "protos/perfetto/trace/ftrace/irq.gen.h"
#include "protos/perfetto/trace/ftrace/ipi.gen.h"
#include "protos/perfetto/trace/ftrace/ion.gen.h"
#include "protos/perfetto/trace/ftrace/i2c.gen.h"
#include "protos/perfetto/trace/ftrace/hyp.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_scheduler.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.gen.h"
#include "protos/perfetto/trace/ftrace/google_irm_trace.gen.h"
#include "protos/perfetto/trace/ftrace/google_icc_trace.gen.h"
#include "protos/perfetto/trace/ftrace/g2d.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace.gen.h"
#include "protos/perfetto/trace/ftrace/filemap.gen.h"
#include "protos/perfetto/trace/ftrace/fence.gen.h"
#include "protos/perfetto/trace/ftrace/fastrpc.gen.h"
#include "protos/perfetto/trace/ftrace/f2fs.gen.h"
#include "protos/perfetto/trace/ftrace/ext4.gen.h"
#include "protos/perfetto/trace/ftrace/drm.gen.h"
#include "protos/perfetto/trace/ftrace/dpu.gen.h"
#include "protos/perfetto/trace/ftrace/dmabuf_heap.gen.h"
#include "protos/perfetto/trace/ftrace/dma_fence.gen.h"
#include "protos/perfetto/trace/ftrace/dcvsh.gen.h"
#include "protos/perfetto/trace/ftrace/cros_ec.gen.h"
#include "protos/perfetto/trace/ftrace/cpuhp.gen.h"
#include "protos/perfetto/trace/ftrace/compaction.gen.h"
#include "protos/perfetto/trace/ftrace/cma.gen.h"
#include "protos/perfetto/trace/ftrace/clk.gen.h"
#include "protos/perfetto/trace/ftrace/cgroup.gen.h"
#include "protos/perfetto/trace/ftrace/block.gen.h"
#include "protos/perfetto/trace/ftrace/binder.gen.h"
#include "protos/perfetto/trace/ftrace/bcl_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/android_fs.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FtraceEventBundle::FtraceEventBundle() = default;
FtraceEventBundle::~FtraceEventBundle() = default;
FtraceEventBundle::FtraceEventBundle(const FtraceEventBundle&) = default;
FtraceEventBundle& FtraceEventBundle::operator=(const FtraceEventBundle&) = default;
FtraceEventBundle::FtraceEventBundle(FtraceEventBundle&&) noexcept = default;
FtraceEventBundle& FtraceEventBundle::operator=(FtraceEventBundle&&) = default;

bool FtraceEventBundle::operator==(const FtraceEventBundle& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_, other.cpu_)
   && ::protozero::internal::gen_helpers::EqualsField(event_, other.event_)
   && ::protozero::internal::gen_helpers::EqualsField(lost_events_, other.lost_events_)
   && ::protozero::internal::gen_helpers::EqualsField(compact_sched_, other.compact_sched_)
   && ::protozero::internal::gen_helpers::EqualsField(ftrace_clock_, other.ftrace_clock_)
   && ::protozero::internal::gen_helpers::EqualsField(ftrace_timestamp_, other.ftrace_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(boot_timestamp_, other.boot_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(error_, other.error_)
   && ::protozero::internal::gen_helpers::EqualsField(last_read_event_timestamp_, other.last_read_event_timestamp_);
}

int FtraceEventBundle::event_size() const { return static_cast<int>(event_.size()); }
void FtraceEventBundle::clear_event() { event_.clear(); }
FtraceEvent* FtraceEventBundle::add_event() { event_.emplace_back(); return &event_.back(); }
int FtraceEventBundle::error_size() const { return static_cast<int>(error_.size()); }
void FtraceEventBundle::clear_error() { error_.clear(); }
FtraceEventBundle_FtraceError* FtraceEventBundle::add_error() { error_.emplace_back(); return &error_.back(); }
bool FtraceEventBundle::ParseFromArray(const void* raw, size_t size) {
  event_.clear();
  error_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* event */:
        event_.emplace_back();
        event_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* lost_events */:
        field.get(&lost_events_);
        break;
      case 4 /* compact_sched */:
        (*compact_sched_).ParseFromArray(field.data(), field.size());
        break;
      case 5 /* ftrace_clock */:
        field.get(&ftrace_clock_);
        break;
      case 6 /* ftrace_timestamp */:
        field.get(&ftrace_timestamp_);
        break;
      case 7 /* boot_timestamp */:
        field.get(&boot_timestamp_);
        break;
      case 8 /* error */:
        error_.emplace_back();
        error_.back().ParseFromArray(field.data(), field.size());
        break;
      case 9 /* last_read_event_timestamp */:
        field.get(&last_read_event_timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceEventBundle::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceEventBundle::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceEventBundle::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cpu_, msg);
  }

  // Field 2: event
  for (auto& it : event_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: lost_events
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(3, lost_events_, msg);
  }

  // Field 4: compact_sched
  if (_has_field_[4]) {
    (*compact_sched_).Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 5: ftrace_clock
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, ftrace_clock_, msg);
  }

  // Field 6: ftrace_timestamp
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, ftrace_timestamp_, msg);
  }

  // Field 7: boot_timestamp
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, boot_timestamp_, msg);
  }

  // Field 8: error
  for (auto& it : error_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(8));
  }

  // Field 9: last_read_event_timestamp
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, last_read_event_timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FtraceEventBundle_FtraceError::FtraceEventBundle_FtraceError() = default;
FtraceEventBundle_FtraceError::~FtraceEventBundle_FtraceError() = default;
FtraceEventBundle_FtraceError::FtraceEventBundle_FtraceError(const FtraceEventBundle_FtraceError&) = default;
FtraceEventBundle_FtraceError& FtraceEventBundle_FtraceError::operator=(const FtraceEventBundle_FtraceError&) = default;
FtraceEventBundle_FtraceError::FtraceEventBundle_FtraceError(FtraceEventBundle_FtraceError&&) noexcept = default;
FtraceEventBundle_FtraceError& FtraceEventBundle_FtraceError::operator=(FtraceEventBundle_FtraceError&&) = default;

bool FtraceEventBundle_FtraceError::operator==(const FtraceEventBundle_FtraceError& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(status_, other.status_);
}

bool FtraceEventBundle_FtraceError::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 2 /* status */:
        field.get(&status_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceEventBundle_FtraceError::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceEventBundle_FtraceError::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceEventBundle_FtraceError::Serialize(::protozero::Message* msg) const {
  // Field 1: timestamp
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, timestamp_, msg);
  }

  // Field 2: status
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, status_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched() = default;
FtraceEventBundle_CompactSched::~FtraceEventBundle_CompactSched() = default;
FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched&) = default;
FtraceEventBundle_CompactSched& FtraceEventBundle_CompactSched::operator=(const FtraceEventBundle_CompactSched&) = default;
FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(FtraceEventBundle_CompactSched&&) noexcept = default;
FtraceEventBundle_CompactSched& FtraceEventBundle_CompactSched::operator=(FtraceEventBundle_CompactSched&&) = default;

bool FtraceEventBundle_CompactSched::operator==(const FtraceEventBundle_CompactSched& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(intern_table_, other.intern_table_)
   && ::protozero::internal::gen_helpers::EqualsField(switch_timestamp_, other.switch_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(switch_prev_state_, other.switch_prev_state_)
   && ::protozero::internal::gen_helpers::EqualsField(switch_next_pid_, other.switch_next_pid_)
   && ::protozero::internal::gen_helpers::EqualsField(switch_next_prio_, other.switch_next_prio_)
   && ::protozero::internal::gen_helpers::EqualsField(switch_next_comm_index_, other.switch_next_comm_index_)
   && ::protozero::internal::gen_helpers::EqualsField(waking_timestamp_, other.waking_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(waking_pid_, other.waking_pid_)
   && ::protozero::internal::gen_helpers::EqualsField(waking_target_cpu_, other.waking_target_cpu_)
   && ::protozero::internal::gen_helpers::EqualsField(waking_prio_, other.waking_prio_)
   && ::protozero::internal::gen_helpers::EqualsField(waking_comm_index_, other.waking_comm_index_)
   && ::protozero::internal::gen_helpers::EqualsField(waking_common_flags_, other.waking_common_flags_);
}

bool FtraceEventBundle_CompactSched::ParseFromArray(const void* raw, size_t size) {
  intern_table_.clear();
  switch_timestamp_.clear();
  switch_prev_state_.clear();
  switch_next_pid_.clear();
  switch_next_prio_.clear();
  switch_next_comm_index_.clear();
  waking_timestamp_.clear();
  waking_pid_.clear();
  waking_target_cpu_.clear();
  waking_prio_.clear();
  waking_comm_index_.clear();
  waking_common_flags_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 5 /* intern_table */:
        intern_table_.emplace_back();
        ::protozero::internal::gen_helpers::DeserializeString(field, &intern_table_.back());
        break;
      case 1 /* switch_timestamp */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, uint64_t>(field, &switch_timestamp_)) {
          packed_error = true;}
        break;
      case 2 /* switch_prev_state */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int64_t>(field, &switch_prev_state_)) {
          packed_error = true;}
        break;
      case 3 /* switch_next_pid */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t>(field, &switch_next_pid_)) {
          packed_error = true;}
        break;
      case 4 /* switch_next_prio */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t>(field, &switch_next_prio_)) {
          packed_error = true;}
        break;
      case 6 /* switch_next_comm_index */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, uint32_t>(field, &switch_next_comm_index_)) {
          packed_error = true;}
        break;
      case 7 /* waking_timestamp */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, uint64_t>(field, &waking_timestamp_)) {
          packed_error = true;}
        break;
      case 8 /* waking_pid */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t>(field, &waking_pid_)) {
          packed_error = true;}
        break;
      case 9 /* waking_target_cpu */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t>(field, &waking_target_cpu_)) {
          packed_error = true;}
        break;
      case 10 /* waking_prio */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t>(field, &waking_prio_)) {
          packed_error = true;}
        break;
      case 11 /* waking_comm_index */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, uint32_t>(field, &waking_comm_index_)) {
          packed_error = true;}
        break;
      case 12 /* waking_common_flags */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, uint32_t>(field, &waking_common_flags_)) {
          packed_error = true;}
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceEventBundle_CompactSched::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceEventBundle_CompactSched::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceEventBundle_CompactSched::Serialize(::protozero::Message* msg) const {
  // Field 5: intern_table
  for (auto& it : intern_table_) {
    ::protozero::internal::gen_helpers::SerializeString(5, it, msg);
  }

  // Field 1: switch_timestamp
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_timestamp_)
      pack.Append(it);
    msg->AppendBytes(1, pack.data(), pack.size());
  }

  // Field 2: switch_prev_state
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_prev_state_)
      pack.Append(it);
    msg->AppendBytes(2, pack.data(), pack.size());
  }

  // Field 3: switch_next_pid
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_next_pid_)
      pack.Append(it);
    msg->AppendBytes(3, pack.data(), pack.size());
  }

  // Field 4: switch_next_prio
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_next_prio_)
      pack.Append(it);
    msg->AppendBytes(4, pack.data(), pack.size());
  }

  // Field 6: switch_next_comm_index
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : switch_next_comm_index_)
      pack.Append(it);
    msg->AppendBytes(6, pack.data(), pack.size());
  }

  // Field 7: waking_timestamp
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_timestamp_)
      pack.Append(it);
    msg->AppendBytes(7, pack.data(), pack.size());
  }

  // Field 8: waking_pid
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_pid_)
      pack.Append(it);
    msg->AppendBytes(8, pack.data(), pack.size());
  }

  // Field 9: waking_target_cpu
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_target_cpu_)
      pack.Append(it);
    msg->AppendBytes(9, pack.data(), pack.size());
  }

  // Field 10: waking_prio
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_prio_)
      pack.Append(it);
    msg->AppendBytes(10, pack.data(), pack.size());
  }

  // Field 11: waking_comm_index
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_comm_index_)
      pack.Append(it);
    msg->AppendBytes(11, pack.data(), pack.size());
  }

  // Field 12: waking_common_flags
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : waking_common_flags_)
      pack.Append(it);
    msg->AppendBytes(12, pack.data(), pack.size());
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
