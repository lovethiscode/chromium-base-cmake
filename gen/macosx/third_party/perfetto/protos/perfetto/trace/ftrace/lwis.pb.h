// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/lwis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2flwis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2flwis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2flwis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2flwis_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class LwisTracingMarkWriteFtraceEvent;
struct LwisTracingMarkWriteFtraceEventDefaultTypeInternal;
extern LwisTracingMarkWriteFtraceEventDefaultTypeInternal _LwisTracingMarkWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::LwisTracingMarkWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class LwisTracingMarkWriteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LwisTracingMarkWriteFtraceEvent) */ {
 public:
  inline LwisTracingMarkWriteFtraceEvent() : LwisTracingMarkWriteFtraceEvent(nullptr) {}
  ~LwisTracingMarkWriteFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR LwisTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LwisTracingMarkWriteFtraceEvent(const LwisTracingMarkWriteFtraceEvent& from);
  LwisTracingMarkWriteFtraceEvent(LwisTracingMarkWriteFtraceEvent&& from) noexcept
    : LwisTracingMarkWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline LwisTracingMarkWriteFtraceEvent& operator=(const LwisTracingMarkWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LwisTracingMarkWriteFtraceEvent& operator=(LwisTracingMarkWriteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LwisTracingMarkWriteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LwisTracingMarkWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const LwisTracingMarkWriteFtraceEvent*>(
               &_LwisTracingMarkWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LwisTracingMarkWriteFtraceEvent& a, LwisTracingMarkWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LwisTracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LwisTracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LwisTracingMarkWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LwisTracingMarkWriteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LwisTracingMarkWriteFtraceEvent& from);
  void MergeFrom(const LwisTracingMarkWriteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LwisTracingMarkWriteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LwisTracingMarkWriteFtraceEvent";
  }
  protected:
  explicit LwisTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLwisNameFieldNumber = 1,
    kFuncNameFieldNumber = 4,
    kTypeFieldNumber = 2,
    kPidFieldNumber = 3,
    kValueFieldNumber = 5,
  };
  // optional string lwis_name = 1;
  bool has_lwis_name() const;
  private:
  bool _internal_has_lwis_name() const;
  public:
  void clear_lwis_name();
  const std::string& lwis_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lwis_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lwis_name();
  PROTOBUF_NODISCARD std::string* release_lwis_name();
  void set_allocated_lwis_name(std::string* lwis_name);
  private:
  const std::string& _internal_lwis_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lwis_name(const std::string& value);
  std::string* _internal_mutable_lwis_name();
  public:

  // optional string func_name = 4;
  bool has_func_name() const;
  private:
  bool _internal_has_func_name() const;
  public:
  void clear_func_name();
  const std::string& func_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_func_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_func_name();
  PROTOBUF_NODISCARD std::string* release_func_name();
  void set_allocated_func_name(std::string* func_name);
  private:
  const std::string& _internal_func_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func_name(const std::string& value);
  std::string* _internal_mutable_func_name();
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional int32 pid = 3;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // optional int64 value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LwisTracingMarkWriteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lwis_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_name_;
    uint32_t type_;
    int32_t pid_;
    int64_t value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2flwis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LwisTracingMarkWriteFtraceEvent

// optional string lwis_name = 1;
inline bool LwisTracingMarkWriteFtraceEvent::_internal_has_lwis_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LwisTracingMarkWriteFtraceEvent::has_lwis_name() const {
  return _internal_has_lwis_name();
}
inline void LwisTracingMarkWriteFtraceEvent::clear_lwis_name() {
  _impl_.lwis_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LwisTracingMarkWriteFtraceEvent::lwis_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LwisTracingMarkWriteFtraceEvent.lwis_name)
  return _internal_lwis_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LwisTracingMarkWriteFtraceEvent::set_lwis_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lwis_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LwisTracingMarkWriteFtraceEvent.lwis_name)
}
inline std::string* LwisTracingMarkWriteFtraceEvent::mutable_lwis_name() {
  std::string* _s = _internal_mutable_lwis_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LwisTracingMarkWriteFtraceEvent.lwis_name)
  return _s;
}
inline const std::string& LwisTracingMarkWriteFtraceEvent::_internal_lwis_name() const {
  return _impl_.lwis_name_.Get();
}
inline void LwisTracingMarkWriteFtraceEvent::_internal_set_lwis_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lwis_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LwisTracingMarkWriteFtraceEvent::_internal_mutable_lwis_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lwis_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LwisTracingMarkWriteFtraceEvent::release_lwis_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LwisTracingMarkWriteFtraceEvent.lwis_name)
  if (!_internal_has_lwis_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lwis_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lwis_name_.IsDefault()) {
    _impl_.lwis_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LwisTracingMarkWriteFtraceEvent::set_allocated_lwis_name(std::string* lwis_name) {
  if (lwis_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lwis_name_.SetAllocated(lwis_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lwis_name_.IsDefault()) {
    _impl_.lwis_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LwisTracingMarkWriteFtraceEvent.lwis_name)
}

// optional uint32 type = 2;
inline bool LwisTracingMarkWriteFtraceEvent::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LwisTracingMarkWriteFtraceEvent::has_type() const {
  return _internal_has_type();
}
inline void LwisTracingMarkWriteFtraceEvent::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LwisTracingMarkWriteFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t LwisTracingMarkWriteFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LwisTracingMarkWriteFtraceEvent.type)
  return _internal_type();
}
inline void LwisTracingMarkWriteFtraceEvent::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void LwisTracingMarkWriteFtraceEvent::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LwisTracingMarkWriteFtraceEvent.type)
}

// optional int32 pid = 3;
inline bool LwisTracingMarkWriteFtraceEvent::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LwisTracingMarkWriteFtraceEvent::has_pid() const {
  return _internal_has_pid();
}
inline void LwisTracingMarkWriteFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t LwisTracingMarkWriteFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t LwisTracingMarkWriteFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LwisTracingMarkWriteFtraceEvent.pid)
  return _internal_pid();
}
inline void LwisTracingMarkWriteFtraceEvent::_internal_set_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pid_ = value;
}
inline void LwisTracingMarkWriteFtraceEvent::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LwisTracingMarkWriteFtraceEvent.pid)
}

// optional string func_name = 4;
inline bool LwisTracingMarkWriteFtraceEvent::_internal_has_func_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LwisTracingMarkWriteFtraceEvent::has_func_name() const {
  return _internal_has_func_name();
}
inline void LwisTracingMarkWriteFtraceEvent::clear_func_name() {
  _impl_.func_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LwisTracingMarkWriteFtraceEvent::func_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LwisTracingMarkWriteFtraceEvent.func_name)
  return _internal_func_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LwisTracingMarkWriteFtraceEvent::set_func_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.func_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LwisTracingMarkWriteFtraceEvent.func_name)
}
inline std::string* LwisTracingMarkWriteFtraceEvent::mutable_func_name() {
  std::string* _s = _internal_mutable_func_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LwisTracingMarkWriteFtraceEvent.func_name)
  return _s;
}
inline const std::string& LwisTracingMarkWriteFtraceEvent::_internal_func_name() const {
  return _impl_.func_name_.Get();
}
inline void LwisTracingMarkWriteFtraceEvent::_internal_set_func_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.func_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LwisTracingMarkWriteFtraceEvent::_internal_mutable_func_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.func_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LwisTracingMarkWriteFtraceEvent::release_func_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LwisTracingMarkWriteFtraceEvent.func_name)
  if (!_internal_has_func_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.func_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.func_name_.IsDefault()) {
    _impl_.func_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LwisTracingMarkWriteFtraceEvent::set_allocated_func_name(std::string* func_name) {
  if (func_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.func_name_.SetAllocated(func_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.func_name_.IsDefault()) {
    _impl_.func_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LwisTracingMarkWriteFtraceEvent.func_name)
}

// optional int64 value = 5;
inline bool LwisTracingMarkWriteFtraceEvent::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LwisTracingMarkWriteFtraceEvent::has_value() const {
  return _internal_has_value();
}
inline void LwisTracingMarkWriteFtraceEvent::clear_value() {
  _impl_.value_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t LwisTracingMarkWriteFtraceEvent::_internal_value() const {
  return _impl_.value_;
}
inline int64_t LwisTracingMarkWriteFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LwisTracingMarkWriteFtraceEvent.value)
  return _internal_value();
}
inline void LwisTracingMarkWriteFtraceEvent::_internal_set_value(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.value_ = value;
}
inline void LwisTracingMarkWriteFtraceEvent::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LwisTracingMarkWriteFtraceEvent.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2flwis_2eproto
