// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/block.proto

#include "protos/perfetto/trace/ftrace/block.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u
  , /*decltype(_impl_.bytes_)*/0u} {}
struct BlockRqIssueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqIssueFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqIssueFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqIssueFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqIssueFtraceEventDefaultTypeInternal _BlockRqIssueFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u} {}
struct BlockBioBackmergeFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioBackmergeFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioBackmergeFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioBackmergeFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioBackmergeFtraceEventDefaultTypeInternal _BlockBioBackmergeFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u} {}
struct BlockBioBounceFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioBounceFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioBounceFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioBounceFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioBounceFtraceEventDefaultTypeInternal _BlockBioBounceFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u
  , /*decltype(_impl_.error_)*/0} {}
struct BlockBioCompleteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioCompleteFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioCompleteFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioCompleteFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioCompleteFtraceEventDefaultTypeInternal _BlockBioCompleteFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u} {}
struct BlockBioFrontmergeFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioFrontmergeFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioFrontmergeFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioFrontmergeFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioFrontmergeFtraceEventDefaultTypeInternal _BlockBioFrontmergeFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u} {}
struct BlockBioQueueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioQueueFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioQueueFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioQueueFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioQueueFtraceEventDefaultTypeInternal _BlockBioQueueFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.old_dev_)*/uint64_t{0u}
  , /*decltype(_impl_.old_sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u} {}
struct BlockBioRemapFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioRemapFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioRemapFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioRemapFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioRemapFtraceEventDefaultTypeInternal _BlockBioRemapFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}} {}
struct BlockDirtyBufferFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDirtyBufferFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDirtyBufferFtraceEventDefaultTypeInternal() {}
  union {
    BlockDirtyBufferFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDirtyBufferFtraceEventDefaultTypeInternal _BlockDirtyBufferFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u} {}
struct BlockGetrqFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockGetrqFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockGetrqFtraceEventDefaultTypeInternal() {}
  union {
    BlockGetrqFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockGetrqFtraceEventDefaultTypeInternal _BlockGetrqFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockPlugFtraceEvent::BlockPlugFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BlockPlugFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockPlugFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockPlugFtraceEventDefaultTypeInternal() {}
  union {
    BlockPlugFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockPlugFtraceEventDefaultTypeInternal _BlockPlugFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u
  , /*decltype(_impl_.errors_)*/0} {}
struct BlockRqAbortFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqAbortFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqAbortFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqAbortFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqAbortFtraceEventDefaultTypeInternal _BlockRqAbortFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u
  , /*decltype(_impl_.errors_)*/0
  , /*decltype(_impl_.error_)*/0} {}
struct BlockRqCompleteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqCompleteFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqCompleteFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqCompleteFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqCompleteFtraceEventDefaultTypeInternal _BlockRqCompleteFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u
  , /*decltype(_impl_.bytes_)*/0u} {}
struct BlockRqInsertFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqInsertFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqInsertFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqInsertFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqInsertFtraceEventDefaultTypeInternal _BlockRqInsertFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.old_dev_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u
  , /*decltype(_impl_.nr_bios_)*/0u
  , /*decltype(_impl_.old_sector_)*/uint64_t{0u}} {}
struct BlockRqRemapFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqRemapFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqRemapFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqRemapFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqRemapFtraceEventDefaultTypeInternal _BlockRqRemapFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u
  , /*decltype(_impl_.errors_)*/0} {}
struct BlockRqRequeueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqRequeueFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqRequeueFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqRequeueFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqRequeueFtraceEventDefaultTypeInternal _BlockRqRequeueFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_sector_)*/0u} {}
struct BlockSleeprqFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockSleeprqFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockSleeprqFtraceEventDefaultTypeInternal() {}
  union {
    BlockSleeprqFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockSleeprqFtraceEventDefaultTypeInternal _BlockSleeprqFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockSplitFtraceEvent::BlockSplitFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.new_sector_)*/uint64_t{0u}} {}
struct BlockSplitFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockSplitFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockSplitFtraceEventDefaultTypeInternal() {}
  union {
    BlockSplitFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockSplitFtraceEventDefaultTypeInternal _BlockSplitFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dev_)*/uint64_t{0u}
  , /*decltype(_impl_.sector_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}} {}
struct BlockTouchBufferFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockTouchBufferFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockTouchBufferFtraceEventDefaultTypeInternal() {}
  union {
    BlockTouchBufferFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockTouchBufferFtraceEventDefaultTypeInternal _BlockTouchBufferFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nr_rq_)*/0} {}
struct BlockUnplugFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockUnplugFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockUnplugFtraceEventDefaultTypeInternal() {}
  union {
    BlockUnplugFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockUnplugFtraceEventDefaultTypeInternal _BlockUnplugFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class BlockRqIssueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqIssueFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqIssueFtraceEvent)
}
BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(const BlockRqIssueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockRqIssueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}
    , decltype(_impl_.bytes_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cmd()) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bytes_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqIssueFtraceEvent)
}

inline void BlockRqIssueFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
    , decltype(_impl_.bytes_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqIssueFtraceEvent::~BlockRqIssueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqIssueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqIssueFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqIssueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqIssueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqIssueFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockRqIssueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRqIssueFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqIssueFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional uint32 bytes = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bytes(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rwbs(), target);
  }

  // optional string comm = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_comm(), target);
  }

  // optional string cmd = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqIssueFtraceEvent)
  return target;
}

size_t BlockRqIssueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqIssueFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional string cmd = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

    // optional uint32 bytes = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRqIssueFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockRqIssueFtraceEvent*>(
      &from));
}

void BlockRqIssueFtraceEvent::MergeFrom(const BlockRqIssueFtraceEvent& from) {
  BlockRqIssueFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqIssueFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockRqIssueFtraceEvent::CopyFrom(const BlockRqIssueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqIssueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqIssueFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqIssueFtraceEvent::InternalSwap(BlockRqIssueFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqIssueFtraceEvent, _impl_.bytes_)
      + sizeof(BlockRqIssueFtraceEvent::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(BlockRqIssueFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockRqIssueFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockRqIssueFtraceEvent";
}


// ===================================================================

class BlockBioBackmergeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioBackmergeFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioBackmergeFtraceEvent)
}
BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(const BlockBioBackmergeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockBioBackmergeFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioBackmergeFtraceEvent)
}

inline void BlockBioBackmergeFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioBackmergeFtraceEvent::~BlockBioBackmergeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioBackmergeFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioBackmergeFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioBackmergeFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioBackmergeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockBioBackmergeFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBioBackmergeFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rwbs(), target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioBackmergeFtraceEvent)
  return target;
}

size_t BlockBioBackmergeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBioBackmergeFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockBioBackmergeFtraceEvent*>(
      &from));
}

void BlockBioBackmergeFtraceEvent::MergeFrom(const BlockBioBackmergeFtraceEvent& from) {
  BlockBioBackmergeFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockBioBackmergeFtraceEvent::CopyFrom(const BlockBioBackmergeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioBackmergeFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioBackmergeFtraceEvent::InternalSwap(BlockBioBackmergeFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioBackmergeFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioBackmergeFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioBackmergeFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockBioBackmergeFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockBioBackmergeFtraceEvent";
}


// ===================================================================

class BlockBioBounceFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioBounceFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioBounceFtraceEvent)
}
BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(const BlockBioBounceFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockBioBounceFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioBounceFtraceEvent)
}

inline void BlockBioBounceFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioBounceFtraceEvent::~BlockBioBounceFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioBounceFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioBounceFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioBounceFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioBounceFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioBounceFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockBioBounceFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBioBounceFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioBounceFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rwbs(), target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioBounceFtraceEvent)
  return target;
}

size_t BlockBioBounceFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioBounceFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBioBounceFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockBioBounceFtraceEvent*>(
      &from));
}

void BlockBioBounceFtraceEvent::MergeFrom(const BlockBioBounceFtraceEvent& from) {
  BlockBioBounceFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioBounceFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockBioBounceFtraceEvent::CopyFrom(const BlockBioBounceFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioBounceFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioBounceFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioBounceFtraceEvent::InternalSwap(BlockBioBounceFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioBounceFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioBounceFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioBounceFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockBioBounceFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockBioBounceFtraceEvent";
}


// ===================================================================

class BlockBioCompleteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioCompleteFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioCompleteFtraceEvent)
}
BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(const BlockBioCompleteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockBioCompleteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioCompleteFtraceEvent)
}

inline void BlockBioCompleteFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
    , decltype(_impl_.error_){0}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioCompleteFtraceEvent::~BlockBioCompleteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioCompleteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioCompleteFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
}

void BlockBioCompleteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioCompleteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rwbs_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockBioCompleteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_error(&has_bits);
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBioCompleteFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional int32 error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_error(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rwbs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioCompleteFtraceEvent)
  return target;
}

size_t BlockBioCompleteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

    // optional int32 error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBioCompleteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockBioCompleteFtraceEvent*>(
      &from));
}

void BlockBioCompleteFtraceEvent::MergeFrom(const BlockBioCompleteFtraceEvent& from) {
  BlockBioCompleteFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockBioCompleteFtraceEvent::CopyFrom(const BlockBioCompleteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioCompleteFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioCompleteFtraceEvent::InternalSwap(BlockBioCompleteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioCompleteFtraceEvent, _impl_.error_)
      + sizeof(BlockBioCompleteFtraceEvent::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(BlockBioCompleteFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockBioCompleteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockBioCompleteFtraceEvent";
}


// ===================================================================

class BlockBioFrontmergeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioFrontmergeFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioFrontmergeFtraceEvent)
}
BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(const BlockBioFrontmergeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockBioFrontmergeFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioFrontmergeFtraceEvent)
}

inline void BlockBioFrontmergeFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioFrontmergeFtraceEvent::~BlockBioFrontmergeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioFrontmergeFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioFrontmergeFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioFrontmergeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockBioFrontmergeFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBioFrontmergeFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rwbs(), target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  return target;
}

size_t BlockBioFrontmergeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBioFrontmergeFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockBioFrontmergeFtraceEvent*>(
      &from));
}

void BlockBioFrontmergeFtraceEvent::MergeFrom(const BlockBioFrontmergeFtraceEvent& from) {
  BlockBioFrontmergeFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockBioFrontmergeFtraceEvent::CopyFrom(const BlockBioFrontmergeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioFrontmergeFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioFrontmergeFtraceEvent::InternalSwap(BlockBioFrontmergeFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioFrontmergeFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioFrontmergeFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioFrontmergeFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockBioFrontmergeFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockBioFrontmergeFtraceEvent";
}


// ===================================================================

class BlockBioQueueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioQueueFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioQueueFtraceEvent)
}
BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(const BlockBioQueueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockBioQueueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioQueueFtraceEvent)
}

inline void BlockBioQueueFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioQueueFtraceEvent::~BlockBioQueueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioQueueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioQueueFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioQueueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioQueueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioQueueFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockBioQueueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBioQueueFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioQueueFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rwbs(), target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioQueueFtraceEvent)
  return target;
}

size_t BlockBioQueueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioQueueFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBioQueueFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockBioQueueFtraceEvent*>(
      &from));
}

void BlockBioQueueFtraceEvent::MergeFrom(const BlockBioQueueFtraceEvent& from) {
  BlockBioQueueFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioQueueFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockBioQueueFtraceEvent::CopyFrom(const BlockBioQueueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioQueueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioQueueFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioQueueFtraceEvent::InternalSwap(BlockBioQueueFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioQueueFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioQueueFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioQueueFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockBioQueueFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockBioQueueFtraceEvent";
}


// ===================================================================

class BlockBioRemapFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioRemapFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_old_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioRemapFtraceEvent)
}
BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(const BlockBioRemapFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockBioRemapFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.old_dev_){}
    , decltype(_impl_.old_sector_){}
    , decltype(_impl_.nr_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioRemapFtraceEvent)
}

inline void BlockBioRemapFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.old_dev_){uint64_t{0u}}
    , decltype(_impl_.old_sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioRemapFtraceEvent::~BlockBioRemapFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioRemapFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioRemapFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
}

void BlockBioRemapFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioRemapFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioRemapFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rwbs_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockBioRemapFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 old_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_old_dev(&has_bits);
          _impl_.old_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 old_sector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_old_sector(&has_bits);
          _impl_.old_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockBioRemapFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioRemapFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional uint64 old_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_old_dev(), target);
  }

  // optional uint64 old_sector = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_old_sector(), target);
  }

  // optional string rwbs = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_rwbs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioRemapFtraceEvent)
  return target;
}

size_t BlockBioRemapFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioRemapFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string rwbs = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint64 old_dev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_dev());
    }

    // optional uint64 old_sector = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBioRemapFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockBioRemapFtraceEvent*>(
      &from));
}

void BlockBioRemapFtraceEvent::MergeFrom(const BlockBioRemapFtraceEvent& from) {
  BlockBioRemapFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioRemapFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_dev_ = from._impl_.old_dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.old_sector_ = from._impl_.old_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockBioRemapFtraceEvent::CopyFrom(const BlockBioRemapFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioRemapFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioRemapFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioRemapFtraceEvent::InternalSwap(BlockBioRemapFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioRemapFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioRemapFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioRemapFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockBioRemapFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockBioRemapFtraceEvent";
}


// ===================================================================

class BlockDirtyBufferFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockDirtyBufferFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockDirtyBufferFtraceEvent)
}
BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(const BlockDirtyBufferFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockDirtyBufferFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockDirtyBufferFtraceEvent)
}

inline void BlockDirtyBufferFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
  };
}

BlockDirtyBufferFtraceEvent::~BlockDirtyBufferFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockDirtyBufferFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockDirtyBufferFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockDirtyBufferFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockDirtyBufferFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockDirtyBufferFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockDirtyBufferFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockDirtyBufferFtraceEvent)
  return target;
}

size_t BlockDirtyBufferFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint64 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockDirtyBufferFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockDirtyBufferFtraceEvent*>(
      &from));
}

void BlockDirtyBufferFtraceEvent::MergeFrom(const BlockDirtyBufferFtraceEvent& from) {
  BlockDirtyBufferFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockDirtyBufferFtraceEvent::CopyFrom(const BlockDirtyBufferFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockDirtyBufferFtraceEvent::IsInitialized() const {
  return true;
}

void BlockDirtyBufferFtraceEvent::InternalSwap(BlockDirtyBufferFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockDirtyBufferFtraceEvent, _impl_.size_)
      + sizeof(BlockDirtyBufferFtraceEvent::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(BlockDirtyBufferFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockDirtyBufferFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockDirtyBufferFtraceEvent";
}


// ===================================================================

class BlockGetrqFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockGetrqFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockGetrqFtraceEvent)
}
BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(const BlockGetrqFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockGetrqFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockGetrqFtraceEvent)
}

inline void BlockGetrqFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockGetrqFtraceEvent::~BlockGetrqFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockGetrqFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockGetrqFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockGetrqFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockGetrqFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockGetrqFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockGetrqFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockGetrqFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockGetrqFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rwbs(), target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockGetrqFtraceEvent)
  return target;
}

size_t BlockGetrqFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockGetrqFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockGetrqFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockGetrqFtraceEvent*>(
      &from));
}

void BlockGetrqFtraceEvent::MergeFrom(const BlockGetrqFtraceEvent& from) {
  BlockGetrqFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockGetrqFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockGetrqFtraceEvent::CopyFrom(const BlockGetrqFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockGetrqFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockGetrqFtraceEvent::IsInitialized() const {
  return true;
}

void BlockGetrqFtraceEvent::InternalSwap(BlockGetrqFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockGetrqFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockGetrqFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockGetrqFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockGetrqFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockGetrqFtraceEvent";
}


// ===================================================================

class BlockPlugFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockPlugFtraceEvent>()._impl_._has_bits_);
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockPlugFtraceEvent::BlockPlugFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockPlugFtraceEvent)
}
BlockPlugFtraceEvent::BlockPlugFtraceEvent(const BlockPlugFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockPlugFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockPlugFtraceEvent)
}

inline void BlockPlugFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_){}
  };
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockPlugFtraceEvent::~BlockPlugFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockPlugFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockPlugFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comm_.Destroy();
}

void BlockPlugFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockPlugFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockPlugFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.comm_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockPlugFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string comm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockPlugFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockPlugFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string comm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockPlugFtraceEvent)
  return target;
}

size_t BlockPlugFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockPlugFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string comm = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockPlugFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockPlugFtraceEvent*>(
      &from));
}

void BlockPlugFtraceEvent::MergeFrom(const BlockPlugFtraceEvent& from) {
  BlockPlugFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockPlugFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_comm()) {
    _this->_internal_set_comm(from._internal_comm());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockPlugFtraceEvent::CopyFrom(const BlockPlugFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockPlugFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPlugFtraceEvent::IsInitialized() const {
  return true;
}

void BlockPlugFtraceEvent::InternalSwap(BlockPlugFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
}

std::string BlockPlugFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockPlugFtraceEvent";
}


// ===================================================================

class BlockRqAbortFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqAbortFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqAbortFtraceEvent)
}
BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(const BlockRqAbortFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockRqAbortFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}
    , decltype(_impl_.errors_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cmd()) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errors_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqAbortFtraceEvent)
}

inline void BlockRqAbortFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
    , decltype(_impl_.errors_){0}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqAbortFtraceEvent::~BlockRqAbortFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqAbortFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqAbortFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqAbortFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqAbortFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqAbortFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.errors_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockRqAbortFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRqAbortFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqAbortFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional int32 errors = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_errors(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rwbs(), target);
  }

  // optional string cmd = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqAbortFtraceEvent)
  return target;
}

size_t BlockRqAbortFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqAbortFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string cmd = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

    // optional int32 errors = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errors());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRqAbortFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockRqAbortFtraceEvent*>(
      &from));
}

void BlockRqAbortFtraceEvent::MergeFrom(const BlockRqAbortFtraceEvent& from) {
  BlockRqAbortFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqAbortFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.errors_ = from._impl_.errors_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockRqAbortFtraceEvent::CopyFrom(const BlockRqAbortFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqAbortFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqAbortFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqAbortFtraceEvent::InternalSwap(BlockRqAbortFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqAbortFtraceEvent, _impl_.errors_)
      + sizeof(BlockRqAbortFtraceEvent::_impl_.errors_)
      - PROTOBUF_FIELD_OFFSET(BlockRqAbortFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockRqAbortFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockRqAbortFtraceEvent";
}


// ===================================================================

class BlockRqCompleteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqCompleteFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqCompleteFtraceEvent)
}
BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(const BlockRqCompleteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockRqCompleteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}
    , decltype(_impl_.errors_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cmd()) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqCompleteFtraceEvent)
}

inline void BlockRqCompleteFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
    , decltype(_impl_.errors_){0}
    , decltype(_impl_.error_){0}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqCompleteFtraceEvent::~BlockRqCompleteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqCompleteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqCompleteFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqCompleteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqCompleteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.error_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockRqCompleteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_error(&has_bits);
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRqCompleteFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional int32 errors = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_errors(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rwbs(), target);
  }

  // optional string cmd = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cmd(), target);
  }

  // optional int32 error = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqCompleteFtraceEvent)
  return target;
}

size_t BlockRqCompleteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string cmd = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

    // optional int32 errors = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errors());
    }

    // optional int32 error = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRqCompleteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockRqCompleteFtraceEvent*>(
      &from));
}

void BlockRqCompleteFtraceEvent::MergeFrom(const BlockRqCompleteFtraceEvent& from) {
  BlockRqCompleteFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.errors_ = from._impl_.errors_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockRqCompleteFtraceEvent::CopyFrom(const BlockRqCompleteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqCompleteFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqCompleteFtraceEvent::InternalSwap(BlockRqCompleteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqCompleteFtraceEvent, _impl_.error_)
      + sizeof(BlockRqCompleteFtraceEvent::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(BlockRqCompleteFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockRqCompleteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockRqCompleteFtraceEvent";
}


// ===================================================================

class BlockRqInsertFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqInsertFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqInsertFtraceEvent)
}
BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(const BlockRqInsertFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockRqInsertFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}
    , decltype(_impl_.bytes_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cmd()) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bytes_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqInsertFtraceEvent)
}

inline void BlockRqInsertFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
    , decltype(_impl_.bytes_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqInsertFtraceEvent::~BlockRqInsertFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqInsertFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqInsertFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqInsertFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqInsertFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqInsertFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockRqInsertFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRqInsertFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqInsertFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional uint32 bytes = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bytes(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rwbs(), target);
  }

  // optional string comm = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_comm(), target);
  }

  // optional string cmd = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqInsertFtraceEvent)
  return target;
}

size_t BlockRqInsertFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqInsertFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional string cmd = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

    // optional uint32 bytes = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRqInsertFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockRqInsertFtraceEvent*>(
      &from));
}

void BlockRqInsertFtraceEvent::MergeFrom(const BlockRqInsertFtraceEvent& from) {
  BlockRqInsertFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqInsertFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockRqInsertFtraceEvent::CopyFrom(const BlockRqInsertFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqInsertFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqInsertFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqInsertFtraceEvent::InternalSwap(BlockRqInsertFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqInsertFtraceEvent, _impl_.bytes_)
      + sizeof(BlockRqInsertFtraceEvent::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(BlockRqInsertFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockRqInsertFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockRqInsertFtraceEvent";
}


// ===================================================================

class BlockRqRemapFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqRemapFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_old_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_nr_bios(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqRemapFtraceEvent)
}
BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(const BlockRqRemapFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockRqRemapFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.old_dev_){}
    , decltype(_impl_.nr_sector_){}
    , decltype(_impl_.nr_bios_){}
    , decltype(_impl_.old_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.old_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqRemapFtraceEvent)
}

inline void BlockRqRemapFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.old_dev_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
    , decltype(_impl_.nr_bios_){0u}
    , decltype(_impl_.old_sector_){uint64_t{0u}}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqRemapFtraceEvent::~BlockRqRemapFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqRemapFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqRemapFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
}

void BlockRqRemapFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqRemapFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqRemapFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rwbs_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.old_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.old_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockRqRemapFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 old_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_old_dev(&has_bits);
          _impl_.old_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 old_sector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_old_sector(&has_bits);
          _impl_.old_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_bios = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_nr_bios(&has_bits);
          _impl_.nr_bios_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRqRemapFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqRemapFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional uint64 old_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_old_dev(), target);
  }

  // optional uint64 old_sector = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_old_sector(), target);
  }

  // optional uint32 nr_bios = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_nr_bios(), target);
  }

  // optional string rwbs = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rwbs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqRemapFtraceEvent)
  return target;
}

size_t BlockRqRemapFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqRemapFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint64 old_dev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_dev());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

    // optional uint32 nr_bios = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_bios());
    }

    // optional uint64 old_sector = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRqRemapFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockRqRemapFtraceEvent*>(
      &from));
}

void BlockRqRemapFtraceEvent::MergeFrom(const BlockRqRemapFtraceEvent& from) {
  BlockRqRemapFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqRemapFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_dev_ = from._impl_.old_dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_bios_ = from._impl_.nr_bios_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.old_sector_ = from._impl_.old_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockRqRemapFtraceEvent::CopyFrom(const BlockRqRemapFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqRemapFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqRemapFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqRemapFtraceEvent::InternalSwap(BlockRqRemapFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqRemapFtraceEvent, _impl_.old_sector_)
      + sizeof(BlockRqRemapFtraceEvent::_impl_.old_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockRqRemapFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockRqRemapFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockRqRemapFtraceEvent";
}


// ===================================================================

class BlockRqRequeueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqRequeueFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqRequeueFtraceEvent)
}
BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(const BlockRqRequeueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockRqRequeueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}
    , decltype(_impl_.errors_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cmd()) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errors_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqRequeueFtraceEvent)
}

inline void BlockRqRequeueFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
    , decltype(_impl_.errors_){0}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqRequeueFtraceEvent::~BlockRqRequeueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqRequeueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqRequeueFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqRequeueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqRequeueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.errors_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockRqRequeueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRqRequeueFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional int32 errors = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_errors(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rwbs(), target);
  }

  // optional string cmd = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqRequeueFtraceEvent)
  return target;
}

size_t BlockRqRequeueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string cmd = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

    // optional int32 errors = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errors());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRqRequeueFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockRqRequeueFtraceEvent*>(
      &from));
}

void BlockRqRequeueFtraceEvent::MergeFrom(const BlockRqRequeueFtraceEvent& from) {
  BlockRqRequeueFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.errors_ = from._impl_.errors_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockRqRequeueFtraceEvent::CopyFrom(const BlockRqRequeueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqRequeueFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqRequeueFtraceEvent::InternalSwap(BlockRqRequeueFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cmd_, lhs_arena,
      &other->_impl_.cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqRequeueFtraceEvent, _impl_.errors_)
      + sizeof(BlockRqRequeueFtraceEvent::_impl_.errors_)
      - PROTOBUF_FIELD_OFFSET(BlockRqRequeueFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockRqRequeueFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockRqRequeueFtraceEvent";
}


// ===================================================================

class BlockSleeprqFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockSleeprqFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockSleeprqFtraceEvent)
}
BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(const BlockSleeprqFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockSleeprqFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.nr_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockSleeprqFtraceEvent)
}

inline void BlockSleeprqFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.nr_sector_){0u}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockSleeprqFtraceEvent::~BlockSleeprqFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockSleeprqFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockSleeprqFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockSleeprqFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockSleeprqFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockSleeprqFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockSleeprqFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockSleeprqFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockSleeprqFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rwbs(), target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockSleeprqFtraceEvent)
  return target;
}

size_t BlockSleeprqFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockSleeprqFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nr_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockSleeprqFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockSleeprqFtraceEvent*>(
      &from));
}

void BlockSleeprqFtraceEvent::MergeFrom(const BlockSleeprqFtraceEvent& from) {
  BlockSleeprqFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockSleeprqFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockSleeprqFtraceEvent::CopyFrom(const BlockSleeprqFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockSleeprqFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSleeprqFtraceEvent::IsInitialized() const {
  return true;
}

void BlockSleeprqFtraceEvent::InternalSwap(BlockSleeprqFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockSleeprqFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockSleeprqFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockSleeprqFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockSleeprqFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockSleeprqFtraceEvent";
}


// ===================================================================

class BlockSplitFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockSplitFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockSplitFtraceEvent::BlockSplitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockSplitFtraceEvent)
}
BlockSplitFtraceEvent::BlockSplitFtraceEvent(const BlockSplitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockSplitFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.new_sector_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rwbs()) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.new_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockSplitFtraceEvent)
}

inline void BlockSplitFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_){}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.new_sector_){uint64_t{0u}}
  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockSplitFtraceEvent::~BlockSplitFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockSplitFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockSplitFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockSplitFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockSplitFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockSplitFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.new_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockSplitFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 new_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_sector(&has_bits);
          _impl_.new_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockSplitFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockSplitFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint64 new_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_new_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rwbs(), target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockSplitFtraceEvent)
  return target;
}

size_t BlockSplitFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockSplitFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint64 new_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_sector());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockSplitFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockSplitFtraceEvent*>(
      &from));
}

void BlockSplitFtraceEvent::MergeFrom(const BlockSplitFtraceEvent& from) {
  BlockSplitFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockSplitFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.new_sector_ = from._impl_.new_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockSplitFtraceEvent::CopyFrom(const BlockSplitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockSplitFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSplitFtraceEvent::IsInitialized() const {
  return true;
}

void BlockSplitFtraceEvent::InternalSwap(BlockSplitFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rwbs_, lhs_arena,
      &other->_impl_.rwbs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockSplitFtraceEvent, _impl_.new_sector_)
      + sizeof(BlockSplitFtraceEvent::_impl_.new_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockSplitFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockSplitFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockSplitFtraceEvent";
}


// ===================================================================

class BlockTouchBufferFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockTouchBufferFtraceEvent>()._impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockTouchBufferFtraceEvent)
}
BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(const BlockTouchBufferFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockTouchBufferFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_){}
    , decltype(_impl_.sector_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockTouchBufferFtraceEvent)
}

inline void BlockTouchBufferFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_){uint64_t{0u}}
    , decltype(_impl_.sector_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
  };
}

BlockTouchBufferFtraceEvent::~BlockTouchBufferFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockTouchBufferFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockTouchBufferFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockTouchBufferFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockTouchBufferFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockTouchBufferFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockTouchBufferFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sector(), target);
  }

  // optional uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockTouchBufferFtraceEvent)
  return target;
}

size_t BlockTouchBufferFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sector());
    }

    // optional uint64 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockTouchBufferFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockTouchBufferFtraceEvent*>(
      &from));
}

void BlockTouchBufferFtraceEvent::MergeFrom(const BlockTouchBufferFtraceEvent& from) {
  BlockTouchBufferFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockTouchBufferFtraceEvent::CopyFrom(const BlockTouchBufferFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockTouchBufferFtraceEvent::IsInitialized() const {
  return true;
}

void BlockTouchBufferFtraceEvent::InternalSwap(BlockTouchBufferFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockTouchBufferFtraceEvent, _impl_.size_)
      + sizeof(BlockTouchBufferFtraceEvent::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(BlockTouchBufferFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

std::string BlockTouchBufferFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockTouchBufferFtraceEvent";
}


// ===================================================================

class BlockUnplugFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockUnplugFtraceEvent>()._impl_._has_bits_);
  static void set_has_nr_rq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockUnplugFtraceEvent)
}
BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(const BlockUnplugFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockUnplugFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.nr_rq_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comm()) {
    _this->_impl_.comm_.Set(from._internal_comm(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.nr_rq_ = from._impl_.nr_rq_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockUnplugFtraceEvent)
}

inline void BlockUnplugFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_){}
    , decltype(_impl_.nr_rq_){0}
  };
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockUnplugFtraceEvent::~BlockUnplugFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockUnplugFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockUnplugFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comm_.Destroy();
}

void BlockUnplugFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockUnplugFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockUnplugFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.comm_.ClearNonDefaultToEmpty();
  }
  _impl_.nr_rq_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BlockUnplugFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nr_rq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_nr_rq(&has_bits);
          _impl_.nr_rq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockUnplugFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockUnplugFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nr_rq = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nr_rq(), target);
  }

  // optional string comm = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockUnplugFtraceEvent)
  return target;
}

size_t BlockUnplugFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockUnplugFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string comm = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comm());
    }

    // optional int32 nr_rq = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nr_rq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockUnplugFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockUnplugFtraceEvent*>(
      &from));
}

void BlockUnplugFtraceEvent::MergeFrom(const BlockUnplugFtraceEvent& from) {
  BlockUnplugFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockUnplugFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nr_rq_ = from._impl_.nr_rq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockUnplugFtraceEvent::CopyFrom(const BlockUnplugFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockUnplugFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUnplugFtraceEvent::IsInitialized() const {
  return true;
}

void BlockUnplugFtraceEvent::InternalSwap(BlockUnplugFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comm_, lhs_arena,
      &other->_impl_.comm_, rhs_arena
  );
  swap(_impl_.nr_rq_, other->_impl_.nr_rq_);
}

std::string BlockUnplugFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BlockUnplugFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqIssueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqIssueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqIssueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioBackmergeFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioBackmergeFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioBackmergeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioBounceFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioBounceFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioBounceFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioCompleteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioCompleteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioCompleteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioFrontmergeFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioFrontmergeFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioFrontmergeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioQueueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioQueueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioQueueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioRemapFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioRemapFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioRemapFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockDirtyBufferFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockDirtyBufferFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockDirtyBufferFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockGetrqFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockGetrqFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockGetrqFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockPlugFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockPlugFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockPlugFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqAbortFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqAbortFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqAbortFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqCompleteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqCompleteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqCompleteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqInsertFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqInsertFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqInsertFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqRemapFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqRemapFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqRemapFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqRequeueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqRequeueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqRequeueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockSleeprqFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockSleeprqFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockSleeprqFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockSplitFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockSplitFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockSplitFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockTouchBufferFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockTouchBufferFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockTouchBufferFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockUnplugFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockUnplugFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockUnplugFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
