#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ftrace.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FuncgraphExitFtraceEvent::FuncgraphExitFtraceEvent() = default;
FuncgraphExitFtraceEvent::~FuncgraphExitFtraceEvent() = default;
FuncgraphExitFtraceEvent::FuncgraphExitFtraceEvent(const FuncgraphExitFtraceEvent&) = default;
FuncgraphExitFtraceEvent& FuncgraphExitFtraceEvent::operator=(const FuncgraphExitFtraceEvent&) = default;
FuncgraphExitFtraceEvent::FuncgraphExitFtraceEvent(FuncgraphExitFtraceEvent&&) noexcept = default;
FuncgraphExitFtraceEvent& FuncgraphExitFtraceEvent::operator=(FuncgraphExitFtraceEvent&&) = default;

bool FuncgraphExitFtraceEvent::operator==(const FuncgraphExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(calltime_, other.calltime_)
   && ::protozero::internal::gen_helpers::EqualsField(depth_, other.depth_)
   && ::protozero::internal::gen_helpers::EqualsField(func_, other.func_)
   && ::protozero::internal::gen_helpers::EqualsField(overrun_, other.overrun_)
   && ::protozero::internal::gen_helpers::EqualsField(rettime_, other.rettime_);
}

bool FuncgraphExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* calltime */:
        field.get(&calltime_);
        break;
      case 2 /* depth */:
        field.get(&depth_);
        break;
      case 3 /* func */:
        field.get(&func_);
        break;
      case 4 /* overrun */:
        field.get(&overrun_);
        break;
      case 5 /* rettime */:
        field.get(&rettime_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FuncgraphExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FuncgraphExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FuncgraphExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: calltime
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, calltime_, msg);
  }

  // Field 2: depth
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, depth_, msg);
  }

  // Field 3: func
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, func_, msg);
  }

  // Field 4: overrun
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, overrun_, msg);
  }

  // Field 5: rettime
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, rettime_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FuncgraphEntryFtraceEvent::FuncgraphEntryFtraceEvent() = default;
FuncgraphEntryFtraceEvent::~FuncgraphEntryFtraceEvent() = default;
FuncgraphEntryFtraceEvent::FuncgraphEntryFtraceEvent(const FuncgraphEntryFtraceEvent&) = default;
FuncgraphEntryFtraceEvent& FuncgraphEntryFtraceEvent::operator=(const FuncgraphEntryFtraceEvent&) = default;
FuncgraphEntryFtraceEvent::FuncgraphEntryFtraceEvent(FuncgraphEntryFtraceEvent&&) noexcept = default;
FuncgraphEntryFtraceEvent& FuncgraphEntryFtraceEvent::operator=(FuncgraphEntryFtraceEvent&&) = default;

bool FuncgraphEntryFtraceEvent::operator==(const FuncgraphEntryFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(depth_, other.depth_)
   && ::protozero::internal::gen_helpers::EqualsField(func_, other.func_);
}

bool FuncgraphEntryFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* depth */:
        field.get(&depth_);
        break;
      case 2 /* func */:
        field.get(&func_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FuncgraphEntryFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FuncgraphEntryFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FuncgraphEntryFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: depth
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, depth_, msg);
  }

  // Field 2: func
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, func_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


PrintFtraceEvent::PrintFtraceEvent() = default;
PrintFtraceEvent::~PrintFtraceEvent() = default;
PrintFtraceEvent::PrintFtraceEvent(const PrintFtraceEvent&) = default;
PrintFtraceEvent& PrintFtraceEvent::operator=(const PrintFtraceEvent&) = default;
PrintFtraceEvent::PrintFtraceEvent(PrintFtraceEvent&&) noexcept = default;
PrintFtraceEvent& PrintFtraceEvent::operator=(PrintFtraceEvent&&) = default;

bool PrintFtraceEvent::operator==(const PrintFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(ip_, other.ip_)
   && ::protozero::internal::gen_helpers::EqualsField(buf_, other.buf_);
}

bool PrintFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* ip */:
        field.get(&ip_);
        break;
      case 2 /* buf */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &buf_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PrintFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PrintFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PrintFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: ip
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, ip_, msg);
  }

  // Field 2: buf
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, buf_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
