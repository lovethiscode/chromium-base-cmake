#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/f2fs.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

F2fsGcEndFtraceEvent::F2fsGcEndFtraceEvent() = default;
F2fsGcEndFtraceEvent::~F2fsGcEndFtraceEvent() = default;
F2fsGcEndFtraceEvent::F2fsGcEndFtraceEvent(const F2fsGcEndFtraceEvent&) = default;
F2fsGcEndFtraceEvent& F2fsGcEndFtraceEvent::operator=(const F2fsGcEndFtraceEvent&) = default;
F2fsGcEndFtraceEvent::F2fsGcEndFtraceEvent(F2fsGcEndFtraceEvent&&) noexcept = default;
F2fsGcEndFtraceEvent& F2fsGcEndFtraceEvent::operator=(F2fsGcEndFtraceEvent&&) = default;

bool F2fsGcEndFtraceEvent::operator==(const F2fsGcEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_)
   && ::protozero::internal::gen_helpers::EqualsField(seg_freed_, other.seg_freed_)
   && ::protozero::internal::gen_helpers::EqualsField(sec_freed_, other.sec_freed_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_nodes_, other.dirty_nodes_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_dents_, other.dirty_dents_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_imeta_, other.dirty_imeta_)
   && ::protozero::internal::gen_helpers::EqualsField(free_sec_, other.free_sec_)
   && ::protozero::internal::gen_helpers::EqualsField(free_seg_, other.free_seg_)
   && ::protozero::internal::gen_helpers::EqualsField(reserved_seg_, other.reserved_seg_)
   && ::protozero::internal::gen_helpers::EqualsField(prefree_seg_, other.prefree_seg_);
}

bool F2fsGcEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ret */:
        field.get(&ret_);
        break;
      case 3 /* seg_freed */:
        field.get(&seg_freed_);
        break;
      case 4 /* sec_freed */:
        field.get(&sec_freed_);
        break;
      case 5 /* dirty_nodes */:
        field.get(&dirty_nodes_);
        break;
      case 6 /* dirty_dents */:
        field.get(&dirty_dents_);
        break;
      case 7 /* dirty_imeta */:
        field.get(&dirty_imeta_);
        break;
      case 8 /* free_sec */:
        field.get(&free_sec_);
        break;
      case 9 /* free_seg */:
        field.get(&free_seg_);
        break;
      case 10 /* reserved_seg */:
        field.get(&reserved_seg_);
        break;
      case 11 /* prefree_seg */:
        field.get(&prefree_seg_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsGcEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsGcEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsGcEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ret
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ret_, msg);
  }

  // Field 3: seg_freed
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, seg_freed_, msg);
  }

  // Field 4: sec_freed
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, sec_freed_, msg);
  }

  // Field 5: dirty_nodes
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, dirty_nodes_, msg);
  }

  // Field 6: dirty_dents
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, dirty_dents_, msg);
  }

  // Field 7: dirty_imeta
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, dirty_imeta_, msg);
  }

  // Field 8: free_sec
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, free_sec_, msg);
  }

  // Field 9: free_seg
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, free_seg_, msg);
  }

  // Field 10: reserved_seg
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, reserved_seg_, msg);
  }

  // Field 11: prefree_seg
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, prefree_seg_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsGcBeginFtraceEvent::F2fsGcBeginFtraceEvent() = default;
F2fsGcBeginFtraceEvent::~F2fsGcBeginFtraceEvent() = default;
F2fsGcBeginFtraceEvent::F2fsGcBeginFtraceEvent(const F2fsGcBeginFtraceEvent&) = default;
F2fsGcBeginFtraceEvent& F2fsGcBeginFtraceEvent::operator=(const F2fsGcBeginFtraceEvent&) = default;
F2fsGcBeginFtraceEvent::F2fsGcBeginFtraceEvent(F2fsGcBeginFtraceEvent&&) noexcept = default;
F2fsGcBeginFtraceEvent& F2fsGcBeginFtraceEvent::operator=(F2fsGcBeginFtraceEvent&&) = default;

bool F2fsGcBeginFtraceEvent::operator==(const F2fsGcBeginFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sync_, other.sync_)
   && ::protozero::internal::gen_helpers::EqualsField(background_, other.background_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_nodes_, other.dirty_nodes_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_dents_, other.dirty_dents_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_imeta_, other.dirty_imeta_)
   && ::protozero::internal::gen_helpers::EqualsField(free_sec_, other.free_sec_)
   && ::protozero::internal::gen_helpers::EqualsField(free_seg_, other.free_seg_)
   && ::protozero::internal::gen_helpers::EqualsField(reserved_seg_, other.reserved_seg_)
   && ::protozero::internal::gen_helpers::EqualsField(prefree_seg_, other.prefree_seg_)
   && ::protozero::internal::gen_helpers::EqualsField(gc_type_, other.gc_type_)
   && ::protozero::internal::gen_helpers::EqualsField(no_bg_gc_, other.no_bg_gc_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_free_secs_, other.nr_free_secs_);
}

bool F2fsGcBeginFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sync */:
        field.get(&sync_);
        break;
      case 3 /* background */:
        field.get(&background_);
        break;
      case 4 /* dirty_nodes */:
        field.get(&dirty_nodes_);
        break;
      case 5 /* dirty_dents */:
        field.get(&dirty_dents_);
        break;
      case 6 /* dirty_imeta */:
        field.get(&dirty_imeta_);
        break;
      case 7 /* free_sec */:
        field.get(&free_sec_);
        break;
      case 8 /* free_seg */:
        field.get(&free_seg_);
        break;
      case 9 /* reserved_seg */:
        field.get(&reserved_seg_);
        break;
      case 10 /* prefree_seg */:
        field.get(&prefree_seg_);
        break;
      case 11 /* gc_type */:
        field.get(&gc_type_);
        break;
      case 12 /* no_bg_gc */:
        field.get(&no_bg_gc_);
        break;
      case 13 /* nr_free_secs */:
        field.get(&nr_free_secs_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsGcBeginFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsGcBeginFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsGcBeginFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sync
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sync_, msg);
  }

  // Field 3: background
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, background_, msg);
  }

  // Field 4: dirty_nodes
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, dirty_nodes_, msg);
  }

  // Field 5: dirty_dents
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, dirty_dents_, msg);
  }

  // Field 6: dirty_imeta
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, dirty_imeta_, msg);
  }

  // Field 7: free_sec
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, free_sec_, msg);
  }

  // Field 8: free_seg
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, free_seg_, msg);
  }

  // Field 9: reserved_seg
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, reserved_seg_, msg);
  }

  // Field 10: prefree_seg
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, prefree_seg_, msg);
  }

  // Field 11: gc_type
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, gc_type_, msg);
  }

  // Field 12: no_bg_gc
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, no_bg_gc_, msg);
  }

  // Field 13: nr_free_secs
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, nr_free_secs_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsBackgroundGcFtraceEvent::F2fsBackgroundGcFtraceEvent() = default;
F2fsBackgroundGcFtraceEvent::~F2fsBackgroundGcFtraceEvent() = default;
F2fsBackgroundGcFtraceEvent::F2fsBackgroundGcFtraceEvent(const F2fsBackgroundGcFtraceEvent&) = default;
F2fsBackgroundGcFtraceEvent& F2fsBackgroundGcFtraceEvent::operator=(const F2fsBackgroundGcFtraceEvent&) = default;
F2fsBackgroundGcFtraceEvent::F2fsBackgroundGcFtraceEvent(F2fsBackgroundGcFtraceEvent&&) noexcept = default;
F2fsBackgroundGcFtraceEvent& F2fsBackgroundGcFtraceEvent::operator=(F2fsBackgroundGcFtraceEvent&&) = default;

bool F2fsBackgroundGcFtraceEvent::operator==(const F2fsBackgroundGcFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(wait_ms_, other.wait_ms_)
   && ::protozero::internal::gen_helpers::EqualsField(prefree_, other.prefree_)
   && ::protozero::internal::gen_helpers::EqualsField(free_, other.free_);
}

bool F2fsBackgroundGcFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* wait_ms */:
        field.get(&wait_ms_);
        break;
      case 3 /* prefree */:
        field.get(&prefree_);
        break;
      case 4 /* free */:
        field.get(&free_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsBackgroundGcFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsBackgroundGcFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsBackgroundGcFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: wait_ms
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, wait_ms_, msg);
  }

  // Field 3: prefree
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, prefree_, msg);
  }

  // Field 4: free
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, free_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsIostatLatencyFtraceEvent::F2fsIostatLatencyFtraceEvent() = default;
F2fsIostatLatencyFtraceEvent::~F2fsIostatLatencyFtraceEvent() = default;
F2fsIostatLatencyFtraceEvent::F2fsIostatLatencyFtraceEvent(const F2fsIostatLatencyFtraceEvent&) = default;
F2fsIostatLatencyFtraceEvent& F2fsIostatLatencyFtraceEvent::operator=(const F2fsIostatLatencyFtraceEvent&) = default;
F2fsIostatLatencyFtraceEvent::F2fsIostatLatencyFtraceEvent(F2fsIostatLatencyFtraceEvent&&) noexcept = default;
F2fsIostatLatencyFtraceEvent& F2fsIostatLatencyFtraceEvent::operator=(F2fsIostatLatencyFtraceEvent&&) = default;

bool F2fsIostatLatencyFtraceEvent::operator==(const F2fsIostatLatencyFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(d_rd_avg_, other.d_rd_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(d_rd_cnt_, other.d_rd_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(d_rd_peak_, other.d_rd_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(d_wr_as_avg_, other.d_wr_as_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(d_wr_as_cnt_, other.d_wr_as_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(d_wr_as_peak_, other.d_wr_as_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(d_wr_s_avg_, other.d_wr_s_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(d_wr_s_cnt_, other.d_wr_s_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(d_wr_s_peak_, other.d_wr_s_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(m_rd_avg_, other.m_rd_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(m_rd_cnt_, other.m_rd_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(m_rd_peak_, other.m_rd_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(m_wr_as_avg_, other.m_wr_as_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(m_wr_as_cnt_, other.m_wr_as_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(m_wr_as_peak_, other.m_wr_as_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(m_wr_s_avg_, other.m_wr_s_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(m_wr_s_cnt_, other.m_wr_s_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(m_wr_s_peak_, other.m_wr_s_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(n_rd_avg_, other.n_rd_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(n_rd_cnt_, other.n_rd_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(n_rd_peak_, other.n_rd_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(n_wr_as_avg_, other.n_wr_as_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(n_wr_as_cnt_, other.n_wr_as_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(n_wr_as_peak_, other.n_wr_as_peak_)
   && ::protozero::internal::gen_helpers::EqualsField(n_wr_s_avg_, other.n_wr_s_avg_)
   && ::protozero::internal::gen_helpers::EqualsField(n_wr_s_cnt_, other.n_wr_s_cnt_)
   && ::protozero::internal::gen_helpers::EqualsField(n_wr_s_peak_, other.n_wr_s_peak_);
}

bool F2fsIostatLatencyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* d_rd_avg */:
        field.get(&d_rd_avg_);
        break;
      case 2 /* d_rd_cnt */:
        field.get(&d_rd_cnt_);
        break;
      case 3 /* d_rd_peak */:
        field.get(&d_rd_peak_);
        break;
      case 4 /* d_wr_as_avg */:
        field.get(&d_wr_as_avg_);
        break;
      case 5 /* d_wr_as_cnt */:
        field.get(&d_wr_as_cnt_);
        break;
      case 6 /* d_wr_as_peak */:
        field.get(&d_wr_as_peak_);
        break;
      case 7 /* d_wr_s_avg */:
        field.get(&d_wr_s_avg_);
        break;
      case 8 /* d_wr_s_cnt */:
        field.get(&d_wr_s_cnt_);
        break;
      case 9 /* d_wr_s_peak */:
        field.get(&d_wr_s_peak_);
        break;
      case 10 /* dev */:
        field.get(&dev_);
        break;
      case 11 /* m_rd_avg */:
        field.get(&m_rd_avg_);
        break;
      case 12 /* m_rd_cnt */:
        field.get(&m_rd_cnt_);
        break;
      case 13 /* m_rd_peak */:
        field.get(&m_rd_peak_);
        break;
      case 14 /* m_wr_as_avg */:
        field.get(&m_wr_as_avg_);
        break;
      case 15 /* m_wr_as_cnt */:
        field.get(&m_wr_as_cnt_);
        break;
      case 16 /* m_wr_as_peak */:
        field.get(&m_wr_as_peak_);
        break;
      case 17 /* m_wr_s_avg */:
        field.get(&m_wr_s_avg_);
        break;
      case 18 /* m_wr_s_cnt */:
        field.get(&m_wr_s_cnt_);
        break;
      case 19 /* m_wr_s_peak */:
        field.get(&m_wr_s_peak_);
        break;
      case 20 /* n_rd_avg */:
        field.get(&n_rd_avg_);
        break;
      case 21 /* n_rd_cnt */:
        field.get(&n_rd_cnt_);
        break;
      case 22 /* n_rd_peak */:
        field.get(&n_rd_peak_);
        break;
      case 23 /* n_wr_as_avg */:
        field.get(&n_wr_as_avg_);
        break;
      case 24 /* n_wr_as_cnt */:
        field.get(&n_wr_as_cnt_);
        break;
      case 25 /* n_wr_as_peak */:
        field.get(&n_wr_as_peak_);
        break;
      case 26 /* n_wr_s_avg */:
        field.get(&n_wr_s_avg_);
        break;
      case 27 /* n_wr_s_cnt */:
        field.get(&n_wr_s_cnt_);
        break;
      case 28 /* n_wr_s_peak */:
        field.get(&n_wr_s_peak_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsIostatLatencyFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsIostatLatencyFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsIostatLatencyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: d_rd_avg
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, d_rd_avg_, msg);
  }

  // Field 2: d_rd_cnt
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, d_rd_cnt_, msg);
  }

  // Field 3: d_rd_peak
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, d_rd_peak_, msg);
  }

  // Field 4: d_wr_as_avg
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, d_wr_as_avg_, msg);
  }

  // Field 5: d_wr_as_cnt
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, d_wr_as_cnt_, msg);
  }

  // Field 6: d_wr_as_peak
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, d_wr_as_peak_, msg);
  }

  // Field 7: d_wr_s_avg
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, d_wr_s_avg_, msg);
  }

  // Field 8: d_wr_s_cnt
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, d_wr_s_cnt_, msg);
  }

  // Field 9: d_wr_s_peak
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, d_wr_s_peak_, msg);
  }

  // Field 10: dev
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, dev_, msg);
  }

  // Field 11: m_rd_avg
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, m_rd_avg_, msg);
  }

  // Field 12: m_rd_cnt
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, m_rd_cnt_, msg);
  }

  // Field 13: m_rd_peak
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, m_rd_peak_, msg);
  }

  // Field 14: m_wr_as_avg
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, m_wr_as_avg_, msg);
  }

  // Field 15: m_wr_as_cnt
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, m_wr_as_cnt_, msg);
  }

  // Field 16: m_wr_as_peak
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, m_wr_as_peak_, msg);
  }

  // Field 17: m_wr_s_avg
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, m_wr_s_avg_, msg);
  }

  // Field 18: m_wr_s_cnt
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(18, m_wr_s_cnt_, msg);
  }

  // Field 19: m_wr_s_peak
  if (_has_field_[19]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(19, m_wr_s_peak_, msg);
  }

  // Field 20: n_rd_avg
  if (_has_field_[20]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(20, n_rd_avg_, msg);
  }

  // Field 21: n_rd_cnt
  if (_has_field_[21]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(21, n_rd_cnt_, msg);
  }

  // Field 22: n_rd_peak
  if (_has_field_[22]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(22, n_rd_peak_, msg);
  }

  // Field 23: n_wr_as_avg
  if (_has_field_[23]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(23, n_wr_as_avg_, msg);
  }

  // Field 24: n_wr_as_cnt
  if (_has_field_[24]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(24, n_wr_as_cnt_, msg);
  }

  // Field 25: n_wr_as_peak
  if (_has_field_[25]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(25, n_wr_as_peak_, msg);
  }

  // Field 26: n_wr_s_avg
  if (_has_field_[26]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(26, n_wr_s_avg_, msg);
  }

  // Field 27: n_wr_s_cnt
  if (_has_field_[27]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(27, n_wr_s_cnt_, msg);
  }

  // Field 28: n_wr_s_peak
  if (_has_field_[28]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(28, n_wr_s_peak_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsIostatFtraceEvent::F2fsIostatFtraceEvent() = default;
F2fsIostatFtraceEvent::~F2fsIostatFtraceEvent() = default;
F2fsIostatFtraceEvent::F2fsIostatFtraceEvent(const F2fsIostatFtraceEvent&) = default;
F2fsIostatFtraceEvent& F2fsIostatFtraceEvent::operator=(const F2fsIostatFtraceEvent&) = default;
F2fsIostatFtraceEvent::F2fsIostatFtraceEvent(F2fsIostatFtraceEvent&&) noexcept = default;
F2fsIostatFtraceEvent& F2fsIostatFtraceEvent::operator=(F2fsIostatFtraceEvent&&) = default;

bool F2fsIostatFtraceEvent::operator==(const F2fsIostatFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(app_bio_, other.app_bio_)
   && ::protozero::internal::gen_helpers::EqualsField(app_brio_, other.app_brio_)
   && ::protozero::internal::gen_helpers::EqualsField(app_dio_, other.app_dio_)
   && ::protozero::internal::gen_helpers::EqualsField(app_drio_, other.app_drio_)
   && ::protozero::internal::gen_helpers::EqualsField(app_mio_, other.app_mio_)
   && ::protozero::internal::gen_helpers::EqualsField(app_mrio_, other.app_mrio_)
   && ::protozero::internal::gen_helpers::EqualsField(app_rio_, other.app_rio_)
   && ::protozero::internal::gen_helpers::EqualsField(app_wio_, other.app_wio_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_cdrio_, other.fs_cdrio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_cp_dio_, other.fs_cp_dio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_cp_mio_, other.fs_cp_mio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_cp_nio_, other.fs_cp_nio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_dio_, other.fs_dio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_discard_, other.fs_discard_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_drio_, other.fs_drio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_gc_dio_, other.fs_gc_dio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_gc_nio_, other.fs_gc_nio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_gdrio_, other.fs_gdrio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_mio_, other.fs_mio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_mrio_, other.fs_mrio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_nio_, other.fs_nio_)
   && ::protozero::internal::gen_helpers::EqualsField(fs_nrio_, other.fs_nrio_);
}

bool F2fsIostatFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* app_bio */:
        field.get(&app_bio_);
        break;
      case 2 /* app_brio */:
        field.get(&app_brio_);
        break;
      case 3 /* app_dio */:
        field.get(&app_dio_);
        break;
      case 4 /* app_drio */:
        field.get(&app_drio_);
        break;
      case 5 /* app_mio */:
        field.get(&app_mio_);
        break;
      case 6 /* app_mrio */:
        field.get(&app_mrio_);
        break;
      case 7 /* app_rio */:
        field.get(&app_rio_);
        break;
      case 8 /* app_wio */:
        field.get(&app_wio_);
        break;
      case 9 /* dev */:
        field.get(&dev_);
        break;
      case 10 /* fs_cdrio */:
        field.get(&fs_cdrio_);
        break;
      case 11 /* fs_cp_dio */:
        field.get(&fs_cp_dio_);
        break;
      case 12 /* fs_cp_mio */:
        field.get(&fs_cp_mio_);
        break;
      case 13 /* fs_cp_nio */:
        field.get(&fs_cp_nio_);
        break;
      case 14 /* fs_dio */:
        field.get(&fs_dio_);
        break;
      case 15 /* fs_discard */:
        field.get(&fs_discard_);
        break;
      case 16 /* fs_drio */:
        field.get(&fs_drio_);
        break;
      case 17 /* fs_gc_dio */:
        field.get(&fs_gc_dio_);
        break;
      case 18 /* fs_gc_nio */:
        field.get(&fs_gc_nio_);
        break;
      case 19 /* fs_gdrio */:
        field.get(&fs_gdrio_);
        break;
      case 20 /* fs_mio */:
        field.get(&fs_mio_);
        break;
      case 21 /* fs_mrio */:
        field.get(&fs_mrio_);
        break;
      case 22 /* fs_nio */:
        field.get(&fs_nio_);
        break;
      case 23 /* fs_nrio */:
        field.get(&fs_nrio_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsIostatFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsIostatFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsIostatFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: app_bio
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, app_bio_, msg);
  }

  // Field 2: app_brio
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, app_brio_, msg);
  }

  // Field 3: app_dio
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, app_dio_, msg);
  }

  // Field 4: app_drio
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, app_drio_, msg);
  }

  // Field 5: app_mio
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, app_mio_, msg);
  }

  // Field 6: app_mrio
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, app_mrio_, msg);
  }

  // Field 7: app_rio
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, app_rio_, msg);
  }

  // Field 8: app_wio
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, app_wio_, msg);
  }

  // Field 9: dev
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, dev_, msg);
  }

  // Field 10: fs_cdrio
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, fs_cdrio_, msg);
  }

  // Field 11: fs_cp_dio
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, fs_cp_dio_, msg);
  }

  // Field 12: fs_cp_mio
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, fs_cp_mio_, msg);
  }

  // Field 13: fs_cp_nio
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, fs_cp_nio_, msg);
  }

  // Field 14: fs_dio
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, fs_dio_, msg);
  }

  // Field 15: fs_discard
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, fs_discard_, msg);
  }

  // Field 16: fs_drio
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, fs_drio_, msg);
  }

  // Field 17: fs_gc_dio
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, fs_gc_dio_, msg);
  }

  // Field 18: fs_gc_nio
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(18, fs_gc_nio_, msg);
  }

  // Field 19: fs_gdrio
  if (_has_field_[19]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(19, fs_gdrio_, msg);
  }

  // Field 20: fs_mio
  if (_has_field_[20]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(20, fs_mio_, msg);
  }

  // Field 21: fs_mrio
  if (_has_field_[21]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(21, fs_mrio_, msg);
  }

  // Field 22: fs_nio
  if (_has_field_[22]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(22, fs_nio_, msg);
  }

  // Field 23: fs_nrio
  if (_has_field_[23]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(23, fs_nrio_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsWriteEndFtraceEvent::F2fsWriteEndFtraceEvent() = default;
F2fsWriteEndFtraceEvent::~F2fsWriteEndFtraceEvent() = default;
F2fsWriteEndFtraceEvent::F2fsWriteEndFtraceEvent(const F2fsWriteEndFtraceEvent&) = default;
F2fsWriteEndFtraceEvent& F2fsWriteEndFtraceEvent::operator=(const F2fsWriteEndFtraceEvent&) = default;
F2fsWriteEndFtraceEvent::F2fsWriteEndFtraceEvent(F2fsWriteEndFtraceEvent&&) noexcept = default;
F2fsWriteEndFtraceEvent& F2fsWriteEndFtraceEvent::operator=(F2fsWriteEndFtraceEvent&&) = default;

bool F2fsWriteEndFtraceEvent::operator==(const F2fsWriteEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(pos_, other.pos_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(copied_, other.copied_);
}

bool F2fsWriteEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* pos */:
        field.get(&pos_);
        break;
      case 4 /* len */:
        field.get(&len_);
        break;
      case 5 /* copied */:
        field.get(&copied_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsWriteEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsWriteEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsWriteEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: pos
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pos_, msg);
  }

  // Field 4: len
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, len_, msg);
  }

  // Field 5: copied
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, copied_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsWriteCheckpointFtraceEvent::F2fsWriteCheckpointFtraceEvent() = default;
F2fsWriteCheckpointFtraceEvent::~F2fsWriteCheckpointFtraceEvent() = default;
F2fsWriteCheckpointFtraceEvent::F2fsWriteCheckpointFtraceEvent(const F2fsWriteCheckpointFtraceEvent&) = default;
F2fsWriteCheckpointFtraceEvent& F2fsWriteCheckpointFtraceEvent::operator=(const F2fsWriteCheckpointFtraceEvent&) = default;
F2fsWriteCheckpointFtraceEvent::F2fsWriteCheckpointFtraceEvent(F2fsWriteCheckpointFtraceEvent&&) noexcept = default;
F2fsWriteCheckpointFtraceEvent& F2fsWriteCheckpointFtraceEvent::operator=(F2fsWriteCheckpointFtraceEvent&&) = default;

bool F2fsWriteCheckpointFtraceEvent::operator==(const F2fsWriteCheckpointFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(is_umount_, other.is_umount_)
   && ::protozero::internal::gen_helpers::EqualsField(msg_, other.msg_)
   && ::protozero::internal::gen_helpers::EqualsField(reason_, other.reason_);
}

bool F2fsWriteCheckpointFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* is_umount */:
        field.get(&is_umount_);
        break;
      case 3 /* msg */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &msg_);
        break;
      case 4 /* reason */:
        field.get(&reason_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsWriteCheckpointFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsWriteCheckpointFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsWriteCheckpointFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: is_umount
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, is_umount_, msg);
  }

  // Field 3: msg
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, msg_, msg);
  }

  // Field 4: reason
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, reason_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsWriteBeginFtraceEvent::F2fsWriteBeginFtraceEvent() = default;
F2fsWriteBeginFtraceEvent::~F2fsWriteBeginFtraceEvent() = default;
F2fsWriteBeginFtraceEvent::F2fsWriteBeginFtraceEvent(const F2fsWriteBeginFtraceEvent&) = default;
F2fsWriteBeginFtraceEvent& F2fsWriteBeginFtraceEvent::operator=(const F2fsWriteBeginFtraceEvent&) = default;
F2fsWriteBeginFtraceEvent::F2fsWriteBeginFtraceEvent(F2fsWriteBeginFtraceEvent&&) noexcept = default;
F2fsWriteBeginFtraceEvent& F2fsWriteBeginFtraceEvent::operator=(F2fsWriteBeginFtraceEvent&&) = default;

bool F2fsWriteBeginFtraceEvent::operator==(const F2fsWriteBeginFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(pos_, other.pos_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_);
}

bool F2fsWriteBeginFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* pos */:
        field.get(&pos_);
        break;
      case 4 /* len */:
        field.get(&len_);
        break;
      case 5 /* flags */:
        field.get(&flags_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsWriteBeginFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsWriteBeginFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsWriteBeginFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: pos
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pos_, msg);
  }

  // Field 4: len
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, len_, msg);
  }

  // Field 5: flags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, flags_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsVmPageMkwriteFtraceEvent::F2fsVmPageMkwriteFtraceEvent() = default;
F2fsVmPageMkwriteFtraceEvent::~F2fsVmPageMkwriteFtraceEvent() = default;
F2fsVmPageMkwriteFtraceEvent::F2fsVmPageMkwriteFtraceEvent(const F2fsVmPageMkwriteFtraceEvent&) = default;
F2fsVmPageMkwriteFtraceEvent& F2fsVmPageMkwriteFtraceEvent::operator=(const F2fsVmPageMkwriteFtraceEvent&) = default;
F2fsVmPageMkwriteFtraceEvent::F2fsVmPageMkwriteFtraceEvent(F2fsVmPageMkwriteFtraceEvent&&) noexcept = default;
F2fsVmPageMkwriteFtraceEvent& F2fsVmPageMkwriteFtraceEvent::operator=(F2fsVmPageMkwriteFtraceEvent&&) = default;

bool F2fsVmPageMkwriteFtraceEvent::operator==(const F2fsVmPageMkwriteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(dir_, other.dir_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_, other.dirty_)
   && ::protozero::internal::gen_helpers::EqualsField(uptodate_, other.uptodate_);
}

bool F2fsVmPageMkwriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* type */:
        field.get(&type_);
        break;
      case 4 /* dir */:
        field.get(&dir_);
        break;
      case 5 /* index */:
        field.get(&index_);
        break;
      case 6 /* dirty */:
        field.get(&dirty_);
        break;
      case 7 /* uptodate */:
        field.get(&uptodate_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsVmPageMkwriteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsVmPageMkwriteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsVmPageMkwriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, type_, msg);
  }

  // Field 4: dir
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, dir_, msg);
  }

  // Field 5: index
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, index_, msg);
  }

  // Field 6: dirty
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, dirty_, msg);
  }

  // Field 7: uptodate
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, uptodate_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsUnlinkExitFtraceEvent::F2fsUnlinkExitFtraceEvent() = default;
F2fsUnlinkExitFtraceEvent::~F2fsUnlinkExitFtraceEvent() = default;
F2fsUnlinkExitFtraceEvent::F2fsUnlinkExitFtraceEvent(const F2fsUnlinkExitFtraceEvent&) = default;
F2fsUnlinkExitFtraceEvent& F2fsUnlinkExitFtraceEvent::operator=(const F2fsUnlinkExitFtraceEvent&) = default;
F2fsUnlinkExitFtraceEvent::F2fsUnlinkExitFtraceEvent(F2fsUnlinkExitFtraceEvent&&) noexcept = default;
F2fsUnlinkExitFtraceEvent& F2fsUnlinkExitFtraceEvent::operator=(F2fsUnlinkExitFtraceEvent&&) = default;

bool F2fsUnlinkExitFtraceEvent::operator==(const F2fsUnlinkExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsUnlinkExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsUnlinkExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsUnlinkExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsUnlinkExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsUnlinkEnterFtraceEvent::F2fsUnlinkEnterFtraceEvent() = default;
F2fsUnlinkEnterFtraceEvent::~F2fsUnlinkEnterFtraceEvent() = default;
F2fsUnlinkEnterFtraceEvent::F2fsUnlinkEnterFtraceEvent(const F2fsUnlinkEnterFtraceEvent&) = default;
F2fsUnlinkEnterFtraceEvent& F2fsUnlinkEnterFtraceEvent::operator=(const F2fsUnlinkEnterFtraceEvent&) = default;
F2fsUnlinkEnterFtraceEvent::F2fsUnlinkEnterFtraceEvent(F2fsUnlinkEnterFtraceEvent&&) noexcept = default;
F2fsUnlinkEnterFtraceEvent& F2fsUnlinkEnterFtraceEvent::operator=(F2fsUnlinkEnterFtraceEvent&&) = default;

bool F2fsUnlinkEnterFtraceEvent::operator==(const F2fsUnlinkEnterFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool F2fsUnlinkEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      case 4 /* blocks */:
        field.get(&blocks_);
        break;
      case 5 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsUnlinkEnterFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsUnlinkEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsUnlinkEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  // Field 4: blocks
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, blocks_, msg);
  }

  // Field 5: name
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncatePartialNodesFtraceEvent::F2fsTruncatePartialNodesFtraceEvent() = default;
F2fsTruncatePartialNodesFtraceEvent::~F2fsTruncatePartialNodesFtraceEvent() = default;
F2fsTruncatePartialNodesFtraceEvent::F2fsTruncatePartialNodesFtraceEvent(const F2fsTruncatePartialNodesFtraceEvent&) = default;
F2fsTruncatePartialNodesFtraceEvent& F2fsTruncatePartialNodesFtraceEvent::operator=(const F2fsTruncatePartialNodesFtraceEvent&) = default;
F2fsTruncatePartialNodesFtraceEvent::F2fsTruncatePartialNodesFtraceEvent(F2fsTruncatePartialNodesFtraceEvent&&) noexcept = default;
F2fsTruncatePartialNodesFtraceEvent& F2fsTruncatePartialNodesFtraceEvent::operator=(F2fsTruncatePartialNodesFtraceEvent&&) = default;

bool F2fsTruncatePartialNodesFtraceEvent::operator==(const F2fsTruncatePartialNodesFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_)
   && ::protozero::internal::gen_helpers::EqualsField(depth_, other.depth_)
   && ::protozero::internal::gen_helpers::EqualsField(err_, other.err_);
}

bool F2fsTruncatePartialNodesFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* nid */:
        field.get(&nid_);
        break;
      case 4 /* depth */:
        field.get(&depth_);
        break;
      case 5 /* err */:
        field.get(&err_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncatePartialNodesFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncatePartialNodesFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncatePartialNodesFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: nid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nid_, msg);
  }

  // Field 4: depth
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, depth_, msg);
  }

  // Field 5: err
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, err_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateNodesExitFtraceEvent::F2fsTruncateNodesExitFtraceEvent() = default;
F2fsTruncateNodesExitFtraceEvent::~F2fsTruncateNodesExitFtraceEvent() = default;
F2fsTruncateNodesExitFtraceEvent::F2fsTruncateNodesExitFtraceEvent(const F2fsTruncateNodesExitFtraceEvent&) = default;
F2fsTruncateNodesExitFtraceEvent& F2fsTruncateNodesExitFtraceEvent::operator=(const F2fsTruncateNodesExitFtraceEvent&) = default;
F2fsTruncateNodesExitFtraceEvent::F2fsTruncateNodesExitFtraceEvent(F2fsTruncateNodesExitFtraceEvent&&) noexcept = default;
F2fsTruncateNodesExitFtraceEvent& F2fsTruncateNodesExitFtraceEvent::operator=(F2fsTruncateNodesExitFtraceEvent&&) = default;

bool F2fsTruncateNodesExitFtraceEvent::operator==(const F2fsTruncateNodesExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsTruncateNodesExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateNodesExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateNodesExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateNodesExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateNodesEnterFtraceEvent::F2fsTruncateNodesEnterFtraceEvent() = default;
F2fsTruncateNodesEnterFtraceEvent::~F2fsTruncateNodesEnterFtraceEvent() = default;
F2fsTruncateNodesEnterFtraceEvent::F2fsTruncateNodesEnterFtraceEvent(const F2fsTruncateNodesEnterFtraceEvent&) = default;
F2fsTruncateNodesEnterFtraceEvent& F2fsTruncateNodesEnterFtraceEvent::operator=(const F2fsTruncateNodesEnterFtraceEvent&) = default;
F2fsTruncateNodesEnterFtraceEvent::F2fsTruncateNodesEnterFtraceEvent(F2fsTruncateNodesEnterFtraceEvent&&) noexcept = default;
F2fsTruncateNodesEnterFtraceEvent& F2fsTruncateNodesEnterFtraceEvent::operator=(F2fsTruncateNodesEnterFtraceEvent&&) = default;

bool F2fsTruncateNodesEnterFtraceEvent::operator==(const F2fsTruncateNodesEnterFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_)
   && ::protozero::internal::gen_helpers::EqualsField(blk_addr_, other.blk_addr_);
}

bool F2fsTruncateNodesEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* nid */:
        field.get(&nid_);
        break;
      case 4 /* blk_addr */:
        field.get(&blk_addr_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateNodesEnterFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateNodesEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateNodesEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: nid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nid_, msg);
  }

  // Field 4: blk_addr
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, blk_addr_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateNodeFtraceEvent::F2fsTruncateNodeFtraceEvent() = default;
F2fsTruncateNodeFtraceEvent::~F2fsTruncateNodeFtraceEvent() = default;
F2fsTruncateNodeFtraceEvent::F2fsTruncateNodeFtraceEvent(const F2fsTruncateNodeFtraceEvent&) = default;
F2fsTruncateNodeFtraceEvent& F2fsTruncateNodeFtraceEvent::operator=(const F2fsTruncateNodeFtraceEvent&) = default;
F2fsTruncateNodeFtraceEvent::F2fsTruncateNodeFtraceEvent(F2fsTruncateNodeFtraceEvent&&) noexcept = default;
F2fsTruncateNodeFtraceEvent& F2fsTruncateNodeFtraceEvent::operator=(F2fsTruncateNodeFtraceEvent&&) = default;

bool F2fsTruncateNodeFtraceEvent::operator==(const F2fsTruncateNodeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_)
   && ::protozero::internal::gen_helpers::EqualsField(blk_addr_, other.blk_addr_);
}

bool F2fsTruncateNodeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* nid */:
        field.get(&nid_);
        break;
      case 4 /* blk_addr */:
        field.get(&blk_addr_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateNodeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateNodeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateNodeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: nid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nid_, msg);
  }

  // Field 4: blk_addr
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, blk_addr_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateInodeBlocksExitFtraceEvent::F2fsTruncateInodeBlocksExitFtraceEvent() = default;
F2fsTruncateInodeBlocksExitFtraceEvent::~F2fsTruncateInodeBlocksExitFtraceEvent() = default;
F2fsTruncateInodeBlocksExitFtraceEvent::F2fsTruncateInodeBlocksExitFtraceEvent(const F2fsTruncateInodeBlocksExitFtraceEvent&) = default;
F2fsTruncateInodeBlocksExitFtraceEvent& F2fsTruncateInodeBlocksExitFtraceEvent::operator=(const F2fsTruncateInodeBlocksExitFtraceEvent&) = default;
F2fsTruncateInodeBlocksExitFtraceEvent::F2fsTruncateInodeBlocksExitFtraceEvent(F2fsTruncateInodeBlocksExitFtraceEvent&&) noexcept = default;
F2fsTruncateInodeBlocksExitFtraceEvent& F2fsTruncateInodeBlocksExitFtraceEvent::operator=(F2fsTruncateInodeBlocksExitFtraceEvent&&) = default;

bool F2fsTruncateInodeBlocksExitFtraceEvent::operator==(const F2fsTruncateInodeBlocksExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsTruncateInodeBlocksExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateInodeBlocksExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateInodeBlocksExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateInodeBlocksExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateInodeBlocksEnterFtraceEvent::F2fsTruncateInodeBlocksEnterFtraceEvent() = default;
F2fsTruncateInodeBlocksEnterFtraceEvent::~F2fsTruncateInodeBlocksEnterFtraceEvent() = default;
F2fsTruncateInodeBlocksEnterFtraceEvent::F2fsTruncateInodeBlocksEnterFtraceEvent(const F2fsTruncateInodeBlocksEnterFtraceEvent&) = default;
F2fsTruncateInodeBlocksEnterFtraceEvent& F2fsTruncateInodeBlocksEnterFtraceEvent::operator=(const F2fsTruncateInodeBlocksEnterFtraceEvent&) = default;
F2fsTruncateInodeBlocksEnterFtraceEvent::F2fsTruncateInodeBlocksEnterFtraceEvent(F2fsTruncateInodeBlocksEnterFtraceEvent&&) noexcept = default;
F2fsTruncateInodeBlocksEnterFtraceEvent& F2fsTruncateInodeBlocksEnterFtraceEvent::operator=(F2fsTruncateInodeBlocksEnterFtraceEvent&&) = default;

bool F2fsTruncateInodeBlocksEnterFtraceEvent::operator==(const F2fsTruncateInodeBlocksEnterFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(from_, other.from_);
}

bool F2fsTruncateInodeBlocksEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      case 4 /* blocks */:
        field.get(&blocks_);
        break;
      case 5 /* from */:
        field.get(&from_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateInodeBlocksEnterFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateInodeBlocksEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateInodeBlocksEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  // Field 4: blocks
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, blocks_, msg);
  }

  // Field 5: from
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, from_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateDataBlocksRangeFtraceEvent::F2fsTruncateDataBlocksRangeFtraceEvent() = default;
F2fsTruncateDataBlocksRangeFtraceEvent::~F2fsTruncateDataBlocksRangeFtraceEvent() = default;
F2fsTruncateDataBlocksRangeFtraceEvent::F2fsTruncateDataBlocksRangeFtraceEvent(const F2fsTruncateDataBlocksRangeFtraceEvent&) = default;
F2fsTruncateDataBlocksRangeFtraceEvent& F2fsTruncateDataBlocksRangeFtraceEvent::operator=(const F2fsTruncateDataBlocksRangeFtraceEvent&) = default;
F2fsTruncateDataBlocksRangeFtraceEvent::F2fsTruncateDataBlocksRangeFtraceEvent(F2fsTruncateDataBlocksRangeFtraceEvent&&) noexcept = default;
F2fsTruncateDataBlocksRangeFtraceEvent& F2fsTruncateDataBlocksRangeFtraceEvent::operator=(F2fsTruncateDataBlocksRangeFtraceEvent&&) = default;

bool F2fsTruncateDataBlocksRangeFtraceEvent::operator==(const F2fsTruncateDataBlocksRangeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_)
   && ::protozero::internal::gen_helpers::EqualsField(ofs_, other.ofs_)
   && ::protozero::internal::gen_helpers::EqualsField(free_, other.free_);
}

bool F2fsTruncateDataBlocksRangeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* nid */:
        field.get(&nid_);
        break;
      case 4 /* ofs */:
        field.get(&ofs_);
        break;
      case 5 /* free */:
        field.get(&free_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateDataBlocksRangeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateDataBlocksRangeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateDataBlocksRangeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: nid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nid_, msg);
  }

  // Field 4: ofs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, ofs_, msg);
  }

  // Field 5: free
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, free_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateBlocksExitFtraceEvent::F2fsTruncateBlocksExitFtraceEvent() = default;
F2fsTruncateBlocksExitFtraceEvent::~F2fsTruncateBlocksExitFtraceEvent() = default;
F2fsTruncateBlocksExitFtraceEvent::F2fsTruncateBlocksExitFtraceEvent(const F2fsTruncateBlocksExitFtraceEvent&) = default;
F2fsTruncateBlocksExitFtraceEvent& F2fsTruncateBlocksExitFtraceEvent::operator=(const F2fsTruncateBlocksExitFtraceEvent&) = default;
F2fsTruncateBlocksExitFtraceEvent::F2fsTruncateBlocksExitFtraceEvent(F2fsTruncateBlocksExitFtraceEvent&&) noexcept = default;
F2fsTruncateBlocksExitFtraceEvent& F2fsTruncateBlocksExitFtraceEvent::operator=(F2fsTruncateBlocksExitFtraceEvent&&) = default;

bool F2fsTruncateBlocksExitFtraceEvent::operator==(const F2fsTruncateBlocksExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsTruncateBlocksExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateBlocksExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateBlocksExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateBlocksExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateBlocksEnterFtraceEvent::F2fsTruncateBlocksEnterFtraceEvent() = default;
F2fsTruncateBlocksEnterFtraceEvent::~F2fsTruncateBlocksEnterFtraceEvent() = default;
F2fsTruncateBlocksEnterFtraceEvent::F2fsTruncateBlocksEnterFtraceEvent(const F2fsTruncateBlocksEnterFtraceEvent&) = default;
F2fsTruncateBlocksEnterFtraceEvent& F2fsTruncateBlocksEnterFtraceEvent::operator=(const F2fsTruncateBlocksEnterFtraceEvent&) = default;
F2fsTruncateBlocksEnterFtraceEvent::F2fsTruncateBlocksEnterFtraceEvent(F2fsTruncateBlocksEnterFtraceEvent&&) noexcept = default;
F2fsTruncateBlocksEnterFtraceEvent& F2fsTruncateBlocksEnterFtraceEvent::operator=(F2fsTruncateBlocksEnterFtraceEvent&&) = default;

bool F2fsTruncateBlocksEnterFtraceEvent::operator==(const F2fsTruncateBlocksEnterFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(from_, other.from_);
}

bool F2fsTruncateBlocksEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      case 4 /* blocks */:
        field.get(&blocks_);
        break;
      case 5 /* from */:
        field.get(&from_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateBlocksEnterFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateBlocksEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateBlocksEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  // Field 4: blocks
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, blocks_, msg);
  }

  // Field 5: from
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, from_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsTruncateFtraceEvent::F2fsTruncateFtraceEvent() = default;
F2fsTruncateFtraceEvent::~F2fsTruncateFtraceEvent() = default;
F2fsTruncateFtraceEvent::F2fsTruncateFtraceEvent(const F2fsTruncateFtraceEvent&) = default;
F2fsTruncateFtraceEvent& F2fsTruncateFtraceEvent::operator=(const F2fsTruncateFtraceEvent&) = default;
F2fsTruncateFtraceEvent::F2fsTruncateFtraceEvent(F2fsTruncateFtraceEvent&&) noexcept = default;
F2fsTruncateFtraceEvent& F2fsTruncateFtraceEvent::operator=(F2fsTruncateFtraceEvent&&) = default;

bool F2fsTruncateFtraceEvent::operator==(const F2fsTruncateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(pino_, other.pino_)
   && ::protozero::internal::gen_helpers::EqualsField(mode_, other.mode_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(nlink_, other.nlink_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(advise_, other.advise_);
}

bool F2fsTruncateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* pino */:
        field.get(&pino_);
        break;
      case 4 /* mode */:
        field.get(&mode_);
        break;
      case 5 /* size */:
        field.get(&size_);
        break;
      case 6 /* nlink */:
        field.get(&nlink_);
        break;
      case 7 /* blocks */:
        field.get(&blocks_);
        break;
      case 8 /* advise */:
        field.get(&advise_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsTruncateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsTruncateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsTruncateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: pino
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pino_, msg);
  }

  // Field 4: mode
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, mode_, msg);
  }

  // Field 5: size
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, size_, msg);
  }

  // Field 6: nlink
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, nlink_, msg);
  }

  // Field 7: blocks
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, blocks_, msg);
  }

  // Field 8: advise
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, advise_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsSyncFsFtraceEvent::F2fsSyncFsFtraceEvent() = default;
F2fsSyncFsFtraceEvent::~F2fsSyncFsFtraceEvent() = default;
F2fsSyncFsFtraceEvent::F2fsSyncFsFtraceEvent(const F2fsSyncFsFtraceEvent&) = default;
F2fsSyncFsFtraceEvent& F2fsSyncFsFtraceEvent::operator=(const F2fsSyncFsFtraceEvent&) = default;
F2fsSyncFsFtraceEvent::F2fsSyncFsFtraceEvent(F2fsSyncFsFtraceEvent&&) noexcept = default;
F2fsSyncFsFtraceEvent& F2fsSyncFsFtraceEvent::operator=(F2fsSyncFsFtraceEvent&&) = default;

bool F2fsSyncFsFtraceEvent::operator==(const F2fsSyncFsFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_, other.dirty_)
   && ::protozero::internal::gen_helpers::EqualsField(wait_, other.wait_);
}

bool F2fsSyncFsFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* dirty */:
        field.get(&dirty_);
        break;
      case 3 /* wait */:
        field.get(&wait_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsSyncFsFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsSyncFsFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsSyncFsFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: dirty
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, dirty_, msg);
  }

  // Field 3: wait
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, wait_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsSyncFileExitFtraceEvent::F2fsSyncFileExitFtraceEvent() = default;
F2fsSyncFileExitFtraceEvent::~F2fsSyncFileExitFtraceEvent() = default;
F2fsSyncFileExitFtraceEvent::F2fsSyncFileExitFtraceEvent(const F2fsSyncFileExitFtraceEvent&) = default;
F2fsSyncFileExitFtraceEvent& F2fsSyncFileExitFtraceEvent::operator=(const F2fsSyncFileExitFtraceEvent&) = default;
F2fsSyncFileExitFtraceEvent::F2fsSyncFileExitFtraceEvent(F2fsSyncFileExitFtraceEvent&&) noexcept = default;
F2fsSyncFileExitFtraceEvent& F2fsSyncFileExitFtraceEvent::operator=(F2fsSyncFileExitFtraceEvent&&) = default;

bool F2fsSyncFileExitFtraceEvent::operator==(const F2fsSyncFileExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(need_cp_, other.need_cp_)
   && ::protozero::internal::gen_helpers::EqualsField(datasync_, other.datasync_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_)
   && ::protozero::internal::gen_helpers::EqualsField(cp_reason_, other.cp_reason_);
}

bool F2fsSyncFileExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* need_cp */:
        field.get(&need_cp_);
        break;
      case 4 /* datasync */:
        field.get(&datasync_);
        break;
      case 5 /* ret */:
        field.get(&ret_);
        break;
      case 6 /* cp_reason */:
        field.get(&cp_reason_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsSyncFileExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsSyncFileExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsSyncFileExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: need_cp
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, need_cp_, msg);
  }

  // Field 4: datasync
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, datasync_, msg);
  }

  // Field 5: ret
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, ret_, msg);
  }

  // Field 6: cp_reason
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, cp_reason_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsSyncFileEnterFtraceEvent::F2fsSyncFileEnterFtraceEvent() = default;
F2fsSyncFileEnterFtraceEvent::~F2fsSyncFileEnterFtraceEvent() = default;
F2fsSyncFileEnterFtraceEvent::F2fsSyncFileEnterFtraceEvent(const F2fsSyncFileEnterFtraceEvent&) = default;
F2fsSyncFileEnterFtraceEvent& F2fsSyncFileEnterFtraceEvent::operator=(const F2fsSyncFileEnterFtraceEvent&) = default;
F2fsSyncFileEnterFtraceEvent::F2fsSyncFileEnterFtraceEvent(F2fsSyncFileEnterFtraceEvent&&) noexcept = default;
F2fsSyncFileEnterFtraceEvent& F2fsSyncFileEnterFtraceEvent::operator=(F2fsSyncFileEnterFtraceEvent&&) = default;

bool F2fsSyncFileEnterFtraceEvent::operator==(const F2fsSyncFileEnterFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(pino_, other.pino_)
   && ::protozero::internal::gen_helpers::EqualsField(mode_, other.mode_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(nlink_, other.nlink_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(advise_, other.advise_);
}

bool F2fsSyncFileEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* pino */:
        field.get(&pino_);
        break;
      case 4 /* mode */:
        field.get(&mode_);
        break;
      case 5 /* size */:
        field.get(&size_);
        break;
      case 6 /* nlink */:
        field.get(&nlink_);
        break;
      case 7 /* blocks */:
        field.get(&blocks_);
        break;
      case 8 /* advise */:
        field.get(&advise_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsSyncFileEnterFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsSyncFileEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsSyncFileEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: pino
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pino_, msg);
  }

  // Field 4: mode
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, mode_, msg);
  }

  // Field 5: size
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, size_, msg);
  }

  // Field 6: nlink
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, nlink_, msg);
  }

  // Field 7: blocks
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, blocks_, msg);
  }

  // Field 8: advise
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, advise_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsSubmitWritePageFtraceEvent::F2fsSubmitWritePageFtraceEvent() = default;
F2fsSubmitWritePageFtraceEvent::~F2fsSubmitWritePageFtraceEvent() = default;
F2fsSubmitWritePageFtraceEvent::F2fsSubmitWritePageFtraceEvent(const F2fsSubmitWritePageFtraceEvent&) = default;
F2fsSubmitWritePageFtraceEvent& F2fsSubmitWritePageFtraceEvent::operator=(const F2fsSubmitWritePageFtraceEvent&) = default;
F2fsSubmitWritePageFtraceEvent::F2fsSubmitWritePageFtraceEvent(F2fsSubmitWritePageFtraceEvent&&) noexcept = default;
F2fsSubmitWritePageFtraceEvent& F2fsSubmitWritePageFtraceEvent::operator=(F2fsSubmitWritePageFtraceEvent&&) = default;

bool F2fsSubmitWritePageFtraceEvent::operator==(const F2fsSubmitWritePageFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(block_, other.block_);
}

bool F2fsSubmitWritePageFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* type */:
        field.get(&type_);
        break;
      case 4 /* index */:
        field.get(&index_);
        break;
      case 5 /* block */:
        field.get(&block_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsSubmitWritePageFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsSubmitWritePageFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsSubmitWritePageFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, type_, msg);
  }

  // Field 4: index
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, index_, msg);
  }

  // Field 5: block
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, block_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsSetPageDirtyFtraceEvent::F2fsSetPageDirtyFtraceEvent() = default;
F2fsSetPageDirtyFtraceEvent::~F2fsSetPageDirtyFtraceEvent() = default;
F2fsSetPageDirtyFtraceEvent::F2fsSetPageDirtyFtraceEvent(const F2fsSetPageDirtyFtraceEvent&) = default;
F2fsSetPageDirtyFtraceEvent& F2fsSetPageDirtyFtraceEvent::operator=(const F2fsSetPageDirtyFtraceEvent&) = default;
F2fsSetPageDirtyFtraceEvent::F2fsSetPageDirtyFtraceEvent(F2fsSetPageDirtyFtraceEvent&&) noexcept = default;
F2fsSetPageDirtyFtraceEvent& F2fsSetPageDirtyFtraceEvent::operator=(F2fsSetPageDirtyFtraceEvent&&) = default;

bool F2fsSetPageDirtyFtraceEvent::operator==(const F2fsSetPageDirtyFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(dir_, other.dir_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_, other.dirty_)
   && ::protozero::internal::gen_helpers::EqualsField(uptodate_, other.uptodate_);
}

bool F2fsSetPageDirtyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* type */:
        field.get(&type_);
        break;
      case 4 /* dir */:
        field.get(&dir_);
        break;
      case 5 /* index */:
        field.get(&index_);
        break;
      case 6 /* dirty */:
        field.get(&dirty_);
        break;
      case 7 /* uptodate */:
        field.get(&uptodate_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsSetPageDirtyFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsSetPageDirtyFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsSetPageDirtyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, type_, msg);
  }

  // Field 4: dir
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, dir_, msg);
  }

  // Field 5: index
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, index_, msg);
  }

  // Field 6: dirty
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, dirty_, msg);
  }

  // Field 7: uptodate
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, uptodate_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsReserveNewBlockFtraceEvent::F2fsReserveNewBlockFtraceEvent() = default;
F2fsReserveNewBlockFtraceEvent::~F2fsReserveNewBlockFtraceEvent() = default;
F2fsReserveNewBlockFtraceEvent::F2fsReserveNewBlockFtraceEvent(const F2fsReserveNewBlockFtraceEvent&) = default;
F2fsReserveNewBlockFtraceEvent& F2fsReserveNewBlockFtraceEvent::operator=(const F2fsReserveNewBlockFtraceEvent&) = default;
F2fsReserveNewBlockFtraceEvent::F2fsReserveNewBlockFtraceEvent(F2fsReserveNewBlockFtraceEvent&&) noexcept = default;
F2fsReserveNewBlockFtraceEvent& F2fsReserveNewBlockFtraceEvent::operator=(F2fsReserveNewBlockFtraceEvent&&) = default;

bool F2fsReserveNewBlockFtraceEvent::operator==(const F2fsReserveNewBlockFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_)
   && ::protozero::internal::gen_helpers::EqualsField(ofs_in_node_, other.ofs_in_node_);
}

bool F2fsReserveNewBlockFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* nid */:
        field.get(&nid_);
        break;
      case 3 /* ofs_in_node */:
        field.get(&ofs_in_node_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsReserveNewBlockFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsReserveNewBlockFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsReserveNewBlockFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: nid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, nid_, msg);
  }

  // Field 3: ofs_in_node
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ofs_in_node_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsReadpageFtraceEvent::F2fsReadpageFtraceEvent() = default;
F2fsReadpageFtraceEvent::~F2fsReadpageFtraceEvent() = default;
F2fsReadpageFtraceEvent::F2fsReadpageFtraceEvent(const F2fsReadpageFtraceEvent&) = default;
F2fsReadpageFtraceEvent& F2fsReadpageFtraceEvent::operator=(const F2fsReadpageFtraceEvent&) = default;
F2fsReadpageFtraceEvent::F2fsReadpageFtraceEvent(F2fsReadpageFtraceEvent&&) noexcept = default;
F2fsReadpageFtraceEvent& F2fsReadpageFtraceEvent::operator=(F2fsReadpageFtraceEvent&&) = default;

bool F2fsReadpageFtraceEvent::operator==(const F2fsReadpageFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(blkaddr_, other.blkaddr_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(dir_, other.dir_)
   && ::protozero::internal::gen_helpers::EqualsField(dirty_, other.dirty_)
   && ::protozero::internal::gen_helpers::EqualsField(uptodate_, other.uptodate_);
}

bool F2fsReadpageFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* index */:
        field.get(&index_);
        break;
      case 4 /* blkaddr */:
        field.get(&blkaddr_);
        break;
      case 5 /* type */:
        field.get(&type_);
        break;
      case 6 /* dir */:
        field.get(&dir_);
        break;
      case 7 /* dirty */:
        field.get(&dirty_);
        break;
      case 8 /* uptodate */:
        field.get(&uptodate_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsReadpageFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsReadpageFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsReadpageFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: index
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, index_, msg);
  }

  // Field 4: blkaddr
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, blkaddr_, msg);
  }

  // Field 5: type
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, type_, msg);
  }

  // Field 6: dir
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, dir_, msg);
  }

  // Field 7: dirty
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, dirty_, msg);
  }

  // Field 8: uptodate
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, uptodate_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsNewInodeFtraceEvent::F2fsNewInodeFtraceEvent() = default;
F2fsNewInodeFtraceEvent::~F2fsNewInodeFtraceEvent() = default;
F2fsNewInodeFtraceEvent::F2fsNewInodeFtraceEvent(const F2fsNewInodeFtraceEvent&) = default;
F2fsNewInodeFtraceEvent& F2fsNewInodeFtraceEvent::operator=(const F2fsNewInodeFtraceEvent&) = default;
F2fsNewInodeFtraceEvent::F2fsNewInodeFtraceEvent(F2fsNewInodeFtraceEvent&&) noexcept = default;
F2fsNewInodeFtraceEvent& F2fsNewInodeFtraceEvent::operator=(F2fsNewInodeFtraceEvent&&) = default;

bool F2fsNewInodeFtraceEvent::operator==(const F2fsNewInodeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsNewInodeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsNewInodeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsNewInodeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsNewInodeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsIgetExitFtraceEvent::F2fsIgetExitFtraceEvent() = default;
F2fsIgetExitFtraceEvent::~F2fsIgetExitFtraceEvent() = default;
F2fsIgetExitFtraceEvent::F2fsIgetExitFtraceEvent(const F2fsIgetExitFtraceEvent&) = default;
F2fsIgetExitFtraceEvent& F2fsIgetExitFtraceEvent::operator=(const F2fsIgetExitFtraceEvent&) = default;
F2fsIgetExitFtraceEvent::F2fsIgetExitFtraceEvent(F2fsIgetExitFtraceEvent&&) noexcept = default;
F2fsIgetExitFtraceEvent& F2fsIgetExitFtraceEvent::operator=(F2fsIgetExitFtraceEvent&&) = default;

bool F2fsIgetExitFtraceEvent::operator==(const F2fsIgetExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsIgetExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsIgetExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsIgetExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsIgetExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: ret
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsIgetFtraceEvent::F2fsIgetFtraceEvent() = default;
F2fsIgetFtraceEvent::~F2fsIgetFtraceEvent() = default;
F2fsIgetFtraceEvent::F2fsIgetFtraceEvent(const F2fsIgetFtraceEvent&) = default;
F2fsIgetFtraceEvent& F2fsIgetFtraceEvent::operator=(const F2fsIgetFtraceEvent&) = default;
F2fsIgetFtraceEvent::F2fsIgetFtraceEvent(F2fsIgetFtraceEvent&&) noexcept = default;
F2fsIgetFtraceEvent& F2fsIgetFtraceEvent::operator=(F2fsIgetFtraceEvent&&) = default;

bool F2fsIgetFtraceEvent::operator==(const F2fsIgetFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(pino_, other.pino_)
   && ::protozero::internal::gen_helpers::EqualsField(mode_, other.mode_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(nlink_, other.nlink_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(advise_, other.advise_);
}

bool F2fsIgetFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* pino */:
        field.get(&pino_);
        break;
      case 4 /* mode */:
        field.get(&mode_);
        break;
      case 5 /* size */:
        field.get(&size_);
        break;
      case 6 /* nlink */:
        field.get(&nlink_);
        break;
      case 7 /* blocks */:
        field.get(&blocks_);
        break;
      case 8 /* advise */:
        field.get(&advise_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsIgetFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsIgetFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsIgetFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: pino
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pino_, msg);
  }

  // Field 4: mode
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, mode_, msg);
  }

  // Field 5: size
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, size_, msg);
  }

  // Field 6: nlink
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, nlink_, msg);
  }

  // Field 7: blocks
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, blocks_, msg);
  }

  // Field 8: advise
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, advise_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsGetVictimFtraceEvent::F2fsGetVictimFtraceEvent() = default;
F2fsGetVictimFtraceEvent::~F2fsGetVictimFtraceEvent() = default;
F2fsGetVictimFtraceEvent::F2fsGetVictimFtraceEvent(const F2fsGetVictimFtraceEvent&) = default;
F2fsGetVictimFtraceEvent& F2fsGetVictimFtraceEvent::operator=(const F2fsGetVictimFtraceEvent&) = default;
F2fsGetVictimFtraceEvent::F2fsGetVictimFtraceEvent(F2fsGetVictimFtraceEvent&&) noexcept = default;
F2fsGetVictimFtraceEvent& F2fsGetVictimFtraceEvent::operator=(F2fsGetVictimFtraceEvent&&) = default;

bool F2fsGetVictimFtraceEvent::operator==(const F2fsGetVictimFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(gc_type_, other.gc_type_)
   && ::protozero::internal::gen_helpers::EqualsField(alloc_mode_, other.alloc_mode_)
   && ::protozero::internal::gen_helpers::EqualsField(gc_mode_, other.gc_mode_)
   && ::protozero::internal::gen_helpers::EqualsField(victim_, other.victim_)
   && ::protozero::internal::gen_helpers::EqualsField(ofs_unit_, other.ofs_unit_)
   && ::protozero::internal::gen_helpers::EqualsField(pre_victim_, other.pre_victim_)
   && ::protozero::internal::gen_helpers::EqualsField(prefree_, other.prefree_)
   && ::protozero::internal::gen_helpers::EqualsField(free_, other.free_)
   && ::protozero::internal::gen_helpers::EqualsField(cost_, other.cost_);
}

bool F2fsGetVictimFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* type */:
        field.get(&type_);
        break;
      case 3 /* gc_type */:
        field.get(&gc_type_);
        break;
      case 4 /* alloc_mode */:
        field.get(&alloc_mode_);
        break;
      case 5 /* gc_mode */:
        field.get(&gc_mode_);
        break;
      case 6 /* victim */:
        field.get(&victim_);
        break;
      case 7 /* ofs_unit */:
        field.get(&ofs_unit_);
        break;
      case 8 /* pre_victim */:
        field.get(&pre_victim_);
        break;
      case 9 /* prefree */:
        field.get(&prefree_);
        break;
      case 10 /* free */:
        field.get(&free_);
        break;
      case 11 /* cost */:
        field.get(&cost_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsGetVictimFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsGetVictimFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsGetVictimFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: type
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, type_, msg);
  }

  // Field 3: gc_type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, gc_type_, msg);
  }

  // Field 4: alloc_mode
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, alloc_mode_, msg);
  }

  // Field 5: gc_mode
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, gc_mode_, msg);
  }

  // Field 6: victim
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, victim_, msg);
  }

  // Field 7: ofs_unit
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, ofs_unit_, msg);
  }

  // Field 8: pre_victim
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, pre_victim_, msg);
  }

  // Field 9: prefree
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, prefree_, msg);
  }

  // Field 10: free
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, free_, msg);
  }

  // Field 11: cost
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, cost_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsGetDataBlockFtraceEvent::F2fsGetDataBlockFtraceEvent() = default;
F2fsGetDataBlockFtraceEvent::~F2fsGetDataBlockFtraceEvent() = default;
F2fsGetDataBlockFtraceEvent::F2fsGetDataBlockFtraceEvent(const F2fsGetDataBlockFtraceEvent&) = default;
F2fsGetDataBlockFtraceEvent& F2fsGetDataBlockFtraceEvent::operator=(const F2fsGetDataBlockFtraceEvent&) = default;
F2fsGetDataBlockFtraceEvent::F2fsGetDataBlockFtraceEvent(F2fsGetDataBlockFtraceEvent&&) noexcept = default;
F2fsGetDataBlockFtraceEvent& F2fsGetDataBlockFtraceEvent::operator=(F2fsGetDataBlockFtraceEvent&&) = default;

bool F2fsGetDataBlockFtraceEvent::operator==(const F2fsGetDataBlockFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(iblock_, other.iblock_)
   && ::protozero::internal::gen_helpers::EqualsField(bh_start_, other.bh_start_)
   && ::protozero::internal::gen_helpers::EqualsField(bh_size_, other.bh_size_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsGetDataBlockFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* iblock */:
        field.get(&iblock_);
        break;
      case 4 /* bh_start */:
        field.get(&bh_start_);
        break;
      case 5 /* bh_size */:
        field.get(&bh_size_);
        break;
      case 6 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsGetDataBlockFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsGetDataBlockFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsGetDataBlockFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: iblock
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, iblock_, msg);
  }

  // Field 4: bh_start
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, bh_start_, msg);
  }

  // Field 5: bh_size
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, bh_size_, msg);
  }

  // Field 6: ret
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsFallocateFtraceEvent::F2fsFallocateFtraceEvent() = default;
F2fsFallocateFtraceEvent::~F2fsFallocateFtraceEvent() = default;
F2fsFallocateFtraceEvent::F2fsFallocateFtraceEvent(const F2fsFallocateFtraceEvent&) = default;
F2fsFallocateFtraceEvent& F2fsFallocateFtraceEvent::operator=(const F2fsFallocateFtraceEvent&) = default;
F2fsFallocateFtraceEvent::F2fsFallocateFtraceEvent(F2fsFallocateFtraceEvent&&) noexcept = default;
F2fsFallocateFtraceEvent& F2fsFallocateFtraceEvent::operator=(F2fsFallocateFtraceEvent&&) = default;

bool F2fsFallocateFtraceEvent::operator==(const F2fsFallocateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(mode_, other.mode_)
   && ::protozero::internal::gen_helpers::EqualsField(offset_, other.offset_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool F2fsFallocateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* mode */:
        field.get(&mode_);
        break;
      case 4 /* offset */:
        field.get(&offset_);
        break;
      case 5 /* len */:
        field.get(&len_);
        break;
      case 6 /* size */:
        field.get(&size_);
        break;
      case 7 /* blocks */:
        field.get(&blocks_);
        break;
      case 8 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsFallocateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsFallocateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsFallocateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: mode
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, mode_, msg);
  }

  // Field 4: offset
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, offset_, msg);
  }

  // Field 5: len
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, len_, msg);
  }

  // Field 6: size
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, size_, msg);
  }

  // Field 7: blocks
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, blocks_, msg);
  }

  // Field 8: ret
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsEvictInodeFtraceEvent::F2fsEvictInodeFtraceEvent() = default;
F2fsEvictInodeFtraceEvent::~F2fsEvictInodeFtraceEvent() = default;
F2fsEvictInodeFtraceEvent::F2fsEvictInodeFtraceEvent(const F2fsEvictInodeFtraceEvent&) = default;
F2fsEvictInodeFtraceEvent& F2fsEvictInodeFtraceEvent::operator=(const F2fsEvictInodeFtraceEvent&) = default;
F2fsEvictInodeFtraceEvent::F2fsEvictInodeFtraceEvent(F2fsEvictInodeFtraceEvent&&) noexcept = default;
F2fsEvictInodeFtraceEvent& F2fsEvictInodeFtraceEvent::operator=(F2fsEvictInodeFtraceEvent&&) = default;

bool F2fsEvictInodeFtraceEvent::operator==(const F2fsEvictInodeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(pino_, other.pino_)
   && ::protozero::internal::gen_helpers::EqualsField(mode_, other.mode_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(nlink_, other.nlink_)
   && ::protozero::internal::gen_helpers::EqualsField(blocks_, other.blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(advise_, other.advise_);
}

bool F2fsEvictInodeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* pino */:
        field.get(&pino_);
        break;
      case 4 /* mode */:
        field.get(&mode_);
        break;
      case 5 /* size */:
        field.get(&size_);
        break;
      case 6 /* nlink */:
        field.get(&nlink_);
        break;
      case 7 /* blocks */:
        field.get(&blocks_);
        break;
      case 8 /* advise */:
        field.get(&advise_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsEvictInodeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsEvictInodeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsEvictInodeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: pino
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pino_, msg);
  }

  // Field 4: mode
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, mode_, msg);
  }

  // Field 5: size
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, size_, msg);
  }

  // Field 6: nlink
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, nlink_, msg);
  }

  // Field 7: blocks
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, blocks_, msg);
  }

  // Field 8: advise
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, advise_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


F2fsDoSubmitBioFtraceEvent::F2fsDoSubmitBioFtraceEvent() = default;
F2fsDoSubmitBioFtraceEvent::~F2fsDoSubmitBioFtraceEvent() = default;
F2fsDoSubmitBioFtraceEvent::F2fsDoSubmitBioFtraceEvent(const F2fsDoSubmitBioFtraceEvent&) = default;
F2fsDoSubmitBioFtraceEvent& F2fsDoSubmitBioFtraceEvent::operator=(const F2fsDoSubmitBioFtraceEvent&) = default;
F2fsDoSubmitBioFtraceEvent::F2fsDoSubmitBioFtraceEvent(F2fsDoSubmitBioFtraceEvent&&) noexcept = default;
F2fsDoSubmitBioFtraceEvent& F2fsDoSubmitBioFtraceEvent::operator=(F2fsDoSubmitBioFtraceEvent&&) = default;

bool F2fsDoSubmitBioFtraceEvent::operator==(const F2fsDoSubmitBioFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(btype_, other.btype_)
   && ::protozero::internal::gen_helpers::EqualsField(sync_, other.sync_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_);
}

bool F2fsDoSubmitBioFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* btype */:
        field.get(&btype_);
        break;
      case 3 /* sync */:
        field.get(&sync_);
        break;
      case 4 /* sector */:
        field.get(&sector_);
        break;
      case 5 /* size */:
        field.get(&size_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string F2fsDoSubmitBioFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> F2fsDoSubmitBioFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void F2fsDoSubmitBioFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: btype
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, btype_, msg);
  }

  // Field 3: sync
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, sync_, msg);
  }

  // Field 4: sector
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, sector_, msg);
  }

  // Field 5: size
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, size_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
