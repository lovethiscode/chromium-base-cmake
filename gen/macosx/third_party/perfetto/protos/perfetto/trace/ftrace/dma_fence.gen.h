// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_DMA_FENCE_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_DMA_FENCE_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class DmaFenceWaitEndFtraceEvent;
class DmaFenceWaitStartFtraceEvent;
class DmaFenceSignaledFtraceEvent;
class DmaFenceEmitFtraceEvent;
class DmaFenceInitFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT DmaFenceWaitEndFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  DmaFenceWaitEndFtraceEvent();
  ~DmaFenceWaitEndFtraceEvent() override;
  DmaFenceWaitEndFtraceEvent(DmaFenceWaitEndFtraceEvent&&) noexcept;
  DmaFenceWaitEndFtraceEvent& operator=(DmaFenceWaitEndFtraceEvent&&);
  DmaFenceWaitEndFtraceEvent(const DmaFenceWaitEndFtraceEvent&);
  DmaFenceWaitEndFtraceEvent& operator=(const DmaFenceWaitEndFtraceEvent&);
  bool operator==(const DmaFenceWaitEndFtraceEvent&) const;
  bool operator!=(const DmaFenceWaitEndFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DmaFenceWaitStartFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  DmaFenceWaitStartFtraceEvent();
  ~DmaFenceWaitStartFtraceEvent() override;
  DmaFenceWaitStartFtraceEvent(DmaFenceWaitStartFtraceEvent&&) noexcept;
  DmaFenceWaitStartFtraceEvent& operator=(DmaFenceWaitStartFtraceEvent&&);
  DmaFenceWaitStartFtraceEvent(const DmaFenceWaitStartFtraceEvent&);
  DmaFenceWaitStartFtraceEvent& operator=(const DmaFenceWaitStartFtraceEvent&);
  bool operator==(const DmaFenceWaitStartFtraceEvent&) const;
  bool operator!=(const DmaFenceWaitStartFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DmaFenceSignaledFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  DmaFenceSignaledFtraceEvent();
  ~DmaFenceSignaledFtraceEvent() override;
  DmaFenceSignaledFtraceEvent(DmaFenceSignaledFtraceEvent&&) noexcept;
  DmaFenceSignaledFtraceEvent& operator=(DmaFenceSignaledFtraceEvent&&);
  DmaFenceSignaledFtraceEvent(const DmaFenceSignaledFtraceEvent&);
  DmaFenceSignaledFtraceEvent& operator=(const DmaFenceSignaledFtraceEvent&);
  bool operator==(const DmaFenceSignaledFtraceEvent&) const;
  bool operator!=(const DmaFenceSignaledFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DmaFenceEmitFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  DmaFenceEmitFtraceEvent();
  ~DmaFenceEmitFtraceEvent() override;
  DmaFenceEmitFtraceEvent(DmaFenceEmitFtraceEvent&&) noexcept;
  DmaFenceEmitFtraceEvent& operator=(DmaFenceEmitFtraceEvent&&);
  DmaFenceEmitFtraceEvent(const DmaFenceEmitFtraceEvent&);
  DmaFenceEmitFtraceEvent& operator=(const DmaFenceEmitFtraceEvent&);
  bool operator==(const DmaFenceEmitFtraceEvent&) const;
  bool operator!=(const DmaFenceEmitFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DmaFenceInitFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kContextFieldNumber = 1,
    kDriverFieldNumber = 2,
    kSeqnoFieldNumber = 3,
    kTimelineFieldNumber = 4,
  };

  DmaFenceInitFtraceEvent();
  ~DmaFenceInitFtraceEvent() override;
  DmaFenceInitFtraceEvent(DmaFenceInitFtraceEvent&&) noexcept;
  DmaFenceInitFtraceEvent& operator=(DmaFenceInitFtraceEvent&&);
  DmaFenceInitFtraceEvent(const DmaFenceInitFtraceEvent&);
  DmaFenceInitFtraceEvent& operator=(const DmaFenceInitFtraceEvent&);
  bool operator==(const DmaFenceInitFtraceEvent&) const;
  bool operator!=(const DmaFenceInitFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_context() const { return _has_field_[1]; }
  uint32_t context() const { return context_; }
  void set_context(uint32_t value) { context_ = value; _has_field_.set(1); }

  bool has_driver() const { return _has_field_[2]; }
  const std::string& driver() const { return driver_; }
  void set_driver(const std::string& value) { driver_ = value; _has_field_.set(2); }

  bool has_seqno() const { return _has_field_[3]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(3); }

  bool has_timeline() const { return _has_field_[4]; }
  const std::string& timeline() const { return timeline_; }
  void set_timeline(const std::string& value) { timeline_ = value; _has_field_.set(4); }

 private:
  uint32_t context_{};
  std::string driver_{};
  uint32_t seqno_{};
  std::string timeline_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_DMA_FENCE_PROTO_CPP_H_
