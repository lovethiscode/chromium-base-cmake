// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TCP_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TCP_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class TcpRetransmitSkbFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT TcpRetransmitSkbFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDaddrFieldNumber = 1,
    kDportFieldNumber = 2,
    kSaddrFieldNumber = 3,
    kSkaddrFieldNumber = 4,
    kSkbaddrFieldNumber = 5,
    kSportFieldNumber = 6,
    kStateFieldNumber = 7,
  };

  TcpRetransmitSkbFtraceEvent();
  ~TcpRetransmitSkbFtraceEvent() override;
  TcpRetransmitSkbFtraceEvent(TcpRetransmitSkbFtraceEvent&&) noexcept;
  TcpRetransmitSkbFtraceEvent& operator=(TcpRetransmitSkbFtraceEvent&&);
  TcpRetransmitSkbFtraceEvent(const TcpRetransmitSkbFtraceEvent&);
  TcpRetransmitSkbFtraceEvent& operator=(const TcpRetransmitSkbFtraceEvent&);
  bool operator==(const TcpRetransmitSkbFtraceEvent&) const;
  bool operator!=(const TcpRetransmitSkbFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_daddr() const { return _has_field_[1]; }
  uint32_t daddr() const { return daddr_; }
  void set_daddr(uint32_t value) { daddr_ = value; _has_field_.set(1); }

  bool has_dport() const { return _has_field_[2]; }
  uint32_t dport() const { return dport_; }
  void set_dport(uint32_t value) { dport_ = value; _has_field_.set(2); }

  bool has_saddr() const { return _has_field_[3]; }
  uint32_t saddr() const { return saddr_; }
  void set_saddr(uint32_t value) { saddr_ = value; _has_field_.set(3); }

  bool has_skaddr() const { return _has_field_[4]; }
  uint64_t skaddr() const { return skaddr_; }
  void set_skaddr(uint64_t value) { skaddr_ = value; _has_field_.set(4); }

  bool has_skbaddr() const { return _has_field_[5]; }
  uint64_t skbaddr() const { return skbaddr_; }
  void set_skbaddr(uint64_t value) { skbaddr_ = value; _has_field_.set(5); }

  bool has_sport() const { return _has_field_[6]; }
  uint32_t sport() const { return sport_; }
  void set_sport(uint32_t value) { sport_ = value; _has_field_.set(6); }

  bool has_state() const { return _has_field_[7]; }
  int32_t state() const { return state_; }
  void set_state(int32_t value) { state_ = value; _has_field_.set(7); }

 private:
  uint32_t daddr_{};
  uint32_t dport_{};
  uint32_t saddr_{};
  uint64_t skaddr_{};
  uint64_t skbaddr_{};
  uint32_t sport_{};
  int32_t state_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<8> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TCP_PROTO_CPP_H_
