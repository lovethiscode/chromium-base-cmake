#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/hyp.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

HostMemAbortFtraceEvent::HostMemAbortFtraceEvent() = default;
HostMemAbortFtraceEvent::~HostMemAbortFtraceEvent() = default;
HostMemAbortFtraceEvent::HostMemAbortFtraceEvent(const HostMemAbortFtraceEvent&) = default;
HostMemAbortFtraceEvent& HostMemAbortFtraceEvent::operator=(const HostMemAbortFtraceEvent&) = default;
HostMemAbortFtraceEvent::HostMemAbortFtraceEvent(HostMemAbortFtraceEvent&&) noexcept = default;
HostMemAbortFtraceEvent& HostMemAbortFtraceEvent::operator=(HostMemAbortFtraceEvent&&) = default;

bool HostMemAbortFtraceEvent::operator==(const HostMemAbortFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(esr_, other.esr_)
   && ::protozero::internal::gen_helpers::EqualsField(addr_, other.addr_);
}

bool HostMemAbortFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* esr */:
        field.get(&esr_);
        break;
      case 2 /* addr */:
        field.get(&addr_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string HostMemAbortFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> HostMemAbortFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void HostMemAbortFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: esr
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, esr_, msg);
  }

  // Field 2: addr
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, addr_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


HostSmcFtraceEvent::HostSmcFtraceEvent() = default;
HostSmcFtraceEvent::~HostSmcFtraceEvent() = default;
HostSmcFtraceEvent::HostSmcFtraceEvent(const HostSmcFtraceEvent&) = default;
HostSmcFtraceEvent& HostSmcFtraceEvent::operator=(const HostSmcFtraceEvent&) = default;
HostSmcFtraceEvent::HostSmcFtraceEvent(HostSmcFtraceEvent&&) noexcept = default;
HostSmcFtraceEvent& HostSmcFtraceEvent::operator=(HostSmcFtraceEvent&&) = default;

bool HostSmcFtraceEvent::operator==(const HostSmcFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(forwarded_, other.forwarded_);
}

bool HostSmcFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* forwarded */:
        field.get(&forwarded_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string HostSmcFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> HostSmcFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void HostSmcFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: forwarded
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, forwarded_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


HostHcallFtraceEvent::HostHcallFtraceEvent() = default;
HostHcallFtraceEvent::~HostHcallFtraceEvent() = default;
HostHcallFtraceEvent::HostHcallFtraceEvent(const HostHcallFtraceEvent&) = default;
HostHcallFtraceEvent& HostHcallFtraceEvent::operator=(const HostHcallFtraceEvent&) = default;
HostHcallFtraceEvent::HostHcallFtraceEvent(HostHcallFtraceEvent&&) noexcept = default;
HostHcallFtraceEvent& HostHcallFtraceEvent::operator=(HostHcallFtraceEvent&&) = default;

bool HostHcallFtraceEvent::operator==(const HostHcallFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(invalid_, other.invalid_);
}

bool HostHcallFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* invalid */:
        field.get(&invalid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string HostHcallFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> HostHcallFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void HostHcallFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: invalid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, invalid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


HypExitFtraceEvent::HypExitFtraceEvent() = default;
HypExitFtraceEvent::~HypExitFtraceEvent() = default;
HypExitFtraceEvent::HypExitFtraceEvent(const HypExitFtraceEvent&) = default;
HypExitFtraceEvent& HypExitFtraceEvent::operator=(const HypExitFtraceEvent&) = default;
HypExitFtraceEvent::HypExitFtraceEvent(HypExitFtraceEvent&&) noexcept = default;
HypExitFtraceEvent& HypExitFtraceEvent::operator=(HypExitFtraceEvent&&) = default;

bool HypExitFtraceEvent::operator==(const HypExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_);
}

bool HypExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string HypExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> HypExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void HypExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


HypEnterFtraceEvent::HypEnterFtraceEvent() = default;
HypEnterFtraceEvent::~HypEnterFtraceEvent() = default;
HypEnterFtraceEvent::HypEnterFtraceEvent(const HypEnterFtraceEvent&) = default;
HypEnterFtraceEvent& HypEnterFtraceEvent::operator=(const HypEnterFtraceEvent&) = default;
HypEnterFtraceEvent::HypEnterFtraceEvent(HypEnterFtraceEvent&&) noexcept = default;
HypEnterFtraceEvent& HypEnterFtraceEvent::operator=(HypEnterFtraceEvent&&) = default;

bool HypEnterFtraceEvent::operator==(const HypEnterFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_);
}

bool HypEnterFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string HypEnterFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> HypEnterFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void HypEnterFtraceEvent::Serialize(::protozero::Message* msg) const {
  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
