// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_MALI_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_MALI_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class MaliMaliPMMCURESETWAITFtraceEvent;
class MaliMaliPMMCUPOWERDOWNFtraceEvent;
class MaliMaliPMMCUPENDONRELOADFtraceEvent;
class MaliMaliPMMCUPENDOFFFtraceEvent;
class MaliMaliPMMCUONSLEEPINITIATEFtraceEvent;
class MaliMaliPMMCUONPENDSLEEPFtraceEvent;
class MaliMaliPMMCUONPENDHALTFtraceEvent;
class MaliMaliPMMCUONHWCNTENABLEFtraceEvent;
class MaliMaliPMMCUONHWCNTDISABLEFtraceEvent;
class MaliMaliPMMCUONHALTFtraceEvent;
class MaliMaliPMMCUONGLBREINITPENDFtraceEvent;
class MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent;
class MaliMaliPMMCUONFtraceEvent;
class MaliMaliPMMCUOFFFtraceEvent;
class MaliMaliPMMCUINSLEEPFtraceEvent;
class MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent;
class MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent;
class MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent;
class MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent;
class MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent;
class MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent;
class MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent;
class MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent;
class MaliMaliCSFINTERRUPTENDFtraceEvent;
class MaliMaliCSFINTERRUPTSTARTFtraceEvent;
class MaliMaliKCPUFENCEWAITENDFtraceEvent;
class MaliMaliKCPUFENCEWAITSTARTFtraceEvent;
class MaliMaliKCPUFENCESIGNALFtraceEvent;
class MaliMaliKCPUCQSWAITENDFtraceEvent;
class MaliMaliKCPUCQSWAITSTARTFtraceEvent;
class MaliMaliKCPUCQSSETFtraceEvent;
class MaliTracingMarkWriteFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCURESETWAITFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCURESETWAITFtraceEvent();
  ~MaliMaliPMMCURESETWAITFtraceEvent() override;
  MaliMaliPMMCURESETWAITFtraceEvent(MaliMaliPMMCURESETWAITFtraceEvent&&) noexcept;
  MaliMaliPMMCURESETWAITFtraceEvent& operator=(MaliMaliPMMCURESETWAITFtraceEvent&&);
  MaliMaliPMMCURESETWAITFtraceEvent(const MaliMaliPMMCURESETWAITFtraceEvent&);
  MaliMaliPMMCURESETWAITFtraceEvent& operator=(const MaliMaliPMMCURESETWAITFtraceEvent&);
  bool operator==(const MaliMaliPMMCURESETWAITFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCURESETWAITFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUPOWERDOWNFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUPOWERDOWNFtraceEvent();
  ~MaliMaliPMMCUPOWERDOWNFtraceEvent() override;
  MaliMaliPMMCUPOWERDOWNFtraceEvent(MaliMaliPMMCUPOWERDOWNFtraceEvent&&) noexcept;
  MaliMaliPMMCUPOWERDOWNFtraceEvent& operator=(MaliMaliPMMCUPOWERDOWNFtraceEvent&&);
  MaliMaliPMMCUPOWERDOWNFtraceEvent(const MaliMaliPMMCUPOWERDOWNFtraceEvent&);
  MaliMaliPMMCUPOWERDOWNFtraceEvent& operator=(const MaliMaliPMMCUPOWERDOWNFtraceEvent&);
  bool operator==(const MaliMaliPMMCUPOWERDOWNFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUPOWERDOWNFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUPENDONRELOADFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUPENDONRELOADFtraceEvent();
  ~MaliMaliPMMCUPENDONRELOADFtraceEvent() override;
  MaliMaliPMMCUPENDONRELOADFtraceEvent(MaliMaliPMMCUPENDONRELOADFtraceEvent&&) noexcept;
  MaliMaliPMMCUPENDONRELOADFtraceEvent& operator=(MaliMaliPMMCUPENDONRELOADFtraceEvent&&);
  MaliMaliPMMCUPENDONRELOADFtraceEvent(const MaliMaliPMMCUPENDONRELOADFtraceEvent&);
  MaliMaliPMMCUPENDONRELOADFtraceEvent& operator=(const MaliMaliPMMCUPENDONRELOADFtraceEvent&);
  bool operator==(const MaliMaliPMMCUPENDONRELOADFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUPENDONRELOADFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUPENDOFFFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUPENDOFFFtraceEvent();
  ~MaliMaliPMMCUPENDOFFFtraceEvent() override;
  MaliMaliPMMCUPENDOFFFtraceEvent(MaliMaliPMMCUPENDOFFFtraceEvent&&) noexcept;
  MaliMaliPMMCUPENDOFFFtraceEvent& operator=(MaliMaliPMMCUPENDOFFFtraceEvent&&);
  MaliMaliPMMCUPENDOFFFtraceEvent(const MaliMaliPMMCUPENDOFFFtraceEvent&);
  MaliMaliPMMCUPENDOFFFtraceEvent& operator=(const MaliMaliPMMCUPENDOFFFtraceEvent&);
  bool operator==(const MaliMaliPMMCUPENDOFFFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUPENDOFFFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONSLEEPINITIATEFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONSLEEPINITIATEFtraceEvent();
  ~MaliMaliPMMCUONSLEEPINITIATEFtraceEvent() override;
  MaliMaliPMMCUONSLEEPINITIATEFtraceEvent(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&&) noexcept;
  MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& operator=(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&&);
  MaliMaliPMMCUONSLEEPINITIATEFtraceEvent(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&);
  MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& operator=(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONPENDSLEEPFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONPENDSLEEPFtraceEvent();
  ~MaliMaliPMMCUONPENDSLEEPFtraceEvent() override;
  MaliMaliPMMCUONPENDSLEEPFtraceEvent(MaliMaliPMMCUONPENDSLEEPFtraceEvent&&) noexcept;
  MaliMaliPMMCUONPENDSLEEPFtraceEvent& operator=(MaliMaliPMMCUONPENDSLEEPFtraceEvent&&);
  MaliMaliPMMCUONPENDSLEEPFtraceEvent(const MaliMaliPMMCUONPENDSLEEPFtraceEvent&);
  MaliMaliPMMCUONPENDSLEEPFtraceEvent& operator=(const MaliMaliPMMCUONPENDSLEEPFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONPENDSLEEPFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONPENDSLEEPFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONPENDHALTFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONPENDHALTFtraceEvent();
  ~MaliMaliPMMCUONPENDHALTFtraceEvent() override;
  MaliMaliPMMCUONPENDHALTFtraceEvent(MaliMaliPMMCUONPENDHALTFtraceEvent&&) noexcept;
  MaliMaliPMMCUONPENDHALTFtraceEvent& operator=(MaliMaliPMMCUONPENDHALTFtraceEvent&&);
  MaliMaliPMMCUONPENDHALTFtraceEvent(const MaliMaliPMMCUONPENDHALTFtraceEvent&);
  MaliMaliPMMCUONPENDHALTFtraceEvent& operator=(const MaliMaliPMMCUONPENDHALTFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONPENDHALTFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONPENDHALTFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONHWCNTENABLEFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONHWCNTENABLEFtraceEvent();
  ~MaliMaliPMMCUONHWCNTENABLEFtraceEvent() override;
  MaliMaliPMMCUONHWCNTENABLEFtraceEvent(MaliMaliPMMCUONHWCNTENABLEFtraceEvent&&) noexcept;
  MaliMaliPMMCUONHWCNTENABLEFtraceEvent& operator=(MaliMaliPMMCUONHWCNTENABLEFtraceEvent&&);
  MaliMaliPMMCUONHWCNTENABLEFtraceEvent(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent&);
  MaliMaliPMMCUONHWCNTENABLEFtraceEvent& operator=(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONHWCNTDISABLEFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONHWCNTDISABLEFtraceEvent();
  ~MaliMaliPMMCUONHWCNTDISABLEFtraceEvent() override;
  MaliMaliPMMCUONHWCNTDISABLEFtraceEvent(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&&) noexcept;
  MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& operator=(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&&);
  MaliMaliPMMCUONHWCNTDISABLEFtraceEvent(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&);
  MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& operator=(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONHALTFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONHALTFtraceEvent();
  ~MaliMaliPMMCUONHALTFtraceEvent() override;
  MaliMaliPMMCUONHALTFtraceEvent(MaliMaliPMMCUONHALTFtraceEvent&&) noexcept;
  MaliMaliPMMCUONHALTFtraceEvent& operator=(MaliMaliPMMCUONHALTFtraceEvent&&);
  MaliMaliPMMCUONHALTFtraceEvent(const MaliMaliPMMCUONHALTFtraceEvent&);
  MaliMaliPMMCUONHALTFtraceEvent& operator=(const MaliMaliPMMCUONHALTFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONHALTFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONHALTFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONGLBREINITPENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONGLBREINITPENDFtraceEvent();
  ~MaliMaliPMMCUONGLBREINITPENDFtraceEvent() override;
  MaliMaliPMMCUONGLBREINITPENDFtraceEvent(MaliMaliPMMCUONGLBREINITPENDFtraceEvent&&) noexcept;
  MaliMaliPMMCUONGLBREINITPENDFtraceEvent& operator=(MaliMaliPMMCUONGLBREINITPENDFtraceEvent&&);
  MaliMaliPMMCUONGLBREINITPENDFtraceEvent(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent&);
  MaliMaliPMMCUONGLBREINITPENDFtraceEvent& operator=(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent();
  ~MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent() override;
  MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&&) noexcept;
  MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& operator=(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&&);
  MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&);
  MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& operator=(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUONFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUONFtraceEvent();
  ~MaliMaliPMMCUONFtraceEvent() override;
  MaliMaliPMMCUONFtraceEvent(MaliMaliPMMCUONFtraceEvent&&) noexcept;
  MaliMaliPMMCUONFtraceEvent& operator=(MaliMaliPMMCUONFtraceEvent&&);
  MaliMaliPMMCUONFtraceEvent(const MaliMaliPMMCUONFtraceEvent&);
  MaliMaliPMMCUONFtraceEvent& operator=(const MaliMaliPMMCUONFtraceEvent&);
  bool operator==(const MaliMaliPMMCUONFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUONFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUOFFFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUOFFFtraceEvent();
  ~MaliMaliPMMCUOFFFtraceEvent() override;
  MaliMaliPMMCUOFFFtraceEvent(MaliMaliPMMCUOFFFtraceEvent&&) noexcept;
  MaliMaliPMMCUOFFFtraceEvent& operator=(MaliMaliPMMCUOFFFtraceEvent&&);
  MaliMaliPMMCUOFFFtraceEvent(const MaliMaliPMMCUOFFFtraceEvent&);
  MaliMaliPMMCUOFFFtraceEvent& operator=(const MaliMaliPMMCUOFFFtraceEvent&);
  bool operator==(const MaliMaliPMMCUOFFFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUOFFFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUINSLEEPFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUINSLEEPFtraceEvent();
  ~MaliMaliPMMCUINSLEEPFtraceEvent() override;
  MaliMaliPMMCUINSLEEPFtraceEvent(MaliMaliPMMCUINSLEEPFtraceEvent&&) noexcept;
  MaliMaliPMMCUINSLEEPFtraceEvent& operator=(MaliMaliPMMCUINSLEEPFtraceEvent&&);
  MaliMaliPMMCUINSLEEPFtraceEvent(const MaliMaliPMMCUINSLEEPFtraceEvent&);
  MaliMaliPMMCUINSLEEPFtraceEvent& operator=(const MaliMaliPMMCUINSLEEPFtraceEvent&);
  bool operator==(const MaliMaliPMMCUINSLEEPFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUINSLEEPFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent();
  ~MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent() override;
  MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& operator=(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&&);
  MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&);
  MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& operator=(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent();
  ~MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent() override;
  MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& operator=(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&&);
  MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&);
  MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& operator=(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent();
  ~MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent() override;
  MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& operator=(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&&);
  MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&);
  MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& operator=(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent();
  ~MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent() override;
  MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& operator=(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&&);
  MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&);
  MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& operator=(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent();
  ~MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent() override;
  MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& operator=(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&&);
  MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&);
  MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& operator=(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent();
  ~MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent() override;
  MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& operator=(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&&);
  MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&);
  MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& operator=(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent();
  ~MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent() override;
  MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& operator=(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&&);
  MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&);
  MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& operator=(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent();
  ~MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent() override;
  MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&&) noexcept;
  MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& operator=(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&&);
  MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&);
  MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& operator=(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&);
  bool operator==(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&) const;
  bool operator!=(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliCSFINTERRUPTENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliCSFINTERRUPTENDFtraceEvent();
  ~MaliMaliCSFINTERRUPTENDFtraceEvent() override;
  MaliMaliCSFINTERRUPTENDFtraceEvent(MaliMaliCSFINTERRUPTENDFtraceEvent&&) noexcept;
  MaliMaliCSFINTERRUPTENDFtraceEvent& operator=(MaliMaliCSFINTERRUPTENDFtraceEvent&&);
  MaliMaliCSFINTERRUPTENDFtraceEvent(const MaliMaliCSFINTERRUPTENDFtraceEvent&);
  MaliMaliCSFINTERRUPTENDFtraceEvent& operator=(const MaliMaliCSFINTERRUPTENDFtraceEvent&);
  bool operator==(const MaliMaliCSFINTERRUPTENDFtraceEvent&) const;
  bool operator!=(const MaliMaliCSFINTERRUPTENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliCSFINTERRUPTSTARTFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKctxTgidFieldNumber = 1,
    kKctxIdFieldNumber = 2,
    kInfoValFieldNumber = 3,
  };

  MaliMaliCSFINTERRUPTSTARTFtraceEvent();
  ~MaliMaliCSFINTERRUPTSTARTFtraceEvent() override;
  MaliMaliCSFINTERRUPTSTARTFtraceEvent(MaliMaliCSFINTERRUPTSTARTFtraceEvent&&) noexcept;
  MaliMaliCSFINTERRUPTSTARTFtraceEvent& operator=(MaliMaliCSFINTERRUPTSTARTFtraceEvent&&);
  MaliMaliCSFINTERRUPTSTARTFtraceEvent(const MaliMaliCSFINTERRUPTSTARTFtraceEvent&);
  MaliMaliCSFINTERRUPTSTARTFtraceEvent& operator=(const MaliMaliCSFINTERRUPTSTARTFtraceEvent&);
  bool operator==(const MaliMaliCSFINTERRUPTSTARTFtraceEvent&) const;
  bool operator!=(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_kctx_tgid() const { return _has_field_[1]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(1); }

  bool has_kctx_id() const { return _has_field_[2]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(2); }

  bool has_info_val() const { return _has_field_[3]; }
  uint64_t info_val() const { return info_val_; }
  void set_info_val(uint64_t value) { info_val_ = value; _has_field_.set(3); }

 private:
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint64_t info_val_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliKCPUFENCEWAITENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kInfoVal1FieldNumber = 1,
    kInfoVal2FieldNumber = 2,
    kKctxTgidFieldNumber = 3,
    kKctxIdFieldNumber = 4,
    kIdFieldNumber = 5,
  };

  MaliMaliKCPUFENCEWAITENDFtraceEvent();
  ~MaliMaliKCPUFENCEWAITENDFtraceEvent() override;
  MaliMaliKCPUFENCEWAITENDFtraceEvent(MaliMaliKCPUFENCEWAITENDFtraceEvent&&) noexcept;
  MaliMaliKCPUFENCEWAITENDFtraceEvent& operator=(MaliMaliKCPUFENCEWAITENDFtraceEvent&&);
  MaliMaliKCPUFENCEWAITENDFtraceEvent(const MaliMaliKCPUFENCEWAITENDFtraceEvent&);
  MaliMaliKCPUFENCEWAITENDFtraceEvent& operator=(const MaliMaliKCPUFENCEWAITENDFtraceEvent&);
  bool operator==(const MaliMaliKCPUFENCEWAITENDFtraceEvent&) const;
  bool operator!=(const MaliMaliKCPUFENCEWAITENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_info_val1() const { return _has_field_[1]; }
  uint64_t info_val1() const { return info_val1_; }
  void set_info_val1(uint64_t value) { info_val1_ = value; _has_field_.set(1); }

  bool has_info_val2() const { return _has_field_[2]; }
  uint64_t info_val2() const { return info_val2_; }
  void set_info_val2(uint64_t value) { info_val2_ = value; _has_field_.set(2); }

  bool has_kctx_tgid() const { return _has_field_[3]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(3); }

  bool has_kctx_id() const { return _has_field_[4]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(4); }

  bool has_id() const { return _has_field_[5]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(5); }

 private:
  uint64_t info_val1_{};
  uint64_t info_val2_{};
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint32_t id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliKCPUFENCEWAITSTARTFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kInfoVal1FieldNumber = 1,
    kInfoVal2FieldNumber = 2,
    kKctxTgidFieldNumber = 3,
    kKctxIdFieldNumber = 4,
    kIdFieldNumber = 5,
  };

  MaliMaliKCPUFENCEWAITSTARTFtraceEvent();
  ~MaliMaliKCPUFENCEWAITSTARTFtraceEvent() override;
  MaliMaliKCPUFENCEWAITSTARTFtraceEvent(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&) noexcept;
  MaliMaliKCPUFENCEWAITSTARTFtraceEvent& operator=(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&);
  MaliMaliKCPUFENCEWAITSTARTFtraceEvent(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&);
  MaliMaliKCPUFENCEWAITSTARTFtraceEvent& operator=(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&);
  bool operator==(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&) const;
  bool operator!=(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_info_val1() const { return _has_field_[1]; }
  uint64_t info_val1() const { return info_val1_; }
  void set_info_val1(uint64_t value) { info_val1_ = value; _has_field_.set(1); }

  bool has_info_val2() const { return _has_field_[2]; }
  uint64_t info_val2() const { return info_val2_; }
  void set_info_val2(uint64_t value) { info_val2_ = value; _has_field_.set(2); }

  bool has_kctx_tgid() const { return _has_field_[3]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(3); }

  bool has_kctx_id() const { return _has_field_[4]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(4); }

  bool has_id() const { return _has_field_[5]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(5); }

 private:
  uint64_t info_val1_{};
  uint64_t info_val2_{};
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint32_t id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliKCPUFENCESIGNALFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kInfoVal1FieldNumber = 1,
    kInfoVal2FieldNumber = 2,
    kKctxTgidFieldNumber = 3,
    kKctxIdFieldNumber = 4,
    kIdFieldNumber = 5,
  };

  MaliMaliKCPUFENCESIGNALFtraceEvent();
  ~MaliMaliKCPUFENCESIGNALFtraceEvent() override;
  MaliMaliKCPUFENCESIGNALFtraceEvent(MaliMaliKCPUFENCESIGNALFtraceEvent&&) noexcept;
  MaliMaliKCPUFENCESIGNALFtraceEvent& operator=(MaliMaliKCPUFENCESIGNALFtraceEvent&&);
  MaliMaliKCPUFENCESIGNALFtraceEvent(const MaliMaliKCPUFENCESIGNALFtraceEvent&);
  MaliMaliKCPUFENCESIGNALFtraceEvent& operator=(const MaliMaliKCPUFENCESIGNALFtraceEvent&);
  bool operator==(const MaliMaliKCPUFENCESIGNALFtraceEvent&) const;
  bool operator!=(const MaliMaliKCPUFENCESIGNALFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_info_val1() const { return _has_field_[1]; }
  uint64_t info_val1() const { return info_val1_; }
  void set_info_val1(uint64_t value) { info_val1_ = value; _has_field_.set(1); }

  bool has_info_val2() const { return _has_field_[2]; }
  uint64_t info_val2() const { return info_val2_; }
  void set_info_val2(uint64_t value) { info_val2_ = value; _has_field_.set(2); }

  bool has_kctx_tgid() const { return _has_field_[3]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(3); }

  bool has_kctx_id() const { return _has_field_[4]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(4); }

  bool has_id() const { return _has_field_[5]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(5); }

 private:
  uint64_t info_val1_{};
  uint64_t info_val2_{};
  int32_t kctx_tgid_{};
  uint32_t kctx_id_{};
  uint32_t id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliKCPUCQSWAITENDFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kInfoVal1FieldNumber = 2,
    kInfoVal2FieldNumber = 3,
    kKctxIdFieldNumber = 4,
    kKctxTgidFieldNumber = 5,
  };

  MaliMaliKCPUCQSWAITENDFtraceEvent();
  ~MaliMaliKCPUCQSWAITENDFtraceEvent() override;
  MaliMaliKCPUCQSWAITENDFtraceEvent(MaliMaliKCPUCQSWAITENDFtraceEvent&&) noexcept;
  MaliMaliKCPUCQSWAITENDFtraceEvent& operator=(MaliMaliKCPUCQSWAITENDFtraceEvent&&);
  MaliMaliKCPUCQSWAITENDFtraceEvent(const MaliMaliKCPUCQSWAITENDFtraceEvent&);
  MaliMaliKCPUCQSWAITENDFtraceEvent& operator=(const MaliMaliKCPUCQSWAITENDFtraceEvent&);
  bool operator==(const MaliMaliKCPUCQSWAITENDFtraceEvent&) const;
  bool operator!=(const MaliMaliKCPUCQSWAITENDFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(1); }

  bool has_info_val1() const { return _has_field_[2]; }
  uint64_t info_val1() const { return info_val1_; }
  void set_info_val1(uint64_t value) { info_val1_ = value; _has_field_.set(2); }

  bool has_info_val2() const { return _has_field_[3]; }
  uint64_t info_val2() const { return info_val2_; }
  void set_info_val2(uint64_t value) { info_val2_ = value; _has_field_.set(3); }

  bool has_kctx_id() const { return _has_field_[4]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(4); }

  bool has_kctx_tgid() const { return _has_field_[5]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(5); }

 private:
  uint32_t id_{};
  uint64_t info_val1_{};
  uint64_t info_val2_{};
  uint32_t kctx_id_{};
  int32_t kctx_tgid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliKCPUCQSWAITSTARTFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kInfoVal1FieldNumber = 2,
    kInfoVal2FieldNumber = 3,
    kKctxIdFieldNumber = 4,
    kKctxTgidFieldNumber = 5,
  };

  MaliMaliKCPUCQSWAITSTARTFtraceEvent();
  ~MaliMaliKCPUCQSWAITSTARTFtraceEvent() override;
  MaliMaliKCPUCQSWAITSTARTFtraceEvent(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&) noexcept;
  MaliMaliKCPUCQSWAITSTARTFtraceEvent& operator=(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&);
  MaliMaliKCPUCQSWAITSTARTFtraceEvent(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&);
  MaliMaliKCPUCQSWAITSTARTFtraceEvent& operator=(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&);
  bool operator==(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&) const;
  bool operator!=(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(1); }

  bool has_info_val1() const { return _has_field_[2]; }
  uint64_t info_val1() const { return info_val1_; }
  void set_info_val1(uint64_t value) { info_val1_ = value; _has_field_.set(2); }

  bool has_info_val2() const { return _has_field_[3]; }
  uint64_t info_val2() const { return info_val2_; }
  void set_info_val2(uint64_t value) { info_val2_ = value; _has_field_.set(3); }

  bool has_kctx_id() const { return _has_field_[4]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(4); }

  bool has_kctx_tgid() const { return _has_field_[5]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(5); }

 private:
  uint32_t id_{};
  uint64_t info_val1_{};
  uint64_t info_val2_{};
  uint32_t kctx_id_{};
  int32_t kctx_tgid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliMaliKCPUCQSSETFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kInfoVal1FieldNumber = 2,
    kInfoVal2FieldNumber = 3,
    kKctxIdFieldNumber = 4,
    kKctxTgidFieldNumber = 5,
  };

  MaliMaliKCPUCQSSETFtraceEvent();
  ~MaliMaliKCPUCQSSETFtraceEvent() override;
  MaliMaliKCPUCQSSETFtraceEvent(MaliMaliKCPUCQSSETFtraceEvent&&) noexcept;
  MaliMaliKCPUCQSSETFtraceEvent& operator=(MaliMaliKCPUCQSSETFtraceEvent&&);
  MaliMaliKCPUCQSSETFtraceEvent(const MaliMaliKCPUCQSSETFtraceEvent&);
  MaliMaliKCPUCQSSETFtraceEvent& operator=(const MaliMaliKCPUCQSSETFtraceEvent&);
  bool operator==(const MaliMaliKCPUCQSSETFtraceEvent&) const;
  bool operator!=(const MaliMaliKCPUCQSSETFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(1); }

  bool has_info_val1() const { return _has_field_[2]; }
  uint64_t info_val1() const { return info_val1_; }
  void set_info_val1(uint64_t value) { info_val1_ = value; _has_field_.set(2); }

  bool has_info_val2() const { return _has_field_[3]; }
  uint64_t info_val2() const { return info_val2_; }
  void set_info_val2(uint64_t value) { info_val2_ = value; _has_field_.set(3); }

  bool has_kctx_id() const { return _has_field_[4]; }
  uint32_t kctx_id() const { return kctx_id_; }
  void set_kctx_id(uint32_t value) { kctx_id_ = value; _has_field_.set(4); }

  bool has_kctx_tgid() const { return _has_field_[5]; }
  int32_t kctx_tgid() const { return kctx_tgid_; }
  void set_kctx_tgid(int32_t value) { kctx_tgid_ = value; _has_field_.set(5); }

 private:
  uint32_t id_{};
  uint64_t info_val1_{};
  uint64_t info_val2_{};
  uint32_t kctx_id_{};
  int32_t kctx_tgid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT MaliTracingMarkWriteFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNameFieldNumber = 1,
    kPidFieldNumber = 2,
    kTypeFieldNumber = 3,
    kValueFieldNumber = 4,
  };

  MaliTracingMarkWriteFtraceEvent();
  ~MaliTracingMarkWriteFtraceEvent() override;
  MaliTracingMarkWriteFtraceEvent(MaliTracingMarkWriteFtraceEvent&&) noexcept;
  MaliTracingMarkWriteFtraceEvent& operator=(MaliTracingMarkWriteFtraceEvent&&);
  MaliTracingMarkWriteFtraceEvent(const MaliTracingMarkWriteFtraceEvent&);
  MaliTracingMarkWriteFtraceEvent& operator=(const MaliTracingMarkWriteFtraceEvent&);
  bool operator==(const MaliTracingMarkWriteFtraceEvent&) const;
  bool operator!=(const MaliTracingMarkWriteFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_name() const { return _has_field_[1]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(1); }

  bool has_pid() const { return _has_field_[2]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(2); }

  bool has_type() const { return _has_field_[3]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(3); }

  bool has_value() const { return _has_field_[4]; }
  int32_t value() const { return value_; }
  void set_value(int32_t value) { value_ = value; _has_field_.set(4); }

 private:
  std::string name_{};
  int32_t pid_{};
  uint32_t type_{};
  int32_t value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_MALI_PROTO_CPP_H_
