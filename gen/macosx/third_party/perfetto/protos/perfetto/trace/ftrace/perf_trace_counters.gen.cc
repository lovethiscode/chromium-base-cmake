#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/perf_trace_counters.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

SchedSwitchWithCtrsFtraceEvent::SchedSwitchWithCtrsFtraceEvent() = default;
SchedSwitchWithCtrsFtraceEvent::~SchedSwitchWithCtrsFtraceEvent() = default;
SchedSwitchWithCtrsFtraceEvent::SchedSwitchWithCtrsFtraceEvent(const SchedSwitchWithCtrsFtraceEvent&) = default;
SchedSwitchWithCtrsFtraceEvent& SchedSwitchWithCtrsFtraceEvent::operator=(const SchedSwitchWithCtrsFtraceEvent&) = default;
SchedSwitchWithCtrsFtraceEvent::SchedSwitchWithCtrsFtraceEvent(SchedSwitchWithCtrsFtraceEvent&&) noexcept = default;
SchedSwitchWithCtrsFtraceEvent& SchedSwitchWithCtrsFtraceEvent::operator=(SchedSwitchWithCtrsFtraceEvent&&) = default;

bool SchedSwitchWithCtrsFtraceEvent::operator==(const SchedSwitchWithCtrsFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(old_pid_, other.old_pid_)
   && ::protozero::internal::gen_helpers::EqualsField(new_pid_, other.new_pid_)
   && ::protozero::internal::gen_helpers::EqualsField(cctr_, other.cctr_)
   && ::protozero::internal::gen_helpers::EqualsField(ctr0_, other.ctr0_)
   && ::protozero::internal::gen_helpers::EqualsField(ctr1_, other.ctr1_)
   && ::protozero::internal::gen_helpers::EqualsField(ctr2_, other.ctr2_)
   && ::protozero::internal::gen_helpers::EqualsField(ctr3_, other.ctr3_)
   && ::protozero::internal::gen_helpers::EqualsField(lctr0_, other.lctr0_)
   && ::protozero::internal::gen_helpers::EqualsField(lctr1_, other.lctr1_)
   && ::protozero::internal::gen_helpers::EqualsField(ctr4_, other.ctr4_)
   && ::protozero::internal::gen_helpers::EqualsField(ctr5_, other.ctr5_)
   && ::protozero::internal::gen_helpers::EqualsField(prev_comm_, other.prev_comm_)
   && ::protozero::internal::gen_helpers::EqualsField(prev_pid_, other.prev_pid_)
   && ::protozero::internal::gen_helpers::EqualsField(cyc_, other.cyc_)
   && ::protozero::internal::gen_helpers::EqualsField(inst_, other.inst_)
   && ::protozero::internal::gen_helpers::EqualsField(stallbm_, other.stallbm_)
   && ::protozero::internal::gen_helpers::EqualsField(l3dm_, other.l3dm_);
}

bool SchedSwitchWithCtrsFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* old_pid */:
        field.get(&old_pid_);
        break;
      case 2 /* new_pid */:
        field.get(&new_pid_);
        break;
      case 3 /* cctr */:
        field.get(&cctr_);
        break;
      case 4 /* ctr0 */:
        field.get(&ctr0_);
        break;
      case 5 /* ctr1 */:
        field.get(&ctr1_);
        break;
      case 6 /* ctr2 */:
        field.get(&ctr2_);
        break;
      case 7 /* ctr3 */:
        field.get(&ctr3_);
        break;
      case 8 /* lctr0 */:
        field.get(&lctr0_);
        break;
      case 9 /* lctr1 */:
        field.get(&lctr1_);
        break;
      case 10 /* ctr4 */:
        field.get(&ctr4_);
        break;
      case 11 /* ctr5 */:
        field.get(&ctr5_);
        break;
      case 12 /* prev_comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &prev_comm_);
        break;
      case 13 /* prev_pid */:
        field.get(&prev_pid_);
        break;
      case 14 /* cyc */:
        field.get(&cyc_);
        break;
      case 15 /* inst */:
        field.get(&inst_);
        break;
      case 16 /* stallbm */:
        field.get(&stallbm_);
        break;
      case 17 /* l3dm */:
        field.get(&l3dm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SchedSwitchWithCtrsFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SchedSwitchWithCtrsFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SchedSwitchWithCtrsFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: old_pid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, old_pid_, msg);
  }

  // Field 2: new_pid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, new_pid_, msg);
  }

  // Field 3: cctr
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, cctr_, msg);
  }

  // Field 4: ctr0
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, ctr0_, msg);
  }

  // Field 5: ctr1
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, ctr1_, msg);
  }

  // Field 6: ctr2
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, ctr2_, msg);
  }

  // Field 7: ctr3
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, ctr3_, msg);
  }

  // Field 8: lctr0
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, lctr0_, msg);
  }

  // Field 9: lctr1
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, lctr1_, msg);
  }

  // Field 10: ctr4
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, ctr4_, msg);
  }

  // Field 11: ctr5
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, ctr5_, msg);
  }

  // Field 12: prev_comm
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeString(12, prev_comm_, msg);
  }

  // Field 13: prev_pid
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, prev_pid_, msg);
  }

  // Field 14: cyc
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, cyc_, msg);
  }

  // Field 15: inst
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, inst_, msg);
  }

  // Field 16: stallbm
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, stallbm_, msg);
  }

  // Field 17: l3dm
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, l3dm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
