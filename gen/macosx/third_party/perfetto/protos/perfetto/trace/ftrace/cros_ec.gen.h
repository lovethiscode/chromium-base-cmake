// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_CROS_EC_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_CROS_EC_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class CrosEcSensorhubDataFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT CrosEcSensorhubDataFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCurrentTimeFieldNumber = 1,
    kCurrentTimestampFieldNumber = 2,
    kDeltaFieldNumber = 3,
    kEcFifoTimestampFieldNumber = 4,
    kEcSensorNumFieldNumber = 5,
    kFifoTimestampFieldNumber = 6,
  };

  CrosEcSensorhubDataFtraceEvent();
  ~CrosEcSensorhubDataFtraceEvent() override;
  CrosEcSensorhubDataFtraceEvent(CrosEcSensorhubDataFtraceEvent&&) noexcept;
  CrosEcSensorhubDataFtraceEvent& operator=(CrosEcSensorhubDataFtraceEvent&&);
  CrosEcSensorhubDataFtraceEvent(const CrosEcSensorhubDataFtraceEvent&);
  CrosEcSensorhubDataFtraceEvent& operator=(const CrosEcSensorhubDataFtraceEvent&);
  bool operator==(const CrosEcSensorhubDataFtraceEvent&) const;
  bool operator!=(const CrosEcSensorhubDataFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_current_time() const { return _has_field_[1]; }
  int64_t current_time() const { return current_time_; }
  void set_current_time(int64_t value) { current_time_ = value; _has_field_.set(1); }

  bool has_current_timestamp() const { return _has_field_[2]; }
  int64_t current_timestamp() const { return current_timestamp_; }
  void set_current_timestamp(int64_t value) { current_timestamp_ = value; _has_field_.set(2); }

  bool has_delta() const { return _has_field_[3]; }
  int64_t delta() const { return delta_; }
  void set_delta(int64_t value) { delta_ = value; _has_field_.set(3); }

  bool has_ec_fifo_timestamp() const { return _has_field_[4]; }
  uint32_t ec_fifo_timestamp() const { return ec_fifo_timestamp_; }
  void set_ec_fifo_timestamp(uint32_t value) { ec_fifo_timestamp_ = value; _has_field_.set(4); }

  bool has_ec_sensor_num() const { return _has_field_[5]; }
  uint32_t ec_sensor_num() const { return ec_sensor_num_; }
  void set_ec_sensor_num(uint32_t value) { ec_sensor_num_ = value; _has_field_.set(5); }

  bool has_fifo_timestamp() const { return _has_field_[6]; }
  int64_t fifo_timestamp() const { return fifo_timestamp_; }
  void set_fifo_timestamp(int64_t value) { fifo_timestamp_ = value; _has_field_.set(6); }

 private:
  int64_t current_time_{};
  int64_t current_timestamp_{};
  int64_t delta_{};
  uint32_t ec_fifo_timestamp_{};
  uint32_t ec_sensor_num_{};
  int64_t fifo_timestamp_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_CROS_EC_PROTO_CPP_H_
