// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SKB_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SKB_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class KfreeSkbFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT KfreeSkbFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kLocationFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kSkbaddrFieldNumber = 3,
  };

  KfreeSkbFtraceEvent();
  ~KfreeSkbFtraceEvent() override;
  KfreeSkbFtraceEvent(KfreeSkbFtraceEvent&&) noexcept;
  KfreeSkbFtraceEvent& operator=(KfreeSkbFtraceEvent&&);
  KfreeSkbFtraceEvent(const KfreeSkbFtraceEvent&);
  KfreeSkbFtraceEvent& operator=(const KfreeSkbFtraceEvent&);
  bool operator==(const KfreeSkbFtraceEvent&) const;
  bool operator!=(const KfreeSkbFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_location() const { return _has_field_[1]; }
  uint64_t location() const { return location_; }
  void set_location(uint64_t value) { location_ = value; _has_field_.set(1); }

  bool has_protocol() const { return _has_field_[2]; }
  uint32_t protocol() const { return protocol_; }
  void set_protocol(uint32_t value) { protocol_ = value; _has_field_.set(2); }

  bool has_skbaddr() const { return _has_field_[3]; }
  uint64_t skbaddr() const { return skbaddr_; }
  void set_skbaddr(uint64_t value) { skbaddr_ = value; _has_field_.set(3); }

 private:
  uint64_t location_{};
  uint32_t protocol_{};
  uint64_t skbaddr_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SKB_PROTO_CPP_H_
