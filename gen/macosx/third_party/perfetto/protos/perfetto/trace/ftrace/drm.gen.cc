#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/drm.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

DrmVblankEventDeliveredFtraceEvent::DrmVblankEventDeliveredFtraceEvent() = default;
DrmVblankEventDeliveredFtraceEvent::~DrmVblankEventDeliveredFtraceEvent() = default;
DrmVblankEventDeliveredFtraceEvent::DrmVblankEventDeliveredFtraceEvent(const DrmVblankEventDeliveredFtraceEvent&) = default;
DrmVblankEventDeliveredFtraceEvent& DrmVblankEventDeliveredFtraceEvent::operator=(const DrmVblankEventDeliveredFtraceEvent&) = default;
DrmVblankEventDeliveredFtraceEvent::DrmVblankEventDeliveredFtraceEvent(DrmVblankEventDeliveredFtraceEvent&&) noexcept = default;
DrmVblankEventDeliveredFtraceEvent& DrmVblankEventDeliveredFtraceEvent::operator=(DrmVblankEventDeliveredFtraceEvent&&) = default;

bool DrmVblankEventDeliveredFtraceEvent::operator==(const DrmVblankEventDeliveredFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(crtc_, other.crtc_)
   && ::protozero::internal::gen_helpers::EqualsField(file_, other.file_)
   && ::protozero::internal::gen_helpers::EqualsField(seq_, other.seq_);
}

bool DrmVblankEventDeliveredFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* crtc */:
        field.get(&crtc_);
        break;
      case 2 /* file */:
        field.get(&file_);
        break;
      case 3 /* seq */:
        field.get(&seq_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DrmVblankEventDeliveredFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DrmVblankEventDeliveredFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DrmVblankEventDeliveredFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: crtc
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, crtc_, msg);
  }

  // Field 2: file
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, file_, msg);
  }

  // Field 3: seq
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, seq_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DrmVblankEventFtraceEvent::DrmVblankEventFtraceEvent() = default;
DrmVblankEventFtraceEvent::~DrmVblankEventFtraceEvent() = default;
DrmVblankEventFtraceEvent::DrmVblankEventFtraceEvent(const DrmVblankEventFtraceEvent&) = default;
DrmVblankEventFtraceEvent& DrmVblankEventFtraceEvent::operator=(const DrmVblankEventFtraceEvent&) = default;
DrmVblankEventFtraceEvent::DrmVblankEventFtraceEvent(DrmVblankEventFtraceEvent&&) noexcept = default;
DrmVblankEventFtraceEvent& DrmVblankEventFtraceEvent::operator=(DrmVblankEventFtraceEvent&&) = default;

bool DrmVblankEventFtraceEvent::operator==(const DrmVblankEventFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(crtc_, other.crtc_)
   && ::protozero::internal::gen_helpers::EqualsField(high_prec_, other.high_prec_)
   && ::protozero::internal::gen_helpers::EqualsField(seq_, other.seq_)
   && ::protozero::internal::gen_helpers::EqualsField(time_, other.time_);
}

bool DrmVblankEventFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* crtc */:
        field.get(&crtc_);
        break;
      case 2 /* high_prec */:
        field.get(&high_prec_);
        break;
      case 3 /* seq */:
        field.get(&seq_);
        break;
      case 4 /* time */:
        field.get(&time_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DrmVblankEventFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DrmVblankEventFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DrmVblankEventFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: crtc
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, crtc_, msg);
  }

  // Field 2: high_prec
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, high_prec_, msg);
  }

  // Field 3: seq
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, seq_, msg);
  }

  // Field 4: time
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, time_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
