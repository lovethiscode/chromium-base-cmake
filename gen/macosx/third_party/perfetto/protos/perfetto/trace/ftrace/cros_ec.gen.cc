#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/cros_ec.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

CrosEcSensorhubDataFtraceEvent::CrosEcSensorhubDataFtraceEvent() = default;
CrosEcSensorhubDataFtraceEvent::~CrosEcSensorhubDataFtraceEvent() = default;
CrosEcSensorhubDataFtraceEvent::CrosEcSensorhubDataFtraceEvent(const CrosEcSensorhubDataFtraceEvent&) = default;
CrosEcSensorhubDataFtraceEvent& CrosEcSensorhubDataFtraceEvent::operator=(const CrosEcSensorhubDataFtraceEvent&) = default;
CrosEcSensorhubDataFtraceEvent::CrosEcSensorhubDataFtraceEvent(CrosEcSensorhubDataFtraceEvent&&) noexcept = default;
CrosEcSensorhubDataFtraceEvent& CrosEcSensorhubDataFtraceEvent::operator=(CrosEcSensorhubDataFtraceEvent&&) = default;

bool CrosEcSensorhubDataFtraceEvent::operator==(const CrosEcSensorhubDataFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(current_time_, other.current_time_)
   && ::protozero::internal::gen_helpers::EqualsField(current_timestamp_, other.current_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(delta_, other.delta_)
   && ::protozero::internal::gen_helpers::EqualsField(ec_fifo_timestamp_, other.ec_fifo_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(ec_sensor_num_, other.ec_sensor_num_)
   && ::protozero::internal::gen_helpers::EqualsField(fifo_timestamp_, other.fifo_timestamp_);
}

bool CrosEcSensorhubDataFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* current_time */:
        field.get(&current_time_);
        break;
      case 2 /* current_timestamp */:
        field.get(&current_timestamp_);
        break;
      case 3 /* delta */:
        field.get(&delta_);
        break;
      case 4 /* ec_fifo_timestamp */:
        field.get(&ec_fifo_timestamp_);
        break;
      case 5 /* ec_sensor_num */:
        field.get(&ec_sensor_num_);
        break;
      case 6 /* fifo_timestamp */:
        field.get(&fifo_timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CrosEcSensorhubDataFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CrosEcSensorhubDataFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CrosEcSensorhubDataFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: current_time
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, current_time_, msg);
  }

  // Field 2: current_timestamp
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, current_timestamp_, msg);
  }

  // Field 3: delta
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, delta_, msg);
  }

  // Field 4: ec_fifo_timestamp
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, ec_fifo_timestamp_, msg);
  }

  // Field 5: ec_sensor_num
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, ec_sensor_num_, msg);
  }

  // Field 6: fifo_timestamp
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, fifo_timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
