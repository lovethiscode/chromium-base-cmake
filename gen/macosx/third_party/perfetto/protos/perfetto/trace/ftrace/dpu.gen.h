// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_DPU_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_DPU_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class DpuDsiTxFtraceEvent;
class DpuDsiRxFtraceEvent;
class DpuDsiCmdFifoStatusFtraceEvent;
class DpuTracingMarkWriteFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT DpuDsiTxFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTypeFieldNumber = 1,
    kTxBufFieldNumber = 2,
    kLastFieldNumber = 3,
    kDelayMsFieldNumber = 4,
  };

  DpuDsiTxFtraceEvent();
  ~DpuDsiTxFtraceEvent() override;
  DpuDsiTxFtraceEvent(DpuDsiTxFtraceEvent&&) noexcept;
  DpuDsiTxFtraceEvent& operator=(DpuDsiTxFtraceEvent&&);
  DpuDsiTxFtraceEvent(const DpuDsiTxFtraceEvent&);
  DpuDsiTxFtraceEvent& operator=(const DpuDsiTxFtraceEvent&);
  bool operator==(const DpuDsiTxFtraceEvent&) const;
  bool operator!=(const DpuDsiTxFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_type() const { return _has_field_[1]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(1); }

  bool has_tx_buf() const { return _has_field_[2]; }
  uint32_t tx_buf() const { return tx_buf_; }
  void set_tx_buf(uint32_t value) { tx_buf_ = value; _has_field_.set(2); }

  bool has_last() const { return _has_field_[3]; }
  uint32_t last() const { return last_; }
  void set_last(uint32_t value) { last_ = value; _has_field_.set(3); }

  bool has_delay_ms() const { return _has_field_[4]; }
  uint32_t delay_ms() const { return delay_ms_; }
  void set_delay_ms(uint32_t value) { delay_ms_ = value; _has_field_.set(4); }

 private:
  uint32_t type_{};
  uint32_t tx_buf_{};
  uint32_t last_{};
  uint32_t delay_ms_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DpuDsiRxFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCmdFieldNumber = 1,
    kRxBufFieldNumber = 2,
  };

  DpuDsiRxFtraceEvent();
  ~DpuDsiRxFtraceEvent() override;
  DpuDsiRxFtraceEvent(DpuDsiRxFtraceEvent&&) noexcept;
  DpuDsiRxFtraceEvent& operator=(DpuDsiRxFtraceEvent&&);
  DpuDsiRxFtraceEvent(const DpuDsiRxFtraceEvent&);
  DpuDsiRxFtraceEvent& operator=(const DpuDsiRxFtraceEvent&);
  bool operator==(const DpuDsiRxFtraceEvent&) const;
  bool operator!=(const DpuDsiRxFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cmd() const { return _has_field_[1]; }
  uint32_t cmd() const { return cmd_; }
  void set_cmd(uint32_t value) { cmd_ = value; _has_field_.set(1); }

  bool has_rx_buf() const { return _has_field_[2]; }
  uint32_t rx_buf() const { return rx_buf_; }
  void set_rx_buf(uint32_t value) { rx_buf_ = value; _has_field_.set(2); }

 private:
  uint32_t cmd_{};
  uint32_t rx_buf_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DpuDsiCmdFifoStatusFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };

  DpuDsiCmdFifoStatusFtraceEvent();
  ~DpuDsiCmdFifoStatusFtraceEvent() override;
  DpuDsiCmdFifoStatusFtraceEvent(DpuDsiCmdFifoStatusFtraceEvent&&) noexcept;
  DpuDsiCmdFifoStatusFtraceEvent& operator=(DpuDsiCmdFifoStatusFtraceEvent&&);
  DpuDsiCmdFifoStatusFtraceEvent(const DpuDsiCmdFifoStatusFtraceEvent&);
  DpuDsiCmdFifoStatusFtraceEvent& operator=(const DpuDsiCmdFifoStatusFtraceEvent&);
  bool operator==(const DpuDsiCmdFifoStatusFtraceEvent&) const;
  bool operator!=(const DpuDsiCmdFifoStatusFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_header() const { return _has_field_[1]; }
  uint32_t header() const { return header_; }
  void set_header(uint32_t value) { header_ = value; _has_field_.set(1); }

  bool has_payload() const { return _has_field_[2]; }
  uint32_t payload() const { return payload_; }
  void set_payload(uint32_t value) { payload_ = value; _has_field_.set(2); }

 private:
  uint32_t header_{};
  uint32_t payload_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DpuTracingMarkWriteFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kTraceNameFieldNumber = 2,
    kTraceBeginFieldNumber = 3,
    kNameFieldNumber = 4,
    kTypeFieldNumber = 5,
    kValueFieldNumber = 6,
  };

  DpuTracingMarkWriteFtraceEvent();
  ~DpuTracingMarkWriteFtraceEvent() override;
  DpuTracingMarkWriteFtraceEvent(DpuTracingMarkWriteFtraceEvent&&) noexcept;
  DpuTracingMarkWriteFtraceEvent& operator=(DpuTracingMarkWriteFtraceEvent&&);
  DpuTracingMarkWriteFtraceEvent(const DpuTracingMarkWriteFtraceEvent&);
  DpuTracingMarkWriteFtraceEvent& operator=(const DpuTracingMarkWriteFtraceEvent&);
  bool operator==(const DpuTracingMarkWriteFtraceEvent&) const;
  bool operator!=(const DpuTracingMarkWriteFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_trace_name() const { return _has_field_[2]; }
  const std::string& trace_name() const { return trace_name_; }
  void set_trace_name(const std::string& value) { trace_name_ = value; _has_field_.set(2); }

  bool has_trace_begin() const { return _has_field_[3]; }
  uint32_t trace_begin() const { return trace_begin_; }
  void set_trace_begin(uint32_t value) { trace_begin_ = value; _has_field_.set(3); }

  bool has_name() const { return _has_field_[4]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(4); }

  bool has_type() const { return _has_field_[5]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(5); }

  bool has_value() const { return _has_field_[6]; }
  int32_t value() const { return value_; }
  void set_value(int32_t value) { value_ = value; _has_field_.set(6); }

 private:
  int32_t pid_{};
  std::string trace_name_{};
  uint32_t trace_begin_{};
  std::string name_{};
  uint32_t type_{};
  int32_t value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_DPU_PROTO_CPP_H_
