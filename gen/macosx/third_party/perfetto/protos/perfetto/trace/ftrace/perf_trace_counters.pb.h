// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/perf_trace_counters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fperf_5ftrace_5fcounters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fperf_5ftrace_5fcounters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fperf_5ftrace_5fcounters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fperf_5ftrace_5fcounters_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class SchedSwitchWithCtrsFtraceEvent;
struct SchedSwitchWithCtrsFtraceEventDefaultTypeInternal;
extern SchedSwitchWithCtrsFtraceEventDefaultTypeInternal _SchedSwitchWithCtrsFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SchedSwitchWithCtrsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SchedSwitchWithCtrsFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SchedSwitchWithCtrsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SchedSwitchWithCtrsFtraceEvent) */ {
 public:
  inline SchedSwitchWithCtrsFtraceEvent() : SchedSwitchWithCtrsFtraceEvent(nullptr) {}
  ~SchedSwitchWithCtrsFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR SchedSwitchWithCtrsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SchedSwitchWithCtrsFtraceEvent(const SchedSwitchWithCtrsFtraceEvent& from);
  SchedSwitchWithCtrsFtraceEvent(SchedSwitchWithCtrsFtraceEvent&& from) noexcept
    : SchedSwitchWithCtrsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SchedSwitchWithCtrsFtraceEvent& operator=(const SchedSwitchWithCtrsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedSwitchWithCtrsFtraceEvent& operator=(SchedSwitchWithCtrsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SchedSwitchWithCtrsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SchedSwitchWithCtrsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SchedSwitchWithCtrsFtraceEvent*>(
               &_SchedSwitchWithCtrsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SchedSwitchWithCtrsFtraceEvent& a, SchedSwitchWithCtrsFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SchedSwitchWithCtrsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedSwitchWithCtrsFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SchedSwitchWithCtrsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SchedSwitchWithCtrsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SchedSwitchWithCtrsFtraceEvent& from);
  void MergeFrom(const SchedSwitchWithCtrsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SchedSwitchWithCtrsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SchedSwitchWithCtrsFtraceEvent";
  }
  protected:
  explicit SchedSwitchWithCtrsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevCommFieldNumber = 12,
    kOldPidFieldNumber = 1,
    kNewPidFieldNumber = 2,
    kCctrFieldNumber = 3,
    kCtr0FieldNumber = 4,
    kCtr1FieldNumber = 5,
    kCtr2FieldNumber = 6,
    kCtr3FieldNumber = 7,
    kLctr0FieldNumber = 8,
    kLctr1FieldNumber = 9,
    kCtr4FieldNumber = 10,
    kCtr5FieldNumber = 11,
    kPrevPidFieldNumber = 13,
    kCycFieldNumber = 14,
    kInstFieldNumber = 15,
    kStallbmFieldNumber = 16,
    kL3DmFieldNumber = 17,
  };
  // optional string prev_comm = 12;
  bool has_prev_comm() const;
  private:
  bool _internal_has_prev_comm() const;
  public:
  void clear_prev_comm();
  const std::string& prev_comm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_comm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_comm();
  PROTOBUF_NODISCARD std::string* release_prev_comm();
  void set_allocated_prev_comm(std::string* prev_comm);
  private:
  const std::string& _internal_prev_comm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_comm(const std::string& value);
  std::string* _internal_mutable_prev_comm();
  public:

  // optional int32 old_pid = 1;
  bool has_old_pid() const;
  private:
  bool _internal_has_old_pid() const;
  public:
  void clear_old_pid();
  int32_t old_pid() const;
  void set_old_pid(int32_t value);
  private:
  int32_t _internal_old_pid() const;
  void _internal_set_old_pid(int32_t value);
  public:

  // optional int32 new_pid = 2;
  bool has_new_pid() const;
  private:
  bool _internal_has_new_pid() const;
  public:
  void clear_new_pid();
  int32_t new_pid() const;
  void set_new_pid(int32_t value);
  private:
  int32_t _internal_new_pid() const;
  void _internal_set_new_pid(int32_t value);
  public:

  // optional uint32 cctr = 3;
  bool has_cctr() const;
  private:
  bool _internal_has_cctr() const;
  public:
  void clear_cctr();
  uint32_t cctr() const;
  void set_cctr(uint32_t value);
  private:
  uint32_t _internal_cctr() const;
  void _internal_set_cctr(uint32_t value);
  public:

  // optional uint32 ctr0 = 4;
  bool has_ctr0() const;
  private:
  bool _internal_has_ctr0() const;
  public:
  void clear_ctr0();
  uint32_t ctr0() const;
  void set_ctr0(uint32_t value);
  private:
  uint32_t _internal_ctr0() const;
  void _internal_set_ctr0(uint32_t value);
  public:

  // optional uint32 ctr1 = 5;
  bool has_ctr1() const;
  private:
  bool _internal_has_ctr1() const;
  public:
  void clear_ctr1();
  uint32_t ctr1() const;
  void set_ctr1(uint32_t value);
  private:
  uint32_t _internal_ctr1() const;
  void _internal_set_ctr1(uint32_t value);
  public:

  // optional uint32 ctr2 = 6;
  bool has_ctr2() const;
  private:
  bool _internal_has_ctr2() const;
  public:
  void clear_ctr2();
  uint32_t ctr2() const;
  void set_ctr2(uint32_t value);
  private:
  uint32_t _internal_ctr2() const;
  void _internal_set_ctr2(uint32_t value);
  public:

  // optional uint32 ctr3 = 7;
  bool has_ctr3() const;
  private:
  bool _internal_has_ctr3() const;
  public:
  void clear_ctr3();
  uint32_t ctr3() const;
  void set_ctr3(uint32_t value);
  private:
  uint32_t _internal_ctr3() const;
  void _internal_set_ctr3(uint32_t value);
  public:

  // optional uint32 lctr0 = 8;
  bool has_lctr0() const;
  private:
  bool _internal_has_lctr0() const;
  public:
  void clear_lctr0();
  uint32_t lctr0() const;
  void set_lctr0(uint32_t value);
  private:
  uint32_t _internal_lctr0() const;
  void _internal_set_lctr0(uint32_t value);
  public:

  // optional uint32 lctr1 = 9;
  bool has_lctr1() const;
  private:
  bool _internal_has_lctr1() const;
  public:
  void clear_lctr1();
  uint32_t lctr1() const;
  void set_lctr1(uint32_t value);
  private:
  uint32_t _internal_lctr1() const;
  void _internal_set_lctr1(uint32_t value);
  public:

  // optional uint32 ctr4 = 10;
  bool has_ctr4() const;
  private:
  bool _internal_has_ctr4() const;
  public:
  void clear_ctr4();
  uint32_t ctr4() const;
  void set_ctr4(uint32_t value);
  private:
  uint32_t _internal_ctr4() const;
  void _internal_set_ctr4(uint32_t value);
  public:

  // optional uint32 ctr5 = 11;
  bool has_ctr5() const;
  private:
  bool _internal_has_ctr5() const;
  public:
  void clear_ctr5();
  uint32_t ctr5() const;
  void set_ctr5(uint32_t value);
  private:
  uint32_t _internal_ctr5() const;
  void _internal_set_ctr5(uint32_t value);
  public:

  // optional int32 prev_pid = 13;
  bool has_prev_pid() const;
  private:
  bool _internal_has_prev_pid() const;
  public:
  void clear_prev_pid();
  int32_t prev_pid() const;
  void set_prev_pid(int32_t value);
  private:
  int32_t _internal_prev_pid() const;
  void _internal_set_prev_pid(int32_t value);
  public:

  // optional uint32 cyc = 14;
  bool has_cyc() const;
  private:
  bool _internal_has_cyc() const;
  public:
  void clear_cyc();
  uint32_t cyc() const;
  void set_cyc(uint32_t value);
  private:
  uint32_t _internal_cyc() const;
  void _internal_set_cyc(uint32_t value);
  public:

  // optional uint32 inst = 15;
  bool has_inst() const;
  private:
  bool _internal_has_inst() const;
  public:
  void clear_inst();
  uint32_t inst() const;
  void set_inst(uint32_t value);
  private:
  uint32_t _internal_inst() const;
  void _internal_set_inst(uint32_t value);
  public:

  // optional uint32 stallbm = 16;
  bool has_stallbm() const;
  private:
  bool _internal_has_stallbm() const;
  public:
  void clear_stallbm();
  uint32_t stallbm() const;
  void set_stallbm(uint32_t value);
  private:
  uint32_t _internal_stallbm() const;
  void _internal_set_stallbm(uint32_t value);
  public:

  // optional uint32 l3dm = 17;
  bool has_l3dm() const;
  private:
  bool _internal_has_l3dm() const;
  public:
  void clear_l3dm();
  uint32_t l3dm() const;
  void set_l3dm(uint32_t value);
  private:
  uint32_t _internal_l3dm() const;
  void _internal_set_l3dm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_comm_;
    int32_t old_pid_;
    int32_t new_pid_;
    uint32_t cctr_;
    uint32_t ctr0_;
    uint32_t ctr1_;
    uint32_t ctr2_;
    uint32_t ctr3_;
    uint32_t lctr0_;
    uint32_t lctr1_;
    uint32_t ctr4_;
    uint32_t ctr5_;
    int32_t prev_pid_;
    uint32_t cyc_;
    uint32_t inst_;
    uint32_t stallbm_;
    uint32_t l3dm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fperf_5ftrace_5fcounters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SchedSwitchWithCtrsFtraceEvent

// optional int32 old_pid = 1;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_old_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_old_pid() const {
  return _internal_has_old_pid();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_old_pid() {
  _impl_.old_pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SchedSwitchWithCtrsFtraceEvent::_internal_old_pid() const {
  return _impl_.old_pid_;
}
inline int32_t SchedSwitchWithCtrsFtraceEvent::old_pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.old_pid)
  return _internal_old_pid();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_old_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_pid_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_old_pid(int32_t value) {
  _internal_set_old_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.old_pid)
}

// optional int32 new_pid = 2;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_new_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_new_pid() const {
  return _internal_has_new_pid();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_new_pid() {
  _impl_.new_pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SchedSwitchWithCtrsFtraceEvent::_internal_new_pid() const {
  return _impl_.new_pid_;
}
inline int32_t SchedSwitchWithCtrsFtraceEvent::new_pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.new_pid)
  return _internal_new_pid();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_new_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_pid_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_new_pid(int32_t value) {
  _internal_set_new_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.new_pid)
}

// optional uint32 cctr = 3;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_cctr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_cctr() const {
  return _internal_has_cctr();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_cctr() {
  _impl_.cctr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_cctr() const {
  return _impl_.cctr_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::cctr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.cctr)
  return _internal_cctr();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_cctr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cctr_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_cctr(uint32_t value) {
  _internal_set_cctr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.cctr)
}

// optional uint32 ctr0 = 4;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_ctr0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_ctr0() const {
  return _internal_has_ctr0();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_ctr0() {
  _impl_.ctr0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_ctr0() const {
  return _impl_.ctr0_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::ctr0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr0)
  return _internal_ctr0();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_ctr0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ctr0_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_ctr0(uint32_t value) {
  _internal_set_ctr0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr0)
}

// optional uint32 ctr1 = 5;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_ctr1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_ctr1() const {
  return _internal_has_ctr1();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_ctr1() {
  _impl_.ctr1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_ctr1() const {
  return _impl_.ctr1_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::ctr1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr1)
  return _internal_ctr1();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_ctr1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ctr1_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_ctr1(uint32_t value) {
  _internal_set_ctr1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr1)
}

// optional uint32 ctr2 = 6;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_ctr2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_ctr2() const {
  return _internal_has_ctr2();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_ctr2() {
  _impl_.ctr2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_ctr2() const {
  return _impl_.ctr2_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::ctr2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr2)
  return _internal_ctr2();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_ctr2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ctr2_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_ctr2(uint32_t value) {
  _internal_set_ctr2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr2)
}

// optional uint32 ctr3 = 7;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_ctr3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_ctr3() const {
  return _internal_has_ctr3();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_ctr3() {
  _impl_.ctr3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_ctr3() const {
  return _impl_.ctr3_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::ctr3() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr3)
  return _internal_ctr3();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_ctr3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ctr3_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_ctr3(uint32_t value) {
  _internal_set_ctr3(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr3)
}

// optional uint32 lctr0 = 8;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_lctr0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_lctr0() const {
  return _internal_has_lctr0();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_lctr0() {
  _impl_.lctr0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_lctr0() const {
  return _impl_.lctr0_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::lctr0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.lctr0)
  return _internal_lctr0();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_lctr0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lctr0_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_lctr0(uint32_t value) {
  _internal_set_lctr0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.lctr0)
}

// optional uint32 lctr1 = 9;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_lctr1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_lctr1() const {
  return _internal_has_lctr1();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_lctr1() {
  _impl_.lctr1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_lctr1() const {
  return _impl_.lctr1_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::lctr1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.lctr1)
  return _internal_lctr1();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_lctr1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lctr1_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_lctr1(uint32_t value) {
  _internal_set_lctr1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.lctr1)
}

// optional uint32 ctr4 = 10;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_ctr4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_ctr4() const {
  return _internal_has_ctr4();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_ctr4() {
  _impl_.ctr4_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_ctr4() const {
  return _impl_.ctr4_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::ctr4() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr4)
  return _internal_ctr4();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_ctr4(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ctr4_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_ctr4(uint32_t value) {
  _internal_set_ctr4(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr4)
}

// optional uint32 ctr5 = 11;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_ctr5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_ctr5() const {
  return _internal_has_ctr5();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_ctr5() {
  _impl_.ctr5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_ctr5() const {
  return _impl_.ctr5_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::ctr5() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr5)
  return _internal_ctr5();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_ctr5(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.ctr5_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_ctr5(uint32_t value) {
  _internal_set_ctr5(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.ctr5)
}

// optional string prev_comm = 12;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_prev_comm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_prev_comm() const {
  return _internal_has_prev_comm();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_prev_comm() {
  _impl_.prev_comm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchedSwitchWithCtrsFtraceEvent::prev_comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.prev_comm)
  return _internal_prev_comm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SchedSwitchWithCtrsFtraceEvent::set_prev_comm(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.prev_comm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.prev_comm)
}
inline std::string* SchedSwitchWithCtrsFtraceEvent::mutable_prev_comm() {
  std::string* _s = _internal_mutable_prev_comm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.prev_comm)
  return _s;
}
inline const std::string& SchedSwitchWithCtrsFtraceEvent::_internal_prev_comm() const {
  return _impl_.prev_comm_.Get();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_prev_comm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prev_comm_.Set(value, GetArenaForAllocation());
}
inline std::string* SchedSwitchWithCtrsFtraceEvent::_internal_mutable_prev_comm() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.prev_comm_.Mutable(GetArenaForAllocation());
}
inline std::string* SchedSwitchWithCtrsFtraceEvent::release_prev_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.prev_comm)
  if (!_internal_has_prev_comm()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.prev_comm_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_comm_.IsDefault()) {
    _impl_.prev_comm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_allocated_prev_comm(std::string* prev_comm) {
  if (prev_comm != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prev_comm_.SetAllocated(prev_comm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_comm_.IsDefault()) {
    _impl_.prev_comm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.prev_comm)
}

// optional int32 prev_pid = 13;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_prev_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_prev_pid() const {
  return _internal_has_prev_pid();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_prev_pid() {
  _impl_.prev_pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t SchedSwitchWithCtrsFtraceEvent::_internal_prev_pid() const {
  return _impl_.prev_pid_;
}
inline int32_t SchedSwitchWithCtrsFtraceEvent::prev_pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.prev_pid)
  return _internal_prev_pid();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_prev_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.prev_pid_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_prev_pid(int32_t value) {
  _internal_set_prev_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.prev_pid)
}

// optional uint32 cyc = 14;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_cyc() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_cyc() const {
  return _internal_has_cyc();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_cyc() {
  _impl_.cyc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_cyc() const {
  return _impl_.cyc_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::cyc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.cyc)
  return _internal_cyc();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_cyc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.cyc_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_cyc(uint32_t value) {
  _internal_set_cyc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.cyc)
}

// optional uint32 inst = 15;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_inst() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_inst() const {
  return _internal_has_inst();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_inst() {
  _impl_.inst_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_inst() const {
  return _impl_.inst_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::inst() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.inst)
  return _internal_inst();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_inst(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.inst_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_inst(uint32_t value) {
  _internal_set_inst(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.inst)
}

// optional uint32 stallbm = 16;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_stallbm() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_stallbm() const {
  return _internal_has_stallbm();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_stallbm() {
  _impl_.stallbm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_stallbm() const {
  return _impl_.stallbm_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::stallbm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.stallbm)
  return _internal_stallbm();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_stallbm(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.stallbm_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_stallbm(uint32_t value) {
  _internal_set_stallbm(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.stallbm)
}

// optional uint32 l3dm = 17;
inline bool SchedSwitchWithCtrsFtraceEvent::_internal_has_l3dm() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SchedSwitchWithCtrsFtraceEvent::has_l3dm() const {
  return _internal_has_l3dm();
}
inline void SchedSwitchWithCtrsFtraceEvent::clear_l3dm() {
  _impl_.l3dm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::_internal_l3dm() const {
  return _impl_.l3dm_;
}
inline uint32_t SchedSwitchWithCtrsFtraceEvent::l3dm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.l3dm)
  return _internal_l3dm();
}
inline void SchedSwitchWithCtrsFtraceEvent::_internal_set_l3dm(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.l3dm_ = value;
}
inline void SchedSwitchWithCtrsFtraceEvent::set_l3dm(uint32_t value) {
  _internal_set_l3dm(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SchedSwitchWithCtrsFtraceEvent.l3dm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fperf_5ftrace_5fcounters_2eproto
