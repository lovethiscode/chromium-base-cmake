// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/signal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class SignalDeliverFtraceEvent;
struct SignalDeliverFtraceEventDefaultTypeInternal;
extern SignalDeliverFtraceEventDefaultTypeInternal _SignalDeliverFtraceEvent_default_instance_;
class SignalGenerateFtraceEvent;
struct SignalGenerateFtraceEventDefaultTypeInternal;
extern SignalGenerateFtraceEventDefaultTypeInternal _SignalGenerateFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SignalDeliverFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SignalDeliverFtraceEvent>(Arena*);
template<> ::perfetto::protos::SignalGenerateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SignalGenerateFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SignalDeliverFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SignalDeliverFtraceEvent) */ {
 public:
  inline SignalDeliverFtraceEvent() : SignalDeliverFtraceEvent(nullptr) {}
  ~SignalDeliverFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR SignalDeliverFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalDeliverFtraceEvent(const SignalDeliverFtraceEvent& from);
  SignalDeliverFtraceEvent(SignalDeliverFtraceEvent&& from) noexcept
    : SignalDeliverFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SignalDeliverFtraceEvent& operator=(const SignalDeliverFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalDeliverFtraceEvent& operator=(SignalDeliverFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SignalDeliverFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalDeliverFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SignalDeliverFtraceEvent*>(
               &_SignalDeliverFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignalDeliverFtraceEvent& a, SignalDeliverFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SignalDeliverFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalDeliverFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalDeliverFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalDeliverFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SignalDeliverFtraceEvent& from);
  void MergeFrom(const SignalDeliverFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignalDeliverFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SignalDeliverFtraceEvent";
  }
  protected:
  explicit SignalDeliverFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaFlagsFieldNumber = 2,
    kCodeFieldNumber = 1,
    kSigFieldNumber = 3,
  };
  // optional uint64 sa_flags = 2;
  bool has_sa_flags() const;
  private:
  bool _internal_has_sa_flags() const;
  public:
  void clear_sa_flags();
  uint64_t sa_flags() const;
  void set_sa_flags(uint64_t value);
  private:
  uint64_t _internal_sa_flags() const;
  void _internal_set_sa_flags(uint64_t value);
  public:

  // optional int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // optional int32 sig = 3;
  bool has_sig() const;
  private:
  bool _internal_has_sig() const;
  public:
  void clear_sig();
  int32_t sig() const;
  void set_sig(int32_t value);
  private:
  int32_t _internal_sig() const;
  void _internal_set_sig(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SignalDeliverFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t sa_flags_;
    int32_t code_;
    int32_t sig_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class SignalGenerateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SignalGenerateFtraceEvent) */ {
 public:
  inline SignalGenerateFtraceEvent() : SignalGenerateFtraceEvent(nullptr) {}
  ~SignalGenerateFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR SignalGenerateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalGenerateFtraceEvent(const SignalGenerateFtraceEvent& from);
  SignalGenerateFtraceEvent(SignalGenerateFtraceEvent&& from) noexcept
    : SignalGenerateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SignalGenerateFtraceEvent& operator=(const SignalGenerateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalGenerateFtraceEvent& operator=(SignalGenerateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SignalGenerateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalGenerateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SignalGenerateFtraceEvent*>(
               &_SignalGenerateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignalGenerateFtraceEvent& a, SignalGenerateFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SignalGenerateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalGenerateFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalGenerateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalGenerateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SignalGenerateFtraceEvent& from);
  void MergeFrom(const SignalGenerateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignalGenerateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SignalGenerateFtraceEvent";
  }
  protected:
  explicit SignalGenerateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 2,
    kCodeFieldNumber = 1,
    kGroupFieldNumber = 3,
    kPidFieldNumber = 4,
    kResultFieldNumber = 5,
    kSigFieldNumber = 6,
  };
  // optional string comm = 2;
  bool has_comm() const;
  private:
  bool _internal_has_comm() const;
  public:
  void clear_comm();
  const std::string& comm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comm();
  PROTOBUF_NODISCARD std::string* release_comm();
  void set_allocated_comm(std::string* comm);
  private:
  const std::string& _internal_comm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comm(const std::string& value);
  std::string* _internal_mutable_comm();
  public:

  // optional int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // optional int32 group = 3;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  int32_t group() const;
  void set_group(int32_t value);
  private:
  int32_t _internal_group() const;
  void _internal_set_group(int32_t value);
  public:

  // optional int32 pid = 4;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // optional int32 result = 5;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // optional int32 sig = 6;
  bool has_sig() const;
  private:
  bool _internal_has_sig() const;
  public:
  void clear_sig();
  int32_t sig() const;
  void set_sig(int32_t value);
  private:
  int32_t _internal_sig() const;
  void _internal_set_sig(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SignalGenerateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
    int32_t code_;
    int32_t group_;
    int32_t pid_;
    int32_t result_;
    int32_t sig_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignalDeliverFtraceEvent

// optional int32 code = 1;
inline bool SignalDeliverFtraceEvent::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignalDeliverFtraceEvent::has_code() const {
  return _internal_has_code();
}
inline void SignalDeliverFtraceEvent::clear_code() {
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SignalDeliverFtraceEvent::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SignalDeliverFtraceEvent::code() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalDeliverFtraceEvent.code)
  return _internal_code();
}
inline void SignalDeliverFtraceEvent::_internal_set_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_ = value;
}
inline void SignalDeliverFtraceEvent::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalDeliverFtraceEvent.code)
}

// optional uint64 sa_flags = 2;
inline bool SignalDeliverFtraceEvent::_internal_has_sa_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalDeliverFtraceEvent::has_sa_flags() const {
  return _internal_has_sa_flags();
}
inline void SignalDeliverFtraceEvent::clear_sa_flags() {
  _impl_.sa_flags_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SignalDeliverFtraceEvent::_internal_sa_flags() const {
  return _impl_.sa_flags_;
}
inline uint64_t SignalDeliverFtraceEvent::sa_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalDeliverFtraceEvent.sa_flags)
  return _internal_sa_flags();
}
inline void SignalDeliverFtraceEvent::_internal_set_sa_flags(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sa_flags_ = value;
}
inline void SignalDeliverFtraceEvent::set_sa_flags(uint64_t value) {
  _internal_set_sa_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalDeliverFtraceEvent.sa_flags)
}

// optional int32 sig = 3;
inline bool SignalDeliverFtraceEvent::_internal_has_sig() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignalDeliverFtraceEvent::has_sig() const {
  return _internal_has_sig();
}
inline void SignalDeliverFtraceEvent::clear_sig() {
  _impl_.sig_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SignalDeliverFtraceEvent::_internal_sig() const {
  return _impl_.sig_;
}
inline int32_t SignalDeliverFtraceEvent::sig() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalDeliverFtraceEvent.sig)
  return _internal_sig();
}
inline void SignalDeliverFtraceEvent::_internal_set_sig(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sig_ = value;
}
inline void SignalDeliverFtraceEvent::set_sig(int32_t value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalDeliverFtraceEvent.sig)
}

// -------------------------------------------------------------------

// SignalGenerateFtraceEvent

// optional int32 code = 1;
inline bool SignalGenerateFtraceEvent::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignalGenerateFtraceEvent::has_code() const {
  return _internal_has_code();
}
inline void SignalGenerateFtraceEvent::clear_code() {
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SignalGenerateFtraceEvent::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SignalGenerateFtraceEvent::code() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalGenerateFtraceEvent.code)
  return _internal_code();
}
inline void SignalGenerateFtraceEvent::_internal_set_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_ = value;
}
inline void SignalGenerateFtraceEvent::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalGenerateFtraceEvent.code)
}

// optional string comm = 2;
inline bool SignalGenerateFtraceEvent::_internal_has_comm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalGenerateFtraceEvent::has_comm() const {
  return _internal_has_comm();
}
inline void SignalGenerateFtraceEvent::clear_comm() {
  _impl_.comm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignalGenerateFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalGenerateFtraceEvent.comm)
  return _internal_comm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignalGenerateFtraceEvent::set_comm(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.comm_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalGenerateFtraceEvent.comm)
}
inline std::string* SignalGenerateFtraceEvent::mutable_comm() {
  std::string* _s = _internal_mutable_comm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SignalGenerateFtraceEvent.comm)
  return _s;
}
inline const std::string& SignalGenerateFtraceEvent::_internal_comm() const {
  return _impl_.comm_.Get();
}
inline void SignalGenerateFtraceEvent::_internal_set_comm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comm_.Set(value, GetArenaForAllocation());
}
inline std::string* SignalGenerateFtraceEvent::_internal_mutable_comm() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comm_.Mutable(GetArenaForAllocation());
}
inline std::string* SignalGenerateFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SignalGenerateFtraceEvent.comm)
  if (!_internal_has_comm()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.comm_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comm_.IsDefault()) {
    _impl_.comm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignalGenerateFtraceEvent::set_allocated_comm(std::string* comm) {
  if (comm != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comm_.SetAllocated(comm, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comm_.IsDefault()) {
    _impl_.comm_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SignalGenerateFtraceEvent.comm)
}

// optional int32 group = 3;
inline bool SignalGenerateFtraceEvent::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignalGenerateFtraceEvent::has_group() const {
  return _internal_has_group();
}
inline void SignalGenerateFtraceEvent::clear_group() {
  _impl_.group_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SignalGenerateFtraceEvent::_internal_group() const {
  return _impl_.group_;
}
inline int32_t SignalGenerateFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalGenerateFtraceEvent.group)
  return _internal_group();
}
inline void SignalGenerateFtraceEvent::_internal_set_group(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_ = value;
}
inline void SignalGenerateFtraceEvent::set_group(int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalGenerateFtraceEvent.group)
}

// optional int32 pid = 4;
inline bool SignalGenerateFtraceEvent::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SignalGenerateFtraceEvent::has_pid() const {
  return _internal_has_pid();
}
inline void SignalGenerateFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t SignalGenerateFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t SignalGenerateFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalGenerateFtraceEvent.pid)
  return _internal_pid();
}
inline void SignalGenerateFtraceEvent::_internal_set_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pid_ = value;
}
inline void SignalGenerateFtraceEvent::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalGenerateFtraceEvent.pid)
}

// optional int32 result = 5;
inline bool SignalGenerateFtraceEvent::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SignalGenerateFtraceEvent::has_result() const {
  return _internal_has_result();
}
inline void SignalGenerateFtraceEvent::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t SignalGenerateFtraceEvent::_internal_result() const {
  return _impl_.result_;
}
inline int32_t SignalGenerateFtraceEvent::result() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalGenerateFtraceEvent.result)
  return _internal_result();
}
inline void SignalGenerateFtraceEvent::_internal_set_result(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.result_ = value;
}
inline void SignalGenerateFtraceEvent::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalGenerateFtraceEvent.result)
}

// optional int32 sig = 6;
inline bool SignalGenerateFtraceEvent::_internal_has_sig() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SignalGenerateFtraceEvent::has_sig() const {
  return _internal_has_sig();
}
inline void SignalGenerateFtraceEvent::clear_sig() {
  _impl_.sig_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t SignalGenerateFtraceEvent::_internal_sig() const {
  return _impl_.sig_;
}
inline int32_t SignalGenerateFtraceEvent::sig() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SignalGenerateFtraceEvent.sig)
  return _internal_sig();
}
inline void SignalGenerateFtraceEvent::_internal_set_sig(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sig_ = value;
}
inline void SignalGenerateFtraceEvent::set_sig(int32_t value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SignalGenerateFtraceEvent.sig)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto
