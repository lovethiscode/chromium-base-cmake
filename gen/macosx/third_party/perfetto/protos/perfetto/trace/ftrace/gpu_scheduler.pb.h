// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/gpu_scheduler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class DrmRunJobFtraceEvent;
struct DrmRunJobFtraceEventDefaultTypeInternal;
extern DrmRunJobFtraceEventDefaultTypeInternal _DrmRunJobFtraceEvent_default_instance_;
class DrmSchedJobFtraceEvent;
struct DrmSchedJobFtraceEventDefaultTypeInternal;
extern DrmSchedJobFtraceEventDefaultTypeInternal _DrmSchedJobFtraceEvent_default_instance_;
class DrmSchedProcessJobFtraceEvent;
struct DrmSchedProcessJobFtraceEventDefaultTypeInternal;
extern DrmSchedProcessJobFtraceEventDefaultTypeInternal _DrmSchedProcessJobFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::DrmRunJobFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DrmRunJobFtraceEvent>(Arena*);
template<> ::perfetto::protos::DrmSchedJobFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DrmSchedJobFtraceEvent>(Arena*);
template<> ::perfetto::protos::DrmSchedProcessJobFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DrmSchedProcessJobFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class DrmSchedJobFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DrmSchedJobFtraceEvent) */ {
 public:
  inline DrmSchedJobFtraceEvent() : DrmSchedJobFtraceEvent(nullptr) {}
  ~DrmSchedJobFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR DrmSchedJobFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrmSchedJobFtraceEvent(const DrmSchedJobFtraceEvent& from);
  DrmSchedJobFtraceEvent(DrmSchedJobFtraceEvent&& from) noexcept
    : DrmSchedJobFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DrmSchedJobFtraceEvent& operator=(const DrmSchedJobFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrmSchedJobFtraceEvent& operator=(DrmSchedJobFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DrmSchedJobFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrmSchedJobFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DrmSchedJobFtraceEvent*>(
               &_DrmSchedJobFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DrmSchedJobFtraceEvent& a, DrmSchedJobFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DrmSchedJobFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrmSchedJobFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrmSchedJobFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrmSchedJobFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DrmSchedJobFtraceEvent& from);
  void MergeFrom(const DrmSchedJobFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrmSchedJobFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DrmSchedJobFtraceEvent";
  }
  protected:
  explicit DrmSchedJobFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kEntityFieldNumber = 1,
    kFenceFieldNumber = 2,
    kIdFieldNumber = 4,
    kHwJobCountFieldNumber = 3,
    kJobCountFieldNumber = 5,
  };
  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 entity = 1;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  uint64_t entity() const;
  void set_entity(uint64_t value);
  private:
  uint64_t _internal_entity() const;
  void _internal_set_entity(uint64_t value);
  public:

  // optional uint64 fence = 2;
  bool has_fence() const;
  private:
  bool _internal_has_fence() const;
  public:
  void clear_fence();
  uint64_t fence() const;
  void set_fence(uint64_t value);
  private:
  uint64_t _internal_fence() const;
  void _internal_set_fence(uint64_t value);
  public:

  // optional uint64 id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional int32 hw_job_count = 3;
  bool has_hw_job_count() const;
  private:
  bool _internal_has_hw_job_count() const;
  public:
  void clear_hw_job_count();
  int32_t hw_job_count() const;
  void set_hw_job_count(int32_t value);
  private:
  int32_t _internal_hw_job_count() const;
  void _internal_set_hw_job_count(int32_t value);
  public:

  // optional uint32 job_count = 5;
  bool has_job_count() const;
  private:
  bool _internal_has_job_count() const;
  public:
  void clear_job_count();
  uint32_t job_count() const;
  void set_job_count(uint32_t value);
  private:
  uint32_t _internal_job_count() const;
  void _internal_set_job_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.DrmSchedJobFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t entity_;
    uint64_t fence_;
    uint64_t id_;
    int32_t hw_job_count_;
    uint32_t job_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto;
};
// -------------------------------------------------------------------

class DrmRunJobFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DrmRunJobFtraceEvent) */ {
 public:
  inline DrmRunJobFtraceEvent() : DrmRunJobFtraceEvent(nullptr) {}
  ~DrmRunJobFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR DrmRunJobFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrmRunJobFtraceEvent(const DrmRunJobFtraceEvent& from);
  DrmRunJobFtraceEvent(DrmRunJobFtraceEvent&& from) noexcept
    : DrmRunJobFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DrmRunJobFtraceEvent& operator=(const DrmRunJobFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrmRunJobFtraceEvent& operator=(DrmRunJobFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DrmRunJobFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrmRunJobFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DrmRunJobFtraceEvent*>(
               &_DrmRunJobFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DrmRunJobFtraceEvent& a, DrmRunJobFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DrmRunJobFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrmRunJobFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrmRunJobFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrmRunJobFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DrmRunJobFtraceEvent& from);
  void MergeFrom(const DrmRunJobFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrmRunJobFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DrmRunJobFtraceEvent";
  }
  protected:
  explicit DrmRunJobFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 6,
    kEntityFieldNumber = 1,
    kFenceFieldNumber = 2,
    kIdFieldNumber = 4,
    kHwJobCountFieldNumber = 3,
    kJobCountFieldNumber = 5,
  };
  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 entity = 1;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  uint64_t entity() const;
  void set_entity(uint64_t value);
  private:
  uint64_t _internal_entity() const;
  void _internal_set_entity(uint64_t value);
  public:

  // optional uint64 fence = 2;
  bool has_fence() const;
  private:
  bool _internal_has_fence() const;
  public:
  void clear_fence();
  uint64_t fence() const;
  void set_fence(uint64_t value);
  private:
  uint64_t _internal_fence() const;
  void _internal_set_fence(uint64_t value);
  public:

  // optional uint64 id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional int32 hw_job_count = 3;
  bool has_hw_job_count() const;
  private:
  bool _internal_has_hw_job_count() const;
  public:
  void clear_hw_job_count();
  int32_t hw_job_count() const;
  void set_hw_job_count(int32_t value);
  private:
  int32_t _internal_hw_job_count() const;
  void _internal_set_hw_job_count(int32_t value);
  public:

  // optional uint32 job_count = 5;
  bool has_job_count() const;
  private:
  bool _internal_has_job_count() const;
  public:
  void clear_job_count();
  uint32_t job_count() const;
  void set_job_count(uint32_t value);
  private:
  uint32_t _internal_job_count() const;
  void _internal_set_job_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.DrmRunJobFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t entity_;
    uint64_t fence_;
    uint64_t id_;
    int32_t hw_job_count_;
    uint32_t job_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto;
};
// -------------------------------------------------------------------

class DrmSchedProcessJobFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DrmSchedProcessJobFtraceEvent) */ {
 public:
  inline DrmSchedProcessJobFtraceEvent() : DrmSchedProcessJobFtraceEvent(nullptr) {}
  ~DrmSchedProcessJobFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR DrmSchedProcessJobFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrmSchedProcessJobFtraceEvent(const DrmSchedProcessJobFtraceEvent& from);
  DrmSchedProcessJobFtraceEvent(DrmSchedProcessJobFtraceEvent&& from) noexcept
    : DrmSchedProcessJobFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DrmSchedProcessJobFtraceEvent& operator=(const DrmSchedProcessJobFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrmSchedProcessJobFtraceEvent& operator=(DrmSchedProcessJobFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DrmSchedProcessJobFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrmSchedProcessJobFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DrmSchedProcessJobFtraceEvent*>(
               &_DrmSchedProcessJobFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DrmSchedProcessJobFtraceEvent& a, DrmSchedProcessJobFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DrmSchedProcessJobFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrmSchedProcessJobFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrmSchedProcessJobFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrmSchedProcessJobFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DrmSchedProcessJobFtraceEvent& from);
  void MergeFrom(const DrmSchedProcessJobFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrmSchedProcessJobFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DrmSchedProcessJobFtraceEvent";
  }
  protected:
  explicit DrmSchedProcessJobFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFenceFieldNumber = 1,
  };
  // optional uint64 fence = 1;
  bool has_fence() const;
  private:
  bool _internal_has_fence() const;
  public:
  void clear_fence();
  uint64_t fence() const;
  void set_fence(uint64_t value);
  private:
  uint64_t _internal_fence() const;
  void _internal_set_fence(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.DrmSchedProcessJobFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t fence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DrmSchedJobFtraceEvent

// optional uint64 entity = 1;
inline bool DrmSchedJobFtraceEvent::_internal_has_entity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrmSchedJobFtraceEvent::has_entity() const {
  return _internal_has_entity();
}
inline void DrmSchedJobFtraceEvent::clear_entity() {
  _impl_.entity_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DrmSchedJobFtraceEvent::_internal_entity() const {
  return _impl_.entity_;
}
inline uint64_t DrmSchedJobFtraceEvent::entity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmSchedJobFtraceEvent.entity)
  return _internal_entity();
}
inline void DrmSchedJobFtraceEvent::_internal_set_entity(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_ = value;
}
inline void DrmSchedJobFtraceEvent::set_entity(uint64_t value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmSchedJobFtraceEvent.entity)
}

// optional uint64 fence = 2;
inline bool DrmSchedJobFtraceEvent::_internal_has_fence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrmSchedJobFtraceEvent::has_fence() const {
  return _internal_has_fence();
}
inline void DrmSchedJobFtraceEvent::clear_fence() {
  _impl_.fence_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t DrmSchedJobFtraceEvent::_internal_fence() const {
  return _impl_.fence_;
}
inline uint64_t DrmSchedJobFtraceEvent::fence() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmSchedJobFtraceEvent.fence)
  return _internal_fence();
}
inline void DrmSchedJobFtraceEvent::_internal_set_fence(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fence_ = value;
}
inline void DrmSchedJobFtraceEvent::set_fence(uint64_t value) {
  _internal_set_fence(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmSchedJobFtraceEvent.fence)
}

// optional int32 hw_job_count = 3;
inline bool DrmSchedJobFtraceEvent::_internal_has_hw_job_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrmSchedJobFtraceEvent::has_hw_job_count() const {
  return _internal_has_hw_job_count();
}
inline void DrmSchedJobFtraceEvent::clear_hw_job_count() {
  _impl_.hw_job_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DrmSchedJobFtraceEvent::_internal_hw_job_count() const {
  return _impl_.hw_job_count_;
}
inline int32_t DrmSchedJobFtraceEvent::hw_job_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmSchedJobFtraceEvent.hw_job_count)
  return _internal_hw_job_count();
}
inline void DrmSchedJobFtraceEvent::_internal_set_hw_job_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hw_job_count_ = value;
}
inline void DrmSchedJobFtraceEvent::set_hw_job_count(int32_t value) {
  _internal_set_hw_job_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmSchedJobFtraceEvent.hw_job_count)
}

// optional uint64 id = 4;
inline bool DrmSchedJobFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrmSchedJobFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void DrmSchedJobFtraceEvent::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t DrmSchedJobFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t DrmSchedJobFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmSchedJobFtraceEvent.id)
  return _internal_id();
}
inline void DrmSchedJobFtraceEvent::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void DrmSchedJobFtraceEvent::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmSchedJobFtraceEvent.id)
}

// optional uint32 job_count = 5;
inline bool DrmSchedJobFtraceEvent::_internal_has_job_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DrmSchedJobFtraceEvent::has_job_count() const {
  return _internal_has_job_count();
}
inline void DrmSchedJobFtraceEvent::clear_job_count() {
  _impl_.job_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DrmSchedJobFtraceEvent::_internal_job_count() const {
  return _impl_.job_count_;
}
inline uint32_t DrmSchedJobFtraceEvent::job_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmSchedJobFtraceEvent.job_count)
  return _internal_job_count();
}
inline void DrmSchedJobFtraceEvent::_internal_set_job_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.job_count_ = value;
}
inline void DrmSchedJobFtraceEvent::set_job_count(uint32_t value) {
  _internal_set_job_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmSchedJobFtraceEvent.job_count)
}

// optional string name = 6;
inline bool DrmSchedJobFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrmSchedJobFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void DrmSchedJobFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrmSchedJobFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmSchedJobFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DrmSchedJobFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmSchedJobFtraceEvent.name)
}
inline std::string* DrmSchedJobFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DrmSchedJobFtraceEvent.name)
  return _s;
}
inline const std::string& DrmSchedJobFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DrmSchedJobFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DrmSchedJobFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DrmSchedJobFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DrmSchedJobFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DrmSchedJobFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DrmSchedJobFtraceEvent.name)
}

// -------------------------------------------------------------------

// DrmRunJobFtraceEvent

// optional uint64 entity = 1;
inline bool DrmRunJobFtraceEvent::_internal_has_entity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrmRunJobFtraceEvent::has_entity() const {
  return _internal_has_entity();
}
inline void DrmRunJobFtraceEvent::clear_entity() {
  _impl_.entity_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DrmRunJobFtraceEvent::_internal_entity() const {
  return _impl_.entity_;
}
inline uint64_t DrmRunJobFtraceEvent::entity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmRunJobFtraceEvent.entity)
  return _internal_entity();
}
inline void DrmRunJobFtraceEvent::_internal_set_entity(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_ = value;
}
inline void DrmRunJobFtraceEvent::set_entity(uint64_t value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmRunJobFtraceEvent.entity)
}

// optional uint64 fence = 2;
inline bool DrmRunJobFtraceEvent::_internal_has_fence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrmRunJobFtraceEvent::has_fence() const {
  return _internal_has_fence();
}
inline void DrmRunJobFtraceEvent::clear_fence() {
  _impl_.fence_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t DrmRunJobFtraceEvent::_internal_fence() const {
  return _impl_.fence_;
}
inline uint64_t DrmRunJobFtraceEvent::fence() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmRunJobFtraceEvent.fence)
  return _internal_fence();
}
inline void DrmRunJobFtraceEvent::_internal_set_fence(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fence_ = value;
}
inline void DrmRunJobFtraceEvent::set_fence(uint64_t value) {
  _internal_set_fence(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmRunJobFtraceEvent.fence)
}

// optional int32 hw_job_count = 3;
inline bool DrmRunJobFtraceEvent::_internal_has_hw_job_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrmRunJobFtraceEvent::has_hw_job_count() const {
  return _internal_has_hw_job_count();
}
inline void DrmRunJobFtraceEvent::clear_hw_job_count() {
  _impl_.hw_job_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DrmRunJobFtraceEvent::_internal_hw_job_count() const {
  return _impl_.hw_job_count_;
}
inline int32_t DrmRunJobFtraceEvent::hw_job_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmRunJobFtraceEvent.hw_job_count)
  return _internal_hw_job_count();
}
inline void DrmRunJobFtraceEvent::_internal_set_hw_job_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hw_job_count_ = value;
}
inline void DrmRunJobFtraceEvent::set_hw_job_count(int32_t value) {
  _internal_set_hw_job_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmRunJobFtraceEvent.hw_job_count)
}

// optional uint64 id = 4;
inline bool DrmRunJobFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrmRunJobFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void DrmRunJobFtraceEvent::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t DrmRunJobFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t DrmRunJobFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmRunJobFtraceEvent.id)
  return _internal_id();
}
inline void DrmRunJobFtraceEvent::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void DrmRunJobFtraceEvent::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmRunJobFtraceEvent.id)
}

// optional uint32 job_count = 5;
inline bool DrmRunJobFtraceEvent::_internal_has_job_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DrmRunJobFtraceEvent::has_job_count() const {
  return _internal_has_job_count();
}
inline void DrmRunJobFtraceEvent::clear_job_count() {
  _impl_.job_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DrmRunJobFtraceEvent::_internal_job_count() const {
  return _impl_.job_count_;
}
inline uint32_t DrmRunJobFtraceEvent::job_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmRunJobFtraceEvent.job_count)
  return _internal_job_count();
}
inline void DrmRunJobFtraceEvent::_internal_set_job_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.job_count_ = value;
}
inline void DrmRunJobFtraceEvent::set_job_count(uint32_t value) {
  _internal_set_job_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmRunJobFtraceEvent.job_count)
}

// optional string name = 6;
inline bool DrmRunJobFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrmRunJobFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void DrmRunJobFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrmRunJobFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmRunJobFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DrmRunJobFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmRunJobFtraceEvent.name)
}
inline std::string* DrmRunJobFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DrmRunJobFtraceEvent.name)
  return _s;
}
inline const std::string& DrmRunJobFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DrmRunJobFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DrmRunJobFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DrmRunJobFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DrmRunJobFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DrmRunJobFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DrmRunJobFtraceEvent.name)
}

// -------------------------------------------------------------------

// DrmSchedProcessJobFtraceEvent

// optional uint64 fence = 1;
inline bool DrmSchedProcessJobFtraceEvent::_internal_has_fence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrmSchedProcessJobFtraceEvent::has_fence() const {
  return _internal_has_fence();
}
inline void DrmSchedProcessJobFtraceEvent::clear_fence() {
  _impl_.fence_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DrmSchedProcessJobFtraceEvent::_internal_fence() const {
  return _impl_.fence_;
}
inline uint64_t DrmSchedProcessJobFtraceEvent::fence() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmSchedProcessJobFtraceEvent.fence)
  return _internal_fence();
}
inline void DrmSchedProcessJobFtraceEvent::_internal_set_fence(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fence_ = value;
}
inline void DrmSchedProcessJobFtraceEvent::set_fence(uint64_t value) {
  _internal_set_fence(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmSchedProcessJobFtraceEvent.fence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto
