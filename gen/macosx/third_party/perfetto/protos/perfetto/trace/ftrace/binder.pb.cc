// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/binder.proto

#include "protos/perfetto/trace/ftrace/binder.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR BinderTransactionFtraceEvent::BinderTransactionFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.debug_id_)*/0
  , /*decltype(_impl_.target_node_)*/0
  , /*decltype(_impl_.to_proc_)*/0
  , /*decltype(_impl_.to_thread_)*/0
  , /*decltype(_impl_.reply_)*/0
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_.flags_)*/0u} {}
struct BinderTransactionFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderTransactionFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderTransactionFtraceEventDefaultTypeInternal() {}
  union {
    BinderTransactionFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderTransactionFtraceEventDefaultTypeInternal _BinderTransactionFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderTransactionReceivedFtraceEvent::BinderTransactionReceivedFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.debug_id_)*/0} {}
struct BinderTransactionReceivedFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderTransactionReceivedFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderTransactionReceivedFtraceEventDefaultTypeInternal() {}
  union {
    BinderTransactionReceivedFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderTransactionReceivedFtraceEventDefaultTypeInternal _BinderTransactionReceivedFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderSetPriorityFtraceEvent::BinderSetPriorityFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proc_)*/0
  , /*decltype(_impl_.thread_)*/0
  , /*decltype(_impl_.old_prio_)*/0u
  , /*decltype(_impl_.new_prio_)*/0u
  , /*decltype(_impl_.desired_prio_)*/0u} {}
struct BinderSetPriorityFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderSetPriorityFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderSetPriorityFtraceEventDefaultTypeInternal() {}
  union {
    BinderSetPriorityFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderSetPriorityFtraceEventDefaultTypeInternal _BinderSetPriorityFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderLockFtraceEvent::BinderLockFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BinderLockFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderLockFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderLockFtraceEventDefaultTypeInternal() {}
  union {
    BinderLockFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderLockFtraceEventDefaultTypeInternal _BinderLockFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderLockedFtraceEvent::BinderLockedFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BinderLockedFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderLockedFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderLockedFtraceEventDefaultTypeInternal() {}
  union {
    BinderLockedFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderLockedFtraceEventDefaultTypeInternal _BinderLockedFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderUnlockFtraceEvent::BinderUnlockFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BinderUnlockFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderUnlockFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderUnlockFtraceEventDefaultTypeInternal() {}
  union {
    BinderUnlockFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderUnlockFtraceEventDefaultTypeInternal _BinderUnlockFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderTransactionAllocBufFtraceEvent::BinderTransactionAllocBufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_size_)*/uint64_t{0u}
  , /*decltype(_impl_.offsets_size_)*/uint64_t{0u}
  , /*decltype(_impl_.extra_buffers_size_)*/uint64_t{0u}
  , /*decltype(_impl_.debug_id_)*/0} {}
struct BinderTransactionAllocBufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderTransactionAllocBufFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderTransactionAllocBufFtraceEventDefaultTypeInternal() {}
  union {
    BinderTransactionAllocBufFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderTransactionAllocBufFtraceEventDefaultTypeInternal _BinderTransactionAllocBufFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderCommandFtraceEvent::BinderCommandFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_)*/0u} {}
struct BinderCommandFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderCommandFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderCommandFtraceEventDefaultTypeInternal() {}
  union {
    BinderCommandFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderCommandFtraceEventDefaultTypeInternal _BinderCommandFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR BinderReturnFtraceEvent::BinderReturnFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_)*/0u} {}
struct BinderReturnFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderReturnFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderReturnFtraceEventDefaultTypeInternal() {}
  union {
    BinderReturnFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderReturnFtraceEventDefaultTypeInternal _BinderReturnFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class BinderTransactionFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderTransactionFtraceEvent>()._impl_._has_bits_);
  static void set_has_debug_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_to_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BinderTransactionFtraceEvent::BinderTransactionFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderTransactionFtraceEvent)
}
BinderTransactionFtraceEvent::BinderTransactionFtraceEvent(const BinderTransactionFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderTransactionFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_id_){}
    , decltype(_impl_.target_node_){}
    , decltype(_impl_.to_proc_){}
    , decltype(_impl_.to_thread_){}
    , decltype(_impl_.reply_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.debug_id_, &from._impl_.debug_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.debug_id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderTransactionFtraceEvent)
}

inline void BinderTransactionFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_id_){0}
    , decltype(_impl_.target_node_){0}
    , decltype(_impl_.to_proc_){0}
    , decltype(_impl_.to_thread_){0}
    , decltype(_impl_.reply_){0}
    , decltype(_impl_.code_){0u}
    , decltype(_impl_.flags_){0u}
  };
}

BinderTransactionFtraceEvent::~BinderTransactionFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderTransactionFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderTransactionFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderTransactionFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderTransactionFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderTransactionFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.debug_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.debug_id_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderTransactionFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 debug_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_debug_id(&has_bits);
          _impl_.debug_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_node(&has_bits);
          _impl_.target_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 to_proc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_to_proc(&has_bits);
          _impl_.to_proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 to_thread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_to_thread(&has_bits);
          _impl_.to_thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reply = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_reply(&has_bits);
          _impl_.reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderTransactionFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderTransactionFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 debug_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_debug_id(), target);
  }

  // optional int32 target_node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_node(), target);
  }

  // optional int32 to_proc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_to_proc(), target);
  }

  // optional int32 to_thread = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_to_thread(), target);
  }

  // optional int32 reply = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_reply(), target);
  }

  // optional uint32 code = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_code(), target);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderTransactionFtraceEvent)
  return target;
}

size_t BinderTransactionFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderTransactionFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 debug_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_debug_id());
    }

    // optional int32 target_node = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_node());
    }

    // optional int32 to_proc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_proc());
    }

    // optional int32 to_thread = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_thread());
    }

    // optional int32 reply = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reply());
    }

    // optional uint32 code = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderTransactionFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderTransactionFtraceEvent*>(
      &from));
}

void BinderTransactionFtraceEvent::MergeFrom(const BinderTransactionFtraceEvent& from) {
  BinderTransactionFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderTransactionFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.debug_id_ = from._impl_.debug_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_node_ = from._impl_.target_node_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.to_proc_ = from._impl_.to_proc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.to_thread_ = from._impl_.to_thread_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reply_ = from._impl_.reply_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderTransactionFtraceEvent::CopyFrom(const BinderTransactionFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderTransactionFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderTransactionFtraceEvent::IsInitialized() const {
  return true;
}

void BinderTransactionFtraceEvent::InternalSwap(BinderTransactionFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinderTransactionFtraceEvent, _impl_.flags_)
      + sizeof(BinderTransactionFtraceEvent::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(BinderTransactionFtraceEvent, _impl_.debug_id_)>(
          reinterpret_cast<char*>(&_impl_.debug_id_),
          reinterpret_cast<char*>(&other->_impl_.debug_id_));
}

std::string BinderTransactionFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderTransactionFtraceEvent";
}


// ===================================================================

class BinderTransactionReceivedFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderTransactionReceivedFtraceEvent>()._impl_._has_bits_);
  static void set_has_debug_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderTransactionReceivedFtraceEvent::BinderTransactionReceivedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderTransactionReceivedFtraceEvent)
}
BinderTransactionReceivedFtraceEvent::BinderTransactionReceivedFtraceEvent(const BinderTransactionReceivedFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderTransactionReceivedFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.debug_id_ = from._impl_.debug_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderTransactionReceivedFtraceEvent)
}

inline void BinderTransactionReceivedFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_id_){0}
  };
}

BinderTransactionReceivedFtraceEvent::~BinderTransactionReceivedFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderTransactionReceivedFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderTransactionReceivedFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderTransactionReceivedFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debug_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderTransactionReceivedFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 debug_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_debug_id(&has_bits);
          _impl_.debug_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderTransactionReceivedFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 debug_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_debug_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  return target;
}

size_t BinderTransactionReceivedFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 debug_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_debug_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderTransactionReceivedFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderTransactionReceivedFtraceEvent*>(
      &from));
}

void BinderTransactionReceivedFtraceEvent::MergeFrom(const BinderTransactionReceivedFtraceEvent& from) {
  BinderTransactionReceivedFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_debug_id()) {
    _this->_internal_set_debug_id(from._internal_debug_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderTransactionReceivedFtraceEvent::CopyFrom(const BinderTransactionReceivedFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderTransactionReceivedFtraceEvent::IsInitialized() const {
  return true;
}

void BinderTransactionReceivedFtraceEvent::InternalSwap(BinderTransactionReceivedFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.debug_id_, other->_impl_.debug_id_);
}

std::string BinderTransactionReceivedFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderTransactionReceivedFtraceEvent";
}


// ===================================================================

class BinderSetPriorityFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderSetPriorityFtraceEvent>()._impl_._has_bits_);
  static void set_has_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_desired_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BinderSetPriorityFtraceEvent::BinderSetPriorityFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderSetPriorityFtraceEvent)
}
BinderSetPriorityFtraceEvent::BinderSetPriorityFtraceEvent(const BinderSetPriorityFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderSetPriorityFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proc_){}
    , decltype(_impl_.thread_){}
    , decltype(_impl_.old_prio_){}
    , decltype(_impl_.new_prio_){}
    , decltype(_impl_.desired_prio_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.proc_, &from._impl_.proc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.desired_prio_) -
    reinterpret_cast<char*>(&_impl_.proc_)) + sizeof(_impl_.desired_prio_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderSetPriorityFtraceEvent)
}

inline void BinderSetPriorityFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proc_){0}
    , decltype(_impl_.thread_){0}
    , decltype(_impl_.old_prio_){0u}
    , decltype(_impl_.new_prio_){0u}
    , decltype(_impl_.desired_prio_){0u}
  };
}

BinderSetPriorityFtraceEvent::~BinderSetPriorityFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderSetPriorityFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderSetPriorityFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderSetPriorityFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderSetPriorityFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.proc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.desired_prio_) -
        reinterpret_cast<char*>(&_impl_.proc_)) + sizeof(_impl_.desired_prio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderSetPriorityFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 proc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_proc(&has_bits);
          _impl_.proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 thread = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_thread(&has_bits);
          _impl_.thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 old_prio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_old_prio(&has_bits);
          _impl_.old_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_prio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_new_prio(&has_bits);
          _impl_.new_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 desired_prio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_desired_prio(&has_bits);
          _impl_.desired_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderSetPriorityFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 proc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_proc(), target);
  }

  // optional int32 thread = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_thread(), target);
  }

  // optional uint32 old_prio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_old_prio(), target);
  }

  // optional uint32 new_prio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_new_prio(), target);
  }

  // optional uint32 desired_prio = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_desired_prio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderSetPriorityFtraceEvent)
  return target;
}

size_t BinderSetPriorityFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 proc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_proc());
    }

    // optional int32 thread = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_thread());
    }

    // optional uint32 old_prio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_prio());
    }

    // optional uint32 new_prio = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_prio());
    }

    // optional uint32 desired_prio = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_desired_prio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderSetPriorityFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderSetPriorityFtraceEvent*>(
      &from));
}

void BinderSetPriorityFtraceEvent::MergeFrom(const BinderSetPriorityFtraceEvent& from) {
  BinderSetPriorityFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.proc_ = from._impl_.proc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.thread_ = from._impl_.thread_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.old_prio_ = from._impl_.old_prio_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.new_prio_ = from._impl_.new_prio_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.desired_prio_ = from._impl_.desired_prio_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderSetPriorityFtraceEvent::CopyFrom(const BinderSetPriorityFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderSetPriorityFtraceEvent::IsInitialized() const {
  return true;
}

void BinderSetPriorityFtraceEvent::InternalSwap(BinderSetPriorityFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinderSetPriorityFtraceEvent, _impl_.desired_prio_)
      + sizeof(BinderSetPriorityFtraceEvent::_impl_.desired_prio_)
      - PROTOBUF_FIELD_OFFSET(BinderSetPriorityFtraceEvent, _impl_.proc_)>(
          reinterpret_cast<char*>(&_impl_.proc_),
          reinterpret_cast<char*>(&other->_impl_.proc_));
}

std::string BinderSetPriorityFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderSetPriorityFtraceEvent";
}


// ===================================================================

class BinderLockFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderLockFtraceEvent>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderLockFtraceEvent::BinderLockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderLockFtraceEvent)
}
BinderLockFtraceEvent::BinderLockFtraceEvent(const BinderLockFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderLockFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderLockFtraceEvent)
}

inline void BinderLockFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinderLockFtraceEvent::~BinderLockFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderLockFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderLockFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void BinderLockFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderLockFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderLockFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderLockFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderLockFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderLockFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderLockFtraceEvent)
  return target;
}

size_t BinderLockFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderLockFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderLockFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderLockFtraceEvent*>(
      &from));
}

void BinderLockFtraceEvent::MergeFrom(const BinderLockFtraceEvent& from) {
  BinderLockFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderLockFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tag()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderLockFtraceEvent::CopyFrom(const BinderLockFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderLockFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderLockFtraceEvent::IsInitialized() const {
  return true;
}

void BinderLockFtraceEvent::InternalSwap(BinderLockFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
}

std::string BinderLockFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderLockFtraceEvent";
}


// ===================================================================

class BinderLockedFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderLockedFtraceEvent>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderLockedFtraceEvent::BinderLockedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderLockedFtraceEvent)
}
BinderLockedFtraceEvent::BinderLockedFtraceEvent(const BinderLockedFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderLockedFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderLockedFtraceEvent)
}

inline void BinderLockedFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinderLockedFtraceEvent::~BinderLockedFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderLockedFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderLockedFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void BinderLockedFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderLockedFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderLockedFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderLockedFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderLockedFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderLockedFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderLockedFtraceEvent)
  return target;
}

size_t BinderLockedFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderLockedFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderLockedFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderLockedFtraceEvent*>(
      &from));
}

void BinderLockedFtraceEvent::MergeFrom(const BinderLockedFtraceEvent& from) {
  BinderLockedFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderLockedFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tag()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderLockedFtraceEvent::CopyFrom(const BinderLockedFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderLockedFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderLockedFtraceEvent::IsInitialized() const {
  return true;
}

void BinderLockedFtraceEvent::InternalSwap(BinderLockedFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
}

std::string BinderLockedFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderLockedFtraceEvent";
}


// ===================================================================

class BinderUnlockFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderUnlockFtraceEvent>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderUnlockFtraceEvent::BinderUnlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderUnlockFtraceEvent)
}
BinderUnlockFtraceEvent::BinderUnlockFtraceEvent(const BinderUnlockFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderUnlockFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderUnlockFtraceEvent)
}

inline void BinderUnlockFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinderUnlockFtraceEvent::~BinderUnlockFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderUnlockFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderUnlockFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void BinderUnlockFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderUnlockFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderUnlockFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderUnlockFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderUnlockFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderUnlockFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderUnlockFtraceEvent)
  return target;
}

size_t BinderUnlockFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderUnlockFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderUnlockFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderUnlockFtraceEvent*>(
      &from));
}

void BinderUnlockFtraceEvent::MergeFrom(const BinderUnlockFtraceEvent& from) {
  BinderUnlockFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderUnlockFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tag()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderUnlockFtraceEvent::CopyFrom(const BinderUnlockFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderUnlockFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderUnlockFtraceEvent::IsInitialized() const {
  return true;
}

void BinderUnlockFtraceEvent::InternalSwap(BinderUnlockFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
}

std::string BinderUnlockFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderUnlockFtraceEvent";
}


// ===================================================================

class BinderTransactionAllocBufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderTransactionAllocBufFtraceEvent>()._impl_._has_bits_);
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_debug_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_offsets_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extra_buffers_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BinderTransactionAllocBufFtraceEvent::BinderTransactionAllocBufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
}
BinderTransactionAllocBufFtraceEvent::BinderTransactionAllocBufFtraceEvent(const BinderTransactionAllocBufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderTransactionAllocBufFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size_){}
    , decltype(_impl_.offsets_size_){}
    , decltype(_impl_.extra_buffers_size_){}
    , decltype(_impl_.debug_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.data_size_, &from._impl_.data_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.debug_id_) -
    reinterpret_cast<char*>(&_impl_.data_size_)) + sizeof(_impl_.debug_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
}

inline void BinderTransactionAllocBufFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size_){uint64_t{0u}}
    , decltype(_impl_.offsets_size_){uint64_t{0u}}
    , decltype(_impl_.extra_buffers_size_){uint64_t{0u}}
    , decltype(_impl_.debug_id_){0}
  };
}

BinderTransactionAllocBufFtraceEvent::~BinderTransactionAllocBufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderTransactionAllocBufFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderTransactionAllocBufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderTransactionAllocBufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.data_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.debug_id_) -
        reinterpret_cast<char*>(&_impl_.data_size_)) + sizeof(_impl_.debug_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderTransactionAllocBufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 data_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_size(&has_bits);
          _impl_.data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 debug_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_debug_id(&has_bits);
          _impl_.debug_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 offsets_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offsets_size(&has_bits);
          _impl_.offsets_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 extra_buffers_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_extra_buffers_size(&has_bits);
          _impl_.extra_buffers_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderTransactionAllocBufFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 data_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_size(), target);
  }

  // optional int32 debug_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_debug_id(), target);
  }

  // optional uint64 offsets_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offsets_size(), target);
  }

  // optional uint64 extra_buffers_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_extra_buffers_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  return target;
}

size_t BinderTransactionAllocBufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 data_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_size());
    }

    // optional uint64 offsets_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offsets_size());
    }

    // optional uint64 extra_buffers_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_extra_buffers_size());
    }

    // optional int32 debug_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_debug_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderTransactionAllocBufFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderTransactionAllocBufFtraceEvent*>(
      &from));
}

void BinderTransactionAllocBufFtraceEvent::MergeFrom(const BinderTransactionAllocBufFtraceEvent& from) {
  BinderTransactionAllocBufFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_size_ = from._impl_.data_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offsets_size_ = from._impl_.offsets_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extra_buffers_size_ = from._impl_.extra_buffers_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.debug_id_ = from._impl_.debug_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderTransactionAllocBufFtraceEvent::CopyFrom(const BinderTransactionAllocBufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderTransactionAllocBufFtraceEvent::IsInitialized() const {
  return true;
}

void BinderTransactionAllocBufFtraceEvent::InternalSwap(BinderTransactionAllocBufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinderTransactionAllocBufFtraceEvent, _impl_.debug_id_)
      + sizeof(BinderTransactionAllocBufFtraceEvent::_impl_.debug_id_)
      - PROTOBUF_FIELD_OFFSET(BinderTransactionAllocBufFtraceEvent, _impl_.data_size_)>(
          reinterpret_cast<char*>(&_impl_.data_size_),
          reinterpret_cast<char*>(&other->_impl_.data_size_));
}

std::string BinderTransactionAllocBufFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderTransactionAllocBufFtraceEvent";
}


// ===================================================================

class BinderCommandFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderCommandFtraceEvent>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderCommandFtraceEvent::BinderCommandFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderCommandFtraceEvent)
}
BinderCommandFtraceEvent::BinderCommandFtraceEvent(const BinderCommandFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderCommandFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderCommandFtraceEvent)
}

inline void BinderCommandFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){0u}
  };
}

BinderCommandFtraceEvent::~BinderCommandFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderCommandFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderCommandFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderCommandFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderCommandFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderCommandFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderCommandFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cmd(&has_bits);
          _impl_.cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderCommandFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderCommandFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderCommandFtraceEvent)
  return target;
}

size_t BinderCommandFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderCommandFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderCommandFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderCommandFtraceEvent*>(
      &from));
}

void BinderCommandFtraceEvent::MergeFrom(const BinderCommandFtraceEvent& from) {
  BinderCommandFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderCommandFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderCommandFtraceEvent::CopyFrom(const BinderCommandFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderCommandFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderCommandFtraceEvent::IsInitialized() const {
  return true;
}

void BinderCommandFtraceEvent::InternalSwap(BinderCommandFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

std::string BinderCommandFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderCommandFtraceEvent";
}


// ===================================================================

class BinderReturnFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderReturnFtraceEvent>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderReturnFtraceEvent::BinderReturnFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderReturnFtraceEvent)
}
BinderReturnFtraceEvent::BinderReturnFtraceEvent(const BinderReturnFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BinderReturnFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderReturnFtraceEvent)
}

inline void BinderReturnFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){0u}
  };
}

BinderReturnFtraceEvent::~BinderReturnFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderReturnFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderReturnFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderReturnFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderReturnFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderReturnFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BinderReturnFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cmd(&has_bits);
          _impl_.cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinderReturnFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderReturnFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderReturnFtraceEvent)
  return target;
}

size_t BinderReturnFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderReturnFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinderReturnFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BinderReturnFtraceEvent*>(
      &from));
}

void BinderReturnFtraceEvent::MergeFrom(const BinderReturnFtraceEvent& from) {
  BinderReturnFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderReturnFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BinderReturnFtraceEvent::CopyFrom(const BinderReturnFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderReturnFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderReturnFtraceEvent::IsInitialized() const {
  return true;
}

void BinderReturnFtraceEvent::InternalSwap(BinderReturnFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

std::string BinderReturnFtraceEvent::GetTypeName() const {
  return "perfetto.protos.BinderReturnFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderTransactionFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderTransactionFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderTransactionFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderTransactionReceivedFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderTransactionReceivedFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderTransactionReceivedFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderSetPriorityFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderSetPriorityFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderSetPriorityFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderLockFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderLockFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderLockFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderLockedFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderLockedFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderLockedFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderUnlockFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderUnlockFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderUnlockFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderTransactionAllocBufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderTransactionAllocBufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderTransactionAllocBufFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderCommandFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderCommandFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderCommandFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderReturnFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderReturnFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderReturnFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
