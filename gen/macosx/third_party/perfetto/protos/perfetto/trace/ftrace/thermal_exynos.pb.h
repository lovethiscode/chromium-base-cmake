// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/thermal_exynos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fthermal_5fexynos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fthermal_5fexynos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fthermal_5fexynos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fthermal_5fexynos_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ThermalExynosAcpmBulkFtraceEvent;
struct ThermalExynosAcpmBulkFtraceEventDefaultTypeInternal;
extern ThermalExynosAcpmBulkFtraceEventDefaultTypeInternal _ThermalExynosAcpmBulkFtraceEvent_default_instance_;
class ThermalExynosAcpmHighOverheadFtraceEvent;
struct ThermalExynosAcpmHighOverheadFtraceEventDefaultTypeInternal;
extern ThermalExynosAcpmHighOverheadFtraceEventDefaultTypeInternal _ThermalExynosAcpmHighOverheadFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ThermalExynosAcpmBulkFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ThermalExynosAcpmBulkFtraceEvent>(Arena*);
template<> ::perfetto::protos::ThermalExynosAcpmHighOverheadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ThermalExynosAcpmHighOverheadFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ThermalExynosAcpmBulkFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent) */ {
 public:
  inline ThermalExynosAcpmBulkFtraceEvent() : ThermalExynosAcpmBulkFtraceEvent(nullptr) {}
  ~ThermalExynosAcpmBulkFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR ThermalExynosAcpmBulkFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThermalExynosAcpmBulkFtraceEvent(const ThermalExynosAcpmBulkFtraceEvent& from);
  ThermalExynosAcpmBulkFtraceEvent(ThermalExynosAcpmBulkFtraceEvent&& from) noexcept
    : ThermalExynosAcpmBulkFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ThermalExynosAcpmBulkFtraceEvent& operator=(const ThermalExynosAcpmBulkFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalExynosAcpmBulkFtraceEvent& operator=(ThermalExynosAcpmBulkFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ThermalExynosAcpmBulkFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThermalExynosAcpmBulkFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ThermalExynosAcpmBulkFtraceEvent*>(
               &_ThermalExynosAcpmBulkFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThermalExynosAcpmBulkFtraceEvent& a, ThermalExynosAcpmBulkFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ThermalExynosAcpmBulkFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalExynosAcpmBulkFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThermalExynosAcpmBulkFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThermalExynosAcpmBulkFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ThermalExynosAcpmBulkFtraceEvent& from);
  void MergeFrom(const ThermalExynosAcpmBulkFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThermalExynosAcpmBulkFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ThermalExynosAcpmBulkFtraceEvent";
  }
  protected:
  explicit ThermalExynosAcpmBulkFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTzIdFieldNumber = 1,
    kCurrentTempFieldNumber = 2,
    kCtrlTempFieldNumber = 3,
    kCdevStateFieldNumber = 4,
    kPidEtPFieldNumber = 5,
    kPidPowerRangeFieldNumber = 6,
    kPidPFieldNumber = 7,
    kPidIFieldNumber = 8,
    kKPFieldNumber = 9,
    kKIFieldNumber = 10,
    kTimestampFieldNumber = 11,
  };
  // optional uint32 tz_id = 1;
  bool has_tz_id() const;
  private:
  bool _internal_has_tz_id() const;
  public:
  void clear_tz_id();
  uint32_t tz_id() const;
  void set_tz_id(uint32_t value);
  private:
  uint32_t _internal_tz_id() const;
  void _internal_set_tz_id(uint32_t value);
  public:

  // optional uint32 current_temp = 2;
  bool has_current_temp() const;
  private:
  bool _internal_has_current_temp() const;
  public:
  void clear_current_temp();
  uint32_t current_temp() const;
  void set_current_temp(uint32_t value);
  private:
  uint32_t _internal_current_temp() const;
  void _internal_set_current_temp(uint32_t value);
  public:

  // optional uint32 ctrl_temp = 3;
  bool has_ctrl_temp() const;
  private:
  bool _internal_has_ctrl_temp() const;
  public:
  void clear_ctrl_temp();
  uint32_t ctrl_temp() const;
  void set_ctrl_temp(uint32_t value);
  private:
  uint32_t _internal_ctrl_temp() const;
  void _internal_set_ctrl_temp(uint32_t value);
  public:

  // optional uint32 cdev_state = 4;
  bool has_cdev_state() const;
  private:
  bool _internal_has_cdev_state() const;
  public:
  void clear_cdev_state();
  uint32_t cdev_state() const;
  void set_cdev_state(uint32_t value);
  private:
  uint32_t _internal_cdev_state() const;
  void _internal_set_cdev_state(uint32_t value);
  public:

  // optional int32 pid_et_p = 5;
  bool has_pid_et_p() const;
  private:
  bool _internal_has_pid_et_p() const;
  public:
  void clear_pid_et_p();
  int32_t pid_et_p() const;
  void set_pid_et_p(int32_t value);
  private:
  int32_t _internal_pid_et_p() const;
  void _internal_set_pid_et_p(int32_t value);
  public:

  // optional int32 pid_power_range = 6;
  bool has_pid_power_range() const;
  private:
  bool _internal_has_pid_power_range() const;
  public:
  void clear_pid_power_range();
  int32_t pid_power_range() const;
  void set_pid_power_range(int32_t value);
  private:
  int32_t _internal_pid_power_range() const;
  void _internal_set_pid_power_range(int32_t value);
  public:

  // optional int32 pid_p = 7;
  bool has_pid_p() const;
  private:
  bool _internal_has_pid_p() const;
  public:
  void clear_pid_p();
  int32_t pid_p() const;
  void set_pid_p(int32_t value);
  private:
  int32_t _internal_pid_p() const;
  void _internal_set_pid_p(int32_t value);
  public:

  // optional int32 pid_i = 8;
  bool has_pid_i() const;
  private:
  bool _internal_has_pid_i() const;
  public:
  void clear_pid_i();
  int32_t pid_i() const;
  void set_pid_i(int32_t value);
  private:
  int32_t _internal_pid_i() const;
  void _internal_set_pid_i(int32_t value);
  public:

  // optional int32 k_p = 9;
  bool has_k_p() const;
  private:
  bool _internal_has_k_p() const;
  public:
  void clear_k_p();
  int32_t k_p() const;
  void set_k_p(int32_t value);
  private:
  int32_t _internal_k_p() const;
  void _internal_set_k_p(int32_t value);
  public:

  // optional int32 k_i = 10;
  bool has_k_i() const;
  private:
  bool _internal_has_k_i() const;
  public:
  void clear_k_i();
  int32_t k_i() const;
  void set_k_i(int32_t value);
  private:
  int32_t _internal_k_i() const;
  void _internal_set_k_i(int32_t value);
  public:

  // optional uint64 timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t tz_id_;
    uint32_t current_temp_;
    uint32_t ctrl_temp_;
    uint32_t cdev_state_;
    int32_t pid_et_p_;
    int32_t pid_power_range_;
    int32_t pid_p_;
    int32_t pid_i_;
    int32_t k_p_;
    int32_t k_i_;
    uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fthermal_5fexynos_2eproto;
};
// -------------------------------------------------------------------

class ThermalExynosAcpmHighOverheadFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent) */ {
 public:
  inline ThermalExynosAcpmHighOverheadFtraceEvent() : ThermalExynosAcpmHighOverheadFtraceEvent(nullptr) {}
  ~ThermalExynosAcpmHighOverheadFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR ThermalExynosAcpmHighOverheadFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThermalExynosAcpmHighOverheadFtraceEvent(const ThermalExynosAcpmHighOverheadFtraceEvent& from);
  ThermalExynosAcpmHighOverheadFtraceEvent(ThermalExynosAcpmHighOverheadFtraceEvent&& from) noexcept
    : ThermalExynosAcpmHighOverheadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ThermalExynosAcpmHighOverheadFtraceEvent& operator=(const ThermalExynosAcpmHighOverheadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalExynosAcpmHighOverheadFtraceEvent& operator=(ThermalExynosAcpmHighOverheadFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ThermalExynosAcpmHighOverheadFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThermalExynosAcpmHighOverheadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ThermalExynosAcpmHighOverheadFtraceEvent*>(
               &_ThermalExynosAcpmHighOverheadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThermalExynosAcpmHighOverheadFtraceEvent& a, ThermalExynosAcpmHighOverheadFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ThermalExynosAcpmHighOverheadFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalExynosAcpmHighOverheadFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThermalExynosAcpmHighOverheadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThermalExynosAcpmHighOverheadFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ThermalExynosAcpmHighOverheadFtraceEvent& from);
  void MergeFrom(const ThermalExynosAcpmHighOverheadFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThermalExynosAcpmHighOverheadFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent";
  }
  protected:
  explicit ThermalExynosAcpmHighOverheadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTzIdFieldNumber = 1,
    kCurrentTempFieldNumber = 2,
    kCtrlTempFieldNumber = 3,
    kCdevStateFieldNumber = 4,
    kPidEtPFieldNumber = 5,
    kKPFieldNumber = 6,
    kKIFieldNumber = 7,
  };
  // optional int32 tz_id = 1;
  bool has_tz_id() const;
  private:
  bool _internal_has_tz_id() const;
  public:
  void clear_tz_id();
  int32_t tz_id() const;
  void set_tz_id(int32_t value);
  private:
  int32_t _internal_tz_id() const;
  void _internal_set_tz_id(int32_t value);
  public:

  // optional uint32 current_temp = 2;
  bool has_current_temp() const;
  private:
  bool _internal_has_current_temp() const;
  public:
  void clear_current_temp();
  uint32_t current_temp() const;
  void set_current_temp(uint32_t value);
  private:
  uint32_t _internal_current_temp() const;
  void _internal_set_current_temp(uint32_t value);
  public:

  // optional uint32 ctrl_temp = 3;
  bool has_ctrl_temp() const;
  private:
  bool _internal_has_ctrl_temp() const;
  public:
  void clear_ctrl_temp();
  uint32_t ctrl_temp() const;
  void set_ctrl_temp(uint32_t value);
  private:
  uint32_t _internal_ctrl_temp() const;
  void _internal_set_ctrl_temp(uint32_t value);
  public:

  // optional uint32 cdev_state = 4;
  bool has_cdev_state() const;
  private:
  bool _internal_has_cdev_state() const;
  public:
  void clear_cdev_state();
  uint32_t cdev_state() const;
  void set_cdev_state(uint32_t value);
  private:
  uint32_t _internal_cdev_state() const;
  void _internal_set_cdev_state(uint32_t value);
  public:

  // optional int32 pid_et_p = 5;
  bool has_pid_et_p() const;
  private:
  bool _internal_has_pid_et_p() const;
  public:
  void clear_pid_et_p();
  int32_t pid_et_p() const;
  void set_pid_et_p(int32_t value);
  private:
  int32_t _internal_pid_et_p() const;
  void _internal_set_pid_et_p(int32_t value);
  public:

  // optional int32 k_p = 6;
  bool has_k_p() const;
  private:
  bool _internal_has_k_p() const;
  public:
  void clear_k_p();
  int32_t k_p() const;
  void set_k_p(int32_t value);
  private:
  int32_t _internal_k_p() const;
  void _internal_set_k_p(int32_t value);
  public:

  // optional int32 k_i = 7;
  bool has_k_i() const;
  private:
  bool _internal_has_k_i() const;
  public:
  void clear_k_i();
  int32_t k_i() const;
  void set_k_i(int32_t value);
  private:
  int32_t _internal_k_i() const;
  void _internal_set_k_i(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t tz_id_;
    uint32_t current_temp_;
    uint32_t ctrl_temp_;
    uint32_t cdev_state_;
    int32_t pid_et_p_;
    int32_t k_p_;
    int32_t k_i_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fthermal_5fexynos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThermalExynosAcpmBulkFtraceEvent

// optional uint32 tz_id = 1;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_tz_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_tz_id() const {
  return _internal_has_tz_id();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_tz_id() {
  _impl_.tz_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::_internal_tz_id() const {
  return _impl_.tz_id_;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::tz_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.tz_id)
  return _internal_tz_id();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_tz_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tz_id_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_tz_id(uint32_t value) {
  _internal_set_tz_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.tz_id)
}

// optional uint32 current_temp = 2;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_current_temp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_current_temp() const {
  return _internal_has_current_temp();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_current_temp() {
  _impl_.current_temp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::_internal_current_temp() const {
  return _impl_.current_temp_;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::current_temp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.current_temp)
  return _internal_current_temp();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_current_temp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_temp_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_current_temp(uint32_t value) {
  _internal_set_current_temp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.current_temp)
}

// optional uint32 ctrl_temp = 3;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_ctrl_temp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_ctrl_temp() const {
  return _internal_has_ctrl_temp();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_ctrl_temp() {
  _impl_.ctrl_temp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::_internal_ctrl_temp() const {
  return _impl_.ctrl_temp_;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::ctrl_temp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.ctrl_temp)
  return _internal_ctrl_temp();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_ctrl_temp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ctrl_temp_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_ctrl_temp(uint32_t value) {
  _internal_set_ctrl_temp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.ctrl_temp)
}

// optional uint32 cdev_state = 4;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_cdev_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_cdev_state() const {
  return _internal_has_cdev_state();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_cdev_state() {
  _impl_.cdev_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::_internal_cdev_state() const {
  return _impl_.cdev_state_;
}
inline uint32_t ThermalExynosAcpmBulkFtraceEvent::cdev_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.cdev_state)
  return _internal_cdev_state();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_cdev_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cdev_state_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_cdev_state(uint32_t value) {
  _internal_set_cdev_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.cdev_state)
}

// optional int32 pid_et_p = 5;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_pid_et_p() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_pid_et_p() const {
  return _internal_has_pid_et_p();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_pid_et_p() {
  _impl_.pid_et_p_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::_internal_pid_et_p() const {
  return _impl_.pid_et_p_;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::pid_et_p() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_et_p)
  return _internal_pid_et_p();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_pid_et_p(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pid_et_p_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_pid_et_p(int32_t value) {
  _internal_set_pid_et_p(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_et_p)
}

// optional int32 pid_power_range = 6;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_pid_power_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_pid_power_range() const {
  return _internal_has_pid_power_range();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_pid_power_range() {
  _impl_.pid_power_range_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::_internal_pid_power_range() const {
  return _impl_.pid_power_range_;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::pid_power_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_power_range)
  return _internal_pid_power_range();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_pid_power_range(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pid_power_range_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_pid_power_range(int32_t value) {
  _internal_set_pid_power_range(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_power_range)
}

// optional int32 pid_p = 7;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_pid_p() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_pid_p() const {
  return _internal_has_pid_p();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_pid_p() {
  _impl_.pid_p_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::_internal_pid_p() const {
  return _impl_.pid_p_;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::pid_p() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_p)
  return _internal_pid_p();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_pid_p(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pid_p_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_pid_p(int32_t value) {
  _internal_set_pid_p(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_p)
}

// optional int32 pid_i = 8;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_pid_i() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_pid_i() const {
  return _internal_has_pid_i();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_pid_i() {
  _impl_.pid_i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::_internal_pid_i() const {
  return _impl_.pid_i_;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::pid_i() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_i)
  return _internal_pid_i();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_pid_i(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pid_i_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_pid_i(int32_t value) {
  _internal_set_pid_i(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.pid_i)
}

// optional int32 k_p = 9;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_k_p() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_k_p() const {
  return _internal_has_k_p();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_k_p() {
  _impl_.k_p_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::_internal_k_p() const {
  return _impl_.k_p_;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::k_p() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.k_p)
  return _internal_k_p();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_k_p(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.k_p_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_k_p(int32_t value) {
  _internal_set_k_p(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.k_p)
}

// optional int32 k_i = 10;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_k_i() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_k_i() const {
  return _internal_has_k_i();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_k_i() {
  _impl_.k_i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::_internal_k_i() const {
  return _impl_.k_i_;
}
inline int32_t ThermalExynosAcpmBulkFtraceEvent::k_i() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.k_i)
  return _internal_k_i();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_k_i(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.k_i_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_k_i(int32_t value) {
  _internal_set_k_i(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.k_i)
}

// optional uint64 timestamp = 11;
inline bool ThermalExynosAcpmBulkFtraceEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ThermalExynosAcpmBulkFtraceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ThermalExynosAcpmBulkFtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t ThermalExynosAcpmBulkFtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t ThermalExynosAcpmBulkFtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void ThermalExynosAcpmBulkFtraceEvent::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.timestamp_ = value;
}
inline void ThermalExynosAcpmBulkFtraceEvent::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent.timestamp)
}

// -------------------------------------------------------------------

// ThermalExynosAcpmHighOverheadFtraceEvent

// optional int32 tz_id = 1;
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::_internal_has_tz_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::has_tz_id() const {
  return _internal_has_tz_id();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::clear_tz_id() {
  _impl_.tz_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::_internal_tz_id() const {
  return _impl_.tz_id_;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::tz_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.tz_id)
  return _internal_tz_id();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::_internal_set_tz_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tz_id_ = value;
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::set_tz_id(int32_t value) {
  _internal_set_tz_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.tz_id)
}

// optional uint32 current_temp = 2;
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::_internal_has_current_temp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::has_current_temp() const {
  return _internal_has_current_temp();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::clear_current_temp() {
  _impl_.current_temp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ThermalExynosAcpmHighOverheadFtraceEvent::_internal_current_temp() const {
  return _impl_.current_temp_;
}
inline uint32_t ThermalExynosAcpmHighOverheadFtraceEvent::current_temp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.current_temp)
  return _internal_current_temp();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::_internal_set_current_temp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_temp_ = value;
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::set_current_temp(uint32_t value) {
  _internal_set_current_temp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.current_temp)
}

// optional uint32 ctrl_temp = 3;
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::_internal_has_ctrl_temp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::has_ctrl_temp() const {
  return _internal_has_ctrl_temp();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::clear_ctrl_temp() {
  _impl_.ctrl_temp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ThermalExynosAcpmHighOverheadFtraceEvent::_internal_ctrl_temp() const {
  return _impl_.ctrl_temp_;
}
inline uint32_t ThermalExynosAcpmHighOverheadFtraceEvent::ctrl_temp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.ctrl_temp)
  return _internal_ctrl_temp();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::_internal_set_ctrl_temp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ctrl_temp_ = value;
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::set_ctrl_temp(uint32_t value) {
  _internal_set_ctrl_temp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.ctrl_temp)
}

// optional uint32 cdev_state = 4;
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::_internal_has_cdev_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::has_cdev_state() const {
  return _internal_has_cdev_state();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::clear_cdev_state() {
  _impl_.cdev_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ThermalExynosAcpmHighOverheadFtraceEvent::_internal_cdev_state() const {
  return _impl_.cdev_state_;
}
inline uint32_t ThermalExynosAcpmHighOverheadFtraceEvent::cdev_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.cdev_state)
  return _internal_cdev_state();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::_internal_set_cdev_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cdev_state_ = value;
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::set_cdev_state(uint32_t value) {
  _internal_set_cdev_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.cdev_state)
}

// optional int32 pid_et_p = 5;
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::_internal_has_pid_et_p() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::has_pid_et_p() const {
  return _internal_has_pid_et_p();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::clear_pid_et_p() {
  _impl_.pid_et_p_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::_internal_pid_et_p() const {
  return _impl_.pid_et_p_;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::pid_et_p() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.pid_et_p)
  return _internal_pid_et_p();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::_internal_set_pid_et_p(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pid_et_p_ = value;
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::set_pid_et_p(int32_t value) {
  _internal_set_pid_et_p(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.pid_et_p)
}

// optional int32 k_p = 6;
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::_internal_has_k_p() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::has_k_p() const {
  return _internal_has_k_p();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::clear_k_p() {
  _impl_.k_p_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::_internal_k_p() const {
  return _impl_.k_p_;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::k_p() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.k_p)
  return _internal_k_p();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::_internal_set_k_p(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.k_p_ = value;
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::set_k_p(int32_t value) {
  _internal_set_k_p(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.k_p)
}

// optional int32 k_i = 7;
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::_internal_has_k_i() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ThermalExynosAcpmHighOverheadFtraceEvent::has_k_i() const {
  return _internal_has_k_i();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::clear_k_i() {
  _impl_.k_i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::_internal_k_i() const {
  return _impl_.k_i_;
}
inline int32_t ThermalExynosAcpmHighOverheadFtraceEvent::k_i() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.k_i)
  return _internal_k_i();
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::_internal_set_k_i(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.k_i_ = value;
}
inline void ThermalExynosAcpmHighOverheadFtraceEvent::set_k_i(int32_t value) {
  _internal_set_k_i(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent.k_i)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fthermal_5fexynos_2eproto
