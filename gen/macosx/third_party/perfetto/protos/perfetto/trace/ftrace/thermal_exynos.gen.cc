#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/thermal_exynos.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ThermalExynosAcpmHighOverheadFtraceEvent::ThermalExynosAcpmHighOverheadFtraceEvent() = default;
ThermalExynosAcpmHighOverheadFtraceEvent::~ThermalExynosAcpmHighOverheadFtraceEvent() = default;
ThermalExynosAcpmHighOverheadFtraceEvent::ThermalExynosAcpmHighOverheadFtraceEvent(const ThermalExynosAcpmHighOverheadFtraceEvent&) = default;
ThermalExynosAcpmHighOverheadFtraceEvent& ThermalExynosAcpmHighOverheadFtraceEvent::operator=(const ThermalExynosAcpmHighOverheadFtraceEvent&) = default;
ThermalExynosAcpmHighOverheadFtraceEvent::ThermalExynosAcpmHighOverheadFtraceEvent(ThermalExynosAcpmHighOverheadFtraceEvent&&) noexcept = default;
ThermalExynosAcpmHighOverheadFtraceEvent& ThermalExynosAcpmHighOverheadFtraceEvent::operator=(ThermalExynosAcpmHighOverheadFtraceEvent&&) = default;

bool ThermalExynosAcpmHighOverheadFtraceEvent::operator==(const ThermalExynosAcpmHighOverheadFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(tz_id_, other.tz_id_)
   && ::protozero::internal::gen_helpers::EqualsField(current_temp_, other.current_temp_)
   && ::protozero::internal::gen_helpers::EqualsField(ctrl_temp_, other.ctrl_temp_)
   && ::protozero::internal::gen_helpers::EqualsField(cdev_state_, other.cdev_state_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_et_p_, other.pid_et_p_)
   && ::protozero::internal::gen_helpers::EqualsField(k_p_, other.k_p_)
   && ::protozero::internal::gen_helpers::EqualsField(k_i_, other.k_i_);
}

bool ThermalExynosAcpmHighOverheadFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* tz_id */:
        field.get(&tz_id_);
        break;
      case 2 /* current_temp */:
        field.get(&current_temp_);
        break;
      case 3 /* ctrl_temp */:
        field.get(&ctrl_temp_);
        break;
      case 4 /* cdev_state */:
        field.get(&cdev_state_);
        break;
      case 5 /* pid_et_p */:
        field.get(&pid_et_p_);
        break;
      case 6 /* k_p */:
        field.get(&k_p_);
        break;
      case 7 /* k_i */:
        field.get(&k_i_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ThermalExynosAcpmHighOverheadFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ThermalExynosAcpmHighOverheadFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ThermalExynosAcpmHighOverheadFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: tz_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, tz_id_, msg);
  }

  // Field 2: current_temp
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, current_temp_, msg);
  }

  // Field 3: ctrl_temp
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ctrl_temp_, msg);
  }

  // Field 4: cdev_state
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, cdev_state_, msg);
  }

  // Field 5: pid_et_p
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, pid_et_p_, msg);
  }

  // Field 6: k_p
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, k_p_, msg);
  }

  // Field 7: k_i
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, k_i_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ThermalExynosAcpmBulkFtraceEvent::ThermalExynosAcpmBulkFtraceEvent() = default;
ThermalExynosAcpmBulkFtraceEvent::~ThermalExynosAcpmBulkFtraceEvent() = default;
ThermalExynosAcpmBulkFtraceEvent::ThermalExynosAcpmBulkFtraceEvent(const ThermalExynosAcpmBulkFtraceEvent&) = default;
ThermalExynosAcpmBulkFtraceEvent& ThermalExynosAcpmBulkFtraceEvent::operator=(const ThermalExynosAcpmBulkFtraceEvent&) = default;
ThermalExynosAcpmBulkFtraceEvent::ThermalExynosAcpmBulkFtraceEvent(ThermalExynosAcpmBulkFtraceEvent&&) noexcept = default;
ThermalExynosAcpmBulkFtraceEvent& ThermalExynosAcpmBulkFtraceEvent::operator=(ThermalExynosAcpmBulkFtraceEvent&&) = default;

bool ThermalExynosAcpmBulkFtraceEvent::operator==(const ThermalExynosAcpmBulkFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(tz_id_, other.tz_id_)
   && ::protozero::internal::gen_helpers::EqualsField(current_temp_, other.current_temp_)
   && ::protozero::internal::gen_helpers::EqualsField(ctrl_temp_, other.ctrl_temp_)
   && ::protozero::internal::gen_helpers::EqualsField(cdev_state_, other.cdev_state_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_et_p_, other.pid_et_p_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_power_range_, other.pid_power_range_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_p_, other.pid_p_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_i_, other.pid_i_)
   && ::protozero::internal::gen_helpers::EqualsField(k_p_, other.k_p_)
   && ::protozero::internal::gen_helpers::EqualsField(k_i_, other.k_i_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_);
}

bool ThermalExynosAcpmBulkFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* tz_id */:
        field.get(&tz_id_);
        break;
      case 2 /* current_temp */:
        field.get(&current_temp_);
        break;
      case 3 /* ctrl_temp */:
        field.get(&ctrl_temp_);
        break;
      case 4 /* cdev_state */:
        field.get(&cdev_state_);
        break;
      case 5 /* pid_et_p */:
        field.get(&pid_et_p_);
        break;
      case 6 /* pid_power_range */:
        field.get(&pid_power_range_);
        break;
      case 7 /* pid_p */:
        field.get(&pid_p_);
        break;
      case 8 /* pid_i */:
        field.get(&pid_i_);
        break;
      case 9 /* k_p */:
        field.get(&k_p_);
        break;
      case 10 /* k_i */:
        field.get(&k_i_);
        break;
      case 11 /* timestamp */:
        field.get(&timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ThermalExynosAcpmBulkFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ThermalExynosAcpmBulkFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ThermalExynosAcpmBulkFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: tz_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, tz_id_, msg);
  }

  // Field 2: current_temp
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, current_temp_, msg);
  }

  // Field 3: ctrl_temp
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ctrl_temp_, msg);
  }

  // Field 4: cdev_state
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, cdev_state_, msg);
  }

  // Field 5: pid_et_p
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, pid_et_p_, msg);
  }

  // Field 6: pid_power_range
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, pid_power_range_, msg);
  }

  // Field 7: pid_p
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, pid_p_, msg);
  }

  // Field 8: pid_i
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, pid_i_, msg);
  }

  // Field 9: k_p
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, k_p_, msg);
  }

  // Field 10: k_i
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, k_i_, msg);
  }

  // Field 11: timestamp
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
