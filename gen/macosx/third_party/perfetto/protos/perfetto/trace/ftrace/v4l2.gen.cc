#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/v4l2.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent() = default;
Vb2V4l2DqbufFtraceEvent::~Vb2V4l2DqbufFtraceEvent() = default;
Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(const Vb2V4l2DqbufFtraceEvent&) = default;
Vb2V4l2DqbufFtraceEvent& Vb2V4l2DqbufFtraceEvent::operator=(const Vb2V4l2DqbufFtraceEvent&) = default;
Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(Vb2V4l2DqbufFtraceEvent&&) noexcept = default;
Vb2V4l2DqbufFtraceEvent& Vb2V4l2DqbufFtraceEvent::operator=(Vb2V4l2DqbufFtraceEvent&&) = default;

bool Vb2V4l2DqbufFtraceEvent::operator==(const Vb2V4l2DqbufFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(field_, other.field_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(minor_, other.minor_)
   && ::protozero::internal::gen_helpers::EqualsField(sequence_, other.sequence_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_flags_, other.timecode_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_frames_, other.timecode_frames_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_hours_, other.timecode_hours_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_minutes_, other.timecode_minutes_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_seconds_, other.timecode_seconds_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_type_, other.timecode_type_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits0_, other.timecode_userbits0_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits1_, other.timecode_userbits1_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits2_, other.timecode_userbits2_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits3_, other.timecode_userbits3_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_);
}

bool Vb2V4l2DqbufFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* field */:
        field.get(&field_);
        break;
      case 2 /* flags */:
        field.get(&flags_);
        break;
      case 3 /* minor */:
        field.get(&minor_);
        break;
      case 4 /* sequence */:
        field.get(&sequence_);
        break;
      case 5 /* timecode_flags */:
        field.get(&timecode_flags_);
        break;
      case 6 /* timecode_frames */:
        field.get(&timecode_frames_);
        break;
      case 7 /* timecode_hours */:
        field.get(&timecode_hours_);
        break;
      case 8 /* timecode_minutes */:
        field.get(&timecode_minutes_);
        break;
      case 9 /* timecode_seconds */:
        field.get(&timecode_seconds_);
        break;
      case 10 /* timecode_type */:
        field.get(&timecode_type_);
        break;
      case 11 /* timecode_userbits0 */:
        field.get(&timecode_userbits0_);
        break;
      case 12 /* timecode_userbits1 */:
        field.get(&timecode_userbits1_);
        break;
      case 13 /* timecode_userbits2 */:
        field.get(&timecode_userbits2_);
        break;
      case 14 /* timecode_userbits3 */:
        field.get(&timecode_userbits3_);
        break;
      case 15 /* timestamp */:
        field.get(&timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string Vb2V4l2DqbufFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> Vb2V4l2DqbufFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void Vb2V4l2DqbufFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: field
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, field_, msg);
  }

  // Field 2: flags
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, flags_, msg);
  }

  // Field 3: minor
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, minor_, msg);
  }

  // Field 4: sequence
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, sequence_, msg);
  }

  // Field 5: timecode_flags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, timecode_flags_, msg);
  }

  // Field 6: timecode_frames
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, timecode_frames_, msg);
  }

  // Field 7: timecode_hours
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, timecode_hours_, msg);
  }

  // Field 8: timecode_minutes
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, timecode_minutes_, msg);
  }

  // Field 9: timecode_seconds
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, timecode_seconds_, msg);
  }

  // Field 10: timecode_type
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, timecode_type_, msg);
  }

  // Field 11: timecode_userbits0
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, timecode_userbits0_, msg);
  }

  // Field 12: timecode_userbits1
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, timecode_userbits1_, msg);
  }

  // Field 13: timecode_userbits2
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, timecode_userbits2_, msg);
  }

  // Field 14: timecode_userbits3
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, timecode_userbits3_, msg);
  }

  // Field 15: timestamp
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent() = default;
Vb2V4l2QbufFtraceEvent::~Vb2V4l2QbufFtraceEvent() = default;
Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(const Vb2V4l2QbufFtraceEvent&) = default;
Vb2V4l2QbufFtraceEvent& Vb2V4l2QbufFtraceEvent::operator=(const Vb2V4l2QbufFtraceEvent&) = default;
Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(Vb2V4l2QbufFtraceEvent&&) noexcept = default;
Vb2V4l2QbufFtraceEvent& Vb2V4l2QbufFtraceEvent::operator=(Vb2V4l2QbufFtraceEvent&&) = default;

bool Vb2V4l2QbufFtraceEvent::operator==(const Vb2V4l2QbufFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(field_, other.field_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(minor_, other.minor_)
   && ::protozero::internal::gen_helpers::EqualsField(sequence_, other.sequence_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_flags_, other.timecode_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_frames_, other.timecode_frames_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_hours_, other.timecode_hours_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_minutes_, other.timecode_minutes_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_seconds_, other.timecode_seconds_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_type_, other.timecode_type_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits0_, other.timecode_userbits0_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits1_, other.timecode_userbits1_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits2_, other.timecode_userbits2_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits3_, other.timecode_userbits3_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_);
}

bool Vb2V4l2QbufFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* field */:
        field.get(&field_);
        break;
      case 2 /* flags */:
        field.get(&flags_);
        break;
      case 3 /* minor */:
        field.get(&minor_);
        break;
      case 4 /* sequence */:
        field.get(&sequence_);
        break;
      case 5 /* timecode_flags */:
        field.get(&timecode_flags_);
        break;
      case 6 /* timecode_frames */:
        field.get(&timecode_frames_);
        break;
      case 7 /* timecode_hours */:
        field.get(&timecode_hours_);
        break;
      case 8 /* timecode_minutes */:
        field.get(&timecode_minutes_);
        break;
      case 9 /* timecode_seconds */:
        field.get(&timecode_seconds_);
        break;
      case 10 /* timecode_type */:
        field.get(&timecode_type_);
        break;
      case 11 /* timecode_userbits0 */:
        field.get(&timecode_userbits0_);
        break;
      case 12 /* timecode_userbits1 */:
        field.get(&timecode_userbits1_);
        break;
      case 13 /* timecode_userbits2 */:
        field.get(&timecode_userbits2_);
        break;
      case 14 /* timecode_userbits3 */:
        field.get(&timecode_userbits3_);
        break;
      case 15 /* timestamp */:
        field.get(&timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string Vb2V4l2QbufFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> Vb2V4l2QbufFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void Vb2V4l2QbufFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: field
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, field_, msg);
  }

  // Field 2: flags
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, flags_, msg);
  }

  // Field 3: minor
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, minor_, msg);
  }

  // Field 4: sequence
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, sequence_, msg);
  }

  // Field 5: timecode_flags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, timecode_flags_, msg);
  }

  // Field 6: timecode_frames
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, timecode_frames_, msg);
  }

  // Field 7: timecode_hours
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, timecode_hours_, msg);
  }

  // Field 8: timecode_minutes
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, timecode_minutes_, msg);
  }

  // Field 9: timecode_seconds
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, timecode_seconds_, msg);
  }

  // Field 10: timecode_type
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, timecode_type_, msg);
  }

  // Field 11: timecode_userbits0
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, timecode_userbits0_, msg);
  }

  // Field 12: timecode_userbits1
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, timecode_userbits1_, msg);
  }

  // Field 13: timecode_userbits2
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, timecode_userbits2_, msg);
  }

  // Field 14: timecode_userbits3
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, timecode_userbits3_, msg);
  }

  // Field 15: timestamp
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent() = default;
Vb2V4l2BufDoneFtraceEvent::~Vb2V4l2BufDoneFtraceEvent() = default;
Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(const Vb2V4l2BufDoneFtraceEvent&) = default;
Vb2V4l2BufDoneFtraceEvent& Vb2V4l2BufDoneFtraceEvent::operator=(const Vb2V4l2BufDoneFtraceEvent&) = default;
Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(Vb2V4l2BufDoneFtraceEvent&&) noexcept = default;
Vb2V4l2BufDoneFtraceEvent& Vb2V4l2BufDoneFtraceEvent::operator=(Vb2V4l2BufDoneFtraceEvent&&) = default;

bool Vb2V4l2BufDoneFtraceEvent::operator==(const Vb2V4l2BufDoneFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(field_, other.field_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(minor_, other.minor_)
   && ::protozero::internal::gen_helpers::EqualsField(sequence_, other.sequence_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_flags_, other.timecode_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_frames_, other.timecode_frames_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_hours_, other.timecode_hours_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_minutes_, other.timecode_minutes_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_seconds_, other.timecode_seconds_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_type_, other.timecode_type_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits0_, other.timecode_userbits0_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits1_, other.timecode_userbits1_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits2_, other.timecode_userbits2_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits3_, other.timecode_userbits3_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_);
}

bool Vb2V4l2BufDoneFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* field */:
        field.get(&field_);
        break;
      case 2 /* flags */:
        field.get(&flags_);
        break;
      case 3 /* minor */:
        field.get(&minor_);
        break;
      case 4 /* sequence */:
        field.get(&sequence_);
        break;
      case 5 /* timecode_flags */:
        field.get(&timecode_flags_);
        break;
      case 6 /* timecode_frames */:
        field.get(&timecode_frames_);
        break;
      case 7 /* timecode_hours */:
        field.get(&timecode_hours_);
        break;
      case 8 /* timecode_minutes */:
        field.get(&timecode_minutes_);
        break;
      case 9 /* timecode_seconds */:
        field.get(&timecode_seconds_);
        break;
      case 10 /* timecode_type */:
        field.get(&timecode_type_);
        break;
      case 11 /* timecode_userbits0 */:
        field.get(&timecode_userbits0_);
        break;
      case 12 /* timecode_userbits1 */:
        field.get(&timecode_userbits1_);
        break;
      case 13 /* timecode_userbits2 */:
        field.get(&timecode_userbits2_);
        break;
      case 14 /* timecode_userbits3 */:
        field.get(&timecode_userbits3_);
        break;
      case 15 /* timestamp */:
        field.get(&timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string Vb2V4l2BufDoneFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> Vb2V4l2BufDoneFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void Vb2V4l2BufDoneFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: field
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, field_, msg);
  }

  // Field 2: flags
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, flags_, msg);
  }

  // Field 3: minor
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, minor_, msg);
  }

  // Field 4: sequence
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, sequence_, msg);
  }

  // Field 5: timecode_flags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, timecode_flags_, msg);
  }

  // Field 6: timecode_frames
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, timecode_frames_, msg);
  }

  // Field 7: timecode_hours
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, timecode_hours_, msg);
  }

  // Field 8: timecode_minutes
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, timecode_minutes_, msg);
  }

  // Field 9: timecode_seconds
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, timecode_seconds_, msg);
  }

  // Field 10: timecode_type
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, timecode_type_, msg);
  }

  // Field 11: timecode_userbits0
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, timecode_userbits0_, msg);
  }

  // Field 12: timecode_userbits1
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, timecode_userbits1_, msg);
  }

  // Field 13: timecode_userbits2
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, timecode_userbits2_, msg);
  }

  // Field 14: timecode_userbits3
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, timecode_userbits3_, msg);
  }

  // Field 15: timestamp
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent() = default;
Vb2V4l2BufQueueFtraceEvent::~Vb2V4l2BufQueueFtraceEvent() = default;
Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(const Vb2V4l2BufQueueFtraceEvent&) = default;
Vb2V4l2BufQueueFtraceEvent& Vb2V4l2BufQueueFtraceEvent::operator=(const Vb2V4l2BufQueueFtraceEvent&) = default;
Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(Vb2V4l2BufQueueFtraceEvent&&) noexcept = default;
Vb2V4l2BufQueueFtraceEvent& Vb2V4l2BufQueueFtraceEvent::operator=(Vb2V4l2BufQueueFtraceEvent&&) = default;

bool Vb2V4l2BufQueueFtraceEvent::operator==(const Vb2V4l2BufQueueFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(field_, other.field_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(minor_, other.minor_)
   && ::protozero::internal::gen_helpers::EqualsField(sequence_, other.sequence_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_flags_, other.timecode_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_frames_, other.timecode_frames_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_hours_, other.timecode_hours_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_minutes_, other.timecode_minutes_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_seconds_, other.timecode_seconds_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_type_, other.timecode_type_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits0_, other.timecode_userbits0_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits1_, other.timecode_userbits1_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits2_, other.timecode_userbits2_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits3_, other.timecode_userbits3_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_);
}

bool Vb2V4l2BufQueueFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* field */:
        field.get(&field_);
        break;
      case 2 /* flags */:
        field.get(&flags_);
        break;
      case 3 /* minor */:
        field.get(&minor_);
        break;
      case 4 /* sequence */:
        field.get(&sequence_);
        break;
      case 5 /* timecode_flags */:
        field.get(&timecode_flags_);
        break;
      case 6 /* timecode_frames */:
        field.get(&timecode_frames_);
        break;
      case 7 /* timecode_hours */:
        field.get(&timecode_hours_);
        break;
      case 8 /* timecode_minutes */:
        field.get(&timecode_minutes_);
        break;
      case 9 /* timecode_seconds */:
        field.get(&timecode_seconds_);
        break;
      case 10 /* timecode_type */:
        field.get(&timecode_type_);
        break;
      case 11 /* timecode_userbits0 */:
        field.get(&timecode_userbits0_);
        break;
      case 12 /* timecode_userbits1 */:
        field.get(&timecode_userbits1_);
        break;
      case 13 /* timecode_userbits2 */:
        field.get(&timecode_userbits2_);
        break;
      case 14 /* timecode_userbits3 */:
        field.get(&timecode_userbits3_);
        break;
      case 15 /* timestamp */:
        field.get(&timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string Vb2V4l2BufQueueFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> Vb2V4l2BufQueueFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void Vb2V4l2BufQueueFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: field
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, field_, msg);
  }

  // Field 2: flags
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, flags_, msg);
  }

  // Field 3: minor
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, minor_, msg);
  }

  // Field 4: sequence
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, sequence_, msg);
  }

  // Field 5: timecode_flags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, timecode_flags_, msg);
  }

  // Field 6: timecode_frames
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, timecode_frames_, msg);
  }

  // Field 7: timecode_hours
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, timecode_hours_, msg);
  }

  // Field 8: timecode_minutes
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, timecode_minutes_, msg);
  }

  // Field 9: timecode_seconds
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, timecode_seconds_, msg);
  }

  // Field 10: timecode_type
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, timecode_type_, msg);
  }

  // Field 11: timecode_userbits0
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, timecode_userbits0_, msg);
  }

  // Field 12: timecode_userbits1
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, timecode_userbits1_, msg);
  }

  // Field 13: timecode_userbits2
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, timecode_userbits2_, msg);
  }

  // Field 14: timecode_userbits3
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, timecode_userbits3_, msg);
  }

  // Field 15: timestamp
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent() = default;
V4l2DqbufFtraceEvent::~V4l2DqbufFtraceEvent() = default;
V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(const V4l2DqbufFtraceEvent&) = default;
V4l2DqbufFtraceEvent& V4l2DqbufFtraceEvent::operator=(const V4l2DqbufFtraceEvent&) = default;
V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(V4l2DqbufFtraceEvent&&) noexcept = default;
V4l2DqbufFtraceEvent& V4l2DqbufFtraceEvent::operator=(V4l2DqbufFtraceEvent&&) = default;

bool V4l2DqbufFtraceEvent::operator==(const V4l2DqbufFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bytesused_, other.bytesused_)
   && ::protozero::internal::gen_helpers::EqualsField(field_, other.field_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(minor_, other.minor_)
   && ::protozero::internal::gen_helpers::EqualsField(sequence_, other.sequence_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_flags_, other.timecode_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_frames_, other.timecode_frames_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_hours_, other.timecode_hours_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_minutes_, other.timecode_minutes_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_seconds_, other.timecode_seconds_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_type_, other.timecode_type_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits0_, other.timecode_userbits0_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits1_, other.timecode_userbits1_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits2_, other.timecode_userbits2_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits3_, other.timecode_userbits3_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_);
}

bool V4l2DqbufFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bytesused */:
        field.get(&bytesused_);
        break;
      case 2 /* field */:
        field.get(&field_);
        break;
      case 3 /* flags */:
        field.get(&flags_);
        break;
      case 4 /* index */:
        field.get(&index_);
        break;
      case 5 /* minor */:
        field.get(&minor_);
        break;
      case 6 /* sequence */:
        field.get(&sequence_);
        break;
      case 7 /* timecode_flags */:
        field.get(&timecode_flags_);
        break;
      case 8 /* timecode_frames */:
        field.get(&timecode_frames_);
        break;
      case 9 /* timecode_hours */:
        field.get(&timecode_hours_);
        break;
      case 10 /* timecode_minutes */:
        field.get(&timecode_minutes_);
        break;
      case 11 /* timecode_seconds */:
        field.get(&timecode_seconds_);
        break;
      case 12 /* timecode_type */:
        field.get(&timecode_type_);
        break;
      case 13 /* timecode_userbits0 */:
        field.get(&timecode_userbits0_);
        break;
      case 14 /* timecode_userbits1 */:
        field.get(&timecode_userbits1_);
        break;
      case 15 /* timecode_userbits2 */:
        field.get(&timecode_userbits2_);
        break;
      case 16 /* timecode_userbits3 */:
        field.get(&timecode_userbits3_);
        break;
      case 17 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 18 /* type */:
        field.get(&type_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string V4l2DqbufFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> V4l2DqbufFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void V4l2DqbufFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bytesused
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bytesused_, msg);
  }

  // Field 2: field
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, field_, msg);
  }

  // Field 3: flags
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, flags_, msg);
  }

  // Field 4: index
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, index_, msg);
  }

  // Field 5: minor
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, minor_, msg);
  }

  // Field 6: sequence
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, sequence_, msg);
  }

  // Field 7: timecode_flags
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, timecode_flags_, msg);
  }

  // Field 8: timecode_frames
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, timecode_frames_, msg);
  }

  // Field 9: timecode_hours
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, timecode_hours_, msg);
  }

  // Field 10: timecode_minutes
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, timecode_minutes_, msg);
  }

  // Field 11: timecode_seconds
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, timecode_seconds_, msg);
  }

  // Field 12: timecode_type
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, timecode_type_, msg);
  }

  // Field 13: timecode_userbits0
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, timecode_userbits0_, msg);
  }

  // Field 14: timecode_userbits1
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, timecode_userbits1_, msg);
  }

  // Field 15: timecode_userbits2
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, timecode_userbits2_, msg);
  }

  // Field 16: timecode_userbits3
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, timecode_userbits3_, msg);
  }

  // Field 17: timestamp
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, timestamp_, msg);
  }

  // Field 18: type
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(18, type_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


V4l2QbufFtraceEvent::V4l2QbufFtraceEvent() = default;
V4l2QbufFtraceEvent::~V4l2QbufFtraceEvent() = default;
V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(const V4l2QbufFtraceEvent&) = default;
V4l2QbufFtraceEvent& V4l2QbufFtraceEvent::operator=(const V4l2QbufFtraceEvent&) = default;
V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(V4l2QbufFtraceEvent&&) noexcept = default;
V4l2QbufFtraceEvent& V4l2QbufFtraceEvent::operator=(V4l2QbufFtraceEvent&&) = default;

bool V4l2QbufFtraceEvent::operator==(const V4l2QbufFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bytesused_, other.bytesused_)
   && ::protozero::internal::gen_helpers::EqualsField(field_, other.field_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(minor_, other.minor_)
   && ::protozero::internal::gen_helpers::EqualsField(sequence_, other.sequence_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_flags_, other.timecode_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_frames_, other.timecode_frames_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_hours_, other.timecode_hours_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_minutes_, other.timecode_minutes_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_seconds_, other.timecode_seconds_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_type_, other.timecode_type_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits0_, other.timecode_userbits0_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits1_, other.timecode_userbits1_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits2_, other.timecode_userbits2_)
   && ::protozero::internal::gen_helpers::EqualsField(timecode_userbits3_, other.timecode_userbits3_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_);
}

bool V4l2QbufFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bytesused */:
        field.get(&bytesused_);
        break;
      case 2 /* field */:
        field.get(&field_);
        break;
      case 3 /* flags */:
        field.get(&flags_);
        break;
      case 4 /* index */:
        field.get(&index_);
        break;
      case 5 /* minor */:
        field.get(&minor_);
        break;
      case 6 /* sequence */:
        field.get(&sequence_);
        break;
      case 7 /* timecode_flags */:
        field.get(&timecode_flags_);
        break;
      case 8 /* timecode_frames */:
        field.get(&timecode_frames_);
        break;
      case 9 /* timecode_hours */:
        field.get(&timecode_hours_);
        break;
      case 10 /* timecode_minutes */:
        field.get(&timecode_minutes_);
        break;
      case 11 /* timecode_seconds */:
        field.get(&timecode_seconds_);
        break;
      case 12 /* timecode_type */:
        field.get(&timecode_type_);
        break;
      case 13 /* timecode_userbits0 */:
        field.get(&timecode_userbits0_);
        break;
      case 14 /* timecode_userbits1 */:
        field.get(&timecode_userbits1_);
        break;
      case 15 /* timecode_userbits2 */:
        field.get(&timecode_userbits2_);
        break;
      case 16 /* timecode_userbits3 */:
        field.get(&timecode_userbits3_);
        break;
      case 17 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 18 /* type */:
        field.get(&type_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string V4l2QbufFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> V4l2QbufFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void V4l2QbufFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bytesused
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bytesused_, msg);
  }

  // Field 2: field
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, field_, msg);
  }

  // Field 3: flags
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, flags_, msg);
  }

  // Field 4: index
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, index_, msg);
  }

  // Field 5: minor
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, minor_, msg);
  }

  // Field 6: sequence
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, sequence_, msg);
  }

  // Field 7: timecode_flags
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, timecode_flags_, msg);
  }

  // Field 8: timecode_frames
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, timecode_frames_, msg);
  }

  // Field 9: timecode_hours
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, timecode_hours_, msg);
  }

  // Field 10: timecode_minutes
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, timecode_minutes_, msg);
  }

  // Field 11: timecode_seconds
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, timecode_seconds_, msg);
  }

  // Field 12: timecode_type
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, timecode_type_, msg);
  }

  // Field 13: timecode_userbits0
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, timecode_userbits0_, msg);
  }

  // Field 14: timecode_userbits1
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, timecode_userbits1_, msg);
  }

  // Field 15: timecode_userbits2
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, timecode_userbits2_, msg);
  }

  // Field 16: timecode_userbits3
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, timecode_userbits3_, msg);
  }

  // Field 17: timestamp
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, timestamp_, msg);
  }

  // Field 18: type
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(18, type_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
