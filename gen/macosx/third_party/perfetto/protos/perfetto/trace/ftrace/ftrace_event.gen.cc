#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ftrace_event.gen.h"
#include "protos/perfetto/trace/ftrace/generic.gen.h"
#include "protos/perfetto/trace/ftrace/workqueue.gen.h"
#include "protos/perfetto/trace/ftrace/vmscan.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_video.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_gpu.gen.h"
#include "protos/perfetto/trace/ftrace/v4l2.gen.h"
#include "protos/perfetto/trace/ftrace/ufs.gen.h"
#include "protos/perfetto/trace/ftrace/trusty.gen.h"
#include "protos/perfetto/trace/ftrace/thermal_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/thermal.gen.h"
#include "protos/perfetto/trace/ftrace/tcp.gen.h"
#include "protos/perfetto/trace/ftrace/task.gen.h"
#include "protos/perfetto/trace/ftrace/systrace.gen.h"
#include "protos/perfetto/trace/ftrace/synthetic.gen.h"
#include "protos/perfetto/trace/ftrace/sync.gen.h"
#include "protos/perfetto/trace/ftrace/sock.gen.h"
#include "protos/perfetto/trace/ftrace/skb.gen.h"
#include "protos/perfetto/trace/ftrace/signal.gen.h"
#include "protos/perfetto/trace/ftrace/sde.gen.h"
#include "protos/perfetto/trace/ftrace/scm.gen.h"
#include "protos/perfetto/trace/ftrace/sched.gen.h"
#include "protos/perfetto/trace/ftrace/samsung.gen.h"
#include "protos/perfetto/trace/ftrace/rpm.gen.h"
#include "protos/perfetto/trace/ftrace/regulator.gen.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.gen.h"
#include "protos/perfetto/trace/ftrace/printk.gen.h"
#include "protos/perfetto/trace/ftrace/power.gen.h"
#include "protos/perfetto/trace/ftrace/perf_trace_counters.gen.h"
#include "protos/perfetto/trace/ftrace/panel.gen.h"
#include "protos/perfetto/trace/ftrace/oom.gen.h"
#include "protos/perfetto/trace/ftrace/net.gen.h"
#include "protos/perfetto/trace/ftrace/mm_event.gen.h"
#include "protos/perfetto/trace/ftrace/mdss.gen.h"
#include "protos/perfetto/trace/ftrace/mali.gen.h"
#include "protos/perfetto/trace/ftrace/lwis.gen.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.gen.h"
#include "protos/perfetto/trace/ftrace/kvm.gen.h"
#include "protos/perfetto/trace/ftrace/kmem.gen.h"
#include "protos/perfetto/trace/ftrace/kgsl.gen.h"
#include "protos/perfetto/trace/ftrace/irq.gen.h"
#include "protos/perfetto/trace/ftrace/ipi.gen.h"
#include "protos/perfetto/trace/ftrace/ion.gen.h"
#include "protos/perfetto/trace/ftrace/i2c.gen.h"
#include "protos/perfetto/trace/ftrace/hyp.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_scheduler.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.gen.h"
#include "protos/perfetto/trace/ftrace/google_irm_trace.gen.h"
#include "protos/perfetto/trace/ftrace/google_icc_trace.gen.h"
#include "protos/perfetto/trace/ftrace/g2d.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace.gen.h"
#include "protos/perfetto/trace/ftrace/filemap.gen.h"
#include "protos/perfetto/trace/ftrace/fence.gen.h"
#include "protos/perfetto/trace/ftrace/fastrpc.gen.h"
#include "protos/perfetto/trace/ftrace/f2fs.gen.h"
#include "protos/perfetto/trace/ftrace/ext4.gen.h"
#include "protos/perfetto/trace/ftrace/drm.gen.h"
#include "protos/perfetto/trace/ftrace/dpu.gen.h"
#include "protos/perfetto/trace/ftrace/dmabuf_heap.gen.h"
#include "protos/perfetto/trace/ftrace/dma_fence.gen.h"
#include "protos/perfetto/trace/ftrace/dcvsh.gen.h"
#include "protos/perfetto/trace/ftrace/cros_ec.gen.h"
#include "protos/perfetto/trace/ftrace/cpuhp.gen.h"
#include "protos/perfetto/trace/ftrace/compaction.gen.h"
#include "protos/perfetto/trace/ftrace/cma.gen.h"
#include "protos/perfetto/trace/ftrace/clk.gen.h"
#include "protos/perfetto/trace/ftrace/cgroup.gen.h"
#include "protos/perfetto/trace/ftrace/block.gen.h"
#include "protos/perfetto/trace/ftrace/binder.gen.h"
#include "protos/perfetto/trace/ftrace/bcl_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/android_fs.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FtraceEvent::FtraceEvent() = default;
FtraceEvent::~FtraceEvent() = default;
FtraceEvent::FtraceEvent(const FtraceEvent&) = default;
FtraceEvent& FtraceEvent::operator=(const FtraceEvent&) = default;
FtraceEvent::FtraceEvent(FtraceEvent&&) noexcept = default;
FtraceEvent& FtraceEvent::operator=(FtraceEvent&&) = default;

bool FtraceEvent::operator==(const FtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(common_flags_, other.common_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(print_, other.print_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_switch_, other.sched_switch_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_frequency_, other.cpu_frequency_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_frequency_limits_, other.cpu_frequency_limits_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_idle_, other.cpu_idle_)
   && ::protozero::internal::gen_helpers::EqualsField(clock_enable_, other.clock_enable_)
   && ::protozero::internal::gen_helpers::EqualsField(clock_disable_, other.clock_disable_)
   && ::protozero::internal::gen_helpers::EqualsField(clock_set_rate_, other.clock_set_rate_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_wakeup_, other.sched_wakeup_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_blocked_reason_, other.sched_blocked_reason_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_cpu_hotplug_, other.sched_cpu_hotplug_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_waking_, other.sched_waking_)
   && ::protozero::internal::gen_helpers::EqualsField(ipi_entry_, other.ipi_entry_)
   && ::protozero::internal::gen_helpers::EqualsField(ipi_exit_, other.ipi_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ipi_raise_, other.ipi_raise_)
   && ::protozero::internal::gen_helpers::EqualsField(softirq_entry_, other.softirq_entry_)
   && ::protozero::internal::gen_helpers::EqualsField(softirq_exit_, other.softirq_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(softirq_raise_, other.softirq_raise_)
   && ::protozero::internal::gen_helpers::EqualsField(i2c_read_, other.i2c_read_)
   && ::protozero::internal::gen_helpers::EqualsField(i2c_write_, other.i2c_write_)
   && ::protozero::internal::gen_helpers::EqualsField(i2c_result_, other.i2c_result_)
   && ::protozero::internal::gen_helpers::EqualsField(i2c_reply_, other.i2c_reply_)
   && ::protozero::internal::gen_helpers::EqualsField(smbus_read_, other.smbus_read_)
   && ::protozero::internal::gen_helpers::EqualsField(smbus_write_, other.smbus_write_)
   && ::protozero::internal::gen_helpers::EqualsField(smbus_result_, other.smbus_result_)
   && ::protozero::internal::gen_helpers::EqualsField(smbus_reply_, other.smbus_reply_)
   && ::protozero::internal::gen_helpers::EqualsField(lowmemory_kill_, other.lowmemory_kill_)
   && ::protozero::internal::gen_helpers::EqualsField(irq_handler_entry_, other.irq_handler_entry_)
   && ::protozero::internal::gen_helpers::EqualsField(irq_handler_exit_, other.irq_handler_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(sync_pt_, other.sync_pt_)
   && ::protozero::internal::gen_helpers::EqualsField(sync_timeline_, other.sync_timeline_)
   && ::protozero::internal::gen_helpers::EqualsField(sync_wait_, other.sync_wait_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_da_write_begin_, other.ext4_da_write_begin_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_da_write_end_, other.ext4_da_write_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_sync_file_enter_, other.ext4_sync_file_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_sync_file_exit_, other.ext4_sync_file_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(block_rq_issue_, other.block_rq_issue_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_vmscan_direct_reclaim_begin_, other.mm_vmscan_direct_reclaim_begin_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_vmscan_direct_reclaim_end_, other.mm_vmscan_direct_reclaim_end_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_vmscan_kswapd_wake_, other.mm_vmscan_kswapd_wake_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_vmscan_kswapd_sleep_, other.mm_vmscan_kswapd_sleep_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_transaction_, other.binder_transaction_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_transaction_received_, other.binder_transaction_received_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_set_priority_, other.binder_set_priority_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_lock_, other.binder_lock_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_locked_, other.binder_locked_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_unlock_, other.binder_unlock_)
   && ::protozero::internal::gen_helpers::EqualsField(workqueue_activate_work_, other.workqueue_activate_work_)
   && ::protozero::internal::gen_helpers::EqualsField(workqueue_execute_end_, other.workqueue_execute_end_)
   && ::protozero::internal::gen_helpers::EqualsField(workqueue_execute_start_, other.workqueue_execute_start_)
   && ::protozero::internal::gen_helpers::EqualsField(workqueue_queue_work_, other.workqueue_queue_work_)
   && ::protozero::internal::gen_helpers::EqualsField(regulator_disable_, other.regulator_disable_)
   && ::protozero::internal::gen_helpers::EqualsField(regulator_disable_complete_, other.regulator_disable_complete_)
   && ::protozero::internal::gen_helpers::EqualsField(regulator_enable_, other.regulator_enable_)
   && ::protozero::internal::gen_helpers::EqualsField(regulator_enable_complete_, other.regulator_enable_complete_)
   && ::protozero::internal::gen_helpers::EqualsField(regulator_enable_delay_, other.regulator_enable_delay_)
   && ::protozero::internal::gen_helpers::EqualsField(regulator_set_voltage_, other.regulator_set_voltage_)
   && ::protozero::internal::gen_helpers::EqualsField(regulator_set_voltage_complete_, other.regulator_set_voltage_complete_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_attach_task_, other.cgroup_attach_task_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_mkdir_, other.cgroup_mkdir_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_remount_, other.cgroup_remount_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_rmdir_, other.cgroup_rmdir_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_transfer_tasks_, other.cgroup_transfer_tasks_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_destroy_root_, other.cgroup_destroy_root_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_release_, other.cgroup_release_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_rename_, other.cgroup_rename_)
   && ::protozero::internal::gen_helpers::EqualsField(cgroup_setup_root_, other.cgroup_setup_root_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_cmd_kickoff_, other.mdp_cmd_kickoff_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_commit_, other.mdp_commit_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_perf_set_ot_, other.mdp_perf_set_ot_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_sspp_change_, other.mdp_sspp_change_)
   && ::protozero::internal::gen_helpers::EqualsField(tracing_mark_write_, other.tracing_mark_write_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_cmd_pingpong_done_, other.mdp_cmd_pingpong_done_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_compare_bw_, other.mdp_compare_bw_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_perf_set_panic_luts_, other.mdp_perf_set_panic_luts_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_sspp_set_, other.mdp_sspp_set_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_cmd_readptr_done_, other.mdp_cmd_readptr_done_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_misr_crc_, other.mdp_misr_crc_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_perf_set_qos_luts_, other.mdp_perf_set_qos_luts_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_trace_counter_, other.mdp_trace_counter_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_cmd_release_bw_, other.mdp_cmd_release_bw_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_mixer_update_, other.mdp_mixer_update_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_perf_set_wm_levels_, other.mdp_perf_set_wm_levels_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_video_underrun_done_, other.mdp_video_underrun_done_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_cmd_wait_pingpong_, other.mdp_cmd_wait_pingpong_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_perf_prefill_calc_, other.mdp_perf_prefill_calc_)
   && ::protozero::internal::gen_helpers::EqualsField(mdp_perf_update_bus_, other.mdp_perf_update_bus_)
   && ::protozero::internal::gen_helpers::EqualsField(rotator_bw_ao_as_context_, other.rotator_bw_ao_as_context_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_filemap_add_to_page_cache_, other.mm_filemap_add_to_page_cache_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_filemap_delete_from_page_cache_, other.mm_filemap_delete_from_page_cache_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_begin_, other.mm_compaction_begin_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_defer_compaction_, other.mm_compaction_defer_compaction_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_deferred_, other.mm_compaction_deferred_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_defer_reset_, other.mm_compaction_defer_reset_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_end_, other.mm_compaction_end_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_finished_, other.mm_compaction_finished_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_isolate_freepages_, other.mm_compaction_isolate_freepages_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_isolate_migratepages_, other.mm_compaction_isolate_migratepages_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_kcompactd_sleep_, other.mm_compaction_kcompactd_sleep_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_kcompactd_wake_, other.mm_compaction_kcompactd_wake_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_migratepages_, other.mm_compaction_migratepages_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_suitable_, other.mm_compaction_suitable_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_try_to_compact_pages_, other.mm_compaction_try_to_compact_pages_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_compaction_wakeup_kcompactd_, other.mm_compaction_wakeup_kcompactd_)
   && ::protozero::internal::gen_helpers::EqualsField(suspend_resume_, other.suspend_resume_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_wakeup_new_, other.sched_wakeup_new_)
   && ::protozero::internal::gen_helpers::EqualsField(block_bio_backmerge_, other.block_bio_backmerge_)
   && ::protozero::internal::gen_helpers::EqualsField(block_bio_bounce_, other.block_bio_bounce_)
   && ::protozero::internal::gen_helpers::EqualsField(block_bio_complete_, other.block_bio_complete_)
   && ::protozero::internal::gen_helpers::EqualsField(block_bio_frontmerge_, other.block_bio_frontmerge_)
   && ::protozero::internal::gen_helpers::EqualsField(block_bio_queue_, other.block_bio_queue_)
   && ::protozero::internal::gen_helpers::EqualsField(block_bio_remap_, other.block_bio_remap_)
   && ::protozero::internal::gen_helpers::EqualsField(block_dirty_buffer_, other.block_dirty_buffer_)
   && ::protozero::internal::gen_helpers::EqualsField(block_getrq_, other.block_getrq_)
   && ::protozero::internal::gen_helpers::EqualsField(block_plug_, other.block_plug_)
   && ::protozero::internal::gen_helpers::EqualsField(block_rq_abort_, other.block_rq_abort_)
   && ::protozero::internal::gen_helpers::EqualsField(block_rq_complete_, other.block_rq_complete_)
   && ::protozero::internal::gen_helpers::EqualsField(block_rq_insert_, other.block_rq_insert_)
   && ::protozero::internal::gen_helpers::EqualsField(block_rq_remap_, other.block_rq_remap_)
   && ::protozero::internal::gen_helpers::EqualsField(block_rq_requeue_, other.block_rq_requeue_)
   && ::protozero::internal::gen_helpers::EqualsField(block_sleeprq_, other.block_sleeprq_)
   && ::protozero::internal::gen_helpers::EqualsField(block_split_, other.block_split_)
   && ::protozero::internal::gen_helpers::EqualsField(block_touch_buffer_, other.block_touch_buffer_)
   && ::protozero::internal::gen_helpers::EqualsField(block_unplug_, other.block_unplug_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_alloc_da_blocks_, other.ext4_alloc_da_blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_allocate_blocks_, other.ext4_allocate_blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_allocate_inode_, other.ext4_allocate_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_begin_ordered_truncate_, other.ext4_begin_ordered_truncate_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_collapse_range_, other.ext4_collapse_range_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_da_release_space_, other.ext4_da_release_space_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_da_reserve_space_, other.ext4_da_reserve_space_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_da_update_reserve_space_, other.ext4_da_update_reserve_space_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_da_write_pages_, other.ext4_da_write_pages_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_da_write_pages_extent_, other.ext4_da_write_pages_extent_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_direct_io_enter_, other.ext4_direct_io_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_direct_io_exit_, other.ext4_direct_io_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_discard_blocks_, other.ext4_discard_blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_discard_preallocations_, other.ext4_discard_preallocations_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_drop_inode_, other.ext4_drop_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_cache_extent_, other.ext4_es_cache_extent_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_find_delayed_extent_range_enter_, other.ext4_es_find_delayed_extent_range_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_find_delayed_extent_range_exit_, other.ext4_es_find_delayed_extent_range_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_insert_extent_, other.ext4_es_insert_extent_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_lookup_extent_enter_, other.ext4_es_lookup_extent_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_lookup_extent_exit_, other.ext4_es_lookup_extent_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_remove_extent_, other.ext4_es_remove_extent_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_shrink_, other.ext4_es_shrink_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_shrink_count_, other.ext4_es_shrink_count_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_shrink_scan_enter_, other.ext4_es_shrink_scan_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_es_shrink_scan_exit_, other.ext4_es_shrink_scan_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_evict_inode_, other.ext4_evict_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_convert_to_initialized_enter_, other.ext4_ext_convert_to_initialized_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_convert_to_initialized_fastpath_, other.ext4_ext_convert_to_initialized_fastpath_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_handle_unwritten_extents_, other.ext4_ext_handle_unwritten_extents_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_in_cache_, other.ext4_ext_in_cache_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_load_extent_, other.ext4_ext_load_extent_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_map_blocks_enter_, other.ext4_ext_map_blocks_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_map_blocks_exit_, other.ext4_ext_map_blocks_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_put_in_cache_, other.ext4_ext_put_in_cache_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_remove_space_, other.ext4_ext_remove_space_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_remove_space_done_, other.ext4_ext_remove_space_done_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_rm_idx_, other.ext4_ext_rm_idx_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_rm_leaf_, other.ext4_ext_rm_leaf_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ext_show_extent_, other.ext4_ext_show_extent_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_fallocate_enter_, other.ext4_fallocate_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_fallocate_exit_, other.ext4_fallocate_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_find_delalloc_range_, other.ext4_find_delalloc_range_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_forget_, other.ext4_forget_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_free_blocks_, other.ext4_free_blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_free_inode_, other.ext4_free_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_get_implied_cluster_alloc_exit_, other.ext4_get_implied_cluster_alloc_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_get_reserved_cluster_alloc_, other.ext4_get_reserved_cluster_alloc_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ind_map_blocks_enter_, other.ext4_ind_map_blocks_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_ind_map_blocks_exit_, other.ext4_ind_map_blocks_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_insert_range_, other.ext4_insert_range_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_invalidatepage_, other.ext4_invalidatepage_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_journal_start_, other.ext4_journal_start_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_journal_start_reserved_, other.ext4_journal_start_reserved_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_journalled_invalidatepage_, other.ext4_journalled_invalidatepage_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_journalled_write_end_, other.ext4_journalled_write_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_load_inode_, other.ext4_load_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_load_inode_bitmap_, other.ext4_load_inode_bitmap_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mark_inode_dirty_, other.ext4_mark_inode_dirty_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mb_bitmap_load_, other.ext4_mb_bitmap_load_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mb_buddy_bitmap_load_, other.ext4_mb_buddy_bitmap_load_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mb_discard_preallocations_, other.ext4_mb_discard_preallocations_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mb_new_group_pa_, other.ext4_mb_new_group_pa_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mb_new_inode_pa_, other.ext4_mb_new_inode_pa_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mb_release_group_pa_, other.ext4_mb_release_group_pa_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mb_release_inode_pa_, other.ext4_mb_release_inode_pa_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mballoc_alloc_, other.ext4_mballoc_alloc_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mballoc_discard_, other.ext4_mballoc_discard_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mballoc_free_, other.ext4_mballoc_free_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_mballoc_prealloc_, other.ext4_mballoc_prealloc_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_other_inode_update_time_, other.ext4_other_inode_update_time_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_punch_hole_, other.ext4_punch_hole_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_read_block_bitmap_load_, other.ext4_read_block_bitmap_load_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_readpage_, other.ext4_readpage_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_releasepage_, other.ext4_releasepage_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_remove_blocks_, other.ext4_remove_blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_request_blocks_, other.ext4_request_blocks_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_request_inode_, other.ext4_request_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_sync_fs_, other.ext4_sync_fs_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_trim_all_free_, other.ext4_trim_all_free_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_trim_extent_, other.ext4_trim_extent_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_truncate_enter_, other.ext4_truncate_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_truncate_exit_, other.ext4_truncate_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_unlink_enter_, other.ext4_unlink_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_unlink_exit_, other.ext4_unlink_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_write_begin_, other.ext4_write_begin_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_write_end_, other.ext4_write_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_writepage_, other.ext4_writepage_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_writepages_, other.ext4_writepages_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_writepages_result_, other.ext4_writepages_result_)
   && ::protozero::internal::gen_helpers::EqualsField(ext4_zero_range_, other.ext4_zero_range_)
   && ::protozero::internal::gen_helpers::EqualsField(task_newtask_, other.task_newtask_)
   && ::protozero::internal::gen_helpers::EqualsField(task_rename_, other.task_rename_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_process_exec_, other.sched_process_exec_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_process_exit_, other.sched_process_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_process_fork_, other.sched_process_fork_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_process_free_, other.sched_process_free_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_process_hang_, other.sched_process_hang_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_process_wait_, other.sched_process_wait_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_do_submit_bio_, other.f2fs_do_submit_bio_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_evict_inode_, other.f2fs_evict_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_fallocate_, other.f2fs_fallocate_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_get_data_block_, other.f2fs_get_data_block_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_get_victim_, other.f2fs_get_victim_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_iget_, other.f2fs_iget_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_iget_exit_, other.f2fs_iget_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_new_inode_, other.f2fs_new_inode_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_readpage_, other.f2fs_readpage_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_reserve_new_block_, other.f2fs_reserve_new_block_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_set_page_dirty_, other.f2fs_set_page_dirty_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_submit_write_page_, other.f2fs_submit_write_page_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_sync_file_enter_, other.f2fs_sync_file_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_sync_file_exit_, other.f2fs_sync_file_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_sync_fs_, other.f2fs_sync_fs_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_, other.f2fs_truncate_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_blocks_enter_, other.f2fs_truncate_blocks_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_blocks_exit_, other.f2fs_truncate_blocks_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_data_blocks_range_, other.f2fs_truncate_data_blocks_range_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_inode_blocks_enter_, other.f2fs_truncate_inode_blocks_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_inode_blocks_exit_, other.f2fs_truncate_inode_blocks_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_node_, other.f2fs_truncate_node_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_nodes_enter_, other.f2fs_truncate_nodes_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_nodes_exit_, other.f2fs_truncate_nodes_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_truncate_partial_nodes_, other.f2fs_truncate_partial_nodes_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_unlink_enter_, other.f2fs_unlink_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_unlink_exit_, other.f2fs_unlink_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_vm_page_mkwrite_, other.f2fs_vm_page_mkwrite_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_write_begin_, other.f2fs_write_begin_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_write_checkpoint_, other.f2fs_write_checkpoint_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_write_end_, other.f2fs_write_end_)
   && ::protozero::internal::gen_helpers::EqualsField(alloc_pages_iommu_end_, other.alloc_pages_iommu_end_)
   && ::protozero::internal::gen_helpers::EqualsField(alloc_pages_iommu_fail_, other.alloc_pages_iommu_fail_)
   && ::protozero::internal::gen_helpers::EqualsField(alloc_pages_iommu_start_, other.alloc_pages_iommu_start_)
   && ::protozero::internal::gen_helpers::EqualsField(alloc_pages_sys_end_, other.alloc_pages_sys_end_)
   && ::protozero::internal::gen_helpers::EqualsField(alloc_pages_sys_fail_, other.alloc_pages_sys_fail_)
   && ::protozero::internal::gen_helpers::EqualsField(alloc_pages_sys_start_, other.alloc_pages_sys_start_)
   && ::protozero::internal::gen_helpers::EqualsField(dma_alloc_contiguous_retry_, other.dma_alloc_contiguous_retry_)
   && ::protozero::internal::gen_helpers::EqualsField(iommu_map_range_, other.iommu_map_range_)
   && ::protozero::internal::gen_helpers::EqualsField(iommu_sec_ptbl_map_range_end_, other.iommu_sec_ptbl_map_range_end_)
   && ::protozero::internal::gen_helpers::EqualsField(iommu_sec_ptbl_map_range_start_, other.iommu_sec_ptbl_map_range_start_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_alloc_buffer_end_, other.ion_alloc_buffer_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_alloc_buffer_fail_, other.ion_alloc_buffer_fail_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_alloc_buffer_fallback_, other.ion_alloc_buffer_fallback_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_alloc_buffer_start_, other.ion_alloc_buffer_start_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_cp_alloc_retry_, other.ion_cp_alloc_retry_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_cp_secure_buffer_end_, other.ion_cp_secure_buffer_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_cp_secure_buffer_start_, other.ion_cp_secure_buffer_start_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_prefetching_, other.ion_prefetching_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_secure_cma_add_to_pool_end_, other.ion_secure_cma_add_to_pool_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_secure_cma_add_to_pool_start_, other.ion_secure_cma_add_to_pool_start_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_secure_cma_allocate_end_, other.ion_secure_cma_allocate_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_secure_cma_allocate_start_, other.ion_secure_cma_allocate_start_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_secure_cma_shrink_pool_end_, other.ion_secure_cma_shrink_pool_end_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_secure_cma_shrink_pool_start_, other.ion_secure_cma_shrink_pool_start_)
   && ::protozero::internal::gen_helpers::EqualsField(kfree_, other.kfree_)
   && ::protozero::internal::gen_helpers::EqualsField(kmalloc_, other.kmalloc_)
   && ::protozero::internal::gen_helpers::EqualsField(kmalloc_node_, other.kmalloc_node_)
   && ::protozero::internal::gen_helpers::EqualsField(kmem_cache_alloc_, other.kmem_cache_alloc_)
   && ::protozero::internal::gen_helpers::EqualsField(kmem_cache_alloc_node_, other.kmem_cache_alloc_node_)
   && ::protozero::internal::gen_helpers::EqualsField(kmem_cache_free_, other.kmem_cache_free_)
   && ::protozero::internal::gen_helpers::EqualsField(migrate_pages_end_, other.migrate_pages_end_)
   && ::protozero::internal::gen_helpers::EqualsField(migrate_pages_start_, other.migrate_pages_start_)
   && ::protozero::internal::gen_helpers::EqualsField(migrate_retry_, other.migrate_retry_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_page_alloc_, other.mm_page_alloc_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_page_alloc_extfrag_, other.mm_page_alloc_extfrag_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_page_alloc_zone_locked_, other.mm_page_alloc_zone_locked_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_page_free_, other.mm_page_free_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_page_free_batched_, other.mm_page_free_batched_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_page_pcpu_drain_, other.mm_page_pcpu_drain_)
   && ::protozero::internal::gen_helpers::EqualsField(rss_stat_, other.rss_stat_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_heap_shrink_, other.ion_heap_shrink_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_heap_grow_, other.ion_heap_grow_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_init_, other.fence_init_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_destroy_, other.fence_destroy_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_enable_signal_, other.fence_enable_signal_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_signaled_, other.fence_signaled_)
   && ::protozero::internal::gen_helpers::EqualsField(clk_enable_, other.clk_enable_)
   && ::protozero::internal::gen_helpers::EqualsField(clk_disable_, other.clk_disable_)
   && ::protozero::internal::gen_helpers::EqualsField(clk_set_rate_, other.clk_set_rate_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_transaction_alloc_buf_, other.binder_transaction_alloc_buf_)
   && ::protozero::internal::gen_helpers::EqualsField(signal_deliver_, other.signal_deliver_)
   && ::protozero::internal::gen_helpers::EqualsField(signal_generate_, other.signal_generate_)
   && ::protozero::internal::gen_helpers::EqualsField(oom_score_adj_update_, other.oom_score_adj_update_)
   && ::protozero::internal::gen_helpers::EqualsField(generic_, other.generic_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_event_record_, other.mm_event_record_)
   && ::protozero::internal::gen_helpers::EqualsField(sys_enter_, other.sys_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(sys_exit_, other.sys_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(zero_, other.zero_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_frequency_, other.gpu_frequency_)
   && ::protozero::internal::gen_helpers::EqualsField(sde_tracing_mark_write_, other.sde_tracing_mark_write_)
   && ::protozero::internal::gen_helpers::EqualsField(mark_victim_, other.mark_victim_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_stat_, other.ion_stat_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_buffer_create_, other.ion_buffer_create_)
   && ::protozero::internal::gen_helpers::EqualsField(ion_buffer_destroy_, other.ion_buffer_destroy_)
   && ::protozero::internal::gen_helpers::EqualsField(scm_call_start_, other.scm_call_start_)
   && ::protozero::internal::gen_helpers::EqualsField(scm_call_end_, other.scm_call_end_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_mem_total_, other.gpu_mem_total_)
   && ::protozero::internal::gen_helpers::EqualsField(thermal_temperature_, other.thermal_temperature_)
   && ::protozero::internal::gen_helpers::EqualsField(cdev_update_, other.cdev_update_)
   && ::protozero::internal::gen_helpers::EqualsField(cpuhp_exit_, other.cpuhp_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(cpuhp_multi_enter_, other.cpuhp_multi_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(cpuhp_enter_, other.cpuhp_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(cpuhp_latency_, other.cpuhp_latency_)
   && ::protozero::internal::gen_helpers::EqualsField(fastrpc_dma_stat_, other.fastrpc_dma_stat_)
   && ::protozero::internal::gen_helpers::EqualsField(dpu_tracing_mark_write_, other.dpu_tracing_mark_write_)
   && ::protozero::internal::gen_helpers::EqualsField(g2d_tracing_mark_write_, other.g2d_tracing_mark_write_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_tracing_mark_write_, other.mali_tracing_mark_write_)
   && ::protozero::internal::gen_helpers::EqualsField(dma_heap_stat_, other.dma_heap_stat_)
   && ::protozero::internal::gen_helpers::EqualsField(cpuhp_pause_, other.cpuhp_pause_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_pi_setprio_, other.sched_pi_setprio_)
   && ::protozero::internal::gen_helpers::EqualsField(sde_sde_evtlog_, other.sde_sde_evtlog_)
   && ::protozero::internal::gen_helpers::EqualsField(sde_sde_perf_calc_crtc_, other.sde_sde_perf_calc_crtc_)
   && ::protozero::internal::gen_helpers::EqualsField(sde_sde_perf_crtc_update_, other.sde_sde_perf_crtc_update_)
   && ::protozero::internal::gen_helpers::EqualsField(sde_sde_perf_set_qos_luts_, other.sde_sde_perf_set_qos_luts_)
   && ::protozero::internal::gen_helpers::EqualsField(sde_sde_perf_update_bus_, other.sde_sde_perf_update_bus_)
   && ::protozero::internal::gen_helpers::EqualsField(rss_stat_throttled_, other.rss_stat_throttled_)
   && ::protozero::internal::gen_helpers::EqualsField(netif_receive_skb_, other.netif_receive_skb_)
   && ::protozero::internal::gen_helpers::EqualsField(net_dev_xmit_, other.net_dev_xmit_)
   && ::protozero::internal::gen_helpers::EqualsField(inet_sock_set_state_, other.inet_sock_set_state_)
   && ::protozero::internal::gen_helpers::EqualsField(tcp_retransmit_skb_, other.tcp_retransmit_skb_)
   && ::protozero::internal::gen_helpers::EqualsField(cros_ec_sensorhub_data_, other.cros_ec_sensorhub_data_)
   && ::protozero::internal::gen_helpers::EqualsField(napi_gro_receive_entry_, other.napi_gro_receive_entry_)
   && ::protozero::internal::gen_helpers::EqualsField(napi_gro_receive_exit_, other.napi_gro_receive_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(kfree_skb_, other.kfree_skb_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_access_fault_, other.kvm_access_fault_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_ack_irq_, other.kvm_ack_irq_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_age_hva_, other.kvm_age_hva_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_age_page_, other.kvm_age_page_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_arm_clear_debug_, other.kvm_arm_clear_debug_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_arm_set_dreg32_, other.kvm_arm_set_dreg32_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_arm_set_regset_, other.kvm_arm_set_regset_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_arm_setup_debug_, other.kvm_arm_setup_debug_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_entry_, other.kvm_entry_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_exit_, other.kvm_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_fpu_, other.kvm_fpu_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_get_timer_map_, other.kvm_get_timer_map_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_guest_fault_, other.kvm_guest_fault_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_handle_sys_reg_, other.kvm_handle_sys_reg_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_hvc_arm64_, other.kvm_hvc_arm64_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_irq_line_, other.kvm_irq_line_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_mmio_, other.kvm_mmio_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_mmio_emulate_, other.kvm_mmio_emulate_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_set_guest_debug_, other.kvm_set_guest_debug_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_set_irq_, other.kvm_set_irq_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_set_spte_hva_, other.kvm_set_spte_hva_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_set_way_flush_, other.kvm_set_way_flush_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_sys_access_, other.kvm_sys_access_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_test_age_hva_, other.kvm_test_age_hva_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_timer_emulate_, other.kvm_timer_emulate_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_timer_hrtimer_expire_, other.kvm_timer_hrtimer_expire_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_timer_restore_state_, other.kvm_timer_restore_state_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_timer_save_state_, other.kvm_timer_save_state_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_timer_update_irq_, other.kvm_timer_update_irq_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_toggle_cache_, other.kvm_toggle_cache_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_unmap_hva_range_, other.kvm_unmap_hva_range_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_userspace_exit_, other.kvm_userspace_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_vcpu_wakeup_, other.kvm_vcpu_wakeup_)
   && ::protozero::internal::gen_helpers::EqualsField(kvm_wfx_arm64_, other.kvm_wfx_arm64_)
   && ::protozero::internal::gen_helpers::EqualsField(trap_reg_, other.trap_reg_)
   && ::protozero::internal::gen_helpers::EqualsField(vgic_update_irq_pending_, other.vgic_update_irq_pending_)
   && ::protozero::internal::gen_helpers::EqualsField(wakeup_source_activate_, other.wakeup_source_activate_)
   && ::protozero::internal::gen_helpers::EqualsField(wakeup_source_deactivate_, other.wakeup_source_deactivate_)
   && ::protozero::internal::gen_helpers::EqualsField(ufshcd_command_, other.ufshcd_command_)
   && ::protozero::internal::gen_helpers::EqualsField(ufshcd_clk_gating_, other.ufshcd_clk_gating_)
   && ::protozero::internal::gen_helpers::EqualsField(console_, other.console_)
   && ::protozero::internal::gen_helpers::EqualsField(drm_vblank_event_, other.drm_vblank_event_)
   && ::protozero::internal::gen_helpers::EqualsField(drm_vblank_event_delivered_, other.drm_vblank_event_delivered_)
   && ::protozero::internal::gen_helpers::EqualsField(drm_sched_job_, other.drm_sched_job_)
   && ::protozero::internal::gen_helpers::EqualsField(drm_run_job_, other.drm_run_job_)
   && ::protozero::internal::gen_helpers::EqualsField(drm_sched_process_job_, other.drm_sched_process_job_)
   && ::protozero::internal::gen_helpers::EqualsField(dma_fence_init_, other.dma_fence_init_)
   && ::protozero::internal::gen_helpers::EqualsField(dma_fence_emit_, other.dma_fence_emit_)
   && ::protozero::internal::gen_helpers::EqualsField(dma_fence_signaled_, other.dma_fence_signaled_)
   && ::protozero::internal::gen_helpers::EqualsField(dma_fence_wait_start_, other.dma_fence_wait_start_)
   && ::protozero::internal::gen_helpers::EqualsField(dma_fence_wait_end_, other.dma_fence_wait_end_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_iostat_, other.f2fs_iostat_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_iostat_latency_, other.f2fs_iostat_latency_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_cpu_util_cfs_, other.sched_cpu_util_cfs_)
   && ::protozero::internal::gen_helpers::EqualsField(v4l2_qbuf_, other.v4l2_qbuf_)
   && ::protozero::internal::gen_helpers::EqualsField(v4l2_dqbuf_, other.v4l2_dqbuf_)
   && ::protozero::internal::gen_helpers::EqualsField(vb2_v4l2_buf_queue_, other.vb2_v4l2_buf_queue_)
   && ::protozero::internal::gen_helpers::EqualsField(vb2_v4l2_buf_done_, other.vb2_v4l2_buf_done_)
   && ::protozero::internal::gen_helpers::EqualsField(vb2_v4l2_qbuf_, other.vb2_v4l2_qbuf_)
   && ::protozero::internal::gen_helpers::EqualsField(vb2_v4l2_dqbuf_, other.vb2_v4l2_dqbuf_)
   && ::protozero::internal::gen_helpers::EqualsField(dsi_cmd_fifo_status_, other.dsi_cmd_fifo_status_)
   && ::protozero::internal::gen_helpers::EqualsField(dsi_rx_, other.dsi_rx_)
   && ::protozero::internal::gen_helpers::EqualsField(dsi_tx_, other.dsi_tx_)
   && ::protozero::internal::gen_helpers::EqualsField(android_fs_dataread_end_, other.android_fs_dataread_end_)
   && ::protozero::internal::gen_helpers::EqualsField(android_fs_dataread_start_, other.android_fs_dataread_start_)
   && ::protozero::internal::gen_helpers::EqualsField(android_fs_datawrite_end_, other.android_fs_datawrite_end_)
   && ::protozero::internal::gen_helpers::EqualsField(android_fs_datawrite_start_, other.android_fs_datawrite_start_)
   && ::protozero::internal::gen_helpers::EqualsField(android_fs_fsync_end_, other.android_fs_fsync_end_)
   && ::protozero::internal::gen_helpers::EqualsField(android_fs_fsync_start_, other.android_fs_fsync_start_)
   && ::protozero::internal::gen_helpers::EqualsField(funcgraph_entry_, other.funcgraph_entry_)
   && ::protozero::internal::gen_helpers::EqualsField(funcgraph_exit_, other.funcgraph_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(virtio_video_cmd_, other.virtio_video_cmd_)
   && ::protozero::internal::gen_helpers::EqualsField(virtio_video_cmd_done_, other.virtio_video_cmd_done_)
   && ::protozero::internal::gen_helpers::EqualsField(virtio_video_resource_queue_, other.virtio_video_resource_queue_)
   && ::protozero::internal::gen_helpers::EqualsField(virtio_video_resource_queue_done_, other.virtio_video_resource_queue_done_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_shrink_slab_start_, other.mm_shrink_slab_start_)
   && ::protozero::internal::gen_helpers::EqualsField(mm_shrink_slab_end_, other.mm_shrink_slab_end_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_smc_, other.trusty_smc_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_smc_done_, other.trusty_smc_done_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_std_call32_, other.trusty_std_call32_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_std_call32_done_, other.trusty_std_call32_done_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_share_memory_, other.trusty_share_memory_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_share_memory_done_, other.trusty_share_memory_done_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_reclaim_memory_, other.trusty_reclaim_memory_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_reclaim_memory_done_, other.trusty_reclaim_memory_done_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_irq_, other.trusty_irq_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_handle_event_, other.trusty_ipc_handle_event_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_connect_, other.trusty_ipc_connect_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_connect_end_, other.trusty_ipc_connect_end_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_write_, other.trusty_ipc_write_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_poll_, other.trusty_ipc_poll_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_read_, other.trusty_ipc_read_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_read_end_, other.trusty_ipc_read_end_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_ipc_rx_, other.trusty_ipc_rx_)
   && ::protozero::internal::gen_helpers::EqualsField(trusty_enqueue_nop_, other.trusty_enqueue_nop_)
   && ::protozero::internal::gen_helpers::EqualsField(cma_alloc_start_, other.cma_alloc_start_)
   && ::protozero::internal::gen_helpers::EqualsField(cma_alloc_info_, other.cma_alloc_info_)
   && ::protozero::internal::gen_helpers::EqualsField(lwis_tracing_mark_write_, other.lwis_tracing_mark_write_)
   && ::protozero::internal::gen_helpers::EqualsField(virtio_gpu_cmd_queue_, other.virtio_gpu_cmd_queue_)
   && ::protozero::internal::gen_helpers::EqualsField(virtio_gpu_cmd_response_, other.virtio_gpu_cmd_response_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_kcpu_cqs_set_, other.mali_mali_kcpu_cqs_set_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_kcpu_cqs_wait_start_, other.mali_mali_kcpu_cqs_wait_start_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_kcpu_cqs_wait_end_, other.mali_mali_kcpu_cqs_wait_end_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_kcpu_fence_signal_, other.mali_mali_kcpu_fence_signal_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_kcpu_fence_wait_start_, other.mali_mali_kcpu_fence_wait_start_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_kcpu_fence_wait_end_, other.mali_mali_kcpu_fence_wait_end_)
   && ::protozero::internal::gen_helpers::EqualsField(hyp_enter_, other.hyp_enter_)
   && ::protozero::internal::gen_helpers::EqualsField(hyp_exit_, other.hyp_exit_)
   && ::protozero::internal::gen_helpers::EqualsField(host_hcall_, other.host_hcall_)
   && ::protozero::internal::gen_helpers::EqualsField(host_smc_, other.host_smc_)
   && ::protozero::internal::gen_helpers::EqualsField(host_mem_abort_, other.host_mem_abort_)
   && ::protozero::internal::gen_helpers::EqualsField(suspend_resume_minimal_, other.suspend_resume_minimal_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_csf_interrupt_start_, other.mali_mali_csf_interrupt_start_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_csf_interrupt_end_, other.mali_mali_csf_interrupt_end_)
   && ::protozero::internal::gen_helpers::EqualsField(samsung_tracing_mark_write_, other.samsung_tracing_mark_write_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_command_, other.binder_command_)
   && ::protozero::internal::gen_helpers::EqualsField(binder_return_, other.binder_return_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_switch_with_ctrs_, other.sched_switch_with_ctrs_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_work_period_, other.gpu_work_period_)
   && ::protozero::internal::gen_helpers::EqualsField(rpm_status_, other.rpm_status_)
   && ::protozero::internal::gen_helpers::EqualsField(panel_write_generic_, other.panel_write_generic_)
   && ::protozero::internal::gen_helpers::EqualsField(sched_migrate_task_, other.sched_migrate_task_)
   && ::protozero::internal::gen_helpers::EqualsField(dpu_dsi_cmd_fifo_status_, other.dpu_dsi_cmd_fifo_status_)
   && ::protozero::internal::gen_helpers::EqualsField(dpu_dsi_rx_, other.dpu_dsi_rx_)
   && ::protozero::internal::gen_helpers::EqualsField(dpu_dsi_tx_, other.dpu_dsi_tx_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_background_gc_, other.f2fs_background_gc_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_gc_begin_, other.f2fs_gc_begin_)
   && ::protozero::internal::gen_helpers::EqualsField(f2fs_gc_end_, other.f2fs_gc_end_)
   && ::protozero::internal::gen_helpers::EqualsField(fastrpc_dma_free_, other.fastrpc_dma_free_)
   && ::protozero::internal::gen_helpers::EqualsField(fastrpc_dma_alloc_, other.fastrpc_dma_alloc_)
   && ::protozero::internal::gen_helpers::EqualsField(fastrpc_dma_unmap_, other.fastrpc_dma_unmap_)
   && ::protozero::internal::gen_helpers::EqualsField(fastrpc_dma_map_, other.fastrpc_dma_map_)
   && ::protozero::internal::gen_helpers::EqualsField(google_icc_event_, other.google_icc_event_)
   && ::protozero::internal::gen_helpers::EqualsField(google_irm_event_, other.google_irm_event_)
   && ::protozero::internal::gen_helpers::EqualsField(device_pm_callback_start_, other.device_pm_callback_start_)
   && ::protozero::internal::gen_helpers::EqualsField(device_pm_callback_end_, other.device_pm_callback_end_)
   && ::protozero::internal::gen_helpers::EqualsField(thermal_exynos_acpm_bulk_, other.thermal_exynos_acpm_bulk_)
   && ::protozero::internal::gen_helpers::EqualsField(thermal_exynos_acpm_high_overhead_, other.thermal_exynos_acpm_high_overhead_)
   && ::protozero::internal::gen_helpers::EqualsField(dcvsh_freq_, other.dcvsh_freq_)
   && ::protozero::internal::gen_helpers::EqualsField(kgsl_gpu_frequency_, other.kgsl_gpu_frequency_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_cores_down_scale_notify_pend_, other.mali_mali_pm_mcu_hctl_cores_down_scale_notify_pend_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_cores_notify_pend_, other.mali_mali_pm_mcu_hctl_cores_notify_pend_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_core_inactive_pend_, other.mali_mali_pm_mcu_hctl_core_inactive_pend_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_mcu_on_recheck_, other.mali_mali_pm_mcu_hctl_mcu_on_recheck_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_shaders_core_off_pend_, other.mali_mali_pm_mcu_hctl_shaders_core_off_pend_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_shaders_pend_off_, other.mali_mali_pm_mcu_hctl_shaders_pend_off_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_shaders_pend_on_, other.mali_mali_pm_mcu_hctl_shaders_pend_on_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_hctl_shaders_ready_off_, other.mali_mali_pm_mcu_hctl_shaders_ready_off_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_in_sleep_, other.mali_mali_pm_mcu_in_sleep_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_off_, other.mali_mali_pm_mcu_off_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_, other.mali_mali_pm_mcu_on_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_core_attr_update_pend_, other.mali_mali_pm_mcu_on_core_attr_update_pend_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_glb_reinit_pend_, other.mali_mali_pm_mcu_on_glb_reinit_pend_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_halt_, other.mali_mali_pm_mcu_on_halt_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_hwcnt_disable_, other.mali_mali_pm_mcu_on_hwcnt_disable_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_hwcnt_enable_, other.mali_mali_pm_mcu_on_hwcnt_enable_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_pend_halt_, other.mali_mali_pm_mcu_on_pend_halt_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_pend_sleep_, other.mali_mali_pm_mcu_on_pend_sleep_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_on_sleep_initiate_, other.mali_mali_pm_mcu_on_sleep_initiate_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_pend_off_, other.mali_mali_pm_mcu_pend_off_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_pend_on_reload_, other.mali_mali_pm_mcu_pend_on_reload_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_power_down_, other.mali_mali_pm_mcu_power_down_)
   && ::protozero::internal::gen_helpers::EqualsField(mali_mali_pm_mcu_reset_wait_, other.mali_mali_pm_mcu_reset_wait_)
   && ::protozero::internal::gen_helpers::EqualsField(bcl_irq_trigger_, other.bcl_irq_trigger_);
}

bool FtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 5 /* common_flags */:
        field.get(&common_flags_);
        break;
      case 3 /* print */:
        (*print_).ParseFromArray(field.data(), field.size());
        break;
      case 4 /* sched_switch */:
        (*sched_switch_).ParseFromArray(field.data(), field.size());
        break;
      case 11 /* cpu_frequency */:
        (*cpu_frequency_).ParseFromArray(field.data(), field.size());
        break;
      case 12 /* cpu_frequency_limits */:
        (*cpu_frequency_limits_).ParseFromArray(field.data(), field.size());
        break;
      case 13 /* cpu_idle */:
        (*cpu_idle_).ParseFromArray(field.data(), field.size());
        break;
      case 14 /* clock_enable */:
        (*clock_enable_).ParseFromArray(field.data(), field.size());
        break;
      case 15 /* clock_disable */:
        (*clock_disable_).ParseFromArray(field.data(), field.size());
        break;
      case 16 /* clock_set_rate */:
        (*clock_set_rate_).ParseFromArray(field.data(), field.size());
        break;
      case 17 /* sched_wakeup */:
        (*sched_wakeup_).ParseFromArray(field.data(), field.size());
        break;
      case 18 /* sched_blocked_reason */:
        (*sched_blocked_reason_).ParseFromArray(field.data(), field.size());
        break;
      case 19 /* sched_cpu_hotplug */:
        (*sched_cpu_hotplug_).ParseFromArray(field.data(), field.size());
        break;
      case 20 /* sched_waking */:
        (*sched_waking_).ParseFromArray(field.data(), field.size());
        break;
      case 21 /* ipi_entry */:
        (*ipi_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 22 /* ipi_exit */:
        (*ipi_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 23 /* ipi_raise */:
        (*ipi_raise_).ParseFromArray(field.data(), field.size());
        break;
      case 24 /* softirq_entry */:
        (*softirq_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 25 /* softirq_exit */:
        (*softirq_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 26 /* softirq_raise */:
        (*softirq_raise_).ParseFromArray(field.data(), field.size());
        break;
      case 27 /* i2c_read */:
        (*i2c_read_).ParseFromArray(field.data(), field.size());
        break;
      case 28 /* i2c_write */:
        (*i2c_write_).ParseFromArray(field.data(), field.size());
        break;
      case 29 /* i2c_result */:
        (*i2c_result_).ParseFromArray(field.data(), field.size());
        break;
      case 30 /* i2c_reply */:
        (*i2c_reply_).ParseFromArray(field.data(), field.size());
        break;
      case 31 /* smbus_read */:
        (*smbus_read_).ParseFromArray(field.data(), field.size());
        break;
      case 32 /* smbus_write */:
        (*smbus_write_).ParseFromArray(field.data(), field.size());
        break;
      case 33 /* smbus_result */:
        (*smbus_result_).ParseFromArray(field.data(), field.size());
        break;
      case 34 /* smbus_reply */:
        (*smbus_reply_).ParseFromArray(field.data(), field.size());
        break;
      case 35 /* lowmemory_kill */:
        (*lowmemory_kill_).ParseFromArray(field.data(), field.size());
        break;
      case 36 /* irq_handler_entry */:
        (*irq_handler_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 37 /* irq_handler_exit */:
        (*irq_handler_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 38 /* sync_pt */:
        (*sync_pt_).ParseFromArray(field.data(), field.size());
        break;
      case 39 /* sync_timeline */:
        (*sync_timeline_).ParseFromArray(field.data(), field.size());
        break;
      case 40 /* sync_wait */:
        (*sync_wait_).ParseFromArray(field.data(), field.size());
        break;
      case 41 /* ext4_da_write_begin */:
        (*ext4_da_write_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 42 /* ext4_da_write_end */:
        (*ext4_da_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 43 /* ext4_sync_file_enter */:
        (*ext4_sync_file_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 44 /* ext4_sync_file_exit */:
        (*ext4_sync_file_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 45 /* block_rq_issue */:
        (*block_rq_issue_).ParseFromArray(field.data(), field.size());
        break;
      case 46 /* mm_vmscan_direct_reclaim_begin */:
        (*mm_vmscan_direct_reclaim_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 47 /* mm_vmscan_direct_reclaim_end */:
        (*mm_vmscan_direct_reclaim_end_).ParseFromArray(field.data(), field.size());
        break;
      case 48 /* mm_vmscan_kswapd_wake */:
        (*mm_vmscan_kswapd_wake_).ParseFromArray(field.data(), field.size());
        break;
      case 49 /* mm_vmscan_kswapd_sleep */:
        (*mm_vmscan_kswapd_sleep_).ParseFromArray(field.data(), field.size());
        break;
      case 50 /* binder_transaction */:
        (*binder_transaction_).ParseFromArray(field.data(), field.size());
        break;
      case 51 /* binder_transaction_received */:
        (*binder_transaction_received_).ParseFromArray(field.data(), field.size());
        break;
      case 52 /* binder_set_priority */:
        (*binder_set_priority_).ParseFromArray(field.data(), field.size());
        break;
      case 53 /* binder_lock */:
        (*binder_lock_).ParseFromArray(field.data(), field.size());
        break;
      case 54 /* binder_locked */:
        (*binder_locked_).ParseFromArray(field.data(), field.size());
        break;
      case 55 /* binder_unlock */:
        (*binder_unlock_).ParseFromArray(field.data(), field.size());
        break;
      case 56 /* workqueue_activate_work */:
        (*workqueue_activate_work_).ParseFromArray(field.data(), field.size());
        break;
      case 57 /* workqueue_execute_end */:
        (*workqueue_execute_end_).ParseFromArray(field.data(), field.size());
        break;
      case 58 /* workqueue_execute_start */:
        (*workqueue_execute_start_).ParseFromArray(field.data(), field.size());
        break;
      case 59 /* workqueue_queue_work */:
        (*workqueue_queue_work_).ParseFromArray(field.data(), field.size());
        break;
      case 60 /* regulator_disable */:
        (*regulator_disable_).ParseFromArray(field.data(), field.size());
        break;
      case 61 /* regulator_disable_complete */:
        (*regulator_disable_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 62 /* regulator_enable */:
        (*regulator_enable_).ParseFromArray(field.data(), field.size());
        break;
      case 63 /* regulator_enable_complete */:
        (*regulator_enable_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 64 /* regulator_enable_delay */:
        (*regulator_enable_delay_).ParseFromArray(field.data(), field.size());
        break;
      case 65 /* regulator_set_voltage */:
        (*regulator_set_voltage_).ParseFromArray(field.data(), field.size());
        break;
      case 66 /* regulator_set_voltage_complete */:
        (*regulator_set_voltage_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 67 /* cgroup_attach_task */:
        (*cgroup_attach_task_).ParseFromArray(field.data(), field.size());
        break;
      case 68 /* cgroup_mkdir */:
        (*cgroup_mkdir_).ParseFromArray(field.data(), field.size());
        break;
      case 69 /* cgroup_remount */:
        (*cgroup_remount_).ParseFromArray(field.data(), field.size());
        break;
      case 70 /* cgroup_rmdir */:
        (*cgroup_rmdir_).ParseFromArray(field.data(), field.size());
        break;
      case 71 /* cgroup_transfer_tasks */:
        (*cgroup_transfer_tasks_).ParseFromArray(field.data(), field.size());
        break;
      case 72 /* cgroup_destroy_root */:
        (*cgroup_destroy_root_).ParseFromArray(field.data(), field.size());
        break;
      case 73 /* cgroup_release */:
        (*cgroup_release_).ParseFromArray(field.data(), field.size());
        break;
      case 74 /* cgroup_rename */:
        (*cgroup_rename_).ParseFromArray(field.data(), field.size());
        break;
      case 75 /* cgroup_setup_root */:
        (*cgroup_setup_root_).ParseFromArray(field.data(), field.size());
        break;
      case 76 /* mdp_cmd_kickoff */:
        (*mdp_cmd_kickoff_).ParseFromArray(field.data(), field.size());
        break;
      case 77 /* mdp_commit */:
        (*mdp_commit_).ParseFromArray(field.data(), field.size());
        break;
      case 78 /* mdp_perf_set_ot */:
        (*mdp_perf_set_ot_).ParseFromArray(field.data(), field.size());
        break;
      case 79 /* mdp_sspp_change */:
        (*mdp_sspp_change_).ParseFromArray(field.data(), field.size());
        break;
      case 80 /* tracing_mark_write */:
        (*tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 81 /* mdp_cmd_pingpong_done */:
        (*mdp_cmd_pingpong_done_).ParseFromArray(field.data(), field.size());
        break;
      case 82 /* mdp_compare_bw */:
        (*mdp_compare_bw_).ParseFromArray(field.data(), field.size());
        break;
      case 83 /* mdp_perf_set_panic_luts */:
        (*mdp_perf_set_panic_luts_).ParseFromArray(field.data(), field.size());
        break;
      case 84 /* mdp_sspp_set */:
        (*mdp_sspp_set_).ParseFromArray(field.data(), field.size());
        break;
      case 85 /* mdp_cmd_readptr_done */:
        (*mdp_cmd_readptr_done_).ParseFromArray(field.data(), field.size());
        break;
      case 86 /* mdp_misr_crc */:
        (*mdp_misr_crc_).ParseFromArray(field.data(), field.size());
        break;
      case 87 /* mdp_perf_set_qos_luts */:
        (*mdp_perf_set_qos_luts_).ParseFromArray(field.data(), field.size());
        break;
      case 88 /* mdp_trace_counter */:
        (*mdp_trace_counter_).ParseFromArray(field.data(), field.size());
        break;
      case 89 /* mdp_cmd_release_bw */:
        (*mdp_cmd_release_bw_).ParseFromArray(field.data(), field.size());
        break;
      case 90 /* mdp_mixer_update */:
        (*mdp_mixer_update_).ParseFromArray(field.data(), field.size());
        break;
      case 91 /* mdp_perf_set_wm_levels */:
        (*mdp_perf_set_wm_levels_).ParseFromArray(field.data(), field.size());
        break;
      case 92 /* mdp_video_underrun_done */:
        (*mdp_video_underrun_done_).ParseFromArray(field.data(), field.size());
        break;
      case 93 /* mdp_cmd_wait_pingpong */:
        (*mdp_cmd_wait_pingpong_).ParseFromArray(field.data(), field.size());
        break;
      case 94 /* mdp_perf_prefill_calc */:
        (*mdp_perf_prefill_calc_).ParseFromArray(field.data(), field.size());
        break;
      case 95 /* mdp_perf_update_bus */:
        (*mdp_perf_update_bus_).ParseFromArray(field.data(), field.size());
        break;
      case 96 /* rotator_bw_ao_as_context */:
        (*rotator_bw_ao_as_context_).ParseFromArray(field.data(), field.size());
        break;
      case 97 /* mm_filemap_add_to_page_cache */:
        (*mm_filemap_add_to_page_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 98 /* mm_filemap_delete_from_page_cache */:
        (*mm_filemap_delete_from_page_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 99 /* mm_compaction_begin */:
        (*mm_compaction_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 100 /* mm_compaction_defer_compaction */:
        (*mm_compaction_defer_compaction_).ParseFromArray(field.data(), field.size());
        break;
      case 101 /* mm_compaction_deferred */:
        (*mm_compaction_deferred_).ParseFromArray(field.data(), field.size());
        break;
      case 102 /* mm_compaction_defer_reset */:
        (*mm_compaction_defer_reset_).ParseFromArray(field.data(), field.size());
        break;
      case 103 /* mm_compaction_end */:
        (*mm_compaction_end_).ParseFromArray(field.data(), field.size());
        break;
      case 104 /* mm_compaction_finished */:
        (*mm_compaction_finished_).ParseFromArray(field.data(), field.size());
        break;
      case 105 /* mm_compaction_isolate_freepages */:
        (*mm_compaction_isolate_freepages_).ParseFromArray(field.data(), field.size());
        break;
      case 106 /* mm_compaction_isolate_migratepages */:
        (*mm_compaction_isolate_migratepages_).ParseFromArray(field.data(), field.size());
        break;
      case 107 /* mm_compaction_kcompactd_sleep */:
        (*mm_compaction_kcompactd_sleep_).ParseFromArray(field.data(), field.size());
        break;
      case 108 /* mm_compaction_kcompactd_wake */:
        (*mm_compaction_kcompactd_wake_).ParseFromArray(field.data(), field.size());
        break;
      case 109 /* mm_compaction_migratepages */:
        (*mm_compaction_migratepages_).ParseFromArray(field.data(), field.size());
        break;
      case 110 /* mm_compaction_suitable */:
        (*mm_compaction_suitable_).ParseFromArray(field.data(), field.size());
        break;
      case 111 /* mm_compaction_try_to_compact_pages */:
        (*mm_compaction_try_to_compact_pages_).ParseFromArray(field.data(), field.size());
        break;
      case 112 /* mm_compaction_wakeup_kcompactd */:
        (*mm_compaction_wakeup_kcompactd_).ParseFromArray(field.data(), field.size());
        break;
      case 113 /* suspend_resume */:
        (*suspend_resume_).ParseFromArray(field.data(), field.size());
        break;
      case 114 /* sched_wakeup_new */:
        (*sched_wakeup_new_).ParseFromArray(field.data(), field.size());
        break;
      case 115 /* block_bio_backmerge */:
        (*block_bio_backmerge_).ParseFromArray(field.data(), field.size());
        break;
      case 116 /* block_bio_bounce */:
        (*block_bio_bounce_).ParseFromArray(field.data(), field.size());
        break;
      case 117 /* block_bio_complete */:
        (*block_bio_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 118 /* block_bio_frontmerge */:
        (*block_bio_frontmerge_).ParseFromArray(field.data(), field.size());
        break;
      case 119 /* block_bio_queue */:
        (*block_bio_queue_).ParseFromArray(field.data(), field.size());
        break;
      case 120 /* block_bio_remap */:
        (*block_bio_remap_).ParseFromArray(field.data(), field.size());
        break;
      case 121 /* block_dirty_buffer */:
        (*block_dirty_buffer_).ParseFromArray(field.data(), field.size());
        break;
      case 122 /* block_getrq */:
        (*block_getrq_).ParseFromArray(field.data(), field.size());
        break;
      case 123 /* block_plug */:
        (*block_plug_).ParseFromArray(field.data(), field.size());
        break;
      case 124 /* block_rq_abort */:
        (*block_rq_abort_).ParseFromArray(field.data(), field.size());
        break;
      case 125 /* block_rq_complete */:
        (*block_rq_complete_).ParseFromArray(field.data(), field.size());
        break;
      case 126 /* block_rq_insert */:
        (*block_rq_insert_).ParseFromArray(field.data(), field.size());
        break;
      case 128 /* block_rq_remap */:
        (*block_rq_remap_).ParseFromArray(field.data(), field.size());
        break;
      case 129 /* block_rq_requeue */:
        (*block_rq_requeue_).ParseFromArray(field.data(), field.size());
        break;
      case 130 /* block_sleeprq */:
        (*block_sleeprq_).ParseFromArray(field.data(), field.size());
        break;
      case 131 /* block_split */:
        (*block_split_).ParseFromArray(field.data(), field.size());
        break;
      case 132 /* block_touch_buffer */:
        (*block_touch_buffer_).ParseFromArray(field.data(), field.size());
        break;
      case 133 /* block_unplug */:
        (*block_unplug_).ParseFromArray(field.data(), field.size());
        break;
      case 134 /* ext4_alloc_da_blocks */:
        (*ext4_alloc_da_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 135 /* ext4_allocate_blocks */:
        (*ext4_allocate_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 136 /* ext4_allocate_inode */:
        (*ext4_allocate_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 137 /* ext4_begin_ordered_truncate */:
        (*ext4_begin_ordered_truncate_).ParseFromArray(field.data(), field.size());
        break;
      case 138 /* ext4_collapse_range */:
        (*ext4_collapse_range_).ParseFromArray(field.data(), field.size());
        break;
      case 139 /* ext4_da_release_space */:
        (*ext4_da_release_space_).ParseFromArray(field.data(), field.size());
        break;
      case 140 /* ext4_da_reserve_space */:
        (*ext4_da_reserve_space_).ParseFromArray(field.data(), field.size());
        break;
      case 141 /* ext4_da_update_reserve_space */:
        (*ext4_da_update_reserve_space_).ParseFromArray(field.data(), field.size());
        break;
      case 142 /* ext4_da_write_pages */:
        (*ext4_da_write_pages_).ParseFromArray(field.data(), field.size());
        break;
      case 143 /* ext4_da_write_pages_extent */:
        (*ext4_da_write_pages_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 144 /* ext4_direct_io_enter */:
        (*ext4_direct_io_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 145 /* ext4_direct_io_exit */:
        (*ext4_direct_io_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 146 /* ext4_discard_blocks */:
        (*ext4_discard_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 147 /* ext4_discard_preallocations */:
        (*ext4_discard_preallocations_).ParseFromArray(field.data(), field.size());
        break;
      case 148 /* ext4_drop_inode */:
        (*ext4_drop_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 149 /* ext4_es_cache_extent */:
        (*ext4_es_cache_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 150 /* ext4_es_find_delayed_extent_range_enter */:
        (*ext4_es_find_delayed_extent_range_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 151 /* ext4_es_find_delayed_extent_range_exit */:
        (*ext4_es_find_delayed_extent_range_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 152 /* ext4_es_insert_extent */:
        (*ext4_es_insert_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 153 /* ext4_es_lookup_extent_enter */:
        (*ext4_es_lookup_extent_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 154 /* ext4_es_lookup_extent_exit */:
        (*ext4_es_lookup_extent_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 155 /* ext4_es_remove_extent */:
        (*ext4_es_remove_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 156 /* ext4_es_shrink */:
        (*ext4_es_shrink_).ParseFromArray(field.data(), field.size());
        break;
      case 157 /* ext4_es_shrink_count */:
        (*ext4_es_shrink_count_).ParseFromArray(field.data(), field.size());
        break;
      case 158 /* ext4_es_shrink_scan_enter */:
        (*ext4_es_shrink_scan_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 159 /* ext4_es_shrink_scan_exit */:
        (*ext4_es_shrink_scan_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 160 /* ext4_evict_inode */:
        (*ext4_evict_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 161 /* ext4_ext_convert_to_initialized_enter */:
        (*ext4_ext_convert_to_initialized_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 162 /* ext4_ext_convert_to_initialized_fastpath */:
        (*ext4_ext_convert_to_initialized_fastpath_).ParseFromArray(field.data(), field.size());
        break;
      case 163 /* ext4_ext_handle_unwritten_extents */:
        (*ext4_ext_handle_unwritten_extents_).ParseFromArray(field.data(), field.size());
        break;
      case 164 /* ext4_ext_in_cache */:
        (*ext4_ext_in_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 165 /* ext4_ext_load_extent */:
        (*ext4_ext_load_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 166 /* ext4_ext_map_blocks_enter */:
        (*ext4_ext_map_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 167 /* ext4_ext_map_blocks_exit */:
        (*ext4_ext_map_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 168 /* ext4_ext_put_in_cache */:
        (*ext4_ext_put_in_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 169 /* ext4_ext_remove_space */:
        (*ext4_ext_remove_space_).ParseFromArray(field.data(), field.size());
        break;
      case 170 /* ext4_ext_remove_space_done */:
        (*ext4_ext_remove_space_done_).ParseFromArray(field.data(), field.size());
        break;
      case 171 /* ext4_ext_rm_idx */:
        (*ext4_ext_rm_idx_).ParseFromArray(field.data(), field.size());
        break;
      case 172 /* ext4_ext_rm_leaf */:
        (*ext4_ext_rm_leaf_).ParseFromArray(field.data(), field.size());
        break;
      case 173 /* ext4_ext_show_extent */:
        (*ext4_ext_show_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 174 /* ext4_fallocate_enter */:
        (*ext4_fallocate_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 175 /* ext4_fallocate_exit */:
        (*ext4_fallocate_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 176 /* ext4_find_delalloc_range */:
        (*ext4_find_delalloc_range_).ParseFromArray(field.data(), field.size());
        break;
      case 177 /* ext4_forget */:
        (*ext4_forget_).ParseFromArray(field.data(), field.size());
        break;
      case 178 /* ext4_free_blocks */:
        (*ext4_free_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 179 /* ext4_free_inode */:
        (*ext4_free_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 180 /* ext4_get_implied_cluster_alloc_exit */:
        (*ext4_get_implied_cluster_alloc_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 181 /* ext4_get_reserved_cluster_alloc */:
        (*ext4_get_reserved_cluster_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 182 /* ext4_ind_map_blocks_enter */:
        (*ext4_ind_map_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 183 /* ext4_ind_map_blocks_exit */:
        (*ext4_ind_map_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 184 /* ext4_insert_range */:
        (*ext4_insert_range_).ParseFromArray(field.data(), field.size());
        break;
      case 185 /* ext4_invalidatepage */:
        (*ext4_invalidatepage_).ParseFromArray(field.data(), field.size());
        break;
      case 186 /* ext4_journal_start */:
        (*ext4_journal_start_).ParseFromArray(field.data(), field.size());
        break;
      case 187 /* ext4_journal_start_reserved */:
        (*ext4_journal_start_reserved_).ParseFromArray(field.data(), field.size());
        break;
      case 188 /* ext4_journalled_invalidatepage */:
        (*ext4_journalled_invalidatepage_).ParseFromArray(field.data(), field.size());
        break;
      case 189 /* ext4_journalled_write_end */:
        (*ext4_journalled_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 190 /* ext4_load_inode */:
        (*ext4_load_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 191 /* ext4_load_inode_bitmap */:
        (*ext4_load_inode_bitmap_).ParseFromArray(field.data(), field.size());
        break;
      case 192 /* ext4_mark_inode_dirty */:
        (*ext4_mark_inode_dirty_).ParseFromArray(field.data(), field.size());
        break;
      case 193 /* ext4_mb_bitmap_load */:
        (*ext4_mb_bitmap_load_).ParseFromArray(field.data(), field.size());
        break;
      case 194 /* ext4_mb_buddy_bitmap_load */:
        (*ext4_mb_buddy_bitmap_load_).ParseFromArray(field.data(), field.size());
        break;
      case 195 /* ext4_mb_discard_preallocations */:
        (*ext4_mb_discard_preallocations_).ParseFromArray(field.data(), field.size());
        break;
      case 196 /* ext4_mb_new_group_pa */:
        (*ext4_mb_new_group_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 197 /* ext4_mb_new_inode_pa */:
        (*ext4_mb_new_inode_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 198 /* ext4_mb_release_group_pa */:
        (*ext4_mb_release_group_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 199 /* ext4_mb_release_inode_pa */:
        (*ext4_mb_release_inode_pa_).ParseFromArray(field.data(), field.size());
        break;
      case 200 /* ext4_mballoc_alloc */:
        (*ext4_mballoc_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 201 /* ext4_mballoc_discard */:
        (*ext4_mballoc_discard_).ParseFromArray(field.data(), field.size());
        break;
      case 202 /* ext4_mballoc_free */:
        (*ext4_mballoc_free_).ParseFromArray(field.data(), field.size());
        break;
      case 203 /* ext4_mballoc_prealloc */:
        (*ext4_mballoc_prealloc_).ParseFromArray(field.data(), field.size());
        break;
      case 204 /* ext4_other_inode_update_time */:
        (*ext4_other_inode_update_time_).ParseFromArray(field.data(), field.size());
        break;
      case 205 /* ext4_punch_hole */:
        (*ext4_punch_hole_).ParseFromArray(field.data(), field.size());
        break;
      case 206 /* ext4_read_block_bitmap_load */:
        (*ext4_read_block_bitmap_load_).ParseFromArray(field.data(), field.size());
        break;
      case 207 /* ext4_readpage */:
        (*ext4_readpage_).ParseFromArray(field.data(), field.size());
        break;
      case 208 /* ext4_releasepage */:
        (*ext4_releasepage_).ParseFromArray(field.data(), field.size());
        break;
      case 209 /* ext4_remove_blocks */:
        (*ext4_remove_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 210 /* ext4_request_blocks */:
        (*ext4_request_blocks_).ParseFromArray(field.data(), field.size());
        break;
      case 211 /* ext4_request_inode */:
        (*ext4_request_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 212 /* ext4_sync_fs */:
        (*ext4_sync_fs_).ParseFromArray(field.data(), field.size());
        break;
      case 213 /* ext4_trim_all_free */:
        (*ext4_trim_all_free_).ParseFromArray(field.data(), field.size());
        break;
      case 214 /* ext4_trim_extent */:
        (*ext4_trim_extent_).ParseFromArray(field.data(), field.size());
        break;
      case 215 /* ext4_truncate_enter */:
        (*ext4_truncate_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 216 /* ext4_truncate_exit */:
        (*ext4_truncate_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 217 /* ext4_unlink_enter */:
        (*ext4_unlink_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 218 /* ext4_unlink_exit */:
        (*ext4_unlink_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 219 /* ext4_write_begin */:
        (*ext4_write_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 230 /* ext4_write_end */:
        (*ext4_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 231 /* ext4_writepage */:
        (*ext4_writepage_).ParseFromArray(field.data(), field.size());
        break;
      case 232 /* ext4_writepages */:
        (*ext4_writepages_).ParseFromArray(field.data(), field.size());
        break;
      case 233 /* ext4_writepages_result */:
        (*ext4_writepages_result_).ParseFromArray(field.data(), field.size());
        break;
      case 234 /* ext4_zero_range */:
        (*ext4_zero_range_).ParseFromArray(field.data(), field.size());
        break;
      case 235 /* task_newtask */:
        (*task_newtask_).ParseFromArray(field.data(), field.size());
        break;
      case 236 /* task_rename */:
        (*task_rename_).ParseFromArray(field.data(), field.size());
        break;
      case 237 /* sched_process_exec */:
        (*sched_process_exec_).ParseFromArray(field.data(), field.size());
        break;
      case 238 /* sched_process_exit */:
        (*sched_process_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 239 /* sched_process_fork */:
        (*sched_process_fork_).ParseFromArray(field.data(), field.size());
        break;
      case 240 /* sched_process_free */:
        (*sched_process_free_).ParseFromArray(field.data(), field.size());
        break;
      case 241 /* sched_process_hang */:
        (*sched_process_hang_).ParseFromArray(field.data(), field.size());
        break;
      case 242 /* sched_process_wait */:
        (*sched_process_wait_).ParseFromArray(field.data(), field.size());
        break;
      case 243 /* f2fs_do_submit_bio */:
        (*f2fs_do_submit_bio_).ParseFromArray(field.data(), field.size());
        break;
      case 244 /* f2fs_evict_inode */:
        (*f2fs_evict_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 245 /* f2fs_fallocate */:
        (*f2fs_fallocate_).ParseFromArray(field.data(), field.size());
        break;
      case 246 /* f2fs_get_data_block */:
        (*f2fs_get_data_block_).ParseFromArray(field.data(), field.size());
        break;
      case 247 /* f2fs_get_victim */:
        (*f2fs_get_victim_).ParseFromArray(field.data(), field.size());
        break;
      case 248 /* f2fs_iget */:
        (*f2fs_iget_).ParseFromArray(field.data(), field.size());
        break;
      case 249 /* f2fs_iget_exit */:
        (*f2fs_iget_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 250 /* f2fs_new_inode */:
        (*f2fs_new_inode_).ParseFromArray(field.data(), field.size());
        break;
      case 251 /* f2fs_readpage */:
        (*f2fs_readpage_).ParseFromArray(field.data(), field.size());
        break;
      case 252 /* f2fs_reserve_new_block */:
        (*f2fs_reserve_new_block_).ParseFromArray(field.data(), field.size());
        break;
      case 253 /* f2fs_set_page_dirty */:
        (*f2fs_set_page_dirty_).ParseFromArray(field.data(), field.size());
        break;
      case 254 /* f2fs_submit_write_page */:
        (*f2fs_submit_write_page_).ParseFromArray(field.data(), field.size());
        break;
      case 255 /* f2fs_sync_file_enter */:
        (*f2fs_sync_file_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 256 /* f2fs_sync_file_exit */:
        (*f2fs_sync_file_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 257 /* f2fs_sync_fs */:
        (*f2fs_sync_fs_).ParseFromArray(field.data(), field.size());
        break;
      case 258 /* f2fs_truncate */:
        (*f2fs_truncate_).ParseFromArray(field.data(), field.size());
        break;
      case 259 /* f2fs_truncate_blocks_enter */:
        (*f2fs_truncate_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 260 /* f2fs_truncate_blocks_exit */:
        (*f2fs_truncate_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 261 /* f2fs_truncate_data_blocks_range */:
        (*f2fs_truncate_data_blocks_range_).ParseFromArray(field.data(), field.size());
        break;
      case 262 /* f2fs_truncate_inode_blocks_enter */:
        (*f2fs_truncate_inode_blocks_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 263 /* f2fs_truncate_inode_blocks_exit */:
        (*f2fs_truncate_inode_blocks_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 264 /* f2fs_truncate_node */:
        (*f2fs_truncate_node_).ParseFromArray(field.data(), field.size());
        break;
      case 265 /* f2fs_truncate_nodes_enter */:
        (*f2fs_truncate_nodes_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 266 /* f2fs_truncate_nodes_exit */:
        (*f2fs_truncate_nodes_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 267 /* f2fs_truncate_partial_nodes */:
        (*f2fs_truncate_partial_nodes_).ParseFromArray(field.data(), field.size());
        break;
      case 268 /* f2fs_unlink_enter */:
        (*f2fs_unlink_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 269 /* f2fs_unlink_exit */:
        (*f2fs_unlink_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 270 /* f2fs_vm_page_mkwrite */:
        (*f2fs_vm_page_mkwrite_).ParseFromArray(field.data(), field.size());
        break;
      case 271 /* f2fs_write_begin */:
        (*f2fs_write_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 272 /* f2fs_write_checkpoint */:
        (*f2fs_write_checkpoint_).ParseFromArray(field.data(), field.size());
        break;
      case 273 /* f2fs_write_end */:
        (*f2fs_write_end_).ParseFromArray(field.data(), field.size());
        break;
      case 274 /* alloc_pages_iommu_end */:
        (*alloc_pages_iommu_end_).ParseFromArray(field.data(), field.size());
        break;
      case 275 /* alloc_pages_iommu_fail */:
        (*alloc_pages_iommu_fail_).ParseFromArray(field.data(), field.size());
        break;
      case 276 /* alloc_pages_iommu_start */:
        (*alloc_pages_iommu_start_).ParseFromArray(field.data(), field.size());
        break;
      case 277 /* alloc_pages_sys_end */:
        (*alloc_pages_sys_end_).ParseFromArray(field.data(), field.size());
        break;
      case 278 /* alloc_pages_sys_fail */:
        (*alloc_pages_sys_fail_).ParseFromArray(field.data(), field.size());
        break;
      case 279 /* alloc_pages_sys_start */:
        (*alloc_pages_sys_start_).ParseFromArray(field.data(), field.size());
        break;
      case 280 /* dma_alloc_contiguous_retry */:
        (*dma_alloc_contiguous_retry_).ParseFromArray(field.data(), field.size());
        break;
      case 281 /* iommu_map_range */:
        (*iommu_map_range_).ParseFromArray(field.data(), field.size());
        break;
      case 282 /* iommu_sec_ptbl_map_range_end */:
        (*iommu_sec_ptbl_map_range_end_).ParseFromArray(field.data(), field.size());
        break;
      case 283 /* iommu_sec_ptbl_map_range_start */:
        (*iommu_sec_ptbl_map_range_start_).ParseFromArray(field.data(), field.size());
        break;
      case 284 /* ion_alloc_buffer_end */:
        (*ion_alloc_buffer_end_).ParseFromArray(field.data(), field.size());
        break;
      case 285 /* ion_alloc_buffer_fail */:
        (*ion_alloc_buffer_fail_).ParseFromArray(field.data(), field.size());
        break;
      case 286 /* ion_alloc_buffer_fallback */:
        (*ion_alloc_buffer_fallback_).ParseFromArray(field.data(), field.size());
        break;
      case 287 /* ion_alloc_buffer_start */:
        (*ion_alloc_buffer_start_).ParseFromArray(field.data(), field.size());
        break;
      case 288 /* ion_cp_alloc_retry */:
        (*ion_cp_alloc_retry_).ParseFromArray(field.data(), field.size());
        break;
      case 289 /* ion_cp_secure_buffer_end */:
        (*ion_cp_secure_buffer_end_).ParseFromArray(field.data(), field.size());
        break;
      case 290 /* ion_cp_secure_buffer_start */:
        (*ion_cp_secure_buffer_start_).ParseFromArray(field.data(), field.size());
        break;
      case 291 /* ion_prefetching */:
        (*ion_prefetching_).ParseFromArray(field.data(), field.size());
        break;
      case 292 /* ion_secure_cma_add_to_pool_end */:
        (*ion_secure_cma_add_to_pool_end_).ParseFromArray(field.data(), field.size());
        break;
      case 293 /* ion_secure_cma_add_to_pool_start */:
        (*ion_secure_cma_add_to_pool_start_).ParseFromArray(field.data(), field.size());
        break;
      case 294 /* ion_secure_cma_allocate_end */:
        (*ion_secure_cma_allocate_end_).ParseFromArray(field.data(), field.size());
        break;
      case 295 /* ion_secure_cma_allocate_start */:
        (*ion_secure_cma_allocate_start_).ParseFromArray(field.data(), field.size());
        break;
      case 296 /* ion_secure_cma_shrink_pool_end */:
        (*ion_secure_cma_shrink_pool_end_).ParseFromArray(field.data(), field.size());
        break;
      case 297 /* ion_secure_cma_shrink_pool_start */:
        (*ion_secure_cma_shrink_pool_start_).ParseFromArray(field.data(), field.size());
        break;
      case 298 /* kfree */:
        (*kfree_).ParseFromArray(field.data(), field.size());
        break;
      case 299 /* kmalloc */:
        (*kmalloc_).ParseFromArray(field.data(), field.size());
        break;
      case 300 /* kmalloc_node */:
        (*kmalloc_node_).ParseFromArray(field.data(), field.size());
        break;
      case 301 /* kmem_cache_alloc */:
        (*kmem_cache_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 302 /* kmem_cache_alloc_node */:
        (*kmem_cache_alloc_node_).ParseFromArray(field.data(), field.size());
        break;
      case 303 /* kmem_cache_free */:
        (*kmem_cache_free_).ParseFromArray(field.data(), field.size());
        break;
      case 304 /* migrate_pages_end */:
        (*migrate_pages_end_).ParseFromArray(field.data(), field.size());
        break;
      case 305 /* migrate_pages_start */:
        (*migrate_pages_start_).ParseFromArray(field.data(), field.size());
        break;
      case 306 /* migrate_retry */:
        (*migrate_retry_).ParseFromArray(field.data(), field.size());
        break;
      case 307 /* mm_page_alloc */:
        (*mm_page_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 308 /* mm_page_alloc_extfrag */:
        (*mm_page_alloc_extfrag_).ParseFromArray(field.data(), field.size());
        break;
      case 309 /* mm_page_alloc_zone_locked */:
        (*mm_page_alloc_zone_locked_).ParseFromArray(field.data(), field.size());
        break;
      case 310 /* mm_page_free */:
        (*mm_page_free_).ParseFromArray(field.data(), field.size());
        break;
      case 311 /* mm_page_free_batched */:
        (*mm_page_free_batched_).ParseFromArray(field.data(), field.size());
        break;
      case 312 /* mm_page_pcpu_drain */:
        (*mm_page_pcpu_drain_).ParseFromArray(field.data(), field.size());
        break;
      case 313 /* rss_stat */:
        (*rss_stat_).ParseFromArray(field.data(), field.size());
        break;
      case 314 /* ion_heap_shrink */:
        (*ion_heap_shrink_).ParseFromArray(field.data(), field.size());
        break;
      case 315 /* ion_heap_grow */:
        (*ion_heap_grow_).ParseFromArray(field.data(), field.size());
        break;
      case 316 /* fence_init */:
        (*fence_init_).ParseFromArray(field.data(), field.size());
        break;
      case 317 /* fence_destroy */:
        (*fence_destroy_).ParseFromArray(field.data(), field.size());
        break;
      case 318 /* fence_enable_signal */:
        (*fence_enable_signal_).ParseFromArray(field.data(), field.size());
        break;
      case 319 /* fence_signaled */:
        (*fence_signaled_).ParseFromArray(field.data(), field.size());
        break;
      case 320 /* clk_enable */:
        (*clk_enable_).ParseFromArray(field.data(), field.size());
        break;
      case 321 /* clk_disable */:
        (*clk_disable_).ParseFromArray(field.data(), field.size());
        break;
      case 322 /* clk_set_rate */:
        (*clk_set_rate_).ParseFromArray(field.data(), field.size());
        break;
      case 323 /* binder_transaction_alloc_buf */:
        (*binder_transaction_alloc_buf_).ParseFromArray(field.data(), field.size());
        break;
      case 324 /* signal_deliver */:
        (*signal_deliver_).ParseFromArray(field.data(), field.size());
        break;
      case 325 /* signal_generate */:
        (*signal_generate_).ParseFromArray(field.data(), field.size());
        break;
      case 326 /* oom_score_adj_update */:
        (*oom_score_adj_update_).ParseFromArray(field.data(), field.size());
        break;
      case 327 /* generic */:
        (*generic_).ParseFromArray(field.data(), field.size());
        break;
      case 328 /* mm_event_record */:
        (*mm_event_record_).ParseFromArray(field.data(), field.size());
        break;
      case 329 /* sys_enter */:
        (*sys_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 330 /* sys_exit */:
        (*sys_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 331 /* zero */:
        (*zero_).ParseFromArray(field.data(), field.size());
        break;
      case 332 /* gpu_frequency */:
        (*gpu_frequency_).ParseFromArray(field.data(), field.size());
        break;
      case 333 /* sde_tracing_mark_write */:
        (*sde_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 334 /* mark_victim */:
        (*mark_victim_).ParseFromArray(field.data(), field.size());
        break;
      case 335 /* ion_stat */:
        (*ion_stat_).ParseFromArray(field.data(), field.size());
        break;
      case 336 /* ion_buffer_create */:
        (*ion_buffer_create_).ParseFromArray(field.data(), field.size());
        break;
      case 337 /* ion_buffer_destroy */:
        (*ion_buffer_destroy_).ParseFromArray(field.data(), field.size());
        break;
      case 338 /* scm_call_start */:
        (*scm_call_start_).ParseFromArray(field.data(), field.size());
        break;
      case 339 /* scm_call_end */:
        (*scm_call_end_).ParseFromArray(field.data(), field.size());
        break;
      case 340 /* gpu_mem_total */:
        (*gpu_mem_total_).ParseFromArray(field.data(), field.size());
        break;
      case 341 /* thermal_temperature */:
        (*thermal_temperature_).ParseFromArray(field.data(), field.size());
        break;
      case 342 /* cdev_update */:
        (*cdev_update_).ParseFromArray(field.data(), field.size());
        break;
      case 343 /* cpuhp_exit */:
        (*cpuhp_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 344 /* cpuhp_multi_enter */:
        (*cpuhp_multi_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 345 /* cpuhp_enter */:
        (*cpuhp_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 346 /* cpuhp_latency */:
        (*cpuhp_latency_).ParseFromArray(field.data(), field.size());
        break;
      case 347 /* fastrpc_dma_stat */:
        (*fastrpc_dma_stat_).ParseFromArray(field.data(), field.size());
        break;
      case 348 /* dpu_tracing_mark_write */:
        (*dpu_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 349 /* g2d_tracing_mark_write */:
        (*g2d_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 350 /* mali_tracing_mark_write */:
        (*mali_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 351 /* dma_heap_stat */:
        (*dma_heap_stat_).ParseFromArray(field.data(), field.size());
        break;
      case 352 /* cpuhp_pause */:
        (*cpuhp_pause_).ParseFromArray(field.data(), field.size());
        break;
      case 353 /* sched_pi_setprio */:
        (*sched_pi_setprio_).ParseFromArray(field.data(), field.size());
        break;
      case 354 /* sde_sde_evtlog */:
        (*sde_sde_evtlog_).ParseFromArray(field.data(), field.size());
        break;
      case 355 /* sde_sde_perf_calc_crtc */:
        (*sde_sde_perf_calc_crtc_).ParseFromArray(field.data(), field.size());
        break;
      case 356 /* sde_sde_perf_crtc_update */:
        (*sde_sde_perf_crtc_update_).ParseFromArray(field.data(), field.size());
        break;
      case 357 /* sde_sde_perf_set_qos_luts */:
        (*sde_sde_perf_set_qos_luts_).ParseFromArray(field.data(), field.size());
        break;
      case 358 /* sde_sde_perf_update_bus */:
        (*sde_sde_perf_update_bus_).ParseFromArray(field.data(), field.size());
        break;
      case 359 /* rss_stat_throttled */:
        (*rss_stat_throttled_).ParseFromArray(field.data(), field.size());
        break;
      case 360 /* netif_receive_skb */:
        (*netif_receive_skb_).ParseFromArray(field.data(), field.size());
        break;
      case 361 /* net_dev_xmit */:
        (*net_dev_xmit_).ParseFromArray(field.data(), field.size());
        break;
      case 362 /* inet_sock_set_state */:
        (*inet_sock_set_state_).ParseFromArray(field.data(), field.size());
        break;
      case 363 /* tcp_retransmit_skb */:
        (*tcp_retransmit_skb_).ParseFromArray(field.data(), field.size());
        break;
      case 364 /* cros_ec_sensorhub_data */:
        (*cros_ec_sensorhub_data_).ParseFromArray(field.data(), field.size());
        break;
      case 365 /* napi_gro_receive_entry */:
        (*napi_gro_receive_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 366 /* napi_gro_receive_exit */:
        (*napi_gro_receive_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 367 /* kfree_skb */:
        (*kfree_skb_).ParseFromArray(field.data(), field.size());
        break;
      case 368 /* kvm_access_fault */:
        (*kvm_access_fault_).ParseFromArray(field.data(), field.size());
        break;
      case 369 /* kvm_ack_irq */:
        (*kvm_ack_irq_).ParseFromArray(field.data(), field.size());
        break;
      case 370 /* kvm_age_hva */:
        (*kvm_age_hva_).ParseFromArray(field.data(), field.size());
        break;
      case 371 /* kvm_age_page */:
        (*kvm_age_page_).ParseFromArray(field.data(), field.size());
        break;
      case 372 /* kvm_arm_clear_debug */:
        (*kvm_arm_clear_debug_).ParseFromArray(field.data(), field.size());
        break;
      case 373 /* kvm_arm_set_dreg32 */:
        (*kvm_arm_set_dreg32_).ParseFromArray(field.data(), field.size());
        break;
      case 374 /* kvm_arm_set_regset */:
        (*kvm_arm_set_regset_).ParseFromArray(field.data(), field.size());
        break;
      case 375 /* kvm_arm_setup_debug */:
        (*kvm_arm_setup_debug_).ParseFromArray(field.data(), field.size());
        break;
      case 376 /* kvm_entry */:
        (*kvm_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 377 /* kvm_exit */:
        (*kvm_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 378 /* kvm_fpu */:
        (*kvm_fpu_).ParseFromArray(field.data(), field.size());
        break;
      case 379 /* kvm_get_timer_map */:
        (*kvm_get_timer_map_).ParseFromArray(field.data(), field.size());
        break;
      case 380 /* kvm_guest_fault */:
        (*kvm_guest_fault_).ParseFromArray(field.data(), field.size());
        break;
      case 381 /* kvm_handle_sys_reg */:
        (*kvm_handle_sys_reg_).ParseFromArray(field.data(), field.size());
        break;
      case 382 /* kvm_hvc_arm64 */:
        (*kvm_hvc_arm64_).ParseFromArray(field.data(), field.size());
        break;
      case 383 /* kvm_irq_line */:
        (*kvm_irq_line_).ParseFromArray(field.data(), field.size());
        break;
      case 384 /* kvm_mmio */:
        (*kvm_mmio_).ParseFromArray(field.data(), field.size());
        break;
      case 385 /* kvm_mmio_emulate */:
        (*kvm_mmio_emulate_).ParseFromArray(field.data(), field.size());
        break;
      case 386 /* kvm_set_guest_debug */:
        (*kvm_set_guest_debug_).ParseFromArray(field.data(), field.size());
        break;
      case 387 /* kvm_set_irq */:
        (*kvm_set_irq_).ParseFromArray(field.data(), field.size());
        break;
      case 388 /* kvm_set_spte_hva */:
        (*kvm_set_spte_hva_).ParseFromArray(field.data(), field.size());
        break;
      case 389 /* kvm_set_way_flush */:
        (*kvm_set_way_flush_).ParseFromArray(field.data(), field.size());
        break;
      case 390 /* kvm_sys_access */:
        (*kvm_sys_access_).ParseFromArray(field.data(), field.size());
        break;
      case 391 /* kvm_test_age_hva */:
        (*kvm_test_age_hva_).ParseFromArray(field.data(), field.size());
        break;
      case 392 /* kvm_timer_emulate */:
        (*kvm_timer_emulate_).ParseFromArray(field.data(), field.size());
        break;
      case 393 /* kvm_timer_hrtimer_expire */:
        (*kvm_timer_hrtimer_expire_).ParseFromArray(field.data(), field.size());
        break;
      case 394 /* kvm_timer_restore_state */:
        (*kvm_timer_restore_state_).ParseFromArray(field.data(), field.size());
        break;
      case 395 /* kvm_timer_save_state */:
        (*kvm_timer_save_state_).ParseFromArray(field.data(), field.size());
        break;
      case 396 /* kvm_timer_update_irq */:
        (*kvm_timer_update_irq_).ParseFromArray(field.data(), field.size());
        break;
      case 397 /* kvm_toggle_cache */:
        (*kvm_toggle_cache_).ParseFromArray(field.data(), field.size());
        break;
      case 398 /* kvm_unmap_hva_range */:
        (*kvm_unmap_hva_range_).ParseFromArray(field.data(), field.size());
        break;
      case 399 /* kvm_userspace_exit */:
        (*kvm_userspace_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 400 /* kvm_vcpu_wakeup */:
        (*kvm_vcpu_wakeup_).ParseFromArray(field.data(), field.size());
        break;
      case 401 /* kvm_wfx_arm64 */:
        (*kvm_wfx_arm64_).ParseFromArray(field.data(), field.size());
        break;
      case 402 /* trap_reg */:
        (*trap_reg_).ParseFromArray(field.data(), field.size());
        break;
      case 403 /* vgic_update_irq_pending */:
        (*vgic_update_irq_pending_).ParseFromArray(field.data(), field.size());
        break;
      case 404 /* wakeup_source_activate */:
        (*wakeup_source_activate_).ParseFromArray(field.data(), field.size());
        break;
      case 405 /* wakeup_source_deactivate */:
        (*wakeup_source_deactivate_).ParseFromArray(field.data(), field.size());
        break;
      case 406 /* ufshcd_command */:
        (*ufshcd_command_).ParseFromArray(field.data(), field.size());
        break;
      case 407 /* ufshcd_clk_gating */:
        (*ufshcd_clk_gating_).ParseFromArray(field.data(), field.size());
        break;
      case 408 /* console */:
        (*console_).ParseFromArray(field.data(), field.size());
        break;
      case 409 /* drm_vblank_event */:
        (*drm_vblank_event_).ParseFromArray(field.data(), field.size());
        break;
      case 410 /* drm_vblank_event_delivered */:
        (*drm_vblank_event_delivered_).ParseFromArray(field.data(), field.size());
        break;
      case 411 /* drm_sched_job */:
        (*drm_sched_job_).ParseFromArray(field.data(), field.size());
        break;
      case 412 /* drm_run_job */:
        (*drm_run_job_).ParseFromArray(field.data(), field.size());
        break;
      case 413 /* drm_sched_process_job */:
        (*drm_sched_process_job_).ParseFromArray(field.data(), field.size());
        break;
      case 414 /* dma_fence_init */:
        (*dma_fence_init_).ParseFromArray(field.data(), field.size());
        break;
      case 415 /* dma_fence_emit */:
        (*dma_fence_emit_).ParseFromArray(field.data(), field.size());
        break;
      case 416 /* dma_fence_signaled */:
        (*dma_fence_signaled_).ParseFromArray(field.data(), field.size());
        break;
      case 417 /* dma_fence_wait_start */:
        (*dma_fence_wait_start_).ParseFromArray(field.data(), field.size());
        break;
      case 418 /* dma_fence_wait_end */:
        (*dma_fence_wait_end_).ParseFromArray(field.data(), field.size());
        break;
      case 419 /* f2fs_iostat */:
        (*f2fs_iostat_).ParseFromArray(field.data(), field.size());
        break;
      case 420 /* f2fs_iostat_latency */:
        (*f2fs_iostat_latency_).ParseFromArray(field.data(), field.size());
        break;
      case 421 /* sched_cpu_util_cfs */:
        (*sched_cpu_util_cfs_).ParseFromArray(field.data(), field.size());
        break;
      case 422 /* v4l2_qbuf */:
        (*v4l2_qbuf_).ParseFromArray(field.data(), field.size());
        break;
      case 423 /* v4l2_dqbuf */:
        (*v4l2_dqbuf_).ParseFromArray(field.data(), field.size());
        break;
      case 424 /* vb2_v4l2_buf_queue */:
        (*vb2_v4l2_buf_queue_).ParseFromArray(field.data(), field.size());
        break;
      case 425 /* vb2_v4l2_buf_done */:
        (*vb2_v4l2_buf_done_).ParseFromArray(field.data(), field.size());
        break;
      case 426 /* vb2_v4l2_qbuf */:
        (*vb2_v4l2_qbuf_).ParseFromArray(field.data(), field.size());
        break;
      case 427 /* vb2_v4l2_dqbuf */:
        (*vb2_v4l2_dqbuf_).ParseFromArray(field.data(), field.size());
        break;
      case 428 /* dsi_cmd_fifo_status */:
        (*dsi_cmd_fifo_status_).ParseFromArray(field.data(), field.size());
        break;
      case 429 /* dsi_rx */:
        (*dsi_rx_).ParseFromArray(field.data(), field.size());
        break;
      case 430 /* dsi_tx */:
        (*dsi_tx_).ParseFromArray(field.data(), field.size());
        break;
      case 431 /* android_fs_dataread_end */:
        (*android_fs_dataread_end_).ParseFromArray(field.data(), field.size());
        break;
      case 432 /* android_fs_dataread_start */:
        (*android_fs_dataread_start_).ParseFromArray(field.data(), field.size());
        break;
      case 433 /* android_fs_datawrite_end */:
        (*android_fs_datawrite_end_).ParseFromArray(field.data(), field.size());
        break;
      case 434 /* android_fs_datawrite_start */:
        (*android_fs_datawrite_start_).ParseFromArray(field.data(), field.size());
        break;
      case 435 /* android_fs_fsync_end */:
        (*android_fs_fsync_end_).ParseFromArray(field.data(), field.size());
        break;
      case 436 /* android_fs_fsync_start */:
        (*android_fs_fsync_start_).ParseFromArray(field.data(), field.size());
        break;
      case 437 /* funcgraph_entry */:
        (*funcgraph_entry_).ParseFromArray(field.data(), field.size());
        break;
      case 438 /* funcgraph_exit */:
        (*funcgraph_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 439 /* virtio_video_cmd */:
        (*virtio_video_cmd_).ParseFromArray(field.data(), field.size());
        break;
      case 440 /* virtio_video_cmd_done */:
        (*virtio_video_cmd_done_).ParseFromArray(field.data(), field.size());
        break;
      case 441 /* virtio_video_resource_queue */:
        (*virtio_video_resource_queue_).ParseFromArray(field.data(), field.size());
        break;
      case 442 /* virtio_video_resource_queue_done */:
        (*virtio_video_resource_queue_done_).ParseFromArray(field.data(), field.size());
        break;
      case 443 /* mm_shrink_slab_start */:
        (*mm_shrink_slab_start_).ParseFromArray(field.data(), field.size());
        break;
      case 444 /* mm_shrink_slab_end */:
        (*mm_shrink_slab_end_).ParseFromArray(field.data(), field.size());
        break;
      case 445 /* trusty_smc */:
        (*trusty_smc_).ParseFromArray(field.data(), field.size());
        break;
      case 446 /* trusty_smc_done */:
        (*trusty_smc_done_).ParseFromArray(field.data(), field.size());
        break;
      case 447 /* trusty_std_call32 */:
        (*trusty_std_call32_).ParseFromArray(field.data(), field.size());
        break;
      case 448 /* trusty_std_call32_done */:
        (*trusty_std_call32_done_).ParseFromArray(field.data(), field.size());
        break;
      case 449 /* trusty_share_memory */:
        (*trusty_share_memory_).ParseFromArray(field.data(), field.size());
        break;
      case 450 /* trusty_share_memory_done */:
        (*trusty_share_memory_done_).ParseFromArray(field.data(), field.size());
        break;
      case 451 /* trusty_reclaim_memory */:
        (*trusty_reclaim_memory_).ParseFromArray(field.data(), field.size());
        break;
      case 452 /* trusty_reclaim_memory_done */:
        (*trusty_reclaim_memory_done_).ParseFromArray(field.data(), field.size());
        break;
      case 453 /* trusty_irq */:
        (*trusty_irq_).ParseFromArray(field.data(), field.size());
        break;
      case 454 /* trusty_ipc_handle_event */:
        (*trusty_ipc_handle_event_).ParseFromArray(field.data(), field.size());
        break;
      case 455 /* trusty_ipc_connect */:
        (*trusty_ipc_connect_).ParseFromArray(field.data(), field.size());
        break;
      case 456 /* trusty_ipc_connect_end */:
        (*trusty_ipc_connect_end_).ParseFromArray(field.data(), field.size());
        break;
      case 457 /* trusty_ipc_write */:
        (*trusty_ipc_write_).ParseFromArray(field.data(), field.size());
        break;
      case 458 /* trusty_ipc_poll */:
        (*trusty_ipc_poll_).ParseFromArray(field.data(), field.size());
        break;
      case 460 /* trusty_ipc_read */:
        (*trusty_ipc_read_).ParseFromArray(field.data(), field.size());
        break;
      case 461 /* trusty_ipc_read_end */:
        (*trusty_ipc_read_end_).ParseFromArray(field.data(), field.size());
        break;
      case 462 /* trusty_ipc_rx */:
        (*trusty_ipc_rx_).ParseFromArray(field.data(), field.size());
        break;
      case 464 /* trusty_enqueue_nop */:
        (*trusty_enqueue_nop_).ParseFromArray(field.data(), field.size());
        break;
      case 465 /* cma_alloc_start */:
        (*cma_alloc_start_).ParseFromArray(field.data(), field.size());
        break;
      case 466 /* cma_alloc_info */:
        (*cma_alloc_info_).ParseFromArray(field.data(), field.size());
        break;
      case 467 /* lwis_tracing_mark_write */:
        (*lwis_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 468 /* virtio_gpu_cmd_queue */:
        (*virtio_gpu_cmd_queue_).ParseFromArray(field.data(), field.size());
        break;
      case 469 /* virtio_gpu_cmd_response */:
        (*virtio_gpu_cmd_response_).ParseFromArray(field.data(), field.size());
        break;
      case 470 /* mali_mali_kcpu_cqs_set */:
        (*mali_mali_kcpu_cqs_set_).ParseFromArray(field.data(), field.size());
        break;
      case 471 /* mali_mali_kcpu_cqs_wait_start */:
        (*mali_mali_kcpu_cqs_wait_start_).ParseFromArray(field.data(), field.size());
        break;
      case 472 /* mali_mali_kcpu_cqs_wait_end */:
        (*mali_mali_kcpu_cqs_wait_end_).ParseFromArray(field.data(), field.size());
        break;
      case 473 /* mali_mali_kcpu_fence_signal */:
        (*mali_mali_kcpu_fence_signal_).ParseFromArray(field.data(), field.size());
        break;
      case 474 /* mali_mali_kcpu_fence_wait_start */:
        (*mali_mali_kcpu_fence_wait_start_).ParseFromArray(field.data(), field.size());
        break;
      case 475 /* mali_mali_kcpu_fence_wait_end */:
        (*mali_mali_kcpu_fence_wait_end_).ParseFromArray(field.data(), field.size());
        break;
      case 476 /* hyp_enter */:
        (*hyp_enter_).ParseFromArray(field.data(), field.size());
        break;
      case 477 /* hyp_exit */:
        (*hyp_exit_).ParseFromArray(field.data(), field.size());
        break;
      case 478 /* host_hcall */:
        (*host_hcall_).ParseFromArray(field.data(), field.size());
        break;
      case 479 /* host_smc */:
        (*host_smc_).ParseFromArray(field.data(), field.size());
        break;
      case 480 /* host_mem_abort */:
        (*host_mem_abort_).ParseFromArray(field.data(), field.size());
        break;
      case 481 /* suspend_resume_minimal */:
        (*suspend_resume_minimal_).ParseFromArray(field.data(), field.size());
        break;
      case 482 /* mali_mali_csf_interrupt_start */:
        (*mali_mali_csf_interrupt_start_).ParseFromArray(field.data(), field.size());
        break;
      case 483 /* mali_mali_csf_interrupt_end */:
        (*mali_mali_csf_interrupt_end_).ParseFromArray(field.data(), field.size());
        break;
      case 484 /* samsung_tracing_mark_write */:
        (*samsung_tracing_mark_write_).ParseFromArray(field.data(), field.size());
        break;
      case 485 /* binder_command */:
        (*binder_command_).ParseFromArray(field.data(), field.size());
        break;
      case 486 /* binder_return */:
        (*binder_return_).ParseFromArray(field.data(), field.size());
        break;
      case 487 /* sched_switch_with_ctrs */:
        (*sched_switch_with_ctrs_).ParseFromArray(field.data(), field.size());
        break;
      case 488 /* gpu_work_period */:
        (*gpu_work_period_).ParseFromArray(field.data(), field.size());
        break;
      case 489 /* rpm_status */:
        (*rpm_status_).ParseFromArray(field.data(), field.size());
        break;
      case 490 /* panel_write_generic */:
        (*panel_write_generic_).ParseFromArray(field.data(), field.size());
        break;
      case 491 /* sched_migrate_task */:
        (*sched_migrate_task_).ParseFromArray(field.data(), field.size());
        break;
      case 492 /* dpu_dsi_cmd_fifo_status */:
        (*dpu_dsi_cmd_fifo_status_).ParseFromArray(field.data(), field.size());
        break;
      case 493 /* dpu_dsi_rx */:
        (*dpu_dsi_rx_).ParseFromArray(field.data(), field.size());
        break;
      case 494 /* dpu_dsi_tx */:
        (*dpu_dsi_tx_).ParseFromArray(field.data(), field.size());
        break;
      case 495 /* f2fs_background_gc */:
        (*f2fs_background_gc_).ParseFromArray(field.data(), field.size());
        break;
      case 496 /* f2fs_gc_begin */:
        (*f2fs_gc_begin_).ParseFromArray(field.data(), field.size());
        break;
      case 497 /* f2fs_gc_end */:
        (*f2fs_gc_end_).ParseFromArray(field.data(), field.size());
        break;
      case 498 /* fastrpc_dma_free */:
        (*fastrpc_dma_free_).ParseFromArray(field.data(), field.size());
        break;
      case 499 /* fastrpc_dma_alloc */:
        (*fastrpc_dma_alloc_).ParseFromArray(field.data(), field.size());
        break;
      case 500 /* fastrpc_dma_unmap */:
        (*fastrpc_dma_unmap_).ParseFromArray(field.data(), field.size());
        break;
      case 501 /* fastrpc_dma_map */:
        (*fastrpc_dma_map_).ParseFromArray(field.data(), field.size());
        break;
      case 502 /* google_icc_event */:
        (*google_icc_event_).ParseFromArray(field.data(), field.size());
        break;
      case 503 /* google_irm_event */:
        (*google_irm_event_).ParseFromArray(field.data(), field.size());
        break;
      case 504 /* device_pm_callback_start */:
        (*device_pm_callback_start_).ParseFromArray(field.data(), field.size());
        break;
      case 505 /* device_pm_callback_end */:
        (*device_pm_callback_end_).ParseFromArray(field.data(), field.size());
        break;
      case 506 /* thermal_exynos_acpm_bulk */:
        (*thermal_exynos_acpm_bulk_).ParseFromArray(field.data(), field.size());
        break;
      case 507 /* thermal_exynos_acpm_high_overhead */:
        (*thermal_exynos_acpm_high_overhead_).ParseFromArray(field.data(), field.size());
        break;
      case 508 /* dcvsh_freq */:
        (*dcvsh_freq_).ParseFromArray(field.data(), field.size());
        break;
      case 509 /* kgsl_gpu_frequency */:
        (*kgsl_gpu_frequency_).ParseFromArray(field.data(), field.size());
        break;
      case 510 /* mali_mali_pm_mcu_hctl_cores_down_scale_notify_pend */:
        (*mali_mali_pm_mcu_hctl_cores_down_scale_notify_pend_).ParseFromArray(field.data(), field.size());
        break;
      case 511 /* mali_mali_pm_mcu_hctl_cores_notify_pend */:
        (*mali_mali_pm_mcu_hctl_cores_notify_pend_).ParseFromArray(field.data(), field.size());
        break;
      case 512 /* mali_mali_pm_mcu_hctl_core_inactive_pend */:
        (*mali_mali_pm_mcu_hctl_core_inactive_pend_).ParseFromArray(field.data(), field.size());
        break;
      case 513 /* mali_mali_pm_mcu_hctl_mcu_on_recheck */:
        (*mali_mali_pm_mcu_hctl_mcu_on_recheck_).ParseFromArray(field.data(), field.size());
        break;
      case 514 /* mali_mali_pm_mcu_hctl_shaders_core_off_pend */:
        (*mali_mali_pm_mcu_hctl_shaders_core_off_pend_).ParseFromArray(field.data(), field.size());
        break;
      case 515 /* mali_mali_pm_mcu_hctl_shaders_pend_off */:
        (*mali_mali_pm_mcu_hctl_shaders_pend_off_).ParseFromArray(field.data(), field.size());
        break;
      case 516 /* mali_mali_pm_mcu_hctl_shaders_pend_on */:
        (*mali_mali_pm_mcu_hctl_shaders_pend_on_).ParseFromArray(field.data(), field.size());
        break;
      case 517 /* mali_mali_pm_mcu_hctl_shaders_ready_off */:
        (*mali_mali_pm_mcu_hctl_shaders_ready_off_).ParseFromArray(field.data(), field.size());
        break;
      case 518 /* mali_mali_pm_mcu_in_sleep */:
        (*mali_mali_pm_mcu_in_sleep_).ParseFromArray(field.data(), field.size());
        break;
      case 519 /* mali_mali_pm_mcu_off */:
        (*mali_mali_pm_mcu_off_).ParseFromArray(field.data(), field.size());
        break;
      case 520 /* mali_mali_pm_mcu_on */:
        (*mali_mali_pm_mcu_on_).ParseFromArray(field.data(), field.size());
        break;
      case 521 /* mali_mali_pm_mcu_on_core_attr_update_pend */:
        (*mali_mali_pm_mcu_on_core_attr_update_pend_).ParseFromArray(field.data(), field.size());
        break;
      case 522 /* mali_mali_pm_mcu_on_glb_reinit_pend */:
        (*mali_mali_pm_mcu_on_glb_reinit_pend_).ParseFromArray(field.data(), field.size());
        break;
      case 523 /* mali_mali_pm_mcu_on_halt */:
        (*mali_mali_pm_mcu_on_halt_).ParseFromArray(field.data(), field.size());
        break;
      case 524 /* mali_mali_pm_mcu_on_hwcnt_disable */:
        (*mali_mali_pm_mcu_on_hwcnt_disable_).ParseFromArray(field.data(), field.size());
        break;
      case 525 /* mali_mali_pm_mcu_on_hwcnt_enable */:
        (*mali_mali_pm_mcu_on_hwcnt_enable_).ParseFromArray(field.data(), field.size());
        break;
      case 526 /* mali_mali_pm_mcu_on_pend_halt */:
        (*mali_mali_pm_mcu_on_pend_halt_).ParseFromArray(field.data(), field.size());
        break;
      case 527 /* mali_mali_pm_mcu_on_pend_sleep */:
        (*mali_mali_pm_mcu_on_pend_sleep_).ParseFromArray(field.data(), field.size());
        break;
      case 528 /* mali_mali_pm_mcu_on_sleep_initiate */:
        (*mali_mali_pm_mcu_on_sleep_initiate_).ParseFromArray(field.data(), field.size());
        break;
      case 529 /* mali_mali_pm_mcu_pend_off */:
        (*mali_mali_pm_mcu_pend_off_).ParseFromArray(field.data(), field.size());
        break;
      case 530 /* mali_mali_pm_mcu_pend_on_reload */:
        (*mali_mali_pm_mcu_pend_on_reload_).ParseFromArray(field.data(), field.size());
        break;
      case 531 /* mali_mali_pm_mcu_power_down */:
        (*mali_mali_pm_mcu_power_down_).ParseFromArray(field.data(), field.size());
        break;
      case 532 /* mali_mali_pm_mcu_reset_wait */:
        (*mali_mali_pm_mcu_reset_wait_).ParseFromArray(field.data(), field.size());
        break;
      case 533 /* bcl_irq_trigger */:
        (*bcl_irq_trigger_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: timestamp
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, timestamp_, msg);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, pid_, msg);
  }

  // Field 5: common_flags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, common_flags_, msg);
  }

  // Field 3: print
  if (_has_field_[3]) {
    (*print_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: sched_switch
  if (_has_field_[4]) {
    (*sched_switch_).Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 11: cpu_frequency
  if (_has_field_[11]) {
    (*cpu_frequency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 12: cpu_frequency_limits
  if (_has_field_[12]) {
    (*cpu_frequency_limits_).Serialize(msg->BeginNestedMessage<::protozero::Message>(12));
  }

  // Field 13: cpu_idle
  if (_has_field_[13]) {
    (*cpu_idle_).Serialize(msg->BeginNestedMessage<::protozero::Message>(13));
  }

  // Field 14: clock_enable
  if (_has_field_[14]) {
    (*clock_enable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(14));
  }

  // Field 15: clock_disable
  if (_has_field_[15]) {
    (*clock_disable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(15));
  }

  // Field 16: clock_set_rate
  if (_has_field_[16]) {
    (*clock_set_rate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(16));
  }

  // Field 17: sched_wakeup
  if (_has_field_[17]) {
    (*sched_wakeup_).Serialize(msg->BeginNestedMessage<::protozero::Message>(17));
  }

  // Field 18: sched_blocked_reason
  if (_has_field_[18]) {
    (*sched_blocked_reason_).Serialize(msg->BeginNestedMessage<::protozero::Message>(18));
  }

  // Field 19: sched_cpu_hotplug
  if (_has_field_[19]) {
    (*sched_cpu_hotplug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(19));
  }

  // Field 20: sched_waking
  if (_has_field_[20]) {
    (*sched_waking_).Serialize(msg->BeginNestedMessage<::protozero::Message>(20));
  }

  // Field 21: ipi_entry
  if (_has_field_[21]) {
    (*ipi_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(21));
  }

  // Field 22: ipi_exit
  if (_has_field_[22]) {
    (*ipi_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(22));
  }

  // Field 23: ipi_raise
  if (_has_field_[23]) {
    (*ipi_raise_).Serialize(msg->BeginNestedMessage<::protozero::Message>(23));
  }

  // Field 24: softirq_entry
  if (_has_field_[24]) {
    (*softirq_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(24));
  }

  // Field 25: softirq_exit
  if (_has_field_[25]) {
    (*softirq_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(25));
  }

  // Field 26: softirq_raise
  if (_has_field_[26]) {
    (*softirq_raise_).Serialize(msg->BeginNestedMessage<::protozero::Message>(26));
  }

  // Field 27: i2c_read
  if (_has_field_[27]) {
    (*i2c_read_).Serialize(msg->BeginNestedMessage<::protozero::Message>(27));
  }

  // Field 28: i2c_write
  if (_has_field_[28]) {
    (*i2c_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(28));
  }

  // Field 29: i2c_result
  if (_has_field_[29]) {
    (*i2c_result_).Serialize(msg->BeginNestedMessage<::protozero::Message>(29));
  }

  // Field 30: i2c_reply
  if (_has_field_[30]) {
    (*i2c_reply_).Serialize(msg->BeginNestedMessage<::protozero::Message>(30));
  }

  // Field 31: smbus_read
  if (_has_field_[31]) {
    (*smbus_read_).Serialize(msg->BeginNestedMessage<::protozero::Message>(31));
  }

  // Field 32: smbus_write
  if (_has_field_[32]) {
    (*smbus_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(32));
  }

  // Field 33: smbus_result
  if (_has_field_[33]) {
    (*smbus_result_).Serialize(msg->BeginNestedMessage<::protozero::Message>(33));
  }

  // Field 34: smbus_reply
  if (_has_field_[34]) {
    (*smbus_reply_).Serialize(msg->BeginNestedMessage<::protozero::Message>(34));
  }

  // Field 35: lowmemory_kill
  if (_has_field_[35]) {
    (*lowmemory_kill_).Serialize(msg->BeginNestedMessage<::protozero::Message>(35));
  }

  // Field 36: irq_handler_entry
  if (_has_field_[36]) {
    (*irq_handler_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(36));
  }

  // Field 37: irq_handler_exit
  if (_has_field_[37]) {
    (*irq_handler_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(37));
  }

  // Field 38: sync_pt
  if (_has_field_[38]) {
    (*sync_pt_).Serialize(msg->BeginNestedMessage<::protozero::Message>(38));
  }

  // Field 39: sync_timeline
  if (_has_field_[39]) {
    (*sync_timeline_).Serialize(msg->BeginNestedMessage<::protozero::Message>(39));
  }

  // Field 40: sync_wait
  if (_has_field_[40]) {
    (*sync_wait_).Serialize(msg->BeginNestedMessage<::protozero::Message>(40));
  }

  // Field 41: ext4_da_write_begin
  if (_has_field_[41]) {
    (*ext4_da_write_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(41));
  }

  // Field 42: ext4_da_write_end
  if (_has_field_[42]) {
    (*ext4_da_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(42));
  }

  // Field 43: ext4_sync_file_enter
  if (_has_field_[43]) {
    (*ext4_sync_file_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(43));
  }

  // Field 44: ext4_sync_file_exit
  if (_has_field_[44]) {
    (*ext4_sync_file_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(44));
  }

  // Field 45: block_rq_issue
  if (_has_field_[45]) {
    (*block_rq_issue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(45));
  }

  // Field 46: mm_vmscan_direct_reclaim_begin
  if (_has_field_[46]) {
    (*mm_vmscan_direct_reclaim_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(46));
  }

  // Field 47: mm_vmscan_direct_reclaim_end
  if (_has_field_[47]) {
    (*mm_vmscan_direct_reclaim_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(47));
  }

  // Field 48: mm_vmscan_kswapd_wake
  if (_has_field_[48]) {
    (*mm_vmscan_kswapd_wake_).Serialize(msg->BeginNestedMessage<::protozero::Message>(48));
  }

  // Field 49: mm_vmscan_kswapd_sleep
  if (_has_field_[49]) {
    (*mm_vmscan_kswapd_sleep_).Serialize(msg->BeginNestedMessage<::protozero::Message>(49));
  }

  // Field 50: binder_transaction
  if (_has_field_[50]) {
    (*binder_transaction_).Serialize(msg->BeginNestedMessage<::protozero::Message>(50));
  }

  // Field 51: binder_transaction_received
  if (_has_field_[51]) {
    (*binder_transaction_received_).Serialize(msg->BeginNestedMessage<::protozero::Message>(51));
  }

  // Field 52: binder_set_priority
  if (_has_field_[52]) {
    (*binder_set_priority_).Serialize(msg->BeginNestedMessage<::protozero::Message>(52));
  }

  // Field 53: binder_lock
  if (_has_field_[53]) {
    (*binder_lock_).Serialize(msg->BeginNestedMessage<::protozero::Message>(53));
  }

  // Field 54: binder_locked
  if (_has_field_[54]) {
    (*binder_locked_).Serialize(msg->BeginNestedMessage<::protozero::Message>(54));
  }

  // Field 55: binder_unlock
  if (_has_field_[55]) {
    (*binder_unlock_).Serialize(msg->BeginNestedMessage<::protozero::Message>(55));
  }

  // Field 56: workqueue_activate_work
  if (_has_field_[56]) {
    (*workqueue_activate_work_).Serialize(msg->BeginNestedMessage<::protozero::Message>(56));
  }

  // Field 57: workqueue_execute_end
  if (_has_field_[57]) {
    (*workqueue_execute_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(57));
  }

  // Field 58: workqueue_execute_start
  if (_has_field_[58]) {
    (*workqueue_execute_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(58));
  }

  // Field 59: workqueue_queue_work
  if (_has_field_[59]) {
    (*workqueue_queue_work_).Serialize(msg->BeginNestedMessage<::protozero::Message>(59));
  }

  // Field 60: regulator_disable
  if (_has_field_[60]) {
    (*regulator_disable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(60));
  }

  // Field 61: regulator_disable_complete
  if (_has_field_[61]) {
    (*regulator_disable_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(61));
  }

  // Field 62: regulator_enable
  if (_has_field_[62]) {
    (*regulator_enable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(62));
  }

  // Field 63: regulator_enable_complete
  if (_has_field_[63]) {
    (*regulator_enable_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(63));
  }

  // Field 64: regulator_enable_delay
  if (_has_field_[64]) {
    (*regulator_enable_delay_).Serialize(msg->BeginNestedMessage<::protozero::Message>(64));
  }

  // Field 65: regulator_set_voltage
  if (_has_field_[65]) {
    (*regulator_set_voltage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(65));
  }

  // Field 66: regulator_set_voltage_complete
  if (_has_field_[66]) {
    (*regulator_set_voltage_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(66));
  }

  // Field 67: cgroup_attach_task
  if (_has_field_[67]) {
    (*cgroup_attach_task_).Serialize(msg->BeginNestedMessage<::protozero::Message>(67));
  }

  // Field 68: cgroup_mkdir
  if (_has_field_[68]) {
    (*cgroup_mkdir_).Serialize(msg->BeginNestedMessage<::protozero::Message>(68));
  }

  // Field 69: cgroup_remount
  if (_has_field_[69]) {
    (*cgroup_remount_).Serialize(msg->BeginNestedMessage<::protozero::Message>(69));
  }

  // Field 70: cgroup_rmdir
  if (_has_field_[70]) {
    (*cgroup_rmdir_).Serialize(msg->BeginNestedMessage<::protozero::Message>(70));
  }

  // Field 71: cgroup_transfer_tasks
  if (_has_field_[71]) {
    (*cgroup_transfer_tasks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(71));
  }

  // Field 72: cgroup_destroy_root
  if (_has_field_[72]) {
    (*cgroup_destroy_root_).Serialize(msg->BeginNestedMessage<::protozero::Message>(72));
  }

  // Field 73: cgroup_release
  if (_has_field_[73]) {
    (*cgroup_release_).Serialize(msg->BeginNestedMessage<::protozero::Message>(73));
  }

  // Field 74: cgroup_rename
  if (_has_field_[74]) {
    (*cgroup_rename_).Serialize(msg->BeginNestedMessage<::protozero::Message>(74));
  }

  // Field 75: cgroup_setup_root
  if (_has_field_[75]) {
    (*cgroup_setup_root_).Serialize(msg->BeginNestedMessage<::protozero::Message>(75));
  }

  // Field 76: mdp_cmd_kickoff
  if (_has_field_[76]) {
    (*mdp_cmd_kickoff_).Serialize(msg->BeginNestedMessage<::protozero::Message>(76));
  }

  // Field 77: mdp_commit
  if (_has_field_[77]) {
    (*mdp_commit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(77));
  }

  // Field 78: mdp_perf_set_ot
  if (_has_field_[78]) {
    (*mdp_perf_set_ot_).Serialize(msg->BeginNestedMessage<::protozero::Message>(78));
  }

  // Field 79: mdp_sspp_change
  if (_has_field_[79]) {
    (*mdp_sspp_change_).Serialize(msg->BeginNestedMessage<::protozero::Message>(79));
  }

  // Field 80: tracing_mark_write
  if (_has_field_[80]) {
    (*tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(80));
  }

  // Field 81: mdp_cmd_pingpong_done
  if (_has_field_[81]) {
    (*mdp_cmd_pingpong_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(81));
  }

  // Field 82: mdp_compare_bw
  if (_has_field_[82]) {
    (*mdp_compare_bw_).Serialize(msg->BeginNestedMessage<::protozero::Message>(82));
  }

  // Field 83: mdp_perf_set_panic_luts
  if (_has_field_[83]) {
    (*mdp_perf_set_panic_luts_).Serialize(msg->BeginNestedMessage<::protozero::Message>(83));
  }

  // Field 84: mdp_sspp_set
  if (_has_field_[84]) {
    (*mdp_sspp_set_).Serialize(msg->BeginNestedMessage<::protozero::Message>(84));
  }

  // Field 85: mdp_cmd_readptr_done
  if (_has_field_[85]) {
    (*mdp_cmd_readptr_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(85));
  }

  // Field 86: mdp_misr_crc
  if (_has_field_[86]) {
    (*mdp_misr_crc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(86));
  }

  // Field 87: mdp_perf_set_qos_luts
  if (_has_field_[87]) {
    (*mdp_perf_set_qos_luts_).Serialize(msg->BeginNestedMessage<::protozero::Message>(87));
  }

  // Field 88: mdp_trace_counter
  if (_has_field_[88]) {
    (*mdp_trace_counter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(88));
  }

  // Field 89: mdp_cmd_release_bw
  if (_has_field_[89]) {
    (*mdp_cmd_release_bw_).Serialize(msg->BeginNestedMessage<::protozero::Message>(89));
  }

  // Field 90: mdp_mixer_update
  if (_has_field_[90]) {
    (*mdp_mixer_update_).Serialize(msg->BeginNestedMessage<::protozero::Message>(90));
  }

  // Field 91: mdp_perf_set_wm_levels
  if (_has_field_[91]) {
    (*mdp_perf_set_wm_levels_).Serialize(msg->BeginNestedMessage<::protozero::Message>(91));
  }

  // Field 92: mdp_video_underrun_done
  if (_has_field_[92]) {
    (*mdp_video_underrun_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(92));
  }

  // Field 93: mdp_cmd_wait_pingpong
  if (_has_field_[93]) {
    (*mdp_cmd_wait_pingpong_).Serialize(msg->BeginNestedMessage<::protozero::Message>(93));
  }

  // Field 94: mdp_perf_prefill_calc
  if (_has_field_[94]) {
    (*mdp_perf_prefill_calc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(94));
  }

  // Field 95: mdp_perf_update_bus
  if (_has_field_[95]) {
    (*mdp_perf_update_bus_).Serialize(msg->BeginNestedMessage<::protozero::Message>(95));
  }

  // Field 96: rotator_bw_ao_as_context
  if (_has_field_[96]) {
    (*rotator_bw_ao_as_context_).Serialize(msg->BeginNestedMessage<::protozero::Message>(96));
  }

  // Field 97: mm_filemap_add_to_page_cache
  if (_has_field_[97]) {
    (*mm_filemap_add_to_page_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(97));
  }

  // Field 98: mm_filemap_delete_from_page_cache
  if (_has_field_[98]) {
    (*mm_filemap_delete_from_page_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(98));
  }

  // Field 99: mm_compaction_begin
  if (_has_field_[99]) {
    (*mm_compaction_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(99));
  }

  // Field 100: mm_compaction_defer_compaction
  if (_has_field_[100]) {
    (*mm_compaction_defer_compaction_).Serialize(msg->BeginNestedMessage<::protozero::Message>(100));
  }

  // Field 101: mm_compaction_deferred
  if (_has_field_[101]) {
    (*mm_compaction_deferred_).Serialize(msg->BeginNestedMessage<::protozero::Message>(101));
  }

  // Field 102: mm_compaction_defer_reset
  if (_has_field_[102]) {
    (*mm_compaction_defer_reset_).Serialize(msg->BeginNestedMessage<::protozero::Message>(102));
  }

  // Field 103: mm_compaction_end
  if (_has_field_[103]) {
    (*mm_compaction_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(103));
  }

  // Field 104: mm_compaction_finished
  if (_has_field_[104]) {
    (*mm_compaction_finished_).Serialize(msg->BeginNestedMessage<::protozero::Message>(104));
  }

  // Field 105: mm_compaction_isolate_freepages
  if (_has_field_[105]) {
    (*mm_compaction_isolate_freepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(105));
  }

  // Field 106: mm_compaction_isolate_migratepages
  if (_has_field_[106]) {
    (*mm_compaction_isolate_migratepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(106));
  }

  // Field 107: mm_compaction_kcompactd_sleep
  if (_has_field_[107]) {
    (*mm_compaction_kcompactd_sleep_).Serialize(msg->BeginNestedMessage<::protozero::Message>(107));
  }

  // Field 108: mm_compaction_kcompactd_wake
  if (_has_field_[108]) {
    (*mm_compaction_kcompactd_wake_).Serialize(msg->BeginNestedMessage<::protozero::Message>(108));
  }

  // Field 109: mm_compaction_migratepages
  if (_has_field_[109]) {
    (*mm_compaction_migratepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(109));
  }

  // Field 110: mm_compaction_suitable
  if (_has_field_[110]) {
    (*mm_compaction_suitable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(110));
  }

  // Field 111: mm_compaction_try_to_compact_pages
  if (_has_field_[111]) {
    (*mm_compaction_try_to_compact_pages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(111));
  }

  // Field 112: mm_compaction_wakeup_kcompactd
  if (_has_field_[112]) {
    (*mm_compaction_wakeup_kcompactd_).Serialize(msg->BeginNestedMessage<::protozero::Message>(112));
  }

  // Field 113: suspend_resume
  if (_has_field_[113]) {
    (*suspend_resume_).Serialize(msg->BeginNestedMessage<::protozero::Message>(113));
  }

  // Field 114: sched_wakeup_new
  if (_has_field_[114]) {
    (*sched_wakeup_new_).Serialize(msg->BeginNestedMessage<::protozero::Message>(114));
  }

  // Field 115: block_bio_backmerge
  if (_has_field_[115]) {
    (*block_bio_backmerge_).Serialize(msg->BeginNestedMessage<::protozero::Message>(115));
  }

  // Field 116: block_bio_bounce
  if (_has_field_[116]) {
    (*block_bio_bounce_).Serialize(msg->BeginNestedMessage<::protozero::Message>(116));
  }

  // Field 117: block_bio_complete
  if (_has_field_[117]) {
    (*block_bio_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(117));
  }

  // Field 118: block_bio_frontmerge
  if (_has_field_[118]) {
    (*block_bio_frontmerge_).Serialize(msg->BeginNestedMessage<::protozero::Message>(118));
  }

  // Field 119: block_bio_queue
  if (_has_field_[119]) {
    (*block_bio_queue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(119));
  }

  // Field 120: block_bio_remap
  if (_has_field_[120]) {
    (*block_bio_remap_).Serialize(msg->BeginNestedMessage<::protozero::Message>(120));
  }

  // Field 121: block_dirty_buffer
  if (_has_field_[121]) {
    (*block_dirty_buffer_).Serialize(msg->BeginNestedMessage<::protozero::Message>(121));
  }

  // Field 122: block_getrq
  if (_has_field_[122]) {
    (*block_getrq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(122));
  }

  // Field 123: block_plug
  if (_has_field_[123]) {
    (*block_plug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(123));
  }

  // Field 124: block_rq_abort
  if (_has_field_[124]) {
    (*block_rq_abort_).Serialize(msg->BeginNestedMessage<::protozero::Message>(124));
  }

  // Field 125: block_rq_complete
  if (_has_field_[125]) {
    (*block_rq_complete_).Serialize(msg->BeginNestedMessage<::protozero::Message>(125));
  }

  // Field 126: block_rq_insert
  if (_has_field_[126]) {
    (*block_rq_insert_).Serialize(msg->BeginNestedMessage<::protozero::Message>(126));
  }

  // Field 128: block_rq_remap
  if (_has_field_[128]) {
    (*block_rq_remap_).Serialize(msg->BeginNestedMessage<::protozero::Message>(128));
  }

  // Field 129: block_rq_requeue
  if (_has_field_[129]) {
    (*block_rq_requeue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(129));
  }

  // Field 130: block_sleeprq
  if (_has_field_[130]) {
    (*block_sleeprq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(130));
  }

  // Field 131: block_split
  if (_has_field_[131]) {
    (*block_split_).Serialize(msg->BeginNestedMessage<::protozero::Message>(131));
  }

  // Field 132: block_touch_buffer
  if (_has_field_[132]) {
    (*block_touch_buffer_).Serialize(msg->BeginNestedMessage<::protozero::Message>(132));
  }

  // Field 133: block_unplug
  if (_has_field_[133]) {
    (*block_unplug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(133));
  }

  // Field 134: ext4_alloc_da_blocks
  if (_has_field_[134]) {
    (*ext4_alloc_da_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(134));
  }

  // Field 135: ext4_allocate_blocks
  if (_has_field_[135]) {
    (*ext4_allocate_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(135));
  }

  // Field 136: ext4_allocate_inode
  if (_has_field_[136]) {
    (*ext4_allocate_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(136));
  }

  // Field 137: ext4_begin_ordered_truncate
  if (_has_field_[137]) {
    (*ext4_begin_ordered_truncate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(137));
  }

  // Field 138: ext4_collapse_range
  if (_has_field_[138]) {
    (*ext4_collapse_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(138));
  }

  // Field 139: ext4_da_release_space
  if (_has_field_[139]) {
    (*ext4_da_release_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(139));
  }

  // Field 140: ext4_da_reserve_space
  if (_has_field_[140]) {
    (*ext4_da_reserve_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(140));
  }

  // Field 141: ext4_da_update_reserve_space
  if (_has_field_[141]) {
    (*ext4_da_update_reserve_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(141));
  }

  // Field 142: ext4_da_write_pages
  if (_has_field_[142]) {
    (*ext4_da_write_pages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(142));
  }

  // Field 143: ext4_da_write_pages_extent
  if (_has_field_[143]) {
    (*ext4_da_write_pages_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(143));
  }

  // Field 144: ext4_direct_io_enter
  if (_has_field_[144]) {
    (*ext4_direct_io_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(144));
  }

  // Field 145: ext4_direct_io_exit
  if (_has_field_[145]) {
    (*ext4_direct_io_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(145));
  }

  // Field 146: ext4_discard_blocks
  if (_has_field_[146]) {
    (*ext4_discard_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(146));
  }

  // Field 147: ext4_discard_preallocations
  if (_has_field_[147]) {
    (*ext4_discard_preallocations_).Serialize(msg->BeginNestedMessage<::protozero::Message>(147));
  }

  // Field 148: ext4_drop_inode
  if (_has_field_[148]) {
    (*ext4_drop_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(148));
  }

  // Field 149: ext4_es_cache_extent
  if (_has_field_[149]) {
    (*ext4_es_cache_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(149));
  }

  // Field 150: ext4_es_find_delayed_extent_range_enter
  if (_has_field_[150]) {
    (*ext4_es_find_delayed_extent_range_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(150));
  }

  // Field 151: ext4_es_find_delayed_extent_range_exit
  if (_has_field_[151]) {
    (*ext4_es_find_delayed_extent_range_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(151));
  }

  // Field 152: ext4_es_insert_extent
  if (_has_field_[152]) {
    (*ext4_es_insert_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(152));
  }

  // Field 153: ext4_es_lookup_extent_enter
  if (_has_field_[153]) {
    (*ext4_es_lookup_extent_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(153));
  }

  // Field 154: ext4_es_lookup_extent_exit
  if (_has_field_[154]) {
    (*ext4_es_lookup_extent_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(154));
  }

  // Field 155: ext4_es_remove_extent
  if (_has_field_[155]) {
    (*ext4_es_remove_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(155));
  }

  // Field 156: ext4_es_shrink
  if (_has_field_[156]) {
    (*ext4_es_shrink_).Serialize(msg->BeginNestedMessage<::protozero::Message>(156));
  }

  // Field 157: ext4_es_shrink_count
  if (_has_field_[157]) {
    (*ext4_es_shrink_count_).Serialize(msg->BeginNestedMessage<::protozero::Message>(157));
  }

  // Field 158: ext4_es_shrink_scan_enter
  if (_has_field_[158]) {
    (*ext4_es_shrink_scan_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(158));
  }

  // Field 159: ext4_es_shrink_scan_exit
  if (_has_field_[159]) {
    (*ext4_es_shrink_scan_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(159));
  }

  // Field 160: ext4_evict_inode
  if (_has_field_[160]) {
    (*ext4_evict_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(160));
  }

  // Field 161: ext4_ext_convert_to_initialized_enter
  if (_has_field_[161]) {
    (*ext4_ext_convert_to_initialized_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(161));
  }

  // Field 162: ext4_ext_convert_to_initialized_fastpath
  if (_has_field_[162]) {
    (*ext4_ext_convert_to_initialized_fastpath_).Serialize(msg->BeginNestedMessage<::protozero::Message>(162));
  }

  // Field 163: ext4_ext_handle_unwritten_extents
  if (_has_field_[163]) {
    (*ext4_ext_handle_unwritten_extents_).Serialize(msg->BeginNestedMessage<::protozero::Message>(163));
  }

  // Field 164: ext4_ext_in_cache
  if (_has_field_[164]) {
    (*ext4_ext_in_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(164));
  }

  // Field 165: ext4_ext_load_extent
  if (_has_field_[165]) {
    (*ext4_ext_load_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(165));
  }

  // Field 166: ext4_ext_map_blocks_enter
  if (_has_field_[166]) {
    (*ext4_ext_map_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(166));
  }

  // Field 167: ext4_ext_map_blocks_exit
  if (_has_field_[167]) {
    (*ext4_ext_map_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(167));
  }

  // Field 168: ext4_ext_put_in_cache
  if (_has_field_[168]) {
    (*ext4_ext_put_in_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(168));
  }

  // Field 169: ext4_ext_remove_space
  if (_has_field_[169]) {
    (*ext4_ext_remove_space_).Serialize(msg->BeginNestedMessage<::protozero::Message>(169));
  }

  // Field 170: ext4_ext_remove_space_done
  if (_has_field_[170]) {
    (*ext4_ext_remove_space_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(170));
  }

  // Field 171: ext4_ext_rm_idx
  if (_has_field_[171]) {
    (*ext4_ext_rm_idx_).Serialize(msg->BeginNestedMessage<::protozero::Message>(171));
  }

  // Field 172: ext4_ext_rm_leaf
  if (_has_field_[172]) {
    (*ext4_ext_rm_leaf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(172));
  }

  // Field 173: ext4_ext_show_extent
  if (_has_field_[173]) {
    (*ext4_ext_show_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(173));
  }

  // Field 174: ext4_fallocate_enter
  if (_has_field_[174]) {
    (*ext4_fallocate_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(174));
  }

  // Field 175: ext4_fallocate_exit
  if (_has_field_[175]) {
    (*ext4_fallocate_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(175));
  }

  // Field 176: ext4_find_delalloc_range
  if (_has_field_[176]) {
    (*ext4_find_delalloc_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(176));
  }

  // Field 177: ext4_forget
  if (_has_field_[177]) {
    (*ext4_forget_).Serialize(msg->BeginNestedMessage<::protozero::Message>(177));
  }

  // Field 178: ext4_free_blocks
  if (_has_field_[178]) {
    (*ext4_free_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(178));
  }

  // Field 179: ext4_free_inode
  if (_has_field_[179]) {
    (*ext4_free_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(179));
  }

  // Field 180: ext4_get_implied_cluster_alloc_exit
  if (_has_field_[180]) {
    (*ext4_get_implied_cluster_alloc_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(180));
  }

  // Field 181: ext4_get_reserved_cluster_alloc
  if (_has_field_[181]) {
    (*ext4_get_reserved_cluster_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(181));
  }

  // Field 182: ext4_ind_map_blocks_enter
  if (_has_field_[182]) {
    (*ext4_ind_map_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(182));
  }

  // Field 183: ext4_ind_map_blocks_exit
  if (_has_field_[183]) {
    (*ext4_ind_map_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(183));
  }

  // Field 184: ext4_insert_range
  if (_has_field_[184]) {
    (*ext4_insert_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(184));
  }

  // Field 185: ext4_invalidatepage
  if (_has_field_[185]) {
    (*ext4_invalidatepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(185));
  }

  // Field 186: ext4_journal_start
  if (_has_field_[186]) {
    (*ext4_journal_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(186));
  }

  // Field 187: ext4_journal_start_reserved
  if (_has_field_[187]) {
    (*ext4_journal_start_reserved_).Serialize(msg->BeginNestedMessage<::protozero::Message>(187));
  }

  // Field 188: ext4_journalled_invalidatepage
  if (_has_field_[188]) {
    (*ext4_journalled_invalidatepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(188));
  }

  // Field 189: ext4_journalled_write_end
  if (_has_field_[189]) {
    (*ext4_journalled_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(189));
  }

  // Field 190: ext4_load_inode
  if (_has_field_[190]) {
    (*ext4_load_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(190));
  }

  // Field 191: ext4_load_inode_bitmap
  if (_has_field_[191]) {
    (*ext4_load_inode_bitmap_).Serialize(msg->BeginNestedMessage<::protozero::Message>(191));
  }

  // Field 192: ext4_mark_inode_dirty
  if (_has_field_[192]) {
    (*ext4_mark_inode_dirty_).Serialize(msg->BeginNestedMessage<::protozero::Message>(192));
  }

  // Field 193: ext4_mb_bitmap_load
  if (_has_field_[193]) {
    (*ext4_mb_bitmap_load_).Serialize(msg->BeginNestedMessage<::protozero::Message>(193));
  }

  // Field 194: ext4_mb_buddy_bitmap_load
  if (_has_field_[194]) {
    (*ext4_mb_buddy_bitmap_load_).Serialize(msg->BeginNestedMessage<::protozero::Message>(194));
  }

  // Field 195: ext4_mb_discard_preallocations
  if (_has_field_[195]) {
    (*ext4_mb_discard_preallocations_).Serialize(msg->BeginNestedMessage<::protozero::Message>(195));
  }

  // Field 196: ext4_mb_new_group_pa
  if (_has_field_[196]) {
    (*ext4_mb_new_group_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(196));
  }

  // Field 197: ext4_mb_new_inode_pa
  if (_has_field_[197]) {
    (*ext4_mb_new_inode_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(197));
  }

  // Field 198: ext4_mb_release_group_pa
  if (_has_field_[198]) {
    (*ext4_mb_release_group_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(198));
  }

  // Field 199: ext4_mb_release_inode_pa
  if (_has_field_[199]) {
    (*ext4_mb_release_inode_pa_).Serialize(msg->BeginNestedMessage<::protozero::Message>(199));
  }

  // Field 200: ext4_mballoc_alloc
  if (_has_field_[200]) {
    (*ext4_mballoc_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(200));
  }

  // Field 201: ext4_mballoc_discard
  if (_has_field_[201]) {
    (*ext4_mballoc_discard_).Serialize(msg->BeginNestedMessage<::protozero::Message>(201));
  }

  // Field 202: ext4_mballoc_free
  if (_has_field_[202]) {
    (*ext4_mballoc_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(202));
  }

  // Field 203: ext4_mballoc_prealloc
  if (_has_field_[203]) {
    (*ext4_mballoc_prealloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(203));
  }

  // Field 204: ext4_other_inode_update_time
  if (_has_field_[204]) {
    (*ext4_other_inode_update_time_).Serialize(msg->BeginNestedMessage<::protozero::Message>(204));
  }

  // Field 205: ext4_punch_hole
  if (_has_field_[205]) {
    (*ext4_punch_hole_).Serialize(msg->BeginNestedMessage<::protozero::Message>(205));
  }

  // Field 206: ext4_read_block_bitmap_load
  if (_has_field_[206]) {
    (*ext4_read_block_bitmap_load_).Serialize(msg->BeginNestedMessage<::protozero::Message>(206));
  }

  // Field 207: ext4_readpage
  if (_has_field_[207]) {
    (*ext4_readpage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(207));
  }

  // Field 208: ext4_releasepage
  if (_has_field_[208]) {
    (*ext4_releasepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(208));
  }

  // Field 209: ext4_remove_blocks
  if (_has_field_[209]) {
    (*ext4_remove_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(209));
  }

  // Field 210: ext4_request_blocks
  if (_has_field_[210]) {
    (*ext4_request_blocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(210));
  }

  // Field 211: ext4_request_inode
  if (_has_field_[211]) {
    (*ext4_request_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(211));
  }

  // Field 212: ext4_sync_fs
  if (_has_field_[212]) {
    (*ext4_sync_fs_).Serialize(msg->BeginNestedMessage<::protozero::Message>(212));
  }

  // Field 213: ext4_trim_all_free
  if (_has_field_[213]) {
    (*ext4_trim_all_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(213));
  }

  // Field 214: ext4_trim_extent
  if (_has_field_[214]) {
    (*ext4_trim_extent_).Serialize(msg->BeginNestedMessage<::protozero::Message>(214));
  }

  // Field 215: ext4_truncate_enter
  if (_has_field_[215]) {
    (*ext4_truncate_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(215));
  }

  // Field 216: ext4_truncate_exit
  if (_has_field_[216]) {
    (*ext4_truncate_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(216));
  }

  // Field 217: ext4_unlink_enter
  if (_has_field_[217]) {
    (*ext4_unlink_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(217));
  }

  // Field 218: ext4_unlink_exit
  if (_has_field_[218]) {
    (*ext4_unlink_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(218));
  }

  // Field 219: ext4_write_begin
  if (_has_field_[219]) {
    (*ext4_write_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(219));
  }

  // Field 230: ext4_write_end
  if (_has_field_[230]) {
    (*ext4_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(230));
  }

  // Field 231: ext4_writepage
  if (_has_field_[231]) {
    (*ext4_writepage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(231));
  }

  // Field 232: ext4_writepages
  if (_has_field_[232]) {
    (*ext4_writepages_).Serialize(msg->BeginNestedMessage<::protozero::Message>(232));
  }

  // Field 233: ext4_writepages_result
  if (_has_field_[233]) {
    (*ext4_writepages_result_).Serialize(msg->BeginNestedMessage<::protozero::Message>(233));
  }

  // Field 234: ext4_zero_range
  if (_has_field_[234]) {
    (*ext4_zero_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(234));
  }

  // Field 235: task_newtask
  if (_has_field_[235]) {
    (*task_newtask_).Serialize(msg->BeginNestedMessage<::protozero::Message>(235));
  }

  // Field 236: task_rename
  if (_has_field_[236]) {
    (*task_rename_).Serialize(msg->BeginNestedMessage<::protozero::Message>(236));
  }

  // Field 237: sched_process_exec
  if (_has_field_[237]) {
    (*sched_process_exec_).Serialize(msg->BeginNestedMessage<::protozero::Message>(237));
  }

  // Field 238: sched_process_exit
  if (_has_field_[238]) {
    (*sched_process_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(238));
  }

  // Field 239: sched_process_fork
  if (_has_field_[239]) {
    (*sched_process_fork_).Serialize(msg->BeginNestedMessage<::protozero::Message>(239));
  }

  // Field 240: sched_process_free
  if (_has_field_[240]) {
    (*sched_process_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(240));
  }

  // Field 241: sched_process_hang
  if (_has_field_[241]) {
    (*sched_process_hang_).Serialize(msg->BeginNestedMessage<::protozero::Message>(241));
  }

  // Field 242: sched_process_wait
  if (_has_field_[242]) {
    (*sched_process_wait_).Serialize(msg->BeginNestedMessage<::protozero::Message>(242));
  }

  // Field 243: f2fs_do_submit_bio
  if (_has_field_[243]) {
    (*f2fs_do_submit_bio_).Serialize(msg->BeginNestedMessage<::protozero::Message>(243));
  }

  // Field 244: f2fs_evict_inode
  if (_has_field_[244]) {
    (*f2fs_evict_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(244));
  }

  // Field 245: f2fs_fallocate
  if (_has_field_[245]) {
    (*f2fs_fallocate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(245));
  }

  // Field 246: f2fs_get_data_block
  if (_has_field_[246]) {
    (*f2fs_get_data_block_).Serialize(msg->BeginNestedMessage<::protozero::Message>(246));
  }

  // Field 247: f2fs_get_victim
  if (_has_field_[247]) {
    (*f2fs_get_victim_).Serialize(msg->BeginNestedMessage<::protozero::Message>(247));
  }

  // Field 248: f2fs_iget
  if (_has_field_[248]) {
    (*f2fs_iget_).Serialize(msg->BeginNestedMessage<::protozero::Message>(248));
  }

  // Field 249: f2fs_iget_exit
  if (_has_field_[249]) {
    (*f2fs_iget_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(249));
  }

  // Field 250: f2fs_new_inode
  if (_has_field_[250]) {
    (*f2fs_new_inode_).Serialize(msg->BeginNestedMessage<::protozero::Message>(250));
  }

  // Field 251: f2fs_readpage
  if (_has_field_[251]) {
    (*f2fs_readpage_).Serialize(msg->BeginNestedMessage<::protozero::Message>(251));
  }

  // Field 252: f2fs_reserve_new_block
  if (_has_field_[252]) {
    (*f2fs_reserve_new_block_).Serialize(msg->BeginNestedMessage<::protozero::Message>(252));
  }

  // Field 253: f2fs_set_page_dirty
  if (_has_field_[253]) {
    (*f2fs_set_page_dirty_).Serialize(msg->BeginNestedMessage<::protozero::Message>(253));
  }

  // Field 254: f2fs_submit_write_page
  if (_has_field_[254]) {
    (*f2fs_submit_write_page_).Serialize(msg->BeginNestedMessage<::protozero::Message>(254));
  }

  // Field 255: f2fs_sync_file_enter
  if (_has_field_[255]) {
    (*f2fs_sync_file_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(255));
  }

  // Field 256: f2fs_sync_file_exit
  if (_has_field_[256]) {
    (*f2fs_sync_file_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(256));
  }

  // Field 257: f2fs_sync_fs
  if (_has_field_[257]) {
    (*f2fs_sync_fs_).Serialize(msg->BeginNestedMessage<::protozero::Message>(257));
  }

  // Field 258: f2fs_truncate
  if (_has_field_[258]) {
    (*f2fs_truncate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(258));
  }

  // Field 259: f2fs_truncate_blocks_enter
  if (_has_field_[259]) {
    (*f2fs_truncate_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(259));
  }

  // Field 260: f2fs_truncate_blocks_exit
  if (_has_field_[260]) {
    (*f2fs_truncate_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(260));
  }

  // Field 261: f2fs_truncate_data_blocks_range
  if (_has_field_[261]) {
    (*f2fs_truncate_data_blocks_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(261));
  }

  // Field 262: f2fs_truncate_inode_blocks_enter
  if (_has_field_[262]) {
    (*f2fs_truncate_inode_blocks_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(262));
  }

  // Field 263: f2fs_truncate_inode_blocks_exit
  if (_has_field_[263]) {
    (*f2fs_truncate_inode_blocks_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(263));
  }

  // Field 264: f2fs_truncate_node
  if (_has_field_[264]) {
    (*f2fs_truncate_node_).Serialize(msg->BeginNestedMessage<::protozero::Message>(264));
  }

  // Field 265: f2fs_truncate_nodes_enter
  if (_has_field_[265]) {
    (*f2fs_truncate_nodes_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(265));
  }

  // Field 266: f2fs_truncate_nodes_exit
  if (_has_field_[266]) {
    (*f2fs_truncate_nodes_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(266));
  }

  // Field 267: f2fs_truncate_partial_nodes
  if (_has_field_[267]) {
    (*f2fs_truncate_partial_nodes_).Serialize(msg->BeginNestedMessage<::protozero::Message>(267));
  }

  // Field 268: f2fs_unlink_enter
  if (_has_field_[268]) {
    (*f2fs_unlink_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(268));
  }

  // Field 269: f2fs_unlink_exit
  if (_has_field_[269]) {
    (*f2fs_unlink_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(269));
  }

  // Field 270: f2fs_vm_page_mkwrite
  if (_has_field_[270]) {
    (*f2fs_vm_page_mkwrite_).Serialize(msg->BeginNestedMessage<::protozero::Message>(270));
  }

  // Field 271: f2fs_write_begin
  if (_has_field_[271]) {
    (*f2fs_write_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(271));
  }

  // Field 272: f2fs_write_checkpoint
  if (_has_field_[272]) {
    (*f2fs_write_checkpoint_).Serialize(msg->BeginNestedMessage<::protozero::Message>(272));
  }

  // Field 273: f2fs_write_end
  if (_has_field_[273]) {
    (*f2fs_write_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(273));
  }

  // Field 274: alloc_pages_iommu_end
  if (_has_field_[274]) {
    (*alloc_pages_iommu_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(274));
  }

  // Field 275: alloc_pages_iommu_fail
  if (_has_field_[275]) {
    (*alloc_pages_iommu_fail_).Serialize(msg->BeginNestedMessage<::protozero::Message>(275));
  }

  // Field 276: alloc_pages_iommu_start
  if (_has_field_[276]) {
    (*alloc_pages_iommu_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(276));
  }

  // Field 277: alloc_pages_sys_end
  if (_has_field_[277]) {
    (*alloc_pages_sys_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(277));
  }

  // Field 278: alloc_pages_sys_fail
  if (_has_field_[278]) {
    (*alloc_pages_sys_fail_).Serialize(msg->BeginNestedMessage<::protozero::Message>(278));
  }

  // Field 279: alloc_pages_sys_start
  if (_has_field_[279]) {
    (*alloc_pages_sys_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(279));
  }

  // Field 280: dma_alloc_contiguous_retry
  if (_has_field_[280]) {
    (*dma_alloc_contiguous_retry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(280));
  }

  // Field 281: iommu_map_range
  if (_has_field_[281]) {
    (*iommu_map_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(281));
  }

  // Field 282: iommu_sec_ptbl_map_range_end
  if (_has_field_[282]) {
    (*iommu_sec_ptbl_map_range_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(282));
  }

  // Field 283: iommu_sec_ptbl_map_range_start
  if (_has_field_[283]) {
    (*iommu_sec_ptbl_map_range_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(283));
  }

  // Field 284: ion_alloc_buffer_end
  if (_has_field_[284]) {
    (*ion_alloc_buffer_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(284));
  }

  // Field 285: ion_alloc_buffer_fail
  if (_has_field_[285]) {
    (*ion_alloc_buffer_fail_).Serialize(msg->BeginNestedMessage<::protozero::Message>(285));
  }

  // Field 286: ion_alloc_buffer_fallback
  if (_has_field_[286]) {
    (*ion_alloc_buffer_fallback_).Serialize(msg->BeginNestedMessage<::protozero::Message>(286));
  }

  // Field 287: ion_alloc_buffer_start
  if (_has_field_[287]) {
    (*ion_alloc_buffer_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(287));
  }

  // Field 288: ion_cp_alloc_retry
  if (_has_field_[288]) {
    (*ion_cp_alloc_retry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(288));
  }

  // Field 289: ion_cp_secure_buffer_end
  if (_has_field_[289]) {
    (*ion_cp_secure_buffer_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(289));
  }

  // Field 290: ion_cp_secure_buffer_start
  if (_has_field_[290]) {
    (*ion_cp_secure_buffer_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(290));
  }

  // Field 291: ion_prefetching
  if (_has_field_[291]) {
    (*ion_prefetching_).Serialize(msg->BeginNestedMessage<::protozero::Message>(291));
  }

  // Field 292: ion_secure_cma_add_to_pool_end
  if (_has_field_[292]) {
    (*ion_secure_cma_add_to_pool_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(292));
  }

  // Field 293: ion_secure_cma_add_to_pool_start
  if (_has_field_[293]) {
    (*ion_secure_cma_add_to_pool_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(293));
  }

  // Field 294: ion_secure_cma_allocate_end
  if (_has_field_[294]) {
    (*ion_secure_cma_allocate_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(294));
  }

  // Field 295: ion_secure_cma_allocate_start
  if (_has_field_[295]) {
    (*ion_secure_cma_allocate_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(295));
  }

  // Field 296: ion_secure_cma_shrink_pool_end
  if (_has_field_[296]) {
    (*ion_secure_cma_shrink_pool_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(296));
  }

  // Field 297: ion_secure_cma_shrink_pool_start
  if (_has_field_[297]) {
    (*ion_secure_cma_shrink_pool_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(297));
  }

  // Field 298: kfree
  if (_has_field_[298]) {
    (*kfree_).Serialize(msg->BeginNestedMessage<::protozero::Message>(298));
  }

  // Field 299: kmalloc
  if (_has_field_[299]) {
    (*kmalloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(299));
  }

  // Field 300: kmalloc_node
  if (_has_field_[300]) {
    (*kmalloc_node_).Serialize(msg->BeginNestedMessage<::protozero::Message>(300));
  }

  // Field 301: kmem_cache_alloc
  if (_has_field_[301]) {
    (*kmem_cache_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(301));
  }

  // Field 302: kmem_cache_alloc_node
  if (_has_field_[302]) {
    (*kmem_cache_alloc_node_).Serialize(msg->BeginNestedMessage<::protozero::Message>(302));
  }

  // Field 303: kmem_cache_free
  if (_has_field_[303]) {
    (*kmem_cache_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(303));
  }

  // Field 304: migrate_pages_end
  if (_has_field_[304]) {
    (*migrate_pages_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(304));
  }

  // Field 305: migrate_pages_start
  if (_has_field_[305]) {
    (*migrate_pages_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(305));
  }

  // Field 306: migrate_retry
  if (_has_field_[306]) {
    (*migrate_retry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(306));
  }

  // Field 307: mm_page_alloc
  if (_has_field_[307]) {
    (*mm_page_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(307));
  }

  // Field 308: mm_page_alloc_extfrag
  if (_has_field_[308]) {
    (*mm_page_alloc_extfrag_).Serialize(msg->BeginNestedMessage<::protozero::Message>(308));
  }

  // Field 309: mm_page_alloc_zone_locked
  if (_has_field_[309]) {
    (*mm_page_alloc_zone_locked_).Serialize(msg->BeginNestedMessage<::protozero::Message>(309));
  }

  // Field 310: mm_page_free
  if (_has_field_[310]) {
    (*mm_page_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(310));
  }

  // Field 311: mm_page_free_batched
  if (_has_field_[311]) {
    (*mm_page_free_batched_).Serialize(msg->BeginNestedMessage<::protozero::Message>(311));
  }

  // Field 312: mm_page_pcpu_drain
  if (_has_field_[312]) {
    (*mm_page_pcpu_drain_).Serialize(msg->BeginNestedMessage<::protozero::Message>(312));
  }

  // Field 313: rss_stat
  if (_has_field_[313]) {
    (*rss_stat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(313));
  }

  // Field 314: ion_heap_shrink
  if (_has_field_[314]) {
    (*ion_heap_shrink_).Serialize(msg->BeginNestedMessage<::protozero::Message>(314));
  }

  // Field 315: ion_heap_grow
  if (_has_field_[315]) {
    (*ion_heap_grow_).Serialize(msg->BeginNestedMessage<::protozero::Message>(315));
  }

  // Field 316: fence_init
  if (_has_field_[316]) {
    (*fence_init_).Serialize(msg->BeginNestedMessage<::protozero::Message>(316));
  }

  // Field 317: fence_destroy
  if (_has_field_[317]) {
    (*fence_destroy_).Serialize(msg->BeginNestedMessage<::protozero::Message>(317));
  }

  // Field 318: fence_enable_signal
  if (_has_field_[318]) {
    (*fence_enable_signal_).Serialize(msg->BeginNestedMessage<::protozero::Message>(318));
  }

  // Field 319: fence_signaled
  if (_has_field_[319]) {
    (*fence_signaled_).Serialize(msg->BeginNestedMessage<::protozero::Message>(319));
  }

  // Field 320: clk_enable
  if (_has_field_[320]) {
    (*clk_enable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(320));
  }

  // Field 321: clk_disable
  if (_has_field_[321]) {
    (*clk_disable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(321));
  }

  // Field 322: clk_set_rate
  if (_has_field_[322]) {
    (*clk_set_rate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(322));
  }

  // Field 323: binder_transaction_alloc_buf
  if (_has_field_[323]) {
    (*binder_transaction_alloc_buf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(323));
  }

  // Field 324: signal_deliver
  if (_has_field_[324]) {
    (*signal_deliver_).Serialize(msg->BeginNestedMessage<::protozero::Message>(324));
  }

  // Field 325: signal_generate
  if (_has_field_[325]) {
    (*signal_generate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(325));
  }

  // Field 326: oom_score_adj_update
  if (_has_field_[326]) {
    (*oom_score_adj_update_).Serialize(msg->BeginNestedMessage<::protozero::Message>(326));
  }

  // Field 327: generic
  if (_has_field_[327]) {
    (*generic_).Serialize(msg->BeginNestedMessage<::protozero::Message>(327));
  }

  // Field 328: mm_event_record
  if (_has_field_[328]) {
    (*mm_event_record_).Serialize(msg->BeginNestedMessage<::protozero::Message>(328));
  }

  // Field 329: sys_enter
  if (_has_field_[329]) {
    (*sys_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(329));
  }

  // Field 330: sys_exit
  if (_has_field_[330]) {
    (*sys_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(330));
  }

  // Field 331: zero
  if (_has_field_[331]) {
    (*zero_).Serialize(msg->BeginNestedMessage<::protozero::Message>(331));
  }

  // Field 332: gpu_frequency
  if (_has_field_[332]) {
    (*gpu_frequency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(332));
  }

  // Field 333: sde_tracing_mark_write
  if (_has_field_[333]) {
    (*sde_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(333));
  }

  // Field 334: mark_victim
  if (_has_field_[334]) {
    (*mark_victim_).Serialize(msg->BeginNestedMessage<::protozero::Message>(334));
  }

  // Field 335: ion_stat
  if (_has_field_[335]) {
    (*ion_stat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(335));
  }

  // Field 336: ion_buffer_create
  if (_has_field_[336]) {
    (*ion_buffer_create_).Serialize(msg->BeginNestedMessage<::protozero::Message>(336));
  }

  // Field 337: ion_buffer_destroy
  if (_has_field_[337]) {
    (*ion_buffer_destroy_).Serialize(msg->BeginNestedMessage<::protozero::Message>(337));
  }

  // Field 338: scm_call_start
  if (_has_field_[338]) {
    (*scm_call_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(338));
  }

  // Field 339: scm_call_end
  if (_has_field_[339]) {
    (*scm_call_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(339));
  }

  // Field 340: gpu_mem_total
  if (_has_field_[340]) {
    (*gpu_mem_total_).Serialize(msg->BeginNestedMessage<::protozero::Message>(340));
  }

  // Field 341: thermal_temperature
  if (_has_field_[341]) {
    (*thermal_temperature_).Serialize(msg->BeginNestedMessage<::protozero::Message>(341));
  }

  // Field 342: cdev_update
  if (_has_field_[342]) {
    (*cdev_update_).Serialize(msg->BeginNestedMessage<::protozero::Message>(342));
  }

  // Field 343: cpuhp_exit
  if (_has_field_[343]) {
    (*cpuhp_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(343));
  }

  // Field 344: cpuhp_multi_enter
  if (_has_field_[344]) {
    (*cpuhp_multi_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(344));
  }

  // Field 345: cpuhp_enter
  if (_has_field_[345]) {
    (*cpuhp_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(345));
  }

  // Field 346: cpuhp_latency
  if (_has_field_[346]) {
    (*cpuhp_latency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(346));
  }

  // Field 347: fastrpc_dma_stat
  if (_has_field_[347]) {
    (*fastrpc_dma_stat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(347));
  }

  // Field 348: dpu_tracing_mark_write
  if (_has_field_[348]) {
    (*dpu_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(348));
  }

  // Field 349: g2d_tracing_mark_write
  if (_has_field_[349]) {
    (*g2d_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(349));
  }

  // Field 350: mali_tracing_mark_write
  if (_has_field_[350]) {
    (*mali_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(350));
  }

  // Field 351: dma_heap_stat
  if (_has_field_[351]) {
    (*dma_heap_stat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(351));
  }

  // Field 352: cpuhp_pause
  if (_has_field_[352]) {
    (*cpuhp_pause_).Serialize(msg->BeginNestedMessage<::protozero::Message>(352));
  }

  // Field 353: sched_pi_setprio
  if (_has_field_[353]) {
    (*sched_pi_setprio_).Serialize(msg->BeginNestedMessage<::protozero::Message>(353));
  }

  // Field 354: sde_sde_evtlog
  if (_has_field_[354]) {
    (*sde_sde_evtlog_).Serialize(msg->BeginNestedMessage<::protozero::Message>(354));
  }

  // Field 355: sde_sde_perf_calc_crtc
  if (_has_field_[355]) {
    (*sde_sde_perf_calc_crtc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(355));
  }

  // Field 356: sde_sde_perf_crtc_update
  if (_has_field_[356]) {
    (*sde_sde_perf_crtc_update_).Serialize(msg->BeginNestedMessage<::protozero::Message>(356));
  }

  // Field 357: sde_sde_perf_set_qos_luts
  if (_has_field_[357]) {
    (*sde_sde_perf_set_qos_luts_).Serialize(msg->BeginNestedMessage<::protozero::Message>(357));
  }

  // Field 358: sde_sde_perf_update_bus
  if (_has_field_[358]) {
    (*sde_sde_perf_update_bus_).Serialize(msg->BeginNestedMessage<::protozero::Message>(358));
  }

  // Field 359: rss_stat_throttled
  if (_has_field_[359]) {
    (*rss_stat_throttled_).Serialize(msg->BeginNestedMessage<::protozero::Message>(359));
  }

  // Field 360: netif_receive_skb
  if (_has_field_[360]) {
    (*netif_receive_skb_).Serialize(msg->BeginNestedMessage<::protozero::Message>(360));
  }

  // Field 361: net_dev_xmit
  if (_has_field_[361]) {
    (*net_dev_xmit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(361));
  }

  // Field 362: inet_sock_set_state
  if (_has_field_[362]) {
    (*inet_sock_set_state_).Serialize(msg->BeginNestedMessage<::protozero::Message>(362));
  }

  // Field 363: tcp_retransmit_skb
  if (_has_field_[363]) {
    (*tcp_retransmit_skb_).Serialize(msg->BeginNestedMessage<::protozero::Message>(363));
  }

  // Field 364: cros_ec_sensorhub_data
  if (_has_field_[364]) {
    (*cros_ec_sensorhub_data_).Serialize(msg->BeginNestedMessage<::protozero::Message>(364));
  }

  // Field 365: napi_gro_receive_entry
  if (_has_field_[365]) {
    (*napi_gro_receive_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(365));
  }

  // Field 366: napi_gro_receive_exit
  if (_has_field_[366]) {
    (*napi_gro_receive_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(366));
  }

  // Field 367: kfree_skb
  if (_has_field_[367]) {
    (*kfree_skb_).Serialize(msg->BeginNestedMessage<::protozero::Message>(367));
  }

  // Field 368: kvm_access_fault
  if (_has_field_[368]) {
    (*kvm_access_fault_).Serialize(msg->BeginNestedMessage<::protozero::Message>(368));
  }

  // Field 369: kvm_ack_irq
  if (_has_field_[369]) {
    (*kvm_ack_irq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(369));
  }

  // Field 370: kvm_age_hva
  if (_has_field_[370]) {
    (*kvm_age_hva_).Serialize(msg->BeginNestedMessage<::protozero::Message>(370));
  }

  // Field 371: kvm_age_page
  if (_has_field_[371]) {
    (*kvm_age_page_).Serialize(msg->BeginNestedMessage<::protozero::Message>(371));
  }

  // Field 372: kvm_arm_clear_debug
  if (_has_field_[372]) {
    (*kvm_arm_clear_debug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(372));
  }

  // Field 373: kvm_arm_set_dreg32
  if (_has_field_[373]) {
    (*kvm_arm_set_dreg32_).Serialize(msg->BeginNestedMessage<::protozero::Message>(373));
  }

  // Field 374: kvm_arm_set_regset
  if (_has_field_[374]) {
    (*kvm_arm_set_regset_).Serialize(msg->BeginNestedMessage<::protozero::Message>(374));
  }

  // Field 375: kvm_arm_setup_debug
  if (_has_field_[375]) {
    (*kvm_arm_setup_debug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(375));
  }

  // Field 376: kvm_entry
  if (_has_field_[376]) {
    (*kvm_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(376));
  }

  // Field 377: kvm_exit
  if (_has_field_[377]) {
    (*kvm_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(377));
  }

  // Field 378: kvm_fpu
  if (_has_field_[378]) {
    (*kvm_fpu_).Serialize(msg->BeginNestedMessage<::protozero::Message>(378));
  }

  // Field 379: kvm_get_timer_map
  if (_has_field_[379]) {
    (*kvm_get_timer_map_).Serialize(msg->BeginNestedMessage<::protozero::Message>(379));
  }

  // Field 380: kvm_guest_fault
  if (_has_field_[380]) {
    (*kvm_guest_fault_).Serialize(msg->BeginNestedMessage<::protozero::Message>(380));
  }

  // Field 381: kvm_handle_sys_reg
  if (_has_field_[381]) {
    (*kvm_handle_sys_reg_).Serialize(msg->BeginNestedMessage<::protozero::Message>(381));
  }

  // Field 382: kvm_hvc_arm64
  if (_has_field_[382]) {
    (*kvm_hvc_arm64_).Serialize(msg->BeginNestedMessage<::protozero::Message>(382));
  }

  // Field 383: kvm_irq_line
  if (_has_field_[383]) {
    (*kvm_irq_line_).Serialize(msg->BeginNestedMessage<::protozero::Message>(383));
  }

  // Field 384: kvm_mmio
  if (_has_field_[384]) {
    (*kvm_mmio_).Serialize(msg->BeginNestedMessage<::protozero::Message>(384));
  }

  // Field 385: kvm_mmio_emulate
  if (_has_field_[385]) {
    (*kvm_mmio_emulate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(385));
  }

  // Field 386: kvm_set_guest_debug
  if (_has_field_[386]) {
    (*kvm_set_guest_debug_).Serialize(msg->BeginNestedMessage<::protozero::Message>(386));
  }

  // Field 387: kvm_set_irq
  if (_has_field_[387]) {
    (*kvm_set_irq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(387));
  }

  // Field 388: kvm_set_spte_hva
  if (_has_field_[388]) {
    (*kvm_set_spte_hva_).Serialize(msg->BeginNestedMessage<::protozero::Message>(388));
  }

  // Field 389: kvm_set_way_flush
  if (_has_field_[389]) {
    (*kvm_set_way_flush_).Serialize(msg->BeginNestedMessage<::protozero::Message>(389));
  }

  // Field 390: kvm_sys_access
  if (_has_field_[390]) {
    (*kvm_sys_access_).Serialize(msg->BeginNestedMessage<::protozero::Message>(390));
  }

  // Field 391: kvm_test_age_hva
  if (_has_field_[391]) {
    (*kvm_test_age_hva_).Serialize(msg->BeginNestedMessage<::protozero::Message>(391));
  }

  // Field 392: kvm_timer_emulate
  if (_has_field_[392]) {
    (*kvm_timer_emulate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(392));
  }

  // Field 393: kvm_timer_hrtimer_expire
  if (_has_field_[393]) {
    (*kvm_timer_hrtimer_expire_).Serialize(msg->BeginNestedMessage<::protozero::Message>(393));
  }

  // Field 394: kvm_timer_restore_state
  if (_has_field_[394]) {
    (*kvm_timer_restore_state_).Serialize(msg->BeginNestedMessage<::protozero::Message>(394));
  }

  // Field 395: kvm_timer_save_state
  if (_has_field_[395]) {
    (*kvm_timer_save_state_).Serialize(msg->BeginNestedMessage<::protozero::Message>(395));
  }

  // Field 396: kvm_timer_update_irq
  if (_has_field_[396]) {
    (*kvm_timer_update_irq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(396));
  }

  // Field 397: kvm_toggle_cache
  if (_has_field_[397]) {
    (*kvm_toggle_cache_).Serialize(msg->BeginNestedMessage<::protozero::Message>(397));
  }

  // Field 398: kvm_unmap_hva_range
  if (_has_field_[398]) {
    (*kvm_unmap_hva_range_).Serialize(msg->BeginNestedMessage<::protozero::Message>(398));
  }

  // Field 399: kvm_userspace_exit
  if (_has_field_[399]) {
    (*kvm_userspace_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(399));
  }

  // Field 400: kvm_vcpu_wakeup
  if (_has_field_[400]) {
    (*kvm_vcpu_wakeup_).Serialize(msg->BeginNestedMessage<::protozero::Message>(400));
  }

  // Field 401: kvm_wfx_arm64
  if (_has_field_[401]) {
    (*kvm_wfx_arm64_).Serialize(msg->BeginNestedMessage<::protozero::Message>(401));
  }

  // Field 402: trap_reg
  if (_has_field_[402]) {
    (*trap_reg_).Serialize(msg->BeginNestedMessage<::protozero::Message>(402));
  }

  // Field 403: vgic_update_irq_pending
  if (_has_field_[403]) {
    (*vgic_update_irq_pending_).Serialize(msg->BeginNestedMessage<::protozero::Message>(403));
  }

  // Field 404: wakeup_source_activate
  if (_has_field_[404]) {
    (*wakeup_source_activate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(404));
  }

  // Field 405: wakeup_source_deactivate
  if (_has_field_[405]) {
    (*wakeup_source_deactivate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(405));
  }

  // Field 406: ufshcd_command
  if (_has_field_[406]) {
    (*ufshcd_command_).Serialize(msg->BeginNestedMessage<::protozero::Message>(406));
  }

  // Field 407: ufshcd_clk_gating
  if (_has_field_[407]) {
    (*ufshcd_clk_gating_).Serialize(msg->BeginNestedMessage<::protozero::Message>(407));
  }

  // Field 408: console
  if (_has_field_[408]) {
    (*console_).Serialize(msg->BeginNestedMessage<::protozero::Message>(408));
  }

  // Field 409: drm_vblank_event
  if (_has_field_[409]) {
    (*drm_vblank_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(409));
  }

  // Field 410: drm_vblank_event_delivered
  if (_has_field_[410]) {
    (*drm_vblank_event_delivered_).Serialize(msg->BeginNestedMessage<::protozero::Message>(410));
  }

  // Field 411: drm_sched_job
  if (_has_field_[411]) {
    (*drm_sched_job_).Serialize(msg->BeginNestedMessage<::protozero::Message>(411));
  }

  // Field 412: drm_run_job
  if (_has_field_[412]) {
    (*drm_run_job_).Serialize(msg->BeginNestedMessage<::protozero::Message>(412));
  }

  // Field 413: drm_sched_process_job
  if (_has_field_[413]) {
    (*drm_sched_process_job_).Serialize(msg->BeginNestedMessage<::protozero::Message>(413));
  }

  // Field 414: dma_fence_init
  if (_has_field_[414]) {
    (*dma_fence_init_).Serialize(msg->BeginNestedMessage<::protozero::Message>(414));
  }

  // Field 415: dma_fence_emit
  if (_has_field_[415]) {
    (*dma_fence_emit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(415));
  }

  // Field 416: dma_fence_signaled
  if (_has_field_[416]) {
    (*dma_fence_signaled_).Serialize(msg->BeginNestedMessage<::protozero::Message>(416));
  }

  // Field 417: dma_fence_wait_start
  if (_has_field_[417]) {
    (*dma_fence_wait_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(417));
  }

  // Field 418: dma_fence_wait_end
  if (_has_field_[418]) {
    (*dma_fence_wait_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(418));
  }

  // Field 419: f2fs_iostat
  if (_has_field_[419]) {
    (*f2fs_iostat_).Serialize(msg->BeginNestedMessage<::protozero::Message>(419));
  }

  // Field 420: f2fs_iostat_latency
  if (_has_field_[420]) {
    (*f2fs_iostat_latency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(420));
  }

  // Field 421: sched_cpu_util_cfs
  if (_has_field_[421]) {
    (*sched_cpu_util_cfs_).Serialize(msg->BeginNestedMessage<::protozero::Message>(421));
  }

  // Field 422: v4l2_qbuf
  if (_has_field_[422]) {
    (*v4l2_qbuf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(422));
  }

  // Field 423: v4l2_dqbuf
  if (_has_field_[423]) {
    (*v4l2_dqbuf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(423));
  }

  // Field 424: vb2_v4l2_buf_queue
  if (_has_field_[424]) {
    (*vb2_v4l2_buf_queue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(424));
  }

  // Field 425: vb2_v4l2_buf_done
  if (_has_field_[425]) {
    (*vb2_v4l2_buf_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(425));
  }

  // Field 426: vb2_v4l2_qbuf
  if (_has_field_[426]) {
    (*vb2_v4l2_qbuf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(426));
  }

  // Field 427: vb2_v4l2_dqbuf
  if (_has_field_[427]) {
    (*vb2_v4l2_dqbuf_).Serialize(msg->BeginNestedMessage<::protozero::Message>(427));
  }

  // Field 428: dsi_cmd_fifo_status
  if (_has_field_[428]) {
    (*dsi_cmd_fifo_status_).Serialize(msg->BeginNestedMessage<::protozero::Message>(428));
  }

  // Field 429: dsi_rx
  if (_has_field_[429]) {
    (*dsi_rx_).Serialize(msg->BeginNestedMessage<::protozero::Message>(429));
  }

  // Field 430: dsi_tx
  if (_has_field_[430]) {
    (*dsi_tx_).Serialize(msg->BeginNestedMessage<::protozero::Message>(430));
  }

  // Field 431: android_fs_dataread_end
  if (_has_field_[431]) {
    (*android_fs_dataread_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(431));
  }

  // Field 432: android_fs_dataread_start
  if (_has_field_[432]) {
    (*android_fs_dataread_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(432));
  }

  // Field 433: android_fs_datawrite_end
  if (_has_field_[433]) {
    (*android_fs_datawrite_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(433));
  }

  // Field 434: android_fs_datawrite_start
  if (_has_field_[434]) {
    (*android_fs_datawrite_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(434));
  }

  // Field 435: android_fs_fsync_end
  if (_has_field_[435]) {
    (*android_fs_fsync_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(435));
  }

  // Field 436: android_fs_fsync_start
  if (_has_field_[436]) {
    (*android_fs_fsync_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(436));
  }

  // Field 437: funcgraph_entry
  if (_has_field_[437]) {
    (*funcgraph_entry_).Serialize(msg->BeginNestedMessage<::protozero::Message>(437));
  }

  // Field 438: funcgraph_exit
  if (_has_field_[438]) {
    (*funcgraph_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(438));
  }

  // Field 439: virtio_video_cmd
  if (_has_field_[439]) {
    (*virtio_video_cmd_).Serialize(msg->BeginNestedMessage<::protozero::Message>(439));
  }

  // Field 440: virtio_video_cmd_done
  if (_has_field_[440]) {
    (*virtio_video_cmd_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(440));
  }

  // Field 441: virtio_video_resource_queue
  if (_has_field_[441]) {
    (*virtio_video_resource_queue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(441));
  }

  // Field 442: virtio_video_resource_queue_done
  if (_has_field_[442]) {
    (*virtio_video_resource_queue_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(442));
  }

  // Field 443: mm_shrink_slab_start
  if (_has_field_[443]) {
    (*mm_shrink_slab_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(443));
  }

  // Field 444: mm_shrink_slab_end
  if (_has_field_[444]) {
    (*mm_shrink_slab_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(444));
  }

  // Field 445: trusty_smc
  if (_has_field_[445]) {
    (*trusty_smc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(445));
  }

  // Field 446: trusty_smc_done
  if (_has_field_[446]) {
    (*trusty_smc_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(446));
  }

  // Field 447: trusty_std_call32
  if (_has_field_[447]) {
    (*trusty_std_call32_).Serialize(msg->BeginNestedMessage<::protozero::Message>(447));
  }

  // Field 448: trusty_std_call32_done
  if (_has_field_[448]) {
    (*trusty_std_call32_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(448));
  }

  // Field 449: trusty_share_memory
  if (_has_field_[449]) {
    (*trusty_share_memory_).Serialize(msg->BeginNestedMessage<::protozero::Message>(449));
  }

  // Field 450: trusty_share_memory_done
  if (_has_field_[450]) {
    (*trusty_share_memory_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(450));
  }

  // Field 451: trusty_reclaim_memory
  if (_has_field_[451]) {
    (*trusty_reclaim_memory_).Serialize(msg->BeginNestedMessage<::protozero::Message>(451));
  }

  // Field 452: trusty_reclaim_memory_done
  if (_has_field_[452]) {
    (*trusty_reclaim_memory_done_).Serialize(msg->BeginNestedMessage<::protozero::Message>(452));
  }

  // Field 453: trusty_irq
  if (_has_field_[453]) {
    (*trusty_irq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(453));
  }

  // Field 454: trusty_ipc_handle_event
  if (_has_field_[454]) {
    (*trusty_ipc_handle_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(454));
  }

  // Field 455: trusty_ipc_connect
  if (_has_field_[455]) {
    (*trusty_ipc_connect_).Serialize(msg->BeginNestedMessage<::protozero::Message>(455));
  }

  // Field 456: trusty_ipc_connect_end
  if (_has_field_[456]) {
    (*trusty_ipc_connect_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(456));
  }

  // Field 457: trusty_ipc_write
  if (_has_field_[457]) {
    (*trusty_ipc_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(457));
  }

  // Field 458: trusty_ipc_poll
  if (_has_field_[458]) {
    (*trusty_ipc_poll_).Serialize(msg->BeginNestedMessage<::protozero::Message>(458));
  }

  // Field 460: trusty_ipc_read
  if (_has_field_[460]) {
    (*trusty_ipc_read_).Serialize(msg->BeginNestedMessage<::protozero::Message>(460));
  }

  // Field 461: trusty_ipc_read_end
  if (_has_field_[461]) {
    (*trusty_ipc_read_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(461));
  }

  // Field 462: trusty_ipc_rx
  if (_has_field_[462]) {
    (*trusty_ipc_rx_).Serialize(msg->BeginNestedMessage<::protozero::Message>(462));
  }

  // Field 464: trusty_enqueue_nop
  if (_has_field_[464]) {
    (*trusty_enqueue_nop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(464));
  }

  // Field 465: cma_alloc_start
  if (_has_field_[465]) {
    (*cma_alloc_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(465));
  }

  // Field 466: cma_alloc_info
  if (_has_field_[466]) {
    (*cma_alloc_info_).Serialize(msg->BeginNestedMessage<::protozero::Message>(466));
  }

  // Field 467: lwis_tracing_mark_write
  if (_has_field_[467]) {
    (*lwis_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(467));
  }

  // Field 468: virtio_gpu_cmd_queue
  if (_has_field_[468]) {
    (*virtio_gpu_cmd_queue_).Serialize(msg->BeginNestedMessage<::protozero::Message>(468));
  }

  // Field 469: virtio_gpu_cmd_response
  if (_has_field_[469]) {
    (*virtio_gpu_cmd_response_).Serialize(msg->BeginNestedMessage<::protozero::Message>(469));
  }

  // Field 470: mali_mali_kcpu_cqs_set
  if (_has_field_[470]) {
    (*mali_mali_kcpu_cqs_set_).Serialize(msg->BeginNestedMessage<::protozero::Message>(470));
  }

  // Field 471: mali_mali_kcpu_cqs_wait_start
  if (_has_field_[471]) {
    (*mali_mali_kcpu_cqs_wait_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(471));
  }

  // Field 472: mali_mali_kcpu_cqs_wait_end
  if (_has_field_[472]) {
    (*mali_mali_kcpu_cqs_wait_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(472));
  }

  // Field 473: mali_mali_kcpu_fence_signal
  if (_has_field_[473]) {
    (*mali_mali_kcpu_fence_signal_).Serialize(msg->BeginNestedMessage<::protozero::Message>(473));
  }

  // Field 474: mali_mali_kcpu_fence_wait_start
  if (_has_field_[474]) {
    (*mali_mali_kcpu_fence_wait_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(474));
  }

  // Field 475: mali_mali_kcpu_fence_wait_end
  if (_has_field_[475]) {
    (*mali_mali_kcpu_fence_wait_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(475));
  }

  // Field 476: hyp_enter
  if (_has_field_[476]) {
    (*hyp_enter_).Serialize(msg->BeginNestedMessage<::protozero::Message>(476));
  }

  // Field 477: hyp_exit
  if (_has_field_[477]) {
    (*hyp_exit_).Serialize(msg->BeginNestedMessage<::protozero::Message>(477));
  }

  // Field 478: host_hcall
  if (_has_field_[478]) {
    (*host_hcall_).Serialize(msg->BeginNestedMessage<::protozero::Message>(478));
  }

  // Field 479: host_smc
  if (_has_field_[479]) {
    (*host_smc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(479));
  }

  // Field 480: host_mem_abort
  if (_has_field_[480]) {
    (*host_mem_abort_).Serialize(msg->BeginNestedMessage<::protozero::Message>(480));
  }

  // Field 481: suspend_resume_minimal
  if (_has_field_[481]) {
    (*suspend_resume_minimal_).Serialize(msg->BeginNestedMessage<::protozero::Message>(481));
  }

  // Field 482: mali_mali_csf_interrupt_start
  if (_has_field_[482]) {
    (*mali_mali_csf_interrupt_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(482));
  }

  // Field 483: mali_mali_csf_interrupt_end
  if (_has_field_[483]) {
    (*mali_mali_csf_interrupt_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(483));
  }

  // Field 484: samsung_tracing_mark_write
  if (_has_field_[484]) {
    (*samsung_tracing_mark_write_).Serialize(msg->BeginNestedMessage<::protozero::Message>(484));
  }

  // Field 485: binder_command
  if (_has_field_[485]) {
    (*binder_command_).Serialize(msg->BeginNestedMessage<::protozero::Message>(485));
  }

  // Field 486: binder_return
  if (_has_field_[486]) {
    (*binder_return_).Serialize(msg->BeginNestedMessage<::protozero::Message>(486));
  }

  // Field 487: sched_switch_with_ctrs
  if (_has_field_[487]) {
    (*sched_switch_with_ctrs_).Serialize(msg->BeginNestedMessage<::protozero::Message>(487));
  }

  // Field 488: gpu_work_period
  if (_has_field_[488]) {
    (*gpu_work_period_).Serialize(msg->BeginNestedMessage<::protozero::Message>(488));
  }

  // Field 489: rpm_status
  if (_has_field_[489]) {
    (*rpm_status_).Serialize(msg->BeginNestedMessage<::protozero::Message>(489));
  }

  // Field 490: panel_write_generic
  if (_has_field_[490]) {
    (*panel_write_generic_).Serialize(msg->BeginNestedMessage<::protozero::Message>(490));
  }

  // Field 491: sched_migrate_task
  if (_has_field_[491]) {
    (*sched_migrate_task_).Serialize(msg->BeginNestedMessage<::protozero::Message>(491));
  }

  // Field 492: dpu_dsi_cmd_fifo_status
  if (_has_field_[492]) {
    (*dpu_dsi_cmd_fifo_status_).Serialize(msg->BeginNestedMessage<::protozero::Message>(492));
  }

  // Field 493: dpu_dsi_rx
  if (_has_field_[493]) {
    (*dpu_dsi_rx_).Serialize(msg->BeginNestedMessage<::protozero::Message>(493));
  }

  // Field 494: dpu_dsi_tx
  if (_has_field_[494]) {
    (*dpu_dsi_tx_).Serialize(msg->BeginNestedMessage<::protozero::Message>(494));
  }

  // Field 495: f2fs_background_gc
  if (_has_field_[495]) {
    (*f2fs_background_gc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(495));
  }

  // Field 496: f2fs_gc_begin
  if (_has_field_[496]) {
    (*f2fs_gc_begin_).Serialize(msg->BeginNestedMessage<::protozero::Message>(496));
  }

  // Field 497: f2fs_gc_end
  if (_has_field_[497]) {
    (*f2fs_gc_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(497));
  }

  // Field 498: fastrpc_dma_free
  if (_has_field_[498]) {
    (*fastrpc_dma_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(498));
  }

  // Field 499: fastrpc_dma_alloc
  if (_has_field_[499]) {
    (*fastrpc_dma_alloc_).Serialize(msg->BeginNestedMessage<::protozero::Message>(499));
  }

  // Field 500: fastrpc_dma_unmap
  if (_has_field_[500]) {
    (*fastrpc_dma_unmap_).Serialize(msg->BeginNestedMessage<::protozero::Message>(500));
  }

  // Field 501: fastrpc_dma_map
  if (_has_field_[501]) {
    (*fastrpc_dma_map_).Serialize(msg->BeginNestedMessage<::protozero::Message>(501));
  }

  // Field 502: google_icc_event
  if (_has_field_[502]) {
    (*google_icc_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(502));
  }

  // Field 503: google_irm_event
  if (_has_field_[503]) {
    (*google_irm_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(503));
  }

  // Field 504: device_pm_callback_start
  if (_has_field_[504]) {
    (*device_pm_callback_start_).Serialize(msg->BeginNestedMessage<::protozero::Message>(504));
  }

  // Field 505: device_pm_callback_end
  if (_has_field_[505]) {
    (*device_pm_callback_end_).Serialize(msg->BeginNestedMessage<::protozero::Message>(505));
  }

  // Field 506: thermal_exynos_acpm_bulk
  if (_has_field_[506]) {
    (*thermal_exynos_acpm_bulk_).Serialize(msg->BeginNestedMessage<::protozero::Message>(506));
  }

  // Field 507: thermal_exynos_acpm_high_overhead
  if (_has_field_[507]) {
    (*thermal_exynos_acpm_high_overhead_).Serialize(msg->BeginNestedMessage<::protozero::Message>(507));
  }

  // Field 508: dcvsh_freq
  if (_has_field_[508]) {
    (*dcvsh_freq_).Serialize(msg->BeginNestedMessage<::protozero::Message>(508));
  }

  // Field 509: kgsl_gpu_frequency
  if (_has_field_[509]) {
    (*kgsl_gpu_frequency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(509));
  }

  // Field 510: mali_mali_pm_mcu_hctl_cores_down_scale_notify_pend
  if (_has_field_[510]) {
    (*mali_mali_pm_mcu_hctl_cores_down_scale_notify_pend_).Serialize(msg->BeginNestedMessage<::protozero::Message>(510));
  }

  // Field 511: mali_mali_pm_mcu_hctl_cores_notify_pend
  if (_has_field_[511]) {
    (*mali_mali_pm_mcu_hctl_cores_notify_pend_).Serialize(msg->BeginNestedMessage<::protozero::Message>(511));
  }

  // Field 512: mali_mali_pm_mcu_hctl_core_inactive_pend
  if (_has_field_[512]) {
    (*mali_mali_pm_mcu_hctl_core_inactive_pend_).Serialize(msg->BeginNestedMessage<::protozero::Message>(512));
  }

  // Field 513: mali_mali_pm_mcu_hctl_mcu_on_recheck
  if (_has_field_[513]) {
    (*mali_mali_pm_mcu_hctl_mcu_on_recheck_).Serialize(msg->BeginNestedMessage<::protozero::Message>(513));
  }

  // Field 514: mali_mali_pm_mcu_hctl_shaders_core_off_pend
  if (_has_field_[514]) {
    (*mali_mali_pm_mcu_hctl_shaders_core_off_pend_).Serialize(msg->BeginNestedMessage<::protozero::Message>(514));
  }

  // Field 515: mali_mali_pm_mcu_hctl_shaders_pend_off
  if (_has_field_[515]) {
    (*mali_mali_pm_mcu_hctl_shaders_pend_off_).Serialize(msg->BeginNestedMessage<::protozero::Message>(515));
  }

  // Field 516: mali_mali_pm_mcu_hctl_shaders_pend_on
  if (_has_field_[516]) {
    (*mali_mali_pm_mcu_hctl_shaders_pend_on_).Serialize(msg->BeginNestedMessage<::protozero::Message>(516));
  }

  // Field 517: mali_mali_pm_mcu_hctl_shaders_ready_off
  if (_has_field_[517]) {
    (*mali_mali_pm_mcu_hctl_shaders_ready_off_).Serialize(msg->BeginNestedMessage<::protozero::Message>(517));
  }

  // Field 518: mali_mali_pm_mcu_in_sleep
  if (_has_field_[518]) {
    (*mali_mali_pm_mcu_in_sleep_).Serialize(msg->BeginNestedMessage<::protozero::Message>(518));
  }

  // Field 519: mali_mali_pm_mcu_off
  if (_has_field_[519]) {
    (*mali_mali_pm_mcu_off_).Serialize(msg->BeginNestedMessage<::protozero::Message>(519));
  }

  // Field 520: mali_mali_pm_mcu_on
  if (_has_field_[520]) {
    (*mali_mali_pm_mcu_on_).Serialize(msg->BeginNestedMessage<::protozero::Message>(520));
  }

  // Field 521: mali_mali_pm_mcu_on_core_attr_update_pend
  if (_has_field_[521]) {
    (*mali_mali_pm_mcu_on_core_attr_update_pend_).Serialize(msg->BeginNestedMessage<::protozero::Message>(521));
  }

  // Field 522: mali_mali_pm_mcu_on_glb_reinit_pend
  if (_has_field_[522]) {
    (*mali_mali_pm_mcu_on_glb_reinit_pend_).Serialize(msg->BeginNestedMessage<::protozero::Message>(522));
  }

  // Field 523: mali_mali_pm_mcu_on_halt
  if (_has_field_[523]) {
    (*mali_mali_pm_mcu_on_halt_).Serialize(msg->BeginNestedMessage<::protozero::Message>(523));
  }

  // Field 524: mali_mali_pm_mcu_on_hwcnt_disable
  if (_has_field_[524]) {
    (*mali_mali_pm_mcu_on_hwcnt_disable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(524));
  }

  // Field 525: mali_mali_pm_mcu_on_hwcnt_enable
  if (_has_field_[525]) {
    (*mali_mali_pm_mcu_on_hwcnt_enable_).Serialize(msg->BeginNestedMessage<::protozero::Message>(525));
  }

  // Field 526: mali_mali_pm_mcu_on_pend_halt
  if (_has_field_[526]) {
    (*mali_mali_pm_mcu_on_pend_halt_).Serialize(msg->BeginNestedMessage<::protozero::Message>(526));
  }

  // Field 527: mali_mali_pm_mcu_on_pend_sleep
  if (_has_field_[527]) {
    (*mali_mali_pm_mcu_on_pend_sleep_).Serialize(msg->BeginNestedMessage<::protozero::Message>(527));
  }

  // Field 528: mali_mali_pm_mcu_on_sleep_initiate
  if (_has_field_[528]) {
    (*mali_mali_pm_mcu_on_sleep_initiate_).Serialize(msg->BeginNestedMessage<::protozero::Message>(528));
  }

  // Field 529: mali_mali_pm_mcu_pend_off
  if (_has_field_[529]) {
    (*mali_mali_pm_mcu_pend_off_).Serialize(msg->BeginNestedMessage<::protozero::Message>(529));
  }

  // Field 530: mali_mali_pm_mcu_pend_on_reload
  if (_has_field_[530]) {
    (*mali_mali_pm_mcu_pend_on_reload_).Serialize(msg->BeginNestedMessage<::protozero::Message>(530));
  }

  // Field 531: mali_mali_pm_mcu_power_down
  if (_has_field_[531]) {
    (*mali_mali_pm_mcu_power_down_).Serialize(msg->BeginNestedMessage<::protozero::Message>(531));
  }

  // Field 532: mali_mali_pm_mcu_reset_wait
  if (_has_field_[532]) {
    (*mali_mali_pm_mcu_reset_wait_).Serialize(msg->BeginNestedMessage<::protozero::Message>(532));
  }

  // Field 533: bcl_irq_trigger
  if (_has_field_[533]) {
    (*bcl_irq_trigger_).Serialize(msg->BeginNestedMessage<::protozero::Message>(533));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
