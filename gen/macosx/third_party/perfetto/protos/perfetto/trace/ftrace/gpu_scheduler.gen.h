// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_GPU_SCHEDULER_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_GPU_SCHEDULER_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class DrmSchedProcessJobFtraceEvent;
class DrmRunJobFtraceEvent;
class DrmSchedJobFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT DrmSchedProcessJobFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kFenceFieldNumber = 1,
  };

  DrmSchedProcessJobFtraceEvent();
  ~DrmSchedProcessJobFtraceEvent() override;
  DrmSchedProcessJobFtraceEvent(DrmSchedProcessJobFtraceEvent&&) noexcept;
  DrmSchedProcessJobFtraceEvent& operator=(DrmSchedProcessJobFtraceEvent&&);
  DrmSchedProcessJobFtraceEvent(const DrmSchedProcessJobFtraceEvent&);
  DrmSchedProcessJobFtraceEvent& operator=(const DrmSchedProcessJobFtraceEvent&);
  bool operator==(const DrmSchedProcessJobFtraceEvent&) const;
  bool operator!=(const DrmSchedProcessJobFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_fence() const { return _has_field_[1]; }
  uint64_t fence() const { return fence_; }
  void set_fence(uint64_t value) { fence_ = value; _has_field_.set(1); }

 private:
  uint64_t fence_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DrmRunJobFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEntityFieldNumber = 1,
    kFenceFieldNumber = 2,
    kHwJobCountFieldNumber = 3,
    kIdFieldNumber = 4,
    kJobCountFieldNumber = 5,
    kNameFieldNumber = 6,
  };

  DrmRunJobFtraceEvent();
  ~DrmRunJobFtraceEvent() override;
  DrmRunJobFtraceEvent(DrmRunJobFtraceEvent&&) noexcept;
  DrmRunJobFtraceEvent& operator=(DrmRunJobFtraceEvent&&);
  DrmRunJobFtraceEvent(const DrmRunJobFtraceEvent&);
  DrmRunJobFtraceEvent& operator=(const DrmRunJobFtraceEvent&);
  bool operator==(const DrmRunJobFtraceEvent&) const;
  bool operator!=(const DrmRunJobFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_entity() const { return _has_field_[1]; }
  uint64_t entity() const { return entity_; }
  void set_entity(uint64_t value) { entity_ = value; _has_field_.set(1); }

  bool has_fence() const { return _has_field_[2]; }
  uint64_t fence() const { return fence_; }
  void set_fence(uint64_t value) { fence_ = value; _has_field_.set(2); }

  bool has_hw_job_count() const { return _has_field_[3]; }
  int32_t hw_job_count() const { return hw_job_count_; }
  void set_hw_job_count(int32_t value) { hw_job_count_ = value; _has_field_.set(3); }

  bool has_id() const { return _has_field_[4]; }
  uint64_t id() const { return id_; }
  void set_id(uint64_t value) { id_ = value; _has_field_.set(4); }

  bool has_job_count() const { return _has_field_[5]; }
  uint32_t job_count() const { return job_count_; }
  void set_job_count(uint32_t value) { job_count_ = value; _has_field_.set(5); }

  bool has_name() const { return _has_field_[6]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(6); }

 private:
  uint64_t entity_{};
  uint64_t fence_{};
  int32_t hw_job_count_{};
  uint64_t id_{};
  uint32_t job_count_{};
  std::string name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DrmSchedJobFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEntityFieldNumber = 1,
    kFenceFieldNumber = 2,
    kHwJobCountFieldNumber = 3,
    kIdFieldNumber = 4,
    kJobCountFieldNumber = 5,
    kNameFieldNumber = 6,
  };

  DrmSchedJobFtraceEvent();
  ~DrmSchedJobFtraceEvent() override;
  DrmSchedJobFtraceEvent(DrmSchedJobFtraceEvent&&) noexcept;
  DrmSchedJobFtraceEvent& operator=(DrmSchedJobFtraceEvent&&);
  DrmSchedJobFtraceEvent(const DrmSchedJobFtraceEvent&);
  DrmSchedJobFtraceEvent& operator=(const DrmSchedJobFtraceEvent&);
  bool operator==(const DrmSchedJobFtraceEvent&) const;
  bool operator!=(const DrmSchedJobFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_entity() const { return _has_field_[1]; }
  uint64_t entity() const { return entity_; }
  void set_entity(uint64_t value) { entity_ = value; _has_field_.set(1); }

  bool has_fence() const { return _has_field_[2]; }
  uint64_t fence() const { return fence_; }
  void set_fence(uint64_t value) { fence_ = value; _has_field_.set(2); }

  bool has_hw_job_count() const { return _has_field_[3]; }
  int32_t hw_job_count() const { return hw_job_count_; }
  void set_hw_job_count(int32_t value) { hw_job_count_ = value; _has_field_.set(3); }

  bool has_id() const { return _has_field_[4]; }
  uint64_t id() const { return id_; }
  void set_id(uint64_t value) { id_ = value; _has_field_.set(4); }

  bool has_job_count() const { return _has_field_[5]; }
  uint32_t job_count() const { return job_count_; }
  void set_job_count(uint32_t value) { job_count_ = value; _has_field_.set(5); }

  bool has_name() const { return _has_field_[6]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(6); }

 private:
  uint64_t entity_{};
  uint64_t fence_{};
  int32_t hw_job_count_{};
  uint64_t id_{};
  uint32_t job_count_{};
  std::string name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_GPU_SCHEDULER_PROTO_CPP_H_
