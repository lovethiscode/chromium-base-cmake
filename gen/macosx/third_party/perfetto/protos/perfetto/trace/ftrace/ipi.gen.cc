#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/ipi.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

IpiRaiseFtraceEvent::IpiRaiseFtraceEvent() = default;
IpiRaiseFtraceEvent::~IpiRaiseFtraceEvent() = default;
IpiRaiseFtraceEvent::IpiRaiseFtraceEvent(const IpiRaiseFtraceEvent&) = default;
IpiRaiseFtraceEvent& IpiRaiseFtraceEvent::operator=(const IpiRaiseFtraceEvent&) = default;
IpiRaiseFtraceEvent::IpiRaiseFtraceEvent(IpiRaiseFtraceEvent&&) noexcept = default;
IpiRaiseFtraceEvent& IpiRaiseFtraceEvent::operator=(IpiRaiseFtraceEvent&&) = default;

bool IpiRaiseFtraceEvent::operator==(const IpiRaiseFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(target_cpus_, other.target_cpus_)
   && ::protozero::internal::gen_helpers::EqualsField(reason_, other.reason_);
}

bool IpiRaiseFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* target_cpus */:
        field.get(&target_cpus_);
        break;
      case 2 /* reason */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &reason_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string IpiRaiseFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> IpiRaiseFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void IpiRaiseFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: target_cpus
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, target_cpus_, msg);
  }

  // Field 2: reason
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, reason_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


IpiExitFtraceEvent::IpiExitFtraceEvent() = default;
IpiExitFtraceEvent::~IpiExitFtraceEvent() = default;
IpiExitFtraceEvent::IpiExitFtraceEvent(const IpiExitFtraceEvent&) = default;
IpiExitFtraceEvent& IpiExitFtraceEvent::operator=(const IpiExitFtraceEvent&) = default;
IpiExitFtraceEvent::IpiExitFtraceEvent(IpiExitFtraceEvent&&) noexcept = default;
IpiExitFtraceEvent& IpiExitFtraceEvent::operator=(IpiExitFtraceEvent&&) = default;

bool IpiExitFtraceEvent::operator==(const IpiExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(reason_, other.reason_);
}

bool IpiExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* reason */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &reason_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string IpiExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> IpiExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void IpiExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: reason
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, reason_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


IpiEntryFtraceEvent::IpiEntryFtraceEvent() = default;
IpiEntryFtraceEvent::~IpiEntryFtraceEvent() = default;
IpiEntryFtraceEvent::IpiEntryFtraceEvent(const IpiEntryFtraceEvent&) = default;
IpiEntryFtraceEvent& IpiEntryFtraceEvent::operator=(const IpiEntryFtraceEvent&) = default;
IpiEntryFtraceEvent::IpiEntryFtraceEvent(IpiEntryFtraceEvent&&) noexcept = default;
IpiEntryFtraceEvent& IpiEntryFtraceEvent::operator=(IpiEntryFtraceEvent&&) = default;

bool IpiEntryFtraceEvent::operator==(const IpiEntryFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(reason_, other.reason_);
}

bool IpiEntryFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* reason */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &reason_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string IpiEntryFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> IpiEntryFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void IpiEntryFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: reason
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, reason_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
