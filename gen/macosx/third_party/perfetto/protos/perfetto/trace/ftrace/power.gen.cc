#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/power.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

DevicePmCallbackEndFtraceEvent::DevicePmCallbackEndFtraceEvent() = default;
DevicePmCallbackEndFtraceEvent::~DevicePmCallbackEndFtraceEvent() = default;
DevicePmCallbackEndFtraceEvent::DevicePmCallbackEndFtraceEvent(const DevicePmCallbackEndFtraceEvent&) = default;
DevicePmCallbackEndFtraceEvent& DevicePmCallbackEndFtraceEvent::operator=(const DevicePmCallbackEndFtraceEvent&) = default;
DevicePmCallbackEndFtraceEvent::DevicePmCallbackEndFtraceEvent(DevicePmCallbackEndFtraceEvent&&) noexcept = default;
DevicePmCallbackEndFtraceEvent& DevicePmCallbackEndFtraceEvent::operator=(DevicePmCallbackEndFtraceEvent&&) = default;

bool DevicePmCallbackEndFtraceEvent::operator==(const DevicePmCallbackEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(device_, other.device_)
   && ::protozero::internal::gen_helpers::EqualsField(driver_, other.driver_)
   && ::protozero::internal::gen_helpers::EqualsField(error_, other.error_);
}

bool DevicePmCallbackEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* device */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &device_);
        break;
      case 2 /* driver */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &driver_);
        break;
      case 3 /* error */:
        field.get(&error_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DevicePmCallbackEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DevicePmCallbackEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DevicePmCallbackEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: device
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, device_, msg);
  }

  // Field 2: driver
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, driver_, msg);
  }

  // Field 3: error
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, error_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DevicePmCallbackStartFtraceEvent::DevicePmCallbackStartFtraceEvent() = default;
DevicePmCallbackStartFtraceEvent::~DevicePmCallbackStartFtraceEvent() = default;
DevicePmCallbackStartFtraceEvent::DevicePmCallbackStartFtraceEvent(const DevicePmCallbackStartFtraceEvent&) = default;
DevicePmCallbackStartFtraceEvent& DevicePmCallbackStartFtraceEvent::operator=(const DevicePmCallbackStartFtraceEvent&) = default;
DevicePmCallbackStartFtraceEvent::DevicePmCallbackStartFtraceEvent(DevicePmCallbackStartFtraceEvent&&) noexcept = default;
DevicePmCallbackStartFtraceEvent& DevicePmCallbackStartFtraceEvent::operator=(DevicePmCallbackStartFtraceEvent&&) = default;

bool DevicePmCallbackStartFtraceEvent::operator==(const DevicePmCallbackStartFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(device_, other.device_)
   && ::protozero::internal::gen_helpers::EqualsField(driver_, other.driver_)
   && ::protozero::internal::gen_helpers::EqualsField(parent_, other.parent_)
   && ::protozero::internal::gen_helpers::EqualsField(pm_ops_, other.pm_ops_)
   && ::protozero::internal::gen_helpers::EqualsField(event_, other.event_);
}

bool DevicePmCallbackStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* device */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &device_);
        break;
      case 2 /* driver */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &driver_);
        break;
      case 3 /* parent */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &parent_);
        break;
      case 4 /* pm_ops */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &pm_ops_);
        break;
      case 5 /* event */:
        field.get(&event_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DevicePmCallbackStartFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DevicePmCallbackStartFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DevicePmCallbackStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: device
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, device_, msg);
  }

  // Field 2: driver
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, driver_, msg);
  }

  // Field 3: parent
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, parent_, msg);
  }

  // Field 4: pm_ops
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, pm_ops_, msg);
  }

  // Field 5: event
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, event_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


GpuWorkPeriodFtraceEvent::GpuWorkPeriodFtraceEvent() = default;
GpuWorkPeriodFtraceEvent::~GpuWorkPeriodFtraceEvent() = default;
GpuWorkPeriodFtraceEvent::GpuWorkPeriodFtraceEvent(const GpuWorkPeriodFtraceEvent&) = default;
GpuWorkPeriodFtraceEvent& GpuWorkPeriodFtraceEvent::operator=(const GpuWorkPeriodFtraceEvent&) = default;
GpuWorkPeriodFtraceEvent::GpuWorkPeriodFtraceEvent(GpuWorkPeriodFtraceEvent&&) noexcept = default;
GpuWorkPeriodFtraceEvent& GpuWorkPeriodFtraceEvent::operator=(GpuWorkPeriodFtraceEvent&&) = default;

bool GpuWorkPeriodFtraceEvent::operator==(const GpuWorkPeriodFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_id_, other.gpu_id_)
   && ::protozero::internal::gen_helpers::EqualsField(uid_, other.uid_)
   && ::protozero::internal::gen_helpers::EqualsField(start_time_ns_, other.start_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(end_time_ns_, other.end_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(total_active_duration_ns_, other.total_active_duration_ns_);
}

bool GpuWorkPeriodFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* gpu_id */:
        field.get(&gpu_id_);
        break;
      case 2 /* uid */:
        field.get(&uid_);
        break;
      case 3 /* start_time_ns */:
        field.get(&start_time_ns_);
        break;
      case 4 /* end_time_ns */:
        field.get(&end_time_ns_);
        break;
      case 5 /* total_active_duration_ns */:
        field.get(&total_active_duration_ns_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GpuWorkPeriodFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GpuWorkPeriodFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GpuWorkPeriodFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: gpu_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, gpu_id_, msg);
  }

  // Field 2: uid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, uid_, msg);
  }

  // Field 3: start_time_ns
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, start_time_ns_, msg);
  }

  // Field 4: end_time_ns
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, end_time_ns_, msg);
  }

  // Field 5: total_active_duration_ns
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, total_active_duration_ns_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


WakeupSourceDeactivateFtraceEvent::WakeupSourceDeactivateFtraceEvent() = default;
WakeupSourceDeactivateFtraceEvent::~WakeupSourceDeactivateFtraceEvent() = default;
WakeupSourceDeactivateFtraceEvent::WakeupSourceDeactivateFtraceEvent(const WakeupSourceDeactivateFtraceEvent&) = default;
WakeupSourceDeactivateFtraceEvent& WakeupSourceDeactivateFtraceEvent::operator=(const WakeupSourceDeactivateFtraceEvent&) = default;
WakeupSourceDeactivateFtraceEvent::WakeupSourceDeactivateFtraceEvent(WakeupSourceDeactivateFtraceEvent&&) noexcept = default;
WakeupSourceDeactivateFtraceEvent& WakeupSourceDeactivateFtraceEvent::operator=(WakeupSourceDeactivateFtraceEvent&&) = default;

bool WakeupSourceDeactivateFtraceEvent::operator==(const WakeupSourceDeactivateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_);
}

bool WakeupSourceDeactivateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* state */:
        field.get(&state_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string WakeupSourceDeactivateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> WakeupSourceDeactivateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void WakeupSourceDeactivateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: state
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


WakeupSourceActivateFtraceEvent::WakeupSourceActivateFtraceEvent() = default;
WakeupSourceActivateFtraceEvent::~WakeupSourceActivateFtraceEvent() = default;
WakeupSourceActivateFtraceEvent::WakeupSourceActivateFtraceEvent(const WakeupSourceActivateFtraceEvent&) = default;
WakeupSourceActivateFtraceEvent& WakeupSourceActivateFtraceEvent::operator=(const WakeupSourceActivateFtraceEvent&) = default;
WakeupSourceActivateFtraceEvent::WakeupSourceActivateFtraceEvent(WakeupSourceActivateFtraceEvent&&) noexcept = default;
WakeupSourceActivateFtraceEvent& WakeupSourceActivateFtraceEvent::operator=(WakeupSourceActivateFtraceEvent&&) = default;

bool WakeupSourceActivateFtraceEvent::operator==(const WakeupSourceActivateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_);
}

bool WakeupSourceActivateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* state */:
        field.get(&state_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string WakeupSourceActivateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> WakeupSourceActivateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void WakeupSourceActivateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: state
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


GpuFrequencyFtraceEvent::GpuFrequencyFtraceEvent() = default;
GpuFrequencyFtraceEvent::~GpuFrequencyFtraceEvent() = default;
GpuFrequencyFtraceEvent::GpuFrequencyFtraceEvent(const GpuFrequencyFtraceEvent&) = default;
GpuFrequencyFtraceEvent& GpuFrequencyFtraceEvent::operator=(const GpuFrequencyFtraceEvent&) = default;
GpuFrequencyFtraceEvent::GpuFrequencyFtraceEvent(GpuFrequencyFtraceEvent&&) noexcept = default;
GpuFrequencyFtraceEvent& GpuFrequencyFtraceEvent::operator=(GpuFrequencyFtraceEvent&&) = default;

bool GpuFrequencyFtraceEvent::operator==(const GpuFrequencyFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_id_, other.gpu_id_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_);
}

bool GpuFrequencyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* gpu_id */:
        field.get(&gpu_id_);
        break;
      case 2 /* state */:
        field.get(&state_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GpuFrequencyFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GpuFrequencyFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GpuFrequencyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: gpu_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, gpu_id_, msg);
  }

  // Field 2: state
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SuspendResumeFtraceEvent::SuspendResumeFtraceEvent() = default;
SuspendResumeFtraceEvent::~SuspendResumeFtraceEvent() = default;
SuspendResumeFtraceEvent::SuspendResumeFtraceEvent(const SuspendResumeFtraceEvent&) = default;
SuspendResumeFtraceEvent& SuspendResumeFtraceEvent::operator=(const SuspendResumeFtraceEvent&) = default;
SuspendResumeFtraceEvent::SuspendResumeFtraceEvent(SuspendResumeFtraceEvent&&) noexcept = default;
SuspendResumeFtraceEvent& SuspendResumeFtraceEvent::operator=(SuspendResumeFtraceEvent&&) = default;

bool SuspendResumeFtraceEvent::operator==(const SuspendResumeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(action_, other.action_)
   && ::protozero::internal::gen_helpers::EqualsField(val_, other.val_)
   && ::protozero::internal::gen_helpers::EqualsField(start_, other.start_);
}

bool SuspendResumeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* action */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &action_);
        break;
      case 2 /* val */:
        field.get(&val_);
        break;
      case 3 /* start */:
        field.get(&start_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SuspendResumeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SuspendResumeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SuspendResumeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: action
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, action_, msg);
  }

  // Field 2: val
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, val_, msg);
  }

  // Field 3: start
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, start_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ClockSetRateFtraceEvent::ClockSetRateFtraceEvent() = default;
ClockSetRateFtraceEvent::~ClockSetRateFtraceEvent() = default;
ClockSetRateFtraceEvent::ClockSetRateFtraceEvent(const ClockSetRateFtraceEvent&) = default;
ClockSetRateFtraceEvent& ClockSetRateFtraceEvent::operator=(const ClockSetRateFtraceEvent&) = default;
ClockSetRateFtraceEvent::ClockSetRateFtraceEvent(ClockSetRateFtraceEvent&&) noexcept = default;
ClockSetRateFtraceEvent& ClockSetRateFtraceEvent::operator=(ClockSetRateFtraceEvent&&) = default;

bool ClockSetRateFtraceEvent::operator==(const ClockSetRateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_id_, other.cpu_id_);
}

bool ClockSetRateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* state */:
        field.get(&state_);
        break;
      case 3 /* cpu_id */:
        field.get(&cpu_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ClockSetRateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ClockSetRateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ClockSetRateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: state
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_, msg);
  }

  // Field 3: cpu_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, cpu_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ClockDisableFtraceEvent::ClockDisableFtraceEvent() = default;
ClockDisableFtraceEvent::~ClockDisableFtraceEvent() = default;
ClockDisableFtraceEvent::ClockDisableFtraceEvent(const ClockDisableFtraceEvent&) = default;
ClockDisableFtraceEvent& ClockDisableFtraceEvent::operator=(const ClockDisableFtraceEvent&) = default;
ClockDisableFtraceEvent::ClockDisableFtraceEvent(ClockDisableFtraceEvent&&) noexcept = default;
ClockDisableFtraceEvent& ClockDisableFtraceEvent::operator=(ClockDisableFtraceEvent&&) = default;

bool ClockDisableFtraceEvent::operator==(const ClockDisableFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_id_, other.cpu_id_);
}

bool ClockDisableFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* state */:
        field.get(&state_);
        break;
      case 3 /* cpu_id */:
        field.get(&cpu_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ClockDisableFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ClockDisableFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ClockDisableFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: state
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_, msg);
  }

  // Field 3: cpu_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, cpu_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ClockEnableFtraceEvent::ClockEnableFtraceEvent() = default;
ClockEnableFtraceEvent::~ClockEnableFtraceEvent() = default;
ClockEnableFtraceEvent::ClockEnableFtraceEvent(const ClockEnableFtraceEvent&) = default;
ClockEnableFtraceEvent& ClockEnableFtraceEvent::operator=(const ClockEnableFtraceEvent&) = default;
ClockEnableFtraceEvent::ClockEnableFtraceEvent(ClockEnableFtraceEvent&&) noexcept = default;
ClockEnableFtraceEvent& ClockEnableFtraceEvent::operator=(ClockEnableFtraceEvent&&) = default;

bool ClockEnableFtraceEvent::operator==(const ClockEnableFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_id_, other.cpu_id_);
}

bool ClockEnableFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* state */:
        field.get(&state_);
        break;
      case 3 /* cpu_id */:
        field.get(&cpu_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ClockEnableFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ClockEnableFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ClockEnableFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: state
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_, msg);
  }

  // Field 3: cpu_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, cpu_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CpuIdleFtraceEvent::CpuIdleFtraceEvent() = default;
CpuIdleFtraceEvent::~CpuIdleFtraceEvent() = default;
CpuIdleFtraceEvent::CpuIdleFtraceEvent(const CpuIdleFtraceEvent&) = default;
CpuIdleFtraceEvent& CpuIdleFtraceEvent::operator=(const CpuIdleFtraceEvent&) = default;
CpuIdleFtraceEvent::CpuIdleFtraceEvent(CpuIdleFtraceEvent&&) noexcept = default;
CpuIdleFtraceEvent& CpuIdleFtraceEvent::operator=(CpuIdleFtraceEvent&&) = default;

bool CpuIdleFtraceEvent::operator==(const CpuIdleFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_id_, other.cpu_id_);
}

bool CpuIdleFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* state */:
        field.get(&state_);
        break;
      case 2 /* cpu_id */:
        field.get(&cpu_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CpuIdleFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CpuIdleFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CpuIdleFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: state
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, state_, msg);
  }

  // Field 2: cpu_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, cpu_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CpuFrequencyLimitsFtraceEvent::CpuFrequencyLimitsFtraceEvent() = default;
CpuFrequencyLimitsFtraceEvent::~CpuFrequencyLimitsFtraceEvent() = default;
CpuFrequencyLimitsFtraceEvent::CpuFrequencyLimitsFtraceEvent(const CpuFrequencyLimitsFtraceEvent&) = default;
CpuFrequencyLimitsFtraceEvent& CpuFrequencyLimitsFtraceEvent::operator=(const CpuFrequencyLimitsFtraceEvent&) = default;
CpuFrequencyLimitsFtraceEvent::CpuFrequencyLimitsFtraceEvent(CpuFrequencyLimitsFtraceEvent&&) noexcept = default;
CpuFrequencyLimitsFtraceEvent& CpuFrequencyLimitsFtraceEvent::operator=(CpuFrequencyLimitsFtraceEvent&&) = default;

bool CpuFrequencyLimitsFtraceEvent::operator==(const CpuFrequencyLimitsFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(min_freq_, other.min_freq_)
   && ::protozero::internal::gen_helpers::EqualsField(max_freq_, other.max_freq_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_id_, other.cpu_id_);
}

bool CpuFrequencyLimitsFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* min_freq */:
        field.get(&min_freq_);
        break;
      case 2 /* max_freq */:
        field.get(&max_freq_);
        break;
      case 3 /* cpu_id */:
        field.get(&cpu_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CpuFrequencyLimitsFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CpuFrequencyLimitsFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CpuFrequencyLimitsFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: min_freq
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, min_freq_, msg);
  }

  // Field 2: max_freq
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, max_freq_, msg);
  }

  // Field 3: cpu_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, cpu_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CpuFrequencyFtraceEvent::CpuFrequencyFtraceEvent() = default;
CpuFrequencyFtraceEvent::~CpuFrequencyFtraceEvent() = default;
CpuFrequencyFtraceEvent::CpuFrequencyFtraceEvent(const CpuFrequencyFtraceEvent&) = default;
CpuFrequencyFtraceEvent& CpuFrequencyFtraceEvent::operator=(const CpuFrequencyFtraceEvent&) = default;
CpuFrequencyFtraceEvent::CpuFrequencyFtraceEvent(CpuFrequencyFtraceEvent&&) noexcept = default;
CpuFrequencyFtraceEvent& CpuFrequencyFtraceEvent::operator=(CpuFrequencyFtraceEvent&&) = default;

bool CpuFrequencyFtraceEvent::operator==(const CpuFrequencyFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(state_, other.state_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_id_, other.cpu_id_);
}

bool CpuFrequencyFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* state */:
        field.get(&state_);
        break;
      case 2 /* cpu_id */:
        field.get(&cpu_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CpuFrequencyFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CpuFrequencyFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CpuFrequencyFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: state
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, state_, msg);
  }

  // Field 2: cpu_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, cpu_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
