#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/mali.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

MaliMaliPMMCURESETWAITFtraceEvent::MaliMaliPMMCURESETWAITFtraceEvent() = default;
MaliMaliPMMCURESETWAITFtraceEvent::~MaliMaliPMMCURESETWAITFtraceEvent() = default;
MaliMaliPMMCURESETWAITFtraceEvent::MaliMaliPMMCURESETWAITFtraceEvent(const MaliMaliPMMCURESETWAITFtraceEvent&) = default;
MaliMaliPMMCURESETWAITFtraceEvent& MaliMaliPMMCURESETWAITFtraceEvent::operator=(const MaliMaliPMMCURESETWAITFtraceEvent&) = default;
MaliMaliPMMCURESETWAITFtraceEvent::MaliMaliPMMCURESETWAITFtraceEvent(MaliMaliPMMCURESETWAITFtraceEvent&&) noexcept = default;
MaliMaliPMMCURESETWAITFtraceEvent& MaliMaliPMMCURESETWAITFtraceEvent::operator=(MaliMaliPMMCURESETWAITFtraceEvent&&) = default;

bool MaliMaliPMMCURESETWAITFtraceEvent::operator==(const MaliMaliPMMCURESETWAITFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCURESETWAITFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCURESETWAITFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCURESETWAITFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCURESETWAITFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUPOWERDOWNFtraceEvent::MaliMaliPMMCUPOWERDOWNFtraceEvent() = default;
MaliMaliPMMCUPOWERDOWNFtraceEvent::~MaliMaliPMMCUPOWERDOWNFtraceEvent() = default;
MaliMaliPMMCUPOWERDOWNFtraceEvent::MaliMaliPMMCUPOWERDOWNFtraceEvent(const MaliMaliPMMCUPOWERDOWNFtraceEvent&) = default;
MaliMaliPMMCUPOWERDOWNFtraceEvent& MaliMaliPMMCUPOWERDOWNFtraceEvent::operator=(const MaliMaliPMMCUPOWERDOWNFtraceEvent&) = default;
MaliMaliPMMCUPOWERDOWNFtraceEvent::MaliMaliPMMCUPOWERDOWNFtraceEvent(MaliMaliPMMCUPOWERDOWNFtraceEvent&&) noexcept = default;
MaliMaliPMMCUPOWERDOWNFtraceEvent& MaliMaliPMMCUPOWERDOWNFtraceEvent::operator=(MaliMaliPMMCUPOWERDOWNFtraceEvent&&) = default;

bool MaliMaliPMMCUPOWERDOWNFtraceEvent::operator==(const MaliMaliPMMCUPOWERDOWNFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUPOWERDOWNFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUPOWERDOWNFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUPOWERDOWNFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUPOWERDOWNFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUPENDONRELOADFtraceEvent::MaliMaliPMMCUPENDONRELOADFtraceEvent() = default;
MaliMaliPMMCUPENDONRELOADFtraceEvent::~MaliMaliPMMCUPENDONRELOADFtraceEvent() = default;
MaliMaliPMMCUPENDONRELOADFtraceEvent::MaliMaliPMMCUPENDONRELOADFtraceEvent(const MaliMaliPMMCUPENDONRELOADFtraceEvent&) = default;
MaliMaliPMMCUPENDONRELOADFtraceEvent& MaliMaliPMMCUPENDONRELOADFtraceEvent::operator=(const MaliMaliPMMCUPENDONRELOADFtraceEvent&) = default;
MaliMaliPMMCUPENDONRELOADFtraceEvent::MaliMaliPMMCUPENDONRELOADFtraceEvent(MaliMaliPMMCUPENDONRELOADFtraceEvent&&) noexcept = default;
MaliMaliPMMCUPENDONRELOADFtraceEvent& MaliMaliPMMCUPENDONRELOADFtraceEvent::operator=(MaliMaliPMMCUPENDONRELOADFtraceEvent&&) = default;

bool MaliMaliPMMCUPENDONRELOADFtraceEvent::operator==(const MaliMaliPMMCUPENDONRELOADFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUPENDONRELOADFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUPENDONRELOADFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUPENDONRELOADFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUPENDONRELOADFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUPENDOFFFtraceEvent::MaliMaliPMMCUPENDOFFFtraceEvent() = default;
MaliMaliPMMCUPENDOFFFtraceEvent::~MaliMaliPMMCUPENDOFFFtraceEvent() = default;
MaliMaliPMMCUPENDOFFFtraceEvent::MaliMaliPMMCUPENDOFFFtraceEvent(const MaliMaliPMMCUPENDOFFFtraceEvent&) = default;
MaliMaliPMMCUPENDOFFFtraceEvent& MaliMaliPMMCUPENDOFFFtraceEvent::operator=(const MaliMaliPMMCUPENDOFFFtraceEvent&) = default;
MaliMaliPMMCUPENDOFFFtraceEvent::MaliMaliPMMCUPENDOFFFtraceEvent(MaliMaliPMMCUPENDOFFFtraceEvent&&) noexcept = default;
MaliMaliPMMCUPENDOFFFtraceEvent& MaliMaliPMMCUPENDOFFFtraceEvent::operator=(MaliMaliPMMCUPENDOFFFtraceEvent&&) = default;

bool MaliMaliPMMCUPENDOFFFtraceEvent::operator==(const MaliMaliPMMCUPENDOFFFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUPENDOFFFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUPENDOFFFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUPENDOFFFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUPENDOFFFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent() = default;
MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::~MaliMaliPMMCUONSLEEPINITIATEFtraceEvent() = default;
MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&) = default;
MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::operator=(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&) = default;
MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::operator=(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent&&) = default;

bool MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::operator==(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONPENDSLEEPFtraceEvent::MaliMaliPMMCUONPENDSLEEPFtraceEvent() = default;
MaliMaliPMMCUONPENDSLEEPFtraceEvent::~MaliMaliPMMCUONPENDSLEEPFtraceEvent() = default;
MaliMaliPMMCUONPENDSLEEPFtraceEvent::MaliMaliPMMCUONPENDSLEEPFtraceEvent(const MaliMaliPMMCUONPENDSLEEPFtraceEvent&) = default;
MaliMaliPMMCUONPENDSLEEPFtraceEvent& MaliMaliPMMCUONPENDSLEEPFtraceEvent::operator=(const MaliMaliPMMCUONPENDSLEEPFtraceEvent&) = default;
MaliMaliPMMCUONPENDSLEEPFtraceEvent::MaliMaliPMMCUONPENDSLEEPFtraceEvent(MaliMaliPMMCUONPENDSLEEPFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONPENDSLEEPFtraceEvent& MaliMaliPMMCUONPENDSLEEPFtraceEvent::operator=(MaliMaliPMMCUONPENDSLEEPFtraceEvent&&) = default;

bool MaliMaliPMMCUONPENDSLEEPFtraceEvent::operator==(const MaliMaliPMMCUONPENDSLEEPFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONPENDSLEEPFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONPENDSLEEPFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONPENDSLEEPFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONPENDSLEEPFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONPENDHALTFtraceEvent::MaliMaliPMMCUONPENDHALTFtraceEvent() = default;
MaliMaliPMMCUONPENDHALTFtraceEvent::~MaliMaliPMMCUONPENDHALTFtraceEvent() = default;
MaliMaliPMMCUONPENDHALTFtraceEvent::MaliMaliPMMCUONPENDHALTFtraceEvent(const MaliMaliPMMCUONPENDHALTFtraceEvent&) = default;
MaliMaliPMMCUONPENDHALTFtraceEvent& MaliMaliPMMCUONPENDHALTFtraceEvent::operator=(const MaliMaliPMMCUONPENDHALTFtraceEvent&) = default;
MaliMaliPMMCUONPENDHALTFtraceEvent::MaliMaliPMMCUONPENDHALTFtraceEvent(MaliMaliPMMCUONPENDHALTFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONPENDHALTFtraceEvent& MaliMaliPMMCUONPENDHALTFtraceEvent::operator=(MaliMaliPMMCUONPENDHALTFtraceEvent&&) = default;

bool MaliMaliPMMCUONPENDHALTFtraceEvent::operator==(const MaliMaliPMMCUONPENDHALTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONPENDHALTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONPENDHALTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONPENDHALTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONPENDHALTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONHWCNTENABLEFtraceEvent::MaliMaliPMMCUONHWCNTENABLEFtraceEvent() = default;
MaliMaliPMMCUONHWCNTENABLEFtraceEvent::~MaliMaliPMMCUONHWCNTENABLEFtraceEvent() = default;
MaliMaliPMMCUONHWCNTENABLEFtraceEvent::MaliMaliPMMCUONHWCNTENABLEFtraceEvent(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent&) = default;
MaliMaliPMMCUONHWCNTENABLEFtraceEvent& MaliMaliPMMCUONHWCNTENABLEFtraceEvent::operator=(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent&) = default;
MaliMaliPMMCUONHWCNTENABLEFtraceEvent::MaliMaliPMMCUONHWCNTENABLEFtraceEvent(MaliMaliPMMCUONHWCNTENABLEFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONHWCNTENABLEFtraceEvent& MaliMaliPMMCUONHWCNTENABLEFtraceEvent::operator=(MaliMaliPMMCUONHWCNTENABLEFtraceEvent&&) = default;

bool MaliMaliPMMCUONHWCNTENABLEFtraceEvent::operator==(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONHWCNTENABLEFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONHWCNTENABLEFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONHWCNTENABLEFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent() = default;
MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::~MaliMaliPMMCUONHWCNTDISABLEFtraceEvent() = default;
MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&) = default;
MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::operator=(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&) = default;
MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::operator=(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent&&) = default;

bool MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::operator==(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONHALTFtraceEvent::MaliMaliPMMCUONHALTFtraceEvent() = default;
MaliMaliPMMCUONHALTFtraceEvent::~MaliMaliPMMCUONHALTFtraceEvent() = default;
MaliMaliPMMCUONHALTFtraceEvent::MaliMaliPMMCUONHALTFtraceEvent(const MaliMaliPMMCUONHALTFtraceEvent&) = default;
MaliMaliPMMCUONHALTFtraceEvent& MaliMaliPMMCUONHALTFtraceEvent::operator=(const MaliMaliPMMCUONHALTFtraceEvent&) = default;
MaliMaliPMMCUONHALTFtraceEvent::MaliMaliPMMCUONHALTFtraceEvent(MaliMaliPMMCUONHALTFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONHALTFtraceEvent& MaliMaliPMMCUONHALTFtraceEvent::operator=(MaliMaliPMMCUONHALTFtraceEvent&&) = default;

bool MaliMaliPMMCUONHALTFtraceEvent::operator==(const MaliMaliPMMCUONHALTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONHALTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONHALTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONHALTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONHALTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONGLBREINITPENDFtraceEvent::MaliMaliPMMCUONGLBREINITPENDFtraceEvent() = default;
MaliMaliPMMCUONGLBREINITPENDFtraceEvent::~MaliMaliPMMCUONGLBREINITPENDFtraceEvent() = default;
MaliMaliPMMCUONGLBREINITPENDFtraceEvent::MaliMaliPMMCUONGLBREINITPENDFtraceEvent(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent&) = default;
MaliMaliPMMCUONGLBREINITPENDFtraceEvent& MaliMaliPMMCUONGLBREINITPENDFtraceEvent::operator=(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent&) = default;
MaliMaliPMMCUONGLBREINITPENDFtraceEvent::MaliMaliPMMCUONGLBREINITPENDFtraceEvent(MaliMaliPMMCUONGLBREINITPENDFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONGLBREINITPENDFtraceEvent& MaliMaliPMMCUONGLBREINITPENDFtraceEvent::operator=(MaliMaliPMMCUONGLBREINITPENDFtraceEvent&&) = default;

bool MaliMaliPMMCUONGLBREINITPENDFtraceEvent::operator==(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONGLBREINITPENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONGLBREINITPENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONGLBREINITPENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent() = default;
MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::~MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent() = default;
MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&) = default;
MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::operator=(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&) = default;
MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::operator=(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent&&) = default;

bool MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::operator==(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUONFtraceEvent::MaliMaliPMMCUONFtraceEvent() = default;
MaliMaliPMMCUONFtraceEvent::~MaliMaliPMMCUONFtraceEvent() = default;
MaliMaliPMMCUONFtraceEvent::MaliMaliPMMCUONFtraceEvent(const MaliMaliPMMCUONFtraceEvent&) = default;
MaliMaliPMMCUONFtraceEvent& MaliMaliPMMCUONFtraceEvent::operator=(const MaliMaliPMMCUONFtraceEvent&) = default;
MaliMaliPMMCUONFtraceEvent::MaliMaliPMMCUONFtraceEvent(MaliMaliPMMCUONFtraceEvent&&) noexcept = default;
MaliMaliPMMCUONFtraceEvent& MaliMaliPMMCUONFtraceEvent::operator=(MaliMaliPMMCUONFtraceEvent&&) = default;

bool MaliMaliPMMCUONFtraceEvent::operator==(const MaliMaliPMMCUONFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUONFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUONFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUONFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUONFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUOFFFtraceEvent::MaliMaliPMMCUOFFFtraceEvent() = default;
MaliMaliPMMCUOFFFtraceEvent::~MaliMaliPMMCUOFFFtraceEvent() = default;
MaliMaliPMMCUOFFFtraceEvent::MaliMaliPMMCUOFFFtraceEvent(const MaliMaliPMMCUOFFFtraceEvent&) = default;
MaliMaliPMMCUOFFFtraceEvent& MaliMaliPMMCUOFFFtraceEvent::operator=(const MaliMaliPMMCUOFFFtraceEvent&) = default;
MaliMaliPMMCUOFFFtraceEvent::MaliMaliPMMCUOFFFtraceEvent(MaliMaliPMMCUOFFFtraceEvent&&) noexcept = default;
MaliMaliPMMCUOFFFtraceEvent& MaliMaliPMMCUOFFFtraceEvent::operator=(MaliMaliPMMCUOFFFtraceEvent&&) = default;

bool MaliMaliPMMCUOFFFtraceEvent::operator==(const MaliMaliPMMCUOFFFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUOFFFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUOFFFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUOFFFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUOFFFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUINSLEEPFtraceEvent::MaliMaliPMMCUINSLEEPFtraceEvent() = default;
MaliMaliPMMCUINSLEEPFtraceEvent::~MaliMaliPMMCUINSLEEPFtraceEvent() = default;
MaliMaliPMMCUINSLEEPFtraceEvent::MaliMaliPMMCUINSLEEPFtraceEvent(const MaliMaliPMMCUINSLEEPFtraceEvent&) = default;
MaliMaliPMMCUINSLEEPFtraceEvent& MaliMaliPMMCUINSLEEPFtraceEvent::operator=(const MaliMaliPMMCUINSLEEPFtraceEvent&) = default;
MaliMaliPMMCUINSLEEPFtraceEvent::MaliMaliPMMCUINSLEEPFtraceEvent(MaliMaliPMMCUINSLEEPFtraceEvent&&) noexcept = default;
MaliMaliPMMCUINSLEEPFtraceEvent& MaliMaliPMMCUINSLEEPFtraceEvent::operator=(MaliMaliPMMCUINSLEEPFtraceEvent&&) = default;

bool MaliMaliPMMCUINSLEEPFtraceEvent::operator==(const MaliMaliPMMCUINSLEEPFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUINSLEEPFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUINSLEEPFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUINSLEEPFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUINSLEEPFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::~MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::operator=(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::operator=(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::operator==(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::~MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::operator=(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::operator=(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::operator==(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::~MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::operator=(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::operator=(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::operator==(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::~MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::operator=(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::operator=(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::operator==(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent() = default;
MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::~MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent() = default;
MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&) = default;
MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::operator=(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&) = default;
MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::operator=(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::operator==(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::~MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::operator=(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::operator=(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::operator==(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::~MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::operator=(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::operator=(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::operator==(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::~MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent() = default;
MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::operator=(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&) = default;
MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&&) noexcept = default;
MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::operator=(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent&&) = default;

bool MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::operator==(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent() = default;
MaliMaliCSFINTERRUPTENDFtraceEvent::~MaliMaliCSFINTERRUPTENDFtraceEvent() = default;
MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(const MaliMaliCSFINTERRUPTENDFtraceEvent&) = default;
MaliMaliCSFINTERRUPTENDFtraceEvent& MaliMaliCSFINTERRUPTENDFtraceEvent::operator=(const MaliMaliCSFINTERRUPTENDFtraceEvent&) = default;
MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(MaliMaliCSFINTERRUPTENDFtraceEvent&&) noexcept = default;
MaliMaliCSFINTERRUPTENDFtraceEvent& MaliMaliCSFINTERRUPTENDFtraceEvent::operator=(MaliMaliCSFINTERRUPTENDFtraceEvent&&) = default;

bool MaliMaliCSFINTERRUPTENDFtraceEvent::operator==(const MaliMaliCSFINTERRUPTENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliCSFINTERRUPTENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliCSFINTERRUPTENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliCSFINTERRUPTENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent() = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent::~MaliMaliCSFINTERRUPTSTARTFtraceEvent() = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(const MaliMaliCSFINTERRUPTSTARTFtraceEvent&) = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent& MaliMaliCSFINTERRUPTSTARTFtraceEvent::operator=(const MaliMaliCSFINTERRUPTSTARTFtraceEvent&) = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(MaliMaliCSFINTERRUPTSTARTFtraceEvent&&) noexcept = default;
MaliMaliCSFINTERRUPTSTARTFtraceEvent& MaliMaliCSFINTERRUPTSTARTFtraceEvent::operator=(MaliMaliCSFINTERRUPTSTARTFtraceEvent&&) = default;

bool MaliMaliCSFINTERRUPTSTARTFtraceEvent::operator==(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val_, other.info_val_);
}

bool MaliMaliCSFINTERRUPTSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 2 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 3 /* info_val */:
        field.get(&info_val_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliCSFINTERRUPTSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliCSFINTERRUPTSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: kctx_tgid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, kctx_tgid_, msg);
  }

  // Field 2: kctx_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, kctx_id_, msg);
  }

  // Field 3: info_val
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent() = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::~MaliMaliKCPUFENCEWAITENDFtraceEvent() = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(const MaliMaliKCPUFENCEWAITENDFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent& MaliMaliKCPUFENCEWAITENDFtraceEvent::operator=(const MaliMaliKCPUFENCEWAITENDFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(MaliMaliKCPUFENCEWAITENDFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCEWAITENDFtraceEvent& MaliMaliKCPUFENCEWAITENDFtraceEvent::operator=(MaliMaliKCPUFENCEWAITENDFtraceEvent&&) = default;

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::operator==(const MaliMaliKCPUFENCEWAITENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_);
}

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCEWAITENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCEWAITENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, info_val1_, msg);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val2_, msg);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, kctx_tgid_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent() = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::~MaliMaliKCPUFENCEWAITSTARTFtraceEvent() = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent& MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator=(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCEWAITSTARTFtraceEvent& MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator=(MaliMaliKCPUFENCEWAITSTARTFtraceEvent&&) = default;

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::operator==(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_);
}

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, info_val1_, msg);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val2_, msg);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, kctx_tgid_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent() = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::~MaliMaliKCPUFENCESIGNALFtraceEvent() = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(const MaliMaliKCPUFENCESIGNALFtraceEvent&) = default;
MaliMaliKCPUFENCESIGNALFtraceEvent& MaliMaliKCPUFENCESIGNALFtraceEvent::operator=(const MaliMaliKCPUFENCESIGNALFtraceEvent&) = default;
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(MaliMaliKCPUFENCESIGNALFtraceEvent&&) noexcept = default;
MaliMaliKCPUFENCESIGNALFtraceEvent& MaliMaliKCPUFENCESIGNALFtraceEvent::operator=(MaliMaliKCPUFENCESIGNALFtraceEvent&&) = default;

bool MaliMaliKCPUFENCESIGNALFtraceEvent::operator==(const MaliMaliKCPUFENCESIGNALFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_);
}

bool MaliMaliKCPUFENCESIGNALFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 2 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 3 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* id */:
        field.get(&id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUFENCESIGNALFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUFENCESIGNALFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: info_val1
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, info_val1_, msg);
  }

  // Field 2: info_val2
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val2_, msg);
  }

  // Field 3: kctx_tgid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, kctx_tgid_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent() = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::~MaliMaliKCPUCQSWAITENDFtraceEvent() = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(const MaliMaliKCPUCQSWAITENDFtraceEvent&) = default;
MaliMaliKCPUCQSWAITENDFtraceEvent& MaliMaliKCPUCQSWAITENDFtraceEvent::operator=(const MaliMaliKCPUCQSWAITENDFtraceEvent&) = default;
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(MaliMaliKCPUCQSWAITENDFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSWAITENDFtraceEvent& MaliMaliKCPUCQSWAITENDFtraceEvent::operator=(MaliMaliKCPUCQSWAITENDFtraceEvent&&) = default;

bool MaliMaliKCPUCQSWAITENDFtraceEvent::operator==(const MaliMaliKCPUCQSWAITENDFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_);
}

bool MaliMaliKCPUCQSWAITENDFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSWAITENDFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSWAITENDFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val1_, msg);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val2_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, kctx_tgid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent() = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::~MaliMaliKCPUCQSWAITSTARTFtraceEvent() = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent& MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator=(const MaliMaliKCPUCQSWAITSTARTFtraceEvent&) = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSWAITSTARTFtraceEvent& MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator=(MaliMaliKCPUCQSWAITSTARTFtraceEvent&&) = default;

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::operator==(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_);
}

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSWAITSTARTFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSWAITSTARTFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val1_, msg);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val2_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, kctx_tgid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent() = default;
MaliMaliKCPUCQSSETFtraceEvent::~MaliMaliKCPUCQSSETFtraceEvent() = default;
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(const MaliMaliKCPUCQSSETFtraceEvent&) = default;
MaliMaliKCPUCQSSETFtraceEvent& MaliMaliKCPUCQSSETFtraceEvent::operator=(const MaliMaliKCPUCQSSETFtraceEvent&) = default;
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(MaliMaliKCPUCQSSETFtraceEvent&&) noexcept = default;
MaliMaliKCPUCQSSETFtraceEvent& MaliMaliKCPUCQSSETFtraceEvent::operator=(MaliMaliKCPUCQSSETFtraceEvent&&) = default;

bool MaliMaliKCPUCQSSETFtraceEvent::operator==(const MaliMaliKCPUCQSSETFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val1_, other.info_val1_)
   && ::protozero::internal::gen_helpers::EqualsField(info_val2_, other.info_val2_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_id_, other.kctx_id_)
   && ::protozero::internal::gen_helpers::EqualsField(kctx_tgid_, other.kctx_tgid_);
}

bool MaliMaliKCPUCQSSETFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* info_val1 */:
        field.get(&info_val1_);
        break;
      case 3 /* info_val2 */:
        field.get(&info_val2_);
        break;
      case 4 /* kctx_id */:
        field.get(&kctx_id_);
        break;
      case 5 /* kctx_tgid */:
        field.get(&kctx_tgid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliMaliKCPUCQSSETFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliMaliKCPUCQSSETFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliMaliKCPUCQSSETFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: info_val1
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, info_val1_, msg);
  }

  // Field 3: info_val2
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, info_val2_, msg);
  }

  // Field 4: kctx_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, kctx_id_, msg);
  }

  // Field 5: kctx_tgid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, kctx_tgid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent() = default;
MaliTracingMarkWriteFtraceEvent::~MaliTracingMarkWriteFtraceEvent() = default;
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(const MaliTracingMarkWriteFtraceEvent&) = default;
MaliTracingMarkWriteFtraceEvent& MaliTracingMarkWriteFtraceEvent::operator=(const MaliTracingMarkWriteFtraceEvent&) = default;
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(MaliTracingMarkWriteFtraceEvent&&) noexcept = default;
MaliTracingMarkWriteFtraceEvent& MaliTracingMarkWriteFtraceEvent::operator=(MaliTracingMarkWriteFtraceEvent&&) = default;

bool MaliTracingMarkWriteFtraceEvent::operator==(const MaliTracingMarkWriteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool MaliTracingMarkWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* type */:
        field.get(&type_);
        break;
      case 4 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MaliTracingMarkWriteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MaliTracingMarkWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MaliTracingMarkWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, pid_, msg);
  }

  // Field 3: type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, type_, msg);
  }

  // Field 4: value
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
