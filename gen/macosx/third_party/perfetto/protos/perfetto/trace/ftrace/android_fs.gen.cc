#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/android_fs.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

AndroidFsFsyncStartFtraceEvent::AndroidFsFsyncStartFtraceEvent() = default;
AndroidFsFsyncStartFtraceEvent::~AndroidFsFsyncStartFtraceEvent() = default;
AndroidFsFsyncStartFtraceEvent::AndroidFsFsyncStartFtraceEvent(const AndroidFsFsyncStartFtraceEvent&) = default;
AndroidFsFsyncStartFtraceEvent& AndroidFsFsyncStartFtraceEvent::operator=(const AndroidFsFsyncStartFtraceEvent&) = default;
AndroidFsFsyncStartFtraceEvent::AndroidFsFsyncStartFtraceEvent(AndroidFsFsyncStartFtraceEvent&&) noexcept = default;
AndroidFsFsyncStartFtraceEvent& AndroidFsFsyncStartFtraceEvent::operator=(AndroidFsFsyncStartFtraceEvent&&) = default;

bool AndroidFsFsyncStartFtraceEvent::operator==(const AndroidFsFsyncStartFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cmdline_, other.cmdline_)
   && ::protozero::internal::gen_helpers::EqualsField(i_size_, other.i_size_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(pathbuf_, other.pathbuf_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_);
}

bool AndroidFsFsyncStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cmdline */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmdline_);
        break;
      case 2 /* i_size */:
        field.get(&i_size_);
        break;
      case 3 /* ino */:
        field.get(&ino_);
        break;
      case 4 /* pathbuf */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &pathbuf_);
        break;
      case 5 /* pid */:
        field.get(&pid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidFsFsyncStartFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidFsFsyncStartFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidFsFsyncStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cmdline
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, cmdline_, msg);
  }

  // Field 2: i_size
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, i_size_, msg);
  }

  // Field 3: ino
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, ino_, msg);
  }

  // Field 4: pathbuf
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, pathbuf_, msg);
  }

  // Field 5: pid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, pid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


AndroidFsFsyncEndFtraceEvent::AndroidFsFsyncEndFtraceEvent() = default;
AndroidFsFsyncEndFtraceEvent::~AndroidFsFsyncEndFtraceEvent() = default;
AndroidFsFsyncEndFtraceEvent::AndroidFsFsyncEndFtraceEvent(const AndroidFsFsyncEndFtraceEvent&) = default;
AndroidFsFsyncEndFtraceEvent& AndroidFsFsyncEndFtraceEvent::operator=(const AndroidFsFsyncEndFtraceEvent&) = default;
AndroidFsFsyncEndFtraceEvent::AndroidFsFsyncEndFtraceEvent(AndroidFsFsyncEndFtraceEvent&&) noexcept = default;
AndroidFsFsyncEndFtraceEvent& AndroidFsFsyncEndFtraceEvent::operator=(AndroidFsFsyncEndFtraceEvent&&) = default;

bool AndroidFsFsyncEndFtraceEvent::operator==(const AndroidFsFsyncEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bytes_, other.bytes_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(offset_, other.offset_);
}

bool AndroidFsFsyncEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bytes */:
        field.get(&bytes_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* offset */:
        field.get(&offset_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidFsFsyncEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidFsFsyncEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidFsFsyncEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bytes
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bytes_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: offset
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, offset_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


AndroidFsDatawriteStartFtraceEvent::AndroidFsDatawriteStartFtraceEvent() = default;
AndroidFsDatawriteStartFtraceEvent::~AndroidFsDatawriteStartFtraceEvent() = default;
AndroidFsDatawriteStartFtraceEvent::AndroidFsDatawriteStartFtraceEvent(const AndroidFsDatawriteStartFtraceEvent&) = default;
AndroidFsDatawriteStartFtraceEvent& AndroidFsDatawriteStartFtraceEvent::operator=(const AndroidFsDatawriteStartFtraceEvent&) = default;
AndroidFsDatawriteStartFtraceEvent::AndroidFsDatawriteStartFtraceEvent(AndroidFsDatawriteStartFtraceEvent&&) noexcept = default;
AndroidFsDatawriteStartFtraceEvent& AndroidFsDatawriteStartFtraceEvent::operator=(AndroidFsDatawriteStartFtraceEvent&&) = default;

bool AndroidFsDatawriteStartFtraceEvent::operator==(const AndroidFsDatawriteStartFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bytes_, other.bytes_)
   && ::protozero::internal::gen_helpers::EqualsField(cmdline_, other.cmdline_)
   && ::protozero::internal::gen_helpers::EqualsField(i_size_, other.i_size_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(offset_, other.offset_)
   && ::protozero::internal::gen_helpers::EqualsField(pathbuf_, other.pathbuf_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_);
}

bool AndroidFsDatawriteStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bytes */:
        field.get(&bytes_);
        break;
      case 2 /* cmdline */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmdline_);
        break;
      case 3 /* i_size */:
        field.get(&i_size_);
        break;
      case 4 /* ino */:
        field.get(&ino_);
        break;
      case 5 /* offset */:
        field.get(&offset_);
        break;
      case 6 /* pathbuf */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &pathbuf_);
        break;
      case 7 /* pid */:
        field.get(&pid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidFsDatawriteStartFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidFsDatawriteStartFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidFsDatawriteStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bytes
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bytes_, msg);
  }

  // Field 2: cmdline
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, cmdline_, msg);
  }

  // Field 3: i_size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, i_size_, msg);
  }

  // Field 4: ino
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, ino_, msg);
  }

  // Field 5: offset
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, offset_, msg);
  }

  // Field 6: pathbuf
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, pathbuf_, msg);
  }

  // Field 7: pid
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, pid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


AndroidFsDatawriteEndFtraceEvent::AndroidFsDatawriteEndFtraceEvent() = default;
AndroidFsDatawriteEndFtraceEvent::~AndroidFsDatawriteEndFtraceEvent() = default;
AndroidFsDatawriteEndFtraceEvent::AndroidFsDatawriteEndFtraceEvent(const AndroidFsDatawriteEndFtraceEvent&) = default;
AndroidFsDatawriteEndFtraceEvent& AndroidFsDatawriteEndFtraceEvent::operator=(const AndroidFsDatawriteEndFtraceEvent&) = default;
AndroidFsDatawriteEndFtraceEvent::AndroidFsDatawriteEndFtraceEvent(AndroidFsDatawriteEndFtraceEvent&&) noexcept = default;
AndroidFsDatawriteEndFtraceEvent& AndroidFsDatawriteEndFtraceEvent::operator=(AndroidFsDatawriteEndFtraceEvent&&) = default;

bool AndroidFsDatawriteEndFtraceEvent::operator==(const AndroidFsDatawriteEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bytes_, other.bytes_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(offset_, other.offset_);
}

bool AndroidFsDatawriteEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bytes */:
        field.get(&bytes_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* offset */:
        field.get(&offset_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidFsDatawriteEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidFsDatawriteEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidFsDatawriteEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bytes
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bytes_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: offset
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, offset_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


AndroidFsDatareadStartFtraceEvent::AndroidFsDatareadStartFtraceEvent() = default;
AndroidFsDatareadStartFtraceEvent::~AndroidFsDatareadStartFtraceEvent() = default;
AndroidFsDatareadStartFtraceEvent::AndroidFsDatareadStartFtraceEvent(const AndroidFsDatareadStartFtraceEvent&) = default;
AndroidFsDatareadStartFtraceEvent& AndroidFsDatareadStartFtraceEvent::operator=(const AndroidFsDatareadStartFtraceEvent&) = default;
AndroidFsDatareadStartFtraceEvent::AndroidFsDatareadStartFtraceEvent(AndroidFsDatareadStartFtraceEvent&&) noexcept = default;
AndroidFsDatareadStartFtraceEvent& AndroidFsDatareadStartFtraceEvent::operator=(AndroidFsDatareadStartFtraceEvent&&) = default;

bool AndroidFsDatareadStartFtraceEvent::operator==(const AndroidFsDatareadStartFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bytes_, other.bytes_)
   && ::protozero::internal::gen_helpers::EqualsField(cmdline_, other.cmdline_)
   && ::protozero::internal::gen_helpers::EqualsField(i_size_, other.i_size_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(offset_, other.offset_)
   && ::protozero::internal::gen_helpers::EqualsField(pathbuf_, other.pathbuf_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_);
}

bool AndroidFsDatareadStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bytes */:
        field.get(&bytes_);
        break;
      case 2 /* cmdline */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmdline_);
        break;
      case 3 /* i_size */:
        field.get(&i_size_);
        break;
      case 4 /* ino */:
        field.get(&ino_);
        break;
      case 5 /* offset */:
        field.get(&offset_);
        break;
      case 6 /* pathbuf */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &pathbuf_);
        break;
      case 7 /* pid */:
        field.get(&pid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidFsDatareadStartFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidFsDatareadStartFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidFsDatareadStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bytes
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bytes_, msg);
  }

  // Field 2: cmdline
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, cmdline_, msg);
  }

  // Field 3: i_size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, i_size_, msg);
  }

  // Field 4: ino
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, ino_, msg);
  }

  // Field 5: offset
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, offset_, msg);
  }

  // Field 6: pathbuf
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, pathbuf_, msg);
  }

  // Field 7: pid
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, pid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


AndroidFsDatareadEndFtraceEvent::AndroidFsDatareadEndFtraceEvent() = default;
AndroidFsDatareadEndFtraceEvent::~AndroidFsDatareadEndFtraceEvent() = default;
AndroidFsDatareadEndFtraceEvent::AndroidFsDatareadEndFtraceEvent(const AndroidFsDatareadEndFtraceEvent&) = default;
AndroidFsDatareadEndFtraceEvent& AndroidFsDatareadEndFtraceEvent::operator=(const AndroidFsDatareadEndFtraceEvent&) = default;
AndroidFsDatareadEndFtraceEvent::AndroidFsDatareadEndFtraceEvent(AndroidFsDatareadEndFtraceEvent&&) noexcept = default;
AndroidFsDatareadEndFtraceEvent& AndroidFsDatareadEndFtraceEvent::operator=(AndroidFsDatareadEndFtraceEvent&&) = default;

bool AndroidFsDatareadEndFtraceEvent::operator==(const AndroidFsDatareadEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bytes_, other.bytes_)
   && ::protozero::internal::gen_helpers::EqualsField(ino_, other.ino_)
   && ::protozero::internal::gen_helpers::EqualsField(offset_, other.offset_);
}

bool AndroidFsDatareadEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bytes */:
        field.get(&bytes_);
        break;
      case 2 /* ino */:
        field.get(&ino_);
        break;
      case 3 /* offset */:
        field.get(&offset_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidFsDatareadEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidFsDatareadEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidFsDatareadEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bytes
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bytes_, msg);
  }

  // Field 2: ino
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ino_, msg);
  }

  // Field 3: offset
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, offset_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
