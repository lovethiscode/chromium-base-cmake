#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/test_bundle_wrapper.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_stats.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_event.gen.h"
#include "protos/perfetto/trace/ftrace/generic.gen.h"
#include "protos/perfetto/trace/ftrace/workqueue.gen.h"
#include "protos/perfetto/trace/ftrace/vmscan.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_video.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_gpu.gen.h"
#include "protos/perfetto/trace/ftrace/v4l2.gen.h"
#include "protos/perfetto/trace/ftrace/ufs.gen.h"
#include "protos/perfetto/trace/ftrace/trusty.gen.h"
#include "protos/perfetto/trace/ftrace/thermal_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/thermal.gen.h"
#include "protos/perfetto/trace/ftrace/tcp.gen.h"
#include "protos/perfetto/trace/ftrace/task.gen.h"
#include "protos/perfetto/trace/ftrace/systrace.gen.h"
#include "protos/perfetto/trace/ftrace/synthetic.gen.h"
#include "protos/perfetto/trace/ftrace/sync.gen.h"
#include "protos/perfetto/trace/ftrace/sock.gen.h"
#include "protos/perfetto/trace/ftrace/skb.gen.h"
#include "protos/perfetto/trace/ftrace/signal.gen.h"
#include "protos/perfetto/trace/ftrace/sde.gen.h"
#include "protos/perfetto/trace/ftrace/scm.gen.h"
#include "protos/perfetto/trace/ftrace/sched.gen.h"
#include "protos/perfetto/trace/ftrace/samsung.gen.h"
#include "protos/perfetto/trace/ftrace/rpm.gen.h"
#include "protos/perfetto/trace/ftrace/regulator.gen.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.gen.h"
#include "protos/perfetto/trace/ftrace/printk.gen.h"
#include "protos/perfetto/trace/ftrace/power.gen.h"
#include "protos/perfetto/trace/ftrace/perf_trace_counters.gen.h"
#include "protos/perfetto/trace/ftrace/panel.gen.h"
#include "protos/perfetto/trace/ftrace/oom.gen.h"
#include "protos/perfetto/trace/ftrace/net.gen.h"
#include "protos/perfetto/trace/ftrace/mm_event.gen.h"
#include "protos/perfetto/trace/ftrace/mdss.gen.h"
#include "protos/perfetto/trace/ftrace/mali.gen.h"
#include "protos/perfetto/trace/ftrace/lwis.gen.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.gen.h"
#include "protos/perfetto/trace/ftrace/kvm.gen.h"
#include "protos/perfetto/trace/ftrace/kmem.gen.h"
#include "protos/perfetto/trace/ftrace/kgsl.gen.h"
#include "protos/perfetto/trace/ftrace/irq.gen.h"
#include "protos/perfetto/trace/ftrace/ipi.gen.h"
#include "protos/perfetto/trace/ftrace/ion.gen.h"
#include "protos/perfetto/trace/ftrace/i2c.gen.h"
#include "protos/perfetto/trace/ftrace/hyp.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_scheduler.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.gen.h"
#include "protos/perfetto/trace/ftrace/google_irm_trace.gen.h"
#include "protos/perfetto/trace/ftrace/google_icc_trace.gen.h"
#include "protos/perfetto/trace/ftrace/g2d.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace.gen.h"
#include "protos/perfetto/trace/ftrace/filemap.gen.h"
#include "protos/perfetto/trace/ftrace/fence.gen.h"
#include "protos/perfetto/trace/ftrace/fastrpc.gen.h"
#include "protos/perfetto/trace/ftrace/f2fs.gen.h"
#include "protos/perfetto/trace/ftrace/ext4.gen.h"
#include "protos/perfetto/trace/ftrace/drm.gen.h"
#include "protos/perfetto/trace/ftrace/dpu.gen.h"
#include "protos/perfetto/trace/ftrace/dmabuf_heap.gen.h"
#include "protos/perfetto/trace/ftrace/dma_fence.gen.h"
#include "protos/perfetto/trace/ftrace/dcvsh.gen.h"
#include "protos/perfetto/trace/ftrace/cros_ec.gen.h"
#include "protos/perfetto/trace/ftrace/cpuhp.gen.h"
#include "protos/perfetto/trace/ftrace/compaction.gen.h"
#include "protos/perfetto/trace/ftrace/cma.gen.h"
#include "protos/perfetto/trace/ftrace/clk.gen.h"
#include "protos/perfetto/trace/ftrace/cgroup.gen.h"
#include "protos/perfetto/trace/ftrace/block.gen.h"
#include "protos/perfetto/trace/ftrace/binder.gen.h"
#include "protos/perfetto/trace/ftrace/bcl_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/android_fs.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

TestBundleWrapper::TestBundleWrapper() = default;
TestBundleWrapper::~TestBundleWrapper() = default;
TestBundleWrapper::TestBundleWrapper(const TestBundleWrapper&) = default;
TestBundleWrapper& TestBundleWrapper::operator=(const TestBundleWrapper&) = default;
TestBundleWrapper::TestBundleWrapper(TestBundleWrapper&&) noexcept = default;
TestBundleWrapper& TestBundleWrapper::operator=(TestBundleWrapper&&) = default;

bool TestBundleWrapper::operator==(const TestBundleWrapper& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(before_, other.before_)
   && ::protozero::internal::gen_helpers::EqualsField(bundle_, other.bundle_)
   && ::protozero::internal::gen_helpers::EqualsField(after_, other.after_);
}

int TestBundleWrapper::bundle_size() const { return static_cast<int>(bundle_.size()); }
void TestBundleWrapper::clear_bundle() { bundle_.clear(); }
FtraceEventBundle* TestBundleWrapper::add_bundle() { bundle_.emplace_back(); return &bundle_.back(); }
bool TestBundleWrapper::ParseFromArray(const void* raw, size_t size) {
  bundle_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* before */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &before_);
        break;
      case 2 /* bundle */:
        bundle_.emplace_back();
        bundle_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* after */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &after_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TestBundleWrapper::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TestBundleWrapper::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TestBundleWrapper::Serialize(::protozero::Message* msg) const {
  // Field 1: before
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, before_, msg);
  }

  // Field 2: bundle
  for (auto& it : bundle_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: after
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, after_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
