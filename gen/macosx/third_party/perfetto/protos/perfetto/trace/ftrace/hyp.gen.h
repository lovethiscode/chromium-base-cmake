// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_HYP_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_HYP_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class HostMemAbortFtraceEvent;
class HostSmcFtraceEvent;
class HostHcallFtraceEvent;
class HypExitFtraceEvent;
class HypEnterFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT HostMemAbortFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEsrFieldNumber = 1,
    kAddrFieldNumber = 2,
  };

  HostMemAbortFtraceEvent();
  ~HostMemAbortFtraceEvent() override;
  HostMemAbortFtraceEvent(HostMemAbortFtraceEvent&&) noexcept;
  HostMemAbortFtraceEvent& operator=(HostMemAbortFtraceEvent&&);
  HostMemAbortFtraceEvent(const HostMemAbortFtraceEvent&);
  HostMemAbortFtraceEvent& operator=(const HostMemAbortFtraceEvent&);
  bool operator==(const HostMemAbortFtraceEvent&) const;
  bool operator!=(const HostMemAbortFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_esr() const { return _has_field_[1]; }
  uint64_t esr() const { return esr_; }
  void set_esr(uint64_t value) { esr_ = value; _has_field_.set(1); }

  bool has_addr() const { return _has_field_[2]; }
  uint64_t addr() const { return addr_; }
  void set_addr(uint64_t value) { addr_ = value; _has_field_.set(2); }

 private:
  uint64_t esr_{};
  uint64_t addr_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT HostSmcFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kForwardedFieldNumber = 2,
  };

  HostSmcFtraceEvent();
  ~HostSmcFtraceEvent() override;
  HostSmcFtraceEvent(HostSmcFtraceEvent&&) noexcept;
  HostSmcFtraceEvent& operator=(HostSmcFtraceEvent&&);
  HostSmcFtraceEvent(const HostSmcFtraceEvent&);
  HostSmcFtraceEvent& operator=(const HostSmcFtraceEvent&);
  bool operator==(const HostSmcFtraceEvent&) const;
  bool operator!=(const HostSmcFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint64_t id() const { return id_; }
  void set_id(uint64_t value) { id_ = value; _has_field_.set(1); }

  bool has_forwarded() const { return _has_field_[2]; }
  uint32_t forwarded() const { return forwarded_; }
  void set_forwarded(uint32_t value) { forwarded_ = value; _has_field_.set(2); }

 private:
  uint64_t id_{};
  uint32_t forwarded_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT HostHcallFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kInvalidFieldNumber = 2,
  };

  HostHcallFtraceEvent();
  ~HostHcallFtraceEvent() override;
  HostHcallFtraceEvent(HostHcallFtraceEvent&&) noexcept;
  HostHcallFtraceEvent& operator=(HostHcallFtraceEvent&&);
  HostHcallFtraceEvent(const HostHcallFtraceEvent&);
  HostHcallFtraceEvent& operator=(const HostHcallFtraceEvent&);
  bool operator==(const HostHcallFtraceEvent&) const;
  bool operator!=(const HostHcallFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(1); }

  bool has_invalid() const { return _has_field_[2]; }
  uint32_t invalid() const { return invalid_; }
  void set_invalid(uint32_t value) { invalid_ = value; _has_field_.set(2); }

 private:
  uint32_t id_{};
  uint32_t invalid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT HypExitFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
  };

  HypExitFtraceEvent();
  ~HypExitFtraceEvent() override;
  HypExitFtraceEvent(HypExitFtraceEvent&&) noexcept;
  HypExitFtraceEvent& operator=(HypExitFtraceEvent&&);
  HypExitFtraceEvent(const HypExitFtraceEvent&);
  HypExitFtraceEvent& operator=(const HypExitFtraceEvent&);
  bool operator==(const HypExitFtraceEvent&) const;
  bool operator!=(const HypExitFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

 private:

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT HypEnterFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
  };

  HypEnterFtraceEvent();
  ~HypEnterFtraceEvent() override;
  HypEnterFtraceEvent(HypEnterFtraceEvent&&) noexcept;
  HypEnterFtraceEvent& operator=(HypEnterFtraceEvent&&);
  HypEnterFtraceEvent(const HypEnterFtraceEvent&);
  HypEnterFtraceEvent& operator=(const HypEnterFtraceEvent&);
  bool operator==(const HypEnterFtraceEvent&) const;
  bool operator!=(const HypEnterFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

 private:

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_HYP_PROTO_CPP_H_
