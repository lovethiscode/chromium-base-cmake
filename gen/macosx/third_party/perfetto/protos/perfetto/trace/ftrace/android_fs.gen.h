// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_ANDROID_FS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_ANDROID_FS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class AndroidFsFsyncStartFtraceEvent;
class AndroidFsFsyncEndFtraceEvent;
class AndroidFsDatawriteStartFtraceEvent;
class AndroidFsDatawriteEndFtraceEvent;
class AndroidFsDatareadStartFtraceEvent;
class AndroidFsDatareadEndFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT AndroidFsFsyncStartFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCmdlineFieldNumber = 1,
    kISizeFieldNumber = 2,
    kInoFieldNumber = 3,
    kPathbufFieldNumber = 4,
    kPidFieldNumber = 5,
  };

  AndroidFsFsyncStartFtraceEvent();
  ~AndroidFsFsyncStartFtraceEvent() override;
  AndroidFsFsyncStartFtraceEvent(AndroidFsFsyncStartFtraceEvent&&) noexcept;
  AndroidFsFsyncStartFtraceEvent& operator=(AndroidFsFsyncStartFtraceEvent&&);
  AndroidFsFsyncStartFtraceEvent(const AndroidFsFsyncStartFtraceEvent&);
  AndroidFsFsyncStartFtraceEvent& operator=(const AndroidFsFsyncStartFtraceEvent&);
  bool operator==(const AndroidFsFsyncStartFtraceEvent&) const;
  bool operator!=(const AndroidFsFsyncStartFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cmdline() const { return _has_field_[1]; }
  const std::string& cmdline() const { return cmdline_; }
  void set_cmdline(const std::string& value) { cmdline_ = value; _has_field_.set(1); }

  bool has_i_size() const { return _has_field_[2]; }
  int64_t i_size() const { return i_size_; }
  void set_i_size(int64_t value) { i_size_ = value; _has_field_.set(2); }

  bool has_ino() const { return _has_field_[3]; }
  uint64_t ino() const { return ino_; }
  void set_ino(uint64_t value) { ino_ = value; _has_field_.set(3); }

  bool has_pathbuf() const { return _has_field_[4]; }
  const std::string& pathbuf() const { return pathbuf_; }
  void set_pathbuf(const std::string& value) { pathbuf_ = value; _has_field_.set(4); }

  bool has_pid() const { return _has_field_[5]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(5); }

 private:
  std::string cmdline_{};
  int64_t i_size_{};
  uint64_t ino_{};
  std::string pathbuf_{};
  int32_t pid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidFsFsyncEndFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBytesFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };

  AndroidFsFsyncEndFtraceEvent();
  ~AndroidFsFsyncEndFtraceEvent() override;
  AndroidFsFsyncEndFtraceEvent(AndroidFsFsyncEndFtraceEvent&&) noexcept;
  AndroidFsFsyncEndFtraceEvent& operator=(AndroidFsFsyncEndFtraceEvent&&);
  AndroidFsFsyncEndFtraceEvent(const AndroidFsFsyncEndFtraceEvent&);
  AndroidFsFsyncEndFtraceEvent& operator=(const AndroidFsFsyncEndFtraceEvent&);
  bool operator==(const AndroidFsFsyncEndFtraceEvent&) const;
  bool operator!=(const AndroidFsFsyncEndFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_bytes() const { return _has_field_[1]; }
  int32_t bytes() const { return bytes_; }
  void set_bytes(int32_t value) { bytes_ = value; _has_field_.set(1); }

  bool has_ino() const { return _has_field_[2]; }
  uint64_t ino() const { return ino_; }
  void set_ino(uint64_t value) { ino_ = value; _has_field_.set(2); }

  bool has_offset() const { return _has_field_[3]; }
  int64_t offset() const { return offset_; }
  void set_offset(int64_t value) { offset_ = value; _has_field_.set(3); }

 private:
  int32_t bytes_{};
  uint64_t ino_{};
  int64_t offset_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidFsDatawriteStartFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBytesFieldNumber = 1,
    kCmdlineFieldNumber = 2,
    kISizeFieldNumber = 3,
    kInoFieldNumber = 4,
    kOffsetFieldNumber = 5,
    kPathbufFieldNumber = 6,
    kPidFieldNumber = 7,
  };

  AndroidFsDatawriteStartFtraceEvent();
  ~AndroidFsDatawriteStartFtraceEvent() override;
  AndroidFsDatawriteStartFtraceEvent(AndroidFsDatawriteStartFtraceEvent&&) noexcept;
  AndroidFsDatawriteStartFtraceEvent& operator=(AndroidFsDatawriteStartFtraceEvent&&);
  AndroidFsDatawriteStartFtraceEvent(const AndroidFsDatawriteStartFtraceEvent&);
  AndroidFsDatawriteStartFtraceEvent& operator=(const AndroidFsDatawriteStartFtraceEvent&);
  bool operator==(const AndroidFsDatawriteStartFtraceEvent&) const;
  bool operator!=(const AndroidFsDatawriteStartFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_bytes() const { return _has_field_[1]; }
  int32_t bytes() const { return bytes_; }
  void set_bytes(int32_t value) { bytes_ = value; _has_field_.set(1); }

  bool has_cmdline() const { return _has_field_[2]; }
  const std::string& cmdline() const { return cmdline_; }
  void set_cmdline(const std::string& value) { cmdline_ = value; _has_field_.set(2); }

  bool has_i_size() const { return _has_field_[3]; }
  int64_t i_size() const { return i_size_; }
  void set_i_size(int64_t value) { i_size_ = value; _has_field_.set(3); }

  bool has_ino() const { return _has_field_[4]; }
  uint64_t ino() const { return ino_; }
  void set_ino(uint64_t value) { ino_ = value; _has_field_.set(4); }

  bool has_offset() const { return _has_field_[5]; }
  int64_t offset() const { return offset_; }
  void set_offset(int64_t value) { offset_ = value; _has_field_.set(5); }

  bool has_pathbuf() const { return _has_field_[6]; }
  const std::string& pathbuf() const { return pathbuf_; }
  void set_pathbuf(const std::string& value) { pathbuf_ = value; _has_field_.set(6); }

  bool has_pid() const { return _has_field_[7]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(7); }

 private:
  int32_t bytes_{};
  std::string cmdline_{};
  int64_t i_size_{};
  uint64_t ino_{};
  int64_t offset_{};
  std::string pathbuf_{};
  int32_t pid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<8> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidFsDatawriteEndFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBytesFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };

  AndroidFsDatawriteEndFtraceEvent();
  ~AndroidFsDatawriteEndFtraceEvent() override;
  AndroidFsDatawriteEndFtraceEvent(AndroidFsDatawriteEndFtraceEvent&&) noexcept;
  AndroidFsDatawriteEndFtraceEvent& operator=(AndroidFsDatawriteEndFtraceEvent&&);
  AndroidFsDatawriteEndFtraceEvent(const AndroidFsDatawriteEndFtraceEvent&);
  AndroidFsDatawriteEndFtraceEvent& operator=(const AndroidFsDatawriteEndFtraceEvent&);
  bool operator==(const AndroidFsDatawriteEndFtraceEvent&) const;
  bool operator!=(const AndroidFsDatawriteEndFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_bytes() const { return _has_field_[1]; }
  int32_t bytes() const { return bytes_; }
  void set_bytes(int32_t value) { bytes_ = value; _has_field_.set(1); }

  bool has_ino() const { return _has_field_[2]; }
  uint64_t ino() const { return ino_; }
  void set_ino(uint64_t value) { ino_ = value; _has_field_.set(2); }

  bool has_offset() const { return _has_field_[3]; }
  int64_t offset() const { return offset_; }
  void set_offset(int64_t value) { offset_ = value; _has_field_.set(3); }

 private:
  int32_t bytes_{};
  uint64_t ino_{};
  int64_t offset_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidFsDatareadStartFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBytesFieldNumber = 1,
    kCmdlineFieldNumber = 2,
    kISizeFieldNumber = 3,
    kInoFieldNumber = 4,
    kOffsetFieldNumber = 5,
    kPathbufFieldNumber = 6,
    kPidFieldNumber = 7,
  };

  AndroidFsDatareadStartFtraceEvent();
  ~AndroidFsDatareadStartFtraceEvent() override;
  AndroidFsDatareadStartFtraceEvent(AndroidFsDatareadStartFtraceEvent&&) noexcept;
  AndroidFsDatareadStartFtraceEvent& operator=(AndroidFsDatareadStartFtraceEvent&&);
  AndroidFsDatareadStartFtraceEvent(const AndroidFsDatareadStartFtraceEvent&);
  AndroidFsDatareadStartFtraceEvent& operator=(const AndroidFsDatareadStartFtraceEvent&);
  bool operator==(const AndroidFsDatareadStartFtraceEvent&) const;
  bool operator!=(const AndroidFsDatareadStartFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_bytes() const { return _has_field_[1]; }
  int32_t bytes() const { return bytes_; }
  void set_bytes(int32_t value) { bytes_ = value; _has_field_.set(1); }

  bool has_cmdline() const { return _has_field_[2]; }
  const std::string& cmdline() const { return cmdline_; }
  void set_cmdline(const std::string& value) { cmdline_ = value; _has_field_.set(2); }

  bool has_i_size() const { return _has_field_[3]; }
  int64_t i_size() const { return i_size_; }
  void set_i_size(int64_t value) { i_size_ = value; _has_field_.set(3); }

  bool has_ino() const { return _has_field_[4]; }
  uint64_t ino() const { return ino_; }
  void set_ino(uint64_t value) { ino_ = value; _has_field_.set(4); }

  bool has_offset() const { return _has_field_[5]; }
  int64_t offset() const { return offset_; }
  void set_offset(int64_t value) { offset_ = value; _has_field_.set(5); }

  bool has_pathbuf() const { return _has_field_[6]; }
  const std::string& pathbuf() const { return pathbuf_; }
  void set_pathbuf(const std::string& value) { pathbuf_ = value; _has_field_.set(6); }

  bool has_pid() const { return _has_field_[7]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(7); }

 private:
  int32_t bytes_{};
  std::string cmdline_{};
  int64_t i_size_{};
  uint64_t ino_{};
  int64_t offset_{};
  std::string pathbuf_{};
  int32_t pid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<8> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidFsDatareadEndFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBytesFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };

  AndroidFsDatareadEndFtraceEvent();
  ~AndroidFsDatareadEndFtraceEvent() override;
  AndroidFsDatareadEndFtraceEvent(AndroidFsDatareadEndFtraceEvent&&) noexcept;
  AndroidFsDatareadEndFtraceEvent& operator=(AndroidFsDatareadEndFtraceEvent&&);
  AndroidFsDatareadEndFtraceEvent(const AndroidFsDatareadEndFtraceEvent&);
  AndroidFsDatareadEndFtraceEvent& operator=(const AndroidFsDatareadEndFtraceEvent&);
  bool operator==(const AndroidFsDatareadEndFtraceEvent&) const;
  bool operator!=(const AndroidFsDatareadEndFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_bytes() const { return _has_field_[1]; }
  int32_t bytes() const { return bytes_; }
  void set_bytes(int32_t value) { bytes_ = value; _has_field_.set(1); }

  bool has_ino() const { return _has_field_[2]; }
  uint64_t ino() const { return ino_; }
  void set_ino(uint64_t value) { ino_ = value; _has_field_.set(2); }

  bool has_offset() const { return _has_field_[3]; }
  int64_t offset() const { return offset_; }
  void set_offset(int64_t value) { offset_ = value; _has_field_.set(3); }

 private:
  int32_t bytes_{};
  uint64_t ino_{};
  int64_t offset_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_ANDROID_FS_PROTO_CPP_H_
