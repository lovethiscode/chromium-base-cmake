// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_VIRTIO_GPU_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_VIRTIO_GPU_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class VirtioGpuCmdResponseFtraceEvent;
class VirtioGpuCmdQueueFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT VirtioGpuCmdResponseFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCtxIdFieldNumber = 1,
    kDevFieldNumber = 2,
    kFenceIdFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kNameFieldNumber = 5,
    kNumFreeFieldNumber = 6,
    kSeqnoFieldNumber = 7,
    kTypeFieldNumber = 8,
    kVqFieldNumber = 9,
  };

  VirtioGpuCmdResponseFtraceEvent();
  ~VirtioGpuCmdResponseFtraceEvent() override;
  VirtioGpuCmdResponseFtraceEvent(VirtioGpuCmdResponseFtraceEvent&&) noexcept;
  VirtioGpuCmdResponseFtraceEvent& operator=(VirtioGpuCmdResponseFtraceEvent&&);
  VirtioGpuCmdResponseFtraceEvent(const VirtioGpuCmdResponseFtraceEvent&);
  VirtioGpuCmdResponseFtraceEvent& operator=(const VirtioGpuCmdResponseFtraceEvent&);
  bool operator==(const VirtioGpuCmdResponseFtraceEvent&) const;
  bool operator!=(const VirtioGpuCmdResponseFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_ctx_id() const { return _has_field_[1]; }
  uint32_t ctx_id() const { return ctx_id_; }
  void set_ctx_id(uint32_t value) { ctx_id_ = value; _has_field_.set(1); }

  bool has_dev() const { return _has_field_[2]; }
  int32_t dev() const { return dev_; }
  void set_dev(int32_t value) { dev_ = value; _has_field_.set(2); }

  bool has_fence_id() const { return _has_field_[3]; }
  uint64_t fence_id() const { return fence_id_; }
  void set_fence_id(uint64_t value) { fence_id_ = value; _has_field_.set(3); }

  bool has_flags() const { return _has_field_[4]; }
  uint32_t flags() const { return flags_; }
  void set_flags(uint32_t value) { flags_ = value; _has_field_.set(4); }

  bool has_name() const { return _has_field_[5]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(5); }

  bool has_num_free() const { return _has_field_[6]; }
  uint32_t num_free() const { return num_free_; }
  void set_num_free(uint32_t value) { num_free_ = value; _has_field_.set(6); }

  bool has_seqno() const { return _has_field_[7]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(7); }

  bool has_type() const { return _has_field_[8]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(8); }

  bool has_vq() const { return _has_field_[9]; }
  uint32_t vq() const { return vq_; }
  void set_vq(uint32_t value) { vq_ = value; _has_field_.set(9); }

 private:
  uint32_t ctx_id_{};
  int32_t dev_{};
  uint64_t fence_id_{};
  uint32_t flags_{};
  std::string name_{};
  uint32_t num_free_{};
  uint32_t seqno_{};
  uint32_t type_{};
  uint32_t vq_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT VirtioGpuCmdQueueFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCtxIdFieldNumber = 1,
    kDevFieldNumber = 2,
    kFenceIdFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kNameFieldNumber = 5,
    kNumFreeFieldNumber = 6,
    kSeqnoFieldNumber = 7,
    kTypeFieldNumber = 8,
    kVqFieldNumber = 9,
  };

  VirtioGpuCmdQueueFtraceEvent();
  ~VirtioGpuCmdQueueFtraceEvent() override;
  VirtioGpuCmdQueueFtraceEvent(VirtioGpuCmdQueueFtraceEvent&&) noexcept;
  VirtioGpuCmdQueueFtraceEvent& operator=(VirtioGpuCmdQueueFtraceEvent&&);
  VirtioGpuCmdQueueFtraceEvent(const VirtioGpuCmdQueueFtraceEvent&);
  VirtioGpuCmdQueueFtraceEvent& operator=(const VirtioGpuCmdQueueFtraceEvent&);
  bool operator==(const VirtioGpuCmdQueueFtraceEvent&) const;
  bool operator!=(const VirtioGpuCmdQueueFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_ctx_id() const { return _has_field_[1]; }
  uint32_t ctx_id() const { return ctx_id_; }
  void set_ctx_id(uint32_t value) { ctx_id_ = value; _has_field_.set(1); }

  bool has_dev() const { return _has_field_[2]; }
  int32_t dev() const { return dev_; }
  void set_dev(int32_t value) { dev_ = value; _has_field_.set(2); }

  bool has_fence_id() const { return _has_field_[3]; }
  uint64_t fence_id() const { return fence_id_; }
  void set_fence_id(uint64_t value) { fence_id_ = value; _has_field_.set(3); }

  bool has_flags() const { return _has_field_[4]; }
  uint32_t flags() const { return flags_; }
  void set_flags(uint32_t value) { flags_ = value; _has_field_.set(4); }

  bool has_name() const { return _has_field_[5]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(5); }

  bool has_num_free() const { return _has_field_[6]; }
  uint32_t num_free() const { return num_free_; }
  void set_num_free(uint32_t value) { num_free_ = value; _has_field_.set(6); }

  bool has_seqno() const { return _has_field_[7]; }
  uint32_t seqno() const { return seqno_; }
  void set_seqno(uint32_t value) { seqno_ = value; _has_field_.set(7); }

  bool has_type() const { return _has_field_[8]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(8); }

  bool has_vq() const { return _has_field_[9]; }
  uint32_t vq() const { return vq_; }
  void set_vq(uint32_t value) { vq_ = value; _has_field_.set(9); }

 private:
  uint32_t ctx_id_{};
  int32_t dev_{};
  uint64_t fence_id_{};
  uint32_t flags_{};
  std::string name_{};
  uint32_t num_free_{};
  uint32_t seqno_{};
  uint32_t type_{};
  uint32_t vq_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_VIRTIO_GPU_PROTO_CPP_H_
