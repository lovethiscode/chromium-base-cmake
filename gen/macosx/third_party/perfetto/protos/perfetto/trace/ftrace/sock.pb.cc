// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sock.proto

#include "protos/perfetto/trace/ftrace/sock.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR InetSockSetStateFtraceEvent::InetSockSetStateFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.daddr_)*/0u
  , /*decltype(_impl_.dport_)*/0u
  , /*decltype(_impl_.family_)*/0u
  , /*decltype(_impl_.newstate_)*/0
  , /*decltype(_impl_.oldstate_)*/0
  , /*decltype(_impl_.protocol_)*/0u
  , /*decltype(_impl_.skaddr_)*/uint64_t{0u}
  , /*decltype(_impl_.saddr_)*/0u
  , /*decltype(_impl_.sport_)*/0u} {}
struct InetSockSetStateFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InetSockSetStateFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InetSockSetStateFtraceEventDefaultTypeInternal() {}
  union {
    InetSockSetStateFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InetSockSetStateFtraceEventDefaultTypeInternal _InetSockSetStateFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class InetSockSetStateFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<InetSockSetStateFtraceEvent>()._impl_._has_bits_);
  static void set_has_daddr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dport(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_newstate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_saddr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_skaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sport(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

InetSockSetStateFtraceEvent::InetSockSetStateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.InetSockSetStateFtraceEvent)
}
InetSockSetStateFtraceEvent::InetSockSetStateFtraceEvent(const InetSockSetStateFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InetSockSetStateFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.daddr_){}
    , decltype(_impl_.dport_){}
    , decltype(_impl_.family_){}
    , decltype(_impl_.newstate_){}
    , decltype(_impl_.oldstate_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.skaddr_){}
    , decltype(_impl_.saddr_){}
    , decltype(_impl_.sport_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.daddr_, &from._impl_.daddr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sport_) -
    reinterpret_cast<char*>(&_impl_.daddr_)) + sizeof(_impl_.sport_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InetSockSetStateFtraceEvent)
}

inline void InetSockSetStateFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.daddr_){0u}
    , decltype(_impl_.dport_){0u}
    , decltype(_impl_.family_){0u}
    , decltype(_impl_.newstate_){0}
    , decltype(_impl_.oldstate_){0}
    , decltype(_impl_.protocol_){0u}
    , decltype(_impl_.skaddr_){uint64_t{0u}}
    , decltype(_impl_.saddr_){0u}
    , decltype(_impl_.sport_){0u}
  };
}

InetSockSetStateFtraceEvent::~InetSockSetStateFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InetSockSetStateFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InetSockSetStateFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InetSockSetStateFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InetSockSetStateFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InetSockSetStateFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.daddr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.saddr_) -
        reinterpret_cast<char*>(&_impl_.daddr_)) + sizeof(_impl_.saddr_));
  }
  _impl_.sport_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InetSockSetStateFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 daddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_daddr(&has_bits);
          _impl_.daddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_dport(&has_bits);
          _impl_.dport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_family(&has_bits);
          _impl_.family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 newstate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_newstate(&has_bits);
          _impl_.newstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 oldstate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_oldstate(&has_bits);
          _impl_.oldstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 protocol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 saddr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_saddr(&has_bits);
          _impl_.saddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 skaddr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_skaddr(&has_bits);
          _impl_.skaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sport = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_sport(&has_bits);
          _impl_.sport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InetSockSetStateFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.InetSockSetStateFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 daddr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_daddr(), target);
  }

  // optional uint32 dport = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dport(), target);
  }

  // optional uint32 family = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_family(), target);
  }

  // optional int32 newstate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_newstate(), target);
  }

  // optional int32 oldstate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_oldstate(), target);
  }

  // optional uint32 protocol = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_protocol(), target);
  }

  // optional uint32 saddr = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_saddr(), target);
  }

  // optional uint64 skaddr = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_skaddr(), target);
  }

  // optional uint32 sport = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.InetSockSetStateFtraceEvent)
  return target;
}

size_t InetSockSetStateFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InetSockSetStateFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 daddr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_daddr());
    }

    // optional uint32 dport = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dport());
    }

    // optional uint32 family = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_family());
    }

    // optional int32 newstate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_newstate());
    }

    // optional int32 oldstate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_oldstate());
    }

    // optional uint32 protocol = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol());
    }

    // optional uint64 skaddr = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_skaddr());
    }

    // optional uint32 saddr = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_saddr());
    }

  }
  // optional uint32 sport = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InetSockSetStateFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InetSockSetStateFtraceEvent*>(
      &from));
}

void InetSockSetStateFtraceEvent::MergeFrom(const InetSockSetStateFtraceEvent& from) {
  InetSockSetStateFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InetSockSetStateFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.daddr_ = from._impl_.daddr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dport_ = from._impl_.dport_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.family_ = from._impl_.family_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.newstate_ = from._impl_.newstate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.oldstate_ = from._impl_.oldstate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.skaddr_ = from._impl_.skaddr_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.saddr_ = from._impl_.saddr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_sport(from._internal_sport());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InetSockSetStateFtraceEvent::CopyFrom(const InetSockSetStateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InetSockSetStateFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InetSockSetStateFtraceEvent::IsInitialized() const {
  return true;
}

void InetSockSetStateFtraceEvent::InternalSwap(InetSockSetStateFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InetSockSetStateFtraceEvent, _impl_.sport_)
      + sizeof(InetSockSetStateFtraceEvent::_impl_.sport_)
      - PROTOBUF_FIELD_OFFSET(InetSockSetStateFtraceEvent, _impl_.daddr_)>(
          reinterpret_cast<char*>(&_impl_.daddr_),
          reinterpret_cast<char*>(&other->_impl_.daddr_));
}

std::string InetSockSetStateFtraceEvent::GetTypeName() const {
  return "perfetto.protos.InetSockSetStateFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::InetSockSetStateFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::InetSockSetStateFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::InetSockSetStateFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
