#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/vmscan.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent() = default;
MmShrinkSlabEndFtraceEvent::~MmShrinkSlabEndFtraceEvent() = default;
MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(const MmShrinkSlabEndFtraceEvent&) = default;
MmShrinkSlabEndFtraceEvent& MmShrinkSlabEndFtraceEvent::operator=(const MmShrinkSlabEndFtraceEvent&) = default;
MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(MmShrinkSlabEndFtraceEvent&&) noexcept = default;
MmShrinkSlabEndFtraceEvent& MmShrinkSlabEndFtraceEvent::operator=(MmShrinkSlabEndFtraceEvent&&) = default;

bool MmShrinkSlabEndFtraceEvent::operator==(const MmShrinkSlabEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(new_scan_, other.new_scan_)
   && ::protozero::internal::gen_helpers::EqualsField(retval_, other.retval_)
   && ::protozero::internal::gen_helpers::EqualsField(shr_, other.shr_)
   && ::protozero::internal::gen_helpers::EqualsField(shrink_, other.shrink_)
   && ::protozero::internal::gen_helpers::EqualsField(total_scan_, other.total_scan_)
   && ::protozero::internal::gen_helpers::EqualsField(unused_scan_, other.unused_scan_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_);
}

bool MmShrinkSlabEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* new_scan */:
        field.get(&new_scan_);
        break;
      case 2 /* retval */:
        field.get(&retval_);
        break;
      case 3 /* shr */:
        field.get(&shr_);
        break;
      case 4 /* shrink */:
        field.get(&shrink_);
        break;
      case 5 /* total_scan */:
        field.get(&total_scan_);
        break;
      case 6 /* unused_scan */:
        field.get(&unused_scan_);
        break;
      case 7 /* nid */:
        field.get(&nid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmShrinkSlabEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmShrinkSlabEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmShrinkSlabEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: new_scan
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, new_scan_, msg);
  }

  // Field 2: retval
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, retval_, msg);
  }

  // Field 3: shr
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, shr_, msg);
  }

  // Field 4: shrink
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, shrink_, msg);
  }

  // Field 5: total_scan
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, total_scan_, msg);
  }

  // Field 6: unused_scan
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, unused_scan_, msg);
  }

  // Field 7: nid
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, nid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent() = default;
MmShrinkSlabStartFtraceEvent::~MmShrinkSlabStartFtraceEvent() = default;
MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(const MmShrinkSlabStartFtraceEvent&) = default;
MmShrinkSlabStartFtraceEvent& MmShrinkSlabStartFtraceEvent::operator=(const MmShrinkSlabStartFtraceEvent&) = default;
MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(MmShrinkSlabStartFtraceEvent&&) noexcept = default;
MmShrinkSlabStartFtraceEvent& MmShrinkSlabStartFtraceEvent::operator=(MmShrinkSlabStartFtraceEvent&&) = default;

bool MmShrinkSlabStartFtraceEvent::operator==(const MmShrinkSlabStartFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cache_items_, other.cache_items_)
   && ::protozero::internal::gen_helpers::EqualsField(delta_, other.delta_)
   && ::protozero::internal::gen_helpers::EqualsField(gfp_flags_, other.gfp_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(lru_pgs_, other.lru_pgs_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_objects_to_shrink_, other.nr_objects_to_shrink_)
   && ::protozero::internal::gen_helpers::EqualsField(pgs_scanned_, other.pgs_scanned_)
   && ::protozero::internal::gen_helpers::EqualsField(shr_, other.shr_)
   && ::protozero::internal::gen_helpers::EqualsField(shrink_, other.shrink_)
   && ::protozero::internal::gen_helpers::EqualsField(total_scan_, other.total_scan_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_)
   && ::protozero::internal::gen_helpers::EqualsField(priority_, other.priority_);
}

bool MmShrinkSlabStartFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cache_items */:
        field.get(&cache_items_);
        break;
      case 2 /* delta */:
        field.get(&delta_);
        break;
      case 3 /* gfp_flags */:
        field.get(&gfp_flags_);
        break;
      case 4 /* lru_pgs */:
        field.get(&lru_pgs_);
        break;
      case 5 /* nr_objects_to_shrink */:
        field.get(&nr_objects_to_shrink_);
        break;
      case 6 /* pgs_scanned */:
        field.get(&pgs_scanned_);
        break;
      case 7 /* shr */:
        field.get(&shr_);
        break;
      case 8 /* shrink */:
        field.get(&shrink_);
        break;
      case 9 /* total_scan */:
        field.get(&total_scan_);
        break;
      case 10 /* nid */:
        field.get(&nid_);
        break;
      case 11 /* priority */:
        field.get(&priority_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmShrinkSlabStartFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmShrinkSlabStartFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmShrinkSlabStartFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cache_items
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cache_items_, msg);
  }

  // Field 2: delta
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, delta_, msg);
  }

  // Field 3: gfp_flags
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, gfp_flags_, msg);
  }

  // Field 4: lru_pgs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, lru_pgs_, msg);
  }

  // Field 5: nr_objects_to_shrink
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, nr_objects_to_shrink_, msg);
  }

  // Field 6: pgs_scanned
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, pgs_scanned_, msg);
  }

  // Field 7: shr
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, shr_, msg);
  }

  // Field 8: shrink
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, shrink_, msg);
  }

  // Field 9: total_scan
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, total_scan_, msg);
  }

  // Field 10: nid
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, nid_, msg);
  }

  // Field 11: priority
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, priority_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent() = default;
MmVmscanKswapdSleepFtraceEvent::~MmVmscanKswapdSleepFtraceEvent() = default;
MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(const MmVmscanKswapdSleepFtraceEvent&) = default;
MmVmscanKswapdSleepFtraceEvent& MmVmscanKswapdSleepFtraceEvent::operator=(const MmVmscanKswapdSleepFtraceEvent&) = default;
MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(MmVmscanKswapdSleepFtraceEvent&&) noexcept = default;
MmVmscanKswapdSleepFtraceEvent& MmVmscanKswapdSleepFtraceEvent::operator=(MmVmscanKswapdSleepFtraceEvent&&) = default;

bool MmVmscanKswapdSleepFtraceEvent::operator==(const MmVmscanKswapdSleepFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_);
}

bool MmVmscanKswapdSleepFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmVmscanKswapdSleepFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmVmscanKswapdSleepFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmVmscanKswapdSleepFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, nid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent() = default;
MmVmscanKswapdWakeFtraceEvent::~MmVmscanKswapdWakeFtraceEvent() = default;
MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(const MmVmscanKswapdWakeFtraceEvent&) = default;
MmVmscanKswapdWakeFtraceEvent& MmVmscanKswapdWakeFtraceEvent::operator=(const MmVmscanKswapdWakeFtraceEvent&) = default;
MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(MmVmscanKswapdWakeFtraceEvent&&) noexcept = default;
MmVmscanKswapdWakeFtraceEvent& MmVmscanKswapdWakeFtraceEvent::operator=(MmVmscanKswapdWakeFtraceEvent&&) = default;

bool MmVmscanKswapdWakeFtraceEvent::operator==(const MmVmscanKswapdWakeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(nid_, other.nid_)
   && ::protozero::internal::gen_helpers::EqualsField(order_, other.order_)
   && ::protozero::internal::gen_helpers::EqualsField(zid_, other.zid_);
}

bool MmVmscanKswapdWakeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nid */:
        field.get(&nid_);
        break;
      case 2 /* order */:
        field.get(&order_);
        break;
      case 3 /* zid */:
        field.get(&zid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmVmscanKswapdWakeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmVmscanKswapdWakeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmVmscanKswapdWakeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, nid_, msg);
  }

  // Field 2: order
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, order_, msg);
  }

  // Field 3: zid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, zid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent() = default;
MmVmscanDirectReclaimEndFtraceEvent::~MmVmscanDirectReclaimEndFtraceEvent() = default;
MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(const MmVmscanDirectReclaimEndFtraceEvent&) = default;
MmVmscanDirectReclaimEndFtraceEvent& MmVmscanDirectReclaimEndFtraceEvent::operator=(const MmVmscanDirectReclaimEndFtraceEvent&) = default;
MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(MmVmscanDirectReclaimEndFtraceEvent&&) noexcept = default;
MmVmscanDirectReclaimEndFtraceEvent& MmVmscanDirectReclaimEndFtraceEvent::operator=(MmVmscanDirectReclaimEndFtraceEvent&&) = default;

bool MmVmscanDirectReclaimEndFtraceEvent::operator==(const MmVmscanDirectReclaimEndFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_reclaimed_, other.nr_reclaimed_);
}

bool MmVmscanDirectReclaimEndFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nr_reclaimed */:
        field.get(&nr_reclaimed_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmVmscanDirectReclaimEndFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmVmscanDirectReclaimEndFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmVmscanDirectReclaimEndFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nr_reclaimed
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, nr_reclaimed_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent() = default;
MmVmscanDirectReclaimBeginFtraceEvent::~MmVmscanDirectReclaimBeginFtraceEvent() = default;
MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(const MmVmscanDirectReclaimBeginFtraceEvent&) = default;
MmVmscanDirectReclaimBeginFtraceEvent& MmVmscanDirectReclaimBeginFtraceEvent::operator=(const MmVmscanDirectReclaimBeginFtraceEvent&) = default;
MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(MmVmscanDirectReclaimBeginFtraceEvent&&) noexcept = default;
MmVmscanDirectReclaimBeginFtraceEvent& MmVmscanDirectReclaimBeginFtraceEvent::operator=(MmVmscanDirectReclaimBeginFtraceEvent&&) = default;

bool MmVmscanDirectReclaimBeginFtraceEvent::operator==(const MmVmscanDirectReclaimBeginFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(order_, other.order_)
   && ::protozero::internal::gen_helpers::EqualsField(may_writepage_, other.may_writepage_)
   && ::protozero::internal::gen_helpers::EqualsField(gfp_flags_, other.gfp_flags_);
}

bool MmVmscanDirectReclaimBeginFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* order */:
        field.get(&order_);
        break;
      case 2 /* may_writepage */:
        field.get(&may_writepage_);
        break;
      case 3 /* gfp_flags */:
        field.get(&gfp_flags_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string MmVmscanDirectReclaimBeginFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> MmVmscanDirectReclaimBeginFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void MmVmscanDirectReclaimBeginFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: order
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, order_, msg);
  }

  // Field 2: may_writepage
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, may_writepage_, msg);
  }

  // Field 3: gfp_flags
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, gfp_flags_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
