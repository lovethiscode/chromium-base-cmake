// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/virtio_video.proto

#include "protos/perfetto/trace/ftrace/virtio_video.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR VirtioVideoCmdFtraceEvent::VirtioVideoCmdFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/0u
  , /*decltype(_impl_.type_)*/0u} {}
struct VirtioVideoCmdFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoCmdFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoCmdFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoCmdFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoCmdFtraceEventDefaultTypeInternal _VirtioVideoCmdFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR VirtioVideoCmdDoneFtraceEvent::VirtioVideoCmdDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/0u
  , /*decltype(_impl_.type_)*/0u} {}
struct VirtioVideoCmdDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoCmdDoneFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoCmdDoneFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoCmdDoneFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoCmdDoneFtraceEventDefaultTypeInternal _VirtioVideoCmdDoneFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR VirtioVideoResourceQueueFtraceEvent::VirtioVideoResourceQueueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_size0_)*/0u
  , /*decltype(_impl_.data_size1_)*/0u
  , /*decltype(_impl_.data_size2_)*/0u
  , /*decltype(_impl_.data_size3_)*/0u
  , /*decltype(_impl_.queue_type_)*/0u
  , /*decltype(_impl_.resource_id_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.stream_id_)*/0} {}
struct VirtioVideoResourceQueueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoResourceQueueFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoResourceQueueFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoResourceQueueFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoResourceQueueFtraceEventDefaultTypeInternal _VirtioVideoResourceQueueFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR VirtioVideoResourceQueueDoneFtraceEvent::VirtioVideoResourceQueueDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_size0_)*/0u
  , /*decltype(_impl_.data_size1_)*/0u
  , /*decltype(_impl_.data_size2_)*/0u
  , /*decltype(_impl_.data_size3_)*/0u
  , /*decltype(_impl_.queue_type_)*/0u
  , /*decltype(_impl_.resource_id_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.stream_id_)*/0} {}
struct VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoResourceQueueDoneFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal _VirtioVideoResourceQueueDoneFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class VirtioVideoCmdFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoCmdFtraceEvent>()._impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VirtioVideoCmdFtraceEvent::VirtioVideoCmdFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoCmdFtraceEvent)
}
VirtioVideoCmdFtraceEvent::VirtioVideoCmdFtraceEvent(const VirtioVideoCmdFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VirtioVideoCmdFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.stream_id_, &from._impl_.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoCmdFtraceEvent)
}

inline void VirtioVideoCmdFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){0u}
    , decltype(_impl_.type_){0u}
  };
}

VirtioVideoCmdFtraceEvent::~VirtioVideoCmdFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoCmdFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoCmdFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoCmdFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoCmdFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VirtioVideoCmdFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioVideoCmdFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoCmdFtraceEvent)
  return target;
}

size_t VirtioVideoCmdFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stream_id());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtioVideoCmdFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VirtioVideoCmdFtraceEvent*>(
      &from));
}

void VirtioVideoCmdFtraceEvent::MergeFrom(const VirtioVideoCmdFtraceEvent& from) {
  VirtioVideoCmdFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VirtioVideoCmdFtraceEvent::CopyFrom(const VirtioVideoCmdFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoCmdFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoCmdFtraceEvent::InternalSwap(VirtioVideoCmdFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoCmdFtraceEvent, _impl_.type_)
      + sizeof(VirtioVideoCmdFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoCmdFtraceEvent, _impl_.stream_id_)>(
          reinterpret_cast<char*>(&_impl_.stream_id_),
          reinterpret_cast<char*>(&other->_impl_.stream_id_));
}

std::string VirtioVideoCmdFtraceEvent::GetTypeName() const {
  return "perfetto.protos.VirtioVideoCmdFtraceEvent";
}


// ===================================================================

class VirtioVideoCmdDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoCmdDoneFtraceEvent>()._impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VirtioVideoCmdDoneFtraceEvent::VirtioVideoCmdDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
}
VirtioVideoCmdDoneFtraceEvent::VirtioVideoCmdDoneFtraceEvent(const VirtioVideoCmdDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VirtioVideoCmdDoneFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.stream_id_, &from._impl_.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
}

inline void VirtioVideoCmdDoneFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){0u}
    , decltype(_impl_.type_){0u}
  };
}

VirtioVideoCmdDoneFtraceEvent::~VirtioVideoCmdDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoCmdDoneFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoCmdDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoCmdDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VirtioVideoCmdDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioVideoCmdDoneFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  return target;
}

size_t VirtioVideoCmdDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stream_id());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtioVideoCmdDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VirtioVideoCmdDoneFtraceEvent*>(
      &from));
}

void VirtioVideoCmdDoneFtraceEvent::MergeFrom(const VirtioVideoCmdDoneFtraceEvent& from) {
  VirtioVideoCmdDoneFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VirtioVideoCmdDoneFtraceEvent::CopyFrom(const VirtioVideoCmdDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoCmdDoneFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoCmdDoneFtraceEvent::InternalSwap(VirtioVideoCmdDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoCmdDoneFtraceEvent, _impl_.type_)
      + sizeof(VirtioVideoCmdDoneFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoCmdDoneFtraceEvent, _impl_.stream_id_)>(
          reinterpret_cast<char*>(&_impl_.stream_id_),
          reinterpret_cast<char*>(&other->_impl_.stream_id_));
}

std::string VirtioVideoCmdDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.VirtioVideoCmdDoneFtraceEvent";
}


// ===================================================================

class VirtioVideoResourceQueueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoResourceQueueFtraceEvent>()._impl_._has_bits_);
  static void set_has_data_size0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_size1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_size2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_size3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VirtioVideoResourceQueueFtraceEvent::VirtioVideoResourceQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
}
VirtioVideoResourceQueueFtraceEvent::VirtioVideoResourceQueueFtraceEvent(const VirtioVideoResourceQueueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VirtioVideoResourceQueueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size0_){}
    , decltype(_impl_.data_size1_){}
    , decltype(_impl_.data_size2_){}
    , decltype(_impl_.data_size3_){}
    , decltype(_impl_.queue_type_){}
    , decltype(_impl_.resource_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.stream_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.data_size0_, &from._impl_.data_size0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stream_id_) -
    reinterpret_cast<char*>(&_impl_.data_size0_)) + sizeof(_impl_.stream_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
}

inline void VirtioVideoResourceQueueFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size0_){0u}
    , decltype(_impl_.data_size1_){0u}
    , decltype(_impl_.data_size2_){0u}
    , decltype(_impl_.data_size3_){0u}
    , decltype(_impl_.queue_type_){0u}
    , decltype(_impl_.resource_id_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.stream_id_){0}
  };
}

VirtioVideoResourceQueueFtraceEvent::~VirtioVideoResourceQueueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoResourceQueueFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoResourceQueueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoResourceQueueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.data_size0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stream_id_) -
        reinterpret_cast<char*>(&_impl_.data_size0_)) + sizeof(_impl_.stream_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VirtioVideoResourceQueueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 data_size0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_size0(&has_bits);
          _impl_.data_size0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_size1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_size1(&has_bits);
          _impl_.data_size1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_size2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_size2(&has_bits);
          _impl_.data_size2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_size3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data_size3(&has_bits);
          _impl_.data_size3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 queue_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_queue_type(&has_bits);
          _impl_.queue_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resource_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_resource_id(&has_bits);
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stream_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioVideoResourceQueueFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 data_size0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_size0(), target);
  }

  // optional uint32 data_size1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_size1(), target);
  }

  // optional uint32 data_size2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_size2(), target);
  }

  // optional uint32 data_size3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_size3(), target);
  }

  // optional uint32 queue_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_queue_type(), target);
  }

  // optional int32 resource_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_resource_id(), target);
  }

  // optional int32 stream_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_stream_id(), target);
  }

  // optional uint64 timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  return target;
}

size_t VirtioVideoResourceQueueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 data_size0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size0());
    }

    // optional uint32 data_size1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size1());
    }

    // optional uint32 data_size2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size2());
    }

    // optional uint32 data_size3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size3());
    }

    // optional uint32 queue_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queue_type());
    }

    // optional int32 resource_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resource_id());
    }

    // optional uint64 timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 stream_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtioVideoResourceQueueFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VirtioVideoResourceQueueFtraceEvent*>(
      &from));
}

void VirtioVideoResourceQueueFtraceEvent::MergeFrom(const VirtioVideoResourceQueueFtraceEvent& from) {
  VirtioVideoResourceQueueFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_size0_ = from._impl_.data_size0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_size1_ = from._impl_.data_size1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_size2_ = from._impl_.data_size2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_size3_ = from._impl_.data_size3_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.queue_type_ = from._impl_.queue_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.resource_id_ = from._impl_.resource_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VirtioVideoResourceQueueFtraceEvent::CopyFrom(const VirtioVideoResourceQueueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoResourceQueueFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoResourceQueueFtraceEvent::InternalSwap(VirtioVideoResourceQueueFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueFtraceEvent, _impl_.stream_id_)
      + sizeof(VirtioVideoResourceQueueFtraceEvent::_impl_.stream_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueFtraceEvent, _impl_.data_size0_)>(
          reinterpret_cast<char*>(&_impl_.data_size0_),
          reinterpret_cast<char*>(&other->_impl_.data_size0_));
}

std::string VirtioVideoResourceQueueFtraceEvent::GetTypeName() const {
  return "perfetto.protos.VirtioVideoResourceQueueFtraceEvent";
}


// ===================================================================

class VirtioVideoResourceQueueDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoResourceQueueDoneFtraceEvent>()._impl_._has_bits_);
  static void set_has_data_size0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_size1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_size2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_size3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VirtioVideoResourceQueueDoneFtraceEvent::VirtioVideoResourceQueueDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
}
VirtioVideoResourceQueueDoneFtraceEvent::VirtioVideoResourceQueueDoneFtraceEvent(const VirtioVideoResourceQueueDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VirtioVideoResourceQueueDoneFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size0_){}
    , decltype(_impl_.data_size1_){}
    , decltype(_impl_.data_size2_){}
    , decltype(_impl_.data_size3_){}
    , decltype(_impl_.queue_type_){}
    , decltype(_impl_.resource_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.stream_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.data_size0_, &from._impl_.data_size0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stream_id_) -
    reinterpret_cast<char*>(&_impl_.data_size0_)) + sizeof(_impl_.stream_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
}

inline void VirtioVideoResourceQueueDoneFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size0_){0u}
    , decltype(_impl_.data_size1_){0u}
    , decltype(_impl_.data_size2_){0u}
    , decltype(_impl_.data_size3_){0u}
    , decltype(_impl_.queue_type_){0u}
    , decltype(_impl_.resource_id_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.stream_id_){0}
  };
}

VirtioVideoResourceQueueDoneFtraceEvent::~VirtioVideoResourceQueueDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoResourceQueueDoneFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoResourceQueueDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoResourceQueueDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.data_size0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stream_id_) -
        reinterpret_cast<char*>(&_impl_.data_size0_)) + sizeof(_impl_.stream_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VirtioVideoResourceQueueDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 data_size0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_size0(&has_bits);
          _impl_.data_size0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_size1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_size1(&has_bits);
          _impl_.data_size1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_size2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_size2(&has_bits);
          _impl_.data_size2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_size3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data_size3(&has_bits);
          _impl_.data_size3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 queue_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_queue_type(&has_bits);
          _impl_.queue_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resource_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_resource_id(&has_bits);
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stream_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtioVideoResourceQueueDoneFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 data_size0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_size0(), target);
  }

  // optional uint32 data_size1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_size1(), target);
  }

  // optional uint32 data_size2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_size2(), target);
  }

  // optional uint32 data_size3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_size3(), target);
  }

  // optional uint32 queue_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_queue_type(), target);
  }

  // optional int32 resource_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_resource_id(), target);
  }

  // optional int32 stream_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_stream_id(), target);
  }

  // optional uint64 timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  return target;
}

size_t VirtioVideoResourceQueueDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 data_size0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size0());
    }

    // optional uint32 data_size1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size1());
    }

    // optional uint32 data_size2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size2());
    }

    // optional uint32 data_size3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size3());
    }

    // optional uint32 queue_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queue_type());
    }

    // optional int32 resource_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resource_id());
    }

    // optional uint64 timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 stream_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtioVideoResourceQueueDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VirtioVideoResourceQueueDoneFtraceEvent*>(
      &from));
}

void VirtioVideoResourceQueueDoneFtraceEvent::MergeFrom(const VirtioVideoResourceQueueDoneFtraceEvent& from) {
  VirtioVideoResourceQueueDoneFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_size0_ = from._impl_.data_size0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_size1_ = from._impl_.data_size1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_size2_ = from._impl_.data_size2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_size3_ = from._impl_.data_size3_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.queue_type_ = from._impl_.queue_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.resource_id_ = from._impl_.resource_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VirtioVideoResourceQueueDoneFtraceEvent::CopyFrom(const VirtioVideoResourceQueueDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoResourceQueueDoneFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoResourceQueueDoneFtraceEvent::InternalSwap(VirtioVideoResourceQueueDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueDoneFtraceEvent, _impl_.stream_id_)
      + sizeof(VirtioVideoResourceQueueDoneFtraceEvent::_impl_.stream_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueDoneFtraceEvent, _impl_.data_size0_)>(
          reinterpret_cast<char*>(&_impl_.data_size0_),
          reinterpret_cast<char*>(&other->_impl_.data_size0_));
}

std::string VirtioVideoResourceQueueDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoCmdFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoCmdFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoCmdFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
