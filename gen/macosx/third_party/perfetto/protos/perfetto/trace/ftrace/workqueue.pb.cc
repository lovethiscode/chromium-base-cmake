// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/workqueue.proto

#include "protos/perfetto/trace/ftrace/workqueue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.work_)*/uint64_t{0u}} {}
struct WorkqueueActivateWorkFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkqueueActivateWorkFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkqueueActivateWorkFtraceEventDefaultTypeInternal() {}
  union {
    WorkqueueActivateWorkFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkqueueActivateWorkFtraceEventDefaultTypeInternal _WorkqueueActivateWorkFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.work_)*/uint64_t{0u}
  , /*decltype(_impl_.function_)*/uint64_t{0u}} {}
struct WorkqueueExecuteEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkqueueExecuteEndFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkqueueExecuteEndFtraceEventDefaultTypeInternal() {}
  union {
    WorkqueueExecuteEndFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkqueueExecuteEndFtraceEventDefaultTypeInternal _WorkqueueExecuteEndFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.work_)*/uint64_t{0u}
  , /*decltype(_impl_.function_)*/uint64_t{0u}} {}
struct WorkqueueExecuteStartFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkqueueExecuteStartFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkqueueExecuteStartFtraceEventDefaultTypeInternal() {}
  union {
    WorkqueueExecuteStartFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkqueueExecuteStartFtraceEventDefaultTypeInternal _WorkqueueExecuteStartFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.work_)*/uint64_t{0u}
  , /*decltype(_impl_.function_)*/uint64_t{0u}
  , /*decltype(_impl_.workqueue_)*/uint64_t{0u}
  , /*decltype(_impl_.req_cpu_)*/0u
  , /*decltype(_impl_.cpu_)*/0u} {}
struct WorkqueueQueueWorkFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkqueueQueueWorkFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkqueueQueueWorkFtraceEventDefaultTypeInternal() {}
  union {
    WorkqueueQueueWorkFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkqueueQueueWorkFtraceEventDefaultTypeInternal _WorkqueueQueueWorkFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class WorkqueueActivateWorkFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueActivateWorkFtraceEvent>()._impl_._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
}
WorkqueueActivateWorkFtraceEvent::WorkqueueActivateWorkFtraceEvent(const WorkqueueActivateWorkFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  WorkqueueActivateWorkFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.work_ = from._impl_.work_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
}

inline void WorkqueueActivateWorkFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){uint64_t{0u}}
  };
}

WorkqueueActivateWorkFtraceEvent::~WorkqueueActivateWorkFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkqueueActivateWorkFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkqueueActivateWorkFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkqueueActivateWorkFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.work_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkqueueActivateWorkFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          _impl_.work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkqueueActivateWorkFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_work(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  return target;
}

size_t WorkqueueActivateWorkFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 work = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_work());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueActivateWorkFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkqueueActivateWorkFtraceEvent*>(
      &from));
}

void WorkqueueActivateWorkFtraceEvent::MergeFrom(const WorkqueueActivateWorkFtraceEvent& from) {
  WorkqueueActivateWorkFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_work()) {
    _this->_internal_set_work(from._internal_work());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkqueueActivateWorkFtraceEvent::CopyFrom(const WorkqueueActivateWorkFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueActivateWorkFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueActivateWorkFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueActivateWorkFtraceEvent::InternalSwap(WorkqueueActivateWorkFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.work_, other->_impl_.work_);
}

std::string WorkqueueActivateWorkFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueActivateWorkFtraceEvent";
}


// ===================================================================

class WorkqueueExecuteEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueExecuteEndFtraceEvent>()._impl_._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
}
WorkqueueExecuteEndFtraceEvent::WorkqueueExecuteEndFtraceEvent(const WorkqueueExecuteEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  WorkqueueExecuteEndFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){}
    , decltype(_impl_.function_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.work_, &from._impl_.work_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.function_) -
    reinterpret_cast<char*>(&_impl_.work_)) + sizeof(_impl_.function_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
}

inline void WorkqueueExecuteEndFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){uint64_t{0u}}
    , decltype(_impl_.function_){uint64_t{0u}}
  };
}

WorkqueueExecuteEndFtraceEvent::~WorkqueueExecuteEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkqueueExecuteEndFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkqueueExecuteEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkqueueExecuteEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.work_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.function_) -
        reinterpret_cast<char*>(&_impl_.work_)) + sizeof(_impl_.function_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkqueueExecuteEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          _impl_.work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_function(&has_bits);
          _impl_.function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkqueueExecuteEndFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_work(), target);
  }

  // optional uint64 function = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  return target;
}

size_t WorkqueueExecuteEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 work = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_work());
    }

    // optional uint64 function = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_function());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueExecuteEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkqueueExecuteEndFtraceEvent*>(
      &from));
}

void WorkqueueExecuteEndFtraceEvent::MergeFrom(const WorkqueueExecuteEndFtraceEvent& from) {
  WorkqueueExecuteEndFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.work_ = from._impl_.work_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.function_ = from._impl_.function_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkqueueExecuteEndFtraceEvent::CopyFrom(const WorkqueueExecuteEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueExecuteEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueExecuteEndFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueExecuteEndFtraceEvent::InternalSwap(WorkqueueExecuteEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkqueueExecuteEndFtraceEvent, _impl_.function_)
      + sizeof(WorkqueueExecuteEndFtraceEvent::_impl_.function_)
      - PROTOBUF_FIELD_OFFSET(WorkqueueExecuteEndFtraceEvent, _impl_.work_)>(
          reinterpret_cast<char*>(&_impl_.work_),
          reinterpret_cast<char*>(&other->_impl_.work_));
}

std::string WorkqueueExecuteEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueExecuteEndFtraceEvent";
}


// ===================================================================

class WorkqueueExecuteStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueExecuteStartFtraceEvent>()._impl_._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
}
WorkqueueExecuteStartFtraceEvent::WorkqueueExecuteStartFtraceEvent(const WorkqueueExecuteStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  WorkqueueExecuteStartFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){}
    , decltype(_impl_.function_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.work_, &from._impl_.work_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.function_) -
    reinterpret_cast<char*>(&_impl_.work_)) + sizeof(_impl_.function_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
}

inline void WorkqueueExecuteStartFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){uint64_t{0u}}
    , decltype(_impl_.function_){uint64_t{0u}}
  };
}

WorkqueueExecuteStartFtraceEvent::~WorkqueueExecuteStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkqueueExecuteStartFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkqueueExecuteStartFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkqueueExecuteStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.work_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.function_) -
        reinterpret_cast<char*>(&_impl_.work_)) + sizeof(_impl_.function_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkqueueExecuteStartFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          _impl_.work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_function(&has_bits);
          _impl_.function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkqueueExecuteStartFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_work(), target);
  }

  // optional uint64 function = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  return target;
}

size_t WorkqueueExecuteStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 work = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_work());
    }

    // optional uint64 function = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_function());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueExecuteStartFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkqueueExecuteStartFtraceEvent*>(
      &from));
}

void WorkqueueExecuteStartFtraceEvent::MergeFrom(const WorkqueueExecuteStartFtraceEvent& from) {
  WorkqueueExecuteStartFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.work_ = from._impl_.work_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.function_ = from._impl_.function_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkqueueExecuteStartFtraceEvent::CopyFrom(const WorkqueueExecuteStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueExecuteStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueExecuteStartFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueExecuteStartFtraceEvent::InternalSwap(WorkqueueExecuteStartFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkqueueExecuteStartFtraceEvent, _impl_.function_)
      + sizeof(WorkqueueExecuteStartFtraceEvent::_impl_.function_)
      - PROTOBUF_FIELD_OFFSET(WorkqueueExecuteStartFtraceEvent, _impl_.work_)>(
          reinterpret_cast<char*>(&_impl_.work_),
          reinterpret_cast<char*>(&other->_impl_.work_));
}

std::string WorkqueueExecuteStartFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueExecuteStartFtraceEvent";
}


// ===================================================================

class WorkqueueQueueWorkFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkqueueQueueWorkFtraceEvent>()._impl_._has_bits_);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_workqueue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_req_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
}
WorkqueueQueueWorkFtraceEvent::WorkqueueQueueWorkFtraceEvent(const WorkqueueQueueWorkFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  WorkqueueQueueWorkFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){}
    , decltype(_impl_.function_){}
    , decltype(_impl_.workqueue_){}
    , decltype(_impl_.req_cpu_){}
    , decltype(_impl_.cpu_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.work_, &from._impl_.work_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpu_) -
    reinterpret_cast<char*>(&_impl_.work_)) + sizeof(_impl_.cpu_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
}

inline void WorkqueueQueueWorkFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.work_){uint64_t{0u}}
    , decltype(_impl_.function_){uint64_t{0u}}
    , decltype(_impl_.workqueue_){uint64_t{0u}}
    , decltype(_impl_.req_cpu_){0u}
    , decltype(_impl_.cpu_){0u}
  };
}

WorkqueueQueueWorkFtraceEvent::~WorkqueueQueueWorkFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkqueueQueueWorkFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkqueueQueueWorkFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkqueueQueueWorkFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.work_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cpu_) -
        reinterpret_cast<char*>(&_impl_.work_)) + sizeof(_impl_.cpu_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WorkqueueQueueWorkFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 work = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_work(&has_bits);
          _impl_.work_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_function(&has_bits);
          _impl_.function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 workqueue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_workqueue(&has_bits);
          _impl_.workqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 req_cpu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_req_cpu(&has_bits);
          _impl_.req_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cpu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkqueueQueueWorkFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 work = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_work(), target);
  }

  // optional uint64 function = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_function(), target);
  }

  // optional uint64 workqueue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_workqueue(), target);
  }

  // optional uint32 req_cpu = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_req_cpu(), target);
  }

  // optional uint32 cpu = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cpu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  return target;
}

size_t WorkqueueQueueWorkFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 work = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_work());
    }

    // optional uint64 function = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_function());
    }

    // optional uint64 workqueue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_workqueue());
    }

    // optional uint32 req_cpu = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_req_cpu());
    }

    // optional uint32 cpu = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkqueueQueueWorkFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WorkqueueQueueWorkFtraceEvent*>(
      &from));
}

void WorkqueueQueueWorkFtraceEvent::MergeFrom(const WorkqueueQueueWorkFtraceEvent& from) {
  WorkqueueQueueWorkFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.work_ = from._impl_.work_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.function_ = from._impl_.function_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.workqueue_ = from._impl_.workqueue_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.req_cpu_ = from._impl_.req_cpu_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WorkqueueQueueWorkFtraceEvent::CopyFrom(const WorkqueueQueueWorkFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.WorkqueueQueueWorkFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkqueueQueueWorkFtraceEvent::IsInitialized() const {
  return true;
}

void WorkqueueQueueWorkFtraceEvent::InternalSwap(WorkqueueQueueWorkFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkqueueQueueWorkFtraceEvent, _impl_.cpu_)
      + sizeof(WorkqueueQueueWorkFtraceEvent::_impl_.cpu_)
      - PROTOBUF_FIELD_OFFSET(WorkqueueQueueWorkFtraceEvent, _impl_.work_)>(
          reinterpret_cast<char*>(&_impl_.work_),
          reinterpret_cast<char*>(&other->_impl_.work_));
}

std::string WorkqueueQueueWorkFtraceEvent::GetTypeName() const {
  return "perfetto.protos.WorkqueueQueueWorkFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueActivateWorkFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueActivateWorkFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::WorkqueueActivateWorkFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueExecuteEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::WorkqueueExecuteEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueExecuteStartFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteStartFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::WorkqueueExecuteStartFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::WorkqueueQueueWorkFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::WorkqueueQueueWorkFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::WorkqueueQueueWorkFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
