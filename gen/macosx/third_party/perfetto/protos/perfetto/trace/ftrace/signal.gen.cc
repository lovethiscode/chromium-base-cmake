#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/signal.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

SignalGenerateFtraceEvent::SignalGenerateFtraceEvent() = default;
SignalGenerateFtraceEvent::~SignalGenerateFtraceEvent() = default;
SignalGenerateFtraceEvent::SignalGenerateFtraceEvent(const SignalGenerateFtraceEvent&) = default;
SignalGenerateFtraceEvent& SignalGenerateFtraceEvent::operator=(const SignalGenerateFtraceEvent&) = default;
SignalGenerateFtraceEvent::SignalGenerateFtraceEvent(SignalGenerateFtraceEvent&&) noexcept = default;
SignalGenerateFtraceEvent& SignalGenerateFtraceEvent::operator=(SignalGenerateFtraceEvent&&) = default;

bool SignalGenerateFtraceEvent::operator==(const SignalGenerateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(code_, other.code_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_)
   && ::protozero::internal::gen_helpers::EqualsField(group_, other.group_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(result_, other.result_)
   && ::protozero::internal::gen_helpers::EqualsField(sig_, other.sig_);
}

bool SignalGenerateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* code */:
        field.get(&code_);
        break;
      case 2 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      case 3 /* group */:
        field.get(&group_);
        break;
      case 4 /* pid */:
        field.get(&pid_);
        break;
      case 5 /* result */:
        field.get(&result_);
        break;
      case 6 /* sig */:
        field.get(&sig_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SignalGenerateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SignalGenerateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SignalGenerateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: code
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, code_, msg);
  }

  // Field 2: comm
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, comm_, msg);
  }

  // Field 3: group
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, group_, msg);
  }

  // Field 4: pid
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, pid_, msg);
  }

  // Field 5: result
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, result_, msg);
  }

  // Field 6: sig
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, sig_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SignalDeliverFtraceEvent::SignalDeliverFtraceEvent() = default;
SignalDeliverFtraceEvent::~SignalDeliverFtraceEvent() = default;
SignalDeliverFtraceEvent::SignalDeliverFtraceEvent(const SignalDeliverFtraceEvent&) = default;
SignalDeliverFtraceEvent& SignalDeliverFtraceEvent::operator=(const SignalDeliverFtraceEvent&) = default;
SignalDeliverFtraceEvent::SignalDeliverFtraceEvent(SignalDeliverFtraceEvent&&) noexcept = default;
SignalDeliverFtraceEvent& SignalDeliverFtraceEvent::operator=(SignalDeliverFtraceEvent&&) = default;

bool SignalDeliverFtraceEvent::operator==(const SignalDeliverFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(code_, other.code_)
   && ::protozero::internal::gen_helpers::EqualsField(sa_flags_, other.sa_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(sig_, other.sig_);
}

bool SignalDeliverFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* code */:
        field.get(&code_);
        break;
      case 2 /* sa_flags */:
        field.get(&sa_flags_);
        break;
      case 3 /* sig */:
        field.get(&sig_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SignalDeliverFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SignalDeliverFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SignalDeliverFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: code
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, code_, msg);
  }

  // Field 2: sa_flags
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sa_flags_, msg);
  }

  // Field 3: sig
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, sig_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
