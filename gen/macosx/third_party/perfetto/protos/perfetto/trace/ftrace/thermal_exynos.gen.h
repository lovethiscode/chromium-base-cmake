// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_THERMAL_EXYNOS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_THERMAL_EXYNOS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ThermalExynosAcpmHighOverheadFtraceEvent;
class ThermalExynosAcpmBulkFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT ThermalExynosAcpmHighOverheadFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTzIdFieldNumber = 1,
    kCurrentTempFieldNumber = 2,
    kCtrlTempFieldNumber = 3,
    kCdevStateFieldNumber = 4,
    kPidEtPFieldNumber = 5,
    kKPFieldNumber = 6,
    kKIFieldNumber = 7,
  };

  ThermalExynosAcpmHighOverheadFtraceEvent();
  ~ThermalExynosAcpmHighOverheadFtraceEvent() override;
  ThermalExynosAcpmHighOverheadFtraceEvent(ThermalExynosAcpmHighOverheadFtraceEvent&&) noexcept;
  ThermalExynosAcpmHighOverheadFtraceEvent& operator=(ThermalExynosAcpmHighOverheadFtraceEvent&&);
  ThermalExynosAcpmHighOverheadFtraceEvent(const ThermalExynosAcpmHighOverheadFtraceEvent&);
  ThermalExynosAcpmHighOverheadFtraceEvent& operator=(const ThermalExynosAcpmHighOverheadFtraceEvent&);
  bool operator==(const ThermalExynosAcpmHighOverheadFtraceEvent&) const;
  bool operator!=(const ThermalExynosAcpmHighOverheadFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tz_id() const { return _has_field_[1]; }
  int32_t tz_id() const { return tz_id_; }
  void set_tz_id(int32_t value) { tz_id_ = value; _has_field_.set(1); }

  bool has_current_temp() const { return _has_field_[2]; }
  uint32_t current_temp() const { return current_temp_; }
  void set_current_temp(uint32_t value) { current_temp_ = value; _has_field_.set(2); }

  bool has_ctrl_temp() const { return _has_field_[3]; }
  uint32_t ctrl_temp() const { return ctrl_temp_; }
  void set_ctrl_temp(uint32_t value) { ctrl_temp_ = value; _has_field_.set(3); }

  bool has_cdev_state() const { return _has_field_[4]; }
  uint32_t cdev_state() const { return cdev_state_; }
  void set_cdev_state(uint32_t value) { cdev_state_ = value; _has_field_.set(4); }

  bool has_pid_et_p() const { return _has_field_[5]; }
  int32_t pid_et_p() const { return pid_et_p_; }
  void set_pid_et_p(int32_t value) { pid_et_p_ = value; _has_field_.set(5); }

  bool has_k_p() const { return _has_field_[6]; }
  int32_t k_p() const { return k_p_; }
  void set_k_p(int32_t value) { k_p_ = value; _has_field_.set(6); }

  bool has_k_i() const { return _has_field_[7]; }
  int32_t k_i() const { return k_i_; }
  void set_k_i(int32_t value) { k_i_ = value; _has_field_.set(7); }

 private:
  int32_t tz_id_{};
  uint32_t current_temp_{};
  uint32_t ctrl_temp_{};
  uint32_t cdev_state_{};
  int32_t pid_et_p_{};
  int32_t k_p_{};
  int32_t k_i_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<8> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ThermalExynosAcpmBulkFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTzIdFieldNumber = 1,
    kCurrentTempFieldNumber = 2,
    kCtrlTempFieldNumber = 3,
    kCdevStateFieldNumber = 4,
    kPidEtPFieldNumber = 5,
    kPidPowerRangeFieldNumber = 6,
    kPidPFieldNumber = 7,
    kPidIFieldNumber = 8,
    kKPFieldNumber = 9,
    kKIFieldNumber = 10,
    kTimestampFieldNumber = 11,
  };

  ThermalExynosAcpmBulkFtraceEvent();
  ~ThermalExynosAcpmBulkFtraceEvent() override;
  ThermalExynosAcpmBulkFtraceEvent(ThermalExynosAcpmBulkFtraceEvent&&) noexcept;
  ThermalExynosAcpmBulkFtraceEvent& operator=(ThermalExynosAcpmBulkFtraceEvent&&);
  ThermalExynosAcpmBulkFtraceEvent(const ThermalExynosAcpmBulkFtraceEvent&);
  ThermalExynosAcpmBulkFtraceEvent& operator=(const ThermalExynosAcpmBulkFtraceEvent&);
  bool operator==(const ThermalExynosAcpmBulkFtraceEvent&) const;
  bool operator!=(const ThermalExynosAcpmBulkFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tz_id() const { return _has_field_[1]; }
  uint32_t tz_id() const { return tz_id_; }
  void set_tz_id(uint32_t value) { tz_id_ = value; _has_field_.set(1); }

  bool has_current_temp() const { return _has_field_[2]; }
  uint32_t current_temp() const { return current_temp_; }
  void set_current_temp(uint32_t value) { current_temp_ = value; _has_field_.set(2); }

  bool has_ctrl_temp() const { return _has_field_[3]; }
  uint32_t ctrl_temp() const { return ctrl_temp_; }
  void set_ctrl_temp(uint32_t value) { ctrl_temp_ = value; _has_field_.set(3); }

  bool has_cdev_state() const { return _has_field_[4]; }
  uint32_t cdev_state() const { return cdev_state_; }
  void set_cdev_state(uint32_t value) { cdev_state_ = value; _has_field_.set(4); }

  bool has_pid_et_p() const { return _has_field_[5]; }
  int32_t pid_et_p() const { return pid_et_p_; }
  void set_pid_et_p(int32_t value) { pid_et_p_ = value; _has_field_.set(5); }

  bool has_pid_power_range() const { return _has_field_[6]; }
  int32_t pid_power_range() const { return pid_power_range_; }
  void set_pid_power_range(int32_t value) { pid_power_range_ = value; _has_field_.set(6); }

  bool has_pid_p() const { return _has_field_[7]; }
  int32_t pid_p() const { return pid_p_; }
  void set_pid_p(int32_t value) { pid_p_ = value; _has_field_.set(7); }

  bool has_pid_i() const { return _has_field_[8]; }
  int32_t pid_i() const { return pid_i_; }
  void set_pid_i(int32_t value) { pid_i_ = value; _has_field_.set(8); }

  bool has_k_p() const { return _has_field_[9]; }
  int32_t k_p() const { return k_p_; }
  void set_k_p(int32_t value) { k_p_ = value; _has_field_.set(9); }

  bool has_k_i() const { return _has_field_[10]; }
  int32_t k_i() const { return k_i_; }
  void set_k_i(int32_t value) { k_i_ = value; _has_field_.set(10); }

  bool has_timestamp() const { return _has_field_[11]; }
  uint64_t timestamp() const { return timestamp_; }
  void set_timestamp(uint64_t value) { timestamp_ = value; _has_field_.set(11); }

 private:
  uint32_t tz_id_{};
  uint32_t current_temp_{};
  uint32_t ctrl_temp_{};
  uint32_t cdev_state_{};
  int32_t pid_et_p_{};
  int32_t pid_power_range_{};
  int32_t pid_p_{};
  int32_t pid_i_{};
  int32_t k_p_{};
  int32_t k_i_{};
  uint64_t timestamp_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<12> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_THERMAL_EXYNOS_PROTO_CPP_H_
