// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/filesystem/inode_file_map.proto

#include "protos/perfetto/trace/filesystem/inode_file_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR InodeFileMap_Entry::InodeFileMap_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_.inode_number_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0} {}
struct InodeFileMap_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InodeFileMap_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InodeFileMap_EntryDefaultTypeInternal() {}
  union {
    InodeFileMap_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InodeFileMap_EntryDefaultTypeInternal _InodeFileMap_Entry_default_instance_;
PROTOBUF_CONSTEXPR InodeFileMap::InodeFileMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mount_points_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.block_device_id_)*/uint64_t{0u}} {}
struct InodeFileMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InodeFileMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InodeFileMapDefaultTypeInternal() {}
  union {
    InodeFileMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InodeFileMapDefaultTypeInternal _InodeFileMap_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool InodeFileMap_Entry_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InodeFileMap_Entry_Type_strings[3] = {};

static const char InodeFileMap_Entry_Type_names[] =
  "DIRECTORY"
  "FILE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InodeFileMap_Entry_Type_entries[] = {
  { {InodeFileMap_Entry_Type_names + 0, 9}, 2 },
  { {InodeFileMap_Entry_Type_names + 9, 4}, 1 },
  { {InodeFileMap_Entry_Type_names + 13, 7}, 0 },
};

static const int InodeFileMap_Entry_Type_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> FILE
  0, // 2 -> DIRECTORY
};

const std::string& InodeFileMap_Entry_Type_Name(
    InodeFileMap_Entry_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InodeFileMap_Entry_Type_entries,
          InodeFileMap_Entry_Type_entries_by_number,
          3, InodeFileMap_Entry_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InodeFileMap_Entry_Type_entries,
      InodeFileMap_Entry_Type_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InodeFileMap_Entry_Type_strings[idx].get();
}
bool InodeFileMap_Entry_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InodeFileMap_Entry_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InodeFileMap_Entry_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<InodeFileMap_Entry_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::UNKNOWN;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::FILE;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::DIRECTORY;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::Type_MIN;
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry::Type_MAX;
constexpr int InodeFileMap_Entry::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class InodeFileMap_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileMap_Entry>()._impl_._has_bits_);
  static void set_has_inode_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InodeFileMap_Entry::InodeFileMap_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.InodeFileMap.Entry)
}
InodeFileMap_Entry::InodeFileMap_Entry(const InodeFileMap_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InodeFileMap_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){from._impl_.paths_}
    , decltype(_impl_.inode_number_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.inode_number_, &from._impl_.inode_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.inode_number_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileMap.Entry)
}

inline void InodeFileMap_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){arena}
    , decltype(_impl_.inode_number_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
  };
}

InodeFileMap_Entry::~InodeFileMap_Entry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileMap.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InodeFileMap_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paths_.~RepeatedPtrField();
}

void InodeFileMap_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InodeFileMap_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileMap.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.inode_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.inode_number_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InodeFileMap_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 inode_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_inode_number(&has_bits);
          _impl_.inode_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::InodeFileMap_Entry_Type_IsValid(val))) {
            _internal_set_type(static_cast<::perfetto::protos::InodeFileMap_Entry_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InodeFileMap_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.InodeFileMap.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 inode_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_inode_number(), target);
  }

  // repeated string paths = 2;
  for (int i = 0, n = this->_internal_paths_size(); i < n; i++) {
    const auto& s = this->_internal_paths(i);
    target = stream->WriteString(2, s, target);
  }

  // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.InodeFileMap.Entry)
  return target;
}

size_t InodeFileMap_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileMap.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.paths_.size());
  for (int i = 0, n = _impl_.paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.paths_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 inode_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_inode_number());
    }

    // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InodeFileMap_Entry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InodeFileMap_Entry*>(
      &from));
}

void InodeFileMap_Entry::MergeFrom(const InodeFileMap_Entry& from) {
  InodeFileMap_Entry* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileMap.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.inode_number_ = from._impl_.inode_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InodeFileMap_Entry::CopyFrom(const InodeFileMap_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileMap.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileMap_Entry::IsInitialized() const {
  return true;
}

void InodeFileMap_Entry::InternalSwap(InodeFileMap_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InodeFileMap_Entry, _impl_.type_)
      + sizeof(InodeFileMap_Entry::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(InodeFileMap_Entry, _impl_.inode_number_)>(
          reinterpret_cast<char*>(&_impl_.inode_number_),
          reinterpret_cast<char*>(&other->_impl_.inode_number_));
}

std::string InodeFileMap_Entry::GetTypeName() const {
  return "perfetto.protos.InodeFileMap.Entry";
}


// ===================================================================

class InodeFileMap::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileMap>()._impl_._has_bits_);
  static void set_has_block_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InodeFileMap::InodeFileMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.InodeFileMap)
}
InodeFileMap::InodeFileMap(const InodeFileMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InodeFileMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mount_points_){from._impl_.mount_points_}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.block_device_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.block_device_id_ = from._impl_.block_device_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileMap)
}

inline void InodeFileMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mount_points_){arena}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.block_device_id_){uint64_t{0u}}
  };
}

InodeFileMap::~InodeFileMap() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InodeFileMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mount_points_.~RepeatedPtrField();
  _impl_.entries_.~RepeatedPtrField();
}

void InodeFileMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InodeFileMap::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mount_points_.Clear();
  _impl_.entries_.Clear();
  _impl_.block_device_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InodeFileMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 block_device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_block_device_id(&has_bits);
          _impl_.block_device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string mount_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mount_points();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InodeFileMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.InodeFileMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 block_device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_device_id(), target);
  }

  // repeated string mount_points = 2;
  for (int i = 0, n = this->_internal_mount_points_size(); i < n; i++) {
    const auto& s = this->_internal_mount_points(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.InodeFileMap)
  return target;
}

size_t InodeFileMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mount_points = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.mount_points_.size());
  for (int i = 0, n = _impl_.mount_points_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.mount_points_.Get(i));
  }

  // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 block_device_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_device_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InodeFileMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InodeFileMap*>(
      &from));
}

void InodeFileMap::MergeFrom(const InodeFileMap& from) {
  InodeFileMap* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mount_points_.MergeFrom(from._impl_.mount_points_);
  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_has_block_device_id()) {
    _this->_internal_set_block_device_id(from._internal_block_device_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InodeFileMap::CopyFrom(const InodeFileMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileMap::IsInitialized() const {
  return true;
}

void InodeFileMap::InternalSwap(InodeFileMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mount_points_.InternalSwap(&other->_impl_.mount_points_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.block_device_id_, other->_impl_.block_device_id_);
}

std::string InodeFileMap::GetTypeName() const {
  return "perfetto.protos.InodeFileMap";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileMap_Entry*
Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileMap_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::InodeFileMap_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileMap*
Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::InodeFileMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
