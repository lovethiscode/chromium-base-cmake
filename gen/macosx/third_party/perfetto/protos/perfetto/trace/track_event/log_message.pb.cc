// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/log_message.proto

#include "protos/perfetto/trace/track_event/log_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR LogMessage::LogMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_location_iid_)*/uint64_t{0u}
  , /*decltype(_impl_.body_iid_)*/uint64_t{0u}
  , /*decltype(_impl_.prio_)*/0} {}
struct LogMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogMessageDefaultTypeInternal() {}
  union {
    LogMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogMessageDefaultTypeInternal _LogMessage_default_instance_;
PROTOBUF_CONSTEXPR LogMessageBody::LogMessageBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iid_)*/uint64_t{0u}} {}
struct LogMessageBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogMessageBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogMessageBodyDefaultTypeInternal() {}
  union {
    LogMessageBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogMessageBodyDefaultTypeInternal _LogMessageBody_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool LogMessage_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LogMessage_Priority_strings[8] = {};

static const char LogMessage_Priority_names[] =
  "PRIO_DEBUG"
  "PRIO_ERROR"
  "PRIO_FATAL"
  "PRIO_INFO"
  "PRIO_UNSPECIFIED"
  "PRIO_UNUSED"
  "PRIO_VERBOSE"
  "PRIO_WARN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LogMessage_Priority_entries[] = {
  { {LogMessage_Priority_names + 0, 10}, 3 },
  { {LogMessage_Priority_names + 10, 10}, 6 },
  { {LogMessage_Priority_names + 20, 10}, 7 },
  { {LogMessage_Priority_names + 30, 9}, 4 },
  { {LogMessage_Priority_names + 39, 16}, 0 },
  { {LogMessage_Priority_names + 55, 11}, 1 },
  { {LogMessage_Priority_names + 66, 12}, 2 },
  { {LogMessage_Priority_names + 78, 9}, 5 },
};

static const int LogMessage_Priority_entries_by_number[] = {
  4, // 0 -> PRIO_UNSPECIFIED
  5, // 1 -> PRIO_UNUSED
  6, // 2 -> PRIO_VERBOSE
  0, // 3 -> PRIO_DEBUG
  3, // 4 -> PRIO_INFO
  7, // 5 -> PRIO_WARN
  1, // 6 -> PRIO_ERROR
  2, // 7 -> PRIO_FATAL
};

const std::string& LogMessage_Priority_Name(
    LogMessage_Priority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LogMessage_Priority_entries,
          LogMessage_Priority_entries_by_number,
          8, LogMessage_Priority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LogMessage_Priority_entries,
      LogMessage_Priority_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LogMessage_Priority_strings[idx].get();
}
bool LogMessage_Priority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogMessage_Priority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LogMessage_Priority_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<LogMessage_Priority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogMessage_Priority LogMessage::PRIO_UNSPECIFIED;
constexpr LogMessage_Priority LogMessage::PRIO_UNUSED;
constexpr LogMessage_Priority LogMessage::PRIO_VERBOSE;
constexpr LogMessage_Priority LogMessage::PRIO_DEBUG;
constexpr LogMessage_Priority LogMessage::PRIO_INFO;
constexpr LogMessage_Priority LogMessage::PRIO_WARN;
constexpr LogMessage_Priority LogMessage::PRIO_ERROR;
constexpr LogMessage_Priority LogMessage::PRIO_FATAL;
constexpr LogMessage_Priority LogMessage::Priority_MIN;
constexpr LogMessage_Priority LogMessage::Priority_MAX;
constexpr int LogMessage::Priority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LogMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<LogMessage>()._impl_._has_bits_);
  static void set_has_source_location_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LogMessage::LogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LogMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_location_iid_){}
    , decltype(_impl_.body_iid_){}
    , decltype(_impl_.prio_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.source_location_iid_, &from._impl_.source_location_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prio_) -
    reinterpret_cast<char*>(&_impl_.source_location_iid_)) + sizeof(_impl_.prio_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LogMessage)
}

inline void LogMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_location_iid_){uint64_t{0u}}
    , decltype(_impl_.body_iid_){uint64_t{0u}}
    , decltype(_impl_.prio_){0}
  };
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LogMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LogMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.source_location_iid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.prio_) -
        reinterpret_cast<char*>(&_impl_.source_location_iid_)) + sizeof(_impl_.prio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LogMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 source_location_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_location_iid(&has_bits);
          _impl_.source_location_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 body_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_body_iid(&has_bits);
          _impl_.body_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LogMessage.Priority prio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::LogMessage_Priority_IsValid(val))) {
            _internal_set_prio(static_cast<::perfetto::protos::LogMessage_Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LogMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 source_location_iid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_source_location_iid(), target);
  }

  // optional uint64 body_iid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_body_iid(), target);
  }

  // optional .perfetto.protos.LogMessage.Priority prio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_prio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LogMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 source_location_iid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_location_iid());
    }

    // optional uint64 body_iid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_iid());
    }

    // optional .perfetto.protos.LogMessage.Priority prio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_prio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LogMessage*>(
      &from));
}

void LogMessage::MergeFrom(const LogMessage& from) {
  LogMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LogMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_location_iid_ = from._impl_.source_location_iid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.body_iid_ = from._impl_.body_iid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.prio_ = from._impl_.prio_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogMessage, _impl_.prio_)
      + sizeof(LogMessage::_impl_.prio_)
      - PROTOBUF_FIELD_OFFSET(LogMessage, _impl_.source_location_iid_)>(
          reinterpret_cast<char*>(&_impl_.source_location_iid_),
          reinterpret_cast<char*>(&other->_impl_.source_location_iid_));
}

std::string LogMessage::GetTypeName() const {
  return "perfetto.protos.LogMessage";
}


// ===================================================================

class LogMessageBody::_Internal {
 public:
  using HasBits = decltype(std::declval<LogMessageBody>()._impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogMessageBody::LogMessageBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LogMessageBody)
}
LogMessageBody::LogMessageBody(const LogMessageBody& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LogMessageBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){}
    , decltype(_impl_.iid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LogMessageBody)
}

inline void LogMessageBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){}
    , decltype(_impl_.iid_){uint64_t{0u}}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogMessageBody::~LogMessageBody() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LogMessageBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogMessageBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
}

void LogMessageBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogMessageBody::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LogMessageBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.body_.ClearNonDefaultToEmpty();
  }
  _impl_.iid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LogMessageBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogMessageBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LogMessageBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iid(), target);
  }

  // optional string body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LogMessageBody)
  return target;
}

size_t LogMessageBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LogMessageBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessageBody::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LogMessageBody*>(
      &from));
}

void LogMessageBody::MergeFrom(const LogMessageBody& from) {
  LogMessageBody* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LogMessageBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LogMessageBody::CopyFrom(const LogMessageBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LogMessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessageBody::IsInitialized() const {
  return true;
}

void LogMessageBody::InternalSwap(LogMessageBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.iid_, other->_impl_.iid_);
}

std::string LogMessageBody::GetTypeName() const {
  return "perfetto.protos.LogMessageBody";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::LogMessage*
Arena::CreateMaybeMessage< ::perfetto::protos::LogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LogMessageBody*
Arena::CreateMaybeMessage< ::perfetto::protos::LogMessageBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LogMessageBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
