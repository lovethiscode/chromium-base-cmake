// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/counter_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class CounterDescriptor;
struct CounterDescriptorDefaultTypeInternal;
extern CounterDescriptorDefaultTypeInternal _CounterDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::CounterDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::CounterDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum CounterDescriptor_BuiltinCounterType : int {
  CounterDescriptor_BuiltinCounterType_COUNTER_UNSPECIFIED = 0,
  CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_TIME_NS = 1,
  CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_INSTRUCTION_COUNT = 2
};
bool CounterDescriptor_BuiltinCounterType_IsValid(int value);
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor_BuiltinCounterType_BuiltinCounterType_MIN = CounterDescriptor_BuiltinCounterType_COUNTER_UNSPECIFIED;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor_BuiltinCounterType_BuiltinCounterType_MAX = CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_INSTRUCTION_COUNT;
constexpr int CounterDescriptor_BuiltinCounterType_BuiltinCounterType_ARRAYSIZE = CounterDescriptor_BuiltinCounterType_BuiltinCounterType_MAX + 1;

const std::string& CounterDescriptor_BuiltinCounterType_Name(CounterDescriptor_BuiltinCounterType value);
template<typename T>
inline const std::string& CounterDescriptor_BuiltinCounterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CounterDescriptor_BuiltinCounterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CounterDescriptor_BuiltinCounterType_Name.");
  return CounterDescriptor_BuiltinCounterType_Name(static_cast<CounterDescriptor_BuiltinCounterType>(enum_t_value));
}
bool CounterDescriptor_BuiltinCounterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CounterDescriptor_BuiltinCounterType* value);
enum CounterDescriptor_Unit : int {
  CounterDescriptor_Unit_UNIT_UNSPECIFIED = 0,
  CounterDescriptor_Unit_UNIT_TIME_NS = 1,
  CounterDescriptor_Unit_UNIT_COUNT = 2,
  CounterDescriptor_Unit_UNIT_SIZE_BYTES = 3
};
bool CounterDescriptor_Unit_IsValid(int value);
constexpr CounterDescriptor_Unit CounterDescriptor_Unit_Unit_MIN = CounterDescriptor_Unit_UNIT_UNSPECIFIED;
constexpr CounterDescriptor_Unit CounterDescriptor_Unit_Unit_MAX = CounterDescriptor_Unit_UNIT_SIZE_BYTES;
constexpr int CounterDescriptor_Unit_Unit_ARRAYSIZE = CounterDescriptor_Unit_Unit_MAX + 1;

const std::string& CounterDescriptor_Unit_Name(CounterDescriptor_Unit value);
template<typename T>
inline const std::string& CounterDescriptor_Unit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CounterDescriptor_Unit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CounterDescriptor_Unit_Name.");
  return CounterDescriptor_Unit_Name(static_cast<CounterDescriptor_Unit>(enum_t_value));
}
bool CounterDescriptor_Unit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CounterDescriptor_Unit* value);
// ===================================================================

class CounterDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CounterDescriptor) */ {
 public:
  inline CounterDescriptor() : CounterDescriptor(nullptr) {}
  ~CounterDescriptor() override;
  explicit PROTOBUF_CONSTEXPR CounterDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CounterDescriptor(const CounterDescriptor& from);
  CounterDescriptor(CounterDescriptor&& from) noexcept
    : CounterDescriptor() {
    *this = ::std::move(from);
  }

  inline CounterDescriptor& operator=(const CounterDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CounterDescriptor& operator=(CounterDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CounterDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CounterDescriptor* internal_default_instance() {
    return reinterpret_cast<const CounterDescriptor*>(
               &_CounterDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CounterDescriptor& a, CounterDescriptor& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CounterDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CounterDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CounterDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CounterDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CounterDescriptor& from);
  void MergeFrom(const CounterDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CounterDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CounterDescriptor";
  }
  protected:
  explicit CounterDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CounterDescriptor_BuiltinCounterType BuiltinCounterType;
  static constexpr BuiltinCounterType COUNTER_UNSPECIFIED =
    CounterDescriptor_BuiltinCounterType_COUNTER_UNSPECIFIED;
  static constexpr BuiltinCounterType COUNTER_THREAD_TIME_NS =
    CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_TIME_NS;
  static constexpr BuiltinCounterType COUNTER_THREAD_INSTRUCTION_COUNT =
    CounterDescriptor_BuiltinCounterType_COUNTER_THREAD_INSTRUCTION_COUNT;
  static inline bool BuiltinCounterType_IsValid(int value) {
    return CounterDescriptor_BuiltinCounterType_IsValid(value);
  }
  static constexpr BuiltinCounterType BuiltinCounterType_MIN =
    CounterDescriptor_BuiltinCounterType_BuiltinCounterType_MIN;
  static constexpr BuiltinCounterType BuiltinCounterType_MAX =
    CounterDescriptor_BuiltinCounterType_BuiltinCounterType_MAX;
  static constexpr int BuiltinCounterType_ARRAYSIZE =
    CounterDescriptor_BuiltinCounterType_BuiltinCounterType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BuiltinCounterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuiltinCounterType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuiltinCounterType_Name.");
    return CounterDescriptor_BuiltinCounterType_Name(enum_t_value);
  }
  static inline bool BuiltinCounterType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuiltinCounterType* value) {
    return CounterDescriptor_BuiltinCounterType_Parse(name, value);
  }

  typedef CounterDescriptor_Unit Unit;
  static constexpr Unit UNIT_UNSPECIFIED =
    CounterDescriptor_Unit_UNIT_UNSPECIFIED;
  static constexpr Unit UNIT_TIME_NS =
    CounterDescriptor_Unit_UNIT_TIME_NS;
  static constexpr Unit UNIT_COUNT =
    CounterDescriptor_Unit_UNIT_COUNT;
  static constexpr Unit UNIT_SIZE_BYTES =
    CounterDescriptor_Unit_UNIT_SIZE_BYTES;
  static inline bool Unit_IsValid(int value) {
    return CounterDescriptor_Unit_IsValid(value);
  }
  static constexpr Unit Unit_MIN =
    CounterDescriptor_Unit_Unit_MIN;
  static constexpr Unit Unit_MAX =
    CounterDescriptor_Unit_Unit_MAX;
  static constexpr int Unit_ARRAYSIZE =
    CounterDescriptor_Unit_Unit_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Unit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Unit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Unit_Name.");
    return CounterDescriptor_Unit_Name(enum_t_value);
  }
  static inline bool Unit_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Unit* value) {
    return CounterDescriptor_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 2,
    kUnitNameFieldNumber = 6,
    kTypeFieldNumber = 1,
    kUnitFieldNumber = 3,
    kUnitMultiplierFieldNumber = 4,
    kIsIncrementalFieldNumber = 5,
  };
  // repeated string categories = 2;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();
  private:
  const std::string& _internal_categories(int index) const;
  std::string* _internal_add_categories();
  public:

  // optional string unit_name = 6;
  bool has_unit_name() const;
  private:
  bool _internal_has_unit_name() const;
  public:
  void clear_unit_name();
  const std::string& unit_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit_name();
  PROTOBUF_NODISCARD std::string* release_unit_name();
  void set_allocated_unit_name(std::string* unit_name);
  private:
  const std::string& _internal_unit_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit_name(const std::string& value);
  std::string* _internal_mutable_unit_name();
  public:

  // optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::perfetto::protos::CounterDescriptor_BuiltinCounterType type() const;
  void set_type(::perfetto::protos::CounterDescriptor_BuiltinCounterType value);
  private:
  ::perfetto::protos::CounterDescriptor_BuiltinCounterType _internal_type() const;
  void _internal_set_type(::perfetto::protos::CounterDescriptor_BuiltinCounterType value);
  public:

  // optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  ::perfetto::protos::CounterDescriptor_Unit unit() const;
  void set_unit(::perfetto::protos::CounterDescriptor_Unit value);
  private:
  ::perfetto::protos::CounterDescriptor_Unit _internal_unit() const;
  void _internal_set_unit(::perfetto::protos::CounterDescriptor_Unit value);
  public:

  // optional int64 unit_multiplier = 4;
  bool has_unit_multiplier() const;
  private:
  bool _internal_has_unit_multiplier() const;
  public:
  void clear_unit_multiplier();
  int64_t unit_multiplier() const;
  void set_unit_multiplier(int64_t value);
  private:
  int64_t _internal_unit_multiplier() const;
  void _internal_set_unit_multiplier(int64_t value);
  public:

  // optional bool is_incremental = 5;
  bool has_is_incremental() const;
  private:
  bool _internal_has_is_incremental() const;
  public:
  void clear_is_incremental();
  bool is_incremental() const;
  void set_is_incremental(bool value);
  private:
  bool _internal_is_incremental() const;
  void _internal_set_is_incremental(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.CounterDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_name_;
    int type_;
    int unit_;
    int64_t unit_multiplier_;
    bool is_incremental_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CounterDescriptor

// optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
inline bool CounterDescriptor::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CounterDescriptor::has_type() const {
  return _internal_has_type();
}
inline void CounterDescriptor::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::CounterDescriptor_BuiltinCounterType CounterDescriptor::_internal_type() const {
  return static_cast< ::perfetto::protos::CounterDescriptor_BuiltinCounterType >(_impl_.type_);
}
inline ::perfetto::protos::CounterDescriptor_BuiltinCounterType CounterDescriptor::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CounterDescriptor.type)
  return _internal_type();
}
inline void CounterDescriptor::_internal_set_type(::perfetto::protos::CounterDescriptor_BuiltinCounterType value) {
  assert(::perfetto::protos::CounterDescriptor_BuiltinCounterType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void CounterDescriptor::set_type(::perfetto::protos::CounterDescriptor_BuiltinCounterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CounterDescriptor.type)
}

// repeated string categories = 2;
inline int CounterDescriptor::_internal_categories_size() const {
  return _impl_.categories_.size();
}
inline int CounterDescriptor::categories_size() const {
  return _internal_categories_size();
}
inline void CounterDescriptor::clear_categories() {
  _impl_.categories_.Clear();
}
inline std::string* CounterDescriptor::add_categories() {
  std::string* _s = _internal_add_categories();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.CounterDescriptor.categories)
  return _s;
}
inline const std::string& CounterDescriptor::_internal_categories(int index) const {
  return _impl_.categories_.Get(index);
}
inline const std::string& CounterDescriptor::categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CounterDescriptor.categories)
  return _internal_categories(index);
}
inline std::string* CounterDescriptor::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CounterDescriptor.categories)
  return _impl_.categories_.Mutable(index);
}
inline void CounterDescriptor::set_categories(int index, const std::string& value) {
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CounterDescriptor.categories)
}
inline void CounterDescriptor::set_categories(int index, std::string&& value) {
  _impl_.categories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.CounterDescriptor.categories)
}
inline void CounterDescriptor::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.CounterDescriptor.categories)
}
inline void CounterDescriptor::set_categories(int index, const char* value, size_t size) {
  _impl_.categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.CounterDescriptor.categories)
}
inline std::string* CounterDescriptor::_internal_add_categories() {
  return _impl_.categories_.Add();
}
inline void CounterDescriptor::add_categories(const std::string& value) {
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.CounterDescriptor.categories)
}
inline void CounterDescriptor::add_categories(std::string&& value) {
  _impl_.categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.CounterDescriptor.categories)
}
inline void CounterDescriptor::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.CounterDescriptor.categories)
}
inline void CounterDescriptor::add_categories(const char* value, size_t size) {
  _impl_.categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.CounterDescriptor.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CounterDescriptor::categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CounterDescriptor.categories)
  return _impl_.categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CounterDescriptor::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CounterDescriptor.categories)
  return &_impl_.categories_;
}

// optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
inline bool CounterDescriptor::_internal_has_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CounterDescriptor::has_unit() const {
  return _internal_has_unit();
}
inline void CounterDescriptor::clear_unit() {
  _impl_.unit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::CounterDescriptor_Unit CounterDescriptor::_internal_unit() const {
  return static_cast< ::perfetto::protos::CounterDescriptor_Unit >(_impl_.unit_);
}
inline ::perfetto::protos::CounterDescriptor_Unit CounterDescriptor::unit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CounterDescriptor.unit)
  return _internal_unit();
}
inline void CounterDescriptor::_internal_set_unit(::perfetto::protos::CounterDescriptor_Unit value) {
  assert(::perfetto::protos::CounterDescriptor_Unit_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unit_ = value;
}
inline void CounterDescriptor::set_unit(::perfetto::protos::CounterDescriptor_Unit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CounterDescriptor.unit)
}

// optional string unit_name = 6;
inline bool CounterDescriptor::_internal_has_unit_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CounterDescriptor::has_unit_name() const {
  return _internal_has_unit_name();
}
inline void CounterDescriptor::clear_unit_name() {
  _impl_.unit_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CounterDescriptor::unit_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CounterDescriptor.unit_name)
  return _internal_unit_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CounterDescriptor::set_unit_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.unit_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CounterDescriptor.unit_name)
}
inline std::string* CounterDescriptor::mutable_unit_name() {
  std::string* _s = _internal_mutable_unit_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CounterDescriptor.unit_name)
  return _s;
}
inline const std::string& CounterDescriptor::_internal_unit_name() const {
  return _impl_.unit_name_.Get();
}
inline void CounterDescriptor::_internal_set_unit_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CounterDescriptor::_internal_mutable_unit_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unit_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CounterDescriptor::release_unit_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CounterDescriptor.unit_name)
  if (!_internal_has_unit_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.unit_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_name_.IsDefault()) {
    _impl_.unit_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CounterDescriptor::set_allocated_unit_name(std::string* unit_name) {
  if (unit_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unit_name_.SetAllocated(unit_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unit_name_.IsDefault()) {
    _impl_.unit_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CounterDescriptor.unit_name)
}

// optional int64 unit_multiplier = 4;
inline bool CounterDescriptor::_internal_has_unit_multiplier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CounterDescriptor::has_unit_multiplier() const {
  return _internal_has_unit_multiplier();
}
inline void CounterDescriptor::clear_unit_multiplier() {
  _impl_.unit_multiplier_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t CounterDescriptor::_internal_unit_multiplier() const {
  return _impl_.unit_multiplier_;
}
inline int64_t CounterDescriptor::unit_multiplier() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CounterDescriptor.unit_multiplier)
  return _internal_unit_multiplier();
}
inline void CounterDescriptor::_internal_set_unit_multiplier(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unit_multiplier_ = value;
}
inline void CounterDescriptor::set_unit_multiplier(int64_t value) {
  _internal_set_unit_multiplier(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CounterDescriptor.unit_multiplier)
}

// optional bool is_incremental = 5;
inline bool CounterDescriptor::_internal_has_is_incremental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CounterDescriptor::has_is_incremental() const {
  return _internal_has_is_incremental();
}
inline void CounterDescriptor::clear_is_incremental() {
  _impl_.is_incremental_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CounterDescriptor::_internal_is_incremental() const {
  return _impl_.is_incremental_;
}
inline bool CounterDescriptor::is_incremental() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CounterDescriptor.is_incremental)
  return _internal_is_incremental();
}
inline void CounterDescriptor::_internal_set_is_incremental(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_incremental_ = value;
}
inline void CounterDescriptor::set_is_incremental(bool value) {
  _internal_set_is_incremental(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CounterDescriptor.is_incremental)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::CounterDescriptor_BuiltinCounterType> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::CounterDescriptor_Unit> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto
