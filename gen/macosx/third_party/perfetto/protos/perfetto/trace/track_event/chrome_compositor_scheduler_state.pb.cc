// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.proto

#include "protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ChromeCompositorSchedulerState::ChromeCompositorSchedulerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_machine_)*/nullptr
  , /*decltype(_impl_.begin_impl_frame_args_)*/nullptr
  , /*decltype(_impl_.begin_frame_observer_state_)*/nullptr
  , /*decltype(_impl_.begin_frame_source_state_)*/nullptr
  , /*decltype(_impl_.compositor_timing_history_)*/nullptr
  , /*decltype(_impl_.observing_begin_frame_source_)*/false
  , /*decltype(_impl_.begin_impl_frame_deadline_task_)*/false
  , /*decltype(_impl_.pending_begin_frame_task_)*/false
  , /*decltype(_impl_.skipped_last_frame_missed_exceeded_deadline_)*/false
  , /*decltype(_impl_.inside_action_)*/0
  , /*decltype(_impl_.deadline_us_)*/int64_t{0}
  , /*decltype(_impl_.deadline_scheduled_at_us_)*/int64_t{0}
  , /*decltype(_impl_.now_us_)*/int64_t{0}
  , /*decltype(_impl_.now_to_deadline_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.now_to_deadline_scheduled_at_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.deadline_mode_)*/0} {}
struct ChromeCompositorSchedulerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeCompositorSchedulerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeCompositorSchedulerStateDefaultTypeInternal() {}
  union {
    ChromeCompositorSchedulerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeCompositorSchedulerStateDefaultTypeInternal _ChromeCompositorSchedulerState_default_instance_;
PROTOBUF_CONSTEXPR ChromeCompositorStateMachine_MajorState::ChromeCompositorStateMachine_MajorState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.next_action_)*/0
  , /*decltype(_impl_.begin_impl_frame_state_)*/0
  , /*decltype(_impl_.begin_main_frame_state_)*/0
  , /*decltype(_impl_.layer_tree_frame_sink_state_)*/0
  , /*decltype(_impl_.forced_redraw_state_)*/0} {}
struct ChromeCompositorStateMachine_MajorStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeCompositorStateMachine_MajorStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeCompositorStateMachine_MajorStateDefaultTypeInternal() {}
  union {
    ChromeCompositorStateMachine_MajorState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeCompositorStateMachine_MajorStateDefaultTypeInternal _ChromeCompositorStateMachine_MajorState_default_instance_;
PROTOBUF_CONSTEXPR ChromeCompositorStateMachine_MinorState::ChromeCompositorStateMachine_MinorState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commit_count_)*/0
  , /*decltype(_impl_.current_frame_number_)*/0
  , /*decltype(_impl_.last_frame_number_submit_performed_)*/0
  , /*decltype(_impl_.last_frame_number_draw_performed_)*/0
  , /*decltype(_impl_.last_frame_number_begin_main_frame_sent_)*/0
  , /*decltype(_impl_.did_draw_)*/false
  , /*decltype(_impl_.did_send_begin_main_frame_for_current_frame_)*/false
  , /*decltype(_impl_.did_notify_begin_main_frame_not_expected_until_)*/false
  , /*decltype(_impl_.did_notify_begin_main_frame_not_expected_soon_)*/false
  , /*decltype(_impl_.wants_begin_main_frame_not_expected_)*/false
  , /*decltype(_impl_.did_commit_during_frame_)*/false
  , /*decltype(_impl_.did_invalidate_layer_tree_frame_sink_)*/false
  , /*decltype(_impl_.did_perform_impl_side_invalidaion_)*/false
  , /*decltype(_impl_.consecutive_checkerboard_animations_)*/0
  , /*decltype(_impl_.pending_submit_frames_)*/0
  , /*decltype(_impl_.submit_frames_with_current_layer_tree_frame_sink_)*/0
  , /*decltype(_impl_.did_prepare_tiles_)*/false
  , /*decltype(_impl_.needs_redraw_)*/false
  , /*decltype(_impl_.needs_prepare_tiles_)*/false
  , /*decltype(_impl_.needs_begin_main_frame_)*/false
  , /*decltype(_impl_.needs_one_begin_impl_frame_)*/false
  , /*decltype(_impl_.visible_)*/false
  , /*decltype(_impl_.begin_frame_source_paused_)*/false
  , /*decltype(_impl_.can_draw_)*/false
  , /*decltype(_impl_.resourceless_draw_)*/false
  , /*decltype(_impl_.has_pending_tree_)*/false
  , /*decltype(_impl_.pending_tree_is_ready_for_activation_)*/false
  , /*decltype(_impl_.active_tree_needs_first_draw_)*/false
  , /*decltype(_impl_.tree_priority_)*/0
  , /*decltype(_impl_.active_tree_is_ready_to_draw_)*/false
  , /*decltype(_impl_.did_create_and_initialize_first_layer_tree_frame_sink_)*/false
  , /*decltype(_impl_.critical_begin_main_frame_to_activate_is_fast_)*/false
  , /*decltype(_impl_.main_thread_missed_last_deadline_)*/false
  , /*decltype(_impl_.scroll_handler_state_)*/0
  , /*decltype(_impl_.video_needs_begin_frames_)*/false
  , /*decltype(_impl_.defer_begin_main_frame_)*/false
  , /*decltype(_impl_.last_commit_had_no_updates_)*/false
  , /*decltype(_impl_.did_draw_in_last_frame_)*/false
  , /*decltype(_impl_.did_submit_in_last_frame_)*/false
  , /*decltype(_impl_.needs_impl_side_invalidation_)*/false
  , /*decltype(_impl_.current_pending_tree_is_impl_side_)*/false
  , /*decltype(_impl_.previous_pending_tree_was_impl_side_)*/false
  , /*decltype(_impl_.processing_animation_worklets_for_active_tree_)*/false
  , /*decltype(_impl_.processing_animation_worklets_for_pending_tree_)*/false
  , /*decltype(_impl_.processing_paint_worklets_for_pending_tree_)*/false} {}
struct ChromeCompositorStateMachine_MinorStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeCompositorStateMachine_MinorStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeCompositorStateMachine_MinorStateDefaultTypeInternal() {}
  union {
    ChromeCompositorStateMachine_MinorState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeCompositorStateMachine_MinorStateDefaultTypeInternal _ChromeCompositorStateMachine_MinorState_default_instance_;
PROTOBUF_CONSTEXPR ChromeCompositorStateMachine::ChromeCompositorStateMachine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.major_state_)*/nullptr
  , /*decltype(_impl_.minor_state_)*/nullptr} {}
struct ChromeCompositorStateMachineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeCompositorStateMachineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeCompositorStateMachineDefaultTypeInternal() {}
  union {
    ChromeCompositorStateMachine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeCompositorStateMachineDefaultTypeInternal _ChromeCompositorStateMachine_default_instance_;
PROTOBUF_CONSTEXPR BeginFrameArgs::BeginFrameArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_id_)*/uint64_t{0u}
  , /*decltype(_impl_.sequence_number_)*/uint64_t{0u}
  , /*decltype(_impl_.frame_time_us_)*/int64_t{0}
  , /*decltype(_impl_.deadline_us_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.on_critical_path_)*/false
  , /*decltype(_impl_.animate_only_)*/false
  , /*decltype(_impl_.interval_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.frames_throttled_since_last_)*/int64_t{0}
  , /*decltype(_impl_.created_from_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BeginFrameArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeginFrameArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeginFrameArgsDefaultTypeInternal() {}
  union {
    BeginFrameArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeginFrameArgsDefaultTypeInternal _BeginFrameArgs_default_instance_;
PROTOBUF_CONSTEXPR BeginImplFrameArgs_TimestampsInUs::BeginImplFrameArgs_TimestampsInUs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interval_delta_)*/int64_t{0}
  , /*decltype(_impl_.now_to_deadline_delta_)*/int64_t{0}
  , /*decltype(_impl_.frame_time_to_now_delta_)*/int64_t{0}
  , /*decltype(_impl_.frame_time_to_deadline_delta_)*/int64_t{0}
  , /*decltype(_impl_.now_)*/int64_t{0}
  , /*decltype(_impl_.frame_time_)*/int64_t{0}
  , /*decltype(_impl_.deadline_)*/int64_t{0}} {}
struct BeginImplFrameArgs_TimestampsInUsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeginImplFrameArgs_TimestampsInUsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeginImplFrameArgs_TimestampsInUsDefaultTypeInternal() {}
  union {
    BeginImplFrameArgs_TimestampsInUs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeginImplFrameArgs_TimestampsInUsDefaultTypeInternal _BeginImplFrameArgs_TimestampsInUs_default_instance_;
PROTOBUF_CONSTEXPR BeginImplFrameArgs::BeginImplFrameArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamps_in_us_)*/nullptr
  , /*decltype(_impl_.updated_at_us_)*/int64_t{0}
  , /*decltype(_impl_.finished_at_us_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BeginImplFrameArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeginImplFrameArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeginImplFrameArgsDefaultTypeInternal() {}
  union {
    BeginImplFrameArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeginImplFrameArgsDefaultTypeInternal _BeginImplFrameArgs_default_instance_;
PROTOBUF_CONSTEXPR BeginFrameObserverState::BeginFrameObserverState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.last_begin_frame_args_)*/nullptr
  , /*decltype(_impl_.dropped_begin_frame_args_)*/int64_t{0}} {}
struct BeginFrameObserverStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeginFrameObserverStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeginFrameObserverStateDefaultTypeInternal() {}
  union {
    BeginFrameObserverState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeginFrameObserverStateDefaultTypeInternal _BeginFrameObserverState_default_instance_;
PROTOBUF_CONSTEXPR BeginFrameSourceState::BeginFrameSourceState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.last_begin_frame_args_)*/nullptr
  , /*decltype(_impl_.source_id_)*/0u
  , /*decltype(_impl_.paused_)*/false
  , /*decltype(_impl_.num_observers_)*/0u} {}
struct BeginFrameSourceStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeginFrameSourceStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeginFrameSourceStateDefaultTypeInternal() {}
  union {
    BeginFrameSourceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeginFrameSourceStateDefaultTypeInternal _BeginFrameSourceState_default_instance_;
PROTOBUF_CONSTEXPR CompositorTimingHistory::CompositorTimingHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begin_main_frame_queue_critical_estimate_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.begin_main_frame_queue_not_critical_estimate_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.commit_to_ready_to_activate_estimate_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.prepare_tiles_estimate_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.activate_estimate_delta_us_)*/int64_t{0}
  , /*decltype(_impl_.draw_estimate_delta_us_)*/int64_t{0}} {}
struct CompositorTimingHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompositorTimingHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompositorTimingHistoryDefaultTypeInternal() {}
  union {
    CompositorTimingHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompositorTimingHistoryDefaultTypeInternal _CompositorTimingHistory_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_strings[6] = {};

static const char ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names[] =
  "DEADLINE_MODE_BLOCKED"
  "DEADLINE_MODE_IMMEDIATE"
  "DEADLINE_MODE_LATE"
  "DEADLINE_MODE_NONE"
  "DEADLINE_MODE_REGULAR"
  "DEADLINE_MODE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries[] = {
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 0, 21}, 5 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 21, 23}, 2 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 44, 18}, 4 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 62, 18}, 1 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 80, 21}, 3 },
  { {ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_names + 101, 25}, 0 },
};

static const int ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries_by_number[] = {
  5, // 0 -> DEADLINE_MODE_UNSPECIFIED
  3, // 1 -> DEADLINE_MODE_NONE
  1, // 2 -> DEADLINE_MODE_IMMEDIATE
  4, // 3 -> DEADLINE_MODE_REGULAR
  2, // 4 -> DEADLINE_MODE_LATE
  0, // 5 -> DEADLINE_MODE_BLOCKED
};

const std::string& ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Name(
    ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries,
          ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries_by_number,
          6, ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries,
      ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_strings[idx].get();
}
bool ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_UNSPECIFIED;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_NONE;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_IMMEDIATE;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_REGULAR;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_LATE;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::DEADLINE_MODE_BLOCKED;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::BeginImplFrameDeadlineMode_MIN;
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::BeginImplFrameDeadlineMode_MAX;
constexpr int ChromeCompositorSchedulerState::BeginImplFrameDeadlineMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_BeginImplFrameState_strings[4] = {};

static const char ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names[] =
  "BEGIN_IMPL_FRAME_IDLE"
  "BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME"
  "BEGIN_IMPL_FRAME_INSIDE_DEADLINE"
  "BEGIN_IMPL_FRAME_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 0, 21}, 1 },
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 21, 35}, 2 },
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 56, 32}, 3 },
  { {ChromeCompositorStateMachine_MajorState_BeginImplFrameState_names + 88, 28}, 0 },
};

static const int ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries_by_number[] = {
  3, // 0 -> BEGIN_IMPL_FRAME_UNSPECIFIED
  0, // 1 -> BEGIN_IMPL_FRAME_IDLE
  1, // 2 -> BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME
  2, // 3 -> BEGIN_IMPL_FRAME_INSIDE_DEADLINE
};

const std::string& ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Name(
    ChromeCompositorStateMachine_MajorState_BeginImplFrameState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries,
          ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries_by_number,
          4, ChromeCompositorStateMachine_MajorState_BeginImplFrameState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries,
      ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_BeginImplFrameState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorStateMachine_MajorState_BeginImplFrameState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_BeginImplFrameState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_IDLE;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BEGIN_IMPL_FRAME_INSIDE_DEADLINE;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BeginImplFrameState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::BeginImplFrameState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::BeginImplFrameState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_BeginMainFrameState_strings[4] = {};

static const char ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names[] =
  "BEGIN_MAIN_FRAME_IDLE"
  "BEGIN_MAIN_FRAME_READY_TO_COMMIT"
  "BEGIN_MAIN_FRAME_SENT"
  "BEGIN_MAIN_FRAME_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 0, 21}, 1 },
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 21, 32}, 3 },
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 53, 21}, 2 },
  { {ChromeCompositorStateMachine_MajorState_BeginMainFrameState_names + 74, 28}, 0 },
};

static const int ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries_by_number[] = {
  3, // 0 -> BEGIN_MAIN_FRAME_UNSPECIFIED
  0, // 1 -> BEGIN_MAIN_FRAME_IDLE
  2, // 2 -> BEGIN_MAIN_FRAME_SENT
  1, // 3 -> BEGIN_MAIN_FRAME_READY_TO_COMMIT
};

const std::string& ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Name(
    ChromeCompositorStateMachine_MajorState_BeginMainFrameState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries,
          ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries_by_number,
          4, ChromeCompositorStateMachine_MajorState_BeginMainFrameState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries,
      ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_BeginMainFrameState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorStateMachine_MajorState_BeginMainFrameState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_BeginMainFrameState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_IDLE;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_SENT;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BEGIN_MAIN_FRAME_READY_TO_COMMIT;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BeginMainFrameState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::BeginMainFrameState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::BeginMainFrameState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_strings[6] = {};

static const char ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names[] =
  "LAYER_TREE_FRAME_ACTIVE"
  "LAYER_TREE_FRAME_CREATING"
  "LAYER_TREE_FRAME_NONE"
  "LAYER_TREE_FRAME_UNSPECIFIED"
  "LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION"
  "LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 0, 23}, 2 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 23, 25}, 3 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 48, 21}, 1 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 69, 28}, 0 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 97, 45}, 5 },
  { {ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_names + 142, 41}, 4 },
};

static const int ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries_by_number[] = {
  3, // 0 -> LAYER_TREE_FRAME_UNSPECIFIED
  2, // 1 -> LAYER_TREE_FRAME_NONE
  0, // 2 -> LAYER_TREE_FRAME_ACTIVE
  1, // 3 -> LAYER_TREE_FRAME_CREATING
  5, // 4 -> LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT
  4, // 5 -> LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION
};

const std::string& ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Name(
    ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries,
          ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries_by_number,
          6, ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries,
      ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_NONE;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_ACTIVE;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_CREATING;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LayerTreeFrameSinkState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::LayerTreeFrameSinkState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::LayerTreeFrameSinkState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_strings[5] = {};

static const char ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names[] =
  "FORCED_REDRAW_IDLE"
  "FORCED_REDRAW_UNSPECIFIED"
  "FORCED_REDRAW_WAITING_FOR_ACTIVATION"
  "FORCED_REDRAW_WAITING_FOR_COMMIT"
  "FORCED_REDRAW_WAITING_FOR_DRAW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries[] = {
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 0, 18}, 1 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 18, 25}, 0 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 43, 36}, 3 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 79, 32}, 2 },
  { {ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_names + 111, 30}, 4 },
};

static const int ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries_by_number[] = {
  1, // 0 -> FORCED_REDRAW_UNSPECIFIED
  0, // 1 -> FORCED_REDRAW_IDLE
  3, // 2 -> FORCED_REDRAW_WAITING_FOR_COMMIT
  2, // 3 -> FORCED_REDRAW_WAITING_FOR_ACTIVATION
  4, // 4 -> FORCED_REDRAW_WAITING_FOR_DRAW
};

const std::string& ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Name(
    ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries,
          ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries_by_number,
          5, ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries,
      ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_IDLE;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_WAITING_FOR_COMMIT;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_WAITING_FOR_ACTIVATION;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::FORCED_REDRAW_WAITING_FOR_DRAW;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::ForcedRedrawOnTimeoutState_MIN;
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::ForcedRedrawOnTimeoutState_MAX;
constexpr int ChromeCompositorStateMachine_MajorState::ForcedRedrawOnTimeoutState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MinorState_TreePriority_strings[4] = {};

static const char ChromeCompositorStateMachine_MinorState_TreePriority_names[] =
  "TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY"
  "TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES"
  "TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY"
  "TREE_PRIORITY_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MinorState_TreePriority_entries[] = {
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 0, 40}, 3 },
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 40, 42}, 1 },
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 82, 39}, 2 },
  { {ChromeCompositorStateMachine_MinorState_TreePriority_names + 121, 25}, 0 },
};

static const int ChromeCompositorStateMachine_MinorState_TreePriority_entries_by_number[] = {
  3, // 0 -> TREE_PRIORITY_UNSPECIFIED
  1, // 1 -> TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES
  2, // 2 -> TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY
  0, // 3 -> TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY
};

const std::string& ChromeCompositorStateMachine_MinorState_TreePriority_Name(
    ChromeCompositorStateMachine_MinorState_TreePriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MinorState_TreePriority_entries,
          ChromeCompositorStateMachine_MinorState_TreePriority_entries_by_number,
          4, ChromeCompositorStateMachine_MinorState_TreePriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MinorState_TreePriority_entries,
      ChromeCompositorStateMachine_MinorState_TreePriority_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MinorState_TreePriority_strings[idx].get();
}
bool ChromeCompositorStateMachine_MinorState_TreePriority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorStateMachine_MinorState_TreePriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MinorState_TreePriority_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MinorState_TreePriority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TreePriority_MIN;
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::TreePriority_MAX;
constexpr int ChromeCompositorStateMachine_MinorState::TreePriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorStateMachine_MinorState_ScrollHandlerState_strings[3] = {};

static const char ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names[] =
  "SCROLL_AFFECTS_SCROLL_HANDLER"
  "SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER"
  "SCROLL_HANDLER_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries[] = {
  { {ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names + 0, 29}, 1 },
  { {ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names + 29, 37}, 2 },
  { {ChromeCompositorStateMachine_MinorState_ScrollHandlerState_names + 66, 26}, 0 },
};

static const int ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries_by_number[] = {
  2, // 0 -> SCROLL_HANDLER_UNSPECIFIED
  0, // 1 -> SCROLL_AFFECTS_SCROLL_HANDLER
  1, // 2 -> SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER
};

const std::string& ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Name(
    ChromeCompositorStateMachine_MinorState_ScrollHandlerState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries,
          ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries_by_number,
          3, ChromeCompositorStateMachine_MinorState_ScrollHandlerState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries,
      ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorStateMachine_MinorState_ScrollHandlerState_strings[idx].get();
}
bool ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorStateMachine_MinorState_ScrollHandlerState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorStateMachine_MinorState_ScrollHandlerState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::SCROLL_HANDLER_UNSPECIFIED;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::SCROLL_AFFECTS_SCROLL_HANDLER;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::ScrollHandlerState_MIN;
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::ScrollHandlerState_MAX;
constexpr int ChromeCompositorStateMachine_MinorState::ScrollHandlerState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool BeginFrameArgs_BeginFrameArgsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BeginFrameArgs_BeginFrameArgsType_strings[4] = {};

static const char BeginFrameArgs_BeginFrameArgsType_names[] =
  "BEGIN_FRAME_ARGS_TYPE_INVALID"
  "BEGIN_FRAME_ARGS_TYPE_MISSED"
  "BEGIN_FRAME_ARGS_TYPE_NORMAL"
  "BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BeginFrameArgs_BeginFrameArgsType_entries[] = {
  { {BeginFrameArgs_BeginFrameArgsType_names + 0, 29}, 1 },
  { {BeginFrameArgs_BeginFrameArgsType_names + 29, 28}, 3 },
  { {BeginFrameArgs_BeginFrameArgsType_names + 57, 28}, 2 },
  { {BeginFrameArgs_BeginFrameArgsType_names + 85, 33}, 0 },
};

static const int BeginFrameArgs_BeginFrameArgsType_entries_by_number[] = {
  3, // 0 -> BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED
  0, // 1 -> BEGIN_FRAME_ARGS_TYPE_INVALID
  2, // 2 -> BEGIN_FRAME_ARGS_TYPE_NORMAL
  1, // 3 -> BEGIN_FRAME_ARGS_TYPE_MISSED
};

const std::string& BeginFrameArgs_BeginFrameArgsType_Name(
    BeginFrameArgs_BeginFrameArgsType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BeginFrameArgs_BeginFrameArgsType_entries,
          BeginFrameArgs_BeginFrameArgsType_entries_by_number,
          4, BeginFrameArgs_BeginFrameArgsType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BeginFrameArgs_BeginFrameArgsType_entries,
      BeginFrameArgs_BeginFrameArgsType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BeginFrameArgs_BeginFrameArgsType_strings[idx].get();
}
bool BeginFrameArgs_BeginFrameArgsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeginFrameArgs_BeginFrameArgsType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BeginFrameArgs_BeginFrameArgsType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BeginFrameArgs_BeginFrameArgsType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_INVALID;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_NORMAL;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BEGIN_FRAME_ARGS_TYPE_MISSED;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BeginFrameArgsType_MIN;
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::BeginFrameArgsType_MAX;
constexpr int BeginFrameArgs::BeginFrameArgsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool BeginImplFrameArgs_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BeginImplFrameArgs_State_strings[2] = {};

static const char BeginImplFrameArgs_State_names[] =
  "BEGIN_FRAME_FINISHED"
  "BEGIN_FRAME_USING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BeginImplFrameArgs_State_entries[] = {
  { {BeginImplFrameArgs_State_names + 0, 20}, 0 },
  { {BeginImplFrameArgs_State_names + 20, 17}, 1 },
};

static const int BeginImplFrameArgs_State_entries_by_number[] = {
  0, // 0 -> BEGIN_FRAME_FINISHED
  1, // 1 -> BEGIN_FRAME_USING
};

const std::string& BeginImplFrameArgs_State_Name(
    BeginImplFrameArgs_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BeginImplFrameArgs_State_entries,
          BeginImplFrameArgs_State_entries_by_number,
          2, BeginImplFrameArgs_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BeginImplFrameArgs_State_entries,
      BeginImplFrameArgs_State_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BeginImplFrameArgs_State_strings[idx].get();
}
bool BeginImplFrameArgs_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BeginImplFrameArgs_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BeginImplFrameArgs_State_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<BeginImplFrameArgs_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::BEGIN_FRAME_FINISHED;
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::BEGIN_FRAME_USING;
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::State_MIN;
constexpr BeginImplFrameArgs_State BeginImplFrameArgs::State_MAX;
constexpr int BeginImplFrameArgs::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeCompositorSchedulerAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeCompositorSchedulerAction_strings[14] = {};

static const char ChromeCompositorSchedulerAction_names[] =
  "CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE"
  "CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION"
  "CC_SCHEDULER_ACTION_COMMIT"
  "CC_SCHEDULER_ACTION_DRAW_ABORT"
  "CC_SCHEDULER_ACTION_DRAW_FORCED"
  "CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE"
  "CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK"
  "CC_SCHEDULER_ACTION_NONE"
  "CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON"
  "CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL"
  "CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION"
  "CC_SCHEDULER_ACTION_PREPARE_TILES"
  "CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME"
  "CC_SCHEDULER_ACTION_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeCompositorSchedulerAction_entries[] = {
  { {ChromeCompositorSchedulerAction_names + 0, 38}, 4 },
  { {ChromeCompositorSchedulerAction_names + 38, 56}, 8 },
  { {ChromeCompositorSchedulerAction_names + 94, 26}, 3 },
  { {ChromeCompositorSchedulerAction_names + 120, 30}, 7 },
  { {ChromeCompositorSchedulerAction_names + 150, 31}, 6 },
  { {ChromeCompositorSchedulerAction_names + 181, 36}, 5 },
  { {ChromeCompositorSchedulerAction_names + 217, 52}, 10 },
  { {ChromeCompositorSchedulerAction_names + 269, 24}, 1 },
  { {ChromeCompositorSchedulerAction_names + 293, 61}, 13 },
  { {ChromeCompositorSchedulerAction_names + 354, 62}, 12 },
  { {ChromeCompositorSchedulerAction_names + 416, 50}, 11 },
  { {ChromeCompositorSchedulerAction_names + 466, 33}, 9 },
  { {ChromeCompositorSchedulerAction_names + 499, 41}, 2 },
  { {ChromeCompositorSchedulerAction_names + 540, 31}, 0 },
};

static const int ChromeCompositorSchedulerAction_entries_by_number[] = {
  13, // 0 -> CC_SCHEDULER_ACTION_UNSPECIFIED
  7, // 1 -> CC_SCHEDULER_ACTION_NONE
  12, // 2 -> CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME
  2, // 3 -> CC_SCHEDULER_ACTION_COMMIT
  0, // 4 -> CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE
  5, // 5 -> CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE
  4, // 6 -> CC_SCHEDULER_ACTION_DRAW_FORCED
  3, // 7 -> CC_SCHEDULER_ACTION_DRAW_ABORT
  1, // 8 -> CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION
  11, // 9 -> CC_SCHEDULER_ACTION_PREPARE_TILES
  6, // 10 -> CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK
  10, // 11 -> CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION
  9, // 12 -> CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL
  8, // 13 -> CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON
};

const std::string& ChromeCompositorSchedulerAction_Name(
    ChromeCompositorSchedulerAction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeCompositorSchedulerAction_entries,
          ChromeCompositorSchedulerAction_entries_by_number,
          14, ChromeCompositorSchedulerAction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeCompositorSchedulerAction_entries,
      ChromeCompositorSchedulerAction_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeCompositorSchedulerAction_strings[idx].get();
}
bool ChromeCompositorSchedulerAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeCompositorSchedulerAction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeCompositorSchedulerAction_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<ChromeCompositorSchedulerAction>(int_value);
  }
  return success;
}

// ===================================================================

class ChromeCompositorSchedulerState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorSchedulerState>()._impl_._has_bits_);
  static const ::perfetto::protos::ChromeCompositorStateMachine& state_machine(const ChromeCompositorSchedulerState* msg);
  static void set_has_state_machine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_observing_begin_frame_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_begin_impl_frame_deadline_task(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pending_begin_frame_task(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_skipped_last_frame_missed_exceeded_deadline(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_inside_action(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_deadline_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_deadline_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_deadline_scheduled_at_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_now_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_now_to_deadline_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_now_to_deadline_scheduled_at_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::perfetto::protos::BeginImplFrameArgs& begin_impl_frame_args(const ChromeCompositorSchedulerState* msg);
  static void set_has_begin_impl_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::BeginFrameObserverState& begin_frame_observer_state(const ChromeCompositorSchedulerState* msg);
  static void set_has_begin_frame_observer_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::BeginFrameSourceState& begin_frame_source_state(const ChromeCompositorSchedulerState* msg);
  static void set_has_begin_frame_source_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::CompositorTimingHistory& compositor_timing_history(const ChromeCompositorSchedulerState* msg);
  static void set_has_compositor_timing_history(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::perfetto::protos::ChromeCompositorStateMachine&
ChromeCompositorSchedulerState::_Internal::state_machine(const ChromeCompositorSchedulerState* msg) {
  return *msg->_impl_.state_machine_;
}
const ::perfetto::protos::BeginImplFrameArgs&
ChromeCompositorSchedulerState::_Internal::begin_impl_frame_args(const ChromeCompositorSchedulerState* msg) {
  return *msg->_impl_.begin_impl_frame_args_;
}
const ::perfetto::protos::BeginFrameObserverState&
ChromeCompositorSchedulerState::_Internal::begin_frame_observer_state(const ChromeCompositorSchedulerState* msg) {
  return *msg->_impl_.begin_frame_observer_state_;
}
const ::perfetto::protos::BeginFrameSourceState&
ChromeCompositorSchedulerState::_Internal::begin_frame_source_state(const ChromeCompositorSchedulerState* msg) {
  return *msg->_impl_.begin_frame_source_state_;
}
const ::perfetto::protos::CompositorTimingHistory&
ChromeCompositorSchedulerState::_Internal::compositor_timing_history(const ChromeCompositorSchedulerState* msg) {
  return *msg->_impl_.compositor_timing_history_;
}
ChromeCompositorSchedulerState::ChromeCompositorSchedulerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeCompositorSchedulerState)
}
ChromeCompositorSchedulerState::ChromeCompositorSchedulerState(const ChromeCompositorSchedulerState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeCompositorSchedulerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_machine_){nullptr}
    , decltype(_impl_.begin_impl_frame_args_){nullptr}
    , decltype(_impl_.begin_frame_observer_state_){nullptr}
    , decltype(_impl_.begin_frame_source_state_){nullptr}
    , decltype(_impl_.compositor_timing_history_){nullptr}
    , decltype(_impl_.observing_begin_frame_source_){}
    , decltype(_impl_.begin_impl_frame_deadline_task_){}
    , decltype(_impl_.pending_begin_frame_task_){}
    , decltype(_impl_.skipped_last_frame_missed_exceeded_deadline_){}
    , decltype(_impl_.inside_action_){}
    , decltype(_impl_.deadline_us_){}
    , decltype(_impl_.deadline_scheduled_at_us_){}
    , decltype(_impl_.now_us_){}
    , decltype(_impl_.now_to_deadline_delta_us_){}
    , decltype(_impl_.now_to_deadline_scheduled_at_delta_us_){}
    , decltype(_impl_.deadline_mode_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_state_machine()) {
    _this->_impl_.state_machine_ = new ::perfetto::protos::ChromeCompositorStateMachine(*from._impl_.state_machine_);
  }
  if (from._internal_has_begin_impl_frame_args()) {
    _this->_impl_.begin_impl_frame_args_ = new ::perfetto::protos::BeginImplFrameArgs(*from._impl_.begin_impl_frame_args_);
  }
  if (from._internal_has_begin_frame_observer_state()) {
    _this->_impl_.begin_frame_observer_state_ = new ::perfetto::protos::BeginFrameObserverState(*from._impl_.begin_frame_observer_state_);
  }
  if (from._internal_has_begin_frame_source_state()) {
    _this->_impl_.begin_frame_source_state_ = new ::perfetto::protos::BeginFrameSourceState(*from._impl_.begin_frame_source_state_);
  }
  if (from._internal_has_compositor_timing_history()) {
    _this->_impl_.compositor_timing_history_ = new ::perfetto::protos::CompositorTimingHistory(*from._impl_.compositor_timing_history_);
  }
  ::memcpy(&_impl_.observing_begin_frame_source_, &from._impl_.observing_begin_frame_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deadline_mode_) -
    reinterpret_cast<char*>(&_impl_.observing_begin_frame_source_)) + sizeof(_impl_.deadline_mode_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorSchedulerState)
}

inline void ChromeCompositorSchedulerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_machine_){nullptr}
    , decltype(_impl_.begin_impl_frame_args_){nullptr}
    , decltype(_impl_.begin_frame_observer_state_){nullptr}
    , decltype(_impl_.begin_frame_source_state_){nullptr}
    , decltype(_impl_.compositor_timing_history_){nullptr}
    , decltype(_impl_.observing_begin_frame_source_){false}
    , decltype(_impl_.begin_impl_frame_deadline_task_){false}
    , decltype(_impl_.pending_begin_frame_task_){false}
    , decltype(_impl_.skipped_last_frame_missed_exceeded_deadline_){false}
    , decltype(_impl_.inside_action_){0}
    , decltype(_impl_.deadline_us_){int64_t{0}}
    , decltype(_impl_.deadline_scheduled_at_us_){int64_t{0}}
    , decltype(_impl_.now_us_){int64_t{0}}
    , decltype(_impl_.now_to_deadline_delta_us_){int64_t{0}}
    , decltype(_impl_.now_to_deadline_scheduled_at_delta_us_){int64_t{0}}
    , decltype(_impl_.deadline_mode_){0}
  };
}

ChromeCompositorSchedulerState::~ChromeCompositorSchedulerState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorSchedulerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeCompositorSchedulerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.state_machine_;
  if (this != internal_default_instance()) delete _impl_.begin_impl_frame_args_;
  if (this != internal_default_instance()) delete _impl_.begin_frame_observer_state_;
  if (this != internal_default_instance()) delete _impl_.begin_frame_source_state_;
  if (this != internal_default_instance()) delete _impl_.compositor_timing_history_;
}

void ChromeCompositorSchedulerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeCompositorSchedulerState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorSchedulerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.state_machine_ != nullptr);
      _impl_.state_machine_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.begin_impl_frame_args_ != nullptr);
      _impl_.begin_impl_frame_args_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.begin_frame_observer_state_ != nullptr);
      _impl_.begin_frame_observer_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.begin_frame_source_state_ != nullptr);
      _impl_.begin_frame_source_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.compositor_timing_history_ != nullptr);
      _impl_.compositor_timing_history_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.observing_begin_frame_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pending_begin_frame_task_) -
        reinterpret_cast<char*>(&_impl_.observing_begin_frame_source_)) + sizeof(_impl_.pending_begin_frame_task_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.skipped_last_frame_missed_exceeded_deadline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deadline_mode_) -
        reinterpret_cast<char*>(&_impl_.skipped_last_frame_missed_exceeded_deadline_)) + sizeof(_impl_.deadline_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeCompositorSchedulerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool observing_begin_frame_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_observing_begin_frame_source(&has_bits);
          _impl_.observing_begin_frame_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool begin_impl_frame_deadline_task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_begin_impl_frame_deadline_task(&has_bits);
          _impl_.begin_impl_frame_deadline_task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pending_begin_frame_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pending_begin_frame_task(&has_bits);
          _impl_.pending_begin_frame_task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_skipped_last_frame_missed_exceeded_deadline(&has_bits);
          _impl_.skipped_last_frame_missed_exceeded_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(val))) {
            _internal_set_inside_action(static_cast<::perfetto::protos::ChromeCompositorSchedulerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(val))) {
            _internal_set_deadline_mode(static_cast<::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 deadline_us = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_deadline_us(&has_bits);
          _impl_.deadline_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 deadline_scheduled_at_us = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_deadline_scheduled_at_us(&has_bits);
          _impl_.deadline_scheduled_at_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 now_us = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_now_us(&has_bits);
          _impl_.now_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 now_to_deadline_delta_us = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_now_to_deadline_delta_us(&has_bits);
          _impl_.now_to_deadline_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_now_to_deadline_scheduled_at_delta_us(&has_bits);
          _impl_.now_to_deadline_scheduled_at_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_impl_frame_args(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_frame_observer_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_frame_source_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_compositor_timing_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeCompositorSchedulerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeCompositorSchedulerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state_machine(this),
        _Internal::state_machine(this).GetCachedSize(), target, stream);
  }

  // optional bool observing_begin_frame_source = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_observing_begin_frame_source(), target);
  }

  // optional bool begin_impl_frame_deadline_task = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_begin_impl_frame_deadline_task(), target);
  }

  // optional bool pending_begin_frame_task = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_pending_begin_frame_task(), target);
  }

  // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_skipped_last_frame_missed_exceeded_deadline(), target);
  }

  // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_inside_action(), target);
  }

  // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_deadline_mode(), target);
  }

  // optional int64 deadline_us = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_deadline_us(), target);
  }

  // optional int64 deadline_scheduled_at_us = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_deadline_scheduled_at_us(), target);
  }

  // optional int64 now_us = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_now_us(), target);
  }

  // optional int64 now_to_deadline_delta_us = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_now_to_deadline_delta_us(), target);
  }

  // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_now_to_deadline_scheduled_at_delta_us(), target);
  }

  // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::begin_impl_frame_args(this),
        _Internal::begin_impl_frame_args(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::begin_frame_observer_state(this),
        _Internal::begin_frame_observer_state(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::begin_frame_source_state(this),
        _Internal::begin_frame_source_state(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::compositor_timing_history(this),
        _Internal::compositor_timing_history(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeCompositorSchedulerState)
  return target;
}

size_t ChromeCompositorSchedulerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorSchedulerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.state_machine_);
    }

    // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.begin_impl_frame_args_);
    }

    // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.begin_frame_observer_state_);
    }

    // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.begin_frame_source_state_);
    }

    // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.compositor_timing_history_);
    }

    // optional bool observing_begin_frame_source = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool begin_impl_frame_deadline_task = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool pending_begin_frame_task = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_inside_action());
    }

    // optional int64 deadline_us = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deadline_us());
    }

    // optional int64 deadline_scheduled_at_us = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deadline_scheduled_at_us());
    }

    // optional int64 now_us = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_now_us());
    }

    // optional int64 now_to_deadline_delta_us = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_now_to_deadline_delta_us());
    }

    // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_now_to_deadline_scheduled_at_delta_us());
    }

    // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_deadline_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorSchedulerState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeCompositorSchedulerState*>(
      &from));
}

void ChromeCompositorSchedulerState::MergeFrom(const ChromeCompositorSchedulerState& from) {
  ChromeCompositorSchedulerState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorSchedulerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_state_machine()->::perfetto::protos::ChromeCompositorStateMachine::MergeFrom(
          from._internal_state_machine());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_begin_impl_frame_args()->::perfetto::protos::BeginImplFrameArgs::MergeFrom(
          from._internal_begin_impl_frame_args());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_begin_frame_observer_state()->::perfetto::protos::BeginFrameObserverState::MergeFrom(
          from._internal_begin_frame_observer_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_begin_frame_source_state()->::perfetto::protos::BeginFrameSourceState::MergeFrom(
          from._internal_begin_frame_source_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_compositor_timing_history()->::perfetto::protos::CompositorTimingHistory::MergeFrom(
          from._internal_compositor_timing_history());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.observing_begin_frame_source_ = from._impl_.observing_begin_frame_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.begin_impl_frame_deadline_task_ = from._impl_.begin_impl_frame_deadline_task_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.pending_begin_frame_task_ = from._impl_.pending_begin_frame_task_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.skipped_last_frame_missed_exceeded_deadline_ = from._impl_.skipped_last_frame_missed_exceeded_deadline_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.inside_action_ = from._impl_.inside_action_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.deadline_us_ = from._impl_.deadline_us_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.deadline_scheduled_at_us_ = from._impl_.deadline_scheduled_at_us_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.now_us_ = from._impl_.now_us_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.now_to_deadline_delta_us_ = from._impl_.now_to_deadline_delta_us_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.now_to_deadline_scheduled_at_delta_us_ = from._impl_.now_to_deadline_scheduled_at_delta_us_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.deadline_mode_ = from._impl_.deadline_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeCompositorSchedulerState::CopyFrom(const ChromeCompositorSchedulerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorSchedulerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorSchedulerState::IsInitialized() const {
  return true;
}

void ChromeCompositorSchedulerState::InternalSwap(ChromeCompositorSchedulerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeCompositorSchedulerState, _impl_.deadline_mode_)
      + sizeof(ChromeCompositorSchedulerState::_impl_.deadline_mode_)
      - PROTOBUF_FIELD_OFFSET(ChromeCompositorSchedulerState, _impl_.state_machine_)>(
          reinterpret_cast<char*>(&_impl_.state_machine_),
          reinterpret_cast<char*>(&other->_impl_.state_machine_));
}

std::string ChromeCompositorSchedulerState::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorSchedulerState";
}


// ===================================================================

class ChromeCompositorStateMachine_MajorState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorStateMachine_MajorState>()._impl_._has_bits_);
  static void set_has_next_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_impl_frame_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_begin_main_frame_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_layer_tree_frame_sink_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_forced_redraw_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ChromeCompositorStateMachine_MajorState::ChromeCompositorStateMachine_MajorState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeCompositorStateMachine.MajorState)
}
ChromeCompositorStateMachine_MajorState::ChromeCompositorStateMachine_MajorState(const ChromeCompositorStateMachine_MajorState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeCompositorStateMachine_MajorState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_action_){}
    , decltype(_impl_.begin_impl_frame_state_){}
    , decltype(_impl_.begin_main_frame_state_){}
    , decltype(_impl_.layer_tree_frame_sink_state_){}
    , decltype(_impl_.forced_redraw_state_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.next_action_, &from._impl_.next_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.forced_redraw_state_) -
    reinterpret_cast<char*>(&_impl_.next_action_)) + sizeof(_impl_.forced_redraw_state_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorStateMachine.MajorState)
}

inline void ChromeCompositorStateMachine_MajorState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_action_){0}
    , decltype(_impl_.begin_impl_frame_state_){0}
    , decltype(_impl_.begin_main_frame_state_){0}
    , decltype(_impl_.layer_tree_frame_sink_state_){0}
    , decltype(_impl_.forced_redraw_state_){0}
  };
}

ChromeCompositorStateMachine_MajorState::~ChromeCompositorStateMachine_MajorState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeCompositorStateMachine_MajorState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeCompositorStateMachine_MajorState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeCompositorStateMachine_MajorState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.next_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.forced_redraw_state_) -
        reinterpret_cast<char*>(&_impl_.next_action_)) + sizeof(_impl_.forced_redraw_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeCompositorStateMachine_MajorState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(val))) {
            _internal_set_next_action(static_cast<::perfetto::protos::ChromeCompositorSchedulerAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(val))) {
            _internal_set_begin_impl_frame_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(val))) {
            _internal_set_begin_main_frame_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(val))) {
            _internal_set_layer_tree_frame_sink_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(val))) {
            _internal_set_forced_redraw_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeCompositorStateMachine_MajorState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_next_action(), target);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_begin_impl_frame_state(), target);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_begin_main_frame_state(), target);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_layer_tree_frame_sink_state(), target);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_forced_redraw_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  return target;
}

size_t ChromeCompositorStateMachine_MajorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_next_action());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_begin_impl_frame_state());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_begin_main_frame_state());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_layer_tree_frame_sink_state());
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_forced_redraw_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorStateMachine_MajorState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeCompositorStateMachine_MajorState*>(
      &from));
}

void ChromeCompositorStateMachine_MajorState::MergeFrom(const ChromeCompositorStateMachine_MajorState& from) {
  ChromeCompositorStateMachine_MajorState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.next_action_ = from._impl_.next_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.begin_impl_frame_state_ = from._impl_.begin_impl_frame_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.begin_main_frame_state_ = from._impl_.begin_main_frame_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.layer_tree_frame_sink_state_ = from._impl_.layer_tree_frame_sink_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.forced_redraw_state_ = from._impl_.forced_redraw_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeCompositorStateMachine_MajorState::CopyFrom(const ChromeCompositorStateMachine_MajorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorStateMachine.MajorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorStateMachine_MajorState::IsInitialized() const {
  return true;
}

void ChromeCompositorStateMachine_MajorState::InternalSwap(ChromeCompositorStateMachine_MajorState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeCompositorStateMachine_MajorState, _impl_.forced_redraw_state_)
      + sizeof(ChromeCompositorStateMachine_MajorState::_impl_.forced_redraw_state_)
      - PROTOBUF_FIELD_OFFSET(ChromeCompositorStateMachine_MajorState, _impl_.next_action_)>(
          reinterpret_cast<char*>(&_impl_.next_action_),
          reinterpret_cast<char*>(&other->_impl_.next_action_));
}

std::string ChromeCompositorStateMachine_MajorState::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorStateMachine.MajorState";
}


// ===================================================================

class ChromeCompositorStateMachine_MinorState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorStateMachine_MinorState>()._impl_._has_bits_);
  static void set_has_commit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_frame_number_submit_performed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_frame_number_draw_performed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_frame_number_begin_main_frame_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_did_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_did_send_begin_main_frame_for_current_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_did_notify_begin_main_frame_not_expected_until(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_did_notify_begin_main_frame_not_expected_soon(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wants_begin_main_frame_not_expected(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_did_commit_during_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_did_invalidate_layer_tree_frame_sink(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_did_perform_impl_side_invalidaion(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_did_prepare_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_consecutive_checkerboard_animations(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pending_submit_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_submit_frames_with_current_layer_tree_frame_sink(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_needs_redraw(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_needs_prepare_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_needs_begin_main_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_needs_one_begin_impl_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_begin_frame_source_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_can_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_resourceless_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_has_pending_tree(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pending_tree_is_ready_for_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_active_tree_needs_first_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_active_tree_is_ready_to_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_did_create_and_initialize_first_layer_tree_frame_sink(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tree_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_scroll_handler_state(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_critical_begin_main_frame_to_activate_is_fast(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_main_thread_missed_last_deadline(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_video_needs_begin_frames(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_defer_begin_main_frame(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_last_commit_had_no_updates(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_did_draw_in_last_frame(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_did_submit_in_last_frame(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_needs_impl_side_invalidation(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_current_pending_tree_is_impl_side(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_previous_pending_tree_was_impl_side(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_processing_animation_worklets_for_active_tree(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_processing_animation_worklets_for_pending_tree(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_processing_paint_worklets_for_pending_tree(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
};

ChromeCompositorStateMachine_MinorState::ChromeCompositorStateMachine_MinorState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeCompositorStateMachine.MinorState)
}
ChromeCompositorStateMachine_MinorState::ChromeCompositorStateMachine_MinorState(const ChromeCompositorStateMachine_MinorState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeCompositorStateMachine_MinorState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commit_count_){}
    , decltype(_impl_.current_frame_number_){}
    , decltype(_impl_.last_frame_number_submit_performed_){}
    , decltype(_impl_.last_frame_number_draw_performed_){}
    , decltype(_impl_.last_frame_number_begin_main_frame_sent_){}
    , decltype(_impl_.did_draw_){}
    , decltype(_impl_.did_send_begin_main_frame_for_current_frame_){}
    , decltype(_impl_.did_notify_begin_main_frame_not_expected_until_){}
    , decltype(_impl_.did_notify_begin_main_frame_not_expected_soon_){}
    , decltype(_impl_.wants_begin_main_frame_not_expected_){}
    , decltype(_impl_.did_commit_during_frame_){}
    , decltype(_impl_.did_invalidate_layer_tree_frame_sink_){}
    , decltype(_impl_.did_perform_impl_side_invalidaion_){}
    , decltype(_impl_.consecutive_checkerboard_animations_){}
    , decltype(_impl_.pending_submit_frames_){}
    , decltype(_impl_.submit_frames_with_current_layer_tree_frame_sink_){}
    , decltype(_impl_.did_prepare_tiles_){}
    , decltype(_impl_.needs_redraw_){}
    , decltype(_impl_.needs_prepare_tiles_){}
    , decltype(_impl_.needs_begin_main_frame_){}
    , decltype(_impl_.needs_one_begin_impl_frame_){}
    , decltype(_impl_.visible_){}
    , decltype(_impl_.begin_frame_source_paused_){}
    , decltype(_impl_.can_draw_){}
    , decltype(_impl_.resourceless_draw_){}
    , decltype(_impl_.has_pending_tree_){}
    , decltype(_impl_.pending_tree_is_ready_for_activation_){}
    , decltype(_impl_.active_tree_needs_first_draw_){}
    , decltype(_impl_.tree_priority_){}
    , decltype(_impl_.active_tree_is_ready_to_draw_){}
    , decltype(_impl_.did_create_and_initialize_first_layer_tree_frame_sink_){}
    , decltype(_impl_.critical_begin_main_frame_to_activate_is_fast_){}
    , decltype(_impl_.main_thread_missed_last_deadline_){}
    , decltype(_impl_.scroll_handler_state_){}
    , decltype(_impl_.video_needs_begin_frames_){}
    , decltype(_impl_.defer_begin_main_frame_){}
    , decltype(_impl_.last_commit_had_no_updates_){}
    , decltype(_impl_.did_draw_in_last_frame_){}
    , decltype(_impl_.did_submit_in_last_frame_){}
    , decltype(_impl_.needs_impl_side_invalidation_){}
    , decltype(_impl_.current_pending_tree_is_impl_side_){}
    , decltype(_impl_.previous_pending_tree_was_impl_side_){}
    , decltype(_impl_.processing_animation_worklets_for_active_tree_){}
    , decltype(_impl_.processing_animation_worklets_for_pending_tree_){}
    , decltype(_impl_.processing_paint_worklets_for_pending_tree_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.commit_count_, &from._impl_.commit_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processing_paint_worklets_for_pending_tree_) -
    reinterpret_cast<char*>(&_impl_.commit_count_)) + sizeof(_impl_.processing_paint_worklets_for_pending_tree_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorStateMachine.MinorState)
}

inline void ChromeCompositorStateMachine_MinorState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commit_count_){0}
    , decltype(_impl_.current_frame_number_){0}
    , decltype(_impl_.last_frame_number_submit_performed_){0}
    , decltype(_impl_.last_frame_number_draw_performed_){0}
    , decltype(_impl_.last_frame_number_begin_main_frame_sent_){0}
    , decltype(_impl_.did_draw_){false}
    , decltype(_impl_.did_send_begin_main_frame_for_current_frame_){false}
    , decltype(_impl_.did_notify_begin_main_frame_not_expected_until_){false}
    , decltype(_impl_.did_notify_begin_main_frame_not_expected_soon_){false}
    , decltype(_impl_.wants_begin_main_frame_not_expected_){false}
    , decltype(_impl_.did_commit_during_frame_){false}
    , decltype(_impl_.did_invalidate_layer_tree_frame_sink_){false}
    , decltype(_impl_.did_perform_impl_side_invalidaion_){false}
    , decltype(_impl_.consecutive_checkerboard_animations_){0}
    , decltype(_impl_.pending_submit_frames_){0}
    , decltype(_impl_.submit_frames_with_current_layer_tree_frame_sink_){0}
    , decltype(_impl_.did_prepare_tiles_){false}
    , decltype(_impl_.needs_redraw_){false}
    , decltype(_impl_.needs_prepare_tiles_){false}
    , decltype(_impl_.needs_begin_main_frame_){false}
    , decltype(_impl_.needs_one_begin_impl_frame_){false}
    , decltype(_impl_.visible_){false}
    , decltype(_impl_.begin_frame_source_paused_){false}
    , decltype(_impl_.can_draw_){false}
    , decltype(_impl_.resourceless_draw_){false}
    , decltype(_impl_.has_pending_tree_){false}
    , decltype(_impl_.pending_tree_is_ready_for_activation_){false}
    , decltype(_impl_.active_tree_needs_first_draw_){false}
    , decltype(_impl_.tree_priority_){0}
    , decltype(_impl_.active_tree_is_ready_to_draw_){false}
    , decltype(_impl_.did_create_and_initialize_first_layer_tree_frame_sink_){false}
    , decltype(_impl_.critical_begin_main_frame_to_activate_is_fast_){false}
    , decltype(_impl_.main_thread_missed_last_deadline_){false}
    , decltype(_impl_.scroll_handler_state_){0}
    , decltype(_impl_.video_needs_begin_frames_){false}
    , decltype(_impl_.defer_begin_main_frame_){false}
    , decltype(_impl_.last_commit_had_no_updates_){false}
    , decltype(_impl_.did_draw_in_last_frame_){false}
    , decltype(_impl_.did_submit_in_last_frame_){false}
    , decltype(_impl_.needs_impl_side_invalidation_){false}
    , decltype(_impl_.current_pending_tree_is_impl_side_){false}
    , decltype(_impl_.previous_pending_tree_was_impl_side_){false}
    , decltype(_impl_.processing_animation_worklets_for_active_tree_){false}
    , decltype(_impl_.processing_animation_worklets_for_pending_tree_){false}
    , decltype(_impl_.processing_paint_worklets_for_pending_tree_){false}
  };
}

ChromeCompositorStateMachine_MinorState::~ChromeCompositorStateMachine_MinorState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeCompositorStateMachine_MinorState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeCompositorStateMachine_MinorState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeCompositorStateMachine_MinorState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.commit_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.did_notify_begin_main_frame_not_expected_until_) -
        reinterpret_cast<char*>(&_impl_.commit_count_)) + sizeof(_impl_.did_notify_begin_main_frame_not_expected_until_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.did_notify_begin_main_frame_not_expected_soon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.submit_frames_with_current_layer_tree_frame_sink_) -
        reinterpret_cast<char*>(&_impl_.did_notify_begin_main_frame_not_expected_soon_)) + sizeof(_impl_.submit_frames_with_current_layer_tree_frame_sink_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.did_prepare_tiles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.can_draw_) -
        reinterpret_cast<char*>(&_impl_.did_prepare_tiles_)) + sizeof(_impl_.can_draw_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.resourceless_draw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.critical_begin_main_frame_to_activate_is_fast_) -
        reinterpret_cast<char*>(&_impl_.resourceless_draw_)) + sizeof(_impl_.critical_begin_main_frame_to_activate_is_fast_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.main_thread_missed_last_deadline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.needs_impl_side_invalidation_) -
        reinterpret_cast<char*>(&_impl_.main_thread_missed_last_deadline_)) + sizeof(_impl_.needs_impl_side_invalidation_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.current_pending_tree_is_impl_side_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.processing_paint_worklets_for_pending_tree_) -
        reinterpret_cast<char*>(&_impl_.current_pending_tree_is_impl_side_)) + sizeof(_impl_.processing_paint_worklets_for_pending_tree_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeCompositorStateMachine_MinorState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 commit_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_commit_count(&_impl_._has_bits_);
          _impl_.commit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 current_frame_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_current_frame_number(&_impl_._has_bits_);
          _impl_.current_frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_frame_number_submit_performed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_frame_number_submit_performed(&_impl_._has_bits_);
          _impl_.last_frame_number_submit_performed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_frame_number_draw_performed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_frame_number_draw_performed(&_impl_._has_bits_);
          _impl_.last_frame_number_draw_performed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_frame_number_begin_main_frame_sent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_last_frame_number_begin_main_frame_sent(&_impl_._has_bits_);
          _impl_.last_frame_number_begin_main_frame_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_draw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_did_draw(&_impl_._has_bits_);
          _impl_.did_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_send_begin_main_frame_for_current_frame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_did_send_begin_main_frame_for_current_frame(&_impl_._has_bits_);
          _impl_.did_send_begin_main_frame_for_current_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_notify_begin_main_frame_not_expected_until = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_did_notify_begin_main_frame_not_expected_until(&_impl_._has_bits_);
          _impl_.did_notify_begin_main_frame_not_expected_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_did_notify_begin_main_frame_not_expected_soon(&_impl_._has_bits_);
          _impl_.did_notify_begin_main_frame_not_expected_soon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool wants_begin_main_frame_not_expected = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_wants_begin_main_frame_not_expected(&_impl_._has_bits_);
          _impl_.wants_begin_main_frame_not_expected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_commit_during_frame = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_did_commit_during_frame(&_impl_._has_bits_);
          _impl_.did_commit_during_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_invalidate_layer_tree_frame_sink = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_did_invalidate_layer_tree_frame_sink(&_impl_._has_bits_);
          _impl_.did_invalidate_layer_tree_frame_sink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_perform_impl_side_invalidaion = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_did_perform_impl_side_invalidaion(&_impl_._has_bits_);
          _impl_.did_perform_impl_side_invalidaion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_prepare_tiles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_did_prepare_tiles(&_impl_._has_bits_);
          _impl_.did_prepare_tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 consecutive_checkerboard_animations = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_consecutive_checkerboard_animations(&_impl_._has_bits_);
          _impl_.consecutive_checkerboard_animations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pending_submit_frames = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_pending_submit_frames(&_impl_._has_bits_);
          _impl_.pending_submit_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_submit_frames_with_current_layer_tree_frame_sink(&_impl_._has_bits_);
          _impl_.submit_frames_with_current_layer_tree_frame_sink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_redraw = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_needs_redraw(&_impl_._has_bits_);
          _impl_.needs_redraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_prepare_tiles = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_needs_prepare_tiles(&_impl_._has_bits_);
          _impl_.needs_prepare_tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_begin_main_frame = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_needs_begin_main_frame(&_impl_._has_bits_);
          _impl_.needs_begin_main_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_one_begin_impl_frame = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_needs_one_begin_impl_frame(&_impl_._has_bits_);
          _impl_.needs_one_begin_impl_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool visible = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_visible(&_impl_._has_bits_);
          _impl_.visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool begin_frame_source_paused = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_begin_frame_source_paused(&_impl_._has_bits_);
          _impl_.begin_frame_source_paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_draw = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_can_draw(&_impl_._has_bits_);
          _impl_.can_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool resourceless_draw = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_resourceless_draw(&_impl_._has_bits_);
          _impl_.resourceless_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_pending_tree = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_has_pending_tree(&_impl_._has_bits_);
          _impl_.has_pending_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pending_tree_is_ready_for_activation = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_pending_tree_is_ready_for_activation(&_impl_._has_bits_);
          _impl_.pending_tree_is_ready_for_activation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool active_tree_needs_first_draw = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_active_tree_needs_first_draw(&_impl_._has_bits_);
          _impl_.active_tree_needs_first_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool active_tree_is_ready_to_draw = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_active_tree_is_ready_to_draw(&_impl_._has_bits_);
          _impl_.active_tree_is_ready_to_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_did_create_and_initialize_first_layer_tree_frame_sink(&_impl_._has_bits_);
          _impl_.did_create_and_initialize_first_layer_tree_frame_sink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(val))) {
            _internal_set_tree_priority(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(val))) {
            _internal_set_scroll_handler_state(static_cast<::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_critical_begin_main_frame_to_activate_is_fast(&_impl_._has_bits_);
          _impl_.critical_begin_main_frame_to_activate_is_fast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool main_thread_missed_last_deadline = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_main_thread_missed_last_deadline(&_impl_._has_bits_);
          _impl_.main_thread_missed_last_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool video_needs_begin_frames = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_video_needs_begin_frames(&_impl_._has_bits_);
          _impl_.video_needs_begin_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool defer_begin_main_frame = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_defer_begin_main_frame(&_impl_._has_bits_);
          _impl_.defer_begin_main_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool last_commit_had_no_updates = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_last_commit_had_no_updates(&_impl_._has_bits_);
          _impl_.last_commit_had_no_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_draw_in_last_frame = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_did_draw_in_last_frame(&_impl_._has_bits_);
          _impl_.did_draw_in_last_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool did_submit_in_last_frame = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_did_submit_in_last_frame(&_impl_._has_bits_);
          _impl_.did_submit_in_last_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_impl_side_invalidation = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_needs_impl_side_invalidation(&_impl_._has_bits_);
          _impl_.needs_impl_side_invalidation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool current_pending_tree_is_impl_side = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_current_pending_tree_is_impl_side(&_impl_._has_bits_);
          _impl_.current_pending_tree_is_impl_side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool previous_pending_tree_was_impl_side = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_previous_pending_tree_was_impl_side(&_impl_._has_bits_);
          _impl_.previous_pending_tree_was_impl_side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool processing_animation_worklets_for_active_tree = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_processing_animation_worklets_for_active_tree(&_impl_._has_bits_);
          _impl_.processing_animation_worklets_for_active_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool processing_animation_worklets_for_pending_tree = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_processing_animation_worklets_for_pending_tree(&_impl_._has_bits_);
          _impl_.processing_animation_worklets_for_pending_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool processing_paint_worklets_for_pending_tree = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_processing_paint_worklets_for_pending_tree(&_impl_._has_bits_);
          _impl_.processing_paint_worklets_for_pending_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeCompositorStateMachine_MinorState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 commit_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_commit_count(), target);
  }

  // optional int32 current_frame_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_frame_number(), target);
  }

  // optional int32 last_frame_number_submit_performed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_frame_number_submit_performed(), target);
  }

  // optional int32 last_frame_number_draw_performed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_last_frame_number_draw_performed(), target);
  }

  // optional int32 last_frame_number_begin_main_frame_sent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_last_frame_number_begin_main_frame_sent(), target);
  }

  // optional bool did_draw = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_did_draw(), target);
  }

  // optional bool did_send_begin_main_frame_for_current_frame = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_did_send_begin_main_frame_for_current_frame(), target);
  }

  // optional bool did_notify_begin_main_frame_not_expected_until = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_did_notify_begin_main_frame_not_expected_until(), target);
  }

  // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_did_notify_begin_main_frame_not_expected_soon(), target);
  }

  // optional bool wants_begin_main_frame_not_expected = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_wants_begin_main_frame_not_expected(), target);
  }

  // optional bool did_commit_during_frame = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_did_commit_during_frame(), target);
  }

  // optional bool did_invalidate_layer_tree_frame_sink = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_did_invalidate_layer_tree_frame_sink(), target);
  }

  // optional bool did_perform_impl_side_invalidaion = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_did_perform_impl_side_invalidaion(), target);
  }

  // optional bool did_prepare_tiles = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_did_prepare_tiles(), target);
  }

  // optional int32 consecutive_checkerboard_animations = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_consecutive_checkerboard_animations(), target);
  }

  // optional int32 pending_submit_frames = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_pending_submit_frames(), target);
  }

  // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_submit_frames_with_current_layer_tree_frame_sink(), target);
  }

  // optional bool needs_redraw = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_needs_redraw(), target);
  }

  // optional bool needs_prepare_tiles = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_needs_prepare_tiles(), target);
  }

  // optional bool needs_begin_main_frame = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_needs_begin_main_frame(), target);
  }

  // optional bool needs_one_begin_impl_frame = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_needs_one_begin_impl_frame(), target);
  }

  // optional bool visible = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_visible(), target);
  }

  // optional bool begin_frame_source_paused = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_begin_frame_source_paused(), target);
  }

  // optional bool can_draw = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_can_draw(), target);
  }

  // optional bool resourceless_draw = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_resourceless_draw(), target);
  }

  // optional bool has_pending_tree = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_has_pending_tree(), target);
  }

  // optional bool pending_tree_is_ready_for_activation = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_pending_tree_is_ready_for_activation(), target);
  }

  // optional bool active_tree_needs_first_draw = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_active_tree_needs_first_draw(), target);
  }

  // optional bool active_tree_is_ready_to_draw = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_active_tree_is_ready_to_draw(), target);
  }

  // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_did_create_and_initialize_first_layer_tree_frame_sink(), target);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_tree_priority(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_scroll_handler_state(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_critical_begin_main_frame_to_activate_is_fast(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool main_thread_missed_last_deadline = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_main_thread_missed_last_deadline(), target);
  }

  // optional bool video_needs_begin_frames = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_video_needs_begin_frames(), target);
  }

  // optional bool defer_begin_main_frame = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_defer_begin_main_frame(), target);
  }

  // optional bool last_commit_had_no_updates = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_last_commit_had_no_updates(), target);
  }

  // optional bool did_draw_in_last_frame = 39;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_did_draw_in_last_frame(), target);
  }

  // optional bool did_submit_in_last_frame = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_did_submit_in_last_frame(), target);
  }

  // optional bool needs_impl_side_invalidation = 41;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_needs_impl_side_invalidation(), target);
  }

  // optional bool current_pending_tree_is_impl_side = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_current_pending_tree_is_impl_side(), target);
  }

  // optional bool previous_pending_tree_was_impl_side = 43;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_previous_pending_tree_was_impl_side(), target);
  }

  // optional bool processing_animation_worklets_for_active_tree = 44;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_processing_animation_worklets_for_active_tree(), target);
  }

  // optional bool processing_animation_worklets_for_pending_tree = 45;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_processing_animation_worklets_for_pending_tree(), target);
  }

  // optional bool processing_paint_worklets_for_pending_tree = 46;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(46, this->_internal_processing_paint_worklets_for_pending_tree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  return target;
}

size_t ChromeCompositorStateMachine_MinorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 commit_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_commit_count());
    }

    // optional int32 current_frame_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_frame_number());
    }

    // optional int32 last_frame_number_submit_performed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_frame_number_submit_performed());
    }

    // optional int32 last_frame_number_draw_performed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_frame_number_draw_performed());
    }

    // optional int32 last_frame_number_begin_main_frame_sent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_last_frame_number_begin_main_frame_sent());
    }

    // optional bool did_draw = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool did_send_begin_main_frame_for_current_frame = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool did_notify_begin_main_frame_not_expected_until = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool wants_begin_main_frame_not_expected = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool did_commit_during_frame = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool did_invalidate_layer_tree_frame_sink = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool did_perform_impl_side_invalidaion = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 consecutive_checkerboard_animations = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_consecutive_checkerboard_animations());
    }

    // optional int32 pending_submit_frames = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_pending_submit_frames());
    }

    // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_submit_frames_with_current_layer_tree_frame_sink());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool did_prepare_tiles = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool needs_redraw = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool needs_prepare_tiles = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool needs_begin_main_frame = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool needs_one_begin_impl_frame = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool visible = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool begin_frame_source_paused = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool can_draw = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool resourceless_draw = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool has_pending_tree = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool pending_tree_is_ready_for_activation = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool active_tree_needs_first_draw = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_tree_priority());
    }

    // optional bool active_tree_is_ready_to_draw = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool main_thread_missed_last_deadline = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scroll_handler_state());
    }

    // optional bool video_needs_begin_frames = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool defer_begin_main_frame = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool last_commit_had_no_updates = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool did_draw_in_last_frame = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool did_submit_in_last_frame = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool needs_impl_side_invalidation = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool current_pending_tree_is_impl_side = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool previous_pending_tree_was_impl_side = 43;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool processing_animation_worklets_for_active_tree = 44;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool processing_animation_worklets_for_pending_tree = 45;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool processing_paint_worklets_for_pending_tree = 46;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorStateMachine_MinorState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeCompositorStateMachine_MinorState*>(
      &from));
}

void ChromeCompositorStateMachine_MinorState::MergeFrom(const ChromeCompositorStateMachine_MinorState& from) {
  ChromeCompositorStateMachine_MinorState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.commit_count_ = from._impl_.commit_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.current_frame_number_ = from._impl_.current_frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_frame_number_submit_performed_ = from._impl_.last_frame_number_submit_performed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_frame_number_draw_performed_ = from._impl_.last_frame_number_draw_performed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.last_frame_number_begin_main_frame_sent_ = from._impl_.last_frame_number_begin_main_frame_sent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.did_draw_ = from._impl_.did_draw_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.did_send_begin_main_frame_for_current_frame_ = from._impl_.did_send_begin_main_frame_for_current_frame_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.did_notify_begin_main_frame_not_expected_until_ = from._impl_.did_notify_begin_main_frame_not_expected_until_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.did_notify_begin_main_frame_not_expected_soon_ = from._impl_.did_notify_begin_main_frame_not_expected_soon_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.wants_begin_main_frame_not_expected_ = from._impl_.wants_begin_main_frame_not_expected_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.did_commit_during_frame_ = from._impl_.did_commit_during_frame_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.did_invalidate_layer_tree_frame_sink_ = from._impl_.did_invalidate_layer_tree_frame_sink_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.did_perform_impl_side_invalidaion_ = from._impl_.did_perform_impl_side_invalidaion_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.consecutive_checkerboard_animations_ = from._impl_.consecutive_checkerboard_animations_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.pending_submit_frames_ = from._impl_.pending_submit_frames_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.submit_frames_with_current_layer_tree_frame_sink_ = from._impl_.submit_frames_with_current_layer_tree_frame_sink_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.did_prepare_tiles_ = from._impl_.did_prepare_tiles_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.needs_redraw_ = from._impl_.needs_redraw_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.needs_prepare_tiles_ = from._impl_.needs_prepare_tiles_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.needs_begin_main_frame_ = from._impl_.needs_begin_main_frame_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.needs_one_begin_impl_frame_ = from._impl_.needs_one_begin_impl_frame_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.visible_ = from._impl_.visible_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.begin_frame_source_paused_ = from._impl_.begin_frame_source_paused_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.can_draw_ = from._impl_.can_draw_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.resourceless_draw_ = from._impl_.resourceless_draw_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.has_pending_tree_ = from._impl_.has_pending_tree_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.pending_tree_is_ready_for_activation_ = from._impl_.pending_tree_is_ready_for_activation_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.active_tree_needs_first_draw_ = from._impl_.active_tree_needs_first_draw_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tree_priority_ = from._impl_.tree_priority_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.active_tree_is_ready_to_draw_ = from._impl_.active_tree_is_ready_to_draw_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.did_create_and_initialize_first_layer_tree_frame_sink_ = from._impl_.did_create_and_initialize_first_layer_tree_frame_sink_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.critical_begin_main_frame_to_activate_is_fast_ = from._impl_.critical_begin_main_frame_to_activate_is_fast_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.main_thread_missed_last_deadline_ = from._impl_.main_thread_missed_last_deadline_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.scroll_handler_state_ = from._impl_.scroll_handler_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.video_needs_begin_frames_ = from._impl_.video_needs_begin_frames_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.defer_begin_main_frame_ = from._impl_.defer_begin_main_frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.last_commit_had_no_updates_ = from._impl_.last_commit_had_no_updates_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.did_draw_in_last_frame_ = from._impl_.did_draw_in_last_frame_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.did_submit_in_last_frame_ = from._impl_.did_submit_in_last_frame_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.needs_impl_side_invalidation_ = from._impl_.needs_impl_side_invalidation_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.current_pending_tree_is_impl_side_ = from._impl_.current_pending_tree_is_impl_side_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.previous_pending_tree_was_impl_side_ = from._impl_.previous_pending_tree_was_impl_side_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.processing_animation_worklets_for_active_tree_ = from._impl_.processing_animation_worklets_for_active_tree_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.processing_animation_worklets_for_pending_tree_ = from._impl_.processing_animation_worklets_for_pending_tree_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.processing_paint_worklets_for_pending_tree_ = from._impl_.processing_paint_worklets_for_pending_tree_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeCompositorStateMachine_MinorState::CopyFrom(const ChromeCompositorStateMachine_MinorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorStateMachine.MinorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorStateMachine_MinorState::IsInitialized() const {
  return true;
}

void ChromeCompositorStateMachine_MinorState::InternalSwap(ChromeCompositorStateMachine_MinorState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeCompositorStateMachine_MinorState, _impl_.processing_paint_worklets_for_pending_tree_)
      + sizeof(ChromeCompositorStateMachine_MinorState::_impl_.processing_paint_worklets_for_pending_tree_)
      - PROTOBUF_FIELD_OFFSET(ChromeCompositorStateMachine_MinorState, _impl_.commit_count_)>(
          reinterpret_cast<char*>(&_impl_.commit_count_),
          reinterpret_cast<char*>(&other->_impl_.commit_count_));
}

std::string ChromeCompositorStateMachine_MinorState::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorStateMachine.MinorState";
}


// ===================================================================

class ChromeCompositorStateMachine::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeCompositorStateMachine>()._impl_._has_bits_);
  static const ::perfetto::protos::ChromeCompositorStateMachine_MajorState& major_state(const ChromeCompositorStateMachine* msg);
  static void set_has_major_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::ChromeCompositorStateMachine_MinorState& minor_state(const ChromeCompositorStateMachine* msg);
  static void set_has_minor_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::ChromeCompositorStateMachine_MajorState&
ChromeCompositorStateMachine::_Internal::major_state(const ChromeCompositorStateMachine* msg) {
  return *msg->_impl_.major_state_;
}
const ::perfetto::protos::ChromeCompositorStateMachine_MinorState&
ChromeCompositorStateMachine::_Internal::minor_state(const ChromeCompositorStateMachine* msg) {
  return *msg->_impl_.minor_state_;
}
ChromeCompositorStateMachine::ChromeCompositorStateMachine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeCompositorStateMachine)
}
ChromeCompositorStateMachine::ChromeCompositorStateMachine(const ChromeCompositorStateMachine& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeCompositorStateMachine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.major_state_){nullptr}
    , decltype(_impl_.minor_state_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_major_state()) {
    _this->_impl_.major_state_ = new ::perfetto::protos::ChromeCompositorStateMachine_MajorState(*from._impl_.major_state_);
  }
  if (from._internal_has_minor_state()) {
    _this->_impl_.minor_state_ = new ::perfetto::protos::ChromeCompositorStateMachine_MinorState(*from._impl_.minor_state_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeCompositorStateMachine)
}

inline void ChromeCompositorStateMachine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.major_state_){nullptr}
    , decltype(_impl_.minor_state_){nullptr}
  };
}

ChromeCompositorStateMachine::~ChromeCompositorStateMachine() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeCompositorStateMachine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeCompositorStateMachine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.major_state_;
  if (this != internal_default_instance()) delete _impl_.minor_state_;
}

void ChromeCompositorStateMachine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeCompositorStateMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeCompositorStateMachine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.major_state_ != nullptr);
      _impl_.major_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.minor_state_ != nullptr);
      _impl_.minor_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeCompositorStateMachine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_major_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minor_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeCompositorStateMachine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeCompositorStateMachine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::major_state(this),
        _Internal::major_state(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::minor_state(this),
        _Internal::minor_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeCompositorStateMachine)
  return target;
}

size_t ChromeCompositorStateMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeCompositorStateMachine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.major_state_);
    }

    // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.minor_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeCompositorStateMachine::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeCompositorStateMachine*>(
      &from));
}

void ChromeCompositorStateMachine::MergeFrom(const ChromeCompositorStateMachine& from) {
  ChromeCompositorStateMachine* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeCompositorStateMachine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_major_state()->::perfetto::protos::ChromeCompositorStateMachine_MajorState::MergeFrom(
          from._internal_major_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_minor_state()->::perfetto::protos::ChromeCompositorStateMachine_MinorState::MergeFrom(
          from._internal_minor_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeCompositorStateMachine::CopyFrom(const ChromeCompositorStateMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeCompositorStateMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeCompositorStateMachine::IsInitialized() const {
  return true;
}

void ChromeCompositorStateMachine::InternalSwap(ChromeCompositorStateMachine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeCompositorStateMachine, _impl_.minor_state_)
      + sizeof(ChromeCompositorStateMachine::_impl_.minor_state_)
      - PROTOBUF_FIELD_OFFSET(ChromeCompositorStateMachine, _impl_.major_state_)>(
          reinterpret_cast<char*>(&_impl_.major_state_),
          reinterpret_cast<char*>(&other->_impl_.major_state_));
}

std::string ChromeCompositorStateMachine::GetTypeName() const {
  return "perfetto.protos.ChromeCompositorStateMachine";
}


// ===================================================================

class BeginFrameArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginFrameArgs>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deadline_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_interval_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_on_critical_path(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_animate_only(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::SourceLocation& source_location(const BeginFrameArgs* msg);
  static void set_has_frames_throttled_since_last(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::perfetto::protos::SourceLocation&
BeginFrameArgs::_Internal::source_location(const BeginFrameArgs* msg) {
  return *msg->_impl_.created_from_.source_location_;
}
void BeginFrameArgs::set_allocated_source_location(::perfetto::protos::SourceLocation* source_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_created_from();
  if (source_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_location));
    if (message_arena != submessage_arena) {
      source_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    set_has_source_location();
    _impl_.created_from_.source_location_ = source_location;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginFrameArgs.source_location)
}
void BeginFrameArgs::clear_source_location() {
  if (_internal_has_source_location()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.created_from_.source_location_;
    }
    clear_has_created_from();
  }
}
BeginFrameArgs::BeginFrameArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BeginFrameArgs)
}
BeginFrameArgs::BeginFrameArgs(const BeginFrameArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BeginFrameArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_id_){}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.frame_time_us_){}
    , decltype(_impl_.deadline_us_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.on_critical_path_){}
    , decltype(_impl_.animate_only_){}
    , decltype(_impl_.interval_delta_us_){}
    , decltype(_impl_.frames_throttled_since_last_){}
    , decltype(_impl_.created_from_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.source_id_, &from._impl_.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frames_throttled_since_last_) -
    reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.frames_throttled_since_last_));
  clear_has_created_from();
  switch (from.created_from_case()) {
    case kSourceLocationIid: {
      _this->_internal_set_source_location_iid(from._internal_source_location_iid());
      break;
    }
    case kSourceLocation: {
      _this->_internal_mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(
          from._internal_source_location());
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginFrameArgs)
}

inline void BeginFrameArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_id_){uint64_t{0u}}
    , decltype(_impl_.sequence_number_){uint64_t{0u}}
    , decltype(_impl_.frame_time_us_){int64_t{0}}
    , decltype(_impl_.deadline_us_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.on_critical_path_){false}
    , decltype(_impl_.animate_only_){false}
    , decltype(_impl_.interval_delta_us_){int64_t{0}}
    , decltype(_impl_.frames_throttled_since_last_){int64_t{0}}
    , decltype(_impl_.created_from_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_created_from();
}

BeginFrameArgs::~BeginFrameArgs() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginFrameArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeginFrameArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_created_from()) {
    clear_created_from();
  }
}

void BeginFrameArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeginFrameArgs::clear_created_from() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.BeginFrameArgs)
  switch (created_from_case()) {
    case kSourceLocationIid: {
      // No need to clear
      break;
    }
    case kSourceLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.created_from_.source_location_;
      }
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CREATED_FROM_NOT_SET;
}


void BeginFrameArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginFrameArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.interval_delta_us_) -
        reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.interval_delta_us_));
  }
  _impl_.frames_throttled_since_last_ = int64_t{0};
  clear_created_from();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BeginFrameArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BeginFrameArgs_BeginFrameArgsType_IsValid(val))) {
            _internal_set_type(static_cast<::perfetto::protos::BeginFrameArgs_BeginFrameArgsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_id(&has_bits);
          _impl_.source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 frame_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frame_time_us(&has_bits);
          _impl_.frame_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 deadline_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_deadline_us(&has_bits);
          _impl_.deadline_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 interval_delta_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_interval_delta_us(&has_bits);
          _impl_.interval_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool on_critical_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_on_critical_path(&has_bits);
          _impl_.on_critical_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool animate_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_animate_only(&has_bits);
          _impl_.animate_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 source_location_iid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_source_location_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.SourceLocation source_location = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 frames_throttled_since_last = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_frames_throttled_since_last(&has_bits);
          _impl_.frames_throttled_since_last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginFrameArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BeginFrameArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint64 source_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_source_id(), target);
  }

  // optional uint64 sequence_number = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_number(), target);
  }

  // optional int64 frame_time_us = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_frame_time_us(), target);
  }

  // optional int64 deadline_us = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_deadline_us(), target);
  }

  // optional int64 interval_delta_us = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_interval_delta_us(), target);
  }

  // optional bool on_critical_path = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_on_critical_path(), target);
  }

  // optional bool animate_only = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_animate_only(), target);
  }

  switch (created_from_case()) {
    case kSourceLocationIid: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_source_location_iid(), target);
      break;
    }
    case kSourceLocation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::source_location(this),
          _Internal::source_location(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional int64 frames_throttled_since_last = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_frames_throttled_since_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BeginFrameArgs)
  return target;
}

size_t BeginFrameArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginFrameArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 source_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_id());
    }

    // optional uint64 sequence_number = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence_number());
    }

    // optional int64 frame_time_us = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_time_us());
    }

    // optional int64 deadline_us = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deadline_us());
    }

    // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool on_critical_path = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool animate_only = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int64 interval_delta_us = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_interval_delta_us());
    }

  }
  // optional int64 frames_throttled_since_last = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frames_throttled_since_last());
  }

  switch (created_from_case()) {
    // uint64 source_location_iid = 9;
    case kSourceLocationIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_location_iid());
      break;
    }
    // .perfetto.protos.SourceLocation source_location = 10;
    case kSourceLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.created_from_.source_location_);
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginFrameArgs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BeginFrameArgs*>(
      &from));
}

void BeginFrameArgs::MergeFrom(const BeginFrameArgs& from) {
  BeginFrameArgs* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginFrameArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_id_ = from._impl_.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frame_time_us_ = from._impl_.frame_time_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deadline_us_ = from._impl_.deadline_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.on_critical_path_ = from._impl_.on_critical_path_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.animate_only_ = from._impl_.animate_only_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.interval_delta_us_ = from._impl_.interval_delta_us_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_frames_throttled_since_last(from._internal_frames_throttled_since_last());
  }
  switch (from.created_from_case()) {
    case kSourceLocationIid: {
      _this->_internal_set_source_location_iid(from._internal_source_location_iid());
      break;
    }
    case kSourceLocation: {
      _this->_internal_mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(
          from._internal_source_location());
      break;
    }
    case CREATED_FROM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BeginFrameArgs::CopyFrom(const BeginFrameArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginFrameArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginFrameArgs::IsInitialized() const {
  return true;
}

void BeginFrameArgs::InternalSwap(BeginFrameArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeginFrameArgs, _impl_.frames_throttled_since_last_)
      + sizeof(BeginFrameArgs::_impl_.frames_throttled_since_last_)
      - PROTOBUF_FIELD_OFFSET(BeginFrameArgs, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
  swap(_impl_.created_from_, other->_impl_.created_from_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string BeginFrameArgs::GetTypeName() const {
  return "perfetto.protos.BeginFrameArgs";
}


// ===================================================================

class BeginImplFrameArgs_TimestampsInUs::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginImplFrameArgs_TimestampsInUs>()._impl_._has_bits_);
  static void set_has_interval_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_now_to_deadline_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_time_to_now_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_time_to_deadline_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_now(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deadline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BeginImplFrameArgs_TimestampsInUs::BeginImplFrameArgs_TimestampsInUs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
}
BeginImplFrameArgs_TimestampsInUs::BeginImplFrameArgs_TimestampsInUs(const BeginImplFrameArgs_TimestampsInUs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BeginImplFrameArgs_TimestampsInUs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_delta_){}
    , decltype(_impl_.now_to_deadline_delta_){}
    , decltype(_impl_.frame_time_to_now_delta_){}
    , decltype(_impl_.frame_time_to_deadline_delta_){}
    , decltype(_impl_.now_){}
    , decltype(_impl_.frame_time_){}
    , decltype(_impl_.deadline_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.interval_delta_, &from._impl_.interval_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deadline_) -
    reinterpret_cast<char*>(&_impl_.interval_delta_)) + sizeof(_impl_.deadline_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
}

inline void BeginImplFrameArgs_TimestampsInUs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_delta_){int64_t{0}}
    , decltype(_impl_.now_to_deadline_delta_){int64_t{0}}
    , decltype(_impl_.frame_time_to_now_delta_){int64_t{0}}
    , decltype(_impl_.frame_time_to_deadline_delta_){int64_t{0}}
    , decltype(_impl_.now_){int64_t{0}}
    , decltype(_impl_.frame_time_){int64_t{0}}
    , decltype(_impl_.deadline_){int64_t{0}}
  };
}

BeginImplFrameArgs_TimestampsInUs::~BeginImplFrameArgs_TimestampsInUs() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeginImplFrameArgs_TimestampsInUs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BeginImplFrameArgs_TimestampsInUs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeginImplFrameArgs_TimestampsInUs::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.interval_delta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deadline_) -
        reinterpret_cast<char*>(&_impl_.interval_delta_)) + sizeof(_impl_.deadline_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BeginImplFrameArgs_TimestampsInUs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 interval_delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_interval_delta(&has_bits);
          _impl_.interval_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 now_to_deadline_delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_now_to_deadline_delta(&has_bits);
          _impl_.now_to_deadline_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 frame_time_to_now_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_time_to_now_delta(&has_bits);
          _impl_.frame_time_to_now_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 frame_time_to_deadline_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frame_time_to_deadline_delta(&has_bits);
          _impl_.frame_time_to_deadline_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 now = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_now(&has_bits);
          _impl_.now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 frame_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_frame_time(&has_bits);
          _impl_.frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 deadline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deadline(&has_bits);
          _impl_.deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginImplFrameArgs_TimestampsInUs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 interval_delta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_interval_delta(), target);
  }

  // optional int64 now_to_deadline_delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_now_to_deadline_delta(), target);
  }

  // optional int64 frame_time_to_now_delta = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_frame_time_to_now_delta(), target);
  }

  // optional int64 frame_time_to_deadline_delta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_frame_time_to_deadline_delta(), target);
  }

  // optional int64 now = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_now(), target);
  }

  // optional int64 frame_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_frame_time(), target);
  }

  // optional int64 deadline = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_deadline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  return target;
}

size_t BeginImplFrameArgs_TimestampsInUs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 interval_delta = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_interval_delta());
    }

    // optional int64 now_to_deadline_delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_now_to_deadline_delta());
    }

    // optional int64 frame_time_to_now_delta = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_time_to_now_delta());
    }

    // optional int64 frame_time_to_deadline_delta = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_time_to_deadline_delta());
    }

    // optional int64 now = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_now());
    }

    // optional int64 frame_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_time());
    }

    // optional int64 deadline = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_deadline());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginImplFrameArgs_TimestampsInUs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BeginImplFrameArgs_TimestampsInUs*>(
      &from));
}

void BeginImplFrameArgs_TimestampsInUs::MergeFrom(const BeginImplFrameArgs_TimestampsInUs& from) {
  BeginImplFrameArgs_TimestampsInUs* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.interval_delta_ = from._impl_.interval_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.now_to_deadline_delta_ = from._impl_.now_to_deadline_delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frame_time_to_now_delta_ = from._impl_.frame_time_to_now_delta_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.frame_time_to_deadline_delta_ = from._impl_.frame_time_to_deadline_delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.now_ = from._impl_.now_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.frame_time_ = from._impl_.frame_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.deadline_ = from._impl_.deadline_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BeginImplFrameArgs_TimestampsInUs::CopyFrom(const BeginImplFrameArgs_TimestampsInUs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginImplFrameArgs_TimestampsInUs::IsInitialized() const {
  return true;
}

void BeginImplFrameArgs_TimestampsInUs::InternalSwap(BeginImplFrameArgs_TimestampsInUs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeginImplFrameArgs_TimestampsInUs, _impl_.deadline_)
      + sizeof(BeginImplFrameArgs_TimestampsInUs::_impl_.deadline_)
      - PROTOBUF_FIELD_OFFSET(BeginImplFrameArgs_TimestampsInUs, _impl_.interval_delta_)>(
          reinterpret_cast<char*>(&_impl_.interval_delta_),
          reinterpret_cast<char*>(&other->_impl_.interval_delta_));
}

std::string BeginImplFrameArgs_TimestampsInUs::GetTypeName() const {
  return "perfetto.protos.BeginImplFrameArgs.TimestampsInUs";
}


// ===================================================================

class BeginImplFrameArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginImplFrameArgs>()._impl_._has_bits_);
  static void set_has_updated_at_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_finished_at_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::BeginFrameArgs& current_args(const BeginImplFrameArgs* msg);
  static const ::perfetto::protos::BeginFrameArgs& last_args(const BeginImplFrameArgs* msg);
  static const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs& timestamps_in_us(const BeginImplFrameArgs* msg);
  static void set_has_timestamps_in_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BeginFrameArgs&
BeginImplFrameArgs::_Internal::current_args(const BeginImplFrameArgs* msg) {
  return *msg->_impl_.args_.current_args_;
}
const ::perfetto::protos::BeginFrameArgs&
BeginImplFrameArgs::_Internal::last_args(const BeginImplFrameArgs* msg) {
  return *msg->_impl_.args_.last_args_;
}
const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs&
BeginImplFrameArgs::_Internal::timestamps_in_us(const BeginImplFrameArgs* msg) {
  return *msg->_impl_.timestamps_in_us_;
}
void BeginImplFrameArgs::set_allocated_current_args(::perfetto::protos::BeginFrameArgs* current_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_args();
  if (current_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_args);
    if (message_arena != submessage_arena) {
      current_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_args, submessage_arena);
    }
    set_has_current_args();
    _impl_.args_.current_args_ = current_args;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginImplFrameArgs.current_args)
}
void BeginImplFrameArgs::set_allocated_last_args(::perfetto::protos::BeginFrameArgs* last_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_args();
  if (last_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_args);
    if (message_arena != submessage_arena) {
      last_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_args, submessage_arena);
    }
    set_has_last_args();
    _impl_.args_.last_args_ = last_args;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginImplFrameArgs.last_args)
}
BeginImplFrameArgs::BeginImplFrameArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BeginImplFrameArgs)
}
BeginImplFrameArgs::BeginImplFrameArgs(const BeginImplFrameArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BeginImplFrameArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamps_in_us_){nullptr}
    , decltype(_impl_.updated_at_us_){}
    , decltype(_impl_.finished_at_us_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timestamps_in_us()) {
    _this->_impl_.timestamps_in_us_ = new ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs(*from._impl_.timestamps_in_us_);
  }
  ::memcpy(&_impl_.updated_at_us_, &from._impl_.updated_at_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.updated_at_us_)) + sizeof(_impl_.state_));
  clear_has_args();
  switch (from.args_case()) {
    case kCurrentArgs: {
      _this->_internal_mutable_current_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(
          from._internal_current_args());
      break;
    }
    case kLastArgs: {
      _this->_internal_mutable_last_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(
          from._internal_last_args());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginImplFrameArgs)
}

inline void BeginImplFrameArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamps_in_us_){nullptr}
    , decltype(_impl_.updated_at_us_){int64_t{0}}
    , decltype(_impl_.finished_at_us_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.args_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_args();
}

BeginImplFrameArgs::~BeginImplFrameArgs() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginImplFrameArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeginImplFrameArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamps_in_us_;
  if (has_args()) {
    clear_args();
  }
}

void BeginImplFrameArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeginImplFrameArgs::clear_args() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.BeginImplFrameArgs)
  switch (args_case()) {
    case kCurrentArgs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.args_.current_args_;
      }
      break;
    }
    case kLastArgs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.args_.last_args_;
      }
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ARGS_NOT_SET;
}


void BeginImplFrameArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginImplFrameArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.timestamps_in_us_ != nullptr);
    _impl_.timestamps_in_us_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.updated_at_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.updated_at_us_)) + sizeof(_impl_.state_));
  }
  clear_args();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BeginImplFrameArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 updated_at_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_updated_at_us(&has_bits);
          _impl_.updated_at_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 finished_at_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_finished_at_us(&has_bits);
          _impl_.finished_at_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BeginImplFrameArgs_State_IsValid(val))) {
            _internal_set_state(static_cast<::perfetto::protos::BeginImplFrameArgs_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.BeginFrameArgs current_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_args(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.BeginFrameArgs last_args = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_args(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamps_in_us(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginImplFrameArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BeginImplFrameArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 updated_at_us = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_updated_at_us(), target);
  }

  // optional int64 finished_at_us = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_finished_at_us(), target);
  }

  // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  switch (args_case()) {
    case kCurrentArgs: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::current_args(this),
          _Internal::current_args(this).GetCachedSize(), target, stream);
      break;
    }
    case kLastArgs: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::last_args(this),
          _Internal::last_args(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timestamps_in_us(this),
        _Internal::timestamps_in_us(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BeginImplFrameArgs)
  return target;
}

size_t BeginImplFrameArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginImplFrameArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamps_in_us_);
    }

    // optional int64 updated_at_us = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_updated_at_us());
    }

    // optional int64 finished_at_us = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_finished_at_us());
    }

    // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  switch (args_case()) {
    // .perfetto.protos.BeginFrameArgs current_args = 4;
    case kCurrentArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.args_.current_args_);
      break;
    }
    // .perfetto.protos.BeginFrameArgs last_args = 5;
    case kLastArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.args_.last_args_);
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginImplFrameArgs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BeginImplFrameArgs*>(
      &from));
}

void BeginImplFrameArgs::MergeFrom(const BeginImplFrameArgs& from) {
  BeginImplFrameArgs* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginImplFrameArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamps_in_us()->::perfetto::protos::BeginImplFrameArgs_TimestampsInUs::MergeFrom(
          from._internal_timestamps_in_us());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.updated_at_us_ = from._impl_.updated_at_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.finished_at_us_ = from._impl_.finished_at_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.args_case()) {
    case kCurrentArgs: {
      _this->_internal_mutable_current_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(
          from._internal_current_args());
      break;
    }
    case kLastArgs: {
      _this->_internal_mutable_last_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(
          from._internal_last_args());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BeginImplFrameArgs::CopyFrom(const BeginImplFrameArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginImplFrameArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginImplFrameArgs::IsInitialized() const {
  return true;
}

void BeginImplFrameArgs::InternalSwap(BeginImplFrameArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeginImplFrameArgs, _impl_.state_)
      + sizeof(BeginImplFrameArgs::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(BeginImplFrameArgs, _impl_.timestamps_in_us_)>(
          reinterpret_cast<char*>(&_impl_.timestamps_in_us_),
          reinterpret_cast<char*>(&other->_impl_.timestamps_in_us_));
  swap(_impl_.args_, other->_impl_.args_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string BeginImplFrameArgs::GetTypeName() const {
  return "perfetto.protos.BeginImplFrameArgs";
}


// ===================================================================

class BeginFrameObserverState::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginFrameObserverState>()._impl_._has_bits_);
  static void set_has_dropped_begin_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::BeginFrameArgs& last_begin_frame_args(const BeginFrameObserverState* msg);
  static void set_has_last_begin_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BeginFrameArgs&
BeginFrameObserverState::_Internal::last_begin_frame_args(const BeginFrameObserverState* msg) {
  return *msg->_impl_.last_begin_frame_args_;
}
BeginFrameObserverState::BeginFrameObserverState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BeginFrameObserverState)
}
BeginFrameObserverState::BeginFrameObserverState(const BeginFrameObserverState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BeginFrameObserverState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_begin_frame_args_){nullptr}
    , decltype(_impl_.dropped_begin_frame_args_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_last_begin_frame_args()) {
    _this->_impl_.last_begin_frame_args_ = new ::perfetto::protos::BeginFrameArgs(*from._impl_.last_begin_frame_args_);
  }
  _this->_impl_.dropped_begin_frame_args_ = from._impl_.dropped_begin_frame_args_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginFrameObserverState)
}

inline void BeginFrameObserverState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_begin_frame_args_){nullptr}
    , decltype(_impl_.dropped_begin_frame_args_){int64_t{0}}
  };
}

BeginFrameObserverState::~BeginFrameObserverState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginFrameObserverState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeginFrameObserverState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.last_begin_frame_args_;
}

void BeginFrameObserverState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeginFrameObserverState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginFrameObserverState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.last_begin_frame_args_ != nullptr);
    _impl_.last_begin_frame_args_->Clear();
  }
  _impl_.dropped_begin_frame_args_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BeginFrameObserverState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 dropped_begin_frame_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dropped_begin_frame_args(&has_bits);
          _impl_.dropped_begin_frame_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_begin_frame_args(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginFrameObserverState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BeginFrameObserverState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 dropped_begin_frame_args = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_dropped_begin_frame_args(), target);
  }

  // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::last_begin_frame_args(this),
        _Internal::last_begin_frame_args(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BeginFrameObserverState)
  return target;
}

size_t BeginFrameObserverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginFrameObserverState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_begin_frame_args_);
    }

    // optional int64 dropped_begin_frame_args = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dropped_begin_frame_args());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginFrameObserverState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BeginFrameObserverState*>(
      &from));
}

void BeginFrameObserverState::MergeFrom(const BeginFrameObserverState& from) {
  BeginFrameObserverState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginFrameObserverState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_last_begin_frame_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(
          from._internal_last_begin_frame_args());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dropped_begin_frame_args_ = from._impl_.dropped_begin_frame_args_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BeginFrameObserverState::CopyFrom(const BeginFrameObserverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginFrameObserverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginFrameObserverState::IsInitialized() const {
  return true;
}

void BeginFrameObserverState::InternalSwap(BeginFrameObserverState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeginFrameObserverState, _impl_.dropped_begin_frame_args_)
      + sizeof(BeginFrameObserverState::_impl_.dropped_begin_frame_args_)
      - PROTOBUF_FIELD_OFFSET(BeginFrameObserverState, _impl_.last_begin_frame_args_)>(
          reinterpret_cast<char*>(&_impl_.last_begin_frame_args_),
          reinterpret_cast<char*>(&other->_impl_.last_begin_frame_args_));
}

std::string BeginFrameObserverState::GetTypeName() const {
  return "perfetto.protos.BeginFrameObserverState";
}


// ===================================================================

class BeginFrameSourceState::_Internal {
 public:
  using HasBits = decltype(std::declval<BeginFrameSourceState>()._impl_._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_observers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::BeginFrameArgs& last_begin_frame_args(const BeginFrameSourceState* msg);
  static void set_has_last_begin_frame_args(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BeginFrameArgs&
BeginFrameSourceState::_Internal::last_begin_frame_args(const BeginFrameSourceState* msg) {
  return *msg->_impl_.last_begin_frame_args_;
}
BeginFrameSourceState::BeginFrameSourceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BeginFrameSourceState)
}
BeginFrameSourceState::BeginFrameSourceState(const BeginFrameSourceState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BeginFrameSourceState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_begin_frame_args_){nullptr}
    , decltype(_impl_.source_id_){}
    , decltype(_impl_.paused_){}
    , decltype(_impl_.num_observers_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_last_begin_frame_args()) {
    _this->_impl_.last_begin_frame_args_ = new ::perfetto::protos::BeginFrameArgs(*from._impl_.last_begin_frame_args_);
  }
  ::memcpy(&_impl_.source_id_, &from._impl_.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_observers_) -
    reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.num_observers_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BeginFrameSourceState)
}

inline void BeginFrameSourceState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_begin_frame_args_){nullptr}
    , decltype(_impl_.source_id_){0u}
    , decltype(_impl_.paused_){false}
    , decltype(_impl_.num_observers_){0u}
  };
}

BeginFrameSourceState::~BeginFrameSourceState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BeginFrameSourceState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeginFrameSourceState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.last_begin_frame_args_;
}

void BeginFrameSourceState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BeginFrameSourceState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BeginFrameSourceState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.last_begin_frame_args_ != nullptr);
    _impl_.last_begin_frame_args_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_observers_) -
        reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.num_observers_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BeginFrameSourceState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          _impl_.source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool paused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_paused(&has_bits);
          _impl_.paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_observers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_observers(&has_bits);
          _impl_.num_observers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_begin_frame_args(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginFrameSourceState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BeginFrameSourceState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_id(), target);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_paused(), target);
  }

  // optional uint32 num_observers = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_observers(), target);
  }

  // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_begin_frame_args(this),
        _Internal::last_begin_frame_args(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BeginFrameSourceState)
  return target;
}

size_t BeginFrameSourceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BeginFrameSourceState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_begin_frame_args_);
    }

    // optional uint32 source_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_id());
    }

    // optional bool paused = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 num_observers = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_observers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginFrameSourceState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BeginFrameSourceState*>(
      &from));
}

void BeginFrameSourceState::MergeFrom(const BeginFrameSourceState& from) {
  BeginFrameSourceState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BeginFrameSourceState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_last_begin_frame_args()->::perfetto::protos::BeginFrameArgs::MergeFrom(
          from._internal_last_begin_frame_args());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_id_ = from._impl_.source_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.paused_ = from._impl_.paused_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_observers_ = from._impl_.num_observers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BeginFrameSourceState::CopyFrom(const BeginFrameSourceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BeginFrameSourceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginFrameSourceState::IsInitialized() const {
  return true;
}

void BeginFrameSourceState::InternalSwap(BeginFrameSourceState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BeginFrameSourceState, _impl_.num_observers_)
      + sizeof(BeginFrameSourceState::_impl_.num_observers_)
      - PROTOBUF_FIELD_OFFSET(BeginFrameSourceState, _impl_.last_begin_frame_args_)>(
          reinterpret_cast<char*>(&_impl_.last_begin_frame_args_),
          reinterpret_cast<char*>(&other->_impl_.last_begin_frame_args_));
}

std::string BeginFrameSourceState::GetTypeName() const {
  return "perfetto.protos.BeginFrameSourceState";
}


// ===================================================================

class CompositorTimingHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CompositorTimingHistory>()._impl_._has_bits_);
  static void set_has_begin_main_frame_queue_critical_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_main_frame_queue_not_critical_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commit_to_ready_to_activate_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prepare_tiles_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_activate_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_draw_estimate_delta_us(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CompositorTimingHistory::CompositorTimingHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CompositorTimingHistory)
}
CompositorTimingHistory::CompositorTimingHistory(const CompositorTimingHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CompositorTimingHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_main_frame_queue_critical_estimate_delta_us_){}
    , decltype(_impl_.begin_main_frame_queue_not_critical_estimate_delta_us_){}
    , decltype(_impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_){}
    , decltype(_impl_.commit_to_ready_to_activate_estimate_delta_us_){}
    , decltype(_impl_.prepare_tiles_estimate_delta_us_){}
    , decltype(_impl_.activate_estimate_delta_us_){}
    , decltype(_impl_.draw_estimate_delta_us_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_main_frame_queue_critical_estimate_delta_us_, &from._impl_.begin_main_frame_queue_critical_estimate_delta_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.draw_estimate_delta_us_) -
    reinterpret_cast<char*>(&_impl_.begin_main_frame_queue_critical_estimate_delta_us_)) + sizeof(_impl_.draw_estimate_delta_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CompositorTimingHistory)
}

inline void CompositorTimingHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_main_frame_queue_critical_estimate_delta_us_){int64_t{0}}
    , decltype(_impl_.begin_main_frame_queue_not_critical_estimate_delta_us_){int64_t{0}}
    , decltype(_impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_){int64_t{0}}
    , decltype(_impl_.commit_to_ready_to_activate_estimate_delta_us_){int64_t{0}}
    , decltype(_impl_.prepare_tiles_estimate_delta_us_){int64_t{0}}
    , decltype(_impl_.activate_estimate_delta_us_){int64_t{0}}
    , decltype(_impl_.draw_estimate_delta_us_){int64_t{0}}
  };
}

CompositorTimingHistory::~CompositorTimingHistory() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CompositorTimingHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompositorTimingHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompositorTimingHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompositorTimingHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CompositorTimingHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.begin_main_frame_queue_critical_estimate_delta_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.draw_estimate_delta_us_) -
        reinterpret_cast<char*>(&_impl_.begin_main_frame_queue_critical_estimate_delta_us_)) + sizeof(_impl_.draw_estimate_delta_us_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CompositorTimingHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin_main_frame_queue_critical_estimate_delta_us(&has_bits);
          _impl_.begin_main_frame_queue_critical_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_begin_main_frame_queue_not_critical_estimate_delta_us(&has_bits);
          _impl_.begin_main_frame_queue_not_critical_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(&has_bits);
          _impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_commit_to_ready_to_activate_estimate_delta_us(&has_bits);
          _impl_.commit_to_ready_to_activate_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 prepare_tiles_estimate_delta_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prepare_tiles_estimate_delta_us(&has_bits);
          _impl_.prepare_tiles_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 activate_estimate_delta_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_activate_estimate_delta_us(&has_bits);
          _impl_.activate_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 draw_estimate_delta_us = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_draw_estimate_delta_us(&has_bits);
          _impl_.draw_estimate_delta_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompositorTimingHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CompositorTimingHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_begin_main_frame_queue_critical_estimate_delta_us(), target);
  }

  // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_begin_main_frame_queue_not_critical_estimate_delta_us(), target);
  }

  // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(), target);
  }

  // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_commit_to_ready_to_activate_estimate_delta_us(), target);
  }

  // optional int64 prepare_tiles_estimate_delta_us = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_prepare_tiles_estimate_delta_us(), target);
  }

  // optional int64 activate_estimate_delta_us = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_activate_estimate_delta_us(), target);
  }

  // optional int64 draw_estimate_delta_us = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_draw_estimate_delta_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CompositorTimingHistory)
  return target;
}

size_t CompositorTimingHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CompositorTimingHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_main_frame_queue_critical_estimate_delta_us());
    }

    // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_main_frame_queue_not_critical_estimate_delta_us());
    }

    // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begin_main_frame_start_to_ready_to_commit_estimate_delta_us());
    }

    // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_commit_to_ready_to_activate_estimate_delta_us());
    }

    // optional int64 prepare_tiles_estimate_delta_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_prepare_tiles_estimate_delta_us());
    }

    // optional int64 activate_estimate_delta_us = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_activate_estimate_delta_us());
    }

    // optional int64 draw_estimate_delta_us = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_draw_estimate_delta_us());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompositorTimingHistory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CompositorTimingHistory*>(
      &from));
}

void CompositorTimingHistory::MergeFrom(const CompositorTimingHistory& from) {
  CompositorTimingHistory* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CompositorTimingHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.begin_main_frame_queue_critical_estimate_delta_us_ = from._impl_.begin_main_frame_queue_critical_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.begin_main_frame_queue_not_critical_estimate_delta_us_ = from._impl_.begin_main_frame_queue_not_critical_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_ = from._impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.commit_to_ready_to_activate_estimate_delta_us_ = from._impl_.commit_to_ready_to_activate_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.prepare_tiles_estimate_delta_us_ = from._impl_.prepare_tiles_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.activate_estimate_delta_us_ = from._impl_.activate_estimate_delta_us_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.draw_estimate_delta_us_ = from._impl_.draw_estimate_delta_us_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CompositorTimingHistory::CopyFrom(const CompositorTimingHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CompositorTimingHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositorTimingHistory::IsInitialized() const {
  return true;
}

void CompositorTimingHistory::InternalSwap(CompositorTimingHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompositorTimingHistory, _impl_.draw_estimate_delta_us_)
      + sizeof(CompositorTimingHistory::_impl_.draw_estimate_delta_us_)
      - PROTOBUF_FIELD_OFFSET(CompositorTimingHistory, _impl_.begin_main_frame_queue_critical_estimate_delta_us_)>(
          reinterpret_cast<char*>(&_impl_.begin_main_frame_queue_critical_estimate_delta_us_),
          reinterpret_cast<char*>(&other->_impl_.begin_main_frame_queue_critical_estimate_delta_us_));
}

std::string CompositorTimingHistory::GetTypeName() const {
  return "perfetto.protos.CompositorTimingHistory";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorSchedulerState*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorSchedulerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeCompositorSchedulerState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorStateMachine_MajorState*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorStateMachine_MajorState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeCompositorStateMachine_MajorState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorStateMachine_MinorState*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorStateMachine_MinorState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeCompositorStateMachine_MinorState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeCompositorStateMachine*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeCompositorStateMachine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeCompositorStateMachine >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginFrameArgs*
Arena::CreateMaybeMessage< ::perfetto::protos::BeginFrameArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BeginFrameArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs*
Arena::CreateMaybeMessage< ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginImplFrameArgs*
Arena::CreateMaybeMessage< ::perfetto::protos::BeginImplFrameArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BeginImplFrameArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginFrameObserverState*
Arena::CreateMaybeMessage< ::perfetto::protos::BeginFrameObserverState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BeginFrameObserverState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BeginFrameSourceState*
Arena::CreateMaybeMessage< ::perfetto::protos::BeginFrameSourceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BeginFrameSourceState >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CompositorTimingHistory*
Arena::CreateMaybeMessage< ::perfetto::protos::CompositorTimingHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CompositorTimingHistory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
