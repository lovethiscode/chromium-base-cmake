// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_latency_info.proto

#include "protos/perfetto/trace/track_event/chrome_latency_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_us_)*/uint64_t{0u}
  , /*decltype(_impl_.component_type_)*/0} {}
struct ChromeLatencyInfo_ComponentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeLatencyInfo_ComponentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeLatencyInfo_ComponentInfoDefaultTypeInternal() {}
  union {
    ChromeLatencyInfo_ComponentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeLatencyInfo_ComponentInfoDefaultTypeInternal _ChromeLatencyInfo_ComponentInfo_default_instance_;
PROTOBUF_CONSTEXPR ChromeLatencyInfo::ChromeLatencyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.component_info_)*/{}
  , /*decltype(_impl_.trace_id_)*/int64_t{0}
  , /*decltype(_impl_.step_)*/0
  , /*decltype(_impl_.frame_tree_node_id_)*/0
  , /*decltype(_impl_.gesture_scroll_id_)*/int64_t{0}
  , /*decltype(_impl_.touch_id_)*/int64_t{0}
  , /*decltype(_impl_.is_coalesced_)*/false} {}
struct ChromeLatencyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeLatencyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeLatencyInfoDefaultTypeInternal() {}
  union {
    ChromeLatencyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeLatencyInfoDefaultTypeInternal _ChromeLatencyInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ChromeLatencyInfo_Step_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeLatencyInfo_Step_strings[12] = {};

static const char ChromeLatencyInfo_Step_names[] =
  "STEP_DID_HANDLE_INPUT_AND_OVERSCROLL"
  "STEP_DRAW_AND_SWAP"
  "STEP_FINISHED_SWAP_BUFFERS"
  "STEP_HANDLED_INPUT_EVENT_IMPL"
  "STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL"
  "STEP_HANDLE_INPUT_EVENT_IMPL"
  "STEP_HANDLE_INPUT_EVENT_MAIN"
  "STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT"
  "STEP_MAIN_THREAD_SCROLL_UPDATE"
  "STEP_SEND_INPUT_EVENT_UI"
  "STEP_SWAP_BUFFERS"
  "STEP_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeLatencyInfo_Step_entries[] = {
  { {ChromeLatencyInfo_Step_names + 0, 36}, 8 },
  { {ChromeLatencyInfo_Step_names + 36, 18}, 7 },
  { {ChromeLatencyInfo_Step_names + 54, 26}, 11 },
  { {ChromeLatencyInfo_Step_names + 80, 29}, 10 },
  { {ChromeLatencyInfo_Step_names + 109, 37}, 9 },
  { {ChromeLatencyInfo_Step_names + 146, 28}, 5 },
  { {ChromeLatencyInfo_Step_names + 174, 28}, 4 },
  { {ChromeLatencyInfo_Step_names + 202, 35}, 1 },
  { {ChromeLatencyInfo_Step_names + 237, 30}, 2 },
  { {ChromeLatencyInfo_Step_names + 267, 24}, 3 },
  { {ChromeLatencyInfo_Step_names + 291, 17}, 6 },
  { {ChromeLatencyInfo_Step_names + 308, 16}, 0 },
};

static const int ChromeLatencyInfo_Step_entries_by_number[] = {
  11, // 0 -> STEP_UNSPECIFIED
  7, // 1 -> STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT
  8, // 2 -> STEP_MAIN_THREAD_SCROLL_UPDATE
  9, // 3 -> STEP_SEND_INPUT_EVENT_UI
  6, // 4 -> STEP_HANDLE_INPUT_EVENT_MAIN
  5, // 5 -> STEP_HANDLE_INPUT_EVENT_IMPL
  10, // 6 -> STEP_SWAP_BUFFERS
  1, // 7 -> STEP_DRAW_AND_SWAP
  0, // 8 -> STEP_DID_HANDLE_INPUT_AND_OVERSCROLL
  4, // 9 -> STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL
  3, // 10 -> STEP_HANDLED_INPUT_EVENT_IMPL
  2, // 11 -> STEP_FINISHED_SWAP_BUFFERS
};

const std::string& ChromeLatencyInfo_Step_Name(
    ChromeLatencyInfo_Step value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeLatencyInfo_Step_entries,
          ChromeLatencyInfo_Step_entries_by_number,
          12, ChromeLatencyInfo_Step_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeLatencyInfo_Step_entries,
      ChromeLatencyInfo_Step_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeLatencyInfo_Step_strings[idx].get();
}
bool ChromeLatencyInfo_Step_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeLatencyInfo_Step* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeLatencyInfo_Step_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<ChromeLatencyInfo_Step>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_UNSPECIFIED;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_SEND_INPUT_EVENT_UI;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_DID_HANDLE_INPUT_AND_OVERSCROLL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_MAIN;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_MAIN_THREAD_SCROLL_UPDATE;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLED_INPUT_EVENT_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_SWAP_BUFFERS;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_DRAW_AND_SWAP;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_FINISHED_SWAP_BUFFERS;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::Step_MIN;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::Step_MAX;
constexpr int ChromeLatencyInfo::Step_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChromeLatencyInfo_LatencyComponentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeLatencyInfo_LatencyComponentType_strings[15] = {};

static const char ChromeLatencyInfo_LatencyComponentType_names[] =
  "COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME"
  "COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER"
  "COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH"
  "COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH"
  "COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL"
  "COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP"
  "COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL"
  "COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN"
  "COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT"
  "COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL"
  "COMPONENT_INPUT_EVENT_LATENCY_UI"
  "COMPONENT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeLatencyInfo_LatencyComponentType_entries[] = {
  { {ChromeLatencyInfo_LatencyComponentType_names + 0, 43}, 12 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 43, 37}, 13 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 80, 37}, 10 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 117, 39}, 1 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 156, 58}, 3 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 214, 40}, 14 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 254, 38}, 4 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 292, 43}, 6 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 335, 43}, 11 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 378, 54}, 8 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 432, 54}, 7 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 486, 54}, 9 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 540, 52}, 2 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 592, 32}, 5 },
  { {ChromeLatencyInfo_LatencyComponentType_names + 624, 21}, 0 },
};

static const int ChromeLatencyInfo_LatencyComponentType_entries_by_number[] = {
  14, // 0 -> COMPONENT_UNSPECIFIED
  3, // 1 -> COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH
  12, // 2 -> COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL
  4, // 3 -> COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL
  6, // 4 -> COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL
  13, // 5 -> COMPONENT_INPUT_EVENT_LATENCY_UI
  7, // 6 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN
  10, // 7 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN
  9, // 8 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL
  11, // 9 -> COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT
  2, // 10 -> COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH
  8, // 11 -> COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP
  0, // 12 -> COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME
  1, // 13 -> COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER
  5, // 14 -> COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP
};

const std::string& ChromeLatencyInfo_LatencyComponentType_Name(
    ChromeLatencyInfo_LatencyComponentType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeLatencyInfo_LatencyComponentType_entries,
          ChromeLatencyInfo_LatencyComponentType_entries_by_number,
          15, ChromeLatencyInfo_LatencyComponentType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeLatencyInfo_LatencyComponentType_entries,
      ChromeLatencyInfo_LatencyComponentType_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeLatencyInfo_LatencyComponentType_strings[idx].get();
}
bool ChromeLatencyInfo_LatencyComponentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeLatencyInfo_LatencyComponentType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeLatencyInfo_LatencyComponentType_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<ChromeLatencyInfo_LatencyComponentType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_UNSPECIFIED;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_UI;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::LatencyComponentType_MIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::LatencyComponentType_MAX;
constexpr int ChromeLatencyInfo::LatencyComponentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeLatencyInfo_ComponentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeLatencyInfo_ComponentInfo>()._impl_._has_bits_);
  static void set_has_component_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
}
ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo(const ChromeLatencyInfo_ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeLatencyInfo_ComponentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_us_){}
    , decltype(_impl_.component_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.time_us_, &from._impl_.time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.component_type_) -
    reinterpret_cast<char*>(&_impl_.time_us_)) + sizeof(_impl_.component_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
}

inline void ChromeLatencyInfo_ComponentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_us_){uint64_t{0u}}
    , decltype(_impl_.component_type_){0}
  };
}

ChromeLatencyInfo_ComponentInfo::~ChromeLatencyInfo_ComponentInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeLatencyInfo_ComponentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeLatencyInfo_ComponentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeLatencyInfo_ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.component_type_) -
        reinterpret_cast<char*>(&_impl_.time_us_)) + sizeof(_impl_.component_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeLatencyInfo_ComponentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType_IsValid(val))) {
            _internal_set_component_type(static_cast<::perfetto::protos::ChromeLatencyInfo_LatencyComponentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 time_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_us(&has_bits);
          _impl_.time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeLatencyInfo_ComponentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_component_type(), target);
  }

  // optional uint64 time_us = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  return target;
}

size_t ChromeLatencyInfo_ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 time_us = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_us());
    }

    // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_component_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeLatencyInfo_ComponentInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeLatencyInfo_ComponentInfo*>(
      &from));
}

void ChromeLatencyInfo_ComponentInfo::MergeFrom(const ChromeLatencyInfo_ComponentInfo& from) {
  ChromeLatencyInfo_ComponentInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_us_ = from._impl_.time_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.component_type_ = from._impl_.component_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeLatencyInfo_ComponentInfo::CopyFrom(const ChromeLatencyInfo_ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeLatencyInfo_ComponentInfo::IsInitialized() const {
  return true;
}

void ChromeLatencyInfo_ComponentInfo::InternalSwap(ChromeLatencyInfo_ComponentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo_ComponentInfo, _impl_.component_type_)
      + sizeof(ChromeLatencyInfo_ComponentInfo::_impl_.component_type_)
      - PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo_ComponentInfo, _impl_.time_us_)>(
          reinterpret_cast<char*>(&_impl_.time_us_),
          reinterpret_cast<char*>(&other->_impl_.time_us_));
}

std::string ChromeLatencyInfo_ComponentInfo::GetTypeName() const {
  return "perfetto.protos.ChromeLatencyInfo.ComponentInfo";
}


// ===================================================================

class ChromeLatencyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeLatencyInfo>()._impl_._has_bits_);
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_tree_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_coalesced(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gesture_scroll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_touch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ChromeLatencyInfo::ChromeLatencyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeLatencyInfo)
}
ChromeLatencyInfo::ChromeLatencyInfo(const ChromeLatencyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeLatencyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_info_){from._impl_.component_info_}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.step_){}
    , decltype(_impl_.frame_tree_node_id_){}
    , decltype(_impl_.gesture_scroll_id_){}
    , decltype(_impl_.touch_id_){}
    , decltype(_impl_.is_coalesced_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.trace_id_, &from._impl_.trace_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_coalesced_) -
    reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.is_coalesced_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeLatencyInfo)
}

inline void ChromeLatencyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_info_){arena}
    , decltype(_impl_.trace_id_){int64_t{0}}
    , decltype(_impl_.step_){0}
    , decltype(_impl_.frame_tree_node_id_){0}
    , decltype(_impl_.gesture_scroll_id_){int64_t{0}}
    , decltype(_impl_.touch_id_){int64_t{0}}
    , decltype(_impl_.is_coalesced_){false}
  };
}

ChromeLatencyInfo::~ChromeLatencyInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeLatencyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeLatencyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.component_info_.~RepeatedPtrField();
}

void ChromeLatencyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeLatencyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeLatencyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.component_info_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_coalesced_) -
        reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.is_coalesced_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeLatencyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeLatencyInfo_Step_IsValid(val))) {
            _internal_set_step(static_cast<::perfetto::protos::ChromeLatencyInfo_Step>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 frame_tree_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_tree_node_id(&has_bits);
          _impl_.frame_tree_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_coalesced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_coalesced(&has_bits);
          _impl_.is_coalesced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 gesture_scroll_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_gesture_scroll_id(&has_bits);
          _impl_.gesture_scroll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 touch_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_touch_id(&has_bits);
          _impl_.touch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeLatencyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeLatencyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 trace_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_trace_id(), target);
  }

  // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_step(), target);
  }

  // optional int32 frame_tree_node_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_frame_tree_node_id(), target);
  }

  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_component_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_component_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_coalesced = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_coalesced(), target);
  }

  // optional int64 gesture_scroll_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_gesture_scroll_id(), target);
  }

  // optional int64 touch_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_touch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeLatencyInfo)
  return target;
}

size_t ChromeLatencyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeLatencyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  total_size += 1UL * this->_internal_component_info_size();
  for (const auto& msg : this->_impl_.component_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 trace_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_trace_id());
    }

    // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_step());
    }

    // optional int32 frame_tree_node_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame_tree_node_id());
    }

    // optional int64 gesture_scroll_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gesture_scroll_id());
    }

    // optional int64 touch_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_touch_id());
    }

    // optional bool is_coalesced = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeLatencyInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeLatencyInfo*>(
      &from));
}

void ChromeLatencyInfo::MergeFrom(const ChromeLatencyInfo& from) {
  ChromeLatencyInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeLatencyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.component_info_.MergeFrom(from._impl_.component_info_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.step_ = from._impl_.step_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frame_tree_node_id_ = from._impl_.frame_tree_node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gesture_scroll_id_ = from._impl_.gesture_scroll_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.touch_id_ = from._impl_.touch_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_coalesced_ = from._impl_.is_coalesced_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeLatencyInfo::CopyFrom(const ChromeLatencyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeLatencyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeLatencyInfo::IsInitialized() const {
  return true;
}

void ChromeLatencyInfo::InternalSwap(ChromeLatencyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.component_info_.InternalSwap(&other->_impl_.component_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo, _impl_.is_coalesced_)
      + sizeof(ChromeLatencyInfo::_impl_.is_coalesced_)
      - PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo, _impl_.trace_id_)>(
          reinterpret_cast<char*>(&_impl_.trace_id_),
          reinterpret_cast<char*>(&other->_impl_.trace_id_));
}

std::string ChromeLatencyInfo::GetTypeName() const {
  return "perfetto.protos.ChromeLatencyInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeLatencyInfo_ComponentInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeLatencyInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeLatencyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeLatencyInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
