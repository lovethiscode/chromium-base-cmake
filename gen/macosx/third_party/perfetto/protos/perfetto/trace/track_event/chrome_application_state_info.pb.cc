// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_application_state_info.proto

#include "protos/perfetto/trace/track_event/chrome_application_state_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ChromeApplicationStateInfo::ChromeApplicationStateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.application_state_)*/0} {}
struct ChromeApplicationStateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeApplicationStateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeApplicationStateInfoDefaultTypeInternal() {}
  union {
    ChromeApplicationStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeApplicationStateInfoDefaultTypeInternal _ChromeApplicationStateInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ChromeApplicationStateInfo_ChromeApplicationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeApplicationStateInfo_ChromeApplicationState_strings[5] = {};

static const char ChromeApplicationStateInfo_ChromeApplicationState_names[] =
  "APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES"
  "APPLICATION_STATE_HAS_PAUSED_ACTIVITIES"
  "APPLICATION_STATE_HAS_RUNNING_ACTIVITIES"
  "APPLICATION_STATE_HAS_STOPPED_ACTIVITIES"
  "APPLICATION_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeApplicationStateInfo_ChromeApplicationState_entries[] = {
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 0, 42}, 4 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 42, 39}, 2 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 81, 40}, 1 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 121, 40}, 3 },
  { {ChromeApplicationStateInfo_ChromeApplicationState_names + 161, 25}, 0 },
};

static const int ChromeApplicationStateInfo_ChromeApplicationState_entries_by_number[] = {
  4, // 0 -> APPLICATION_STATE_UNKNOWN
  2, // 1 -> APPLICATION_STATE_HAS_RUNNING_ACTIVITIES
  1, // 2 -> APPLICATION_STATE_HAS_PAUSED_ACTIVITIES
  3, // 3 -> APPLICATION_STATE_HAS_STOPPED_ACTIVITIES
  0, // 4 -> APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES
};

const std::string& ChromeApplicationStateInfo_ChromeApplicationState_Name(
    ChromeApplicationStateInfo_ChromeApplicationState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeApplicationStateInfo_ChromeApplicationState_entries,
          ChromeApplicationStateInfo_ChromeApplicationState_entries_by_number,
          5, ChromeApplicationStateInfo_ChromeApplicationState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeApplicationStateInfo_ChromeApplicationState_entries,
      ChromeApplicationStateInfo_ChromeApplicationState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeApplicationStateInfo_ChromeApplicationState_strings[idx].get();
}
bool ChromeApplicationStateInfo_ChromeApplicationState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeApplicationStateInfo_ChromeApplicationState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeApplicationStateInfo_ChromeApplicationState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ChromeApplicationStateInfo_ChromeApplicationState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_UNKNOWN;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_RUNNING_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_PAUSED_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_STOPPED_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::ChromeApplicationState_MIN;
constexpr ChromeApplicationStateInfo_ChromeApplicationState ChromeApplicationStateInfo::ChromeApplicationState_MAX;
constexpr int ChromeApplicationStateInfo::ChromeApplicationState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeApplicationStateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeApplicationStateInfo>()._impl_._has_bits_);
  static void set_has_application_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeApplicationStateInfo::ChromeApplicationStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeApplicationStateInfo)
}
ChromeApplicationStateInfo::ChromeApplicationStateInfo(const ChromeApplicationStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeApplicationStateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.application_state_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.application_state_ = from._impl_.application_state_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeApplicationStateInfo)
}

inline void ChromeApplicationStateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.application_state_){0}
  };
}

ChromeApplicationStateInfo::~ChromeApplicationStateInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeApplicationStateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeApplicationStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeApplicationStateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeApplicationStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeApplicationStateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.application_state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeApplicationStateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState_IsValid(val))) {
            _internal_set_application_state(static_cast<::perfetto::protos::ChromeApplicationStateInfo_ChromeApplicationState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeApplicationStateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeApplicationStateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_application_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeApplicationStateInfo)
  return target;
}

size_t ChromeApplicationStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeApplicationStateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState application_state = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_application_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeApplicationStateInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeApplicationStateInfo*>(
      &from));
}

void ChromeApplicationStateInfo::MergeFrom(const ChromeApplicationStateInfo& from) {
  ChromeApplicationStateInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeApplicationStateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_application_state()) {
    _this->_internal_set_application_state(from._internal_application_state());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeApplicationStateInfo::CopyFrom(const ChromeApplicationStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeApplicationStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeApplicationStateInfo::IsInitialized() const {
  return true;
}

void ChromeApplicationStateInfo::InternalSwap(ChromeApplicationStateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.application_state_, other->_impl_.application_state_);
}

std::string ChromeApplicationStateInfo::GetTypeName() const {
  return "perfetto.protos.ChromeApplicationStateInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeApplicationStateInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeApplicationStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeApplicationStateInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
