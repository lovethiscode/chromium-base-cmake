// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/clock_snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/common/builtin_clock.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ClockSnapshot;
struct ClockSnapshotDefaultTypeInternal;
extern ClockSnapshotDefaultTypeInternal _ClockSnapshot_default_instance_;
class ClockSnapshot_Clock;
struct ClockSnapshot_ClockDefaultTypeInternal;
extern ClockSnapshot_ClockDefaultTypeInternal _ClockSnapshot_Clock_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ClockSnapshot* Arena::CreateMaybeMessage<::perfetto::protos::ClockSnapshot>(Arena*);
template<> ::perfetto::protos::ClockSnapshot_Clock* Arena::CreateMaybeMessage<::perfetto::protos::ClockSnapshot_Clock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ClockSnapshot_Clock_BuiltinClocks : int {
  ClockSnapshot_Clock_BuiltinClocks_UNKNOWN = 0,
  ClockSnapshot_Clock_BuiltinClocks_REALTIME = 1,
  ClockSnapshot_Clock_BuiltinClocks_REALTIME_COARSE = 2,
  ClockSnapshot_Clock_BuiltinClocks_MONOTONIC = 3,
  ClockSnapshot_Clock_BuiltinClocks_MONOTONIC_COARSE = 4,
  ClockSnapshot_Clock_BuiltinClocks_MONOTONIC_RAW = 5,
  ClockSnapshot_Clock_BuiltinClocks_BOOTTIME = 6,
  ClockSnapshot_Clock_BuiltinClocks_BUILTIN_CLOCK_MAX_ID = 63
};
bool ClockSnapshot_Clock_BuiltinClocks_IsValid(int value);
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock_BuiltinClocks_BuiltinClocks_MIN = ClockSnapshot_Clock_BuiltinClocks_UNKNOWN;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock_BuiltinClocks_BuiltinClocks_MAX = ClockSnapshot_Clock_BuiltinClocks_BUILTIN_CLOCK_MAX_ID;
constexpr int ClockSnapshot_Clock_BuiltinClocks_BuiltinClocks_ARRAYSIZE = ClockSnapshot_Clock_BuiltinClocks_BuiltinClocks_MAX + 1;

const std::string& ClockSnapshot_Clock_BuiltinClocks_Name(ClockSnapshot_Clock_BuiltinClocks value);
template<typename T>
inline const std::string& ClockSnapshot_Clock_BuiltinClocks_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClockSnapshot_Clock_BuiltinClocks>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClockSnapshot_Clock_BuiltinClocks_Name.");
  return ClockSnapshot_Clock_BuiltinClocks_Name(static_cast<ClockSnapshot_Clock_BuiltinClocks>(enum_t_value));
}
bool ClockSnapshot_Clock_BuiltinClocks_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClockSnapshot_Clock_BuiltinClocks* value);
// ===================================================================

class ClockSnapshot_Clock final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockSnapshot.Clock) */ {
 public:
  inline ClockSnapshot_Clock() : ClockSnapshot_Clock(nullptr) {}
  ~ClockSnapshot_Clock() override;
  explicit PROTOBUF_CONSTEXPR ClockSnapshot_Clock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClockSnapshot_Clock(const ClockSnapshot_Clock& from);
  ClockSnapshot_Clock(ClockSnapshot_Clock&& from) noexcept
    : ClockSnapshot_Clock() {
    *this = ::std::move(from);
  }

  inline ClockSnapshot_Clock& operator=(const ClockSnapshot_Clock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockSnapshot_Clock& operator=(ClockSnapshot_Clock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClockSnapshot_Clock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClockSnapshot_Clock* internal_default_instance() {
    return reinterpret_cast<const ClockSnapshot_Clock*>(
               &_ClockSnapshot_Clock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClockSnapshot_Clock& a, ClockSnapshot_Clock& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClockSnapshot_Clock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClockSnapshot_Clock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClockSnapshot_Clock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClockSnapshot_Clock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClockSnapshot_Clock& from);
  void MergeFrom(const ClockSnapshot_Clock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClockSnapshot_Clock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ClockSnapshot.Clock";
  }
  protected:
  explicit ClockSnapshot_Clock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClockSnapshot_Clock_BuiltinClocks BuiltinClocks;
  static constexpr BuiltinClocks UNKNOWN =
    ClockSnapshot_Clock_BuiltinClocks_UNKNOWN;
  static constexpr BuiltinClocks REALTIME =
    ClockSnapshot_Clock_BuiltinClocks_REALTIME;
  static constexpr BuiltinClocks REALTIME_COARSE =
    ClockSnapshot_Clock_BuiltinClocks_REALTIME_COARSE;
  static constexpr BuiltinClocks MONOTONIC =
    ClockSnapshot_Clock_BuiltinClocks_MONOTONIC;
  static constexpr BuiltinClocks MONOTONIC_COARSE =
    ClockSnapshot_Clock_BuiltinClocks_MONOTONIC_COARSE;
  static constexpr BuiltinClocks MONOTONIC_RAW =
    ClockSnapshot_Clock_BuiltinClocks_MONOTONIC_RAW;
  static constexpr BuiltinClocks BOOTTIME =
    ClockSnapshot_Clock_BuiltinClocks_BOOTTIME;
  static constexpr BuiltinClocks BUILTIN_CLOCK_MAX_ID =
    ClockSnapshot_Clock_BuiltinClocks_BUILTIN_CLOCK_MAX_ID;
  static inline bool BuiltinClocks_IsValid(int value) {
    return ClockSnapshot_Clock_BuiltinClocks_IsValid(value);
  }
  static constexpr BuiltinClocks BuiltinClocks_MIN =
    ClockSnapshot_Clock_BuiltinClocks_BuiltinClocks_MIN;
  static constexpr BuiltinClocks BuiltinClocks_MAX =
    ClockSnapshot_Clock_BuiltinClocks_BuiltinClocks_MAX;
  static constexpr int BuiltinClocks_ARRAYSIZE =
    ClockSnapshot_Clock_BuiltinClocks_BuiltinClocks_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BuiltinClocks_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BuiltinClocks>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BuiltinClocks_Name.");
    return ClockSnapshot_Clock_BuiltinClocks_Name(enum_t_value);
  }
  static inline bool BuiltinClocks_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BuiltinClocks* value) {
    return ClockSnapshot_Clock_BuiltinClocks_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kClockIdFieldNumber = 1,
    kIsIncrementalFieldNumber = 3,
    kUnitMultiplierNsFieldNumber = 4,
  };
  // optional uint64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint32 clock_id = 1;
  bool has_clock_id() const;
  private:
  bool _internal_has_clock_id() const;
  public:
  void clear_clock_id();
  uint32_t clock_id() const;
  void set_clock_id(uint32_t value);
  private:
  uint32_t _internal_clock_id() const;
  void _internal_set_clock_id(uint32_t value);
  public:

  // optional bool is_incremental = 3;
  bool has_is_incremental() const;
  private:
  bool _internal_has_is_incremental() const;
  public:
  void clear_is_incremental();
  bool is_incremental() const;
  void set_is_incremental(bool value);
  private:
  bool _internal_is_incremental() const;
  void _internal_set_is_incremental(bool value);
  public:

  // optional uint64 unit_multiplier_ns = 4;
  bool has_unit_multiplier_ns() const;
  private:
  bool _internal_has_unit_multiplier_ns() const;
  public:
  void clear_unit_multiplier_ns();
  uint64_t unit_multiplier_ns() const;
  void set_unit_multiplier_ns(uint64_t value);
  private:
  uint64_t _internal_unit_multiplier_ns() const;
  void _internal_set_unit_multiplier_ns(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSnapshot.Clock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t timestamp_;
    uint32_t clock_id_;
    bool is_incremental_;
    uint64_t unit_multiplier_ns_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ClockSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockSnapshot) */ {
 public:
  inline ClockSnapshot() : ClockSnapshot(nullptr) {}
  ~ClockSnapshot() override;
  explicit PROTOBUF_CONSTEXPR ClockSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClockSnapshot(const ClockSnapshot& from);
  ClockSnapshot(ClockSnapshot&& from) noexcept
    : ClockSnapshot() {
    *this = ::std::move(from);
  }

  inline ClockSnapshot& operator=(const ClockSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockSnapshot& operator=(ClockSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClockSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClockSnapshot* internal_default_instance() {
    return reinterpret_cast<const ClockSnapshot*>(
               &_ClockSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClockSnapshot& a, ClockSnapshot& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClockSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClockSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClockSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClockSnapshot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClockSnapshot& from);
  void MergeFrom(const ClockSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClockSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ClockSnapshot";
  }
  protected:
  explicit ClockSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClockSnapshot_Clock Clock;

  // accessors -------------------------------------------------------

  enum : int {
    kClocksFieldNumber = 1,
    kPrimaryTraceClockFieldNumber = 2,
  };
  // repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;
  int clocks_size() const;
  private:
  int _internal_clocks_size() const;
  public:
  void clear_clocks();
  ::perfetto::protos::ClockSnapshot_Clock* mutable_clocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >*
      mutable_clocks();
  private:
  const ::perfetto::protos::ClockSnapshot_Clock& _internal_clocks(int index) const;
  ::perfetto::protos::ClockSnapshot_Clock* _internal_add_clocks();
  public:
  const ::perfetto::protos::ClockSnapshot_Clock& clocks(int index) const;
  ::perfetto::protos::ClockSnapshot_Clock* add_clocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >&
      clocks() const;

  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;
  bool has_primary_trace_clock() const;
  private:
  bool _internal_has_primary_trace_clock() const;
  public:
  void clear_primary_trace_clock();
  ::perfetto::protos::BuiltinClock primary_trace_clock() const;
  void set_primary_trace_clock(::perfetto::protos::BuiltinClock value);
  private:
  ::perfetto::protos::BuiltinClock _internal_primary_trace_clock() const;
  void _internal_set_primary_trace_clock(::perfetto::protos::BuiltinClock value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock > clocks_;
    int primary_trace_clock_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClockSnapshot_Clock

// optional uint32 clock_id = 1;
inline bool ClockSnapshot_Clock::_internal_has_clock_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClockSnapshot_Clock::has_clock_id() const {
  return _internal_has_clock_id();
}
inline void ClockSnapshot_Clock::clear_clock_id() {
  _impl_.clock_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ClockSnapshot_Clock::_internal_clock_id() const {
  return _impl_.clock_id_;
}
inline uint32_t ClockSnapshot_Clock::clock_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.Clock.clock_id)
  return _internal_clock_id();
}
inline void ClockSnapshot_Clock::_internal_set_clock_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clock_id_ = value;
}
inline void ClockSnapshot_Clock::set_clock_id(uint32_t value) {
  _internal_set_clock_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSnapshot.Clock.clock_id)
}

// optional uint64 timestamp = 2;
inline bool ClockSnapshot_Clock::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClockSnapshot_Clock::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ClockSnapshot_Clock::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ClockSnapshot_Clock::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t ClockSnapshot_Clock::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.Clock.timestamp)
  return _internal_timestamp();
}
inline void ClockSnapshot_Clock::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void ClockSnapshot_Clock::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSnapshot.Clock.timestamp)
}

// optional bool is_incremental = 3;
inline bool ClockSnapshot_Clock::_internal_has_is_incremental() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClockSnapshot_Clock::has_is_incremental() const {
  return _internal_has_is_incremental();
}
inline void ClockSnapshot_Clock::clear_is_incremental() {
  _impl_.is_incremental_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ClockSnapshot_Clock::_internal_is_incremental() const {
  return _impl_.is_incremental_;
}
inline bool ClockSnapshot_Clock::is_incremental() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.Clock.is_incremental)
  return _internal_is_incremental();
}
inline void ClockSnapshot_Clock::_internal_set_is_incremental(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_incremental_ = value;
}
inline void ClockSnapshot_Clock::set_is_incremental(bool value) {
  _internal_set_is_incremental(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSnapshot.Clock.is_incremental)
}

// optional uint64 unit_multiplier_ns = 4;
inline bool ClockSnapshot_Clock::_internal_has_unit_multiplier_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClockSnapshot_Clock::has_unit_multiplier_ns() const {
  return _internal_has_unit_multiplier_ns();
}
inline void ClockSnapshot_Clock::clear_unit_multiplier_ns() {
  _impl_.unit_multiplier_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ClockSnapshot_Clock::_internal_unit_multiplier_ns() const {
  return _impl_.unit_multiplier_ns_;
}
inline uint64_t ClockSnapshot_Clock::unit_multiplier_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.Clock.unit_multiplier_ns)
  return _internal_unit_multiplier_ns();
}
inline void ClockSnapshot_Clock::_internal_set_unit_multiplier_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unit_multiplier_ns_ = value;
}
inline void ClockSnapshot_Clock::set_unit_multiplier_ns(uint64_t value) {
  _internal_set_unit_multiplier_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSnapshot.Clock.unit_multiplier_ns)
}

// -------------------------------------------------------------------

// ClockSnapshot

// repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;
inline int ClockSnapshot::_internal_clocks_size() const {
  return _impl_.clocks_.size();
}
inline int ClockSnapshot::clocks_size() const {
  return _internal_clocks_size();
}
inline void ClockSnapshot::clear_clocks() {
  _impl_.clocks_.Clear();
}
inline ::perfetto::protos::ClockSnapshot_Clock* ClockSnapshot::mutable_clocks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockSnapshot.clocks)
  return _impl_.clocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >*
ClockSnapshot::mutable_clocks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ClockSnapshot.clocks)
  return &_impl_.clocks_;
}
inline const ::perfetto::protos::ClockSnapshot_Clock& ClockSnapshot::_internal_clocks(int index) const {
  return _impl_.clocks_.Get(index);
}
inline const ::perfetto::protos::ClockSnapshot_Clock& ClockSnapshot::clocks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.clocks)
  return _internal_clocks(index);
}
inline ::perfetto::protos::ClockSnapshot_Clock* ClockSnapshot::_internal_add_clocks() {
  return _impl_.clocks_.Add();
}
inline ::perfetto::protos::ClockSnapshot_Clock* ClockSnapshot::add_clocks() {
  ::perfetto::protos::ClockSnapshot_Clock* _add = _internal_add_clocks();
  // @@protoc_insertion_point(field_add:perfetto.protos.ClockSnapshot.clocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >&
ClockSnapshot::clocks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ClockSnapshot.clocks)
  return _impl_.clocks_;
}

// optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;
inline bool ClockSnapshot::_internal_has_primary_trace_clock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClockSnapshot::has_primary_trace_clock() const {
  return _internal_has_primary_trace_clock();
}
inline void ClockSnapshot::clear_primary_trace_clock() {
  _impl_.primary_trace_clock_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::BuiltinClock ClockSnapshot::_internal_primary_trace_clock() const {
  return static_cast< ::perfetto::protos::BuiltinClock >(_impl_.primary_trace_clock_);
}
inline ::perfetto::protos::BuiltinClock ClockSnapshot::primary_trace_clock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.primary_trace_clock)
  return _internal_primary_trace_clock();
}
inline void ClockSnapshot::_internal_set_primary_trace_clock(::perfetto::protos::BuiltinClock value) {
  assert(::perfetto::protos::BuiltinClock_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.primary_trace_clock_ = value;
}
inline void ClockSnapshot::set_primary_trace_clock(::perfetto::protos::BuiltinClock value) {
  _internal_set_primary_trace_clock(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSnapshot.primary_trace_clock)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ClockSnapshot_Clock_BuiltinClocks> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto
