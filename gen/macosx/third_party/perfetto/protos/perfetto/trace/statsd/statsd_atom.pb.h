// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/statsd/statsd_atom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class Atom;
struct AtomDefaultTypeInternal;
extern AtomDefaultTypeInternal _Atom_default_instance_;
class StatsdAtom;
struct StatsdAtomDefaultTypeInternal;
extern StatsdAtomDefaultTypeInternal _StatsdAtom_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::Atom* Arena::CreateMaybeMessage<::perfetto::protos::Atom>(Arena*);
template<> ::perfetto::protos::StatsdAtom* Arena::CreateMaybeMessage<::perfetto::protos::StatsdAtom>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class Atom final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Atom) */ {
 public:
  inline Atom() : Atom(nullptr) {}
  ~Atom() override;
  explicit PROTOBUF_CONSTEXPR Atom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Atom(const Atom& from);
  Atom(Atom&& from) noexcept
    : Atom() {
    *this = ::std::move(from);
  }

  inline Atom& operator=(const Atom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Atom& operator=(Atom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Atom& default_instance() {
    return *internal_default_instance();
  }
  static inline const Atom* internal_default_instance() {
    return reinterpret_cast<const Atom*>(
               &_Atom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Atom& a, Atom& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Atom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Atom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Atom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Atom>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Atom& from);
  void MergeFrom(const Atom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Atom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Atom";
  }
  protected:
  explicit Atom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfetto.protos.Atom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto;
};
// -------------------------------------------------------------------

class StatsdAtom final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StatsdAtom) */ {
 public:
  inline StatsdAtom() : StatsdAtom(nullptr) {}
  ~StatsdAtom() override;
  explicit PROTOBUF_CONSTEXPR StatsdAtom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsdAtom(const StatsdAtom& from);
  StatsdAtom(StatsdAtom&& from) noexcept
    : StatsdAtom() {
    *this = ::std::move(from);
  }

  inline StatsdAtom& operator=(const StatsdAtom& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsdAtom& operator=(StatsdAtom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StatsdAtom& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsdAtom* internal_default_instance() {
    return reinterpret_cast<const StatsdAtom*>(
               &_StatsdAtom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatsdAtom& a, StatsdAtom& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StatsdAtom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsdAtom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsdAtom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsdAtom>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StatsdAtom& from);
  void MergeFrom(const StatsdAtom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatsdAtom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StatsdAtom";
  }
  protected:
  explicit StatsdAtom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomFieldNumber = 1,
    kTimestampNanosFieldNumber = 2,
  };
  // repeated .perfetto.protos.Atom atom = 1;
  int atom_size() const;
  private:
  int _internal_atom_size() const;
  public:
  void clear_atom();
  ::perfetto::protos::Atom* mutable_atom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Atom >*
      mutable_atom();
  private:
  const ::perfetto::protos::Atom& _internal_atom(int index) const;
  ::perfetto::protos::Atom* _internal_add_atom();
  public:
  const ::perfetto::protos::Atom& atom(int index) const;
  ::perfetto::protos::Atom* add_atom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Atom >&
      atom() const;

  // repeated int64 timestamp_nanos = 2;
  int timestamp_nanos_size() const;
  private:
  int _internal_timestamp_nanos_size() const;
  public:
  void clear_timestamp_nanos();
  private:
  int64_t _internal_timestamp_nanos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_timestamp_nanos() const;
  void _internal_add_timestamp_nanos(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_timestamp_nanos();
  public:
  int64_t timestamp_nanos(int index) const;
  void set_timestamp_nanos(int index, int64_t value);
  void add_timestamp_nanos(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      timestamp_nanos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_timestamp_nanos();

  // @@protoc_insertion_point(class_scope:perfetto.protos.StatsdAtom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Atom > atom_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > timestamp_nanos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Atom

// -------------------------------------------------------------------

// StatsdAtom

// repeated .perfetto.protos.Atom atom = 1;
inline int StatsdAtom::_internal_atom_size() const {
  return _impl_.atom_.size();
}
inline int StatsdAtom::atom_size() const {
  return _internal_atom_size();
}
inline void StatsdAtom::clear_atom() {
  _impl_.atom_.Clear();
}
inline ::perfetto::protos::Atom* StatsdAtom::mutable_atom(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.StatsdAtom.atom)
  return _impl_.atom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Atom >*
StatsdAtom::mutable_atom() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StatsdAtom.atom)
  return &_impl_.atom_;
}
inline const ::perfetto::protos::Atom& StatsdAtom::_internal_atom(int index) const {
  return _impl_.atom_.Get(index);
}
inline const ::perfetto::protos::Atom& StatsdAtom::atom(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StatsdAtom.atom)
  return _internal_atom(index);
}
inline ::perfetto::protos::Atom* StatsdAtom::_internal_add_atom() {
  return _impl_.atom_.Add();
}
inline ::perfetto::protos::Atom* StatsdAtom::add_atom() {
  ::perfetto::protos::Atom* _add = _internal_add_atom();
  // @@protoc_insertion_point(field_add:perfetto.protos.StatsdAtom.atom)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Atom >&
StatsdAtom::atom() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StatsdAtom.atom)
  return _impl_.atom_;
}

// repeated int64 timestamp_nanos = 2;
inline int StatsdAtom::_internal_timestamp_nanos_size() const {
  return _impl_.timestamp_nanos_.size();
}
inline int StatsdAtom::timestamp_nanos_size() const {
  return _internal_timestamp_nanos_size();
}
inline void StatsdAtom::clear_timestamp_nanos() {
  _impl_.timestamp_nanos_.Clear();
}
inline int64_t StatsdAtom::_internal_timestamp_nanos(int index) const {
  return _impl_.timestamp_nanos_.Get(index);
}
inline int64_t StatsdAtom::timestamp_nanos(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StatsdAtom.timestamp_nanos)
  return _internal_timestamp_nanos(index);
}
inline void StatsdAtom::set_timestamp_nanos(int index, int64_t value) {
  _impl_.timestamp_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StatsdAtom.timestamp_nanos)
}
inline void StatsdAtom::_internal_add_timestamp_nanos(int64_t value) {
  _impl_.timestamp_nanos_.Add(value);
}
inline void StatsdAtom::add_timestamp_nanos(int64_t value) {
  _internal_add_timestamp_nanos(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StatsdAtom.timestamp_nanos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
StatsdAtom::_internal_timestamp_nanos() const {
  return _impl_.timestamp_nanos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
StatsdAtom::timestamp_nanos() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StatsdAtom.timestamp_nanos)
  return _internal_timestamp_nanos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
StatsdAtom::_internal_mutable_timestamp_nanos() {
  return &_impl_.timestamp_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
StatsdAtom::mutable_timestamp_nanos() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StatsdAtom.timestamp_nanos)
  return _internal_mutable_timestamp_nanos();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto
