// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_CHROME_CHROME_TRIGGER_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_CHROME_CHROME_TRIGGER_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ChromeTrigger;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT ChromeTrigger : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTriggerNameFieldNumber = 1,
    kTriggerNameHashFieldNumber = 2,
  };

  ChromeTrigger();
  ~ChromeTrigger() override;
  ChromeTrigger(ChromeTrigger&&) noexcept;
  ChromeTrigger& operator=(ChromeTrigger&&);
  ChromeTrigger(const ChromeTrigger&);
  ChromeTrigger& operator=(const ChromeTrigger&);
  bool operator==(const ChromeTrigger&) const;
  bool operator!=(const ChromeTrigger& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_trigger_name() const { return _has_field_[1]; }
  const std::string& trigger_name() const { return trigger_name_; }
  void set_trigger_name(const std::string& value) { trigger_name_ = value; _has_field_.set(1); }

  bool has_trigger_name_hash() const { return _has_field_[2]; }
  uint32_t trigger_name_hash() const { return trigger_name_hash_; }
  void set_trigger_name_hash(uint32_t value) { trigger_name_hash_ = value; _has_field_.set(2); }

 private:
  std::string trigger_name_{};
  uint32_t trigger_name_hash_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_CHROME_CHROME_TRIGGER_PROTO_CPP_H_
