// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_metadata.proto

#include "protos/perfetto/trace/chrome/chrome_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ChromeMetadataPacket_FinchHash::ChromeMetadataPacket_FinchHash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/0u
  , /*decltype(_impl_.group_)*/0u} {}
struct ChromeMetadataPacket_FinchHashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeMetadataPacket_FinchHashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeMetadataPacket_FinchHashDefaultTypeInternal() {}
  union {
    ChromeMetadataPacket_FinchHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeMetadataPacket_FinchHashDefaultTypeInternal _ChromeMetadataPacket_FinchHash_default_instance_;
PROTOBUF_CONSTEXPR ChromeMetadataPacket::ChromeMetadataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_trial_hashes_)*/{}
  , /*decltype(_impl_.enabled_categories_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.background_tracing_metadata_)*/nullptr
  , /*decltype(_impl_.chrome_version_code_)*/0} {}
struct ChromeMetadataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeMetadataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeMetadataPacketDefaultTypeInternal() {}
  union {
    ChromeMetadataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeMetadataPacketDefaultTypeInternal _ChromeMetadataPacket_default_instance_;
PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.histogram_name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.histogram_min_trigger_)*/int64_t{0}
  , /*decltype(_impl_.histogram_max_trigger_)*/int64_t{0}} {}
struct BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata_TriggerRule_HistogramRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_;
PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_trigger_name_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.event_type_)*/0} {}
struct BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata_TriggerRule_NamedRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_;
PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.histogram_rule_)*/nullptr
  , /*decltype(_impl_.named_rule_)*/nullptr
  , /*decltype(_impl_.trigger_type_)*/0
  , /*decltype(_impl_.name_hash_)*/0u} {}
struct BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata_TriggerRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_default_instance_;
PROTOBUF_CONSTEXPR BackgroundTracingMetadata::BackgroundTracingMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_rules_)*/{}
  , /*decltype(_impl_.triggered_rule_)*/nullptr
  , /*decltype(_impl_.scenario_name_hash_)*/0u} {}
struct BackgroundTracingMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadataDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadataDefaultTypeInternal _BackgroundTracingMetadata_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 1000:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_strings[7] = {};

static const char BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names[] =
  "CONTENT_TRIGGER"
  "NAVIGATION"
  "REACHED_CODE"
  "SESSION_RESTORE"
  "STARTUP"
  "TEST_RULE"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries[] = {
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 0, 15}, 5 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 15, 10}, 2 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 25, 12}, 4 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 37, 15}, 1 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 52, 7}, 3 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 59, 9}, 1000 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 68, 11}, 0 },
};

static const int BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries_by_number[] = {
  6, // 0 -> UNSPECIFIED
  3, // 1 -> SESSION_RESTORE
  1, // 2 -> NAVIGATION
  4, // 3 -> STARTUP
  2, // 4 -> REACHED_CODE
  0, // 5 -> CONTENT_TRIGGER
  5, // 1000 -> TEST_RULE
};

const std::string& BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries,
          BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries_by_number,
          7, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries,
      BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_strings[idx].get();
}
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::SESSION_RESTORE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::NAVIGATION;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::STARTUP;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::REACHED_CODE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::CONTENT_TRIGGER;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::TEST_RULE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_MIN;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_MAX;
constexpr int BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundTracingMetadata_TriggerRule_TriggerType_strings[3] = {};

static const char BackgroundTracingMetadata_TriggerRule_TriggerType_names[] =
  "MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE"
  "MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED"
  "TRIGGER_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundTracingMetadata_TriggerRule_TriggerType_entries[] = {
  { {BackgroundTracingMetadata_TriggerRule_TriggerType_names + 0, 50}, 1 },
  { {BackgroundTracingMetadata_TriggerRule_TriggerType_names + 50, 35}, 2 },
  { {BackgroundTracingMetadata_TriggerRule_TriggerType_names + 85, 19}, 0 },
};

static const int BackgroundTracingMetadata_TriggerRule_TriggerType_entries_by_number[] = {
  2, // 0 -> TRIGGER_UNSPECIFIED
  0, // 1 -> MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE
  1, // 2 -> MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED
};

const std::string& BackgroundTracingMetadata_TriggerRule_TriggerType_Name(
    BackgroundTracingMetadata_TriggerRule_TriggerType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundTracingMetadata_TriggerRule_TriggerType_entries,
          BackgroundTracingMetadata_TriggerRule_TriggerType_entries_by_number,
          3, BackgroundTracingMetadata_TriggerRule_TriggerType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundTracingMetadata_TriggerRule_TriggerType_entries,
      BackgroundTracingMetadata_TriggerRule_TriggerType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundTracingMetadata_TriggerRule_TriggerType_strings[idx].get();
}
bool BackgroundTracingMetadata_TriggerRule_TriggerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundTracingMetadata_TriggerRule_TriggerType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundTracingMetadata_TriggerRule_TriggerType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundTracingMetadata_TriggerRule_TriggerType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TRIGGER_UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TriggerType_MIN;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TriggerType_MAX;
constexpr int BackgroundTracingMetadata_TriggerRule::TriggerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeMetadataPacket_FinchHash::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeMetadataPacket_FinchHash>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeMetadataPacket_FinchHash::ChromeMetadataPacket_FinchHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeMetadataPacket.FinchHash)
}
ChromeMetadataPacket_FinchHash::ChromeMetadataPacket_FinchHash(const ChromeMetadataPacket_FinchHash& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeMetadataPacket_FinchHash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.group_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.name_, &from._impl_.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_) -
    reinterpret_cast<char*>(&_impl_.name_)) + sizeof(_impl_.group_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeMetadataPacket.FinchHash)
}

inline void ChromeMetadataPacket_FinchHash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){0u}
    , decltype(_impl_.group_){0u}
  };
}

ChromeMetadataPacket_FinchHash::~ChromeMetadataPacket_FinchHash() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeMetadataPacket.FinchHash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeMetadataPacket_FinchHash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeMetadataPacket_FinchHash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeMetadataPacket_FinchHash::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeMetadataPacket.FinchHash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_) -
        reinterpret_cast<char*>(&_impl_.name_)) + sizeof(_impl_.group_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeMetadataPacket_FinchHash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_name(&has_bits);
          _impl_.name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group(&has_bits);
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeMetadataPacket_FinchHash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeMetadataPacket.FinchHash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_name(), target);
  }

  // optional uint32 group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeMetadataPacket.FinchHash)
  return target;
}

size_t ChromeMetadataPacket_FinchHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeMetadataPacket.FinchHash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_name());
    }

    // optional uint32 group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeMetadataPacket_FinchHash::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeMetadataPacket_FinchHash*>(
      &from));
}

void ChromeMetadataPacket_FinchHash::MergeFrom(const ChromeMetadataPacket_FinchHash& from) {
  ChromeMetadataPacket_FinchHash* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeMetadataPacket.FinchHash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.name_ = from._impl_.name_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_ = from._impl_.group_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeMetadataPacket_FinchHash::CopyFrom(const ChromeMetadataPacket_FinchHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeMetadataPacket.FinchHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeMetadataPacket_FinchHash::IsInitialized() const {
  return true;
}

void ChromeMetadataPacket_FinchHash::InternalSwap(ChromeMetadataPacket_FinchHash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket_FinchHash, _impl_.group_)
      + sizeof(ChromeMetadataPacket_FinchHash::_impl_.group_)
      - PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket_FinchHash, _impl_.name_)>(
          reinterpret_cast<char*>(&_impl_.name_),
          reinterpret_cast<char*>(&other->_impl_.name_));
}

std::string ChromeMetadataPacket_FinchHash::GetTypeName() const {
  return "perfetto.protos.ChromeMetadataPacket.FinchHash";
}


// ===================================================================

class ChromeMetadataPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeMetadataPacket>()._impl_._has_bits_);
  static const ::perfetto::protos::BackgroundTracingMetadata& background_tracing_metadata(const ChromeMetadataPacket* msg);
  static void set_has_background_tracing_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chrome_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enabled_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata&
ChromeMetadataPacket::_Internal::background_tracing_metadata(const ChromeMetadataPacket* msg) {
  return *msg->_impl_.background_tracing_metadata_;
}
ChromeMetadataPacket::ChromeMetadataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeMetadataPacket)
}
ChromeMetadataPacket::ChromeMetadataPacket(const ChromeMetadataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeMetadataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_trial_hashes_){from._impl_.field_trial_hashes_}
    , decltype(_impl_.enabled_categories_){}
    , decltype(_impl_.background_tracing_metadata_){nullptr}
    , decltype(_impl_.chrome_version_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.enabled_categories_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enabled_categories_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_enabled_categories()) {
    _this->_impl_.enabled_categories_.Set(from._internal_enabled_categories(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_background_tracing_metadata()) {
    _this->_impl_.background_tracing_metadata_ = new ::perfetto::protos::BackgroundTracingMetadata(*from._impl_.background_tracing_metadata_);
  }
  _this->_impl_.chrome_version_code_ = from._impl_.chrome_version_code_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeMetadataPacket)
}

inline void ChromeMetadataPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_trial_hashes_){arena}
    , decltype(_impl_.enabled_categories_){}
    , decltype(_impl_.background_tracing_metadata_){nullptr}
    , decltype(_impl_.chrome_version_code_){0}
  };
  _impl_.enabled_categories_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enabled_categories_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeMetadataPacket::~ChromeMetadataPacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeMetadataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeMetadataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_trial_hashes_.~RepeatedPtrField();
  _impl_.enabled_categories_.Destroy();
  if (this != internal_default_instance()) delete _impl_.background_tracing_metadata_;
}

void ChromeMetadataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeMetadataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeMetadataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_trial_hashes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enabled_categories_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.background_tracing_metadata_ != nullptr);
      _impl_.background_tracing_metadata_->Clear();
    }
  }
  _impl_.chrome_version_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeMetadataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_tracing_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chrome_version_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chrome_version_code(&has_bits);
          _impl_.chrome_version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string enabled_categories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_enabled_categories();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ChromeMetadataPacket.FinchHash field_trial_hashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_trial_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeMetadataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeMetadataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::background_tracing_metadata(this),
        _Internal::background_tracing_metadata(this).GetCachedSize(), target, stream);
  }

  // optional int32 chrome_version_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_chrome_version_code(), target);
  }

  // optional string enabled_categories = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enabled_categories(), target);
  }

  // repeated .perfetto.protos.ChromeMetadataPacket.FinchHash field_trial_hashes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_trial_hashes_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_trial_hashes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeMetadataPacket)
  return target;
}

size_t ChromeMetadataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeMetadataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeMetadataPacket.FinchHash field_trial_hashes = 4;
  total_size += 1UL * this->_internal_field_trial_hashes_size();
  for (const auto& msg : this->_impl_.field_trial_hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string enabled_categories = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enabled_categories());
    }

    // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_tracing_metadata_);
    }

    // optional int32 chrome_version_code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chrome_version_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeMetadataPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeMetadataPacket*>(
      &from));
}

void ChromeMetadataPacket::MergeFrom(const ChromeMetadataPacket& from) {
  ChromeMetadataPacket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeMetadataPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_trial_hashes_.MergeFrom(from._impl_.field_trial_hashes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_enabled_categories(from._internal_enabled_categories());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_background_tracing_metadata()->::perfetto::protos::BackgroundTracingMetadata::MergeFrom(
          from._internal_background_tracing_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chrome_version_code_ = from._impl_.chrome_version_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeMetadataPacket::CopyFrom(const ChromeMetadataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeMetadataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeMetadataPacket::IsInitialized() const {
  return true;
}

void ChromeMetadataPacket::InternalSwap(ChromeMetadataPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.field_trial_hashes_.InternalSwap(&other->_impl_.field_trial_hashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enabled_categories_, lhs_arena,
      &other->_impl_.enabled_categories_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket, _impl_.chrome_version_code_)
      + sizeof(ChromeMetadataPacket::_impl_.chrome_version_code_)
      - PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket, _impl_.background_tracing_metadata_)>(
          reinterpret_cast<char*>(&_impl_.background_tracing_metadata_),
          reinterpret_cast<char*>(&other->_impl_.background_tracing_metadata_));
}

std::string ChromeMetadataPacket::GetTypeName() const {
  return "perfetto.protos.ChromeMetadataPacket";
}


// ===================================================================

class BackgroundTracingMetadata_TriggerRule_HistogramRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule_HistogramRule>()._impl_._has_bits_);
  static void set_has_histogram_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_histogram_min_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_histogram_max_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
}
BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BackgroundTracingMetadata_TriggerRule_HistogramRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.histogram_name_hash_){}
    , decltype(_impl_.histogram_min_trigger_){}
    , decltype(_impl_.histogram_max_trigger_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.histogram_name_hash_, &from._impl_.histogram_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.histogram_max_trigger_) -
    reinterpret_cast<char*>(&_impl_.histogram_name_hash_)) + sizeof(_impl_.histogram_max_trigger_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
}

inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.histogram_name_hash_){uint64_t{0u}}
    , decltype(_impl_.histogram_min_trigger_){int64_t{0}}
    , decltype(_impl_.histogram_max_trigger_){int64_t{0}}
  };
}

BackgroundTracingMetadata_TriggerRule_HistogramRule::~BackgroundTracingMetadata_TriggerRule_HistogramRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.histogram_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.histogram_max_trigger_) -
        reinterpret_cast<char*>(&_impl_.histogram_name_hash_)) + sizeof(_impl_.histogram_max_trigger_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata_TriggerRule_HistogramRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 histogram_name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_histogram_name_hash(&has_bits);
          _impl_.histogram_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int64 histogram_min_trigger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_histogram_min_trigger(&has_bits);
          _impl_.histogram_min_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 histogram_max_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_histogram_max_trigger(&has_bits);
          _impl_.histogram_max_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundTracingMetadata_TriggerRule_HistogramRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 histogram_name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_histogram_name_hash(), target);
  }

  // optional int64 histogram_min_trigger = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_histogram_min_trigger(), target);
  }

  // optional int64 histogram_max_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_histogram_max_trigger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  return target;
}

size_t BackgroundTracingMetadata_TriggerRule_HistogramRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 histogram_name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 histogram_min_trigger = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_histogram_min_trigger());
    }

    // optional int64 histogram_max_trigger = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_histogram_max_trigger());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundTracingMetadata_TriggerRule_HistogramRule*>(
      &from));
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::MergeFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from) {
  BackgroundTracingMetadata_TriggerRule_HistogramRule* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.histogram_name_hash_ = from._impl_.histogram_name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.histogram_min_trigger_ = from._impl_.histogram_min_trigger_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.histogram_max_trigger_ = from._impl_.histogram_max_trigger_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule_HistogramRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::InternalSwap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_.histogram_max_trigger_)
      + sizeof(BackgroundTracingMetadata_TriggerRule_HistogramRule::_impl_.histogram_max_trigger_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_.histogram_name_hash_)>(
          reinterpret_cast<char*>(&_impl_.histogram_name_hash_),
          reinterpret_cast<char*>(&other->_impl_.histogram_name_hash_));
}

std::string BackgroundTracingMetadata_TriggerRule_HistogramRule::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule";
}


// ===================================================================

class BackgroundTracingMetadata_TriggerRule_NamedRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule_NamedRule>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content_trigger_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
}
BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(const BackgroundTracingMetadata_TriggerRule_NamedRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BackgroundTracingMetadata_TriggerRule_NamedRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_trigger_name_hash_){}
    , decltype(_impl_.event_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.content_trigger_name_hash_, &from._impl_.content_trigger_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_type_) -
    reinterpret_cast<char*>(&_impl_.content_trigger_name_hash_)) + sizeof(_impl_.event_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
}

inline void BackgroundTracingMetadata_TriggerRule_NamedRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_trigger_name_hash_){uint64_t{0u}}
    , decltype(_impl_.event_type_){0}
  };
}

BackgroundTracingMetadata_TriggerRule_NamedRule::~BackgroundTracingMetadata_TriggerRule_NamedRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata_TriggerRule_NamedRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.content_trigger_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_type_) -
        reinterpret_cast<char*>(&_impl_.content_trigger_name_hash_)) + sizeof(_impl_.event_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata_TriggerRule_NamedRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 content_trigger_name_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_content_trigger_name_hash(&has_bits);
          _impl_.content_trigger_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundTracingMetadata_TriggerRule_NamedRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  // optional fixed64 content_trigger_name_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_content_trigger_name_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  return target;
}

size_t BackgroundTracingMetadata_TriggerRule_NamedRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 content_trigger_name_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundTracingMetadata_TriggerRule_NamedRule*>(
      &from));
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::MergeFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from) {
  BackgroundTracingMetadata_TriggerRule_NamedRule* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.content_trigger_name_hash_ = from._impl_.content_trigger_name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule_NamedRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::InternalSwap(BackgroundTracingMetadata_TriggerRule_NamedRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_.event_type_)
      + sizeof(BackgroundTracingMetadata_TriggerRule_NamedRule::_impl_.event_type_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_.content_trigger_name_hash_)>(
          reinterpret_cast<char*>(&_impl_.content_trigger_name_hash_),
          reinterpret_cast<char*>(&other->_impl_.content_trigger_name_hash_));
}

std::string BackgroundTracingMetadata_TriggerRule_NamedRule::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule";
}


// ===================================================================

class BackgroundTracingMetadata_TriggerRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule>()._impl_._has_bits_);
  static void set_has_trigger_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& histogram_rule(const BackgroundTracingMetadata_TriggerRule* msg);
  static void set_has_histogram_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& named_rule(const BackgroundTracingMetadata_TriggerRule* msg);
  static void set_has_named_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule&
BackgroundTracingMetadata_TriggerRule::_Internal::histogram_rule(const BackgroundTracingMetadata_TriggerRule* msg) {
  return *msg->_impl_.histogram_rule_;
}
const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule&
BackgroundTracingMetadata_TriggerRule::_Internal::named_rule(const BackgroundTracingMetadata_TriggerRule* msg) {
  return *msg->_impl_.named_rule_;
}
BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
}
BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(const BackgroundTracingMetadata_TriggerRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BackgroundTracingMetadata_TriggerRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.histogram_rule_){nullptr}
    , decltype(_impl_.named_rule_){nullptr}
    , decltype(_impl_.trigger_type_){}
    , decltype(_impl_.name_hash_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_histogram_rule()) {
    _this->_impl_.histogram_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule(*from._impl_.histogram_rule_);
  }
  if (from._internal_has_named_rule()) {
    _this->_impl_.named_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule(*from._impl_.named_rule_);
  }
  ::memcpy(&_impl_.trigger_type_, &from._impl_.trigger_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.name_hash_) -
    reinterpret_cast<char*>(&_impl_.trigger_type_)) + sizeof(_impl_.name_hash_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
}

inline void BackgroundTracingMetadata_TriggerRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.histogram_rule_){nullptr}
    , decltype(_impl_.named_rule_){nullptr}
    , decltype(_impl_.trigger_type_){0}
    , decltype(_impl_.name_hash_){0u}
  };
}

BackgroundTracingMetadata_TriggerRule::~BackgroundTracingMetadata_TriggerRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata_TriggerRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.histogram_rule_;
  if (this != internal_default_instance()) delete _impl_.named_rule_;
}

void BackgroundTracingMetadata_TriggerRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata_TriggerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.histogram_rule_ != nullptr);
      _impl_.histogram_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.named_rule_ != nullptr);
      _impl_.named_rule_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.trigger_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.name_hash_) -
        reinterpret_cast<char*>(&_impl_.trigger_type_)) + sizeof(_impl_.name_hash_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata_TriggerRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(val))) {
            _internal_set_trigger_type(static_cast<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram_rule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_rule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 name_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_name_hash(&has_bits);
          _impl_.name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundTracingMetadata_TriggerRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_type(), target);
  }

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::histogram_rule(this),
        _Internal::histogram_rule(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::named_rule(this),
        _Internal::named_rule(this).GetCachedSize(), target, stream);
  }

  // optional fixed32 name_hash = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_name_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  return target;
}

size_t BackgroundTracingMetadata_TriggerRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.histogram_rule_);
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.named_rule_);
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trigger_type());
    }

    // optional fixed32 name_hash = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata_TriggerRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundTracingMetadata_TriggerRule*>(
      &from));
}

void BackgroundTracingMetadata_TriggerRule::MergeFrom(const BackgroundTracingMetadata_TriggerRule& from) {
  BackgroundTracingMetadata_TriggerRule* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_histogram_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule::MergeFrom(
          from._internal_histogram_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_named_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule::MergeFrom(
          from._internal_named_rule());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.trigger_type_ = from._impl_.trigger_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.name_hash_ = from._impl_.name_hash_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundTracingMetadata_TriggerRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule::InternalSwap(BackgroundTracingMetadata_TriggerRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule, _impl_.name_hash_)
      + sizeof(BackgroundTracingMetadata_TriggerRule::_impl_.name_hash_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule, _impl_.histogram_rule_)>(
          reinterpret_cast<char*>(&_impl_.histogram_rule_),
          reinterpret_cast<char*>(&other->_impl_.histogram_rule_));
}

std::string BackgroundTracingMetadata_TriggerRule::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata.TriggerRule";
}


// ===================================================================

class BackgroundTracingMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata>()._impl_._has_bits_);
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& triggered_rule(const BackgroundTracingMetadata* msg);
  static void set_has_triggered_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scenario_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule&
BackgroundTracingMetadata::_Internal::triggered_rule(const BackgroundTracingMetadata* msg) {
  return *msg->_impl_.triggered_rule_;
}
BackgroundTracingMetadata::BackgroundTracingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata)
}
BackgroundTracingMetadata::BackgroundTracingMetadata(const BackgroundTracingMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BackgroundTracingMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_rules_){from._impl_.active_rules_}
    , decltype(_impl_.triggered_rule_){nullptr}
    , decltype(_impl_.scenario_name_hash_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_triggered_rule()) {
    _this->_impl_.triggered_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule(*from._impl_.triggered_rule_);
  }
  _this->_impl_.scenario_name_hash_ = from._impl_.scenario_name_hash_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata)
}

inline void BackgroundTracingMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_rules_){arena}
    , decltype(_impl_.triggered_rule_){nullptr}
    , decltype(_impl_.scenario_name_hash_){0u}
  };
}

BackgroundTracingMetadata::~BackgroundTracingMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.active_rules_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.triggered_rule_;
}

void BackgroundTracingMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.active_rules_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.triggered_rule_ != nullptr);
    _impl_.triggered_rule_->Clear();
  }
  _impl_.scenario_name_hash_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_triggered_rule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 scenario_name_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_scenario_name_hash(&has_bits);
          _impl_.scenario_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundTracingMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::triggered_rule(this),
        _Internal::triggered_rule(this).GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_active_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_active_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed32 scenario_name_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_scenario_name_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata)
  return target;
}

size_t BackgroundTracingMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  total_size += 1UL * this->_internal_active_rules_size();
  for (const auto& msg : this->_impl_.active_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.triggered_rule_);
    }

    // optional fixed32 scenario_name_hash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundTracingMetadata*>(
      &from));
}

void BackgroundTracingMetadata::MergeFrom(const BackgroundTracingMetadata& from) {
  BackgroundTracingMetadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.active_rules_.MergeFrom(from._impl_.active_rules_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_triggered_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule::MergeFrom(
          from._internal_triggered_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.scenario_name_hash_ = from._impl_.scenario_name_hash_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundTracingMetadata::CopyFrom(const BackgroundTracingMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata::InternalSwap(BackgroundTracingMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.active_rules_.InternalSwap(&other->_impl_.active_rules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata, _impl_.scenario_name_hash_)
      + sizeof(BackgroundTracingMetadata::_impl_.scenario_name_hash_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata, _impl_.triggered_rule_)>(
          reinterpret_cast<char*>(&_impl_.triggered_rule_),
          reinterpret_cast<char*>(&other->_impl_.triggered_rule_));
}

std::string BackgroundTracingMetadata::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeMetadataPacket_FinchHash*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeMetadataPacket_FinchHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeMetadataPacket_FinchHash >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeMetadataPacket*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeMetadataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeMetadataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
