// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_benchmark_metadata.proto

#include "protos/perfetto/trace/chrome/chrome_benchmark_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ChromeBenchmarkMetadata::ChromeBenchmarkMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.story_tags_)*/{}
  , /*decltype(_impl_.benchmark_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.benchmark_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.story_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.benchmark_start_time_us_)*/int64_t{0}
  , /*decltype(_impl_.story_run_time_us_)*/int64_t{0}
  , /*decltype(_impl_.story_run_index_)*/0
  , /*decltype(_impl_.had_failures_)*/false} {}
struct ChromeBenchmarkMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeBenchmarkMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeBenchmarkMetadataDefaultTypeInternal() {}
  union {
    ChromeBenchmarkMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeBenchmarkMetadataDefaultTypeInternal _ChromeBenchmarkMetadata_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class ChromeBenchmarkMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeBenchmarkMetadata>()._impl_._has_bits_);
  static void set_has_benchmark_start_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_story_run_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_benchmark_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_benchmark_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_story_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_story_run_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_had_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ChromeBenchmarkMetadata::ChromeBenchmarkMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeBenchmarkMetadata)
}
ChromeBenchmarkMetadata::ChromeBenchmarkMetadata(const ChromeBenchmarkMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeBenchmarkMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.story_tags_){from._impl_.story_tags_}
    , decltype(_impl_.benchmark_name_){}
    , decltype(_impl_.benchmark_description_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.story_name_){}
    , decltype(_impl_.benchmark_start_time_us_){}
    , decltype(_impl_.story_run_time_us_){}
    , decltype(_impl_.story_run_index_){}
    , decltype(_impl_.had_failures_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.benchmark_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.benchmark_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_benchmark_name()) {
    _this->_impl_.benchmark_name_.Set(from._internal_benchmark_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.benchmark_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.benchmark_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_benchmark_description()) {
    _this->_impl_.benchmark_description_.Set(from._internal_benchmark_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.story_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.story_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_story_name()) {
    _this->_impl_.story_name_.Set(from._internal_story_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.benchmark_start_time_us_, &from._impl_.benchmark_start_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.had_failures_) -
    reinterpret_cast<char*>(&_impl_.benchmark_start_time_us_)) + sizeof(_impl_.had_failures_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeBenchmarkMetadata)
}

inline void ChromeBenchmarkMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.story_tags_){arena}
    , decltype(_impl_.benchmark_name_){}
    , decltype(_impl_.benchmark_description_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.story_name_){}
    , decltype(_impl_.benchmark_start_time_us_){int64_t{0}}
    , decltype(_impl_.story_run_time_us_){int64_t{0}}
    , decltype(_impl_.story_run_index_){0}
    , decltype(_impl_.had_failures_){false}
  };
  _impl_.benchmark_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.benchmark_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.benchmark_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.benchmark_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.story_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.story_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeBenchmarkMetadata::~ChromeBenchmarkMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeBenchmarkMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeBenchmarkMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.story_tags_.~RepeatedPtrField();
  _impl_.benchmark_name_.Destroy();
  _impl_.benchmark_description_.Destroy();
  _impl_.label_.Destroy();
  _impl_.story_name_.Destroy();
}

void ChromeBenchmarkMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeBenchmarkMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeBenchmarkMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.story_tags_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.benchmark_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.benchmark_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.story_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.benchmark_start_time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.had_failures_) -
        reinterpret_cast<char*>(&_impl_.benchmark_start_time_us_)) + sizeof(_impl_.had_failures_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeBenchmarkMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 benchmark_start_time_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_benchmark_start_time_us(&has_bits);
          _impl_.benchmark_start_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 story_run_time_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_story_run_time_us(&has_bits);
          _impl_.story_run_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string benchmark_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_benchmark_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string benchmark_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_benchmark_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string story_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_story_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string story_tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_story_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 story_run_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_story_run_index(&has_bits);
          _impl_.story_run_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool had_failures = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_had_failures(&has_bits);
          _impl_.had_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeBenchmarkMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeBenchmarkMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 benchmark_start_time_us = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_benchmark_start_time_us(), target);
  }

  // optional int64 story_run_time_us = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_story_run_time_us(), target);
  }

  // optional string benchmark_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_benchmark_name(), target);
  }

  // optional string benchmark_description = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_benchmark_description(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_label(), target);
  }

  // optional string story_name = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_story_name(), target);
  }

  // repeated string story_tags = 7;
  for (int i = 0, n = this->_internal_story_tags_size(); i < n; i++) {
    const auto& s = this->_internal_story_tags(i);
    target = stream->WriteString(7, s, target);
  }

  // optional int32 story_run_index = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_story_run_index(), target);
  }

  // optional bool had_failures = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_had_failures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeBenchmarkMetadata)
  return target;
}

size_t ChromeBenchmarkMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeBenchmarkMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string story_tags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.story_tags_.size());
  for (int i = 0, n = _impl_.story_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.story_tags_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string benchmark_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_benchmark_name());
    }

    // optional string benchmark_description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_benchmark_description());
    }

    // optional string label = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string story_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_story_name());
    }

    // optional int64 benchmark_start_time_us = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_benchmark_start_time_us());
    }

    // optional int64 story_run_time_us = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_story_run_time_us());
    }

    // optional int32 story_run_index = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_story_run_index());
    }

    // optional bool had_failures = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeBenchmarkMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeBenchmarkMetadata*>(
      &from));
}

void ChromeBenchmarkMetadata::MergeFrom(const ChromeBenchmarkMetadata& from) {
  ChromeBenchmarkMetadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeBenchmarkMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.story_tags_.MergeFrom(from._impl_.story_tags_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_benchmark_name(from._internal_benchmark_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_benchmark_description(from._internal_benchmark_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_story_name(from._internal_story_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.benchmark_start_time_us_ = from._impl_.benchmark_start_time_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.story_run_time_us_ = from._impl_.story_run_time_us_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.story_run_index_ = from._impl_.story_run_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.had_failures_ = from._impl_.had_failures_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeBenchmarkMetadata::CopyFrom(const ChromeBenchmarkMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeBenchmarkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeBenchmarkMetadata::IsInitialized() const {
  return true;
}

void ChromeBenchmarkMetadata::InternalSwap(ChromeBenchmarkMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.story_tags_.InternalSwap(&other->_impl_.story_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.benchmark_name_, lhs_arena,
      &other->_impl_.benchmark_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.benchmark_description_, lhs_arena,
      &other->_impl_.benchmark_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.story_name_, lhs_arena,
      &other->_impl_.story_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeBenchmarkMetadata, _impl_.had_failures_)
      + sizeof(ChromeBenchmarkMetadata::_impl_.had_failures_)
      - PROTOBUF_FIELD_OFFSET(ChromeBenchmarkMetadata, _impl_.benchmark_start_time_us_)>(
          reinterpret_cast<char*>(&_impl_.benchmark_start_time_us_),
          reinterpret_cast<char*>(&other->_impl_.benchmark_start_time_us_));
}

std::string ChromeBenchmarkMetadata::GetTypeName() const {
  return "perfetto.protos.ChromeBenchmarkMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeBenchmarkMetadata*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeBenchmarkMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeBenchmarkMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
