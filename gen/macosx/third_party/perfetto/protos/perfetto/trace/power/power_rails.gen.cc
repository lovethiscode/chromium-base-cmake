#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/power/power_rails.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

PowerRails::PowerRails() = default;
PowerRails::~PowerRails() = default;
PowerRails::PowerRails(const PowerRails&) = default;
PowerRails& PowerRails::operator=(const PowerRails&) = default;
PowerRails::PowerRails(PowerRails&&) noexcept = default;
PowerRails& PowerRails::operator=(PowerRails&&) = default;

bool PowerRails::operator==(const PowerRails& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(rail_descriptor_, other.rail_descriptor_)
   && ::protozero::internal::gen_helpers::EqualsField(energy_data_, other.energy_data_);
}

int PowerRails::rail_descriptor_size() const { return static_cast<int>(rail_descriptor_.size()); }
void PowerRails::clear_rail_descriptor() { rail_descriptor_.clear(); }
PowerRails_RailDescriptor* PowerRails::add_rail_descriptor() { rail_descriptor_.emplace_back(); return &rail_descriptor_.back(); }
int PowerRails::energy_data_size() const { return static_cast<int>(energy_data_.size()); }
void PowerRails::clear_energy_data() { energy_data_.clear(); }
PowerRails_EnergyData* PowerRails::add_energy_data() { energy_data_.emplace_back(); return &energy_data_.back(); }
bool PowerRails::ParseFromArray(const void* raw, size_t size) {
  rail_descriptor_.clear();
  energy_data_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* rail_descriptor */:
        rail_descriptor_.emplace_back();
        rail_descriptor_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* energy_data */:
        energy_data_.emplace_back();
        energy_data_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PowerRails::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PowerRails::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PowerRails::Serialize(::protozero::Message* msg) const {
  // Field 1: rail_descriptor
  for (auto& it : rail_descriptor_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: energy_data
  for (auto& it : energy_data_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


PowerRails_EnergyData::PowerRails_EnergyData() = default;
PowerRails_EnergyData::~PowerRails_EnergyData() = default;
PowerRails_EnergyData::PowerRails_EnergyData(const PowerRails_EnergyData&) = default;
PowerRails_EnergyData& PowerRails_EnergyData::operator=(const PowerRails_EnergyData&) = default;
PowerRails_EnergyData::PowerRails_EnergyData(PowerRails_EnergyData&&) noexcept = default;
PowerRails_EnergyData& PowerRails_EnergyData::operator=(PowerRails_EnergyData&&) = default;

bool PowerRails_EnergyData::operator==(const PowerRails_EnergyData& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_ms_, other.timestamp_ms_)
   && ::protozero::internal::gen_helpers::EqualsField(energy_, other.energy_);
}

bool PowerRails_EnergyData::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* index */:
        field.get(&index_);
        break;
      case 2 /* timestamp_ms */:
        field.get(&timestamp_ms_);
        break;
      case 3 /* energy */:
        field.get(&energy_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PowerRails_EnergyData::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PowerRails_EnergyData::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PowerRails_EnergyData::Serialize(::protozero::Message* msg) const {
  // Field 1: index
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, index_, msg);
  }

  // Field 2: timestamp_ms
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, timestamp_ms_, msg);
  }

  // Field 3: energy
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, energy_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


PowerRails_RailDescriptor::PowerRails_RailDescriptor() = default;
PowerRails_RailDescriptor::~PowerRails_RailDescriptor() = default;
PowerRails_RailDescriptor::PowerRails_RailDescriptor(const PowerRails_RailDescriptor&) = default;
PowerRails_RailDescriptor& PowerRails_RailDescriptor::operator=(const PowerRails_RailDescriptor&) = default;
PowerRails_RailDescriptor::PowerRails_RailDescriptor(PowerRails_RailDescriptor&&) noexcept = default;
PowerRails_RailDescriptor& PowerRails_RailDescriptor::operator=(PowerRails_RailDescriptor&&) = default;

bool PowerRails_RailDescriptor::operator==(const PowerRails_RailDescriptor& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(index_, other.index_)
   && ::protozero::internal::gen_helpers::EqualsField(rail_name_, other.rail_name_)
   && ::protozero::internal::gen_helpers::EqualsField(subsys_name_, other.subsys_name_)
   && ::protozero::internal::gen_helpers::EqualsField(sampling_rate_, other.sampling_rate_);
}

bool PowerRails_RailDescriptor::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* index */:
        field.get(&index_);
        break;
      case 2 /* rail_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rail_name_);
        break;
      case 3 /* subsys_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &subsys_name_);
        break;
      case 4 /* sampling_rate */:
        field.get(&sampling_rate_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PowerRails_RailDescriptor::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PowerRails_RailDescriptor::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PowerRails_RailDescriptor::Serialize(::protozero::Message* msg) const {
  // Field 1: index
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, index_, msg);
  }

  // Field 2: rail_name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, rail_name_, msg);
  }

  // Field 3: subsys_name
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, subsys_name_, msg);
  }

  // Field 4: sampling_rate
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, sampling_rate_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
