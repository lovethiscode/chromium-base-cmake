#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/power/android_entity_state_residency.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

EntityStateResidency::EntityStateResidency() = default;
EntityStateResidency::~EntityStateResidency() = default;
EntityStateResidency::EntityStateResidency(const EntityStateResidency&) = default;
EntityStateResidency& EntityStateResidency::operator=(const EntityStateResidency&) = default;
EntityStateResidency::EntityStateResidency(EntityStateResidency&&) noexcept = default;
EntityStateResidency& EntityStateResidency::operator=(EntityStateResidency&&) = default;

bool EntityStateResidency::operator==(const EntityStateResidency& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(power_entity_state_, other.power_entity_state_)
   && ::protozero::internal::gen_helpers::EqualsField(residency_, other.residency_);
}

int EntityStateResidency::power_entity_state_size() const { return static_cast<int>(power_entity_state_.size()); }
void EntityStateResidency::clear_power_entity_state() { power_entity_state_.clear(); }
EntityStateResidency_PowerEntityState* EntityStateResidency::add_power_entity_state() { power_entity_state_.emplace_back(); return &power_entity_state_.back(); }
int EntityStateResidency::residency_size() const { return static_cast<int>(residency_.size()); }
void EntityStateResidency::clear_residency() { residency_.clear(); }
EntityStateResidency_StateResidency* EntityStateResidency::add_residency() { residency_.emplace_back(); return &residency_.back(); }
bool EntityStateResidency::ParseFromArray(const void* raw, size_t size) {
  power_entity_state_.clear();
  residency_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* power_entity_state */:
        power_entity_state_.emplace_back();
        power_entity_state_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* residency */:
        residency_.emplace_back();
        residency_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string EntityStateResidency::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> EntityStateResidency::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void EntityStateResidency::Serialize(::protozero::Message* msg) const {
  // Field 1: power_entity_state
  for (auto& it : power_entity_state_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: residency
  for (auto& it : residency_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


EntityStateResidency_StateResidency::EntityStateResidency_StateResidency() = default;
EntityStateResidency_StateResidency::~EntityStateResidency_StateResidency() = default;
EntityStateResidency_StateResidency::EntityStateResidency_StateResidency(const EntityStateResidency_StateResidency&) = default;
EntityStateResidency_StateResidency& EntityStateResidency_StateResidency::operator=(const EntityStateResidency_StateResidency&) = default;
EntityStateResidency_StateResidency::EntityStateResidency_StateResidency(EntityStateResidency_StateResidency&&) noexcept = default;
EntityStateResidency_StateResidency& EntityStateResidency_StateResidency::operator=(EntityStateResidency_StateResidency&&) = default;

bool EntityStateResidency_StateResidency::operator==(const EntityStateResidency_StateResidency& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(entity_index_, other.entity_index_)
   && ::protozero::internal::gen_helpers::EqualsField(state_index_, other.state_index_)
   && ::protozero::internal::gen_helpers::EqualsField(total_time_in_state_ms_, other.total_time_in_state_ms_)
   && ::protozero::internal::gen_helpers::EqualsField(total_state_entry_count_, other.total_state_entry_count_)
   && ::protozero::internal::gen_helpers::EqualsField(last_entry_timestamp_ms_, other.last_entry_timestamp_ms_);
}

bool EntityStateResidency_StateResidency::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* entity_index */:
        field.get(&entity_index_);
        break;
      case 2 /* state_index */:
        field.get(&state_index_);
        break;
      case 3 /* total_time_in_state_ms */:
        field.get(&total_time_in_state_ms_);
        break;
      case 4 /* total_state_entry_count */:
        field.get(&total_state_entry_count_);
        break;
      case 5 /* last_entry_timestamp_ms */:
        field.get(&last_entry_timestamp_ms_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string EntityStateResidency_StateResidency::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> EntityStateResidency_StateResidency::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void EntityStateResidency_StateResidency::Serialize(::protozero::Message* msg) const {
  // Field 1: entity_index
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, entity_index_, msg);
  }

  // Field 2: state_index
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_index_, msg);
  }

  // Field 3: total_time_in_state_ms
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, total_time_in_state_ms_, msg);
  }

  // Field 4: total_state_entry_count
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, total_state_entry_count_, msg);
  }

  // Field 5: last_entry_timestamp_ms
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, last_entry_timestamp_ms_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


EntityStateResidency_PowerEntityState::EntityStateResidency_PowerEntityState() = default;
EntityStateResidency_PowerEntityState::~EntityStateResidency_PowerEntityState() = default;
EntityStateResidency_PowerEntityState::EntityStateResidency_PowerEntityState(const EntityStateResidency_PowerEntityState&) = default;
EntityStateResidency_PowerEntityState& EntityStateResidency_PowerEntityState::operator=(const EntityStateResidency_PowerEntityState&) = default;
EntityStateResidency_PowerEntityState::EntityStateResidency_PowerEntityState(EntityStateResidency_PowerEntityState&&) noexcept = default;
EntityStateResidency_PowerEntityState& EntityStateResidency_PowerEntityState::operator=(EntityStateResidency_PowerEntityState&&) = default;

bool EntityStateResidency_PowerEntityState::operator==(const EntityStateResidency_PowerEntityState& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(entity_index_, other.entity_index_)
   && ::protozero::internal::gen_helpers::EqualsField(state_index_, other.state_index_)
   && ::protozero::internal::gen_helpers::EqualsField(entity_name_, other.entity_name_)
   && ::protozero::internal::gen_helpers::EqualsField(state_name_, other.state_name_);
}

bool EntityStateResidency_PowerEntityState::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* entity_index */:
        field.get(&entity_index_);
        break;
      case 2 /* state_index */:
        field.get(&state_index_);
        break;
      case 3 /* entity_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &entity_name_);
        break;
      case 4 /* state_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &state_name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string EntityStateResidency_PowerEntityState::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> EntityStateResidency_PowerEntityState::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void EntityStateResidency_PowerEntityState::Serialize(::protozero::Message* msg) const {
  // Field 1: entity_index
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, entity_index_, msg);
  }

  // Field 2: state_index
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, state_index_, msg);
  }

  // Field 3: entity_name
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, entity_name_, msg);
  }

  // Field 4: state_name
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, state_name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
