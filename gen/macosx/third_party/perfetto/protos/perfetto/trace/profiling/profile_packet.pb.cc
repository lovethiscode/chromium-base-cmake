// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_packet.proto

#include "protos/perfetto/trace/profiling/profile_packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ProfilePacket_HeapSample::ProfilePacket_HeapSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.callstack_id_)*/uint64_t{0u}
  , /*decltype(_impl_.self_allocated_)*/uint64_t{0u}
  , /*decltype(_impl_.self_freed_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.alloc_count_)*/uint64_t{0u}
  , /*decltype(_impl_.free_count_)*/uint64_t{0u}
  , /*decltype(_impl_.self_max_)*/uint64_t{0u}
  , /*decltype(_impl_.self_max_count_)*/uint64_t{0u}} {}
struct ProfilePacket_HeapSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_HeapSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_HeapSampleDefaultTypeInternal() {}
  union {
    ProfilePacket_HeapSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_HeapSampleDefaultTypeInternal _ProfilePacket_HeapSample_default_instance_;
PROTOBUF_CONSTEXPR ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.upper_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_.max_bucket_)*/false} {}
struct ProfilePacket_Histogram_BucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_Histogram_BucketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_Histogram_BucketDefaultTypeInternal() {}
  union {
    ProfilePacket_Histogram_Bucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_Histogram_BucketDefaultTypeInternal _ProfilePacket_Histogram_Bucket_default_instance_;
PROTOBUF_CONSTEXPR ProfilePacket_Histogram::ProfilePacket_Histogram(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buckets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProfilePacket_HistogramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_HistogramDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_HistogramDefaultTypeInternal() {}
  union {
    ProfilePacket_Histogram _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_HistogramDefaultTypeInternal _ProfilePacket_Histogram_default_instance_;
PROTOBUF_CONSTEXPR ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unwinding_time_us_)*/nullptr
  , /*decltype(_impl_.unwinding_errors_)*/uint64_t{0u}
  , /*decltype(_impl_.heap_samples_)*/uint64_t{0u}
  , /*decltype(_impl_.map_reparses_)*/uint64_t{0u}
  , /*decltype(_impl_.total_unwinding_time_us_)*/uint64_t{0u}
  , /*decltype(_impl_.client_spinlock_blocked_us_)*/uint64_t{0u}} {}
struct ProfilePacket_ProcessStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_ProcessStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_ProcessStatsDefaultTypeInternal() {}
  union {
    ProfilePacket_ProcessStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_ProcessStatsDefaultTypeInternal _ProfilePacket_ProcessStats_default_instance_;
PROTOBUF_CONSTEXPR ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_.heap_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_.pid_)*/uint64_t{0u}
  , /*decltype(_impl_.from_startup_)*/false
  , /*decltype(_impl_.rejected_concurrent_)*/false
  , /*decltype(_impl_.disconnected_)*/false
  , /*decltype(_impl_.buffer_overran_)*/false
  , /*decltype(_impl_.buffer_corrupted_)*/false
  , /*decltype(_impl_.hit_guardrail_)*/false
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.sampling_interval_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.orig_sampling_interval_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.client_error_)*/0} {}
struct ProfilePacket_ProcessHeapSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_ProcessHeapSamplesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_ProcessHeapSamplesDefaultTypeInternal() {}
  union {
    ProfilePacket_ProcessHeapSamples _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_ProcessHeapSamplesDefaultTypeInternal _ProfilePacket_ProcessHeapSamples_default_instance_;
PROTOBUF_CONSTEXPR ProfilePacket::ProfilePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strings_)*/{}
  , /*decltype(_impl_.frames_)*/{}
  , /*decltype(_impl_.callstacks_)*/{}
  , /*decltype(_impl_.mappings_)*/{}
  , /*decltype(_impl_.process_dumps_)*/{}
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_.continued_)*/false} {}
struct ProfilePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacketDefaultTypeInternal() {}
  union {
    ProfilePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacketDefaultTypeInternal _ProfilePacket_default_instance_;
PROTOBUF_CONSTEXPR StreamingAllocation::StreamingAllocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{}
  , /*decltype(_impl_.size_)*/{}
  , /*decltype(_impl_.sample_size_)*/{}
  , /*decltype(_impl_.clock_monotonic_coarse_timestamp_)*/{}
  , /*decltype(_impl_.heap_id_)*/{}
  , /*decltype(_impl_.sequence_number_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamingAllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingAllocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingAllocationDefaultTypeInternal() {}
  union {
    StreamingAllocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingAllocationDefaultTypeInternal _StreamingAllocation_default_instance_;
PROTOBUF_CONSTEXPR StreamingFree::StreamingFree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{}
  , /*decltype(_impl_.heap_id_)*/{}
  , /*decltype(_impl_.sequence_number_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamingFreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingFreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingFreeDefaultTypeInternal() {}
  union {
    StreamingFree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingFreeDefaultTypeInternal _StreamingFree_default_instance_;
PROTOBUF_CONSTEXPR StreamingProfilePacket::StreamingProfilePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.callstack_iid_)*/{}
  , /*decltype(_impl_.timestamp_delta_us_)*/{}
  , /*decltype(_impl_.process_priority_)*/0} {}
struct StreamingProfilePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingProfilePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingProfilePacketDefaultTypeInternal() {}
  union {
    StreamingProfilePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingProfilePacketDefaultTypeInternal _StreamingProfilePacket_default_instance_;
PROTOBUF_CONSTEXPR Profiling::Profiling(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct ProfilingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilingDefaultTypeInternal() {}
  union {
    Profiling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilingDefaultTypeInternal _Profiling_default_instance_;
PROTOBUF_CONSTEXPR PerfSample_ProducerEvent::PerfSample_ProducerEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optional_source_stop_reason_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfSample_ProducerEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfSample_ProducerEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfSample_ProducerEventDefaultTypeInternal() {}
  union {
    PerfSample_ProducerEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfSample_ProducerEventDefaultTypeInternal _PerfSample_ProducerEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfSample::PerfSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.producer_event_)*/nullptr
  , /*decltype(_impl_.cpu_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.callstack_iid_)*/uint64_t{0u}
  , /*decltype(_impl_.tid_)*/0u
  , /*decltype(_impl_.cpu_mode_)*/0
  , /*decltype(_impl_.timebase_count_)*/uint64_t{0u}
  , /*decltype(_impl_.kernel_records_lost_)*/uint64_t{0u}
  , /*decltype(_impl_.optional_unwind_error_)*/{}
  , /*decltype(_impl_.optional_sample_skipped_reason_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfSampleDefaultTypeInternal() {}
  union {
    PerfSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfSampleDefaultTypeInternal _PerfSample_default_instance_;
PROTOBUF_CONSTEXPR PerfSampleDefaults::PerfSampleDefaults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timebase_)*/nullptr
  , /*decltype(_impl_.process_shard_count_)*/0u
  , /*decltype(_impl_.chosen_process_shard_)*/0u} {}
struct PerfSampleDefaultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfSampleDefaultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfSampleDefaultsDefaultTypeInternal() {}
  union {
    PerfSampleDefaults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfSampleDefaultsDefaultTypeInternal _PerfSampleDefaults_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ProfilePacket_ProcessHeapSamples_ClientError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProfilePacket_ProcessHeapSamples_ClientError_strings[3] = {};

static const char ProfilePacket_ProcessHeapSamples_ClientError_names[] =
  "CLIENT_ERROR_HIT_TIMEOUT"
  "CLIENT_ERROR_INVALID_STACK_BOUNDS"
  "CLIENT_ERROR_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProfilePacket_ProcessHeapSamples_ClientError_entries[] = {
  { {ProfilePacket_ProcessHeapSamples_ClientError_names + 0, 24}, 1 },
  { {ProfilePacket_ProcessHeapSamples_ClientError_names + 24, 33}, 2 },
  { {ProfilePacket_ProcessHeapSamples_ClientError_names + 57, 17}, 0 },
};

static const int ProfilePacket_ProcessHeapSamples_ClientError_entries_by_number[] = {
  2, // 0 -> CLIENT_ERROR_NONE
  0, // 1 -> CLIENT_ERROR_HIT_TIMEOUT
  1, // 2 -> CLIENT_ERROR_INVALID_STACK_BOUNDS
};

const std::string& ProfilePacket_ProcessHeapSamples_ClientError_Name(
    ProfilePacket_ProcessHeapSamples_ClientError value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProfilePacket_ProcessHeapSamples_ClientError_entries,
          ProfilePacket_ProcessHeapSamples_ClientError_entries_by_number,
          3, ProfilePacket_ProcessHeapSamples_ClientError_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProfilePacket_ProcessHeapSamples_ClientError_entries,
      ProfilePacket_ProcessHeapSamples_ClientError_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProfilePacket_ProcessHeapSamples_ClientError_strings[idx].get();
}
bool ProfilePacket_ProcessHeapSamples_ClientError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProfilePacket_ProcessHeapSamples_ClientError* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProfilePacket_ProcessHeapSamples_ClientError_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ProfilePacket_ProcessHeapSamples_ClientError>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_NONE;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_HIT_TIMEOUT;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_INVALID_STACK_BOUNDS;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::ClientError_MIN;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::ClientError_MAX;
constexpr int ProfilePacket_ProcessHeapSamples::ClientError_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Profiling_CpuMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Profiling_CpuMode_strings[6] = {};

static const char Profiling_CpuMode_names[] =
  "MODE_GUEST_KERNEL"
  "MODE_GUEST_USER"
  "MODE_HYPERVISOR"
  "MODE_KERNEL"
  "MODE_UNKNOWN"
  "MODE_USER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Profiling_CpuMode_entries[] = {
  { {Profiling_CpuMode_names + 0, 17}, 4 },
  { {Profiling_CpuMode_names + 17, 15}, 5 },
  { {Profiling_CpuMode_names + 32, 15}, 3 },
  { {Profiling_CpuMode_names + 47, 11}, 1 },
  { {Profiling_CpuMode_names + 58, 12}, 0 },
  { {Profiling_CpuMode_names + 70, 9}, 2 },
};

static const int Profiling_CpuMode_entries_by_number[] = {
  4, // 0 -> MODE_UNKNOWN
  3, // 1 -> MODE_KERNEL
  5, // 2 -> MODE_USER
  2, // 3 -> MODE_HYPERVISOR
  0, // 4 -> MODE_GUEST_KERNEL
  1, // 5 -> MODE_GUEST_USER
};

const std::string& Profiling_CpuMode_Name(
    Profiling_CpuMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Profiling_CpuMode_entries,
          Profiling_CpuMode_entries_by_number,
          6, Profiling_CpuMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Profiling_CpuMode_entries,
      Profiling_CpuMode_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Profiling_CpuMode_strings[idx].get();
}
bool Profiling_CpuMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Profiling_CpuMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Profiling_CpuMode_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<Profiling_CpuMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Profiling_CpuMode Profiling::MODE_UNKNOWN;
constexpr Profiling_CpuMode Profiling::MODE_KERNEL;
constexpr Profiling_CpuMode Profiling::MODE_USER;
constexpr Profiling_CpuMode Profiling::MODE_HYPERVISOR;
constexpr Profiling_CpuMode Profiling::MODE_GUEST_KERNEL;
constexpr Profiling_CpuMode Profiling::MODE_GUEST_USER;
constexpr Profiling_CpuMode Profiling::CpuMode_MIN;
constexpr Profiling_CpuMode Profiling::CpuMode_MAX;
constexpr int Profiling::CpuMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Profiling_StackUnwindError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Profiling_StackUnwindError_strings[16] = {};

static const char Profiling_StackUnwindError_names[] =
  "UNWIND_ERROR_BAD_ARCH"
  "UNWIND_ERROR_INVALID_ELF"
  "UNWIND_ERROR_INVALID_MAP"
  "UNWIND_ERROR_INVALID_PARAMETER"
  "UNWIND_ERROR_MAPS_PARSE"
  "UNWIND_ERROR_MAX_FRAMES_EXCEEDED"
  "UNWIND_ERROR_MEMORY_INVALID"
  "UNWIND_ERROR_NONE"
  "UNWIND_ERROR_PTRACE_CALL"
  "UNWIND_ERROR_REPEATED_FRAME"
  "UNWIND_ERROR_SYSTEM_CALL"
  "UNWIND_ERROR_THREAD_DOES_NOT_EXIST"
  "UNWIND_ERROR_THREAD_TIMEOUT"
  "UNWIND_ERROR_UNKNOWN"
  "UNWIND_ERROR_UNSUPPORTED"
  "UNWIND_ERROR_UNWIND_INFO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Profiling_StackUnwindError_entries[] = {
  { {Profiling_StackUnwindError_names + 0, 21}, 12 },
  { {Profiling_StackUnwindError_names + 21, 24}, 8 },
  { {Profiling_StackUnwindError_names + 45, 24}, 5 },
  { {Profiling_StackUnwindError_names + 69, 30}, 14 },
  { {Profiling_StackUnwindError_names + 99, 23}, 13 },
  { {Profiling_StackUnwindError_names + 122, 32}, 6 },
  { {Profiling_StackUnwindError_names + 154, 27}, 2 },
  { {Profiling_StackUnwindError_names + 181, 17}, 1 },
  { {Profiling_StackUnwindError_names + 198, 24}, 15 },
  { {Profiling_StackUnwindError_names + 222, 27}, 7 },
  { {Profiling_StackUnwindError_names + 249, 24}, 9 },
  { {Profiling_StackUnwindError_names + 273, 34}, 11 },
  { {Profiling_StackUnwindError_names + 307, 27}, 10 },
  { {Profiling_StackUnwindError_names + 334, 20}, 0 },
  { {Profiling_StackUnwindError_names + 354, 24}, 4 },
  { {Profiling_StackUnwindError_names + 378, 24}, 3 },
};

static const int Profiling_StackUnwindError_entries_by_number[] = {
  13, // 0 -> UNWIND_ERROR_UNKNOWN
  7, // 1 -> UNWIND_ERROR_NONE
  6, // 2 -> UNWIND_ERROR_MEMORY_INVALID
  15, // 3 -> UNWIND_ERROR_UNWIND_INFO
  14, // 4 -> UNWIND_ERROR_UNSUPPORTED
  2, // 5 -> UNWIND_ERROR_INVALID_MAP
  5, // 6 -> UNWIND_ERROR_MAX_FRAMES_EXCEEDED
  9, // 7 -> UNWIND_ERROR_REPEATED_FRAME
  1, // 8 -> UNWIND_ERROR_INVALID_ELF
  10, // 9 -> UNWIND_ERROR_SYSTEM_CALL
  12, // 10 -> UNWIND_ERROR_THREAD_TIMEOUT
  11, // 11 -> UNWIND_ERROR_THREAD_DOES_NOT_EXIST
  0, // 12 -> UNWIND_ERROR_BAD_ARCH
  4, // 13 -> UNWIND_ERROR_MAPS_PARSE
  3, // 14 -> UNWIND_ERROR_INVALID_PARAMETER
  8, // 15 -> UNWIND_ERROR_PTRACE_CALL
};

const std::string& Profiling_StackUnwindError_Name(
    Profiling_StackUnwindError value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Profiling_StackUnwindError_entries,
          Profiling_StackUnwindError_entries_by_number,
          16, Profiling_StackUnwindError_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Profiling_StackUnwindError_entries,
      Profiling_StackUnwindError_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Profiling_StackUnwindError_strings[idx].get();
}
bool Profiling_StackUnwindError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Profiling_StackUnwindError* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Profiling_StackUnwindError_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<Profiling_StackUnwindError>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNKNOWN;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_NONE;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MEMORY_INVALID;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNWIND_INFO;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNSUPPORTED;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_MAP;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MAX_FRAMES_EXCEEDED;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_REPEATED_FRAME;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_ELF;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_SYSTEM_CALL;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_THREAD_TIMEOUT;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_THREAD_DOES_NOT_EXIST;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_BAD_ARCH;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MAPS_PARSE;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_PARAMETER;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_PTRACE_CALL;
constexpr Profiling_StackUnwindError Profiling::StackUnwindError_MIN;
constexpr Profiling_StackUnwindError Profiling::StackUnwindError_MAX;
constexpr int Profiling::StackUnwindError_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool PerfSample_ProducerEvent_DataSourceStopReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfSample_ProducerEvent_DataSourceStopReason_strings[2] = {};

static const char PerfSample_ProducerEvent_DataSourceStopReason_names[] =
  "PROFILER_STOP_GUARDRAIL"
  "PROFILER_STOP_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfSample_ProducerEvent_DataSourceStopReason_entries[] = {
  { {PerfSample_ProducerEvent_DataSourceStopReason_names + 0, 23}, 1 },
  { {PerfSample_ProducerEvent_DataSourceStopReason_names + 23, 21}, 0 },
};

static const int PerfSample_ProducerEvent_DataSourceStopReason_entries_by_number[] = {
  1, // 0 -> PROFILER_STOP_UNKNOWN
  0, // 1 -> PROFILER_STOP_GUARDRAIL
};

const std::string& PerfSample_ProducerEvent_DataSourceStopReason_Name(
    PerfSample_ProducerEvent_DataSourceStopReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfSample_ProducerEvent_DataSourceStopReason_entries,
          PerfSample_ProducerEvent_DataSourceStopReason_entries_by_number,
          2, PerfSample_ProducerEvent_DataSourceStopReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfSample_ProducerEvent_DataSourceStopReason_entries,
      PerfSample_ProducerEvent_DataSourceStopReason_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfSample_ProducerEvent_DataSourceStopReason_strings[idx].get();
}
bool PerfSample_ProducerEvent_DataSourceStopReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfSample_ProducerEvent_DataSourceStopReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfSample_ProducerEvent_DataSourceStopReason_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PerfSample_ProducerEvent_DataSourceStopReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::PROFILER_STOP_UNKNOWN;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::PROFILER_STOP_GUARDRAIL;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::DataSourceStopReason_MIN;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::DataSourceStopReason_MAX;
constexpr int PerfSample_ProducerEvent::DataSourceStopReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool PerfSample_SampleSkipReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfSample_SampleSkipReason_strings[4] = {};

static const char PerfSample_SampleSkipReason_names[] =
  "PROFILER_SKIP_READ_STAGE"
  "PROFILER_SKIP_UNKNOWN"
  "PROFILER_SKIP_UNWIND_ENQUEUE"
  "PROFILER_SKIP_UNWIND_STAGE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfSample_SampleSkipReason_entries[] = {
  { {PerfSample_SampleSkipReason_names + 0, 24}, 1 },
  { {PerfSample_SampleSkipReason_names + 24, 21}, 0 },
  { {PerfSample_SampleSkipReason_names + 45, 28}, 3 },
  { {PerfSample_SampleSkipReason_names + 73, 26}, 2 },
};

static const int PerfSample_SampleSkipReason_entries_by_number[] = {
  1, // 0 -> PROFILER_SKIP_UNKNOWN
  0, // 1 -> PROFILER_SKIP_READ_STAGE
  3, // 2 -> PROFILER_SKIP_UNWIND_STAGE
  2, // 3 -> PROFILER_SKIP_UNWIND_ENQUEUE
};

const std::string& PerfSample_SampleSkipReason_Name(
    PerfSample_SampleSkipReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfSample_SampleSkipReason_entries,
          PerfSample_SampleSkipReason_entries_by_number,
          4, PerfSample_SampleSkipReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfSample_SampleSkipReason_entries,
      PerfSample_SampleSkipReason_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfSample_SampleSkipReason_strings[idx].get();
}
bool PerfSample_SampleSkipReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfSample_SampleSkipReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfSample_SampleSkipReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PerfSample_SampleSkipReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNKNOWN;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_READ_STAGE;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNWIND_STAGE;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNWIND_ENQUEUE;
constexpr PerfSample_SampleSkipReason PerfSample::SampleSkipReason_MIN;
constexpr PerfSample_SampleSkipReason PerfSample::SampleSkipReason_MAX;
constexpr int PerfSample::SampleSkipReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProfilePacket_HeapSample::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_HeapSample>()._impl_._has_bits_);
  static void set_has_callstack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_self_allocated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_self_freed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_self_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_self_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alloc_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_free_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProfilePacket_HeapSample::ProfilePacket_HeapSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.HeapSample)
}
ProfilePacket_HeapSample::ProfilePacket_HeapSample(const ProfilePacket_HeapSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProfilePacket_HeapSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callstack_id_){}
    , decltype(_impl_.self_allocated_){}
    , decltype(_impl_.self_freed_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.alloc_count_){}
    , decltype(_impl_.free_count_){}
    , decltype(_impl_.self_max_){}
    , decltype(_impl_.self_max_count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.callstack_id_, &from._impl_.callstack_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.self_max_count_) -
    reinterpret_cast<char*>(&_impl_.callstack_id_)) + sizeof(_impl_.self_max_count_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.HeapSample)
}

inline void ProfilePacket_HeapSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callstack_id_){uint64_t{0u}}
    , decltype(_impl_.self_allocated_){uint64_t{0u}}
    , decltype(_impl_.self_freed_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.alloc_count_){uint64_t{0u}}
    , decltype(_impl_.free_count_){uint64_t{0u}}
    , decltype(_impl_.self_max_){uint64_t{0u}}
    , decltype(_impl_.self_max_count_){uint64_t{0u}}
  };
}

ProfilePacket_HeapSample::~ProfilePacket_HeapSample() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.HeapSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_HeapSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProfilePacket_HeapSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_HeapSample::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.HeapSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.callstack_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.self_max_count_) -
        reinterpret_cast<char*>(&_impl_.callstack_id_)) + sizeof(_impl_.self_max_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_HeapSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 callstack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_callstack_id(&has_bits);
          _impl_.callstack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 self_allocated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_self_allocated(&has_bits);
          _impl_.self_allocated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 self_freed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_self_freed(&has_bits);
          _impl_.self_freed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 alloc_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_alloc_count(&has_bits);
          _impl_.alloc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 free_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_free_count(&has_bits);
          _impl_.free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 self_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_self_max(&has_bits);
          _impl_.self_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 self_max_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_self_max_count(&has_bits);
          _impl_.self_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilePacket_HeapSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.HeapSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 callstack_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_callstack_id(), target);
  }

  // optional uint64 self_allocated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_self_allocated(), target);
  }

  // optional uint64 self_freed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_self_freed(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // optional uint64 alloc_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_alloc_count(), target);
  }

  // optional uint64 free_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_free_count(), target);
  }

  // optional uint64 self_max = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_self_max(), target);
  }

  // optional uint64 self_max_count = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_self_max_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.HeapSample)
  return target;
}

size_t ProfilePacket_HeapSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.HeapSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 callstack_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_callstack_id());
    }

    // optional uint64 self_allocated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_self_allocated());
    }

    // optional uint64 self_freed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_self_freed());
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 alloc_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_alloc_count());
    }

    // optional uint64 free_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_free_count());
    }

    // optional uint64 self_max = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_self_max());
    }

    // optional uint64 self_max_count = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_self_max_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_HeapSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProfilePacket_HeapSample*>(
      &from));
}

void ProfilePacket_HeapSample::MergeFrom(const ProfilePacket_HeapSample& from) {
  ProfilePacket_HeapSample* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.HeapSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.callstack_id_ = from._impl_.callstack_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.self_allocated_ = from._impl_.self_allocated_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.self_freed_ = from._impl_.self_freed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.alloc_count_ = from._impl_.alloc_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.free_count_ = from._impl_.free_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.self_max_ = from._impl_.self_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.self_max_count_ = from._impl_.self_max_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProfilePacket_HeapSample::CopyFrom(const ProfilePacket_HeapSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.HeapSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_HeapSample::IsInitialized() const {
  return true;
}

void ProfilePacket_HeapSample::InternalSwap(ProfilePacket_HeapSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_HeapSample, _impl_.self_max_count_)
      + sizeof(ProfilePacket_HeapSample::_impl_.self_max_count_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_HeapSample, _impl_.callstack_id_)>(
          reinterpret_cast<char*>(&_impl_.callstack_id_),
          reinterpret_cast<char*>(&other->_impl_.callstack_id_));
}

std::string ProfilePacket_HeapSample::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.HeapSample";
}


// ===================================================================

class ProfilePacket_Histogram_Bucket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_Histogram_Bucket>()._impl_._has_bits_);
  static void set_has_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
}
ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(const ProfilePacket_Histogram_Bucket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProfilePacket_Histogram_Bucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upper_limit_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.max_bucket_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.upper_limit_, &from._impl_.upper_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_bucket_) -
    reinterpret_cast<char*>(&_impl_.upper_limit_)) + sizeof(_impl_.max_bucket_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
}

inline void ProfilePacket_Histogram_Bucket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upper_limit_){uint64_t{0u}}
    , decltype(_impl_.count_){uint64_t{0u}}
    , decltype(_impl_.max_bucket_){false}
  };
}

ProfilePacket_Histogram_Bucket::~ProfilePacket_Histogram_Bucket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_Histogram_Bucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProfilePacket_Histogram_Bucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_Histogram_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.upper_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_bucket_) -
        reinterpret_cast<char*>(&_impl_.upper_limit_)) + sizeof(_impl_.max_bucket_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_Histogram_Bucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upper_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upper_limit(&has_bits);
          _impl_.upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool max_bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_bucket(&has_bits);
          _impl_.max_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilePacket_Histogram_Bucket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 upper_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upper_limit(), target);
  }

  // optional bool max_bucket = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_max_bucket(), target);
  }

  // optional uint64 count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.Histogram.Bucket)
  return target;
}

size_t ProfilePacket_Histogram_Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 upper_limit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_upper_limit());
    }

    // optional uint64 count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
    }

    // optional bool max_bucket = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_Histogram_Bucket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProfilePacket_Histogram_Bucket*>(
      &from));
}

void ProfilePacket_Histogram_Bucket::MergeFrom(const ProfilePacket_Histogram_Bucket& from) {
  ProfilePacket_Histogram_Bucket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.upper_limit_ = from._impl_.upper_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_bucket_ = from._impl_.max_bucket_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProfilePacket_Histogram_Bucket::CopyFrom(const ProfilePacket_Histogram_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_Histogram_Bucket::IsInitialized() const {
  return true;
}

void ProfilePacket_Histogram_Bucket::InternalSwap(ProfilePacket_Histogram_Bucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_Histogram_Bucket, _impl_.max_bucket_)
      + sizeof(ProfilePacket_Histogram_Bucket::_impl_.max_bucket_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_Histogram_Bucket, _impl_.upper_limit_)>(
          reinterpret_cast<char*>(&_impl_.upper_limit_),
          reinterpret_cast<char*>(&other->_impl_.upper_limit_));
}

std::string ProfilePacket_Histogram_Bucket::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.Histogram.Bucket";
}


// ===================================================================

class ProfilePacket_Histogram::_Internal {
 public:
};

ProfilePacket_Histogram::ProfilePacket_Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.Histogram)
}
ProfilePacket_Histogram::ProfilePacket_Histogram(const ProfilePacket_Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProfilePacket_Histogram* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buckets_){from._impl_.buckets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.Histogram)
}

inline void ProfilePacket_Histogram::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buckets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProfilePacket_Histogram::~ProfilePacket_Histogram() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.Histogram)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_Histogram::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buckets_.~RepeatedPtrField();
}

void ProfilePacket_Histogram::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.Histogram)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buckets_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_Histogram::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilePacket_Histogram::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.Histogram)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buckets_size()); i < n; i++) {
    const auto& repfield = this->_internal_buckets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.Histogram)
  return target;
}

size_t ProfilePacket_Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.Histogram)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->_impl_.buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_Histogram::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProfilePacket_Histogram*>(
      &from));
}

void ProfilePacket_Histogram::MergeFrom(const ProfilePacket_Histogram& from) {
  ProfilePacket_Histogram* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.Histogram)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buckets_.MergeFrom(from._impl_.buckets_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProfilePacket_Histogram::CopyFrom(const ProfilePacket_Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_Histogram::IsInitialized() const {
  return true;
}

void ProfilePacket_Histogram::InternalSwap(ProfilePacket_Histogram* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buckets_.InternalSwap(&other->_impl_.buckets_);
}

std::string ProfilePacket_Histogram::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.Histogram";
}


// ===================================================================

class ProfilePacket_ProcessStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_ProcessStats>()._impl_._has_bits_);
  static void set_has_unwinding_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heap_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_reparses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ProfilePacket_Histogram& unwinding_time_us(const ProfilePacket_ProcessStats* msg);
  static void set_has_unwinding_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_unwinding_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_spinlock_blocked_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::perfetto::protos::ProfilePacket_Histogram&
ProfilePacket_ProcessStats::_Internal::unwinding_time_us(const ProfilePacket_ProcessStats* msg) {
  return *msg->_impl_.unwinding_time_us_;
}
ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.ProcessStats)
}
ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(const ProfilePacket_ProcessStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProfilePacket_ProcessStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unwinding_time_us_){nullptr}
    , decltype(_impl_.unwinding_errors_){}
    , decltype(_impl_.heap_samples_){}
    , decltype(_impl_.map_reparses_){}
    , decltype(_impl_.total_unwinding_time_us_){}
    , decltype(_impl_.client_spinlock_blocked_us_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_unwinding_time_us()) {
    _this->_impl_.unwinding_time_us_ = new ::perfetto::protos::ProfilePacket_Histogram(*from._impl_.unwinding_time_us_);
  }
  ::memcpy(&_impl_.unwinding_errors_, &from._impl_.unwinding_errors_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_spinlock_blocked_us_) -
    reinterpret_cast<char*>(&_impl_.unwinding_errors_)) + sizeof(_impl_.client_spinlock_blocked_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.ProcessStats)
}

inline void ProfilePacket_ProcessStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unwinding_time_us_){nullptr}
    , decltype(_impl_.unwinding_errors_){uint64_t{0u}}
    , decltype(_impl_.heap_samples_){uint64_t{0u}}
    , decltype(_impl_.map_reparses_){uint64_t{0u}}
    , decltype(_impl_.total_unwinding_time_us_){uint64_t{0u}}
    , decltype(_impl_.client_spinlock_blocked_us_){uint64_t{0u}}
  };
}

ProfilePacket_ProcessStats::~ProfilePacket_ProcessStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.ProcessStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_ProcessStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.unwinding_time_us_;
}

void ProfilePacket_ProcessStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_ProcessStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.ProcessStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.unwinding_time_us_ != nullptr);
    _impl_.unwinding_time_us_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.unwinding_errors_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_spinlock_blocked_us_) -
        reinterpret_cast<char*>(&_impl_.unwinding_errors_)) + sizeof(_impl_.client_spinlock_blocked_us_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_ProcessStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 unwinding_errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unwinding_errors(&has_bits);
          _impl_.unwinding_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 heap_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_heap_samples(&has_bits);
          _impl_.heap_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 map_reparses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_map_reparses(&has_bits);
          _impl_.map_reparses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unwinding_time_us(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_unwinding_time_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_total_unwinding_time_us(&has_bits);
          _impl_.total_unwinding_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_spinlock_blocked_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_client_spinlock_blocked_us(&has_bits);
          _impl_.client_spinlock_blocked_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilePacket_ProcessStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.ProcessStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 unwinding_errors = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unwinding_errors(), target);
  }

  // optional uint64 heap_samples = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_heap_samples(), target);
  }

  // optional uint64 map_reparses = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_map_reparses(), target);
  }

  // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::unwinding_time_us(this),
        _Internal::unwinding_time_us(this).GetCachedSize(), target, stream);
  }

  // optional uint64 total_unwinding_time_us = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_total_unwinding_time_us(), target);
  }

  // optional uint64 client_spinlock_blocked_us = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_client_spinlock_blocked_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.ProcessStats)
  return target;
}

size_t ProfilePacket_ProcessStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.ProcessStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unwinding_time_us_);
    }

    // optional uint64 unwinding_errors = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unwinding_errors());
    }

    // optional uint64 heap_samples = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_heap_samples());
    }

    // optional uint64 map_reparses = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_map_reparses());
    }

    // optional uint64 total_unwinding_time_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_unwinding_time_us());
    }

    // optional uint64 client_spinlock_blocked_us = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_spinlock_blocked_us());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_ProcessStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProfilePacket_ProcessStats*>(
      &from));
}

void ProfilePacket_ProcessStats::MergeFrom(const ProfilePacket_ProcessStats& from) {
  ProfilePacket_ProcessStats* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.ProcessStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unwinding_time_us()->::perfetto::protos::ProfilePacket_Histogram::MergeFrom(
          from._internal_unwinding_time_us());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unwinding_errors_ = from._impl_.unwinding_errors_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.heap_samples_ = from._impl_.heap_samples_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.map_reparses_ = from._impl_.map_reparses_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.total_unwinding_time_us_ = from._impl_.total_unwinding_time_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.client_spinlock_blocked_us_ = from._impl_.client_spinlock_blocked_us_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProfilePacket_ProcessStats::CopyFrom(const ProfilePacket_ProcessStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.ProcessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_ProcessStats::IsInitialized() const {
  return true;
}

void ProfilePacket_ProcessStats::InternalSwap(ProfilePacket_ProcessStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessStats, _impl_.client_spinlock_blocked_us_)
      + sizeof(ProfilePacket_ProcessStats::_impl_.client_spinlock_blocked_us_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessStats, _impl_.unwinding_time_us_)>(
          reinterpret_cast<char*>(&_impl_.unwinding_time_us_),
          reinterpret_cast<char*>(&other->_impl_.unwinding_time_us_));
}

std::string ProfilePacket_ProcessStats::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.ProcessStats";
}


// ===================================================================

class ProfilePacket_ProcessHeapSamples::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_ProcessHeapSamples>()._impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rejected_concurrent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buffer_overran(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_buffer_corrupted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hit_guardrail(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heap_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_orig_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::ProfilePacket_ProcessStats& stats(const ProfilePacket_ProcessHeapSamples* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::ProfilePacket_ProcessStats&
ProfilePacket_ProcessHeapSamples::_Internal::stats(const ProfilePacket_ProcessHeapSamples* msg) {
  return *msg->_impl_.stats_;
}
ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
}
ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(const ProfilePacket_ProcessHeapSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProfilePacket_ProcessHeapSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){from._impl_.samples_}
    , decltype(_impl_.heap_name_){}
    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.from_startup_){}
    , decltype(_impl_.rejected_concurrent_){}
    , decltype(_impl_.disconnected_){}
    , decltype(_impl_.buffer_overran_){}
    , decltype(_impl_.buffer_corrupted_){}
    , decltype(_impl_.hit_guardrail_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.sampling_interval_bytes_){}
    , decltype(_impl_.orig_sampling_interval_bytes_){}
    , decltype(_impl_.client_error_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.heap_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heap_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_heap_name()) {
    _this->_impl_.heap_name_.Set(from._internal_heap_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::perfetto::protos::ProfilePacket_ProcessStats(*from._impl_.stats_);
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_error_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.client_error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
}

inline void ProfilePacket_ProcessHeapSamples::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){arena}
    , decltype(_impl_.heap_name_){}
    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.pid_){uint64_t{0u}}
    , decltype(_impl_.from_startup_){false}
    , decltype(_impl_.rejected_concurrent_){false}
    , decltype(_impl_.disconnected_){false}
    , decltype(_impl_.buffer_overran_){false}
    , decltype(_impl_.buffer_corrupted_){false}
    , decltype(_impl_.hit_guardrail_){false}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.sampling_interval_bytes_){uint64_t{0u}}
    , decltype(_impl_.orig_sampling_interval_bytes_){uint64_t{0u}}
    , decltype(_impl_.client_error_){0}
  };
  _impl_.heap_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heap_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfilePacket_ProcessHeapSamples::~ProfilePacket_ProcessHeapSamples() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_ProcessHeapSamples::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.samples_.~RepeatedPtrField();
  _impl_.heap_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void ProfilePacket_ProcessHeapSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_ProcessHeapSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.samples_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heap_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stats_ != nullptr);
      _impl_.stats_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.buffer_corrupted_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.buffer_corrupted_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.hit_guardrail_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_error_) -
        reinterpret_cast<char*>(&_impl_.hit_guardrail_)) + sizeof(_impl_.client_error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_ProcessHeapSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool from_startup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_from_startup(&has_bits);
          _impl_.from_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rejected_concurrent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rejected_concurrent(&has_bits);
          _impl_.rejected_concurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disconnected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_disconnected(&has_bits);
          _impl_.disconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool buffer_overran = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_buffer_overran(&has_bits);
          _impl_.buffer_overran_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool buffer_corrupted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_buffer_corrupted(&has_bits);
          _impl_.buffer_corrupted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hit_guardrail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_hit_guardrail(&has_bits);
          _impl_.hit_guardrail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string heap_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_heap_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sampling_interval_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_sampling_interval_bytes(&has_bits);
          _impl_.sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 orig_sampling_interval_bytes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_orig_sampling_interval_bytes(&has_bits);
          _impl_.orig_sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError_IsValid(val))) {
            _internal_set_client_error(static_cast<::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilePacket_ProcessHeapSamples::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 pid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool from_startup = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_from_startup(), target);
  }

  // optional bool rejected_concurrent = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_rejected_concurrent(), target);
  }

  // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // optional bool disconnected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_disconnected(), target);
  }

  // optional bool buffer_overran = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_buffer_overran(), target);
  }

  // optional bool buffer_corrupted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_buffer_corrupted(), target);
  }

  // optional uint64 timestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_timestamp(), target);
  }

  // optional bool hit_guardrail = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_hit_guardrail(), target);
  }

  // optional string heap_name = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_heap_name(), target);
  }

  // optional uint64 sampling_interval_bytes = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_sampling_interval_bytes(), target);
  }

  // optional uint64 orig_sampling_interval_bytes = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_orig_sampling_interval_bytes(), target);
  }

  // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_client_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  return target;
}

size_t ProfilePacket_ProcessHeapSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_impl_.samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string heap_name = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heap_name());
    }

    // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_);
    }

    // optional uint64 pid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pid());
    }

    // optional bool from_startup = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rejected_concurrent = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool disconnected = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool buffer_overran = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool buffer_corrupted = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool hit_guardrail = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint64 timestamp = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 sampling_interval_bytes = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sampling_interval_bytes());
    }

    // optional uint64 orig_sampling_interval_bytes = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_orig_sampling_interval_bytes());
    }

    // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_client_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_ProcessHeapSamples::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProfilePacket_ProcessHeapSamples*>(
      &from));
}

void ProfilePacket_ProcessHeapSamples::MergeFrom(const ProfilePacket_ProcessHeapSamples& from) {
  ProfilePacket_ProcessHeapSamples* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.samples_.MergeFrom(from._impl_.samples_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_heap_name(from._internal_heap_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stats()->::perfetto::protos::ProfilePacket_ProcessStats::MergeFrom(
          from._internal_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.from_startup_ = from._impl_.from_startup_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rejected_concurrent_ = from._impl_.rejected_concurrent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.disconnected_ = from._impl_.disconnected_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.buffer_overran_ = from._impl_.buffer_overran_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.buffer_corrupted_ = from._impl_.buffer_corrupted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hit_guardrail_ = from._impl_.hit_guardrail_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.sampling_interval_bytes_ = from._impl_.sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.orig_sampling_interval_bytes_ = from._impl_.orig_sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.client_error_ = from._impl_.client_error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProfilePacket_ProcessHeapSamples::CopyFrom(const ProfilePacket_ProcessHeapSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_ProcessHeapSamples::IsInitialized() const {
  return true;
}

void ProfilePacket_ProcessHeapSamples::InternalSwap(ProfilePacket_ProcessHeapSamples* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.samples_.InternalSwap(&other->_impl_.samples_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.heap_name_, lhs_arena,
      &other->_impl_.heap_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessHeapSamples, _impl_.client_error_)
      + sizeof(ProfilePacket_ProcessHeapSamples::_impl_.client_error_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessHeapSamples, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

std::string ProfilePacket_ProcessHeapSamples::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.ProcessHeapSamples";
}


// ===================================================================

class ProfilePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket>()._impl_._has_bits_);
  static void set_has_continued(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ProfilePacket::clear_strings() {
  _impl_.strings_.Clear();
}
void ProfilePacket::clear_mappings() {
  _impl_.mappings_.Clear();
}
void ProfilePacket::clear_frames() {
  _impl_.frames_.Clear();
}
void ProfilePacket::clear_callstacks() {
  _impl_.callstacks_.Clear();
}
ProfilePacket::ProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket)
}
ProfilePacket::ProfilePacket(const ProfilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProfilePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strings_){from._impl_.strings_}
    , decltype(_impl_.frames_){from._impl_.frames_}
    , decltype(_impl_.callstacks_){from._impl_.callstacks_}
    , decltype(_impl_.mappings_){from._impl_.mappings_}
    , decltype(_impl_.process_dumps_){from._impl_.process_dumps_}
    , decltype(_impl_.index_){}
    , decltype(_impl_.continued_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.continued_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.continued_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket)
}

inline void ProfilePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strings_){arena}
    , decltype(_impl_.frames_){arena}
    , decltype(_impl_.callstacks_){arena}
    , decltype(_impl_.mappings_){arena}
    , decltype(_impl_.process_dumps_){arena}
    , decltype(_impl_.index_){uint64_t{0u}}
    , decltype(_impl_.continued_){false}
  };
}

ProfilePacket::~ProfilePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strings_.~RepeatedPtrField();
  _impl_.frames_.~RepeatedPtrField();
  _impl_.callstacks_.~RepeatedPtrField();
  _impl_.mappings_.~RepeatedPtrField();
  _impl_.process_dumps_.~RepeatedPtrField();
}

void ProfilePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strings_.Clear();
  _impl_.frames_.Clear();
  _impl_.callstacks_.Clear();
  _impl_.mappings_.Clear();
  _impl_.process_dumps_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.continued_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.continued_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.InternedString strings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.Frame frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.Callstack callstacks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_callstacks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.Mapping mappings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_process_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool continued = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_continued(&has_bits);
          _impl_.continued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.InternedString strings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_strings_size()); i < n; i++) {
    const auto& repfield = this->_internal_strings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.Frame frames = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.Callstack callstacks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_callstacks_size()); i < n; i++) {
    const auto& repfield = this->_internal_callstacks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.Mapping mappings = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mappings_size()); i < n; i++) {
    const auto& repfield = this->_internal_mappings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_process_dumps_size()); i < n; i++) {
    const auto& repfield = this->_internal_process_dumps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool continued = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_continued(), target);
  }

  // optional uint64 index = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket)
  return target;
}

size_t ProfilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.InternedString strings = 1;
  total_size += 1UL * this->_internal_strings_size();
  for (const auto& msg : this->_impl_.strings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Frame frames = 2;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->_impl_.frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Callstack callstacks = 3;
  total_size += 1UL * this->_internal_callstacks_size();
  for (const auto& msg : this->_impl_.callstacks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Mapping mappings = 4;
  total_size += 1UL * this->_internal_mappings_size();
  for (const auto& msg : this->_impl_.mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  total_size += 1UL * this->_internal_process_dumps_size();
  for (const auto& msg : this->_impl_.process_dumps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 index = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
    }

    // optional bool continued = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProfilePacket*>(
      &from));
}

void ProfilePacket::MergeFrom(const ProfilePacket& from) {
  ProfilePacket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.strings_.MergeFrom(from._impl_.strings_);
  _this->_impl_.frames_.MergeFrom(from._impl_.frames_);
  _this->_impl_.callstacks_.MergeFrom(from._impl_.callstacks_);
  _this->_impl_.mappings_.MergeFrom(from._impl_.mappings_);
  _this->_impl_.process_dumps_.MergeFrom(from._impl_.process_dumps_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.continued_ = from._impl_.continued_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProfilePacket::CopyFrom(const ProfilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket::IsInitialized() const {
  return true;
}

void ProfilePacket::InternalSwap(ProfilePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.strings_.InternalSwap(&other->_impl_.strings_);
  _impl_.frames_.InternalSwap(&other->_impl_.frames_);
  _impl_.callstacks_.InternalSwap(&other->_impl_.callstacks_);
  _impl_.mappings_.InternalSwap(&other->_impl_.mappings_);
  _impl_.process_dumps_.InternalSwap(&other->_impl_.process_dumps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket, _impl_.continued_)
      + sizeof(ProfilePacket::_impl_.continued_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

std::string ProfilePacket::GetTypeName() const {
  return "perfetto.protos.ProfilePacket";
}


// ===================================================================

class StreamingAllocation::_Internal {
 public:
};

StreamingAllocation::StreamingAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingAllocation)
}
StreamingAllocation::StreamingAllocation(const StreamingAllocation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StreamingAllocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){from._impl_.address_}
    , decltype(_impl_.size_){from._impl_.size_}
    , decltype(_impl_.sample_size_){from._impl_.sample_size_}
    , decltype(_impl_.clock_monotonic_coarse_timestamp_){from._impl_.clock_monotonic_coarse_timestamp_}
    , decltype(_impl_.heap_id_){from._impl_.heap_id_}
    , decltype(_impl_.sequence_number_){from._impl_.sequence_number_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingAllocation)
}

inline void StreamingAllocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){arena}
    , decltype(_impl_.size_){arena}
    , decltype(_impl_.sample_size_){arena}
    , decltype(_impl_.clock_monotonic_coarse_timestamp_){arena}
    , decltype(_impl_.heap_id_){arena}
    , decltype(_impl_.sequence_number_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamingAllocation::~StreamingAllocation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingAllocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamingAllocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.~RepeatedField();
  _impl_.size_.~RepeatedField();
  _impl_.sample_size_.~RepeatedField();
  _impl_.clock_monotonic_coarse_timestamp_.~RepeatedField();
  _impl_.heap_id_.~RepeatedField();
  _impl_.sequence_number_.~RepeatedField();
}

void StreamingAllocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamingAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingAllocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.Clear();
  _impl_.size_.Clear();
  _impl_.sample_size_.Clear();
  _impl_.clock_monotonic_coarse_timestamp_.Clear();
  _impl_.heap_id_.Clear();
  _impl_.sequence_number_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StreamingAllocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_size(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 sample_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sample_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sample_size(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 clock_monotonic_coarse_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_clock_monotonic_coarse_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_clock_monotonic_coarse_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 heap_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heap_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heap_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 sequence_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sequence_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequence_number(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingAllocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingAllocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(i), target);
  }

  // repeated uint64 size = 2;
  for (int i = 0, n = this->_internal_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(i), target);
  }

  // repeated uint64 sample_size = 3;
  for (int i = 0, n = this->_internal_sample_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sample_size(i), target);
  }

  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  for (int i = 0, n = this->_internal_clock_monotonic_coarse_timestamp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_clock_monotonic_coarse_timestamp(i), target);
  }

  // repeated uint32 heap_id = 5;
  for (int i = 0, n = this->_internal_heap_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heap_id(i), target);
  }

  // repeated uint64 sequence_number = 6;
  for (int i = 0, n = this->_internal_sequence_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sequence_number(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingAllocation)
  return target;
}

size_t StreamingAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingAllocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.address_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_address_size());
    total_size += data_size;
  }

  // repeated uint64 size = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.size_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_size_size());
    total_size += data_size;
  }

  // repeated uint64 sample_size = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.sample_size_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sample_size_size());
    total_size += data_size;
  }

  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.clock_monotonic_coarse_timestamp_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_clock_monotonic_coarse_timestamp_size());
    total_size += data_size;
  }

  // repeated uint32 heap_id = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.heap_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_heap_id_size());
    total_size += data_size;
  }

  // repeated uint64 sequence_number = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.sequence_number_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sequence_number_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingAllocation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StreamingAllocation*>(
      &from));
}

void StreamingAllocation::MergeFrom(const StreamingAllocation& from) {
  StreamingAllocation* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingAllocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_.MergeFrom(from._impl_.address_);
  _this->_impl_.size_.MergeFrom(from._impl_.size_);
  _this->_impl_.sample_size_.MergeFrom(from._impl_.sample_size_);
  _this->_impl_.clock_monotonic_coarse_timestamp_.MergeFrom(from._impl_.clock_monotonic_coarse_timestamp_);
  _this->_impl_.heap_id_.MergeFrom(from._impl_.heap_id_);
  _this->_impl_.sequence_number_.MergeFrom(from._impl_.sequence_number_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StreamingAllocation::CopyFrom(const StreamingAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingAllocation::IsInitialized() const {
  return true;
}

void StreamingAllocation::InternalSwap(StreamingAllocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
  _impl_.size_.InternalSwap(&other->_impl_.size_);
  _impl_.sample_size_.InternalSwap(&other->_impl_.sample_size_);
  _impl_.clock_monotonic_coarse_timestamp_.InternalSwap(&other->_impl_.clock_monotonic_coarse_timestamp_);
  _impl_.heap_id_.InternalSwap(&other->_impl_.heap_id_);
  _impl_.sequence_number_.InternalSwap(&other->_impl_.sequence_number_);
}

std::string StreamingAllocation::GetTypeName() const {
  return "perfetto.protos.StreamingAllocation";
}


// ===================================================================

class StreamingFree::_Internal {
 public:
};

StreamingFree::StreamingFree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingFree)
}
StreamingFree::StreamingFree(const StreamingFree& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StreamingFree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){from._impl_.address_}
    , decltype(_impl_.heap_id_){from._impl_.heap_id_}
    , decltype(_impl_.sequence_number_){from._impl_.sequence_number_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingFree)
}

inline void StreamingFree::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){arena}
    , decltype(_impl_.heap_id_){arena}
    , decltype(_impl_.sequence_number_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamingFree::~StreamingFree() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingFree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamingFree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.~RepeatedField();
  _impl_.heap_id_.~RepeatedField();
  _impl_.sequence_number_.~RepeatedField();
}

void StreamingFree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamingFree::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingFree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.Clear();
  _impl_.heap_id_.Clear();
  _impl_.sequence_number_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StreamingFree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 heap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heap_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heap_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sequence_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequence_number(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingFree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingFree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(i), target);
  }

  // repeated uint32 heap_id = 2;
  for (int i = 0, n = this->_internal_heap_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heap_id(i), target);
  }

  // repeated uint64 sequence_number = 3;
  for (int i = 0, n = this->_internal_sequence_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_number(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingFree)
  return target;
}

size_t StreamingFree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingFree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.address_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_address_size());
    total_size += data_size;
  }

  // repeated uint32 heap_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.heap_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_heap_id_size());
    total_size += data_size;
  }

  // repeated uint64 sequence_number = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.sequence_number_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sequence_number_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingFree::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StreamingFree*>(
      &from));
}

void StreamingFree::MergeFrom(const StreamingFree& from) {
  StreamingFree* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingFree)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_.MergeFrom(from._impl_.address_);
  _this->_impl_.heap_id_.MergeFrom(from._impl_.heap_id_);
  _this->_impl_.sequence_number_.MergeFrom(from._impl_.sequence_number_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StreamingFree::CopyFrom(const StreamingFree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingFree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingFree::IsInitialized() const {
  return true;
}

void StreamingFree::InternalSwap(StreamingFree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
  _impl_.heap_id_.InternalSwap(&other->_impl_.heap_id_);
  _impl_.sequence_number_.InternalSwap(&other->_impl_.sequence_number_);
}

std::string StreamingFree::GetTypeName() const {
  return "perfetto.protos.StreamingFree";
}


// ===================================================================

class StreamingProfilePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamingProfilePacket>()._impl_._has_bits_);
  static void set_has_process_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StreamingProfilePacket::StreamingProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingProfilePacket)
}
StreamingProfilePacket::StreamingProfilePacket(const StreamingProfilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StreamingProfilePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callstack_iid_){from._impl_.callstack_iid_}
    , decltype(_impl_.timestamp_delta_us_){from._impl_.timestamp_delta_us_}
    , decltype(_impl_.process_priority_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.process_priority_ = from._impl_.process_priority_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingProfilePacket)
}

inline void StreamingProfilePacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callstack_iid_){arena}
    , decltype(_impl_.timestamp_delta_us_){arena}
    , decltype(_impl_.process_priority_){0}
  };
}

StreamingProfilePacket::~StreamingProfilePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingProfilePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamingProfilePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.callstack_iid_.~RepeatedField();
  _impl_.timestamp_delta_us_.~RepeatedField();
}

void StreamingProfilePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamingProfilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingProfilePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.callstack_iid_.Clear();
  _impl_.timestamp_delta_us_.Clear();
  _impl_.process_priority_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StreamingProfilePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 callstack_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_callstack_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_callstack_iid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 timestamp_delta_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_timestamp_delta_us(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 process_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_process_priority(&has_bits);
          _impl_.process_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingProfilePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingProfilePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 callstack_iid = 1;
  for (int i = 0, n = this->_internal_callstack_iid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_callstack_iid(i), target);
  }

  // repeated int64 timestamp_delta_us = 2;
  for (int i = 0, n = this->_internal_timestamp_delta_us_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp_delta_us(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 process_priority = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_process_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingProfilePacket)
  return target;
}

size_t StreamingProfilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingProfilePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 callstack_iid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.callstack_iid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_callstack_iid_size());
    total_size += data_size;
  }

  // repeated int64 timestamp_delta_us = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.timestamp_delta_us_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_timestamp_delta_us_size());
    total_size += data_size;
  }

  // optional int32 process_priority = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingProfilePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StreamingProfilePacket*>(
      &from));
}

void StreamingProfilePacket::MergeFrom(const StreamingProfilePacket& from) {
  StreamingProfilePacket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingProfilePacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.callstack_iid_.MergeFrom(from._impl_.callstack_iid_);
  _this->_impl_.timestamp_delta_us_.MergeFrom(from._impl_.timestamp_delta_us_);
  if (from._internal_has_process_priority()) {
    _this->_internal_set_process_priority(from._internal_process_priority());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StreamingProfilePacket::CopyFrom(const StreamingProfilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingProfilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingProfilePacket::IsInitialized() const {
  return true;
}

void StreamingProfilePacket::InternalSwap(StreamingProfilePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.callstack_iid_.InternalSwap(&other->_impl_.callstack_iid_);
  _impl_.timestamp_delta_us_.InternalSwap(&other->_impl_.timestamp_delta_us_);
  swap(_impl_.process_priority_, other->_impl_.process_priority_);
}

std::string StreamingProfilePacket::GetTypeName() const {
  return "perfetto.protos.StreamingProfilePacket";
}


// ===================================================================

class Profiling::_Internal {
 public:
};

Profiling::Profiling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Profiling)
}
Profiling::Profiling(const Profiling& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Profiling* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Profiling)
}

inline void Profiling::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

Profiling::~Profiling() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Profiling)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Profiling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Profiling::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Profiling::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Profiling)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Profiling::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Profiling::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Profiling)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Profiling)
  return target;
}

size_t Profiling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Profiling)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profiling::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Profiling*>(
      &from));
}

void Profiling::MergeFrom(const Profiling& from) {
  Profiling* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Profiling)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Profiling::CopyFrom(const Profiling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Profiling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profiling::IsInitialized() const {
  return true;
}

void Profiling::InternalSwap(Profiling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string Profiling::GetTypeName() const {
  return "perfetto.protos.Profiling";
}


// ===================================================================

class PerfSample_ProducerEvent::_Internal {
 public:
};

PerfSample_ProducerEvent::PerfSample_ProducerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSample.ProducerEvent)
}
PerfSample_ProducerEvent::PerfSample_ProducerEvent(const PerfSample_ProducerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfSample_ProducerEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_source_stop_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_optional_source_stop_reason();
  switch (from.optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      _this->_internal_set_source_stop_reason(from._internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSample.ProducerEvent)
}

inline void PerfSample_ProducerEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_source_stop_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_source_stop_reason();
}

PerfSample_ProducerEvent::~PerfSample_ProducerEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSample.ProducerEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfSample_ProducerEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_source_stop_reason()) {
    clear_optional_source_stop_reason();
  }
}

void PerfSample_ProducerEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfSample_ProducerEvent::clear_optional_source_stop_reason() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample.ProducerEvent)
  switch (optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      // No need to clear
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_SOURCE_STOP_REASON_NOT_SET;
}


void PerfSample_ProducerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSample.ProducerEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_source_stop_reason();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfSample_ProducerEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason_IsValid(val))) {
            _internal_set_source_stop_reason(static_cast<::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfSample_ProducerEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSample.ProducerEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
  if (_internal_has_source_stop_reason()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source_stop_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSample.ProducerEvent)
  return target;
}

size_t PerfSample_ProducerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSample.ProducerEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_source_stop_reason_case()) {
    // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
    case kSourceStopReason: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfSample_ProducerEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfSample_ProducerEvent*>(
      &from));
}

void PerfSample_ProducerEvent::MergeFrom(const PerfSample_ProducerEvent& from) {
  PerfSample_ProducerEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSample.ProducerEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      _this->_internal_set_source_stop_reason(from._internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfSample_ProducerEvent::CopyFrom(const PerfSample_ProducerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSample.ProducerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSample_ProducerEvent::IsInitialized() const {
  return true;
}

void PerfSample_ProducerEvent::InternalSwap(PerfSample_ProducerEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.optional_source_stop_reason_, other->_impl_.optional_source_stop_reason_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string PerfSample_ProducerEvent::GetTypeName() const {
  return "perfetto.protos.PerfSample.ProducerEvent";
}


// ===================================================================

class PerfSample::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfSample>()._impl_._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cpu_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timebase_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_callstack_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kernel_records_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::PerfSample_ProducerEvent& producer_event(const PerfSample* msg);
  static void set_has_producer_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::PerfSample_ProducerEvent&
PerfSample::_Internal::producer_event(const PerfSample* msg) {
  return *msg->_impl_.producer_event_;
}
PerfSample::PerfSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSample)
}
PerfSample::PerfSample(const PerfSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_event_){nullptr}
    , decltype(_impl_.cpu_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.callstack_iid_){}
    , decltype(_impl_.tid_){}
    , decltype(_impl_.cpu_mode_){}
    , decltype(_impl_.timebase_count_){}
    , decltype(_impl_.kernel_records_lost_){}
    , decltype(_impl_.optional_unwind_error_){}
    , decltype(_impl_.optional_sample_skipped_reason_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_producer_event()) {
    _this->_impl_.producer_event_ = new ::perfetto::protos::PerfSample_ProducerEvent(*from._impl_.producer_event_);
  }
  ::memcpy(&_impl_.cpu_, &from._impl_.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kernel_records_lost_) -
    reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.kernel_records_lost_));
  clear_has_optional_unwind_error();
  switch (from.optional_unwind_error_case()) {
    case kUnwindError: {
      _this->_internal_set_unwind_error(from._internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  clear_has_optional_sample_skipped_reason();
  switch (from.optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      _this->_internal_set_sample_skipped_reason(from._internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSample)
}

inline void PerfSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_event_){nullptr}
    , decltype(_impl_.cpu_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.callstack_iid_){uint64_t{0u}}
    , decltype(_impl_.tid_){0u}
    , decltype(_impl_.cpu_mode_){0}
    , decltype(_impl_.timebase_count_){uint64_t{0u}}
    , decltype(_impl_.kernel_records_lost_){uint64_t{0u}}
    , decltype(_impl_.optional_unwind_error_){}
    , decltype(_impl_.optional_sample_skipped_reason_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_unwind_error();
  clear_has_optional_sample_skipped_reason();
}

PerfSample::~PerfSample() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.producer_event_;
  if (has_optional_unwind_error()) {
    clear_optional_unwind_error();
  }
  if (has_optional_sample_skipped_reason()) {
    clear_optional_sample_skipped_reason();
  }
}

void PerfSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfSample::clear_optional_unwind_error() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample)
  switch (optional_unwind_error_case()) {
    case kUnwindError: {
      // No need to clear
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_UNWIND_ERROR_NOT_SET;
}

void PerfSample::clear_optional_sample_skipped_reason() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample)
  switch (optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      // No need to clear
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET;
}


void PerfSample::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.producer_event_ != nullptr);
    _impl_.producer_event_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kernel_records_lost_) -
        reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.kernel_records_lost_));
  }
  clear_optional_unwind_error();
  clear_optional_sample_skipped_reason();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tid(&has_bits);
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 callstack_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_callstack_iid(&has_bits);
          _impl_.callstack_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::Profiling_CpuMode_IsValid(val))) {
            _internal_set_cpu_mode(static_cast<::perfetto::protos::Profiling_CpuMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timebase_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timebase_count(&has_bits);
          _impl_.timebase_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::Profiling_StackUnwindError_IsValid(val))) {
            _internal_set_unwind_error(static_cast<::perfetto::protos::Profiling_StackUnwindError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 kernel_records_lost = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_kernel_records_lost(&has_bits);
          _impl_.kernel_records_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfSample_SampleSkipReason_IsValid(val))) {
            _internal_set_sample_skipped_reason(static_cast<::perfetto::protos::PerfSample_SampleSkipReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_producer_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cpu(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tid(), target);
  }

  // optional uint64 callstack_iid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_callstack_iid(), target);
  }

  // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cpu_mode(), target);
  }

  // optional uint64 timebase_count = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timebase_count(), target);
  }

  // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
  if (_internal_has_unwind_error()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_unwind_error(), target);
  }

  // optional uint64 kernel_records_lost = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_kernel_records_lost(), target);
  }

  // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
  if (_internal_has_sample_skipped_reason()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_sample_skipped_reason(), target);
  }

  // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::producer_event(this),
        _Internal::producer_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSample)
  return target;
}

size_t PerfSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.producer_event_);
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint64 callstack_iid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_callstack_iid());
    }

    // optional uint32 tid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tid());
    }

    // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cpu_mode());
    }

    // optional uint64 timebase_count = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timebase_count());
    }

    // optional uint64 kernel_records_lost = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_kernel_records_lost());
    }

  }
  switch (optional_unwind_error_case()) {
    // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
    case kUnwindError: {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  switch (optional_sample_skipped_reason_case()) {
    // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
    case kSampleSkippedReason: {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfSample*>(
      &from));
}

void PerfSample::MergeFrom(const PerfSample& from) {
  PerfSample* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_producer_event()->::perfetto::protos::PerfSample_ProducerEvent::MergeFrom(
          from._internal_producer_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.callstack_iid_ = from._impl_.callstack_iid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tid_ = from._impl_.tid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cpu_mode_ = from._impl_.cpu_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timebase_count_ = from._impl_.timebase_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.kernel_records_lost_ = from._impl_.kernel_records_lost_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.optional_unwind_error_case()) {
    case kUnwindError: {
      _this->_internal_set_unwind_error(from._internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  switch (from.optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      _this->_internal_set_sample_skipped_reason(from._internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfSample::CopyFrom(const PerfSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSample::IsInitialized() const {
  return true;
}

void PerfSample::InternalSwap(PerfSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfSample, _impl_.kernel_records_lost_)
      + sizeof(PerfSample::_impl_.kernel_records_lost_)
      - PROTOBUF_FIELD_OFFSET(PerfSample, _impl_.producer_event_)>(
          reinterpret_cast<char*>(&_impl_.producer_event_),
          reinterpret_cast<char*>(&other->_impl_.producer_event_));
  swap(_impl_.optional_unwind_error_, other->_impl_.optional_unwind_error_);
  swap(_impl_.optional_sample_skipped_reason_, other->_impl_.optional_sample_skipped_reason_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

std::string PerfSample::GetTypeName() const {
  return "perfetto.protos.PerfSample";
}


// ===================================================================

class PerfSampleDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfSampleDefaults>()._impl_._has_bits_);
  static const ::perfetto::protos::PerfEvents_Timebase& timebase(const PerfSampleDefaults* msg);
  static void set_has_timebase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_shard_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chosen_process_shard(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::PerfEvents_Timebase&
PerfSampleDefaults::_Internal::timebase(const PerfSampleDefaults* msg) {
  return *msg->_impl_.timebase_;
}
void PerfSampleDefaults::clear_timebase() {
  if (_impl_.timebase_ != nullptr) _impl_.timebase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PerfSampleDefaults::PerfSampleDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSampleDefaults)
}
PerfSampleDefaults::PerfSampleDefaults(const PerfSampleDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfSampleDefaults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timebase_){nullptr}
    , decltype(_impl_.process_shard_count_){}
    , decltype(_impl_.chosen_process_shard_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timebase()) {
    _this->_impl_.timebase_ = new ::perfetto::protos::PerfEvents_Timebase(*from._impl_.timebase_);
  }
  ::memcpy(&_impl_.process_shard_count_, &from._impl_.process_shard_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chosen_process_shard_) -
    reinterpret_cast<char*>(&_impl_.process_shard_count_)) + sizeof(_impl_.chosen_process_shard_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSampleDefaults)
}

inline void PerfSampleDefaults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timebase_){nullptr}
    , decltype(_impl_.process_shard_count_){0u}
    , decltype(_impl_.chosen_process_shard_){0u}
  };
}

PerfSampleDefaults::~PerfSampleDefaults() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSampleDefaults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfSampleDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timebase_;
}

void PerfSampleDefaults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfSampleDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSampleDefaults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.timebase_ != nullptr);
    _impl_.timebase_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.process_shard_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chosen_process_shard_) -
        reinterpret_cast<char*>(&_impl_.process_shard_count_)) + sizeof(_impl_.chosen_process_shard_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfSampleDefaults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timebase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 process_shard_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_process_shard_count(&has_bits);
          _impl_.process_shard_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chosen_process_shard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chosen_process_shard(&has_bits);
          _impl_.chosen_process_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfSampleDefaults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSampleDefaults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timebase(this),
        _Internal::timebase(this).GetCachedSize(), target, stream);
  }

  // optional uint32 process_shard_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_process_shard_count(), target);
  }

  // optional uint32 chosen_process_shard = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chosen_process_shard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSampleDefaults)
  return target;
}

size_t PerfSampleDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSampleDefaults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timebase_);
    }

    // optional uint32 process_shard_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_process_shard_count());
    }

    // optional uint32 chosen_process_shard = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chosen_process_shard());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfSampleDefaults::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfSampleDefaults*>(
      &from));
}

void PerfSampleDefaults::MergeFrom(const PerfSampleDefaults& from) {
  PerfSampleDefaults* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSampleDefaults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timebase()->::perfetto::protos::PerfEvents_Timebase::MergeFrom(
          from._internal_timebase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.process_shard_count_ = from._impl_.process_shard_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chosen_process_shard_ = from._impl_.chosen_process_shard_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfSampleDefaults::CopyFrom(const PerfSampleDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSampleDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSampleDefaults::IsInitialized() const {
  return true;
}

void PerfSampleDefaults::InternalSwap(PerfSampleDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfSampleDefaults, _impl_.chosen_process_shard_)
      + sizeof(PerfSampleDefaults::_impl_.chosen_process_shard_)
      - PROTOBUF_FIELD_OFFSET(PerfSampleDefaults, _impl_.timebase_)>(
          reinterpret_cast<char*>(&_impl_.timebase_),
          reinterpret_cast<char*>(&other->_impl_.timebase_));
}

std::string PerfSampleDefaults::GetTypeName() const {
  return "perfetto.protos.PerfSampleDefaults";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_HeapSample*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_HeapSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_HeapSample >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_Histogram_Bucket*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_Histogram_Bucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_Histogram_Bucket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_Histogram*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_Histogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_ProcessStats*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_ProcessStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_ProcessStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_ProcessHeapSamples*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingAllocation*
Arena::CreateMaybeMessage< ::perfetto::protos::StreamingAllocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingAllocation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingFree*
Arena::CreateMaybeMessage< ::perfetto::protos::StreamingFree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingFree >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingProfilePacket*
Arena::CreateMaybeMessage< ::perfetto::protos::StreamingProfilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingProfilePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Profiling*
Arena::CreateMaybeMessage< ::perfetto::protos::Profiling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Profiling >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSample_ProducerEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfSample_ProducerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSample_ProducerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSample*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSample >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSampleDefaults*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfSampleDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSampleDefaults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
