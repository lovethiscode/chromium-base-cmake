// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/heap_graph.proto

#include "protos/perfetto/trace/profiling/heap_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR HeapGraphRoot::HeapGraphRoot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_ids_)*/{}
  , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.root_type_)*/0} {}
struct HeapGraphRootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphRootDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphRootDefaultTypeInternal() {}
  union {
    HeapGraphRoot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphRootDefaultTypeInternal _HeapGraphRoot_default_instance_;
PROTOBUF_CONSTEXPR HeapGraphType::HeapGraphType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_field_id_)*/{}
  , /*decltype(_impl_._reference_field_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.class_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.location_id_)*/uint64_t{0u}
  , /*decltype(_impl_.object_size_)*/uint64_t{0u}
  , /*decltype(_impl_.superclass_id_)*/uint64_t{0u}
  , /*decltype(_impl_.classloader_id_)*/uint64_t{0u}
  , /*decltype(_impl_.kind_)*/0} {}
struct HeapGraphTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphTypeDefaultTypeInternal() {}
  union {
    HeapGraphType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphTypeDefaultTypeInternal _HeapGraphType_default_instance_;
PROTOBUF_CONSTEXPR HeapGraphObject::HeapGraphObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_field_id_)*/{}
  , /*decltype(_impl_._reference_field_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.reference_object_id_)*/{}
  , /*decltype(_impl_._reference_object_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.type_id_)*/uint64_t{0u}
  , /*decltype(_impl_.self_size_)*/uint64_t{0u}
  , /*decltype(_impl_.reference_field_id_base_)*/uint64_t{0u}
  , /*decltype(_impl_.native_allocation_registry_size_field_)*/int64_t{0}
  , /*decltype(_impl_.identifier_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HeapGraphObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphObjectDefaultTypeInternal() {}
  union {
    HeapGraphObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphObjectDefaultTypeInternal _HeapGraphObject_default_instance_;
PROTOBUF_CONSTEXPR HeapGraph::HeapGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_.field_names_)*/{}
  , /*decltype(_impl_.roots_)*/{}
  , /*decltype(_impl_.location_names_)*/{}
  , /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.continued_)*/false
  , /*decltype(_impl_.index_)*/uint64_t{0u}} {}
struct HeapGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphDefaultTypeInternal() {}
  union {
    HeapGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphDefaultTypeInternal _HeapGraph_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool HeapGraphRoot_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HeapGraphRoot_Type_strings[15] = {};

static const char HeapGraphRoot_Type_names[] =
  "ROOT_DEBUGGER"
  "ROOT_FINALIZING"
  "ROOT_INTERNED_STRING"
  "ROOT_JAVA_FRAME"
  "ROOT_JNI_GLOBAL"
  "ROOT_JNI_LOCAL"
  "ROOT_JNI_MONITOR"
  "ROOT_MONITOR_USED"
  "ROOT_NATIVE_STACK"
  "ROOT_REFERENCE_CLEANUP"
  "ROOT_STICKY_CLASS"
  "ROOT_THREAD_BLOCK"
  "ROOT_THREAD_OBJECT"
  "ROOT_UNKNOWN"
  "ROOT_VM_INTERNAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HeapGraphRoot_Type_entries[] = {
  { {HeapGraphRoot_Type_names + 0, 13}, 11 },
  { {HeapGraphRoot_Type_names + 13, 15}, 10 },
  { {HeapGraphRoot_Type_names + 28, 20}, 9 },
  { {HeapGraphRoot_Type_names + 48, 15}, 3 },
  { {HeapGraphRoot_Type_names + 63, 15}, 1 },
  { {HeapGraphRoot_Type_names + 78, 14}, 2 },
  { {HeapGraphRoot_Type_names + 92, 16}, 14 },
  { {HeapGraphRoot_Type_names + 108, 17}, 7 },
  { {HeapGraphRoot_Type_names + 125, 17}, 4 },
  { {HeapGraphRoot_Type_names + 142, 22}, 12 },
  { {HeapGraphRoot_Type_names + 164, 17}, 5 },
  { {HeapGraphRoot_Type_names + 181, 17}, 6 },
  { {HeapGraphRoot_Type_names + 198, 18}, 8 },
  { {HeapGraphRoot_Type_names + 216, 12}, 0 },
  { {HeapGraphRoot_Type_names + 228, 16}, 13 },
};

static const int HeapGraphRoot_Type_entries_by_number[] = {
  13, // 0 -> ROOT_UNKNOWN
  4, // 1 -> ROOT_JNI_GLOBAL
  5, // 2 -> ROOT_JNI_LOCAL
  3, // 3 -> ROOT_JAVA_FRAME
  8, // 4 -> ROOT_NATIVE_STACK
  10, // 5 -> ROOT_STICKY_CLASS
  11, // 6 -> ROOT_THREAD_BLOCK
  7, // 7 -> ROOT_MONITOR_USED
  12, // 8 -> ROOT_THREAD_OBJECT
  2, // 9 -> ROOT_INTERNED_STRING
  1, // 10 -> ROOT_FINALIZING
  0, // 11 -> ROOT_DEBUGGER
  9, // 12 -> ROOT_REFERENCE_CLEANUP
  14, // 13 -> ROOT_VM_INTERNAL
  6, // 14 -> ROOT_JNI_MONITOR
};

const std::string& HeapGraphRoot_Type_Name(
    HeapGraphRoot_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HeapGraphRoot_Type_entries,
          HeapGraphRoot_Type_entries_by_number,
          15, HeapGraphRoot_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HeapGraphRoot_Type_entries,
      HeapGraphRoot_Type_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HeapGraphRoot_Type_strings[idx].get();
}
bool HeapGraphRoot_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeapGraphRoot_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HeapGraphRoot_Type_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<HeapGraphRoot_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_UNKNOWN;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JNI_GLOBAL;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JNI_LOCAL;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JAVA_FRAME;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_NATIVE_STACK;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_STICKY_CLASS;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_THREAD_BLOCK;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_MONITOR_USED;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_THREAD_OBJECT;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_INTERNED_STRING;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_FINALIZING;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_DEBUGGER;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_REFERENCE_CLEANUP;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_VM_INTERNAL;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JNI_MONITOR;
constexpr HeapGraphRoot_Type HeapGraphRoot::Type_MIN;
constexpr HeapGraphRoot_Type HeapGraphRoot::Type_MAX;
constexpr int HeapGraphRoot::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool HeapGraphType_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HeapGraphType_Kind_strings[12] = {};

static const char HeapGraphType_Kind_names[] =
  "KIND_ARRAY"
  "KIND_CLASS"
  "KIND_CLASSLOADER"
  "KIND_DEXCACHE"
  "KIND_FINALIZER_REFERENCE"
  "KIND_NOREFERENCES"
  "KIND_NORMAL"
  "KIND_PHANTOM_REFERENCE"
  "KIND_SOFT_REFERENCE"
  "KIND_STRING"
  "KIND_UNKNOWN"
  "KIND_WEAK_REFERENCE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HeapGraphType_Kind_entries[] = {
  { {HeapGraphType_Kind_names + 0, 10}, 4 },
  { {HeapGraphType_Kind_names + 10, 10}, 5 },
  { {HeapGraphType_Kind_names + 20, 16}, 6 },
  { {HeapGraphType_Kind_names + 36, 13}, 7 },
  { {HeapGraphType_Kind_names + 49, 24}, 10 },
  { {HeapGraphType_Kind_names + 73, 17}, 2 },
  { {HeapGraphType_Kind_names + 90, 11}, 1 },
  { {HeapGraphType_Kind_names + 101, 22}, 11 },
  { {HeapGraphType_Kind_names + 123, 19}, 8 },
  { {HeapGraphType_Kind_names + 142, 11}, 3 },
  { {HeapGraphType_Kind_names + 153, 12}, 0 },
  { {HeapGraphType_Kind_names + 165, 19}, 9 },
};

static const int HeapGraphType_Kind_entries_by_number[] = {
  10, // 0 -> KIND_UNKNOWN
  6, // 1 -> KIND_NORMAL
  5, // 2 -> KIND_NOREFERENCES
  9, // 3 -> KIND_STRING
  0, // 4 -> KIND_ARRAY
  1, // 5 -> KIND_CLASS
  2, // 6 -> KIND_CLASSLOADER
  3, // 7 -> KIND_DEXCACHE
  8, // 8 -> KIND_SOFT_REFERENCE
  11, // 9 -> KIND_WEAK_REFERENCE
  4, // 10 -> KIND_FINALIZER_REFERENCE
  7, // 11 -> KIND_PHANTOM_REFERENCE
};

const std::string& HeapGraphType_Kind_Name(
    HeapGraphType_Kind value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HeapGraphType_Kind_entries,
          HeapGraphType_Kind_entries_by_number,
          12, HeapGraphType_Kind_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HeapGraphType_Kind_entries,
      HeapGraphType_Kind_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HeapGraphType_Kind_strings[idx].get();
}
bool HeapGraphType_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeapGraphType_Kind* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HeapGraphType_Kind_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<HeapGraphType_Kind>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HeapGraphType_Kind HeapGraphType::KIND_UNKNOWN;
constexpr HeapGraphType_Kind HeapGraphType::KIND_NORMAL;
constexpr HeapGraphType_Kind HeapGraphType::KIND_NOREFERENCES;
constexpr HeapGraphType_Kind HeapGraphType::KIND_STRING;
constexpr HeapGraphType_Kind HeapGraphType::KIND_ARRAY;
constexpr HeapGraphType_Kind HeapGraphType::KIND_CLASS;
constexpr HeapGraphType_Kind HeapGraphType::KIND_CLASSLOADER;
constexpr HeapGraphType_Kind HeapGraphType::KIND_DEXCACHE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_SOFT_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_WEAK_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_FINALIZER_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_PHANTOM_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::Kind_MIN;
constexpr HeapGraphType_Kind HeapGraphType::Kind_MAX;
constexpr int HeapGraphType::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class HeapGraphRoot::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraphRoot>()._impl_._has_bits_);
  static void set_has_root_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HeapGraphRoot::HeapGraphRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraphRoot)
}
HeapGraphRoot::HeapGraphRoot(const HeapGraphRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeapGraphRoot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_ids_){from._impl_.object_ids_}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.root_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.root_type_ = from._impl_.root_type_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraphRoot)
}

inline void HeapGraphRoot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_ids_){arena}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.root_type_){0}
  };
}

HeapGraphRoot::~HeapGraphRoot() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraphRoot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraphRoot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_ids_.~RepeatedField();
}

void HeapGraphRoot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraphRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraphRoot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_ids_.Clear();
  _impl_.root_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeapGraphRoot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 object_ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::HeapGraphRoot_Type_IsValid(val))) {
            _internal_set_root_type(static_cast<::perfetto::protos::HeapGraphRoot_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapGraphRoot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraphRoot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1 [packed = true];
  {
    int byte_size = _impl_._object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_object_ids(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_root_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraphRoot)
  return target;
}

size_t HeapGraphRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraphRoot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_root_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapGraphRoot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeapGraphRoot*>(
      &from));
}

void HeapGraphRoot::MergeFrom(const HeapGraphRoot& from) {
  HeapGraphRoot* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraphRoot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_ids_.MergeFrom(from._impl_.object_ids_);
  if (from._internal_has_root_type()) {
    _this->_internal_set_root_type(from._internal_root_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeapGraphRoot::CopyFrom(const HeapGraphRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraphRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraphRoot::IsInitialized() const {
  return true;
}

void HeapGraphRoot::InternalSwap(HeapGraphRoot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.object_ids_.InternalSwap(&other->_impl_.object_ids_);
  swap(_impl_.root_type_, other->_impl_.root_type_);
}

std::string HeapGraphRoot::GetTypeName() const {
  return "perfetto.protos.HeapGraphRoot";
}


// ===================================================================

class HeapGraphType::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraphType>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_location_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_superclass_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_classloader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

HeapGraphType::HeapGraphType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraphType)
}
HeapGraphType::HeapGraphType(const HeapGraphType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeapGraphType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_){from._impl_.reference_field_id_}
    , /*decltype(_impl_._reference_field_id_cached_byte_size_)*/{0}
    , decltype(_impl_.class_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.object_size_){}
    , decltype(_impl_.superclass_id_){}
    , decltype(_impl_.classloader_id_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_class_name()) {
    _this->_impl_.class_name_.Set(from._internal_class_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraphType)
}

inline void HeapGraphType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_){arena}
    , /*decltype(_impl_._reference_field_id_cached_byte_size_)*/{0}
    , decltype(_impl_.class_name_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.location_id_){uint64_t{0u}}
    , decltype(_impl_.object_size_){uint64_t{0u}}
    , decltype(_impl_.superclass_id_){uint64_t{0u}}
    , decltype(_impl_.classloader_id_){uint64_t{0u}}
    , decltype(_impl_.kind_){0}
  };
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeapGraphType::~HeapGraphType() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraphType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraphType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_field_id_.~RepeatedField();
  _impl_.class_name_.Destroy();
}

void HeapGraphType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraphType::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraphType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_field_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.class_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kind_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeapGraphType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 location_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_location_id(&has_bits);
          _impl_.location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 object_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_object_size(&has_bits);
          _impl_.object_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 superclass_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_superclass_id(&has_bits);
          _impl_.superclass_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 reference_field_id = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reference_field_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_reference_field_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapGraphType.Kind kind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::HeapGraphType_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::perfetto::protos::HeapGraphType_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 classloader_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_classloader_id(&has_bits);
          _impl_.classloader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapGraphType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraphType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 location_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_location_id(), target);
  }

  // optional string class_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_name(), target);
  }

  // optional uint64 object_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_object_size(), target);
  }

  // optional uint64 superclass_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_superclass_id(), target);
  }

  // repeated uint64 reference_field_id = 6 [packed = true];
  {
    int byte_size = _impl_._reference_field_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_reference_field_id(), byte_size, target);
    }
  }

  // optional .perfetto.protos.HeapGraphType.Kind kind = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_kind(), target);
  }

  // optional uint64 classloader_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_classloader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraphType)
  return target;
}

size_t HeapGraphType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraphType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 reference_field_id = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.reference_field_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._reference_field_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string class_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_class_name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 location_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_location_id());
    }

    // optional uint64 object_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_size());
    }

    // optional uint64 superclass_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_superclass_id());
    }

    // optional uint64 classloader_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_classloader_id());
    }

    // optional .perfetto.protos.HeapGraphType.Kind kind = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapGraphType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeapGraphType*>(
      &from));
}

void HeapGraphType::MergeFrom(const HeapGraphType& from) {
  HeapGraphType* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraphType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_field_id_.MergeFrom(from._impl_.reference_field_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.location_id_ = from._impl_.location_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.object_size_ = from._impl_.object_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.superclass_id_ = from._impl_.superclass_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.classloader_id_ = from._impl_.classloader_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeapGraphType::CopyFrom(const HeapGraphType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraphType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraphType::IsInitialized() const {
  return true;
}

void HeapGraphType::InternalSwap(HeapGraphType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_field_id_.InternalSwap(&other->_impl_.reference_field_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_name_, lhs_arena,
      &other->_impl_.class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapGraphType, _impl_.kind_)
      + sizeof(HeapGraphType::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(HeapGraphType, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

std::string HeapGraphType::GetTypeName() const {
  return "perfetto.protos.HeapGraphType";
}


// ===================================================================

class HeapGraphObject::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraphObject>()._impl_._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_self_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference_field_id_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_native_allocation_registry_size_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

HeapGraphObject::HeapGraphObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraphObject)
}
HeapGraphObject::HeapGraphObject(const HeapGraphObject& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeapGraphObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_){from._impl_.reference_field_id_}
    , /*decltype(_impl_._reference_field_id_cached_byte_size_)*/{0}
    , decltype(_impl_.reference_object_id_){from._impl_.reference_object_id_}
    , /*decltype(_impl_._reference_object_id_cached_byte_size_)*/{0}
    , decltype(_impl_.type_id_){}
    , decltype(_impl_.self_size_){}
    , decltype(_impl_.reference_field_id_base_){}
    , decltype(_impl_.native_allocation_registry_size_field_){}
    , decltype(_impl_.identifier_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.type_id_, &from._impl_.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.native_allocation_registry_size_field_) -
    reinterpret_cast<char*>(&_impl_.type_id_)) + sizeof(_impl_.native_allocation_registry_size_field_));
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kIdDelta: {
      _this->_internal_set_id_delta(from._internal_id_delta());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraphObject)
}

inline void HeapGraphObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_){arena}
    , /*decltype(_impl_._reference_field_id_cached_byte_size_)*/{0}
    , decltype(_impl_.reference_object_id_){arena}
    , /*decltype(_impl_._reference_object_id_cached_byte_size_)*/{0}
    , decltype(_impl_.type_id_){uint64_t{0u}}
    , decltype(_impl_.self_size_){uint64_t{0u}}
    , decltype(_impl_.reference_field_id_base_){uint64_t{0u}}
    , decltype(_impl_.native_allocation_registry_size_field_){int64_t{0}}
    , decltype(_impl_.identifier_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_identifier();
}

HeapGraphObject::~HeapGraphObject() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraphObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraphObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_field_id_.~RepeatedField();
  _impl_.reference_object_id_.~RepeatedField();
  if (has_identifier()) {
    clear_identifier();
  }
}

void HeapGraphObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraphObject::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.HeapGraphObject)
  switch (identifier_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kIdDelta: {
      // No need to clear
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void HeapGraphObject::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraphObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_field_id_.Clear();
  _impl_.reference_object_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.native_allocation_registry_size_field_) -
        reinterpret_cast<char*>(&_impl_.type_id_)) + sizeof(_impl_.native_allocation_registry_size_field_));
  }
  clear_identifier();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeapGraphObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 self_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_self_size(&has_bits);
          _impl_.self_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 reference_field_id = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reference_field_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_reference_field_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 reference_object_id = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reference_object_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_reference_object_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 reference_field_id_base = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_reference_field_id_base(&has_bits);
          _impl_.reference_field_id_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id_delta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_id_delta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 native_allocation_registry_size_field = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_native_allocation_registry_size_field(&has_bits);
          _impl_.native_allocation_registry_size_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapGraphObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraphObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 type_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_type_id(), target);
  }

  // optional uint64 self_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_self_size(), target);
  }

  // repeated uint64 reference_field_id = 4 [packed = true];
  {
    int byte_size = _impl_._reference_field_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_reference_field_id(), byte_size, target);
    }
  }

  // repeated uint64 reference_object_id = 5 [packed = true];
  {
    int byte_size = _impl_._reference_object_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_reference_object_id(), byte_size, target);
    }
  }

  // optional uint64 reference_field_id_base = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_reference_field_id_base(), target);
  }

  // uint64 id_delta = 7;
  if (_internal_has_id_delta()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_id_delta(), target);
  }

  // optional int64 native_allocation_registry_size_field = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_native_allocation_registry_size_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraphObject)
  return target;
}

size_t HeapGraphObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraphObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 reference_field_id = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.reference_field_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._reference_field_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 reference_object_id = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.reference_object_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._reference_object_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 type_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_type_id());
    }

    // optional uint64 self_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_self_size());
    }

    // optional uint64 reference_field_id_base = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reference_field_id_base());
    }

    // optional int64 native_allocation_registry_size_field = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_native_allocation_registry_size_field());
    }

  }
  switch (identifier_case()) {
    // uint64 id = 1;
    case kId: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
      break;
    }
    // uint64 id_delta = 7;
    case kIdDelta: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id_delta());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapGraphObject::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeapGraphObject*>(
      &from));
}

void HeapGraphObject::MergeFrom(const HeapGraphObject& from) {
  HeapGraphObject* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraphObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_field_id_.MergeFrom(from._impl_.reference_field_id_);
  _this->_impl_.reference_object_id_.MergeFrom(from._impl_.reference_object_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_id_ = from._impl_.type_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.self_size_ = from._impl_.self_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reference_field_id_base_ = from._impl_.reference_field_id_base_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.native_allocation_registry_size_field_ = from._impl_.native_allocation_registry_size_field_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.identifier_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kIdDelta: {
      _this->_internal_set_id_delta(from._internal_id_delta());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeapGraphObject::CopyFrom(const HeapGraphObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraphObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraphObject::IsInitialized() const {
  return true;
}

void HeapGraphObject::InternalSwap(HeapGraphObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_field_id_.InternalSwap(&other->_impl_.reference_field_id_);
  _impl_.reference_object_id_.InternalSwap(&other->_impl_.reference_object_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapGraphObject, _impl_.native_allocation_registry_size_field_)
      + sizeof(HeapGraphObject::_impl_.native_allocation_registry_size_field_)
      - PROTOBUF_FIELD_OFFSET(HeapGraphObject, _impl_.type_id_)>(
          reinterpret_cast<char*>(&_impl_.type_id_),
          reinterpret_cast<char*>(&other->_impl_.type_id_));
  swap(_impl_.identifier_, other->_impl_.identifier_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string HeapGraphObject::GetTypeName() const {
  return "perfetto.protos.HeapGraphObject";
}


// ===================================================================

class HeapGraph::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraph>()._impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continued(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void HeapGraph::clear_field_names() {
  _impl_.field_names_.Clear();
}
void HeapGraph::clear_location_names() {
  _impl_.location_names_.Clear();
}
HeapGraph::HeapGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraph)
}
HeapGraph::HeapGraph(const HeapGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeapGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){from._impl_.objects_}
    , decltype(_impl_.field_names_){from._impl_.field_names_}
    , decltype(_impl_.roots_){from._impl_.roots_}
    , decltype(_impl_.location_names_){from._impl_.location_names_}
    , decltype(_impl_.types_){from._impl_.types_}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.continued_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraph)
}

inline void HeapGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){arena}
    , decltype(_impl_.field_names_){arena}
    , decltype(_impl_.roots_){arena}
    , decltype(_impl_.location_names_){arena}
    , decltype(_impl_.types_){arena}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.continued_){false}
    , decltype(_impl_.index_){uint64_t{0u}}
  };
}

HeapGraph::~HeapGraph() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.~RepeatedPtrField();
  _impl_.field_names_.~RepeatedPtrField();
  _impl_.roots_.~RepeatedPtrField();
  _impl_.location_names_.~RepeatedPtrField();
  _impl_.types_.~RepeatedPtrField();
}

void HeapGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _impl_.field_names_.Clear();
  _impl_.roots_.Clear();
  _impl_.location_names_.Clear();
  _impl_.types_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeapGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.HeapGraphObject objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.InternedString field_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool continued = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_continued(&has_bits);
          _impl_.continued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.HeapGraphRoot roots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.InternedString location_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.HeapGraphType types = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .perfetto.protos.HeapGraphObject objects = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.InternedString field_names = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool continued = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_continued(), target);
  }

  // optional uint64 index = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_index(), target);
  }

  // repeated .perfetto.protos.HeapGraphRoot roots = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roots_size()); i < n; i++) {
    const auto& repfield = this->_internal_roots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.InternedString location_names = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_location_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_location_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.HeapGraphType types = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraph)
  return target;
}

size_t HeapGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.HeapGraphObject objects = 2;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_impl_.objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.InternedString field_names = 4;
  total_size += 1UL * this->_internal_field_names_size();
  for (const auto& msg : this->_impl_.field_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.HeapGraphRoot roots = 7;
  total_size += 1UL * this->_internal_roots_size();
  for (const auto& msg : this->_impl_.roots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.InternedString location_names = 8;
  total_size += 1UL * this->_internal_location_names_size();
  for (const auto& msg : this->_impl_.location_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.HeapGraphType types = 9;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->_impl_.types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional bool continued = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint64 index = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapGraph::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeapGraph*>(
      &from));
}

void HeapGraph::MergeFrom(const HeapGraph& from) {
  HeapGraph* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_impl_.field_names_.MergeFrom(from._impl_.field_names_);
  _this->_impl_.roots_.MergeFrom(from._impl_.roots_);
  _this->_impl_.location_names_.MergeFrom(from._impl_.location_names_);
  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.continued_ = from._impl_.continued_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeapGraph::CopyFrom(const HeapGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraph::IsInitialized() const {
  return true;
}

void HeapGraph::InternalSwap(HeapGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  _impl_.field_names_.InternalSwap(&other->_impl_.field_names_);
  _impl_.roots_.InternalSwap(&other->_impl_.roots_);
  _impl_.location_names_.InternalSwap(&other->_impl_.location_names_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapGraph, _impl_.index_)
      + sizeof(HeapGraph::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(HeapGraph, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

std::string HeapGraph::GetTypeName() const {
  return "perfetto.protos.HeapGraph";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraphRoot*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraphRoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraphRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraphType*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraphType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraphType >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraphObject*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraphObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraphObject >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraph*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
