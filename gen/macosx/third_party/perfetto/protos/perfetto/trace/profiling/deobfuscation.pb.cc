// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/deobfuscation.proto

#include "protos/perfetto/trace/profiling/deobfuscation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ObfuscatedMember::ObfuscatedMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obfuscated_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deobfuscated_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ObfuscatedMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObfuscatedMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObfuscatedMemberDefaultTypeInternal() {}
  union {
    ObfuscatedMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObfuscatedMemberDefaultTypeInternal _ObfuscatedMember_default_instance_;
PROTOBUF_CONSTEXPR ObfuscatedClass::ObfuscatedClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obfuscated_members_)*/{}
  , /*decltype(_impl_.obfuscated_methods_)*/{}
  , /*decltype(_impl_.obfuscated_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deobfuscated_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ObfuscatedClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObfuscatedClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObfuscatedClassDefaultTypeInternal() {}
  union {
    ObfuscatedClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObfuscatedClassDefaultTypeInternal _ObfuscatedClass_default_instance_;
PROTOBUF_CONSTEXPR DeobfuscationMapping::DeobfuscationMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obfuscated_classes_)*/{}
  , /*decltype(_impl_.package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_code_)*/int64_t{0}} {}
struct DeobfuscationMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeobfuscationMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeobfuscationMappingDefaultTypeInternal() {}
  union {
    DeobfuscationMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeobfuscationMappingDefaultTypeInternal _DeobfuscationMapping_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class ObfuscatedMember::_Internal {
 public:
  using HasBits = decltype(std::declval<ObfuscatedMember>()._impl_._has_bits_);
  static void set_has_obfuscated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deobfuscated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObfuscatedMember::ObfuscatedMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ObfuscatedMember)
}
ObfuscatedMember::ObfuscatedMember(const ObfuscatedMember& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ObfuscatedMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obfuscated_name_){}
    , decltype(_impl_.deobfuscated_name_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.obfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obfuscated_name()) {
    _this->_impl_.obfuscated_name_.Set(from._internal_obfuscated_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deobfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deobfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deobfuscated_name()) {
    _this->_impl_.deobfuscated_name_.Set(from._internal_deobfuscated_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ObfuscatedMember)
}

inline void ObfuscatedMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obfuscated_name_){}
    , decltype(_impl_.deobfuscated_name_){}
  };
  _impl_.obfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deobfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deobfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObfuscatedMember::~ObfuscatedMember() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ObfuscatedMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObfuscatedMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obfuscated_name_.Destroy();
  _impl_.deobfuscated_name_.Destroy();
}

void ObfuscatedMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObfuscatedMember::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ObfuscatedMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.obfuscated_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.deobfuscated_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObfuscatedMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string obfuscated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obfuscated_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deobfuscated_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deobfuscated_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObfuscatedMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ObfuscatedMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string obfuscated_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obfuscated_name(), target);
  }

  // optional string deobfuscated_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deobfuscated_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ObfuscatedMember)
  return target;
}

size_t ObfuscatedMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ObfuscatedMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string obfuscated_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obfuscated_name());
    }

    // optional string deobfuscated_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deobfuscated_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObfuscatedMember::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObfuscatedMember*>(
      &from));
}

void ObfuscatedMember::MergeFrom(const ObfuscatedMember& from) {
  ObfuscatedMember* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ObfuscatedMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_obfuscated_name(from._internal_obfuscated_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_deobfuscated_name(from._internal_deobfuscated_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObfuscatedMember::CopyFrom(const ObfuscatedMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ObfuscatedMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObfuscatedMember::IsInitialized() const {
  return true;
}

void ObfuscatedMember::InternalSwap(ObfuscatedMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obfuscated_name_, lhs_arena,
      &other->_impl_.obfuscated_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deobfuscated_name_, lhs_arena,
      &other->_impl_.deobfuscated_name_, rhs_arena
  );
}

std::string ObfuscatedMember::GetTypeName() const {
  return "perfetto.protos.ObfuscatedMember";
}


// ===================================================================

class ObfuscatedClass::_Internal {
 public:
  using HasBits = decltype(std::declval<ObfuscatedClass>()._impl_._has_bits_);
  static void set_has_obfuscated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deobfuscated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObfuscatedClass::ObfuscatedClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ObfuscatedClass)
}
ObfuscatedClass::ObfuscatedClass(const ObfuscatedClass& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ObfuscatedClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obfuscated_members_){from._impl_.obfuscated_members_}
    , decltype(_impl_.obfuscated_methods_){from._impl_.obfuscated_methods_}
    , decltype(_impl_.obfuscated_name_){}
    , decltype(_impl_.deobfuscated_name_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.obfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obfuscated_name()) {
    _this->_impl_.obfuscated_name_.Set(from._internal_obfuscated_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deobfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deobfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deobfuscated_name()) {
    _this->_impl_.deobfuscated_name_.Set(from._internal_deobfuscated_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ObfuscatedClass)
}

inline void ObfuscatedClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obfuscated_members_){arena}
    , decltype(_impl_.obfuscated_methods_){arena}
    , decltype(_impl_.obfuscated_name_){}
    , decltype(_impl_.deobfuscated_name_){}
  };
  _impl_.obfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deobfuscated_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deobfuscated_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObfuscatedClass::~ObfuscatedClass() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ObfuscatedClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObfuscatedClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obfuscated_members_.~RepeatedPtrField();
  _impl_.obfuscated_methods_.~RepeatedPtrField();
  _impl_.obfuscated_name_.Destroy();
  _impl_.deobfuscated_name_.Destroy();
}

void ObfuscatedClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObfuscatedClass::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ObfuscatedClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obfuscated_members_.Clear();
  _impl_.obfuscated_methods_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.obfuscated_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.deobfuscated_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObfuscatedClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string obfuscated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obfuscated_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deobfuscated_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deobfuscated_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ObfuscatedMember obfuscated_members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obfuscated_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ObfuscatedMember obfuscated_methods = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obfuscated_methods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObfuscatedClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ObfuscatedClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string obfuscated_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obfuscated_name(), target);
  }

  // optional string deobfuscated_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deobfuscated_name(), target);
  }

  // repeated .perfetto.protos.ObfuscatedMember obfuscated_members = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obfuscated_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_obfuscated_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ObfuscatedMember obfuscated_methods = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obfuscated_methods_size()); i < n; i++) {
    const auto& repfield = this->_internal_obfuscated_methods(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ObfuscatedClass)
  return target;
}

size_t ObfuscatedClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ObfuscatedClass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ObfuscatedMember obfuscated_members = 3;
  total_size += 1UL * this->_internal_obfuscated_members_size();
  for (const auto& msg : this->_impl_.obfuscated_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ObfuscatedMember obfuscated_methods = 4;
  total_size += 1UL * this->_internal_obfuscated_methods_size();
  for (const auto& msg : this->_impl_.obfuscated_methods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string obfuscated_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obfuscated_name());
    }

    // optional string deobfuscated_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deobfuscated_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObfuscatedClass::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ObfuscatedClass*>(
      &from));
}

void ObfuscatedClass::MergeFrom(const ObfuscatedClass& from) {
  ObfuscatedClass* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ObfuscatedClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obfuscated_members_.MergeFrom(from._impl_.obfuscated_members_);
  _this->_impl_.obfuscated_methods_.MergeFrom(from._impl_.obfuscated_methods_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_obfuscated_name(from._internal_obfuscated_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_deobfuscated_name(from._internal_deobfuscated_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ObfuscatedClass::CopyFrom(const ObfuscatedClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ObfuscatedClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObfuscatedClass::IsInitialized() const {
  return true;
}

void ObfuscatedClass::InternalSwap(ObfuscatedClass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obfuscated_members_.InternalSwap(&other->_impl_.obfuscated_members_);
  _impl_.obfuscated_methods_.InternalSwap(&other->_impl_.obfuscated_methods_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obfuscated_name_, lhs_arena,
      &other->_impl_.obfuscated_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deobfuscated_name_, lhs_arena,
      &other->_impl_.deobfuscated_name_, rhs_arena
  );
}

std::string ObfuscatedClass::GetTypeName() const {
  return "perfetto.protos.ObfuscatedClass";
}


// ===================================================================

class DeobfuscationMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<DeobfuscationMapping>()._impl_._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeobfuscationMapping::DeobfuscationMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DeobfuscationMapping)
}
DeobfuscationMapping::DeobfuscationMapping(const DeobfuscationMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeobfuscationMapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obfuscated_classes_){from._impl_.obfuscated_classes_}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.version_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_package_name()) {
    _this->_impl_.package_name_.Set(from._internal_package_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_code_ = from._impl_.version_code_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DeobfuscationMapping)
}

inline void DeobfuscationMapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obfuscated_classes_){arena}
    , decltype(_impl_.package_name_){}
    , decltype(_impl_.version_code_){int64_t{0}}
  };
  _impl_.package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeobfuscationMapping::~DeobfuscationMapping() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DeobfuscationMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeobfuscationMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obfuscated_classes_.~RepeatedPtrField();
  _impl_.package_name_.Destroy();
}

void DeobfuscationMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeobfuscationMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DeobfuscationMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obfuscated_classes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.package_name_.ClearNonDefaultToEmpty();
  }
  _impl_.version_code_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeobfuscationMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 version_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version_code(&has_bits);
          _impl_.version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ObfuscatedClass obfuscated_classes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obfuscated_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeobfuscationMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DeobfuscationMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_package_name(), target);
  }

  // optional int64 version_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_version_code(), target);
  }

  // repeated .perfetto.protos.ObfuscatedClass obfuscated_classes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obfuscated_classes_size()); i < n; i++) {
    const auto& repfield = this->_internal_obfuscated_classes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DeobfuscationMapping)
  return target;
}

size_t DeobfuscationMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DeobfuscationMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ObfuscatedClass obfuscated_classes = 3;
  total_size += 1UL * this->_internal_obfuscated_classes_size();
  for (const auto& msg : this->_impl_.obfuscated_classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_package_name());
    }

    // optional int64 version_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeobfuscationMapping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeobfuscationMapping*>(
      &from));
}

void DeobfuscationMapping::MergeFrom(const DeobfuscationMapping& from) {
  DeobfuscationMapping* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DeobfuscationMapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obfuscated_classes_.MergeFrom(from._impl_.obfuscated_classes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_package_name(from._internal_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_code_ = from._impl_.version_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeobfuscationMapping::CopyFrom(const DeobfuscationMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DeobfuscationMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeobfuscationMapping::IsInitialized() const {
  return true;
}

void DeobfuscationMapping::InternalSwap(DeobfuscationMapping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obfuscated_classes_.InternalSwap(&other->_impl_.obfuscated_classes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.package_name_, lhs_arena,
      &other->_impl_.package_name_, rhs_arena
  );
  swap(_impl_.version_code_, other->_impl_.version_code_);
}

std::string DeobfuscationMapping::GetTypeName() const {
  return "perfetto.protos.DeobfuscationMapping";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ObfuscatedMember*
Arena::CreateMaybeMessage< ::perfetto::protos::ObfuscatedMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ObfuscatedMember >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ObfuscatedClass*
Arena::CreateMaybeMessage< ::perfetto::protos::ObfuscatedClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ObfuscatedClass >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DeobfuscationMapping*
Arena::CreateMaybeMessage< ::perfetto::protos::DeobfuscationMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DeobfuscationMapping >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
