// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class AddressSymbols;
struct AddressSymbolsDefaultTypeInternal;
extern AddressSymbolsDefaultTypeInternal _AddressSymbols_default_instance_;
class Callstack;
struct CallstackDefaultTypeInternal;
extern CallstackDefaultTypeInternal _Callstack_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class InternedString;
struct InternedStringDefaultTypeInternal;
extern InternedStringDefaultTypeInternal _InternedString_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Mapping;
struct MappingDefaultTypeInternal;
extern MappingDefaultTypeInternal _Mapping_default_instance_;
class ModuleSymbols;
struct ModuleSymbolsDefaultTypeInternal;
extern ModuleSymbolsDefaultTypeInternal _ModuleSymbols_default_instance_;
class ProfiledFrameSymbols;
struct ProfiledFrameSymbolsDefaultTypeInternal;
extern ProfiledFrameSymbolsDefaultTypeInternal _ProfiledFrameSymbols_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::AddressSymbols* Arena::CreateMaybeMessage<::perfetto::protos::AddressSymbols>(Arena*);
template<> ::perfetto::protos::Callstack* Arena::CreateMaybeMessage<::perfetto::protos::Callstack>(Arena*);
template<> ::perfetto::protos::Frame* Arena::CreateMaybeMessage<::perfetto::protos::Frame>(Arena*);
template<> ::perfetto::protos::InternedString* Arena::CreateMaybeMessage<::perfetto::protos::InternedString>(Arena*);
template<> ::perfetto::protos::Line* Arena::CreateMaybeMessage<::perfetto::protos::Line>(Arena*);
template<> ::perfetto::protos::Mapping* Arena::CreateMaybeMessage<::perfetto::protos::Mapping>(Arena*);
template<> ::perfetto::protos::ModuleSymbols* Arena::CreateMaybeMessage<::perfetto::protos::ModuleSymbols>(Arena*);
template<> ::perfetto::protos::ProfiledFrameSymbols* Arena::CreateMaybeMessage<::perfetto::protos::ProfiledFrameSymbols>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class InternedString final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.InternedString) */ {
 public:
  inline InternedString() : InternedString(nullptr) {}
  ~InternedString() override;
  explicit PROTOBUF_CONSTEXPR InternedString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternedString(const InternedString& from);
  InternedString(InternedString&& from) noexcept
    : InternedString() {
    *this = ::std::move(from);
  }

  inline InternedString& operator=(const InternedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternedString& operator=(InternedString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InternedString& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternedString* internal_default_instance() {
    return reinterpret_cast<const InternedString*>(
               &_InternedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InternedString& a, InternedString& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(InternedString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternedString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternedString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternedString>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InternedString& from);
  void MergeFrom(const InternedString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternedString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.InternedString";
  }
  protected:
  explicit InternedString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional bytes str = 2;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // optional uint64 iid = 1;
  bool has_iid() const;
  private:
  bool _internal_has_iid() const;
  public:
  void clear_iid();
  uint64_t iid() const;
  void set_iid(uint64_t value);
  private:
  uint64_t _internal_iid() const;
  void _internal_set_iid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.InternedString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ProfiledFrameSymbols final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfiledFrameSymbols) */ {
 public:
  inline ProfiledFrameSymbols() : ProfiledFrameSymbols(nullptr) {}
  ~ProfiledFrameSymbols() override;
  explicit PROTOBUF_CONSTEXPR ProfiledFrameSymbols(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfiledFrameSymbols(const ProfiledFrameSymbols& from);
  ProfiledFrameSymbols(ProfiledFrameSymbols&& from) noexcept
    : ProfiledFrameSymbols() {
    *this = ::std::move(from);
  }

  inline ProfiledFrameSymbols& operator=(const ProfiledFrameSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfiledFrameSymbols& operator=(ProfiledFrameSymbols&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProfiledFrameSymbols& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfiledFrameSymbols* internal_default_instance() {
    return reinterpret_cast<const ProfiledFrameSymbols*>(
               &_ProfiledFrameSymbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProfiledFrameSymbols& a, ProfiledFrameSymbols& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProfiledFrameSymbols* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfiledFrameSymbols* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfiledFrameSymbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfiledFrameSymbols>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProfiledFrameSymbols& from);
  void MergeFrom(const ProfiledFrameSymbols& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfiledFrameSymbols* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProfiledFrameSymbols";
  }
  protected:
  explicit ProfiledFrameSymbols(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameIdFieldNumber = 2,
    kFileNameIdFieldNumber = 3,
    kLineNumberFieldNumber = 4,
    kFrameIidFieldNumber = 1,
  };
  // repeated uint64 function_name_id = 2;
  int function_name_id_size() const;
  private:
  int _internal_function_name_id_size() const;
  public:
  void clear_function_name_id();
  private:
  uint64_t _internal_function_name_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_function_name_id() const;
  void _internal_add_function_name_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_function_name_id();
  public:
  uint64_t function_name_id(int index) const;
  void set_function_name_id(int index, uint64_t value);
  void add_function_name_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      function_name_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_function_name_id();

  // repeated uint64 file_name_id = 3;
  int file_name_id_size() const;
  private:
  int _internal_file_name_id_size() const;
  public:
  void clear_file_name_id();
  private:
  uint64_t _internal_file_name_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_file_name_id() const;
  void _internal_add_file_name_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_file_name_id();
  public:
  uint64_t file_name_id(int index) const;
  void set_file_name_id(int index, uint64_t value);
  void add_file_name_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      file_name_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_file_name_id();

  // repeated uint32 line_number = 4;
  int line_number_size() const;
  private:
  int _internal_line_number_size() const;
  public:
  void clear_line_number();
  private:
  uint32_t _internal_line_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_line_number() const;
  void _internal_add_line_number(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_line_number();
  public:
  uint32_t line_number(int index) const;
  void set_line_number(int index, uint32_t value);
  void add_line_number(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      line_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_line_number();

  // optional uint64 frame_iid = 1;
  bool has_frame_iid() const;
  private:
  bool _internal_has_frame_iid() const;
  public:
  void clear_frame_iid();
  uint64_t frame_iid() const;
  void set_frame_iid(uint64_t value);
  private:
  uint64_t _internal_frame_iid() const;
  void _internal_set_frame_iid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfiledFrameSymbols)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > function_name_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > file_name_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > line_number_;
    uint64_t frame_iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Line final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  explicit PROTOBUF_CONSTEXPR Line(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Line* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Line* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kSourceFileNameFieldNumber = 2,
    kLineNumberFieldNumber = 3,
  };
  // optional string function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // optional string source_file_name = 2;
  bool has_source_file_name() const;
  private:
  bool _internal_has_source_file_name() const;
  public:
  void clear_source_file_name();
  const std::string& source_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_file_name();
  PROTOBUF_NODISCARD std::string* release_source_file_name();
  void set_allocated_source_file_name(std::string* source_file_name);
  private:
  const std::string& _internal_source_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_file_name(const std::string& value);
  std::string* _internal_mutable_source_file_name();
  public:

  // optional uint32 line_number = 3;
  bool has_line_number() const;
  private:
  bool _internal_has_line_number() const;
  public:
  void clear_line_number();
  uint32_t line_number() const;
  void set_line_number(uint32_t value);
  private:
  uint32_t _internal_line_number() const;
  void _internal_set_line_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_file_name_;
    uint32_t line_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class AddressSymbols final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AddressSymbols) */ {
 public:
  inline AddressSymbols() : AddressSymbols(nullptr) {}
  ~AddressSymbols() override;
  explicit PROTOBUF_CONSTEXPR AddressSymbols(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressSymbols(const AddressSymbols& from);
  AddressSymbols(AddressSymbols&& from) noexcept
    : AddressSymbols() {
    *this = ::std::move(from);
  }

  inline AddressSymbols& operator=(const AddressSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressSymbols& operator=(AddressSymbols&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AddressSymbols& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressSymbols* internal_default_instance() {
    return reinterpret_cast<const AddressSymbols*>(
               &_AddressSymbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddressSymbols& a, AddressSymbols& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AddressSymbols* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressSymbols* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressSymbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressSymbols>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AddressSymbols& from);
  void MergeFrom(const AddressSymbols& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddressSymbols* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AddressSymbols";
  }
  protected:
  explicit AddressSymbols(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .perfetto.protos.Line lines = 2;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::perfetto::protos::Line* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >*
      mutable_lines();
  private:
  const ::perfetto::protos::Line& _internal_lines(int index) const;
  ::perfetto::protos::Line* _internal_add_lines();
  public:
  const ::perfetto::protos::Line& lines(int index) const;
  ::perfetto::protos::Line* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >&
      lines() const;

  // optional uint64 address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.AddressSymbols)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line > lines_;
    uint64_t address_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ModuleSymbols final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ModuleSymbols) */ {
 public:
  inline ModuleSymbols() : ModuleSymbols(nullptr) {}
  ~ModuleSymbols() override;
  explicit PROTOBUF_CONSTEXPR ModuleSymbols(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleSymbols(const ModuleSymbols& from);
  ModuleSymbols(ModuleSymbols&& from) noexcept
    : ModuleSymbols() {
    *this = ::std::move(from);
  }

  inline ModuleSymbols& operator=(const ModuleSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleSymbols& operator=(ModuleSymbols&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModuleSymbols& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleSymbols* internal_default_instance() {
    return reinterpret_cast<const ModuleSymbols*>(
               &_ModuleSymbols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModuleSymbols& a, ModuleSymbols& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ModuleSymbols* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleSymbols* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleSymbols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleSymbols>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ModuleSymbols& from);
  void MergeFrom(const ModuleSymbols& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModuleSymbols* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ModuleSymbols";
  }
  protected:
  explicit ModuleSymbols(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressSymbolsFieldNumber = 3,
    kPathFieldNumber = 1,
    kBuildIdFieldNumber = 2,
  };
  // repeated .perfetto.protos.AddressSymbols address_symbols = 3;
  int address_symbols_size() const;
  private:
  int _internal_address_symbols_size() const;
  public:
  void clear_address_symbols();
  ::perfetto::protos::AddressSymbols* mutable_address_symbols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >*
      mutable_address_symbols();
  private:
  const ::perfetto::protos::AddressSymbols& _internal_address_symbols(int index) const;
  ::perfetto::protos::AddressSymbols* _internal_add_address_symbols();
  public:
  const ::perfetto::protos::AddressSymbols& address_symbols(int index) const;
  ::perfetto::protos::AddressSymbols* add_address_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >&
      address_symbols() const;

  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string build_id = 2;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  const std::string& build_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build_id();
  PROTOBUF_NODISCARD std::string* release_build_id();
  void set_allocated_build_id(std::string* build_id);
  private:
  const std::string& _internal_build_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_id(const std::string& value);
  std::string* _internal_mutable_build_id();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ModuleSymbols)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols > address_symbols_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Mapping final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Mapping) */ {
 public:
  inline Mapping() : Mapping(nullptr) {}
  ~Mapping() override;
  explicit PROTOBUF_CONSTEXPR Mapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mapping(const Mapping& from);
  Mapping(Mapping&& from) noexcept
    : Mapping() {
    *this = ::std::move(from);
  }

  inline Mapping& operator=(const Mapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mapping& operator=(Mapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Mapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mapping* internal_default_instance() {
    return reinterpret_cast<const Mapping*>(
               &_Mapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Mapping& a, Mapping& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Mapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Mapping& from);
  void MergeFrom(const Mapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Mapping";
  }
  protected:
  explicit Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathStringIdsFieldNumber = 7,
    kIidFieldNumber = 1,
    kBuildIdFieldNumber = 2,
    kStartOffsetFieldNumber = 3,
    kStartFieldNumber = 4,
    kEndFieldNumber = 5,
    kLoadBiasFieldNumber = 6,
    kExactOffsetFieldNumber = 8,
  };
  // repeated uint64 path_string_ids = 7;
  int path_string_ids_size() const;
  private:
  int _internal_path_string_ids_size() const;
  public:
  void clear_path_string_ids();
  private:
  uint64_t _internal_path_string_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_path_string_ids() const;
  void _internal_add_path_string_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_path_string_ids();
  public:
  uint64_t path_string_ids(int index) const;
  void set_path_string_ids(int index, uint64_t value);
  void add_path_string_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      path_string_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_path_string_ids();

  // optional uint64 iid = 1;
  bool has_iid() const;
  private:
  bool _internal_has_iid() const;
  public:
  void clear_iid();
  uint64_t iid() const;
  void set_iid(uint64_t value);
  private:
  uint64_t _internal_iid() const;
  void _internal_set_iid(uint64_t value);
  public:

  // optional uint64 build_id = 2;
  bool has_build_id() const;
  private:
  bool _internal_has_build_id() const;
  public:
  void clear_build_id();
  uint64_t build_id() const;
  void set_build_id(uint64_t value);
  private:
  uint64_t _internal_build_id() const;
  void _internal_set_build_id(uint64_t value);
  public:

  // optional uint64 start_offset = 3;
  bool has_start_offset() const;
  private:
  bool _internal_has_start_offset() const;
  public:
  void clear_start_offset();
  uint64_t start_offset() const;
  void set_start_offset(uint64_t value);
  private:
  uint64_t _internal_start_offset() const;
  void _internal_set_start_offset(uint64_t value);
  public:

  // optional uint64 start = 4;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // optional uint64 end = 5;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  uint64_t end() const;
  void set_end(uint64_t value);
  private:
  uint64_t _internal_end() const;
  void _internal_set_end(uint64_t value);
  public:

  // optional uint64 load_bias = 6;
  bool has_load_bias() const;
  private:
  bool _internal_has_load_bias() const;
  public:
  void clear_load_bias();
  uint64_t load_bias() const;
  void set_load_bias(uint64_t value);
  private:
  uint64_t _internal_load_bias() const;
  void _internal_set_load_bias(uint64_t value);
  public:

  // optional uint64 exact_offset = 8;
  bool has_exact_offset() const;
  private:
  bool _internal_has_exact_offset() const;
  public:
  void clear_exact_offset();
  uint64_t exact_offset() const;
  void set_exact_offset(uint64_t value);
  private:
  uint64_t _internal_exact_offset() const;
  void _internal_set_exact_offset(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.Mapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > path_string_ids_;
    uint64_t iid_;
    uint64_t build_id_;
    uint64_t start_offset_;
    uint64_t start_;
    uint64_t end_;
    uint64_t load_bias_;
    uint64_t exact_offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit PROTOBUF_CONSTEXPR Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIidFieldNumber = 1,
    kFunctionNameIdFieldNumber = 2,
    kMappingIdFieldNumber = 3,
    kRelPcFieldNumber = 4,
  };
  // optional uint64 iid = 1;
  bool has_iid() const;
  private:
  bool _internal_has_iid() const;
  public:
  void clear_iid();
  uint64_t iid() const;
  void set_iid(uint64_t value);
  private:
  uint64_t _internal_iid() const;
  void _internal_set_iid(uint64_t value);
  public:

  // optional uint64 function_name_id = 2;
  bool has_function_name_id() const;
  private:
  bool _internal_has_function_name_id() const;
  public:
  void clear_function_name_id();
  uint64_t function_name_id() const;
  void set_function_name_id(uint64_t value);
  private:
  uint64_t _internal_function_name_id() const;
  void _internal_set_function_name_id(uint64_t value);
  public:

  // optional uint64 mapping_id = 3;
  bool has_mapping_id() const;
  private:
  bool _internal_has_mapping_id() const;
  public:
  void clear_mapping_id();
  uint64_t mapping_id() const;
  void set_mapping_id(uint64_t value);
  private:
  uint64_t _internal_mapping_id() const;
  void _internal_set_mapping_id(uint64_t value);
  public:

  // optional uint64 rel_pc = 4;
  bool has_rel_pc() const;
  private:
  bool _internal_has_rel_pc() const;
  public:
  void clear_rel_pc();
  uint64_t rel_pc() const;
  void set_rel_pc(uint64_t value);
  private:
  uint64_t _internal_rel_pc() const;
  void _internal_set_rel_pc(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t iid_;
    uint64_t function_name_id_;
    uint64_t mapping_id_;
    uint64_t rel_pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Callstack final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Callstack) */ {
 public:
  inline Callstack() : Callstack(nullptr) {}
  ~Callstack() override;
  explicit PROTOBUF_CONSTEXPR Callstack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Callstack(const Callstack& from);
  Callstack(Callstack&& from) noexcept
    : Callstack() {
    *this = ::std::move(from);
  }

  inline Callstack& operator=(const Callstack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Callstack& operator=(Callstack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Callstack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Callstack* internal_default_instance() {
    return reinterpret_cast<const Callstack*>(
               &_Callstack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Callstack& a, Callstack& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Callstack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Callstack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Callstack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Callstack>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Callstack& from);
  void MergeFrom(const Callstack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Callstack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Callstack";
  }
  protected:
  explicit Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdsFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // repeated uint64 frame_ids = 2;
  int frame_ids_size() const;
  private:
  int _internal_frame_ids_size() const;
  public:
  void clear_frame_ids();
  private:
  uint64_t _internal_frame_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_frame_ids() const;
  void _internal_add_frame_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_frame_ids();
  public:
  uint64_t frame_ids(int index) const;
  void set_frame_ids(int index, uint64_t value);
  void add_frame_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      frame_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_frame_ids();

  // optional uint64 iid = 1;
  bool has_iid() const;
  private:
  bool _internal_has_iid() const;
  public:
  void clear_iid();
  uint64_t iid() const;
  void set_iid(uint64_t value);
  private:
  uint64_t _internal_iid() const;
  void _internal_set_iid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.Callstack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > frame_ids_;
    uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternedString

// optional uint64 iid = 1;
inline bool InternedString::_internal_has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InternedString::has_iid() const {
  return _internal_has_iid();
}
inline void InternedString::clear_iid() {
  _impl_.iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t InternedString::_internal_iid() const {
  return _impl_.iid_;
}
inline uint64_t InternedString::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InternedString.iid)
  return _internal_iid();
}
inline void InternedString::_internal_set_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iid_ = value;
}
inline void InternedString::set_iid(uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InternedString.iid)
}

// optional bytes str = 2;
inline bool InternedString::_internal_has_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InternedString::has_str() const {
  return _internal_has_str();
}
inline void InternedString::clear_str() {
  _impl_.str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InternedString::str() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InternedString.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternedString::set_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.str_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.InternedString.str)
}
inline std::string* InternedString::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InternedString.str)
  return _s;
}
inline const std::string& InternedString::_internal_str() const {
  return _impl_.str_.Get();
}
inline void InternedString::_internal_set_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* InternedString::_internal_mutable_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.str_.Mutable(GetArenaForAllocation());
}
inline std::string* InternedString::release_str() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InternedString.str)
  if (!_internal_has_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InternedString::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.str_.SetAllocated(str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InternedString.str)
}

// -------------------------------------------------------------------

// ProfiledFrameSymbols

// optional uint64 frame_iid = 1;
inline bool ProfiledFrameSymbols::_internal_has_frame_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfiledFrameSymbols::has_frame_iid() const {
  return _internal_has_frame_iid();
}
inline void ProfiledFrameSymbols::clear_frame_iid() {
  _impl_.frame_iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ProfiledFrameSymbols::_internal_frame_iid() const {
  return _impl_.frame_iid_;
}
inline uint64_t ProfiledFrameSymbols::frame_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.frame_iid)
  return _internal_frame_iid();
}
inline void ProfiledFrameSymbols::_internal_set_frame_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frame_iid_ = value;
}
inline void ProfiledFrameSymbols::set_frame_iid(uint64_t value) {
  _internal_set_frame_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.frame_iid)
}

// repeated uint64 function_name_id = 2;
inline int ProfiledFrameSymbols::_internal_function_name_id_size() const {
  return _impl_.function_name_id_.size();
}
inline int ProfiledFrameSymbols::function_name_id_size() const {
  return _internal_function_name_id_size();
}
inline void ProfiledFrameSymbols::clear_function_name_id() {
  _impl_.function_name_id_.Clear();
}
inline uint64_t ProfiledFrameSymbols::_internal_function_name_id(int index) const {
  return _impl_.function_name_id_.Get(index);
}
inline uint64_t ProfiledFrameSymbols::function_name_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.function_name_id)
  return _internal_function_name_id(index);
}
inline void ProfiledFrameSymbols::set_function_name_id(int index, uint64_t value) {
  _impl_.function_name_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.function_name_id)
}
inline void ProfiledFrameSymbols::_internal_add_function_name_id(uint64_t value) {
  _impl_.function_name_id_.Add(value);
}
inline void ProfiledFrameSymbols::add_function_name_id(uint64_t value) {
  _internal_add_function_name_id(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfiledFrameSymbols.function_name_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ProfiledFrameSymbols::_internal_function_name_id() const {
  return _impl_.function_name_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ProfiledFrameSymbols::function_name_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfiledFrameSymbols.function_name_id)
  return _internal_function_name_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ProfiledFrameSymbols::_internal_mutable_function_name_id() {
  return &_impl_.function_name_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ProfiledFrameSymbols::mutable_function_name_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfiledFrameSymbols.function_name_id)
  return _internal_mutable_function_name_id();
}

// repeated uint64 file_name_id = 3;
inline int ProfiledFrameSymbols::_internal_file_name_id_size() const {
  return _impl_.file_name_id_.size();
}
inline int ProfiledFrameSymbols::file_name_id_size() const {
  return _internal_file_name_id_size();
}
inline void ProfiledFrameSymbols::clear_file_name_id() {
  _impl_.file_name_id_.Clear();
}
inline uint64_t ProfiledFrameSymbols::_internal_file_name_id(int index) const {
  return _impl_.file_name_id_.Get(index);
}
inline uint64_t ProfiledFrameSymbols::file_name_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.file_name_id)
  return _internal_file_name_id(index);
}
inline void ProfiledFrameSymbols::set_file_name_id(int index, uint64_t value) {
  _impl_.file_name_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.file_name_id)
}
inline void ProfiledFrameSymbols::_internal_add_file_name_id(uint64_t value) {
  _impl_.file_name_id_.Add(value);
}
inline void ProfiledFrameSymbols::add_file_name_id(uint64_t value) {
  _internal_add_file_name_id(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfiledFrameSymbols.file_name_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ProfiledFrameSymbols::_internal_file_name_id() const {
  return _impl_.file_name_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ProfiledFrameSymbols::file_name_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfiledFrameSymbols.file_name_id)
  return _internal_file_name_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ProfiledFrameSymbols::_internal_mutable_file_name_id() {
  return &_impl_.file_name_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ProfiledFrameSymbols::mutable_file_name_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfiledFrameSymbols.file_name_id)
  return _internal_mutable_file_name_id();
}

// repeated uint32 line_number = 4;
inline int ProfiledFrameSymbols::_internal_line_number_size() const {
  return _impl_.line_number_.size();
}
inline int ProfiledFrameSymbols::line_number_size() const {
  return _internal_line_number_size();
}
inline void ProfiledFrameSymbols::clear_line_number() {
  _impl_.line_number_.Clear();
}
inline uint32_t ProfiledFrameSymbols::_internal_line_number(int index) const {
  return _impl_.line_number_.Get(index);
}
inline uint32_t ProfiledFrameSymbols::line_number(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfiledFrameSymbols.line_number)
  return _internal_line_number(index);
}
inline void ProfiledFrameSymbols::set_line_number(int index, uint32_t value) {
  _impl_.line_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfiledFrameSymbols.line_number)
}
inline void ProfiledFrameSymbols::_internal_add_line_number(uint32_t value) {
  _impl_.line_number_.Add(value);
}
inline void ProfiledFrameSymbols::add_line_number(uint32_t value) {
  _internal_add_line_number(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfiledFrameSymbols.line_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ProfiledFrameSymbols::_internal_line_number() const {
  return _impl_.line_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ProfiledFrameSymbols::line_number() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfiledFrameSymbols.line_number)
  return _internal_line_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ProfiledFrameSymbols::_internal_mutable_line_number() {
  return &_impl_.line_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ProfiledFrameSymbols::mutable_line_number() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfiledFrameSymbols.line_number)
  return _internal_mutable_line_number();
}

// -------------------------------------------------------------------

// Line

// optional string function_name = 1;
inline bool Line::_internal_has_function_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Line::has_function_name() const {
  return _internal_has_function_name();
}
inline void Line::clear_function_name() {
  _impl_.function_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Line::function_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Line.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Line::set_function_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.function_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Line.function_name)
}
inline std::string* Line::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Line.function_name)
  return _s;
}
inline const std::string& Line::_internal_function_name() const {
  return _impl_.function_name_.Get();
}
inline void Line::_internal_set_function_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.function_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Line::_internal_mutable_function_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.function_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Line::release_function_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Line.function_name)
  if (!_internal_has_function_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.function_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.function_name_.IsDefault()) {
    _impl_.function_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Line::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.function_name_.SetAllocated(function_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.function_name_.IsDefault()) {
    _impl_.function_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Line.function_name)
}

// optional string source_file_name = 2;
inline bool Line::_internal_has_source_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Line::has_source_file_name() const {
  return _internal_has_source_file_name();
}
inline void Line::clear_source_file_name() {
  _impl_.source_file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Line::source_file_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Line.source_file_name)
  return _internal_source_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Line::set_source_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.source_file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Line.source_file_name)
}
inline std::string* Line::mutable_source_file_name() {
  std::string* _s = _internal_mutable_source_file_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Line.source_file_name)
  return _s;
}
inline const std::string& Line::_internal_source_file_name() const {
  return _impl_.source_file_name_.Get();
}
inline void Line::_internal_set_source_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Line::_internal_mutable_source_file_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.source_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Line::release_source_file_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Line.source_file_name)
  if (!_internal_has_source_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.source_file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_file_name_.IsDefault()) {
    _impl_.source_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Line::set_allocated_source_file_name(std::string* source_file_name) {
  if (source_file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.source_file_name_.SetAllocated(source_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_file_name_.IsDefault()) {
    _impl_.source_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Line.source_file_name)
}

// optional uint32 line_number = 3;
inline bool Line::_internal_has_line_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Line::has_line_number() const {
  return _internal_has_line_number();
}
inline void Line::clear_line_number() {
  _impl_.line_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Line::_internal_line_number() const {
  return _impl_.line_number_;
}
inline uint32_t Line::line_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Line.line_number)
  return _internal_line_number();
}
inline void Line::_internal_set_line_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.line_number_ = value;
}
inline void Line::set_line_number(uint32_t value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Line.line_number)
}

// -------------------------------------------------------------------

// AddressSymbols

// optional uint64 address = 1;
inline bool AddressSymbols::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddressSymbols::has_address() const {
  return _internal_has_address();
}
inline void AddressSymbols::clear_address() {
  _impl_.address_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t AddressSymbols::_internal_address() const {
  return _impl_.address_;
}
inline uint64_t AddressSymbols::address() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AddressSymbols.address)
  return _internal_address();
}
inline void AddressSymbols::_internal_set_address(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.address_ = value;
}
inline void AddressSymbols::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AddressSymbols.address)
}

// repeated .perfetto.protos.Line lines = 2;
inline int AddressSymbols::_internal_lines_size() const {
  return _impl_.lines_.size();
}
inline int AddressSymbols::lines_size() const {
  return _internal_lines_size();
}
inline void AddressSymbols::clear_lines() {
  _impl_.lines_.Clear();
}
inline ::perfetto::protos::Line* AddressSymbols::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AddressSymbols.lines)
  return _impl_.lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >*
AddressSymbols::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AddressSymbols.lines)
  return &_impl_.lines_;
}
inline const ::perfetto::protos::Line& AddressSymbols::_internal_lines(int index) const {
  return _impl_.lines_.Get(index);
}
inline const ::perfetto::protos::Line& AddressSymbols::lines(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AddressSymbols.lines)
  return _internal_lines(index);
}
inline ::perfetto::protos::Line* AddressSymbols::_internal_add_lines() {
  return _impl_.lines_.Add();
}
inline ::perfetto::protos::Line* AddressSymbols::add_lines() {
  ::perfetto::protos::Line* _add = _internal_add_lines();
  // @@protoc_insertion_point(field_add:perfetto.protos.AddressSymbols.lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Line >&
AddressSymbols::lines() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AddressSymbols.lines)
  return _impl_.lines_;
}

// -------------------------------------------------------------------

// ModuleSymbols

// optional string path = 1;
inline bool ModuleSymbols::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModuleSymbols::has_path() const {
  return _internal_has_path();
}
inline void ModuleSymbols::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModuleSymbols::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ModuleSymbols.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleSymbols::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ModuleSymbols.path)
}
inline std::string* ModuleSymbols::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ModuleSymbols.path)
  return _s;
}
inline const std::string& ModuleSymbols::_internal_path() const {
  return _impl_.path_.Get();
}
inline void ModuleSymbols::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleSymbols::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleSymbols::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ModuleSymbols.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModuleSymbols::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ModuleSymbols.path)
}

// optional string build_id = 2;
inline bool ModuleSymbols::_internal_has_build_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModuleSymbols::has_build_id() const {
  return _internal_has_build_id();
}
inline void ModuleSymbols::clear_build_id() {
  _impl_.build_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModuleSymbols::build_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ModuleSymbols.build_id)
  return _internal_build_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleSymbols::set_build_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.build_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ModuleSymbols.build_id)
}
inline std::string* ModuleSymbols::mutable_build_id() {
  std::string* _s = _internal_mutable_build_id();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ModuleSymbols.build_id)
  return _s;
}
inline const std::string& ModuleSymbols::_internal_build_id() const {
  return _impl_.build_id_.Get();
}
inline void ModuleSymbols::_internal_set_build_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.build_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleSymbols::_internal_mutable_build_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.build_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleSymbols::release_build_id() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ModuleSymbols.build_id)
  if (!_internal_has_build_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.build_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.build_id_.IsDefault()) {
    _impl_.build_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModuleSymbols::set_allocated_build_id(std::string* build_id) {
  if (build_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.build_id_.SetAllocated(build_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.build_id_.IsDefault()) {
    _impl_.build_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ModuleSymbols.build_id)
}

// repeated .perfetto.protos.AddressSymbols address_symbols = 3;
inline int ModuleSymbols::_internal_address_symbols_size() const {
  return _impl_.address_symbols_.size();
}
inline int ModuleSymbols::address_symbols_size() const {
  return _internal_address_symbols_size();
}
inline void ModuleSymbols::clear_address_symbols() {
  _impl_.address_symbols_.Clear();
}
inline ::perfetto::protos::AddressSymbols* ModuleSymbols::mutable_address_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ModuleSymbols.address_symbols)
  return _impl_.address_symbols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >*
ModuleSymbols::mutable_address_symbols() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ModuleSymbols.address_symbols)
  return &_impl_.address_symbols_;
}
inline const ::perfetto::protos::AddressSymbols& ModuleSymbols::_internal_address_symbols(int index) const {
  return _impl_.address_symbols_.Get(index);
}
inline const ::perfetto::protos::AddressSymbols& ModuleSymbols::address_symbols(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ModuleSymbols.address_symbols)
  return _internal_address_symbols(index);
}
inline ::perfetto::protos::AddressSymbols* ModuleSymbols::_internal_add_address_symbols() {
  return _impl_.address_symbols_.Add();
}
inline ::perfetto::protos::AddressSymbols* ModuleSymbols::add_address_symbols() {
  ::perfetto::protos::AddressSymbols* _add = _internal_add_address_symbols();
  // @@protoc_insertion_point(field_add:perfetto.protos.ModuleSymbols.address_symbols)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AddressSymbols >&
ModuleSymbols::address_symbols() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ModuleSymbols.address_symbols)
  return _impl_.address_symbols_;
}

// -------------------------------------------------------------------

// Mapping

// optional uint64 iid = 1;
inline bool Mapping::_internal_has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Mapping::has_iid() const {
  return _internal_has_iid();
}
inline void Mapping::clear_iid() {
  _impl_.iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Mapping::_internal_iid() const {
  return _impl_.iid_;
}
inline uint64_t Mapping::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.iid)
  return _internal_iid();
}
inline void Mapping::_internal_set_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.iid_ = value;
}
inline void Mapping::set_iid(uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.iid)
}

// optional uint64 build_id = 2;
inline bool Mapping::_internal_has_build_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Mapping::has_build_id() const {
  return _internal_has_build_id();
}
inline void Mapping::clear_build_id() {
  _impl_.build_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Mapping::_internal_build_id() const {
  return _impl_.build_id_;
}
inline uint64_t Mapping::build_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.build_id)
  return _internal_build_id();
}
inline void Mapping::_internal_set_build_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.build_id_ = value;
}
inline void Mapping::set_build_id(uint64_t value) {
  _internal_set_build_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.build_id)
}

// optional uint64 exact_offset = 8;
inline bool Mapping::_internal_has_exact_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Mapping::has_exact_offset() const {
  return _internal_has_exact_offset();
}
inline void Mapping::clear_exact_offset() {
  _impl_.exact_offset_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Mapping::_internal_exact_offset() const {
  return _impl_.exact_offset_;
}
inline uint64_t Mapping::exact_offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.exact_offset)
  return _internal_exact_offset();
}
inline void Mapping::_internal_set_exact_offset(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.exact_offset_ = value;
}
inline void Mapping::set_exact_offset(uint64_t value) {
  _internal_set_exact_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.exact_offset)
}

// optional uint64 start_offset = 3;
inline bool Mapping::_internal_has_start_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Mapping::has_start_offset() const {
  return _internal_has_start_offset();
}
inline void Mapping::clear_start_offset() {
  _impl_.start_offset_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Mapping::_internal_start_offset() const {
  return _impl_.start_offset_;
}
inline uint64_t Mapping::start_offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.start_offset)
  return _internal_start_offset();
}
inline void Mapping::_internal_set_start_offset(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_offset_ = value;
}
inline void Mapping::set_start_offset(uint64_t value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.start_offset)
}

// optional uint64 start = 4;
inline bool Mapping::_internal_has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Mapping::has_start() const {
  return _internal_has_start();
}
inline void Mapping::clear_start() {
  _impl_.start_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t Mapping::_internal_start() const {
  return _impl_.start_;
}
inline uint64_t Mapping::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.start)
  return _internal_start();
}
inline void Mapping::_internal_set_start(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_ = value;
}
inline void Mapping::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.start)
}

// optional uint64 end = 5;
inline bool Mapping::_internal_has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Mapping::has_end() const {
  return _internal_has_end();
}
inline void Mapping::clear_end() {
  _impl_.end_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t Mapping::_internal_end() const {
  return _impl_.end_;
}
inline uint64_t Mapping::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.end)
  return _internal_end();
}
inline void Mapping::_internal_set_end(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.end_ = value;
}
inline void Mapping::set_end(uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.end)
}

// optional uint64 load_bias = 6;
inline bool Mapping::_internal_has_load_bias() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Mapping::has_load_bias() const {
  return _internal_has_load_bias();
}
inline void Mapping::clear_load_bias() {
  _impl_.load_bias_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t Mapping::_internal_load_bias() const {
  return _impl_.load_bias_;
}
inline uint64_t Mapping::load_bias() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.load_bias)
  return _internal_load_bias();
}
inline void Mapping::_internal_set_load_bias(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.load_bias_ = value;
}
inline void Mapping::set_load_bias(uint64_t value) {
  _internal_set_load_bias(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.load_bias)
}

// repeated uint64 path_string_ids = 7;
inline int Mapping::_internal_path_string_ids_size() const {
  return _impl_.path_string_ids_.size();
}
inline int Mapping::path_string_ids_size() const {
  return _internal_path_string_ids_size();
}
inline void Mapping::clear_path_string_ids() {
  _impl_.path_string_ids_.Clear();
}
inline uint64_t Mapping::_internal_path_string_ids(int index) const {
  return _impl_.path_string_ids_.Get(index);
}
inline uint64_t Mapping::path_string_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Mapping.path_string_ids)
  return _internal_path_string_ids(index);
}
inline void Mapping::set_path_string_ids(int index, uint64_t value) {
  _impl_.path_string_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Mapping.path_string_ids)
}
inline void Mapping::_internal_add_path_string_ids(uint64_t value) {
  _impl_.path_string_ids_.Add(value);
}
inline void Mapping::add_path_string_ids(uint64_t value) {
  _internal_add_path_string_ids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.Mapping.path_string_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Mapping::_internal_path_string_ids() const {
  return _impl_.path_string_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Mapping::path_string_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.Mapping.path_string_ids)
  return _internal_path_string_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Mapping::_internal_mutable_path_string_ids() {
  return &_impl_.path_string_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Mapping::mutable_path_string_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.Mapping.path_string_ids)
  return _internal_mutable_path_string_ids();
}

// -------------------------------------------------------------------

// Frame

// optional uint64 iid = 1;
inline bool Frame::_internal_has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Frame::has_iid() const {
  return _internal_has_iid();
}
inline void Frame::clear_iid() {
  _impl_.iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Frame::_internal_iid() const {
  return _impl_.iid_;
}
inline uint64_t Frame::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.iid)
  return _internal_iid();
}
inline void Frame::_internal_set_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.iid_ = value;
}
inline void Frame::set_iid(uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.iid)
}

// optional uint64 function_name_id = 2;
inline bool Frame::_internal_has_function_name_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Frame::has_function_name_id() const {
  return _internal_has_function_name_id();
}
inline void Frame::clear_function_name_id() {
  _impl_.function_name_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Frame::_internal_function_name_id() const {
  return _impl_.function_name_id_;
}
inline uint64_t Frame::function_name_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.function_name_id)
  return _internal_function_name_id();
}
inline void Frame::_internal_set_function_name_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.function_name_id_ = value;
}
inline void Frame::set_function_name_id(uint64_t value) {
  _internal_set_function_name_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.function_name_id)
}

// optional uint64 mapping_id = 3;
inline bool Frame::_internal_has_mapping_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Frame::has_mapping_id() const {
  return _internal_has_mapping_id();
}
inline void Frame::clear_mapping_id() {
  _impl_.mapping_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Frame::_internal_mapping_id() const {
  return _impl_.mapping_id_;
}
inline uint64_t Frame::mapping_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.mapping_id)
  return _internal_mapping_id();
}
inline void Frame::_internal_set_mapping_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mapping_id_ = value;
}
inline void Frame::set_mapping_id(uint64_t value) {
  _internal_set_mapping_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.mapping_id)
}

// optional uint64 rel_pc = 4;
inline bool Frame::_internal_has_rel_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Frame::has_rel_pc() const {
  return _internal_has_rel_pc();
}
inline void Frame::clear_rel_pc() {
  _impl_.rel_pc_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t Frame::_internal_rel_pc() const {
  return _impl_.rel_pc_;
}
inline uint64_t Frame::rel_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Frame.rel_pc)
  return _internal_rel_pc();
}
inline void Frame::_internal_set_rel_pc(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rel_pc_ = value;
}
inline void Frame::set_rel_pc(uint64_t value) {
  _internal_set_rel_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Frame.rel_pc)
}

// -------------------------------------------------------------------

// Callstack

// optional uint64 iid = 1;
inline bool Callstack::_internal_has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Callstack::has_iid() const {
  return _internal_has_iid();
}
inline void Callstack::clear_iid() {
  _impl_.iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Callstack::_internal_iid() const {
  return _impl_.iid_;
}
inline uint64_t Callstack::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Callstack.iid)
  return _internal_iid();
}
inline void Callstack::_internal_set_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.iid_ = value;
}
inline void Callstack::set_iid(uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Callstack.iid)
}

// repeated uint64 frame_ids = 2;
inline int Callstack::_internal_frame_ids_size() const {
  return _impl_.frame_ids_.size();
}
inline int Callstack::frame_ids_size() const {
  return _internal_frame_ids_size();
}
inline void Callstack::clear_frame_ids() {
  _impl_.frame_ids_.Clear();
}
inline uint64_t Callstack::_internal_frame_ids(int index) const {
  return _impl_.frame_ids_.Get(index);
}
inline uint64_t Callstack::frame_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Callstack.frame_ids)
  return _internal_frame_ids(index);
}
inline void Callstack::set_frame_ids(int index, uint64_t value) {
  _impl_.frame_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Callstack.frame_ids)
}
inline void Callstack::_internal_add_frame_ids(uint64_t value) {
  _impl_.frame_ids_.Add(value);
}
inline void Callstack::add_frame_ids(uint64_t value) {
  _internal_add_frame_ids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.Callstack.frame_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Callstack::_internal_frame_ids() const {
  return _impl_.frame_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Callstack::frame_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.Callstack.frame_ids)
  return _internal_frame_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Callstack::_internal_mutable_frame_ids() {
  return &_impl_.frame_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Callstack::mutable_frame_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.Callstack.frame_ids)
  return _internal_mutable_frame_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto
