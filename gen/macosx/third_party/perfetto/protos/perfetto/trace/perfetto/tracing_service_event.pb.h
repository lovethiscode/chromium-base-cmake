// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/tracing_service_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class TracingServiceEvent;
struct TracingServiceEventDefaultTypeInternal;
extern TracingServiceEventDefaultTypeInternal _TracingServiceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TracingServiceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TracingServiceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TracingServiceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingServiceEvent) */ {
 public:
  inline TracingServiceEvent() : TracingServiceEvent(nullptr) {}
  ~TracingServiceEvent() override;
  explicit PROTOBUF_CONSTEXPR TracingServiceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TracingServiceEvent(const TracingServiceEvent& from);
  TracingServiceEvent(TracingServiceEvent&& from) noexcept
    : TracingServiceEvent() {
    *this = ::std::move(from);
  }

  inline TracingServiceEvent& operator=(const TracingServiceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingServiceEvent& operator=(TracingServiceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TracingServiceEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventTypeCase {
    kTracingStarted = 2,
    kAllDataSourcesStarted = 1,
    kAllDataSourcesFlushed = 3,
    kReadTracingBuffersCompleted = 4,
    kTracingDisabled = 5,
    kSeizedForBugreport = 6,
    EVENT_TYPE_NOT_SET = 0,
  };

  static inline const TracingServiceEvent* internal_default_instance() {
    return reinterpret_cast<const TracingServiceEvent*>(
               &_TracingServiceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TracingServiceEvent& a, TracingServiceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TracingServiceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracingServiceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TracingServiceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TracingServiceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TracingServiceEvent& from);
  void MergeFrom(const TracingServiceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TracingServiceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TracingServiceEvent";
  }
  protected:
  explicit TracingServiceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracingStartedFieldNumber = 2,
    kAllDataSourcesStartedFieldNumber = 1,
    kAllDataSourcesFlushedFieldNumber = 3,
    kReadTracingBuffersCompletedFieldNumber = 4,
    kTracingDisabledFieldNumber = 5,
    kSeizedForBugreportFieldNumber = 6,
  };
  // bool tracing_started = 2;
  bool has_tracing_started() const;
  private:
  bool _internal_has_tracing_started() const;
  public:
  void clear_tracing_started();
  bool tracing_started() const;
  void set_tracing_started(bool value);
  private:
  bool _internal_tracing_started() const;
  void _internal_set_tracing_started(bool value);
  public:

  // bool all_data_sources_started = 1;
  bool has_all_data_sources_started() const;
  private:
  bool _internal_has_all_data_sources_started() const;
  public:
  void clear_all_data_sources_started();
  bool all_data_sources_started() const;
  void set_all_data_sources_started(bool value);
  private:
  bool _internal_all_data_sources_started() const;
  void _internal_set_all_data_sources_started(bool value);
  public:

  // bool all_data_sources_flushed = 3;
  bool has_all_data_sources_flushed() const;
  private:
  bool _internal_has_all_data_sources_flushed() const;
  public:
  void clear_all_data_sources_flushed();
  bool all_data_sources_flushed() const;
  void set_all_data_sources_flushed(bool value);
  private:
  bool _internal_all_data_sources_flushed() const;
  void _internal_set_all_data_sources_flushed(bool value);
  public:

  // bool read_tracing_buffers_completed = 4;
  bool has_read_tracing_buffers_completed() const;
  private:
  bool _internal_has_read_tracing_buffers_completed() const;
  public:
  void clear_read_tracing_buffers_completed();
  bool read_tracing_buffers_completed() const;
  void set_read_tracing_buffers_completed(bool value);
  private:
  bool _internal_read_tracing_buffers_completed() const;
  void _internal_set_read_tracing_buffers_completed(bool value);
  public:

  // bool tracing_disabled = 5;
  bool has_tracing_disabled() const;
  private:
  bool _internal_has_tracing_disabled() const;
  public:
  void clear_tracing_disabled();
  bool tracing_disabled() const;
  void set_tracing_disabled(bool value);
  private:
  bool _internal_tracing_disabled() const;
  void _internal_set_tracing_disabled(bool value);
  public:

  // bool seized_for_bugreport = 6;
  bool has_seized_for_bugreport() const;
  private:
  bool _internal_has_seized_for_bugreport() const;
  public:
  void clear_seized_for_bugreport();
  bool seized_for_bugreport() const;
  void set_seized_for_bugreport(bool value);
  private:
  bool _internal_seized_for_bugreport() const;
  void _internal_set_seized_for_bugreport(bool value);
  public:

  void clear_event_type();
  EventTypeCase event_type_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingServiceEvent)
 private:
  class _Internal;
  void set_has_tracing_started();
  void set_has_all_data_sources_started();
  void set_has_all_data_sources_flushed();
  void set_has_read_tracing_buffers_completed();
  void set_has_tracing_disabled();
  void set_has_seized_for_bugreport();

  inline bool has_event_type() const;
  inline void clear_has_event_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union EventTypeUnion {
      constexpr EventTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool tracing_started_;
      bool all_data_sources_started_;
      bool all_data_sources_flushed_;
      bool read_tracing_buffers_completed_;
      bool tracing_disabled_;
      bool seized_for_bugreport_;
    } event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TracingServiceEvent

// bool tracing_started = 2;
inline bool TracingServiceEvent::_internal_has_tracing_started() const {
  return event_type_case() == kTracingStarted;
}
inline bool TracingServiceEvent::has_tracing_started() const {
  return _internal_has_tracing_started();
}
inline void TracingServiceEvent::set_has_tracing_started() {
  _impl_._oneof_case_[0] = kTracingStarted;
}
inline void TracingServiceEvent::clear_tracing_started() {
  if (_internal_has_tracing_started()) {
    _impl_.event_type_.tracing_started_ = false;
    clear_has_event_type();
  }
}
inline bool TracingServiceEvent::_internal_tracing_started() const {
  if (_internal_has_tracing_started()) {
    return _impl_.event_type_.tracing_started_;
  }
  return false;
}
inline void TracingServiceEvent::_internal_set_tracing_started(bool value) {
  if (!_internal_has_tracing_started()) {
    clear_event_type();
    set_has_tracing_started();
  }
  _impl_.event_type_.tracing_started_ = value;
}
inline bool TracingServiceEvent::tracing_started() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceEvent.tracing_started)
  return _internal_tracing_started();
}
inline void TracingServiceEvent::set_tracing_started(bool value) {
  _internal_set_tracing_started(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceEvent.tracing_started)
}

// bool all_data_sources_started = 1;
inline bool TracingServiceEvent::_internal_has_all_data_sources_started() const {
  return event_type_case() == kAllDataSourcesStarted;
}
inline bool TracingServiceEvent::has_all_data_sources_started() const {
  return _internal_has_all_data_sources_started();
}
inline void TracingServiceEvent::set_has_all_data_sources_started() {
  _impl_._oneof_case_[0] = kAllDataSourcesStarted;
}
inline void TracingServiceEvent::clear_all_data_sources_started() {
  if (_internal_has_all_data_sources_started()) {
    _impl_.event_type_.all_data_sources_started_ = false;
    clear_has_event_type();
  }
}
inline bool TracingServiceEvent::_internal_all_data_sources_started() const {
  if (_internal_has_all_data_sources_started()) {
    return _impl_.event_type_.all_data_sources_started_;
  }
  return false;
}
inline void TracingServiceEvent::_internal_set_all_data_sources_started(bool value) {
  if (!_internal_has_all_data_sources_started()) {
    clear_event_type();
    set_has_all_data_sources_started();
  }
  _impl_.event_type_.all_data_sources_started_ = value;
}
inline bool TracingServiceEvent::all_data_sources_started() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceEvent.all_data_sources_started)
  return _internal_all_data_sources_started();
}
inline void TracingServiceEvent::set_all_data_sources_started(bool value) {
  _internal_set_all_data_sources_started(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceEvent.all_data_sources_started)
}

// bool all_data_sources_flushed = 3;
inline bool TracingServiceEvent::_internal_has_all_data_sources_flushed() const {
  return event_type_case() == kAllDataSourcesFlushed;
}
inline bool TracingServiceEvent::has_all_data_sources_flushed() const {
  return _internal_has_all_data_sources_flushed();
}
inline void TracingServiceEvent::set_has_all_data_sources_flushed() {
  _impl_._oneof_case_[0] = kAllDataSourcesFlushed;
}
inline void TracingServiceEvent::clear_all_data_sources_flushed() {
  if (_internal_has_all_data_sources_flushed()) {
    _impl_.event_type_.all_data_sources_flushed_ = false;
    clear_has_event_type();
  }
}
inline bool TracingServiceEvent::_internal_all_data_sources_flushed() const {
  if (_internal_has_all_data_sources_flushed()) {
    return _impl_.event_type_.all_data_sources_flushed_;
  }
  return false;
}
inline void TracingServiceEvent::_internal_set_all_data_sources_flushed(bool value) {
  if (!_internal_has_all_data_sources_flushed()) {
    clear_event_type();
    set_has_all_data_sources_flushed();
  }
  _impl_.event_type_.all_data_sources_flushed_ = value;
}
inline bool TracingServiceEvent::all_data_sources_flushed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceEvent.all_data_sources_flushed)
  return _internal_all_data_sources_flushed();
}
inline void TracingServiceEvent::set_all_data_sources_flushed(bool value) {
  _internal_set_all_data_sources_flushed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceEvent.all_data_sources_flushed)
}

// bool read_tracing_buffers_completed = 4;
inline bool TracingServiceEvent::_internal_has_read_tracing_buffers_completed() const {
  return event_type_case() == kReadTracingBuffersCompleted;
}
inline bool TracingServiceEvent::has_read_tracing_buffers_completed() const {
  return _internal_has_read_tracing_buffers_completed();
}
inline void TracingServiceEvent::set_has_read_tracing_buffers_completed() {
  _impl_._oneof_case_[0] = kReadTracingBuffersCompleted;
}
inline void TracingServiceEvent::clear_read_tracing_buffers_completed() {
  if (_internal_has_read_tracing_buffers_completed()) {
    _impl_.event_type_.read_tracing_buffers_completed_ = false;
    clear_has_event_type();
  }
}
inline bool TracingServiceEvent::_internal_read_tracing_buffers_completed() const {
  if (_internal_has_read_tracing_buffers_completed()) {
    return _impl_.event_type_.read_tracing_buffers_completed_;
  }
  return false;
}
inline void TracingServiceEvent::_internal_set_read_tracing_buffers_completed(bool value) {
  if (!_internal_has_read_tracing_buffers_completed()) {
    clear_event_type();
    set_has_read_tracing_buffers_completed();
  }
  _impl_.event_type_.read_tracing_buffers_completed_ = value;
}
inline bool TracingServiceEvent::read_tracing_buffers_completed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceEvent.read_tracing_buffers_completed)
  return _internal_read_tracing_buffers_completed();
}
inline void TracingServiceEvent::set_read_tracing_buffers_completed(bool value) {
  _internal_set_read_tracing_buffers_completed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceEvent.read_tracing_buffers_completed)
}

// bool tracing_disabled = 5;
inline bool TracingServiceEvent::_internal_has_tracing_disabled() const {
  return event_type_case() == kTracingDisabled;
}
inline bool TracingServiceEvent::has_tracing_disabled() const {
  return _internal_has_tracing_disabled();
}
inline void TracingServiceEvent::set_has_tracing_disabled() {
  _impl_._oneof_case_[0] = kTracingDisabled;
}
inline void TracingServiceEvent::clear_tracing_disabled() {
  if (_internal_has_tracing_disabled()) {
    _impl_.event_type_.tracing_disabled_ = false;
    clear_has_event_type();
  }
}
inline bool TracingServiceEvent::_internal_tracing_disabled() const {
  if (_internal_has_tracing_disabled()) {
    return _impl_.event_type_.tracing_disabled_;
  }
  return false;
}
inline void TracingServiceEvent::_internal_set_tracing_disabled(bool value) {
  if (!_internal_has_tracing_disabled()) {
    clear_event_type();
    set_has_tracing_disabled();
  }
  _impl_.event_type_.tracing_disabled_ = value;
}
inline bool TracingServiceEvent::tracing_disabled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceEvent.tracing_disabled)
  return _internal_tracing_disabled();
}
inline void TracingServiceEvent::set_tracing_disabled(bool value) {
  _internal_set_tracing_disabled(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceEvent.tracing_disabled)
}

// bool seized_for_bugreport = 6;
inline bool TracingServiceEvent::_internal_has_seized_for_bugreport() const {
  return event_type_case() == kSeizedForBugreport;
}
inline bool TracingServiceEvent::has_seized_for_bugreport() const {
  return _internal_has_seized_for_bugreport();
}
inline void TracingServiceEvent::set_has_seized_for_bugreport() {
  _impl_._oneof_case_[0] = kSeizedForBugreport;
}
inline void TracingServiceEvent::clear_seized_for_bugreport() {
  if (_internal_has_seized_for_bugreport()) {
    _impl_.event_type_.seized_for_bugreport_ = false;
    clear_has_event_type();
  }
}
inline bool TracingServiceEvent::_internal_seized_for_bugreport() const {
  if (_internal_has_seized_for_bugreport()) {
    return _impl_.event_type_.seized_for_bugreport_;
  }
  return false;
}
inline void TracingServiceEvent::_internal_set_seized_for_bugreport(bool value) {
  if (!_internal_has_seized_for_bugreport()) {
    clear_event_type();
    set_has_seized_for_bugreport();
  }
  _impl_.event_type_.seized_for_bugreport_ = value;
}
inline bool TracingServiceEvent::seized_for_bugreport() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingServiceEvent.seized_for_bugreport)
  return _internal_seized_for_bugreport();
}
inline void TracingServiceEvent::set_seized_for_bugreport(bool value) {
  _internal_set_seized_for_bugreport(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingServiceEvent.seized_for_bugreport)
}

inline bool TracingServiceEvent::has_event_type() const {
  return event_type_case() != EVENT_TYPE_NOT_SET;
}
inline void TracingServiceEvent::clear_has_event_type() {
  _impl_._oneof_case_[0] = EVENT_TYPE_NOT_SET;
}
inline TracingServiceEvent::EventTypeCase TracingServiceEvent::event_type_case() const {
  return TracingServiceEvent::EventTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto
