// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PS_PROCESS_STATS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PS_PROCESS_STATS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ProcessStats;
class ProcessStats_Process;
class ProcessStats_FDInfo;
class ProcessStats_Thread;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT ProcessStats : public ::protozero::CppMessageObj {
 public:
  using Thread = ProcessStats_Thread;
  using FDInfo = ProcessStats_FDInfo;
  using Process = ProcessStats_Process;
  enum FieldNumbers {
    kProcessesFieldNumber = 1,
    kCollectionEndTimestampFieldNumber = 2,
  };

  ProcessStats();
  ~ProcessStats() override;
  ProcessStats(ProcessStats&&) noexcept;
  ProcessStats& operator=(ProcessStats&&);
  ProcessStats(const ProcessStats&);
  ProcessStats& operator=(const ProcessStats&);
  bool operator==(const ProcessStats&) const;
  bool operator!=(const ProcessStats& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<ProcessStats_Process>& processes() const { return processes_; }
  std::vector<ProcessStats_Process>* mutable_processes() { return &processes_; }
  int processes_size() const;
  void clear_processes();
  ProcessStats_Process* add_processes();

  bool has_collection_end_timestamp() const { return _has_field_[2]; }
  uint64_t collection_end_timestamp() const { return collection_end_timestamp_; }
  void set_collection_end_timestamp(uint64_t value) { collection_end_timestamp_ = value; _has_field_.set(2); }

 private:
  std::vector<ProcessStats_Process> processes_;
  uint64_t collection_end_timestamp_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ProcessStats_Process : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kThreadsFieldNumber = 11,
    kVmSizeKbFieldNumber = 2,
    kVmRssKbFieldNumber = 3,
    kRssAnonKbFieldNumber = 4,
    kRssFileKbFieldNumber = 5,
    kRssShmemKbFieldNumber = 6,
    kVmSwapKbFieldNumber = 7,
    kVmLockedKbFieldNumber = 8,
    kVmHwmKbFieldNumber = 9,
    kOomScoreAdjFieldNumber = 10,
    kIsPeakRssResettableFieldNumber = 12,
    kChromePrivateFootprintKbFieldNumber = 13,
    kChromePeakResidentSetKbFieldNumber = 14,
    kFdsFieldNumber = 15,
    kSmrRssKbFieldNumber = 16,
    kSmrPssKbFieldNumber = 17,
    kSmrPssAnonKbFieldNumber = 18,
    kSmrPssFileKbFieldNumber = 19,
    kSmrPssShmemKbFieldNumber = 20,
    kSmrSwapPssKbFieldNumber = 23,
    kRuntimeUserModeFieldNumber = 21,
    kRuntimeKernelModeFieldNumber = 22,
  };

  ProcessStats_Process();
  ~ProcessStats_Process() override;
  ProcessStats_Process(ProcessStats_Process&&) noexcept;
  ProcessStats_Process& operator=(ProcessStats_Process&&);
  ProcessStats_Process(const ProcessStats_Process&);
  ProcessStats_Process& operator=(const ProcessStats_Process&);
  bool operator==(const ProcessStats_Process&) const;
  bool operator!=(const ProcessStats_Process& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  const std::vector<ProcessStats_Thread>& threads() const { return threads_; }
  std::vector<ProcessStats_Thread>* mutable_threads() { return &threads_; }
  int threads_size() const;
  void clear_threads();
  ProcessStats_Thread* add_threads();

  bool has_vm_size_kb() const { return _has_field_[2]; }
  uint64_t vm_size_kb() const { return vm_size_kb_; }
  void set_vm_size_kb(uint64_t value) { vm_size_kb_ = value; _has_field_.set(2); }

  bool has_vm_rss_kb() const { return _has_field_[3]; }
  uint64_t vm_rss_kb() const { return vm_rss_kb_; }
  void set_vm_rss_kb(uint64_t value) { vm_rss_kb_ = value; _has_field_.set(3); }

  bool has_rss_anon_kb() const { return _has_field_[4]; }
  uint64_t rss_anon_kb() const { return rss_anon_kb_; }
  void set_rss_anon_kb(uint64_t value) { rss_anon_kb_ = value; _has_field_.set(4); }

  bool has_rss_file_kb() const { return _has_field_[5]; }
  uint64_t rss_file_kb() const { return rss_file_kb_; }
  void set_rss_file_kb(uint64_t value) { rss_file_kb_ = value; _has_field_.set(5); }

  bool has_rss_shmem_kb() const { return _has_field_[6]; }
  uint64_t rss_shmem_kb() const { return rss_shmem_kb_; }
  void set_rss_shmem_kb(uint64_t value) { rss_shmem_kb_ = value; _has_field_.set(6); }

  bool has_vm_swap_kb() const { return _has_field_[7]; }
  uint64_t vm_swap_kb() const { return vm_swap_kb_; }
  void set_vm_swap_kb(uint64_t value) { vm_swap_kb_ = value; _has_field_.set(7); }

  bool has_vm_locked_kb() const { return _has_field_[8]; }
  uint64_t vm_locked_kb() const { return vm_locked_kb_; }
  void set_vm_locked_kb(uint64_t value) { vm_locked_kb_ = value; _has_field_.set(8); }

  bool has_vm_hwm_kb() const { return _has_field_[9]; }
  uint64_t vm_hwm_kb() const { return vm_hwm_kb_; }
  void set_vm_hwm_kb(uint64_t value) { vm_hwm_kb_ = value; _has_field_.set(9); }

  bool has_oom_score_adj() const { return _has_field_[10]; }
  int64_t oom_score_adj() const { return oom_score_adj_; }
  void set_oom_score_adj(int64_t value) { oom_score_adj_ = value; _has_field_.set(10); }

  bool has_is_peak_rss_resettable() const { return _has_field_[12]; }
  bool is_peak_rss_resettable() const { return is_peak_rss_resettable_; }
  void set_is_peak_rss_resettable(bool value) { is_peak_rss_resettable_ = value; _has_field_.set(12); }

  bool has_chrome_private_footprint_kb() const { return _has_field_[13]; }
  uint32_t chrome_private_footprint_kb() const { return chrome_private_footprint_kb_; }
  void set_chrome_private_footprint_kb(uint32_t value) { chrome_private_footprint_kb_ = value; _has_field_.set(13); }

  bool has_chrome_peak_resident_set_kb() const { return _has_field_[14]; }
  uint32_t chrome_peak_resident_set_kb() const { return chrome_peak_resident_set_kb_; }
  void set_chrome_peak_resident_set_kb(uint32_t value) { chrome_peak_resident_set_kb_ = value; _has_field_.set(14); }

  const std::vector<ProcessStats_FDInfo>& fds() const { return fds_; }
  std::vector<ProcessStats_FDInfo>* mutable_fds() { return &fds_; }
  int fds_size() const;
  void clear_fds();
  ProcessStats_FDInfo* add_fds();

  bool has_smr_rss_kb() const { return _has_field_[16]; }
  uint64_t smr_rss_kb() const { return smr_rss_kb_; }
  void set_smr_rss_kb(uint64_t value) { smr_rss_kb_ = value; _has_field_.set(16); }

  bool has_smr_pss_kb() const { return _has_field_[17]; }
  uint64_t smr_pss_kb() const { return smr_pss_kb_; }
  void set_smr_pss_kb(uint64_t value) { smr_pss_kb_ = value; _has_field_.set(17); }

  bool has_smr_pss_anon_kb() const { return _has_field_[18]; }
  uint64_t smr_pss_anon_kb() const { return smr_pss_anon_kb_; }
  void set_smr_pss_anon_kb(uint64_t value) { smr_pss_anon_kb_ = value; _has_field_.set(18); }

  bool has_smr_pss_file_kb() const { return _has_field_[19]; }
  uint64_t smr_pss_file_kb() const { return smr_pss_file_kb_; }
  void set_smr_pss_file_kb(uint64_t value) { smr_pss_file_kb_ = value; _has_field_.set(19); }

  bool has_smr_pss_shmem_kb() const { return _has_field_[20]; }
  uint64_t smr_pss_shmem_kb() const { return smr_pss_shmem_kb_; }
  void set_smr_pss_shmem_kb(uint64_t value) { smr_pss_shmem_kb_ = value; _has_field_.set(20); }

  bool has_smr_swap_pss_kb() const { return _has_field_[23]; }
  uint64_t smr_swap_pss_kb() const { return smr_swap_pss_kb_; }
  void set_smr_swap_pss_kb(uint64_t value) { smr_swap_pss_kb_ = value; _has_field_.set(23); }

  bool has_runtime_user_mode() const { return _has_field_[21]; }
  uint64_t runtime_user_mode() const { return runtime_user_mode_; }
  void set_runtime_user_mode(uint64_t value) { runtime_user_mode_ = value; _has_field_.set(21); }

  bool has_runtime_kernel_mode() const { return _has_field_[22]; }
  uint64_t runtime_kernel_mode() const { return runtime_kernel_mode_; }
  void set_runtime_kernel_mode(uint64_t value) { runtime_kernel_mode_ = value; _has_field_.set(22); }

 private:
  int32_t pid_{};
  std::vector<ProcessStats_Thread> threads_;
  uint64_t vm_size_kb_{};
  uint64_t vm_rss_kb_{};
  uint64_t rss_anon_kb_{};
  uint64_t rss_file_kb_{};
  uint64_t rss_shmem_kb_{};
  uint64_t vm_swap_kb_{};
  uint64_t vm_locked_kb_{};
  uint64_t vm_hwm_kb_{};
  int64_t oom_score_adj_{};
  bool is_peak_rss_resettable_{};
  uint32_t chrome_private_footprint_kb_{};
  uint32_t chrome_peak_resident_set_kb_{};
  std::vector<ProcessStats_FDInfo> fds_;
  uint64_t smr_rss_kb_{};
  uint64_t smr_pss_kb_{};
  uint64_t smr_pss_anon_kb_{};
  uint64_t smr_pss_file_kb_{};
  uint64_t smr_pss_shmem_kb_{};
  uint64_t smr_swap_pss_kb_{};
  uint64_t runtime_user_mode_{};
  uint64_t runtime_kernel_mode_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<24> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ProcessStats_FDInfo : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kFdFieldNumber = 1,
    kPathFieldNumber = 2,
  };

  ProcessStats_FDInfo();
  ~ProcessStats_FDInfo() override;
  ProcessStats_FDInfo(ProcessStats_FDInfo&&) noexcept;
  ProcessStats_FDInfo& operator=(ProcessStats_FDInfo&&);
  ProcessStats_FDInfo(const ProcessStats_FDInfo&);
  ProcessStats_FDInfo& operator=(const ProcessStats_FDInfo&);
  bool operator==(const ProcessStats_FDInfo&) const;
  bool operator!=(const ProcessStats_FDInfo& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_fd() const { return _has_field_[1]; }
  uint64_t fd() const { return fd_; }
  void set_fd(uint64_t value) { fd_ = value; _has_field_.set(1); }

  bool has_path() const { return _has_field_[2]; }
  const std::string& path() const { return path_; }
  void set_path(const std::string& value) { path_ = value; _has_field_.set(2); }

 private:
  uint64_t fd_{};
  std::string path_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ProcessStats_Thread : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kTidFieldNumber = 1,
  };

  ProcessStats_Thread();
  ~ProcessStats_Thread() override;
  ProcessStats_Thread(ProcessStats_Thread&&) noexcept;
  ProcessStats_Thread& operator=(ProcessStats_Thread&&);
  ProcessStats_Thread(const ProcessStats_Thread&);
  ProcessStats_Thread& operator=(const ProcessStats_Thread&);
  bool operator==(const ProcessStats_Thread&) const;
  bool operator!=(const ProcessStats_Thread& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_tid() const { return _has_field_[1]; }
  int32_t tid() const { return tid_; }
  void set_tid(int32_t value) { tid_ = value; _has_field_.set(1); }

 private:
  int32_t tid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PS_PROCESS_STATS_PROTO_CPP_H_
