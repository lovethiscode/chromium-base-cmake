#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ps/process_stats.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ProcessStats::ProcessStats() = default;
ProcessStats::~ProcessStats() = default;
ProcessStats::ProcessStats(const ProcessStats&) = default;
ProcessStats& ProcessStats::operator=(const ProcessStats&) = default;
ProcessStats::ProcessStats(ProcessStats&&) noexcept = default;
ProcessStats& ProcessStats::operator=(ProcessStats&&) = default;

bool ProcessStats::operator==(const ProcessStats& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(processes_, other.processes_)
   && ::protozero::internal::gen_helpers::EqualsField(collection_end_timestamp_, other.collection_end_timestamp_);
}

int ProcessStats::processes_size() const { return static_cast<int>(processes_.size()); }
void ProcessStats::clear_processes() { processes_.clear(); }
ProcessStats_Process* ProcessStats::add_processes() { processes_.emplace_back(); return &processes_.back(); }
bool ProcessStats::ParseFromArray(const void* raw, size_t size) {
  processes_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* processes */:
        processes_.emplace_back();
        processes_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* collection_end_timestamp */:
        field.get(&collection_end_timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessStats::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessStats::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessStats::Serialize(::protozero::Message* msg) const {
  // Field 1: processes
  for (auto& it : processes_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: collection_end_timestamp
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, collection_end_timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ProcessStats_Process::ProcessStats_Process() = default;
ProcessStats_Process::~ProcessStats_Process() = default;
ProcessStats_Process::ProcessStats_Process(const ProcessStats_Process&) = default;
ProcessStats_Process& ProcessStats_Process::operator=(const ProcessStats_Process&) = default;
ProcessStats_Process::ProcessStats_Process(ProcessStats_Process&&) noexcept = default;
ProcessStats_Process& ProcessStats_Process::operator=(ProcessStats_Process&&) = default;

bool ProcessStats_Process::operator==(const ProcessStats_Process& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(threads_, other.threads_)
   && ::protozero::internal::gen_helpers::EqualsField(vm_size_kb_, other.vm_size_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(vm_rss_kb_, other.vm_rss_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(rss_anon_kb_, other.rss_anon_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(rss_file_kb_, other.rss_file_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(rss_shmem_kb_, other.rss_shmem_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(vm_swap_kb_, other.vm_swap_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(vm_locked_kb_, other.vm_locked_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(vm_hwm_kb_, other.vm_hwm_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(oom_score_adj_, other.oom_score_adj_)
   && ::protozero::internal::gen_helpers::EqualsField(is_peak_rss_resettable_, other.is_peak_rss_resettable_)
   && ::protozero::internal::gen_helpers::EqualsField(chrome_private_footprint_kb_, other.chrome_private_footprint_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(chrome_peak_resident_set_kb_, other.chrome_peak_resident_set_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(fds_, other.fds_)
   && ::protozero::internal::gen_helpers::EqualsField(smr_rss_kb_, other.smr_rss_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(smr_pss_kb_, other.smr_pss_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(smr_pss_anon_kb_, other.smr_pss_anon_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(smr_pss_file_kb_, other.smr_pss_file_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(smr_pss_shmem_kb_, other.smr_pss_shmem_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(smr_swap_pss_kb_, other.smr_swap_pss_kb_)
   && ::protozero::internal::gen_helpers::EqualsField(runtime_user_mode_, other.runtime_user_mode_)
   && ::protozero::internal::gen_helpers::EqualsField(runtime_kernel_mode_, other.runtime_kernel_mode_);
}

int ProcessStats_Process::threads_size() const { return static_cast<int>(threads_.size()); }
void ProcessStats_Process::clear_threads() { threads_.clear(); }
ProcessStats_Thread* ProcessStats_Process::add_threads() { threads_.emplace_back(); return &threads_.back(); }
int ProcessStats_Process::fds_size() const { return static_cast<int>(fds_.size()); }
void ProcessStats_Process::clear_fds() { fds_.clear(); }
ProcessStats_FDInfo* ProcessStats_Process::add_fds() { fds_.emplace_back(); return &fds_.back(); }
bool ProcessStats_Process::ParseFromArray(const void* raw, size_t size) {
  threads_.clear();
  fds_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 11 /* threads */:
        threads_.emplace_back();
        threads_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* vm_size_kb */:
        field.get(&vm_size_kb_);
        break;
      case 3 /* vm_rss_kb */:
        field.get(&vm_rss_kb_);
        break;
      case 4 /* rss_anon_kb */:
        field.get(&rss_anon_kb_);
        break;
      case 5 /* rss_file_kb */:
        field.get(&rss_file_kb_);
        break;
      case 6 /* rss_shmem_kb */:
        field.get(&rss_shmem_kb_);
        break;
      case 7 /* vm_swap_kb */:
        field.get(&vm_swap_kb_);
        break;
      case 8 /* vm_locked_kb */:
        field.get(&vm_locked_kb_);
        break;
      case 9 /* vm_hwm_kb */:
        field.get(&vm_hwm_kb_);
        break;
      case 10 /* oom_score_adj */:
        field.get(&oom_score_adj_);
        break;
      case 12 /* is_peak_rss_resettable */:
        field.get(&is_peak_rss_resettable_);
        break;
      case 13 /* chrome_private_footprint_kb */:
        field.get(&chrome_private_footprint_kb_);
        break;
      case 14 /* chrome_peak_resident_set_kb */:
        field.get(&chrome_peak_resident_set_kb_);
        break;
      case 15 /* fds */:
        fds_.emplace_back();
        fds_.back().ParseFromArray(field.data(), field.size());
        break;
      case 16 /* smr_rss_kb */:
        field.get(&smr_rss_kb_);
        break;
      case 17 /* smr_pss_kb */:
        field.get(&smr_pss_kb_);
        break;
      case 18 /* smr_pss_anon_kb */:
        field.get(&smr_pss_anon_kb_);
        break;
      case 19 /* smr_pss_file_kb */:
        field.get(&smr_pss_file_kb_);
        break;
      case 20 /* smr_pss_shmem_kb */:
        field.get(&smr_pss_shmem_kb_);
        break;
      case 23 /* smr_swap_pss_kb */:
        field.get(&smr_swap_pss_kb_);
        break;
      case 21 /* runtime_user_mode */:
        field.get(&runtime_user_mode_);
        break;
      case 22 /* runtime_kernel_mode */:
        field.get(&runtime_kernel_mode_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessStats_Process::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessStats_Process::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessStats_Process::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, pid_, msg);
  }

  // Field 11: threads
  for (auto& it : threads_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 2: vm_size_kb
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, vm_size_kb_, msg);
  }

  // Field 3: vm_rss_kb
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, vm_rss_kb_, msg);
  }

  // Field 4: rss_anon_kb
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, rss_anon_kb_, msg);
  }

  // Field 5: rss_file_kb
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, rss_file_kb_, msg);
  }

  // Field 6: rss_shmem_kb
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, rss_shmem_kb_, msg);
  }

  // Field 7: vm_swap_kb
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, vm_swap_kb_, msg);
  }

  // Field 8: vm_locked_kb
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, vm_locked_kb_, msg);
  }

  // Field 9: vm_hwm_kb
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, vm_hwm_kb_, msg);
  }

  // Field 10: oom_score_adj
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, oom_score_adj_, msg);
  }

  // Field 12: is_peak_rss_resettable
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(12, is_peak_rss_resettable_, msg);
  }

  // Field 13: chrome_private_footprint_kb
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, chrome_private_footprint_kb_, msg);
  }

  // Field 14: chrome_peak_resident_set_kb
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, chrome_peak_resident_set_kb_, msg);
  }

  // Field 15: fds
  for (auto& it : fds_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(15));
  }

  // Field 16: smr_rss_kb
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, smr_rss_kb_, msg);
  }

  // Field 17: smr_pss_kb
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, smr_pss_kb_, msg);
  }

  // Field 18: smr_pss_anon_kb
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(18, smr_pss_anon_kb_, msg);
  }

  // Field 19: smr_pss_file_kb
  if (_has_field_[19]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(19, smr_pss_file_kb_, msg);
  }

  // Field 20: smr_pss_shmem_kb
  if (_has_field_[20]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(20, smr_pss_shmem_kb_, msg);
  }

  // Field 23: smr_swap_pss_kb
  if (_has_field_[23]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(23, smr_swap_pss_kb_, msg);
  }

  // Field 21: runtime_user_mode
  if (_has_field_[21]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(21, runtime_user_mode_, msg);
  }

  // Field 22: runtime_kernel_mode
  if (_has_field_[22]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(22, runtime_kernel_mode_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ProcessStats_FDInfo::ProcessStats_FDInfo() = default;
ProcessStats_FDInfo::~ProcessStats_FDInfo() = default;
ProcessStats_FDInfo::ProcessStats_FDInfo(const ProcessStats_FDInfo&) = default;
ProcessStats_FDInfo& ProcessStats_FDInfo::operator=(const ProcessStats_FDInfo&) = default;
ProcessStats_FDInfo::ProcessStats_FDInfo(ProcessStats_FDInfo&&) noexcept = default;
ProcessStats_FDInfo& ProcessStats_FDInfo::operator=(ProcessStats_FDInfo&&) = default;

bool ProcessStats_FDInfo::operator==(const ProcessStats_FDInfo& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(fd_, other.fd_)
   && ::protozero::internal::gen_helpers::EqualsField(path_, other.path_);
}

bool ProcessStats_FDInfo::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* fd */:
        field.get(&fd_);
        break;
      case 2 /* path */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &path_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessStats_FDInfo::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessStats_FDInfo::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessStats_FDInfo::Serialize(::protozero::Message* msg) const {
  // Field 1: fd
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, fd_, msg);
  }

  // Field 2: path
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, path_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ProcessStats_Thread::ProcessStats_Thread() = default;
ProcessStats_Thread::~ProcessStats_Thread() = default;
ProcessStats_Thread::ProcessStats_Thread(const ProcessStats_Thread&) = default;
ProcessStats_Thread& ProcessStats_Thread::operator=(const ProcessStats_Thread&) = default;
ProcessStats_Thread::ProcessStats_Thread(ProcessStats_Thread&&) noexcept = default;
ProcessStats_Thread& ProcessStats_Thread::operator=(ProcessStats_Thread&&) = default;

bool ProcessStats_Thread::operator==(const ProcessStats_Thread& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(tid_, other.tid_);
}

bool ProcessStats_Thread::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* tid */:
        field.get(&tid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessStats_Thread::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessStats_Thread::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessStats_Thread::Serialize(::protozero::Message* msg) const {
  // Field 1: tid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, tid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
