// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_IMEINSETSSOURCECONSUMER_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_IMEINSETSSOURCECONSUMER_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class InsetsSourceConsumerProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class ImeInsetsSourceConsumerProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ImeInsetsSourceConsumerProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ImeInsetsSourceConsumerProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ImeInsetsSourceConsumerProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_insets_source_consumer() const { return at<1>().valid(); }
  ::protozero::ConstBytes insets_source_consumer() const { return at<1>().as_bytes(); }
  bool has_is_requested_visible_awaiting_control() const { return at<3>().valid(); }
  bool is_requested_visible_awaiting_control() const { return at<3>().as_bool(); }
  bool has_is_hide_animation_running() const { return at<4>().valid(); }
  bool is_hide_animation_running() const { return at<4>().as_bool(); }
  bool has_is_show_requested_during_hide_animation() const { return at<5>().valid(); }
  bool is_show_requested_during_hide_animation() const { return at<5>().as_bool(); }
  bool has_has_pending_request() const { return at<6>().valid(); }
  bool has_pending_request() const { return at<6>().as_bool(); }
};

class ImeInsetsSourceConsumerProto : public ::protozero::Message {
 public:
  using Decoder = ImeInsetsSourceConsumerProto_Decoder;
  enum : int32_t {
    kInsetsSourceConsumerFieldNumber = 1,
    kIsRequestedVisibleAwaitingControlFieldNumber = 3,
    kIsHideAnimationRunningFieldNumber = 4,
    kIsShowRequestedDuringHideAnimationFieldNumber = 5,
    kHasPendingRequestFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ImeInsetsSourceConsumerProto"; }


  using FieldMetadata_InsetsSourceConsumer =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InsetsSourceConsumerProto,
      ImeInsetsSourceConsumerProto>;

  static constexpr FieldMetadata_InsetsSourceConsumer kInsetsSourceConsumer{};
  template <typename T = InsetsSourceConsumerProto> T* set_insets_source_consumer() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_IsRequestedVisibleAwaitingControl =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ImeInsetsSourceConsumerProto>;

  static constexpr FieldMetadata_IsRequestedVisibleAwaitingControl kIsRequestedVisibleAwaitingControl{};
  void set_is_requested_visible_awaiting_control(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsRequestedVisibleAwaitingControl::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsHideAnimationRunning =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ImeInsetsSourceConsumerProto>;

  static constexpr FieldMetadata_IsHideAnimationRunning kIsHideAnimationRunning{};
  void set_is_hide_animation_running(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsHideAnimationRunning::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsShowRequestedDuringHideAnimation =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ImeInsetsSourceConsumerProto>;

  static constexpr FieldMetadata_IsShowRequestedDuringHideAnimation kIsShowRequestedDuringHideAnimation{};
  void set_is_show_requested_during_hide_animation(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsShowRequestedDuringHideAnimation::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasPendingRequest =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ImeInsetsSourceConsumerProto>;

  static constexpr FieldMetadata_HasPendingRequest kHasPendingRequest{};
  void set_has_pending_request(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasPendingRequest::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
