// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/protolog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/common/protolog_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ProtoLogMessage;
struct ProtoLogMessageDefaultTypeInternal;
extern ProtoLogMessageDefaultTypeInternal _ProtoLogMessage_default_instance_;
class ProtoLogViewerConfig;
struct ProtoLogViewerConfigDefaultTypeInternal;
extern ProtoLogViewerConfigDefaultTypeInternal _ProtoLogViewerConfig_default_instance_;
class ProtoLogViewerConfig_Group;
struct ProtoLogViewerConfig_GroupDefaultTypeInternal;
extern ProtoLogViewerConfig_GroupDefaultTypeInternal _ProtoLogViewerConfig_Group_default_instance_;
class ProtoLogViewerConfig_MessageData;
struct ProtoLogViewerConfig_MessageDataDefaultTypeInternal;
extern ProtoLogViewerConfig_MessageDataDefaultTypeInternal _ProtoLogViewerConfig_MessageData_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ProtoLogMessage* Arena::CreateMaybeMessage<::perfetto::protos::ProtoLogMessage>(Arena*);
template<> ::perfetto::protos::ProtoLogViewerConfig* Arena::CreateMaybeMessage<::perfetto::protos::ProtoLogViewerConfig>(Arena*);
template<> ::perfetto::protos::ProtoLogViewerConfig_Group* Arena::CreateMaybeMessage<::perfetto::protos::ProtoLogViewerConfig_Group>(Arena*);
template<> ::perfetto::protos::ProtoLogViewerConfig_MessageData* Arena::CreateMaybeMessage<::perfetto::protos::ProtoLogViewerConfig_MessageData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ProtoLogMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProtoLogMessage) */ {
 public:
  inline ProtoLogMessage() : ProtoLogMessage(nullptr) {}
  ~ProtoLogMessage() override;
  explicit PROTOBUF_CONSTEXPR ProtoLogMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoLogMessage(const ProtoLogMessage& from);
  ProtoLogMessage(ProtoLogMessage&& from) noexcept
    : ProtoLogMessage() {
    *this = ::std::move(from);
  }

  inline ProtoLogMessage& operator=(const ProtoLogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoLogMessage& operator=(ProtoLogMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProtoLogMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoLogMessage* internal_default_instance() {
    return reinterpret_cast<const ProtoLogMessage*>(
               &_ProtoLogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoLogMessage& a, ProtoLogMessage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProtoLogMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoLogMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoLogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoLogMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProtoLogMessage& from);
  void MergeFrom(const ProtoLogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProtoLogMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProtoLogMessage";
  }
  protected:
  explicit ProtoLogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrParamIidsFieldNumber = 2,
    kSint64ParamsFieldNumber = 3,
    kDoubleParamsFieldNumber = 4,
    kBooleanParamsFieldNumber = 5,
    kMessageIdFieldNumber = 1,
    kStacktraceIidFieldNumber = 6,
  };
  // repeated uint32 str_param_iids = 2;
  int str_param_iids_size() const;
  private:
  int _internal_str_param_iids_size() const;
  public:
  void clear_str_param_iids();
  private:
  uint32_t _internal_str_param_iids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_str_param_iids() const;
  void _internal_add_str_param_iids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_str_param_iids();
  public:
  uint32_t str_param_iids(int index) const;
  void set_str_param_iids(int index, uint32_t value);
  void add_str_param_iids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      str_param_iids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_str_param_iids();

  // repeated sint64 sint64_params = 3;
  int sint64_params_size() const;
  private:
  int _internal_sint64_params_size() const;
  public:
  void clear_sint64_params();
  private:
  int64_t _internal_sint64_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sint64_params() const;
  void _internal_add_sint64_params(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sint64_params();
  public:
  int64_t sint64_params(int index) const;
  void set_sint64_params(int index, int64_t value);
  void add_sint64_params(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sint64_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sint64_params();

  // repeated double double_params = 4;
  int double_params_size() const;
  private:
  int _internal_double_params_size() const;
  public:
  void clear_double_params();
  private:
  double _internal_double_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_params() const;
  void _internal_add_double_params(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_params();
  public:
  double double_params(int index) const;
  void set_double_params(int index, double value);
  void add_double_params(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_params();

  // repeated int32 boolean_params = 5;
  int boolean_params_size() const;
  private:
  int _internal_boolean_params_size() const;
  public:
  void clear_boolean_params();
  private:
  int32_t _internal_boolean_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_boolean_params() const;
  void _internal_add_boolean_params(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_boolean_params();
  public:
  int32_t boolean_params(int index) const;
  void set_boolean_params(int index, int32_t value);
  void add_boolean_params(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      boolean_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_boolean_params();

  // optional fixed64 message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  uint64_t message_id() const;
  void set_message_id(uint64_t value);
  private:
  uint64_t _internal_message_id() const;
  void _internal_set_message_id(uint64_t value);
  public:

  // optional uint32 stacktrace_iid = 6;
  bool has_stacktrace_iid() const;
  private:
  bool _internal_has_stacktrace_iid() const;
  public:
  void clear_stacktrace_iid();
  uint32_t stacktrace_iid() const;
  void set_stacktrace_iid(uint32_t value);
  private:
  uint32_t _internal_stacktrace_iid() const;
  void _internal_set_stacktrace_iid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProtoLogMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > str_param_iids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sint64_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > boolean_params_;
    uint64_t message_id_;
    uint32_t stacktrace_iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto;
};
// -------------------------------------------------------------------

class ProtoLogViewerConfig_MessageData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProtoLogViewerConfig.MessageData) */ {
 public:
  inline ProtoLogViewerConfig_MessageData() : ProtoLogViewerConfig_MessageData(nullptr) {}
  ~ProtoLogViewerConfig_MessageData() override;
  explicit PROTOBUF_CONSTEXPR ProtoLogViewerConfig_MessageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoLogViewerConfig_MessageData(const ProtoLogViewerConfig_MessageData& from);
  ProtoLogViewerConfig_MessageData(ProtoLogViewerConfig_MessageData&& from) noexcept
    : ProtoLogViewerConfig_MessageData() {
    *this = ::std::move(from);
  }

  inline ProtoLogViewerConfig_MessageData& operator=(const ProtoLogViewerConfig_MessageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoLogViewerConfig_MessageData& operator=(ProtoLogViewerConfig_MessageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProtoLogViewerConfig_MessageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoLogViewerConfig_MessageData* internal_default_instance() {
    return reinterpret_cast<const ProtoLogViewerConfig_MessageData*>(
               &_ProtoLogViewerConfig_MessageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoLogViewerConfig_MessageData& a, ProtoLogViewerConfig_MessageData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProtoLogViewerConfig_MessageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoLogViewerConfig_MessageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoLogViewerConfig_MessageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoLogViewerConfig_MessageData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProtoLogViewerConfig_MessageData& from);
  void MergeFrom(const ProtoLogViewerConfig_MessageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProtoLogViewerConfig_MessageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProtoLogViewerConfig.MessageData";
  }
  protected:
  explicit ProtoLogViewerConfig_MessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kMessageIdFieldNumber = 1,
    kLevelFieldNumber = 3,
    kGroupIdFieldNumber = 4,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional fixed64 message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  uint64_t message_id() const;
  void set_message_id(uint64_t value);
  private:
  uint64_t _internal_message_id() const;
  void _internal_set_message_id(uint64_t value);
  public:

  // optional .perfetto.protos.ProtoLogLevel level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::perfetto::protos::ProtoLogLevel level() const;
  void set_level(::perfetto::protos::ProtoLogLevel value);
  private:
  ::perfetto::protos::ProtoLogLevel _internal_level() const;
  void _internal_set_level(::perfetto::protos::ProtoLogLevel value);
  public:

  // optional uint32 group_id = 4;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProtoLogViewerConfig.MessageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint64_t message_id_;
    int level_;
    uint32_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto;
};
// -------------------------------------------------------------------

class ProtoLogViewerConfig_Group final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProtoLogViewerConfig.Group) */ {
 public:
  inline ProtoLogViewerConfig_Group() : ProtoLogViewerConfig_Group(nullptr) {}
  ~ProtoLogViewerConfig_Group() override;
  explicit PROTOBUF_CONSTEXPR ProtoLogViewerConfig_Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoLogViewerConfig_Group(const ProtoLogViewerConfig_Group& from);
  ProtoLogViewerConfig_Group(ProtoLogViewerConfig_Group&& from) noexcept
    : ProtoLogViewerConfig_Group() {
    *this = ::std::move(from);
  }

  inline ProtoLogViewerConfig_Group& operator=(const ProtoLogViewerConfig_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoLogViewerConfig_Group& operator=(ProtoLogViewerConfig_Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProtoLogViewerConfig_Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoLogViewerConfig_Group* internal_default_instance() {
    return reinterpret_cast<const ProtoLogViewerConfig_Group*>(
               &_ProtoLogViewerConfig_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtoLogViewerConfig_Group& a, ProtoLogViewerConfig_Group& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProtoLogViewerConfig_Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoLogViewerConfig_Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoLogViewerConfig_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoLogViewerConfig_Group>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProtoLogViewerConfig_Group& from);
  void MergeFrom(const ProtoLogViewerConfig_Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProtoLogViewerConfig_Group* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProtoLogViewerConfig.Group";
  }
  protected:
  explicit ProtoLogViewerConfig_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTagFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string tag = 3;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProtoLogViewerConfig.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto;
};
// -------------------------------------------------------------------

class ProtoLogViewerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProtoLogViewerConfig) */ {
 public:
  inline ProtoLogViewerConfig() : ProtoLogViewerConfig(nullptr) {}
  ~ProtoLogViewerConfig() override;
  explicit PROTOBUF_CONSTEXPR ProtoLogViewerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoLogViewerConfig(const ProtoLogViewerConfig& from);
  ProtoLogViewerConfig(ProtoLogViewerConfig&& from) noexcept
    : ProtoLogViewerConfig() {
    *this = ::std::move(from);
  }

  inline ProtoLogViewerConfig& operator=(const ProtoLogViewerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoLogViewerConfig& operator=(ProtoLogViewerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProtoLogViewerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoLogViewerConfig* internal_default_instance() {
    return reinterpret_cast<const ProtoLogViewerConfig*>(
               &_ProtoLogViewerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtoLogViewerConfig& a, ProtoLogViewerConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProtoLogViewerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoLogViewerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoLogViewerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoLogViewerConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProtoLogViewerConfig& from);
  void MergeFrom(const ProtoLogViewerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProtoLogViewerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProtoLogViewerConfig";
  }
  protected:
  explicit ProtoLogViewerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProtoLogViewerConfig_MessageData MessageData;
  typedef ProtoLogViewerConfig_Group Group;

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kGroupsFieldNumber = 2,
  };
  // repeated .perfetto.protos.ProtoLogViewerConfig.MessageData messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::perfetto::protos::ProtoLogViewerConfig_MessageData* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_MessageData >*
      mutable_messages();
  private:
  const ::perfetto::protos::ProtoLogViewerConfig_MessageData& _internal_messages(int index) const;
  ::perfetto::protos::ProtoLogViewerConfig_MessageData* _internal_add_messages();
  public:
  const ::perfetto::protos::ProtoLogViewerConfig_MessageData& messages(int index) const;
  ::perfetto::protos::ProtoLogViewerConfig_MessageData* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_MessageData >&
      messages() const;

  // repeated .perfetto.protos.ProtoLogViewerConfig.Group groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::perfetto::protos::ProtoLogViewerConfig_Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_Group >*
      mutable_groups();
  private:
  const ::perfetto::protos::ProtoLogViewerConfig_Group& _internal_groups(int index) const;
  ::perfetto::protos::ProtoLogViewerConfig_Group* _internal_add_groups();
  public:
  const ::perfetto::protos::ProtoLogViewerConfig_Group& groups(int index) const;
  ::perfetto::protos::ProtoLogViewerConfig_Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProtoLogViewerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_MessageData > messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_Group > groups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoLogMessage

// optional fixed64 message_id = 1;
inline bool ProtoLogMessage::_internal_has_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoLogMessage::has_message_id() const {
  return _internal_has_message_id();
}
inline void ProtoLogMessage::clear_message_id() {
  _impl_.message_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ProtoLogMessage::_internal_message_id() const {
  return _impl_.message_id_;
}
inline uint64_t ProtoLogMessage::message_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogMessage.message_id)
  return _internal_message_id();
}
inline void ProtoLogMessage::_internal_set_message_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_id_ = value;
}
inline void ProtoLogMessage::set_message_id(uint64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogMessage.message_id)
}

// repeated uint32 str_param_iids = 2;
inline int ProtoLogMessage::_internal_str_param_iids_size() const {
  return _impl_.str_param_iids_.size();
}
inline int ProtoLogMessage::str_param_iids_size() const {
  return _internal_str_param_iids_size();
}
inline void ProtoLogMessage::clear_str_param_iids() {
  _impl_.str_param_iids_.Clear();
}
inline uint32_t ProtoLogMessage::_internal_str_param_iids(int index) const {
  return _impl_.str_param_iids_.Get(index);
}
inline uint32_t ProtoLogMessage::str_param_iids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogMessage.str_param_iids)
  return _internal_str_param_iids(index);
}
inline void ProtoLogMessage::set_str_param_iids(int index, uint32_t value) {
  _impl_.str_param_iids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogMessage.str_param_iids)
}
inline void ProtoLogMessage::_internal_add_str_param_iids(uint32_t value) {
  _impl_.str_param_iids_.Add(value);
}
inline void ProtoLogMessage::add_str_param_iids(uint32_t value) {
  _internal_add_str_param_iids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProtoLogMessage.str_param_iids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ProtoLogMessage::_internal_str_param_iids() const {
  return _impl_.str_param_iids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ProtoLogMessage::str_param_iids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProtoLogMessage.str_param_iids)
  return _internal_str_param_iids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ProtoLogMessage::_internal_mutable_str_param_iids() {
  return &_impl_.str_param_iids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ProtoLogMessage::mutable_str_param_iids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProtoLogMessage.str_param_iids)
  return _internal_mutable_str_param_iids();
}

// repeated sint64 sint64_params = 3;
inline int ProtoLogMessage::_internal_sint64_params_size() const {
  return _impl_.sint64_params_.size();
}
inline int ProtoLogMessage::sint64_params_size() const {
  return _internal_sint64_params_size();
}
inline void ProtoLogMessage::clear_sint64_params() {
  _impl_.sint64_params_.Clear();
}
inline int64_t ProtoLogMessage::_internal_sint64_params(int index) const {
  return _impl_.sint64_params_.Get(index);
}
inline int64_t ProtoLogMessage::sint64_params(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogMessage.sint64_params)
  return _internal_sint64_params(index);
}
inline void ProtoLogMessage::set_sint64_params(int index, int64_t value) {
  _impl_.sint64_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogMessage.sint64_params)
}
inline void ProtoLogMessage::_internal_add_sint64_params(int64_t value) {
  _impl_.sint64_params_.Add(value);
}
inline void ProtoLogMessage::add_sint64_params(int64_t value) {
  _internal_add_sint64_params(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProtoLogMessage.sint64_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ProtoLogMessage::_internal_sint64_params() const {
  return _impl_.sint64_params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ProtoLogMessage::sint64_params() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProtoLogMessage.sint64_params)
  return _internal_sint64_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ProtoLogMessage::_internal_mutable_sint64_params() {
  return &_impl_.sint64_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ProtoLogMessage::mutable_sint64_params() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProtoLogMessage.sint64_params)
  return _internal_mutable_sint64_params();
}

// repeated double double_params = 4;
inline int ProtoLogMessage::_internal_double_params_size() const {
  return _impl_.double_params_.size();
}
inline int ProtoLogMessage::double_params_size() const {
  return _internal_double_params_size();
}
inline void ProtoLogMessage::clear_double_params() {
  _impl_.double_params_.Clear();
}
inline double ProtoLogMessage::_internal_double_params(int index) const {
  return _impl_.double_params_.Get(index);
}
inline double ProtoLogMessage::double_params(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogMessage.double_params)
  return _internal_double_params(index);
}
inline void ProtoLogMessage::set_double_params(int index, double value) {
  _impl_.double_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogMessage.double_params)
}
inline void ProtoLogMessage::_internal_add_double_params(double value) {
  _impl_.double_params_.Add(value);
}
inline void ProtoLogMessage::add_double_params(double value) {
  _internal_add_double_params(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProtoLogMessage.double_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProtoLogMessage::_internal_double_params() const {
  return _impl_.double_params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProtoLogMessage::double_params() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProtoLogMessage.double_params)
  return _internal_double_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProtoLogMessage::_internal_mutable_double_params() {
  return &_impl_.double_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProtoLogMessage::mutable_double_params() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProtoLogMessage.double_params)
  return _internal_mutable_double_params();
}

// repeated int32 boolean_params = 5;
inline int ProtoLogMessage::_internal_boolean_params_size() const {
  return _impl_.boolean_params_.size();
}
inline int ProtoLogMessage::boolean_params_size() const {
  return _internal_boolean_params_size();
}
inline void ProtoLogMessage::clear_boolean_params() {
  _impl_.boolean_params_.Clear();
}
inline int32_t ProtoLogMessage::_internal_boolean_params(int index) const {
  return _impl_.boolean_params_.Get(index);
}
inline int32_t ProtoLogMessage::boolean_params(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogMessage.boolean_params)
  return _internal_boolean_params(index);
}
inline void ProtoLogMessage::set_boolean_params(int index, int32_t value) {
  _impl_.boolean_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogMessage.boolean_params)
}
inline void ProtoLogMessage::_internal_add_boolean_params(int32_t value) {
  _impl_.boolean_params_.Add(value);
}
inline void ProtoLogMessage::add_boolean_params(int32_t value) {
  _internal_add_boolean_params(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProtoLogMessage.boolean_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ProtoLogMessage::_internal_boolean_params() const {
  return _impl_.boolean_params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ProtoLogMessage::boolean_params() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProtoLogMessage.boolean_params)
  return _internal_boolean_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ProtoLogMessage::_internal_mutable_boolean_params() {
  return &_impl_.boolean_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ProtoLogMessage::mutable_boolean_params() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProtoLogMessage.boolean_params)
  return _internal_mutable_boolean_params();
}

// optional uint32 stacktrace_iid = 6;
inline bool ProtoLogMessage::_internal_has_stacktrace_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoLogMessage::has_stacktrace_iid() const {
  return _internal_has_stacktrace_iid();
}
inline void ProtoLogMessage::clear_stacktrace_iid() {
  _impl_.stacktrace_iid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ProtoLogMessage::_internal_stacktrace_iid() const {
  return _impl_.stacktrace_iid_;
}
inline uint32_t ProtoLogMessage::stacktrace_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogMessage.stacktrace_iid)
  return _internal_stacktrace_iid();
}
inline void ProtoLogMessage::_internal_set_stacktrace_iid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stacktrace_iid_ = value;
}
inline void ProtoLogMessage::set_stacktrace_iid(uint32_t value) {
  _internal_set_stacktrace_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogMessage.stacktrace_iid)
}

// -------------------------------------------------------------------

// ProtoLogViewerConfig_MessageData

// optional fixed64 message_id = 1;
inline bool ProtoLogViewerConfig_MessageData::_internal_has_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoLogViewerConfig_MessageData::has_message_id() const {
  return _internal_has_message_id();
}
inline void ProtoLogViewerConfig_MessageData::clear_message_id() {
  _impl_.message_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ProtoLogViewerConfig_MessageData::_internal_message_id() const {
  return _impl_.message_id_;
}
inline uint64_t ProtoLogViewerConfig_MessageData::message_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.MessageData.message_id)
  return _internal_message_id();
}
inline void ProtoLogViewerConfig_MessageData::_internal_set_message_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_id_ = value;
}
inline void ProtoLogViewerConfig_MessageData::set_message_id(uint64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogViewerConfig.MessageData.message_id)
}

// optional string message = 2;
inline bool ProtoLogViewerConfig_MessageData::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoLogViewerConfig_MessageData::has_message() const {
  return _internal_has_message();
}
inline void ProtoLogViewerConfig_MessageData::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoLogViewerConfig_MessageData::message() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.MessageData.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoLogViewerConfig_MessageData::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogViewerConfig.MessageData.message)
}
inline std::string* ProtoLogViewerConfig_MessageData::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProtoLogViewerConfig.MessageData.message)
  return _s;
}
inline const std::string& ProtoLogViewerConfig_MessageData::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ProtoLogViewerConfig_MessageData::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoLogViewerConfig_MessageData::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoLogViewerConfig_MessageData::release_message() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProtoLogViewerConfig.MessageData.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoLogViewerConfig_MessageData::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProtoLogViewerConfig.MessageData.message)
}

// optional .perfetto.protos.ProtoLogLevel level = 3;
inline bool ProtoLogViewerConfig_MessageData::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtoLogViewerConfig_MessageData::has_level() const {
  return _internal_has_level();
}
inline void ProtoLogViewerConfig_MessageData::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::ProtoLogLevel ProtoLogViewerConfig_MessageData::_internal_level() const {
  return static_cast< ::perfetto::protos::ProtoLogLevel >(_impl_.level_);
}
inline ::perfetto::protos::ProtoLogLevel ProtoLogViewerConfig_MessageData::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.MessageData.level)
  return _internal_level();
}
inline void ProtoLogViewerConfig_MessageData::_internal_set_level(::perfetto::protos::ProtoLogLevel value) {
  assert(::perfetto::protos::ProtoLogLevel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}
inline void ProtoLogViewerConfig_MessageData::set_level(::perfetto::protos::ProtoLogLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogViewerConfig.MessageData.level)
}

// optional uint32 group_id = 4;
inline bool ProtoLogViewerConfig_MessageData::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProtoLogViewerConfig_MessageData::has_group_id() const {
  return _internal_has_group_id();
}
inline void ProtoLogViewerConfig_MessageData::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ProtoLogViewerConfig_MessageData::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t ProtoLogViewerConfig_MessageData::group_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.MessageData.group_id)
  return _internal_group_id();
}
inline void ProtoLogViewerConfig_MessageData::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.group_id_ = value;
}
inline void ProtoLogViewerConfig_MessageData::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogViewerConfig.MessageData.group_id)
}

// -------------------------------------------------------------------

// ProtoLogViewerConfig_Group

// optional uint32 id = 1;
inline bool ProtoLogViewerConfig_Group::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtoLogViewerConfig_Group::has_id() const {
  return _internal_has_id();
}
inline void ProtoLogViewerConfig_Group::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ProtoLogViewerConfig_Group::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ProtoLogViewerConfig_Group::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.Group.id)
  return _internal_id();
}
inline void ProtoLogViewerConfig_Group::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void ProtoLogViewerConfig_Group::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogViewerConfig.Group.id)
}

// optional string name = 2;
inline bool ProtoLogViewerConfig_Group::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoLogViewerConfig_Group::has_name() const {
  return _internal_has_name();
}
inline void ProtoLogViewerConfig_Group::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoLogViewerConfig_Group::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.Group.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoLogViewerConfig_Group::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogViewerConfig.Group.name)
}
inline std::string* ProtoLogViewerConfig_Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProtoLogViewerConfig.Group.name)
  return _s;
}
inline const std::string& ProtoLogViewerConfig_Group::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProtoLogViewerConfig_Group::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoLogViewerConfig_Group::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoLogViewerConfig_Group::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProtoLogViewerConfig.Group.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoLogViewerConfig_Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProtoLogViewerConfig.Group.name)
}

// optional string tag = 3;
inline bool ProtoLogViewerConfig_Group::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoLogViewerConfig_Group::has_tag() const {
  return _internal_has_tag();
}
inline void ProtoLogViewerConfig_Group::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProtoLogViewerConfig_Group::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.Group.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoLogViewerConfig_Group::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogViewerConfig.Group.tag)
}
inline std::string* ProtoLogViewerConfig_Group::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProtoLogViewerConfig.Group.tag)
  return _s;
}
inline const std::string& ProtoLogViewerConfig_Group::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void ProtoLogViewerConfig_Group::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoLogViewerConfig_Group::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoLogViewerConfig_Group::release_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProtoLogViewerConfig.Group.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoLogViewerConfig_Group::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProtoLogViewerConfig.Group.tag)
}

// -------------------------------------------------------------------

// ProtoLogViewerConfig

// repeated .perfetto.protos.ProtoLogViewerConfig.MessageData messages = 1;
inline int ProtoLogViewerConfig::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int ProtoLogViewerConfig::messages_size() const {
  return _internal_messages_size();
}
inline void ProtoLogViewerConfig::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::perfetto::protos::ProtoLogViewerConfig_MessageData* ProtoLogViewerConfig::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProtoLogViewerConfig.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_MessageData >*
ProtoLogViewerConfig::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProtoLogViewerConfig.messages)
  return &_impl_.messages_;
}
inline const ::perfetto::protos::ProtoLogViewerConfig_MessageData& ProtoLogViewerConfig::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::perfetto::protos::ProtoLogViewerConfig_MessageData& ProtoLogViewerConfig::messages(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.messages)
  return _internal_messages(index);
}
inline ::perfetto::protos::ProtoLogViewerConfig_MessageData* ProtoLogViewerConfig::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::perfetto::protos::ProtoLogViewerConfig_MessageData* ProtoLogViewerConfig::add_messages() {
  ::perfetto::protos::ProtoLogViewerConfig_MessageData* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProtoLogViewerConfig.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_MessageData >&
ProtoLogViewerConfig::messages() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProtoLogViewerConfig.messages)
  return _impl_.messages_;
}

// repeated .perfetto.protos.ProtoLogViewerConfig.Group groups = 2;
inline int ProtoLogViewerConfig::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int ProtoLogViewerConfig::groups_size() const {
  return _internal_groups_size();
}
inline void ProtoLogViewerConfig::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::perfetto::protos::ProtoLogViewerConfig_Group* ProtoLogViewerConfig::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProtoLogViewerConfig.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_Group >*
ProtoLogViewerConfig::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProtoLogViewerConfig.groups)
  return &_impl_.groups_;
}
inline const ::perfetto::protos::ProtoLogViewerConfig_Group& ProtoLogViewerConfig::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::perfetto::protos::ProtoLogViewerConfig_Group& ProtoLogViewerConfig::groups(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogViewerConfig.groups)
  return _internal_groups(index);
}
inline ::perfetto::protos::ProtoLogViewerConfig_Group* ProtoLogViewerConfig::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::perfetto::protos::ProtoLogViewerConfig_Group* ProtoLogViewerConfig::add_groups() {
  ::perfetto::protos::ProtoLogViewerConfig_Group* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProtoLogViewerConfig.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogViewerConfig_Group >&
ProtoLogViewerConfig::groups() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProtoLogViewerConfig.groups)
  return _impl_.groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fprotolog_2eproto
