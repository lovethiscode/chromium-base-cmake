// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/packages_list.proto

#include "protos/perfetto/trace/android/packages_list.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR PackagesList_PackageInfo::PackagesList_PackageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/uint64_t{0u}
  , /*decltype(_impl_.version_code_)*/int64_t{0}
  , /*decltype(_impl_.debuggable_)*/false
  , /*decltype(_impl_.profileable_from_shell_)*/false} {}
struct PackagesList_PackageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackagesList_PackageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackagesList_PackageInfoDefaultTypeInternal() {}
  union {
    PackagesList_PackageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackagesList_PackageInfoDefaultTypeInternal _PackagesList_PackageInfo_default_instance_;
PROTOBUF_CONSTEXPR PackagesList::PackagesList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packages_)*/{}
  , /*decltype(_impl_.parse_error_)*/false
  , /*decltype(_impl_.read_error_)*/false} {}
struct PackagesListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackagesListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackagesListDefaultTypeInternal() {}
  union {
    PackagesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackagesListDefaultTypeInternal _PackagesList_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class PackagesList_PackageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PackagesList_PackageInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debuggable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_profileable_from_shell(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PackagesList_PackageInfo::PackagesList_PackageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PackagesList.PackageInfo)
}
PackagesList_PackageInfo::PackagesList_PackageInfo(const PackagesList_PackageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PackagesList_PackageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.version_code_){}
    , decltype(_impl_.debuggable_){}
    , decltype(_impl_.profileable_from_shell_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uid_, &from._impl_.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.profileable_from_shell_) -
    reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.profileable_from_shell_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PackagesList.PackageInfo)
}

inline void PackagesList_PackageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uid_){uint64_t{0u}}
    , decltype(_impl_.version_code_){int64_t{0}}
    , decltype(_impl_.debuggable_){false}
    , decltype(_impl_.profileable_from_shell_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PackagesList_PackageInfo::~PackagesList_PackageInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PackagesList.PackageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackagesList_PackageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PackagesList_PackageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PackagesList_PackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PackagesList.PackageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.profileable_from_shell_) -
        reinterpret_cast<char*>(&_impl_.uid_)) + sizeof(_impl_.profileable_from_shell_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PackagesList_PackageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool debuggable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_debuggable(&has_bits);
          _impl_.debuggable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool profileable_from_shell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_profileable_from_shell(&has_bits);
          _impl_.profileable_from_shell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 version_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_version_code(&has_bits);
          _impl_.version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackagesList_PackageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PackagesList.PackageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint64 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  // optional bool debuggable = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_debuggable(), target);
  }

  // optional bool profileable_from_shell = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_profileable_from_shell(), target);
  }

  // optional int64 version_code = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_version_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PackagesList.PackageInfo)
  return target;
}

size_t PackagesList_PackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PackagesList.PackageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
    }

    // optional int64 version_code = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version_code());
    }

    // optional bool debuggable = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool profileable_from_shell = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackagesList_PackageInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PackagesList_PackageInfo*>(
      &from));
}

void PackagesList_PackageInfo::MergeFrom(const PackagesList_PackageInfo& from) {
  PackagesList_PackageInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PackagesList.PackageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uid_ = from._impl_.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_code_ = from._impl_.version_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.debuggable_ = from._impl_.debuggable_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.profileable_from_shell_ = from._impl_.profileable_from_shell_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PackagesList_PackageInfo::CopyFrom(const PackagesList_PackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PackagesList.PackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackagesList_PackageInfo::IsInitialized() const {
  return true;
}

void PackagesList_PackageInfo::InternalSwap(PackagesList_PackageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PackagesList_PackageInfo, _impl_.profileable_from_shell_)
      + sizeof(PackagesList_PackageInfo::_impl_.profileable_from_shell_)
      - PROTOBUF_FIELD_OFFSET(PackagesList_PackageInfo, _impl_.uid_)>(
          reinterpret_cast<char*>(&_impl_.uid_),
          reinterpret_cast<char*>(&other->_impl_.uid_));
}

std::string PackagesList_PackageInfo::GetTypeName() const {
  return "perfetto.protos.PackagesList.PackageInfo";
}


// ===================================================================

class PackagesList::_Internal {
 public:
  using HasBits = decltype(std::declval<PackagesList>()._impl_._has_bits_);
  static void set_has_parse_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PackagesList::PackagesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PackagesList)
}
PackagesList::PackagesList(const PackagesList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PackagesList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packages_){from._impl_.packages_}
    , decltype(_impl_.parse_error_){}
    , decltype(_impl_.read_error_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.parse_error_, &from._impl_.parse_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.read_error_) -
    reinterpret_cast<char*>(&_impl_.parse_error_)) + sizeof(_impl_.read_error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PackagesList)
}

inline void PackagesList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packages_){arena}
    , decltype(_impl_.parse_error_){false}
    , decltype(_impl_.read_error_){false}
  };
}

PackagesList::~PackagesList() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PackagesList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackagesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packages_.~RepeatedPtrField();
}

void PackagesList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PackagesList::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PackagesList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packages_.Clear();
  ::memset(&_impl_.parse_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.read_error_) -
      reinterpret_cast<char*>(&_impl_.parse_error_)) + sizeof(_impl_.read_error_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PackagesList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.PackagesList.PackageInfo packages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool parse_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_parse_error(&has_bits);
          _impl_.parse_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool read_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_read_error(&has_bits);
          _impl_.read_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackagesList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PackagesList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.PackagesList.PackageInfo packages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packages_size()); i < n; i++) {
    const auto& repfield = this->_internal_packages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool parse_error = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_parse_error(), target);
  }

  // optional bool read_error = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_read_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PackagesList)
  return target;
}

size_t PackagesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PackagesList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.PackagesList.PackageInfo packages = 1;
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->_impl_.packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool parse_error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool read_error = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackagesList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PackagesList*>(
      &from));
}

void PackagesList::MergeFrom(const PackagesList& from) {
  PackagesList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PackagesList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packages_.MergeFrom(from._impl_.packages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.parse_error_ = from._impl_.parse_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.read_error_ = from._impl_.read_error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PackagesList::CopyFrom(const PackagesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PackagesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackagesList::IsInitialized() const {
  return true;
}

void PackagesList::InternalSwap(PackagesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.packages_.InternalSwap(&other->_impl_.packages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PackagesList, _impl_.read_error_)
      + sizeof(PackagesList::_impl_.read_error_)
      - PROTOBUF_FIELD_OFFSET(PackagesList, _impl_.parse_error_)>(
          reinterpret_cast<char*>(&_impl_.parse_error_),
          reinterpret_cast<char*>(&other->_impl_.parse_error_));
}

std::string PackagesList::GetTypeName() const {
  return "perfetto.protos.PackagesList";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PackagesList_PackageInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::PackagesList_PackageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PackagesList_PackageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PackagesList*
Arena::CreateMaybeMessage< ::perfetto::protos::PackagesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PackagesList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
