// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/protolog.proto

#include "protos/perfetto/trace/android/protolog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ProtoLogMessage::ProtoLogMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.str_param_iids_)*/{}
  , /*decltype(_impl_.sint64_params_)*/{}
  , /*decltype(_impl_.double_params_)*/{}
  , /*decltype(_impl_.boolean_params_)*/{}
  , /*decltype(_impl_.message_id_)*/uint64_t{0u}
  , /*decltype(_impl_.stacktrace_iid_)*/0u} {}
struct ProtoLogMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoLogMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoLogMessageDefaultTypeInternal() {}
  union {
    ProtoLogMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoLogMessageDefaultTypeInternal _ProtoLogMessage_default_instance_;
PROTOBUF_CONSTEXPR ProtoLogViewerConfig_MessageData::ProtoLogViewerConfig_MessageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_id_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.group_id_)*/0u} {}
struct ProtoLogViewerConfig_MessageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoLogViewerConfig_MessageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoLogViewerConfig_MessageDataDefaultTypeInternal() {}
  union {
    ProtoLogViewerConfig_MessageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoLogViewerConfig_MessageDataDefaultTypeInternal _ProtoLogViewerConfig_MessageData_default_instance_;
PROTOBUF_CONSTEXPR ProtoLogViewerConfig_Group::ProtoLogViewerConfig_Group(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct ProtoLogViewerConfig_GroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoLogViewerConfig_GroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoLogViewerConfig_GroupDefaultTypeInternal() {}
  union {
    ProtoLogViewerConfig_Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoLogViewerConfig_GroupDefaultTypeInternal _ProtoLogViewerConfig_Group_default_instance_;
PROTOBUF_CONSTEXPR ProtoLogViewerConfig::ProtoLogViewerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoLogViewerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoLogViewerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoLogViewerConfigDefaultTypeInternal() {}
  union {
    ProtoLogViewerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoLogViewerConfigDefaultTypeInternal _ProtoLogViewerConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class ProtoLogMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoLogMessage>()._impl_._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stacktrace_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProtoLogMessage::ProtoLogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProtoLogMessage)
}
ProtoLogMessage::ProtoLogMessage(const ProtoLogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProtoLogMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_param_iids_){from._impl_.str_param_iids_}
    , decltype(_impl_.sint64_params_){from._impl_.sint64_params_}
    , decltype(_impl_.double_params_){from._impl_.double_params_}
    , decltype(_impl_.boolean_params_){from._impl_.boolean_params_}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.stacktrace_iid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.message_id_, &from._impl_.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stacktrace_iid_) -
    reinterpret_cast<char*>(&_impl_.message_id_)) + sizeof(_impl_.stacktrace_iid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProtoLogMessage)
}

inline void ProtoLogMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_param_iids_){arena}
    , decltype(_impl_.sint64_params_){arena}
    , decltype(_impl_.double_params_){arena}
    , decltype(_impl_.boolean_params_){arena}
    , decltype(_impl_.message_id_){uint64_t{0u}}
    , decltype(_impl_.stacktrace_iid_){0u}
  };
}

ProtoLogMessage::~ProtoLogMessage() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProtoLogMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoLogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_param_iids_.~RepeatedField();
  _impl_.sint64_params_.~RepeatedField();
  _impl_.double_params_.~RepeatedField();
  _impl_.boolean_params_.~RepeatedField();
}

void ProtoLogMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoLogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProtoLogMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_param_iids_.Clear();
  _impl_.sint64_params_.Clear();
  _impl_.double_params_.Clear();
  _impl_.boolean_params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stacktrace_iid_) -
        reinterpret_cast<char*>(&_impl_.message_id_)) + sizeof(_impl_.stacktrace_iid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProtoLogMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_message_id(&has_bits);
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 str_param_iids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_str_param_iids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_str_param_iids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 sint64_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sint64_params(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_sint64_params(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_double_params(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_params(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 boolean_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_boolean_params(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_boolean_params(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stacktrace_iid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_stacktrace_iid(&has_bits);
          _impl_.stacktrace_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoLogMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProtoLogMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_message_id(), target);
  }

  // repeated uint32 str_param_iids = 2;
  for (int i = 0, n = this->_internal_str_param_iids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_str_param_iids(i), target);
  }

  // repeated sint64 sint64_params = 3;
  for (int i = 0, n = this->_internal_sint64_params_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(3, this->_internal_sint64_params(i), target);
  }

  // repeated double double_params = 4;
  for (int i = 0, n = this->_internal_double_params_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_params(i), target);
  }

  // repeated int32 boolean_params = 5;
  for (int i = 0, n = this->_internal_boolean_params_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_boolean_params(i), target);
  }

  // optional uint32 stacktrace_iid = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_stacktrace_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProtoLogMessage)
  return target;
}

size_t ProtoLogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProtoLogMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 str_param_iids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.str_param_iids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_str_param_iids_size());
    total_size += data_size;
  }

  // repeated sint64 sint64_params = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->_impl_.sint64_params_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sint64_params_size());
    total_size += data_size;
  }

  // repeated double double_params = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_params_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_double_params_size());
    total_size += data_size;
  }

  // repeated int32 boolean_params = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.boolean_params_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_boolean_params_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 stacktrace_iid = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stacktrace_iid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoLogMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProtoLogMessage*>(
      &from));
}

void ProtoLogMessage::MergeFrom(const ProtoLogMessage& from) {
  ProtoLogMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProtoLogMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.str_param_iids_.MergeFrom(from._impl_.str_param_iids_);
  _this->_impl_.sint64_params_.MergeFrom(from._impl_.sint64_params_);
  _this->_impl_.double_params_.MergeFrom(from._impl_.double_params_);
  _this->_impl_.boolean_params_.MergeFrom(from._impl_.boolean_params_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.message_id_ = from._impl_.message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stacktrace_iid_ = from._impl_.stacktrace_iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProtoLogMessage::CopyFrom(const ProtoLogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProtoLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLogMessage::IsInitialized() const {
  return true;
}

void ProtoLogMessage::InternalSwap(ProtoLogMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.str_param_iids_.InternalSwap(&other->_impl_.str_param_iids_);
  _impl_.sint64_params_.InternalSwap(&other->_impl_.sint64_params_);
  _impl_.double_params_.InternalSwap(&other->_impl_.double_params_);
  _impl_.boolean_params_.InternalSwap(&other->_impl_.boolean_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoLogMessage, _impl_.stacktrace_iid_)
      + sizeof(ProtoLogMessage::_impl_.stacktrace_iid_)
      - PROTOBUF_FIELD_OFFSET(ProtoLogMessage, _impl_.message_id_)>(
          reinterpret_cast<char*>(&_impl_.message_id_),
          reinterpret_cast<char*>(&other->_impl_.message_id_));
}

std::string ProtoLogMessage::GetTypeName() const {
  return "perfetto.protos.ProtoLogMessage";
}


// ===================================================================

class ProtoLogViewerConfig_MessageData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoLogViewerConfig_MessageData>()._impl_._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ProtoLogViewerConfig_MessageData::ProtoLogViewerConfig_MessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProtoLogViewerConfig.MessageData)
}
ProtoLogViewerConfig_MessageData::ProtoLogViewerConfig_MessageData(const ProtoLogViewerConfig_MessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProtoLogViewerConfig_MessageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.message_id_, &from._impl_.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.message_id_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProtoLogViewerConfig.MessageData)
}

inline void ProtoLogViewerConfig_MessageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.message_id_){uint64_t{0u}}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoLogViewerConfig_MessageData::~ProtoLogViewerConfig_MessageData() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProtoLogViewerConfig.MessageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoLogViewerConfig_MessageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ProtoLogViewerConfig_MessageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoLogViewerConfig_MessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProtoLogViewerConfig.MessageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_id_) -
        reinterpret_cast<char*>(&_impl_.message_id_)) + sizeof(_impl_.group_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProtoLogViewerConfig_MessageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_message_id(&has_bits);
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProtoLogLevel level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProtoLogLevel_IsValid(val))) {
            _internal_set_level(static_cast<::perfetto::protos::ProtoLogLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoLogViewerConfig_MessageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProtoLogViewerConfig.MessageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_message_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional .perfetto.protos.ProtoLogLevel level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_level(), target);
  }

  // optional uint32 group_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProtoLogViewerConfig.MessageData)
  return target;
}

size_t ProtoLogViewerConfig_MessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProtoLogViewerConfig.MessageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional fixed64 message_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .perfetto.protos.ProtoLogLevel level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
    }

    // optional uint32 group_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoLogViewerConfig_MessageData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProtoLogViewerConfig_MessageData*>(
      &from));
}

void ProtoLogViewerConfig_MessageData::MergeFrom(const ProtoLogViewerConfig_MessageData& from) {
  ProtoLogViewerConfig_MessageData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProtoLogViewerConfig.MessageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.message_id_ = from._impl_.message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProtoLogViewerConfig_MessageData::CopyFrom(const ProtoLogViewerConfig_MessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProtoLogViewerConfig.MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLogViewerConfig_MessageData::IsInitialized() const {
  return true;
}

void ProtoLogViewerConfig_MessageData::InternalSwap(ProtoLogViewerConfig_MessageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoLogViewerConfig_MessageData, _impl_.group_id_)
      + sizeof(ProtoLogViewerConfig_MessageData::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(ProtoLogViewerConfig_MessageData, _impl_.message_id_)>(
          reinterpret_cast<char*>(&_impl_.message_id_),
          reinterpret_cast<char*>(&other->_impl_.message_id_));
}

std::string ProtoLogViewerConfig_MessageData::GetTypeName() const {
  return "perfetto.protos.ProtoLogViewerConfig.MessageData";
}


// ===================================================================

class ProtoLogViewerConfig_Group::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoLogViewerConfig_Group>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProtoLogViewerConfig_Group::ProtoLogViewerConfig_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProtoLogViewerConfig.Group)
}
ProtoLogViewerConfig_Group::ProtoLogViewerConfig_Group(const ProtoLogViewerConfig_Group& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProtoLogViewerConfig_Group* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProtoLogViewerConfig.Group)
}

inline void ProtoLogViewerConfig_Group::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoLogViewerConfig_Group::~ProtoLogViewerConfig_Group() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProtoLogViewerConfig.Group)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoLogViewerConfig_Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.tag_.Destroy();
}

void ProtoLogViewerConfig_Group::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoLogViewerConfig_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProtoLogViewerConfig.Group)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProtoLogViewerConfig_Group::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoLogViewerConfig_Group::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProtoLogViewerConfig.Group)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProtoLogViewerConfig.Group)
  return target;
}

size_t ProtoLogViewerConfig_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProtoLogViewerConfig.Group)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoLogViewerConfig_Group::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProtoLogViewerConfig_Group*>(
      &from));
}

void ProtoLogViewerConfig_Group::MergeFrom(const ProtoLogViewerConfig_Group& from) {
  ProtoLogViewerConfig_Group* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProtoLogViewerConfig.Group)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProtoLogViewerConfig_Group::CopyFrom(const ProtoLogViewerConfig_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProtoLogViewerConfig.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLogViewerConfig_Group::IsInitialized() const {
  return true;
}

void ProtoLogViewerConfig_Group::InternalSwap(ProtoLogViewerConfig_Group* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

std::string ProtoLogViewerConfig_Group::GetTypeName() const {
  return "perfetto.protos.ProtoLogViewerConfig.Group";
}


// ===================================================================

class ProtoLogViewerConfig::_Internal {
 public:
};

ProtoLogViewerConfig::ProtoLogViewerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProtoLogViewerConfig)
}
ProtoLogViewerConfig::ProtoLogViewerConfig(const ProtoLogViewerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProtoLogViewerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.groups_){from._impl_.groups_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProtoLogViewerConfig)
}

inline void ProtoLogViewerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.groups_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtoLogViewerConfig::~ProtoLogViewerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProtoLogViewerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoLogViewerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  _impl_.groups_.~RepeatedPtrField();
}

void ProtoLogViewerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoLogViewerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProtoLogViewerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.groups_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProtoLogViewerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProtoLogViewerConfig.MessageData messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ProtoLogViewerConfig.Group groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoLogViewerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProtoLogViewerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProtoLogViewerConfig.MessageData messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ProtoLogViewerConfig.Group groups = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProtoLogViewerConfig)
  return target;
}

size_t ProtoLogViewerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProtoLogViewerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProtoLogViewerConfig.MessageData messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ProtoLogViewerConfig.Group groups = 2;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_impl_.groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoLogViewerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProtoLogViewerConfig*>(
      &from));
}

void ProtoLogViewerConfig::MergeFrom(const ProtoLogViewerConfig& from) {
  ProtoLogViewerConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProtoLogViewerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProtoLogViewerConfig::CopyFrom(const ProtoLogViewerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProtoLogViewerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLogViewerConfig::IsInitialized() const {
  return true;
}

void ProtoLogViewerConfig::InternalSwap(ProtoLogViewerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
}

std::string ProtoLogViewerConfig::GetTypeName() const {
  return "perfetto.protos.ProtoLogViewerConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProtoLogMessage*
Arena::CreateMaybeMessage< ::perfetto::protos::ProtoLogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProtoLogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProtoLogViewerConfig_MessageData*
Arena::CreateMaybeMessage< ::perfetto::protos::ProtoLogViewerConfig_MessageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProtoLogViewerConfig_MessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProtoLogViewerConfig_Group*
Arena::CreateMaybeMessage< ::perfetto::protos::ProtoLogViewerConfig_Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProtoLogViewerConfig_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProtoLogViewerConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::ProtoLogViewerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProtoLogViewerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
