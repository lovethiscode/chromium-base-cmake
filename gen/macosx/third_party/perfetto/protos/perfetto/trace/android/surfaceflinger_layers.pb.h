// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/surfaceflinger_layers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/trace/android/surfaceflinger_common.pb.h"
#include "protos/perfetto/trace/android/graphics/rect.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ActiveBufferProto;
struct ActiveBufferProtoDefaultTypeInternal;
extern ActiveBufferProtoDefaultTypeInternal _ActiveBufferProto_default_instance_;
class BarrierLayerProto;
struct BarrierLayerProtoDefaultTypeInternal;
extern BarrierLayerProtoDefaultTypeInternal _BarrierLayerProto_default_instance_;
class DisplayProto;
struct DisplayProtoDefaultTypeInternal;
extern DisplayProtoDefaultTypeInternal _DisplayProto_default_instance_;
class FloatRectProto;
struct FloatRectProtoDefaultTypeInternal;
extern FloatRectProtoDefaultTypeInternal _FloatRectProto_default_instance_;
class LayerProto;
struct LayerProtoDefaultTypeInternal;
extern LayerProtoDefaultTypeInternal _LayerProto_default_instance_;
class LayerProto_MetadataEntry_DoNotUse;
struct LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal;
extern LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal _LayerProto_MetadataEntry_DoNotUse_default_instance_;
class LayersProto;
struct LayersProtoDefaultTypeInternal;
extern LayersProtoDefaultTypeInternal _LayersProto_default_instance_;
class LayersSnapshotProto;
struct LayersSnapshotProtoDefaultTypeInternal;
extern LayersSnapshotProtoDefaultTypeInternal _LayersSnapshotProto_default_instance_;
class LayersTraceFileProto;
struct LayersTraceFileProtoDefaultTypeInternal;
extern LayersTraceFileProtoDefaultTypeInternal _LayersTraceFileProto_default_instance_;
class PositionProto;
struct PositionProtoDefaultTypeInternal;
extern PositionProtoDefaultTypeInternal _PositionProto_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ActiveBufferProto* Arena::CreateMaybeMessage<::perfetto::protos::ActiveBufferProto>(Arena*);
template<> ::perfetto::protos::BarrierLayerProto* Arena::CreateMaybeMessage<::perfetto::protos::BarrierLayerProto>(Arena*);
template<> ::perfetto::protos::DisplayProto* Arena::CreateMaybeMessage<::perfetto::protos::DisplayProto>(Arena*);
template<> ::perfetto::protos::FloatRectProto* Arena::CreateMaybeMessage<::perfetto::protos::FloatRectProto>(Arena*);
template<> ::perfetto::protos::LayerProto* Arena::CreateMaybeMessage<::perfetto::protos::LayerProto>(Arena*);
template<> ::perfetto::protos::LayerProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::perfetto::protos::LayerProto_MetadataEntry_DoNotUse>(Arena*);
template<> ::perfetto::protos::LayersProto* Arena::CreateMaybeMessage<::perfetto::protos::LayersProto>(Arena*);
template<> ::perfetto::protos::LayersSnapshotProto* Arena::CreateMaybeMessage<::perfetto::protos::LayersSnapshotProto>(Arena*);
template<> ::perfetto::protos::LayersTraceFileProto* Arena::CreateMaybeMessage<::perfetto::protos::LayersTraceFileProto>(Arena*);
template<> ::perfetto::protos::PositionProto* Arena::CreateMaybeMessage<::perfetto::protos::PositionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum LayersTraceFileProto_MagicNumber : int {
  LayersTraceFileProto_MagicNumber_INVALID = 0,
  LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L = 1414682956,
  LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_H = 1162035538
};
bool LayersTraceFileProto_MagicNumber_IsValid(int value);
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto_MagicNumber_MagicNumber_MIN = LayersTraceFileProto_MagicNumber_INVALID;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto_MagicNumber_MagicNumber_MAX = LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L;
constexpr int LayersTraceFileProto_MagicNumber_MagicNumber_ARRAYSIZE = LayersTraceFileProto_MagicNumber_MagicNumber_MAX + 1;

const std::string& LayersTraceFileProto_MagicNumber_Name(LayersTraceFileProto_MagicNumber value);
template<typename T>
inline const std::string& LayersTraceFileProto_MagicNumber_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayersTraceFileProto_MagicNumber>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayersTraceFileProto_MagicNumber_Name.");
  return LayersTraceFileProto_MagicNumber_Name(static_cast<LayersTraceFileProto_MagicNumber>(enum_t_value));
}
bool LayersTraceFileProto_MagicNumber_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayersTraceFileProto_MagicNumber* value);
enum HwcCompositionType : int {
  HWC_TYPE_UNSPECIFIED = 0,
  HWC_TYPE_CLIENT = 1,
  HWC_TYPE_DEVICE = 2,
  HWC_TYPE_SOLID_COLOR = 3,
  HWC_TYPE_CURSOR = 4,
  HWC_TYPE_SIDEBAND = 5,
  HWC_TYPE_DISPLAY_DECORATION = 6
};
bool HwcCompositionType_IsValid(int value);
constexpr HwcCompositionType HwcCompositionType_MIN = HWC_TYPE_UNSPECIFIED;
constexpr HwcCompositionType HwcCompositionType_MAX = HWC_TYPE_DISPLAY_DECORATION;
constexpr int HwcCompositionType_ARRAYSIZE = HwcCompositionType_MAX + 1;

const std::string& HwcCompositionType_Name(HwcCompositionType value);
template<typename T>
inline const std::string& HwcCompositionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HwcCompositionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HwcCompositionType_Name.");
  return HwcCompositionType_Name(static_cast<HwcCompositionType>(enum_t_value));
}
bool HwcCompositionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HwcCompositionType* value);
// ===================================================================

class LayersTraceFileProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayersTraceFileProto) */ {
 public:
  inline LayersTraceFileProto() : LayersTraceFileProto(nullptr) {}
  ~LayersTraceFileProto() override;
  explicit PROTOBUF_CONSTEXPR LayersTraceFileProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayersTraceFileProto(const LayersTraceFileProto& from);
  LayersTraceFileProto(LayersTraceFileProto&& from) noexcept
    : LayersTraceFileProto() {
    *this = ::std::move(from);
  }

  inline LayersTraceFileProto& operator=(const LayersTraceFileProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersTraceFileProto& operator=(LayersTraceFileProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayersTraceFileProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayersTraceFileProto* internal_default_instance() {
    return reinterpret_cast<const LayersTraceFileProto*>(
               &_LayersTraceFileProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayersTraceFileProto& a, LayersTraceFileProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayersTraceFileProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayersTraceFileProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayersTraceFileProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayersTraceFileProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayersTraceFileProto& from);
  void MergeFrom(const LayersTraceFileProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersTraceFileProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayersTraceFileProto";
  }
  protected:
  explicit LayersTraceFileProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LayersTraceFileProto_MagicNumber MagicNumber;
  static constexpr MagicNumber INVALID =
    LayersTraceFileProto_MagicNumber_INVALID;
  static constexpr MagicNumber MAGIC_NUMBER_L =
    LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L;
  static constexpr MagicNumber MAGIC_NUMBER_H =
    LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_H;
  static inline bool MagicNumber_IsValid(int value) {
    return LayersTraceFileProto_MagicNumber_IsValid(value);
  }
  static constexpr MagicNumber MagicNumber_MIN =
    LayersTraceFileProto_MagicNumber_MagicNumber_MIN;
  static constexpr MagicNumber MagicNumber_MAX =
    LayersTraceFileProto_MagicNumber_MagicNumber_MAX;
  static constexpr int MagicNumber_ARRAYSIZE =
    LayersTraceFileProto_MagicNumber_MagicNumber_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MagicNumber_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MagicNumber>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MagicNumber_Name.");
    return LayersTraceFileProto_MagicNumber_Name(enum_t_value);
  }
  static inline bool MagicNumber_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MagicNumber* value) {
    return LayersTraceFileProto_MagicNumber_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kMagicNumberFieldNumber = 1,
    kRealToElapsedTimeOffsetNanosFieldNumber = 3,
  };
  // repeated .perfetto.protos.LayersSnapshotProto entry = 2;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::perfetto::protos::LayersSnapshotProto* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayersSnapshotProto >*
      mutable_entry();
  private:
  const ::perfetto::protos::LayersSnapshotProto& _internal_entry(int index) const;
  ::perfetto::protos::LayersSnapshotProto* _internal_add_entry();
  public:
  const ::perfetto::protos::LayersSnapshotProto& entry(int index) const;
  ::perfetto::protos::LayersSnapshotProto* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayersSnapshotProto >&
      entry() const;

  // optional fixed64 magic_number = 1;
  bool has_magic_number() const;
  private:
  bool _internal_has_magic_number() const;
  public:
  void clear_magic_number();
  uint64_t magic_number() const;
  void set_magic_number(uint64_t value);
  private:
  uint64_t _internal_magic_number() const;
  void _internal_set_magic_number(uint64_t value);
  public:

  // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
  bool has_real_to_elapsed_time_offset_nanos() const;
  private:
  bool _internal_has_real_to_elapsed_time_offset_nanos() const;
  public:
  void clear_real_to_elapsed_time_offset_nanos();
  uint64_t real_to_elapsed_time_offset_nanos() const;
  void set_real_to_elapsed_time_offset_nanos(uint64_t value);
  private:
  uint64_t _internal_real_to_elapsed_time_offset_nanos() const;
  void _internal_set_real_to_elapsed_time_offset_nanos(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayersTraceFileProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayersSnapshotProto > entry_;
    uint64_t magic_number_;
    uint64_t real_to_elapsed_time_offset_nanos_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class LayersSnapshotProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayersSnapshotProto) */ {
 public:
  inline LayersSnapshotProto() : LayersSnapshotProto(nullptr) {}
  ~LayersSnapshotProto() override;
  explicit PROTOBUF_CONSTEXPR LayersSnapshotProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayersSnapshotProto(const LayersSnapshotProto& from);
  LayersSnapshotProto(LayersSnapshotProto&& from) noexcept
    : LayersSnapshotProto() {
    *this = ::std::move(from);
  }

  inline LayersSnapshotProto& operator=(const LayersSnapshotProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersSnapshotProto& operator=(LayersSnapshotProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayersSnapshotProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayersSnapshotProto* internal_default_instance() {
    return reinterpret_cast<const LayersSnapshotProto*>(
               &_LayersSnapshotProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LayersSnapshotProto& a, LayersSnapshotProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayersSnapshotProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayersSnapshotProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayersSnapshotProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayersSnapshotProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayersSnapshotProto& from);
  void MergeFrom(const LayersSnapshotProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersSnapshotProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayersSnapshotProto";
  }
  protected:
  explicit LayersSnapshotProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplaysFieldNumber = 7,
    kWhereFieldNumber = 2,
    kHwcBlobFieldNumber = 4,
    kLayersFieldNumber = 3,
    kElapsedRealtimeNanosFieldNumber = 1,
    kExcludesCompositionStateFieldNumber = 5,
    kMissedEntriesFieldNumber = 6,
    kVsyncIdFieldNumber = 8,
  };
  // repeated .perfetto.protos.DisplayProto displays = 7;
  int displays_size() const;
  private:
  int _internal_displays_size() const;
  public:
  void clear_displays();
  ::perfetto::protos::DisplayProto* mutable_displays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayProto >*
      mutable_displays();
  private:
  const ::perfetto::protos::DisplayProto& _internal_displays(int index) const;
  ::perfetto::protos::DisplayProto* _internal_add_displays();
  public:
  const ::perfetto::protos::DisplayProto& displays(int index) const;
  ::perfetto::protos::DisplayProto* add_displays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayProto >&
      displays() const;

  // optional string where = 2;
  bool has_where() const;
  private:
  bool _internal_has_where() const;
  public:
  void clear_where();
  const std::string& where() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_where(ArgT0&& arg0, ArgT... args);
  std::string* mutable_where();
  PROTOBUF_NODISCARD std::string* release_where();
  void set_allocated_where(std::string* where);
  private:
  const std::string& _internal_where() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_where(const std::string& value);
  std::string* _internal_mutable_where();
  public:

  // optional string hwc_blob = 4;
  bool has_hwc_blob() const;
  private:
  bool _internal_has_hwc_blob() const;
  public:
  void clear_hwc_blob();
  const std::string& hwc_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hwc_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hwc_blob();
  PROTOBUF_NODISCARD std::string* release_hwc_blob();
  void set_allocated_hwc_blob(std::string* hwc_blob);
  private:
  const std::string& _internal_hwc_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hwc_blob(const std::string& value);
  std::string* _internal_mutable_hwc_blob();
  public:

  // optional .perfetto.protos.LayersProto layers = 3;
  bool has_layers() const;
  private:
  bool _internal_has_layers() const;
  public:
  void clear_layers();
  const ::perfetto::protos::LayersProto& layers() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LayersProto* release_layers();
  ::perfetto::protos::LayersProto* mutable_layers();
  void set_allocated_layers(::perfetto::protos::LayersProto* layers);
  private:
  const ::perfetto::protos::LayersProto& _internal_layers() const;
  ::perfetto::protos::LayersProto* _internal_mutable_layers();
  public:
  void unsafe_arena_set_allocated_layers(
      ::perfetto::protos::LayersProto* layers);
  ::perfetto::protos::LayersProto* unsafe_arena_release_layers();

  // optional sfixed64 elapsed_realtime_nanos = 1;
  bool has_elapsed_realtime_nanos() const;
  private:
  bool _internal_has_elapsed_realtime_nanos() const;
  public:
  void clear_elapsed_realtime_nanos();
  int64_t elapsed_realtime_nanos() const;
  void set_elapsed_realtime_nanos(int64_t value);
  private:
  int64_t _internal_elapsed_realtime_nanos() const;
  void _internal_set_elapsed_realtime_nanos(int64_t value);
  public:

  // optional bool excludes_composition_state = 5;
  bool has_excludes_composition_state() const;
  private:
  bool _internal_has_excludes_composition_state() const;
  public:
  void clear_excludes_composition_state();
  bool excludes_composition_state() const;
  void set_excludes_composition_state(bool value);
  private:
  bool _internal_excludes_composition_state() const;
  void _internal_set_excludes_composition_state(bool value);
  public:

  // optional uint32 missed_entries = 6;
  bool has_missed_entries() const;
  private:
  bool _internal_has_missed_entries() const;
  public:
  void clear_missed_entries();
  uint32_t missed_entries() const;
  void set_missed_entries(uint32_t value);
  private:
  uint32_t _internal_missed_entries() const;
  void _internal_set_missed_entries(uint32_t value);
  public:

  // optional int64 vsync_id = 8;
  bool has_vsync_id() const;
  private:
  bool _internal_has_vsync_id() const;
  public:
  void clear_vsync_id();
  int64_t vsync_id() const;
  void set_vsync_id(int64_t value);
  private:
  int64_t _internal_vsync_id() const;
  void _internal_set_vsync_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayersSnapshotProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayProto > displays_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr where_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hwc_blob_;
    ::perfetto::protos::LayersProto* layers_;
    int64_t elapsed_realtime_nanos_;
    bool excludes_composition_state_;
    uint32_t missed_entries_;
    int64_t vsync_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class LayersProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayersProto) */ {
 public:
  inline LayersProto() : LayersProto(nullptr) {}
  ~LayersProto() override;
  explicit PROTOBUF_CONSTEXPR LayersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayersProto(const LayersProto& from);
  LayersProto(LayersProto&& from) noexcept
    : LayersProto() {
    *this = ::std::move(from);
  }

  inline LayersProto& operator=(const LayersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersProto& operator=(LayersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayersProto* internal_default_instance() {
    return reinterpret_cast<const LayersProto*>(
               &_LayersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LayersProto& a, LayersProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayersProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayersProto& from);
  void MergeFrom(const LayersProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayersProto";
  }
  protected:
  explicit LayersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .perfetto.protos.LayerProto layers = 1;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::perfetto::protos::LayerProto* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerProto >*
      mutable_layers();
  private:
  const ::perfetto::protos::LayerProto& _internal_layers(int index) const;
  ::perfetto::protos::LayerProto* _internal_add_layers();
  public:
  const ::perfetto::protos::LayerProto& layers(int index) const;
  ::perfetto::protos::LayerProto* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerProto >&
      layers() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerProto > layers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class DisplayProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DisplayProto) */ {
 public:
  inline DisplayProto() : DisplayProto(nullptr) {}
  ~DisplayProto() override;
  explicit PROTOBUF_CONSTEXPR DisplayProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplayProto(const DisplayProto& from);
  DisplayProto(DisplayProto&& from) noexcept
    : DisplayProto() {
    *this = ::std::move(from);
  }

  inline DisplayProto& operator=(const DisplayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayProto& operator=(DisplayProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisplayProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplayProto* internal_default_instance() {
    return reinterpret_cast<const DisplayProto*>(
               &_DisplayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DisplayProto& a, DisplayProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DisplayProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisplayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisplayProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisplayProto& from);
  void MergeFrom(const DisplayProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DisplayProto";
  }
  protected:
  explicit DisplayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSizeFieldNumber = 4,
    kLayerStackSpaceRectFieldNumber = 5,
    kTransformFieldNumber = 6,
    kIdFieldNumber = 1,
    kLayerStackFieldNumber = 3,
    kIsVirtualFieldNumber = 7,
    kDpiXFieldNumber = 8,
    kDpiYFieldNumber = 9,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .perfetto.protos.SizeProto size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::perfetto::protos::SizeProto& size() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SizeProto* release_size();
  ::perfetto::protos::SizeProto* mutable_size();
  void set_allocated_size(::perfetto::protos::SizeProto* size);
  private:
  const ::perfetto::protos::SizeProto& _internal_size() const;
  ::perfetto::protos::SizeProto* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::perfetto::protos::SizeProto* size);
  ::perfetto::protos::SizeProto* unsafe_arena_release_size();

  // optional .perfetto.protos.RectProto layer_stack_space_rect = 5;
  bool has_layer_stack_space_rect() const;
  private:
  bool _internal_has_layer_stack_space_rect() const;
  public:
  void clear_layer_stack_space_rect();
  const ::perfetto::protos::RectProto& layer_stack_space_rect() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_layer_stack_space_rect();
  ::perfetto::protos::RectProto* mutable_layer_stack_space_rect();
  void set_allocated_layer_stack_space_rect(::perfetto::protos::RectProto* layer_stack_space_rect);
  private:
  const ::perfetto::protos::RectProto& _internal_layer_stack_space_rect() const;
  ::perfetto::protos::RectProto* _internal_mutable_layer_stack_space_rect();
  public:
  void unsafe_arena_set_allocated_layer_stack_space_rect(
      ::perfetto::protos::RectProto* layer_stack_space_rect);
  ::perfetto::protos::RectProto* unsafe_arena_release_layer_stack_space_rect();

  // optional .perfetto.protos.TransformProto transform = 6;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::perfetto::protos::TransformProto& transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TransformProto* release_transform();
  ::perfetto::protos::TransformProto* mutable_transform();
  void set_allocated_transform(::perfetto::protos::TransformProto* transform);
  private:
  const ::perfetto::protos::TransformProto& _internal_transform() const;
  ::perfetto::protos::TransformProto* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::perfetto::protos::TransformProto* transform);
  ::perfetto::protos::TransformProto* unsafe_arena_release_transform();

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint32 layer_stack = 3;
  bool has_layer_stack() const;
  private:
  bool _internal_has_layer_stack() const;
  public:
  void clear_layer_stack();
  uint32_t layer_stack() const;
  void set_layer_stack(uint32_t value);
  private:
  uint32_t _internal_layer_stack() const;
  void _internal_set_layer_stack(uint32_t value);
  public:

  // optional bool is_virtual = 7;
  bool has_is_virtual() const;
  private:
  bool _internal_has_is_virtual() const;
  public:
  void clear_is_virtual();
  bool is_virtual() const;
  void set_is_virtual(bool value);
  private:
  bool _internal_is_virtual() const;
  void _internal_set_is_virtual(bool value);
  public:

  // optional double dpi_x = 8;
  bool has_dpi_x() const;
  private:
  bool _internal_has_dpi_x() const;
  public:
  void clear_dpi_x();
  double dpi_x() const;
  void set_dpi_x(double value);
  private:
  double _internal_dpi_x() const;
  void _internal_set_dpi_x(double value);
  public:

  // optional double dpi_y = 9;
  bool has_dpi_y() const;
  private:
  bool _internal_has_dpi_y() const;
  public:
  void clear_dpi_y();
  double dpi_y() const;
  void set_dpi_y(double value);
  private:
  double _internal_dpi_y() const;
  void _internal_set_dpi_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.DisplayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::perfetto::protos::SizeProto* size_;
    ::perfetto::protos::RectProto* layer_stack_space_rect_;
    ::perfetto::protos::TransformProto* transform_;
    uint64_t id_;
    uint32_t layer_stack_;
    bool is_virtual_;
    double dpi_x_;
    double dpi_y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class LayerProto_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<LayerProto_MetadataEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<LayerProto_MetadataEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LayerProto_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LayerProto_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LayerProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LayerProto_MetadataEntry_DoNotUse& other);
  static const LayerProto_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LayerProto_MetadataEntry_DoNotUse*>(&_LayerProto_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};

// -------------------------------------------------------------------

class LayerProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayerProto) */ {
 public:
  inline LayerProto() : LayerProto(nullptr) {}
  ~LayerProto() override;
  explicit PROTOBUF_CONSTEXPR LayerProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerProto(const LayerProto& from);
  LayerProto(LayerProto&& from) noexcept
    : LayerProto() {
    *this = ::std::move(from);
  }

  inline LayerProto& operator=(const LayerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerProto& operator=(LayerProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerProto* internal_default_instance() {
    return reinterpret_cast<const LayerProto*>(
               &_LayerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LayerProto& a, LayerProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerProto& from);
  void MergeFrom(const LayerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayerProto";
  }
  protected:
  explicit LayerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kRelativesFieldNumber = 4,
    kBarrierLayerFieldNumber = 38,
    kMetadataFieldNumber = 42,
    kBlurRegionsFieldNumber = 54,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 5,
    kDataspaceFieldNumber = 18,
    kPixelFormatFieldNumber = 19,
    kTransparentRegionFieldNumber = 6,
    kVisibleRegionFieldNumber = 7,
    kDamageRegionFieldNumber = 8,
    kPositionFieldNumber = 11,
    kRequestedPositionFieldNumber = 12,
    kSizeFieldNumber = 13,
    kCropFieldNumber = 14,
    kFinalCropFieldNumber = 15,
    kColorFieldNumber = 20,
    kRequestedColorFieldNumber = 21,
    kTransformFieldNumber = 23,
    kRequestedTransformFieldNumber = 24,
    kActiveBufferFieldNumber = 27,
    kHwcFrameFieldNumber = 30,
    kHwcCropFieldNumber = 31,
    kBufferTransformFieldNumber = 39,
    kEffectiveTransformFieldNumber = 43,
    kSourceBoundsFieldNumber = 44,
    kBoundsFieldNumber = 45,
    kScreenBoundsFieldNumber = 46,
    kInputWindowInfoFieldNumber = 47,
    kCornerRadiusCropFieldNumber = 48,
    kColorTransformFieldNumber = 50,
    kDestinationFrameFieldNumber = 57,
    kIdFieldNumber = 1,
    kLayerStackFieldNumber = 9,
    kZFieldNumber = 10,
    kFlagsFieldNumber = 22,
    kIsOpaqueFieldNumber = 16,
    kInvalidateFieldNumber = 17,
    kRefreshPendingFieldNumber = 29,
    kIsProtectedFieldNumber = 36,
    kParentFieldNumber = 25,
    kZOrderRelativeOfFieldNumber = 26,
    kQueuedFramesFieldNumber = 28,
    kHwcTransformFieldNumber = 32,
    kWindowTypeFieldNumber = 33,
    kAppIdFieldNumber = 34,
    kHwcCompositionTypeFieldNumber = 35,
    kCurrFrameFieldNumber = 37,
    kEffectiveScalingModeFieldNumber = 40,
    kCornerRadiusFieldNumber = 41,
    kShadowRadiusFieldNumber = 49,
    kBackgroundBlurRadiusFieldNumber = 52,
    kOwnerUidFieldNumber = 53,
    kIsRelativeOfFieldNumber = 51,
    kIsTrustedOverlayFieldNumber = 55,
    kRequestedCornerRadiusFieldNumber = 56,
    kOriginalIdFieldNumber = 58,
    kTrustedOverlayFieldNumber = 59,
  };
  // repeated int32 children = 3 [packed = true];
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  int32_t _internal_children(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_children() const;
  void _internal_add_children(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_children();
  public:
  int32_t children(int index) const;
  void set_children(int index, int32_t value);
  void add_children(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_children();

  // repeated int32 relatives = 4 [packed = true];
  int relatives_size() const;
  private:
  int _internal_relatives_size() const;
  public:
  void clear_relatives();
  private:
  int32_t _internal_relatives(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_relatives() const;
  void _internal_add_relatives(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_relatives();
  public:
  int32_t relatives(int index) const;
  void set_relatives(int index, int32_t value);
  void add_relatives(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      relatives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_relatives();

  // repeated .perfetto.protos.BarrierLayerProto barrier_layer = 38;
  int barrier_layer_size() const;
  private:
  int _internal_barrier_layer_size() const;
  public:
  void clear_barrier_layer();
  ::perfetto::protos::BarrierLayerProto* mutable_barrier_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BarrierLayerProto >*
      mutable_barrier_layer();
  private:
  const ::perfetto::protos::BarrierLayerProto& _internal_barrier_layer(int index) const;
  ::perfetto::protos::BarrierLayerProto* _internal_add_barrier_layer();
  public:
  const ::perfetto::protos::BarrierLayerProto& barrier_layer(int index) const;
  ::perfetto::protos::BarrierLayerProto* add_barrier_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BarrierLayerProto >&
      barrier_layer() const;

  // map<int32, string> metadata = 42;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_metadata();

  // repeated .perfetto.protos.BlurRegion blur_regions = 54;
  int blur_regions_size() const;
  private:
  int _internal_blur_regions_size() const;
  public:
  void clear_blur_regions();
  ::perfetto::protos::BlurRegion* mutable_blur_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >*
      mutable_blur_regions();
  private:
  const ::perfetto::protos::BlurRegion& _internal_blur_regions(int index) const;
  ::perfetto::protos::BlurRegion* _internal_add_blur_regions();
  public:
  const ::perfetto::protos::BlurRegion& blur_regions(int index) const;
  ::perfetto::protos::BlurRegion* add_blur_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >&
      blur_regions() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string dataspace = 18;
  bool has_dataspace() const;
  private:
  bool _internal_has_dataspace() const;
  public:
  void clear_dataspace();
  const std::string& dataspace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataspace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataspace();
  PROTOBUF_NODISCARD std::string* release_dataspace();
  void set_allocated_dataspace(std::string* dataspace);
  private:
  const std::string& _internal_dataspace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataspace(const std::string& value);
  std::string* _internal_mutable_dataspace();
  public:

  // optional string pixel_format = 19;
  bool has_pixel_format() const;
  private:
  bool _internal_has_pixel_format() const;
  public:
  void clear_pixel_format();
  const std::string& pixel_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pixel_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pixel_format();
  PROTOBUF_NODISCARD std::string* release_pixel_format();
  void set_allocated_pixel_format(std::string* pixel_format);
  private:
  const std::string& _internal_pixel_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pixel_format(const std::string& value);
  std::string* _internal_mutable_pixel_format();
  public:

  // optional .perfetto.protos.RegionProto transparent_region = 6;
  bool has_transparent_region() const;
  private:
  bool _internal_has_transparent_region() const;
  public:
  void clear_transparent_region();
  const ::perfetto::protos::RegionProto& transparent_region() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegionProto* release_transparent_region();
  ::perfetto::protos::RegionProto* mutable_transparent_region();
  void set_allocated_transparent_region(::perfetto::protos::RegionProto* transparent_region);
  private:
  const ::perfetto::protos::RegionProto& _internal_transparent_region() const;
  ::perfetto::protos::RegionProto* _internal_mutable_transparent_region();
  public:
  void unsafe_arena_set_allocated_transparent_region(
      ::perfetto::protos::RegionProto* transparent_region);
  ::perfetto::protos::RegionProto* unsafe_arena_release_transparent_region();

  // optional .perfetto.protos.RegionProto visible_region = 7;
  bool has_visible_region() const;
  private:
  bool _internal_has_visible_region() const;
  public:
  void clear_visible_region();
  const ::perfetto::protos::RegionProto& visible_region() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegionProto* release_visible_region();
  ::perfetto::protos::RegionProto* mutable_visible_region();
  void set_allocated_visible_region(::perfetto::protos::RegionProto* visible_region);
  private:
  const ::perfetto::protos::RegionProto& _internal_visible_region() const;
  ::perfetto::protos::RegionProto* _internal_mutable_visible_region();
  public:
  void unsafe_arena_set_allocated_visible_region(
      ::perfetto::protos::RegionProto* visible_region);
  ::perfetto::protos::RegionProto* unsafe_arena_release_visible_region();

  // optional .perfetto.protos.RegionProto damage_region = 8;
  bool has_damage_region() const;
  private:
  bool _internal_has_damage_region() const;
  public:
  void clear_damage_region();
  const ::perfetto::protos::RegionProto& damage_region() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegionProto* release_damage_region();
  ::perfetto::protos::RegionProto* mutable_damage_region();
  void set_allocated_damage_region(::perfetto::protos::RegionProto* damage_region);
  private:
  const ::perfetto::protos::RegionProto& _internal_damage_region() const;
  ::perfetto::protos::RegionProto* _internal_mutable_damage_region();
  public:
  void unsafe_arena_set_allocated_damage_region(
      ::perfetto::protos::RegionProto* damage_region);
  ::perfetto::protos::RegionProto* unsafe_arena_release_damage_region();

  // optional .perfetto.protos.PositionProto position = 11;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::perfetto::protos::PositionProto& position() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PositionProto* release_position();
  ::perfetto::protos::PositionProto* mutable_position();
  void set_allocated_position(::perfetto::protos::PositionProto* position);
  private:
  const ::perfetto::protos::PositionProto& _internal_position() const;
  ::perfetto::protos::PositionProto* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::perfetto::protos::PositionProto* position);
  ::perfetto::protos::PositionProto* unsafe_arena_release_position();

  // optional .perfetto.protos.PositionProto requested_position = 12;
  bool has_requested_position() const;
  private:
  bool _internal_has_requested_position() const;
  public:
  void clear_requested_position();
  const ::perfetto::protos::PositionProto& requested_position() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PositionProto* release_requested_position();
  ::perfetto::protos::PositionProto* mutable_requested_position();
  void set_allocated_requested_position(::perfetto::protos::PositionProto* requested_position);
  private:
  const ::perfetto::protos::PositionProto& _internal_requested_position() const;
  ::perfetto::protos::PositionProto* _internal_mutable_requested_position();
  public:
  void unsafe_arena_set_allocated_requested_position(
      ::perfetto::protos::PositionProto* requested_position);
  ::perfetto::protos::PositionProto* unsafe_arena_release_requested_position();

  // optional .perfetto.protos.SizeProto size = 13;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::perfetto::protos::SizeProto& size() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SizeProto* release_size();
  ::perfetto::protos::SizeProto* mutable_size();
  void set_allocated_size(::perfetto::protos::SizeProto* size);
  private:
  const ::perfetto::protos::SizeProto& _internal_size() const;
  ::perfetto::protos::SizeProto* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::perfetto::protos::SizeProto* size);
  ::perfetto::protos::SizeProto* unsafe_arena_release_size();

  // optional .perfetto.protos.RectProto crop = 14;
  bool has_crop() const;
  private:
  bool _internal_has_crop() const;
  public:
  void clear_crop();
  const ::perfetto::protos::RectProto& crop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_crop();
  ::perfetto::protos::RectProto* mutable_crop();
  void set_allocated_crop(::perfetto::protos::RectProto* crop);
  private:
  const ::perfetto::protos::RectProto& _internal_crop() const;
  ::perfetto::protos::RectProto* _internal_mutable_crop();
  public:
  void unsafe_arena_set_allocated_crop(
      ::perfetto::protos::RectProto* crop);
  ::perfetto::protos::RectProto* unsafe_arena_release_crop();

  // optional .perfetto.protos.RectProto final_crop = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_final_crop() const;
  private:
  bool _internal_has_final_crop() const;
  public:
  PROTOBUF_DEPRECATED void clear_final_crop();
  PROTOBUF_DEPRECATED const ::perfetto::protos::RectProto& final_crop() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::perfetto::protos::RectProto* release_final_crop();
  PROTOBUF_DEPRECATED ::perfetto::protos::RectProto* mutable_final_crop();
  PROTOBUF_DEPRECATED void set_allocated_final_crop(::perfetto::protos::RectProto* final_crop);
  private:
  const ::perfetto::protos::RectProto& _internal_final_crop() const;
  ::perfetto::protos::RectProto* _internal_mutable_final_crop();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_final_crop(
      ::perfetto::protos::RectProto* final_crop);
  PROTOBUF_DEPRECATED ::perfetto::protos::RectProto* unsafe_arena_release_final_crop();

  // optional .perfetto.protos.ColorProto color = 20;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::perfetto::protos::ColorProto& color() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ColorProto* release_color();
  ::perfetto::protos::ColorProto* mutable_color();
  void set_allocated_color(::perfetto::protos::ColorProto* color);
  private:
  const ::perfetto::protos::ColorProto& _internal_color() const;
  ::perfetto::protos::ColorProto* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::perfetto::protos::ColorProto* color);
  ::perfetto::protos::ColorProto* unsafe_arena_release_color();

  // optional .perfetto.protos.ColorProto requested_color = 21;
  bool has_requested_color() const;
  private:
  bool _internal_has_requested_color() const;
  public:
  void clear_requested_color();
  const ::perfetto::protos::ColorProto& requested_color() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ColorProto* release_requested_color();
  ::perfetto::protos::ColorProto* mutable_requested_color();
  void set_allocated_requested_color(::perfetto::protos::ColorProto* requested_color);
  private:
  const ::perfetto::protos::ColorProto& _internal_requested_color() const;
  ::perfetto::protos::ColorProto* _internal_mutable_requested_color();
  public:
  void unsafe_arena_set_allocated_requested_color(
      ::perfetto::protos::ColorProto* requested_color);
  ::perfetto::protos::ColorProto* unsafe_arena_release_requested_color();

  // optional .perfetto.protos.TransformProto transform = 23;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::perfetto::protos::TransformProto& transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TransformProto* release_transform();
  ::perfetto::protos::TransformProto* mutable_transform();
  void set_allocated_transform(::perfetto::protos::TransformProto* transform);
  private:
  const ::perfetto::protos::TransformProto& _internal_transform() const;
  ::perfetto::protos::TransformProto* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::perfetto::protos::TransformProto* transform);
  ::perfetto::protos::TransformProto* unsafe_arena_release_transform();

  // optional .perfetto.protos.TransformProto requested_transform = 24;
  bool has_requested_transform() const;
  private:
  bool _internal_has_requested_transform() const;
  public:
  void clear_requested_transform();
  const ::perfetto::protos::TransformProto& requested_transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TransformProto* release_requested_transform();
  ::perfetto::protos::TransformProto* mutable_requested_transform();
  void set_allocated_requested_transform(::perfetto::protos::TransformProto* requested_transform);
  private:
  const ::perfetto::protos::TransformProto& _internal_requested_transform() const;
  ::perfetto::protos::TransformProto* _internal_mutable_requested_transform();
  public:
  void unsafe_arena_set_allocated_requested_transform(
      ::perfetto::protos::TransformProto* requested_transform);
  ::perfetto::protos::TransformProto* unsafe_arena_release_requested_transform();

  // optional .perfetto.protos.ActiveBufferProto active_buffer = 27;
  bool has_active_buffer() const;
  private:
  bool _internal_has_active_buffer() const;
  public:
  void clear_active_buffer();
  const ::perfetto::protos::ActiveBufferProto& active_buffer() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ActiveBufferProto* release_active_buffer();
  ::perfetto::protos::ActiveBufferProto* mutable_active_buffer();
  void set_allocated_active_buffer(::perfetto::protos::ActiveBufferProto* active_buffer);
  private:
  const ::perfetto::protos::ActiveBufferProto& _internal_active_buffer() const;
  ::perfetto::protos::ActiveBufferProto* _internal_mutable_active_buffer();
  public:
  void unsafe_arena_set_allocated_active_buffer(
      ::perfetto::protos::ActiveBufferProto* active_buffer);
  ::perfetto::protos::ActiveBufferProto* unsafe_arena_release_active_buffer();

  // optional .perfetto.protos.RectProto hwc_frame = 30;
  bool has_hwc_frame() const;
  private:
  bool _internal_has_hwc_frame() const;
  public:
  void clear_hwc_frame();
  const ::perfetto::protos::RectProto& hwc_frame() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_hwc_frame();
  ::perfetto::protos::RectProto* mutable_hwc_frame();
  void set_allocated_hwc_frame(::perfetto::protos::RectProto* hwc_frame);
  private:
  const ::perfetto::protos::RectProto& _internal_hwc_frame() const;
  ::perfetto::protos::RectProto* _internal_mutable_hwc_frame();
  public:
  void unsafe_arena_set_allocated_hwc_frame(
      ::perfetto::protos::RectProto* hwc_frame);
  ::perfetto::protos::RectProto* unsafe_arena_release_hwc_frame();

  // optional .perfetto.protos.FloatRectProto hwc_crop = 31;
  bool has_hwc_crop() const;
  private:
  bool _internal_has_hwc_crop() const;
  public:
  void clear_hwc_crop();
  const ::perfetto::protos::FloatRectProto& hwc_crop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FloatRectProto* release_hwc_crop();
  ::perfetto::protos::FloatRectProto* mutable_hwc_crop();
  void set_allocated_hwc_crop(::perfetto::protos::FloatRectProto* hwc_crop);
  private:
  const ::perfetto::protos::FloatRectProto& _internal_hwc_crop() const;
  ::perfetto::protos::FloatRectProto* _internal_mutable_hwc_crop();
  public:
  void unsafe_arena_set_allocated_hwc_crop(
      ::perfetto::protos::FloatRectProto* hwc_crop);
  ::perfetto::protos::FloatRectProto* unsafe_arena_release_hwc_crop();

  // optional .perfetto.protos.TransformProto buffer_transform = 39;
  bool has_buffer_transform() const;
  private:
  bool _internal_has_buffer_transform() const;
  public:
  void clear_buffer_transform();
  const ::perfetto::protos::TransformProto& buffer_transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TransformProto* release_buffer_transform();
  ::perfetto::protos::TransformProto* mutable_buffer_transform();
  void set_allocated_buffer_transform(::perfetto::protos::TransformProto* buffer_transform);
  private:
  const ::perfetto::protos::TransformProto& _internal_buffer_transform() const;
  ::perfetto::protos::TransformProto* _internal_mutable_buffer_transform();
  public:
  void unsafe_arena_set_allocated_buffer_transform(
      ::perfetto::protos::TransformProto* buffer_transform);
  ::perfetto::protos::TransformProto* unsafe_arena_release_buffer_transform();

  // optional .perfetto.protos.TransformProto effective_transform = 43;
  bool has_effective_transform() const;
  private:
  bool _internal_has_effective_transform() const;
  public:
  void clear_effective_transform();
  const ::perfetto::protos::TransformProto& effective_transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TransformProto* release_effective_transform();
  ::perfetto::protos::TransformProto* mutable_effective_transform();
  void set_allocated_effective_transform(::perfetto::protos::TransformProto* effective_transform);
  private:
  const ::perfetto::protos::TransformProto& _internal_effective_transform() const;
  ::perfetto::protos::TransformProto* _internal_mutable_effective_transform();
  public:
  void unsafe_arena_set_allocated_effective_transform(
      ::perfetto::protos::TransformProto* effective_transform);
  ::perfetto::protos::TransformProto* unsafe_arena_release_effective_transform();

  // optional .perfetto.protos.FloatRectProto source_bounds = 44;
  bool has_source_bounds() const;
  private:
  bool _internal_has_source_bounds() const;
  public:
  void clear_source_bounds();
  const ::perfetto::protos::FloatRectProto& source_bounds() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FloatRectProto* release_source_bounds();
  ::perfetto::protos::FloatRectProto* mutable_source_bounds();
  void set_allocated_source_bounds(::perfetto::protos::FloatRectProto* source_bounds);
  private:
  const ::perfetto::protos::FloatRectProto& _internal_source_bounds() const;
  ::perfetto::protos::FloatRectProto* _internal_mutable_source_bounds();
  public:
  void unsafe_arena_set_allocated_source_bounds(
      ::perfetto::protos::FloatRectProto* source_bounds);
  ::perfetto::protos::FloatRectProto* unsafe_arena_release_source_bounds();

  // optional .perfetto.protos.FloatRectProto bounds = 45;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::perfetto::protos::FloatRectProto& bounds() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FloatRectProto* release_bounds();
  ::perfetto::protos::FloatRectProto* mutable_bounds();
  void set_allocated_bounds(::perfetto::protos::FloatRectProto* bounds);
  private:
  const ::perfetto::protos::FloatRectProto& _internal_bounds() const;
  ::perfetto::protos::FloatRectProto* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::perfetto::protos::FloatRectProto* bounds);
  ::perfetto::protos::FloatRectProto* unsafe_arena_release_bounds();

  // optional .perfetto.protos.FloatRectProto screen_bounds = 46;
  bool has_screen_bounds() const;
  private:
  bool _internal_has_screen_bounds() const;
  public:
  void clear_screen_bounds();
  const ::perfetto::protos::FloatRectProto& screen_bounds() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FloatRectProto* release_screen_bounds();
  ::perfetto::protos::FloatRectProto* mutable_screen_bounds();
  void set_allocated_screen_bounds(::perfetto::protos::FloatRectProto* screen_bounds);
  private:
  const ::perfetto::protos::FloatRectProto& _internal_screen_bounds() const;
  ::perfetto::protos::FloatRectProto* _internal_mutable_screen_bounds();
  public:
  void unsafe_arena_set_allocated_screen_bounds(
      ::perfetto::protos::FloatRectProto* screen_bounds);
  ::perfetto::protos::FloatRectProto* unsafe_arena_release_screen_bounds();

  // optional .perfetto.protos.InputWindowInfoProto input_window_info = 47;
  bool has_input_window_info() const;
  private:
  bool _internal_has_input_window_info() const;
  public:
  void clear_input_window_info();
  const ::perfetto::protos::InputWindowInfoProto& input_window_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::InputWindowInfoProto* release_input_window_info();
  ::perfetto::protos::InputWindowInfoProto* mutable_input_window_info();
  void set_allocated_input_window_info(::perfetto::protos::InputWindowInfoProto* input_window_info);
  private:
  const ::perfetto::protos::InputWindowInfoProto& _internal_input_window_info() const;
  ::perfetto::protos::InputWindowInfoProto* _internal_mutable_input_window_info();
  public:
  void unsafe_arena_set_allocated_input_window_info(
      ::perfetto::protos::InputWindowInfoProto* input_window_info);
  ::perfetto::protos::InputWindowInfoProto* unsafe_arena_release_input_window_info();

  // optional .perfetto.protos.FloatRectProto corner_radius_crop = 48;
  bool has_corner_radius_crop() const;
  private:
  bool _internal_has_corner_radius_crop() const;
  public:
  void clear_corner_radius_crop();
  const ::perfetto::protos::FloatRectProto& corner_radius_crop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FloatRectProto* release_corner_radius_crop();
  ::perfetto::protos::FloatRectProto* mutable_corner_radius_crop();
  void set_allocated_corner_radius_crop(::perfetto::protos::FloatRectProto* corner_radius_crop);
  private:
  const ::perfetto::protos::FloatRectProto& _internal_corner_radius_crop() const;
  ::perfetto::protos::FloatRectProto* _internal_mutable_corner_radius_crop();
  public:
  void unsafe_arena_set_allocated_corner_radius_crop(
      ::perfetto::protos::FloatRectProto* corner_radius_crop);
  ::perfetto::protos::FloatRectProto* unsafe_arena_release_corner_radius_crop();

  // optional .perfetto.protos.ColorTransformProto color_transform = 50;
  bool has_color_transform() const;
  private:
  bool _internal_has_color_transform() const;
  public:
  void clear_color_transform();
  const ::perfetto::protos::ColorTransformProto& color_transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ColorTransformProto* release_color_transform();
  ::perfetto::protos::ColorTransformProto* mutable_color_transform();
  void set_allocated_color_transform(::perfetto::protos::ColorTransformProto* color_transform);
  private:
  const ::perfetto::protos::ColorTransformProto& _internal_color_transform() const;
  ::perfetto::protos::ColorTransformProto* _internal_mutable_color_transform();
  public:
  void unsafe_arena_set_allocated_color_transform(
      ::perfetto::protos::ColorTransformProto* color_transform);
  ::perfetto::protos::ColorTransformProto* unsafe_arena_release_color_transform();

  // optional .perfetto.protos.RectProto destination_frame = 57;
  bool has_destination_frame() const;
  private:
  bool _internal_has_destination_frame() const;
  public:
  void clear_destination_frame();
  const ::perfetto::protos::RectProto& destination_frame() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_destination_frame();
  ::perfetto::protos::RectProto* mutable_destination_frame();
  void set_allocated_destination_frame(::perfetto::protos::RectProto* destination_frame);
  private:
  const ::perfetto::protos::RectProto& _internal_destination_frame() const;
  ::perfetto::protos::RectProto* _internal_mutable_destination_frame();
  public:
  void unsafe_arena_set_allocated_destination_frame(
      ::perfetto::protos::RectProto* destination_frame);
  ::perfetto::protos::RectProto* unsafe_arena_release_destination_frame();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional uint32 layer_stack = 9;
  bool has_layer_stack() const;
  private:
  bool _internal_has_layer_stack() const;
  public:
  void clear_layer_stack();
  uint32_t layer_stack() const;
  void set_layer_stack(uint32_t value);
  private:
  uint32_t _internal_layer_stack() const;
  void _internal_set_layer_stack(uint32_t value);
  public:

  // optional int32 z = 10;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // optional uint32 flags = 22;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional bool is_opaque = 16;
  bool has_is_opaque() const;
  private:
  bool _internal_has_is_opaque() const;
  public:
  void clear_is_opaque();
  bool is_opaque() const;
  void set_is_opaque(bool value);
  private:
  bool _internal_is_opaque() const;
  void _internal_set_is_opaque(bool value);
  public:

  // optional bool invalidate = 17;
  bool has_invalidate() const;
  private:
  bool _internal_has_invalidate() const;
  public:
  void clear_invalidate();
  bool invalidate() const;
  void set_invalidate(bool value);
  private:
  bool _internal_invalidate() const;
  void _internal_set_invalidate(bool value);
  public:

  // optional bool refresh_pending = 29;
  bool has_refresh_pending() const;
  private:
  bool _internal_has_refresh_pending() const;
  public:
  void clear_refresh_pending();
  bool refresh_pending() const;
  void set_refresh_pending(bool value);
  private:
  bool _internal_refresh_pending() const;
  void _internal_set_refresh_pending(bool value);
  public:

  // optional bool is_protected = 36;
  bool has_is_protected() const;
  private:
  bool _internal_has_is_protected() const;
  public:
  void clear_is_protected();
  bool is_protected() const;
  void set_is_protected(bool value);
  private:
  bool _internal_is_protected() const;
  void _internal_set_is_protected(bool value);
  public:

  // optional int32 parent = 25;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  int32_t parent() const;
  void set_parent(int32_t value);
  private:
  int32_t _internal_parent() const;
  void _internal_set_parent(int32_t value);
  public:

  // optional int32 z_order_relative_of = 26;
  bool has_z_order_relative_of() const;
  private:
  bool _internal_has_z_order_relative_of() const;
  public:
  void clear_z_order_relative_of();
  int32_t z_order_relative_of() const;
  void set_z_order_relative_of(int32_t value);
  private:
  int32_t _internal_z_order_relative_of() const;
  void _internal_set_z_order_relative_of(int32_t value);
  public:

  // optional int32 queued_frames = 28;
  bool has_queued_frames() const;
  private:
  bool _internal_has_queued_frames() const;
  public:
  void clear_queued_frames();
  int32_t queued_frames() const;
  void set_queued_frames(int32_t value);
  private:
  int32_t _internal_queued_frames() const;
  void _internal_set_queued_frames(int32_t value);
  public:

  // optional int32 hwc_transform = 32;
  bool has_hwc_transform() const;
  private:
  bool _internal_has_hwc_transform() const;
  public:
  void clear_hwc_transform();
  int32_t hwc_transform() const;
  void set_hwc_transform(int32_t value);
  private:
  int32_t _internal_hwc_transform() const;
  void _internal_set_hwc_transform(int32_t value);
  public:

  // optional int32 window_type = 33 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_window_type() const;
  private:
  bool _internal_has_window_type() const;
  public:
  PROTOBUF_DEPRECATED void clear_window_type();
  PROTOBUF_DEPRECATED int32_t window_type() const;
  PROTOBUF_DEPRECATED void set_window_type(int32_t value);
  private:
  int32_t _internal_window_type() const;
  void _internal_set_window_type(int32_t value);
  public:

  // optional int32 app_id = 34 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_app_id();
  PROTOBUF_DEPRECATED int32_t app_id() const;
  PROTOBUF_DEPRECATED void set_app_id(int32_t value);
  private:
  int32_t _internal_app_id() const;
  void _internal_set_app_id(int32_t value);
  public:

  // optional .perfetto.protos.HwcCompositionType hwc_composition_type = 35;
  bool has_hwc_composition_type() const;
  private:
  bool _internal_has_hwc_composition_type() const;
  public:
  void clear_hwc_composition_type();
  ::perfetto::protos::HwcCompositionType hwc_composition_type() const;
  void set_hwc_composition_type(::perfetto::protos::HwcCompositionType value);
  private:
  ::perfetto::protos::HwcCompositionType _internal_hwc_composition_type() const;
  void _internal_set_hwc_composition_type(::perfetto::protos::HwcCompositionType value);
  public:

  // optional uint64 curr_frame = 37;
  bool has_curr_frame() const;
  private:
  bool _internal_has_curr_frame() const;
  public:
  void clear_curr_frame();
  uint64_t curr_frame() const;
  void set_curr_frame(uint64_t value);
  private:
  uint64_t _internal_curr_frame() const;
  void _internal_set_curr_frame(uint64_t value);
  public:

  // optional int32 effective_scaling_mode = 40;
  bool has_effective_scaling_mode() const;
  private:
  bool _internal_has_effective_scaling_mode() const;
  public:
  void clear_effective_scaling_mode();
  int32_t effective_scaling_mode() const;
  void set_effective_scaling_mode(int32_t value);
  private:
  int32_t _internal_effective_scaling_mode() const;
  void _internal_set_effective_scaling_mode(int32_t value);
  public:

  // optional float corner_radius = 41;
  bool has_corner_radius() const;
  private:
  bool _internal_has_corner_radius() const;
  public:
  void clear_corner_radius();
  float corner_radius() const;
  void set_corner_radius(float value);
  private:
  float _internal_corner_radius() const;
  void _internal_set_corner_radius(float value);
  public:

  // optional float shadow_radius = 49;
  bool has_shadow_radius() const;
  private:
  bool _internal_has_shadow_radius() const;
  public:
  void clear_shadow_radius();
  float shadow_radius() const;
  void set_shadow_radius(float value);
  private:
  float _internal_shadow_radius() const;
  void _internal_set_shadow_radius(float value);
  public:

  // optional int32 background_blur_radius = 52;
  bool has_background_blur_radius() const;
  private:
  bool _internal_has_background_blur_radius() const;
  public:
  void clear_background_blur_radius();
  int32_t background_blur_radius() const;
  void set_background_blur_radius(int32_t value);
  private:
  int32_t _internal_background_blur_radius() const;
  void _internal_set_background_blur_radius(int32_t value);
  public:

  // optional uint32 owner_uid = 53;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  uint32_t owner_uid() const;
  void set_owner_uid(uint32_t value);
  private:
  uint32_t _internal_owner_uid() const;
  void _internal_set_owner_uid(uint32_t value);
  public:

  // optional bool is_relative_of = 51;
  bool has_is_relative_of() const;
  private:
  bool _internal_has_is_relative_of() const;
  public:
  void clear_is_relative_of();
  bool is_relative_of() const;
  void set_is_relative_of(bool value);
  private:
  bool _internal_is_relative_of() const;
  void _internal_set_is_relative_of(bool value);
  public:

  // optional bool is_trusted_overlay = 55;
  bool has_is_trusted_overlay() const;
  private:
  bool _internal_has_is_trusted_overlay() const;
  public:
  void clear_is_trusted_overlay();
  bool is_trusted_overlay() const;
  void set_is_trusted_overlay(bool value);
  private:
  bool _internal_is_trusted_overlay() const;
  void _internal_set_is_trusted_overlay(bool value);
  public:

  // optional float requested_corner_radius = 56;
  bool has_requested_corner_radius() const;
  private:
  bool _internal_has_requested_corner_radius() const;
  public:
  void clear_requested_corner_radius();
  float requested_corner_radius() const;
  void set_requested_corner_radius(float value);
  private:
  float _internal_requested_corner_radius() const;
  void _internal_set_requested_corner_radius(float value);
  public:

  // optional uint32 original_id = 58;
  bool has_original_id() const;
  private:
  bool _internal_has_original_id() const;
  public:
  void clear_original_id();
  uint32_t original_id() const;
  void set_original_id(uint32_t value);
  private:
  uint32_t _internal_original_id() const;
  void _internal_set_original_id(uint32_t value);
  public:

  // optional .perfetto.protos.TrustedOverlay trusted_overlay = 59;
  bool has_trusted_overlay() const;
  private:
  bool _internal_has_trusted_overlay() const;
  public:
  void clear_trusted_overlay();
  ::perfetto::protos::TrustedOverlay trusted_overlay() const;
  void set_trusted_overlay(::perfetto::protos::TrustedOverlay value);
  private:
  ::perfetto::protos::TrustedOverlay _internal_trusted_overlay() const;
  void _internal_set_trusted_overlay(::perfetto::protos::TrustedOverlay value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayerProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > children_;
    mutable std::atomic<int> _children_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > relatives_;
    mutable std::atomic<int> _relatives_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BarrierLayerProto > barrier_layer_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
        LayerProto_MetadataEntry_DoNotUse,
        int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion > blur_regions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataspace_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixel_format_;
    ::perfetto::protos::RegionProto* transparent_region_;
    ::perfetto::protos::RegionProto* visible_region_;
    ::perfetto::protos::RegionProto* damage_region_;
    ::perfetto::protos::PositionProto* position_;
    ::perfetto::protos::PositionProto* requested_position_;
    ::perfetto::protos::SizeProto* size_;
    ::perfetto::protos::RectProto* crop_;
    ::perfetto::protos::RectProto* final_crop_;
    ::perfetto::protos::ColorProto* color_;
    ::perfetto::protos::ColorProto* requested_color_;
    ::perfetto::protos::TransformProto* transform_;
    ::perfetto::protos::TransformProto* requested_transform_;
    ::perfetto::protos::ActiveBufferProto* active_buffer_;
    ::perfetto::protos::RectProto* hwc_frame_;
    ::perfetto::protos::FloatRectProto* hwc_crop_;
    ::perfetto::protos::TransformProto* buffer_transform_;
    ::perfetto::protos::TransformProto* effective_transform_;
    ::perfetto::protos::FloatRectProto* source_bounds_;
    ::perfetto::protos::FloatRectProto* bounds_;
    ::perfetto::protos::FloatRectProto* screen_bounds_;
    ::perfetto::protos::InputWindowInfoProto* input_window_info_;
    ::perfetto::protos::FloatRectProto* corner_radius_crop_;
    ::perfetto::protos::ColorTransformProto* color_transform_;
    ::perfetto::protos::RectProto* destination_frame_;
    int32_t id_;
    uint32_t layer_stack_;
    int32_t z_;
    uint32_t flags_;
    bool is_opaque_;
    bool invalidate_;
    bool refresh_pending_;
    bool is_protected_;
    int32_t parent_;
    int32_t z_order_relative_of_;
    int32_t queued_frames_;
    int32_t hwc_transform_;
    int32_t window_type_;
    int32_t app_id_;
    int hwc_composition_type_;
    uint64_t curr_frame_;
    int32_t effective_scaling_mode_;
    float corner_radius_;
    float shadow_radius_;
    int32_t background_blur_radius_;
    uint32_t owner_uid_;
    bool is_relative_of_;
    bool is_trusted_overlay_;
    float requested_corner_radius_;
    uint32_t original_id_;
    int trusted_overlay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class PositionProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PositionProto) */ {
 public:
  inline PositionProto() : PositionProto(nullptr) {}
  ~PositionProto() override;
  explicit PROTOBUF_CONSTEXPR PositionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionProto(const PositionProto& from);
  PositionProto(PositionProto&& from) noexcept
    : PositionProto() {
    *this = ::std::move(from);
  }

  inline PositionProto& operator=(const PositionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionProto& operator=(PositionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PositionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionProto* internal_default_instance() {
    return reinterpret_cast<const PositionProto*>(
               &_PositionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionProto& a, PositionProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PositionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PositionProto& from);
  void MergeFrom(const PositionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PositionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PositionProto";
  }
  protected:
  explicit PositionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.PositionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class FloatRectProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FloatRectProto) */ {
 public:
  inline FloatRectProto() : FloatRectProto(nullptr) {}
  ~FloatRectProto() override;
  explicit PROTOBUF_CONSTEXPR FloatRectProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatRectProto(const FloatRectProto& from);
  FloatRectProto(FloatRectProto&& from) noexcept
    : FloatRectProto() {
    *this = ::std::move(from);
  }

  inline FloatRectProto& operator=(const FloatRectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatRectProto& operator=(FloatRectProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FloatRectProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatRectProto* internal_default_instance() {
    return reinterpret_cast<const FloatRectProto*>(
               &_FloatRectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FloatRectProto& a, FloatRectProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FloatRectProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatRectProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatRectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatRectProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FloatRectProto& from);
  void MergeFrom(const FloatRectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatRectProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FloatRectProto";
  }
  protected:
  explicit FloatRectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // optional float left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // optional float top = 2;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // optional float right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // optional float bottom = 4;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.FloatRectProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float left_;
    float top_;
    float right_;
    float bottom_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class ActiveBufferProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ActiveBufferProto) */ {
 public:
  inline ActiveBufferProto() : ActiveBufferProto(nullptr) {}
  ~ActiveBufferProto() override;
  explicit PROTOBUF_CONSTEXPR ActiveBufferProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveBufferProto(const ActiveBufferProto& from);
  ActiveBufferProto(ActiveBufferProto&& from) noexcept
    : ActiveBufferProto() {
    *this = ::std::move(from);
  }

  inline ActiveBufferProto& operator=(const ActiveBufferProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveBufferProto& operator=(ActiveBufferProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ActiveBufferProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveBufferProto* internal_default_instance() {
    return reinterpret_cast<const ActiveBufferProto*>(
               &_ActiveBufferProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ActiveBufferProto& a, ActiveBufferProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ActiveBufferProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveBufferProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActiveBufferProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActiveBufferProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ActiveBufferProto& from);
  void MergeFrom(const ActiveBufferProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveBufferProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ActiveBufferProto";
  }
  protected:
  explicit ActiveBufferProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kStrideFieldNumber = 3,
    kFormatFieldNumber = 4,
    kUsageFieldNumber = 5,
  };
  // optional uint32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 stride = 3;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  uint32_t stride() const;
  void set_stride(uint32_t value);
  private:
  uint32_t _internal_stride() const;
  void _internal_set_stride(uint32_t value);
  public:

  // optional int32 format = 4;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  int32_t format() const;
  void set_format(int32_t value);
  private:
  int32_t _internal_format() const;
  void _internal_set_format(int32_t value);
  public:

  // optional uint64 usage = 5;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  uint64_t usage() const;
  void set_usage(uint64_t value);
  private:
  uint64_t _internal_usage() const;
  void _internal_set_usage(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ActiveBufferProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t width_;
    uint32_t height_;
    uint32_t stride_;
    int32_t format_;
    uint64_t usage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// -------------------------------------------------------------------

class BarrierLayerProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BarrierLayerProto) */ {
 public:
  inline BarrierLayerProto() : BarrierLayerProto(nullptr) {}
  ~BarrierLayerProto() override;
  explicit PROTOBUF_CONSTEXPR BarrierLayerProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BarrierLayerProto(const BarrierLayerProto& from);
  BarrierLayerProto(BarrierLayerProto&& from) noexcept
    : BarrierLayerProto() {
    *this = ::std::move(from);
  }

  inline BarrierLayerProto& operator=(const BarrierLayerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarrierLayerProto& operator=(BarrierLayerProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BarrierLayerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BarrierLayerProto* internal_default_instance() {
    return reinterpret_cast<const BarrierLayerProto*>(
               &_BarrierLayerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BarrierLayerProto& a, BarrierLayerProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BarrierLayerProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarrierLayerProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BarrierLayerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BarrierLayerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BarrierLayerProto& from);
  void MergeFrom(const BarrierLayerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BarrierLayerProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BarrierLayerProto";
  }
  protected:
  explicit BarrierLayerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameNumberFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional uint64 frame_number = 2;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  uint64_t frame_number() const;
  void set_frame_number(uint64_t value);
  private:
  uint64_t _internal_frame_number() const;
  void _internal_set_frame_number(uint64_t value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BarrierLayerProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t frame_number_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayersTraceFileProto

// optional fixed64 magic_number = 1;
inline bool LayersTraceFileProto::_internal_has_magic_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayersTraceFileProto::has_magic_number() const {
  return _internal_has_magic_number();
}
inline void LayersTraceFileProto::clear_magic_number() {
  _impl_.magic_number_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t LayersTraceFileProto::_internal_magic_number() const {
  return _impl_.magic_number_;
}
inline uint64_t LayersTraceFileProto::magic_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersTraceFileProto.magic_number)
  return _internal_magic_number();
}
inline void LayersTraceFileProto::_internal_set_magic_number(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.magic_number_ = value;
}
inline void LayersTraceFileProto::set_magic_number(uint64_t value) {
  _internal_set_magic_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersTraceFileProto.magic_number)
}

// repeated .perfetto.protos.LayersSnapshotProto entry = 2;
inline int LayersTraceFileProto::_internal_entry_size() const {
  return _impl_.entry_.size();
}
inline int LayersTraceFileProto::entry_size() const {
  return _internal_entry_size();
}
inline void LayersTraceFileProto::clear_entry() {
  _impl_.entry_.Clear();
}
inline ::perfetto::protos::LayersSnapshotProto* LayersTraceFileProto::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayersTraceFileProto.entry)
  return _impl_.entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayersSnapshotProto >*
LayersTraceFileProto::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayersTraceFileProto.entry)
  return &_impl_.entry_;
}
inline const ::perfetto::protos::LayersSnapshotProto& LayersTraceFileProto::_internal_entry(int index) const {
  return _impl_.entry_.Get(index);
}
inline const ::perfetto::protos::LayersSnapshotProto& LayersTraceFileProto::entry(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersTraceFileProto.entry)
  return _internal_entry(index);
}
inline ::perfetto::protos::LayersSnapshotProto* LayersTraceFileProto::_internal_add_entry() {
  return _impl_.entry_.Add();
}
inline ::perfetto::protos::LayersSnapshotProto* LayersTraceFileProto::add_entry() {
  ::perfetto::protos::LayersSnapshotProto* _add = _internal_add_entry();
  // @@protoc_insertion_point(field_add:perfetto.protos.LayersTraceFileProto.entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayersSnapshotProto >&
LayersTraceFileProto::entry() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayersTraceFileProto.entry)
  return _impl_.entry_;
}

// optional fixed64 real_to_elapsed_time_offset_nanos = 3;
inline bool LayersTraceFileProto::_internal_has_real_to_elapsed_time_offset_nanos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayersTraceFileProto::has_real_to_elapsed_time_offset_nanos() const {
  return _internal_has_real_to_elapsed_time_offset_nanos();
}
inline void LayersTraceFileProto::clear_real_to_elapsed_time_offset_nanos() {
  _impl_.real_to_elapsed_time_offset_nanos_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t LayersTraceFileProto::_internal_real_to_elapsed_time_offset_nanos() const {
  return _impl_.real_to_elapsed_time_offset_nanos_;
}
inline uint64_t LayersTraceFileProto::real_to_elapsed_time_offset_nanos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersTraceFileProto.real_to_elapsed_time_offset_nanos)
  return _internal_real_to_elapsed_time_offset_nanos();
}
inline void LayersTraceFileProto::_internal_set_real_to_elapsed_time_offset_nanos(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.real_to_elapsed_time_offset_nanos_ = value;
}
inline void LayersTraceFileProto::set_real_to_elapsed_time_offset_nanos(uint64_t value) {
  _internal_set_real_to_elapsed_time_offset_nanos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersTraceFileProto.real_to_elapsed_time_offset_nanos)
}

// -------------------------------------------------------------------

// LayersSnapshotProto

// optional sfixed64 elapsed_realtime_nanos = 1;
inline bool LayersSnapshotProto::_internal_has_elapsed_realtime_nanos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayersSnapshotProto::has_elapsed_realtime_nanos() const {
  return _internal_has_elapsed_realtime_nanos();
}
inline void LayersSnapshotProto::clear_elapsed_realtime_nanos() {
  _impl_.elapsed_realtime_nanos_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t LayersSnapshotProto::_internal_elapsed_realtime_nanos() const {
  return _impl_.elapsed_realtime_nanos_;
}
inline int64_t LayersSnapshotProto::elapsed_realtime_nanos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.elapsed_realtime_nanos)
  return _internal_elapsed_realtime_nanos();
}
inline void LayersSnapshotProto::_internal_set_elapsed_realtime_nanos(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.elapsed_realtime_nanos_ = value;
}
inline void LayersSnapshotProto::set_elapsed_realtime_nanos(int64_t value) {
  _internal_set_elapsed_realtime_nanos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersSnapshotProto.elapsed_realtime_nanos)
}

// optional string where = 2;
inline bool LayersSnapshotProto::_internal_has_where() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayersSnapshotProto::has_where() const {
  return _internal_has_where();
}
inline void LayersSnapshotProto::clear_where() {
  _impl_.where_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayersSnapshotProto::where() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.where)
  return _internal_where();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayersSnapshotProto::set_where(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.where_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersSnapshotProto.where)
}
inline std::string* LayersSnapshotProto::mutable_where() {
  std::string* _s = _internal_mutable_where();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayersSnapshotProto.where)
  return _s;
}
inline const std::string& LayersSnapshotProto::_internal_where() const {
  return _impl_.where_.Get();
}
inline void LayersSnapshotProto::_internal_set_where(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.where_.Set(value, GetArenaForAllocation());
}
inline std::string* LayersSnapshotProto::_internal_mutable_where() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.where_.Mutable(GetArenaForAllocation());
}
inline std::string* LayersSnapshotProto::release_where() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayersSnapshotProto.where)
  if (!_internal_has_where()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.where_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.where_.IsDefault()) {
    _impl_.where_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayersSnapshotProto::set_allocated_where(std::string* where) {
  if (where != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.where_.SetAllocated(where, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.where_.IsDefault()) {
    _impl_.where_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayersSnapshotProto.where)
}

// optional .perfetto.protos.LayersProto layers = 3;
inline bool LayersSnapshotProto::_internal_has_layers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.layers_ != nullptr);
  return value;
}
inline bool LayersSnapshotProto::has_layers() const {
  return _internal_has_layers();
}
inline void LayersSnapshotProto::clear_layers() {
  if (_impl_.layers_ != nullptr) _impl_.layers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::LayersProto& LayersSnapshotProto::_internal_layers() const {
  const ::perfetto::protos::LayersProto* p = _impl_.layers_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::LayersProto&>(
      ::perfetto::protos::_LayersProto_default_instance_);
}
inline const ::perfetto::protos::LayersProto& LayersSnapshotProto::layers() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.layers)
  return _internal_layers();
}
inline void LayersSnapshotProto::unsafe_arena_set_allocated_layers(
    ::perfetto::protos::LayersProto* layers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layers_);
  }
  _impl_.layers_ = layers;
  if (layers) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayersSnapshotProto.layers)
}
inline ::perfetto::protos::LayersProto* LayersSnapshotProto::release_layers() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::LayersProto* temp = _impl_.layers_;
  _impl_.layers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::LayersProto* LayersSnapshotProto::unsafe_arena_release_layers() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayersSnapshotProto.layers)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::LayersProto* temp = _impl_.layers_;
  _impl_.layers_ = nullptr;
  return temp;
}
inline ::perfetto::protos::LayersProto* LayersSnapshotProto::_internal_mutable_layers() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.layers_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::LayersProto>(GetArenaForAllocation());
    _impl_.layers_ = p;
  }
  return _impl_.layers_;
}
inline ::perfetto::protos::LayersProto* LayersSnapshotProto::mutable_layers() {
  ::perfetto::protos::LayersProto* _msg = _internal_mutable_layers();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayersSnapshotProto.layers)
  return _msg;
}
inline void LayersSnapshotProto::set_allocated_layers(::perfetto::protos::LayersProto* layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layers_;
  }
  if (layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layers);
    if (message_arena != submessage_arena) {
      layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layers, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.layers_ = layers;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayersSnapshotProto.layers)
}

// optional string hwc_blob = 4;
inline bool LayersSnapshotProto::_internal_has_hwc_blob() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayersSnapshotProto::has_hwc_blob() const {
  return _internal_has_hwc_blob();
}
inline void LayersSnapshotProto::clear_hwc_blob() {
  _impl_.hwc_blob_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayersSnapshotProto::hwc_blob() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.hwc_blob)
  return _internal_hwc_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayersSnapshotProto::set_hwc_blob(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.hwc_blob_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersSnapshotProto.hwc_blob)
}
inline std::string* LayersSnapshotProto::mutable_hwc_blob() {
  std::string* _s = _internal_mutable_hwc_blob();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayersSnapshotProto.hwc_blob)
  return _s;
}
inline const std::string& LayersSnapshotProto::_internal_hwc_blob() const {
  return _impl_.hwc_blob_.Get();
}
inline void LayersSnapshotProto::_internal_set_hwc_blob(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hwc_blob_.Set(value, GetArenaForAllocation());
}
inline std::string* LayersSnapshotProto::_internal_mutable_hwc_blob() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.hwc_blob_.Mutable(GetArenaForAllocation());
}
inline std::string* LayersSnapshotProto::release_hwc_blob() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayersSnapshotProto.hwc_blob)
  if (!_internal_has_hwc_blob()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.hwc_blob_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hwc_blob_.IsDefault()) {
    _impl_.hwc_blob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayersSnapshotProto::set_allocated_hwc_blob(std::string* hwc_blob) {
  if (hwc_blob != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hwc_blob_.SetAllocated(hwc_blob, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hwc_blob_.IsDefault()) {
    _impl_.hwc_blob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayersSnapshotProto.hwc_blob)
}

// optional bool excludes_composition_state = 5;
inline bool LayersSnapshotProto::_internal_has_excludes_composition_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LayersSnapshotProto::has_excludes_composition_state() const {
  return _internal_has_excludes_composition_state();
}
inline void LayersSnapshotProto::clear_excludes_composition_state() {
  _impl_.excludes_composition_state_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool LayersSnapshotProto::_internal_excludes_composition_state() const {
  return _impl_.excludes_composition_state_;
}
inline bool LayersSnapshotProto::excludes_composition_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.excludes_composition_state)
  return _internal_excludes_composition_state();
}
inline void LayersSnapshotProto::_internal_set_excludes_composition_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.excludes_composition_state_ = value;
}
inline void LayersSnapshotProto::set_excludes_composition_state(bool value) {
  _internal_set_excludes_composition_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersSnapshotProto.excludes_composition_state)
}

// optional uint32 missed_entries = 6;
inline bool LayersSnapshotProto::_internal_has_missed_entries() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LayersSnapshotProto::has_missed_entries() const {
  return _internal_has_missed_entries();
}
inline void LayersSnapshotProto::clear_missed_entries() {
  _impl_.missed_entries_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t LayersSnapshotProto::_internal_missed_entries() const {
  return _impl_.missed_entries_;
}
inline uint32_t LayersSnapshotProto::missed_entries() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.missed_entries)
  return _internal_missed_entries();
}
inline void LayersSnapshotProto::_internal_set_missed_entries(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.missed_entries_ = value;
}
inline void LayersSnapshotProto::set_missed_entries(uint32_t value) {
  _internal_set_missed_entries(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersSnapshotProto.missed_entries)
}

// repeated .perfetto.protos.DisplayProto displays = 7;
inline int LayersSnapshotProto::_internal_displays_size() const {
  return _impl_.displays_.size();
}
inline int LayersSnapshotProto::displays_size() const {
  return _internal_displays_size();
}
inline void LayersSnapshotProto::clear_displays() {
  _impl_.displays_.Clear();
}
inline ::perfetto::protos::DisplayProto* LayersSnapshotProto::mutable_displays(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayersSnapshotProto.displays)
  return _impl_.displays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayProto >*
LayersSnapshotProto::mutable_displays() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayersSnapshotProto.displays)
  return &_impl_.displays_;
}
inline const ::perfetto::protos::DisplayProto& LayersSnapshotProto::_internal_displays(int index) const {
  return _impl_.displays_.Get(index);
}
inline const ::perfetto::protos::DisplayProto& LayersSnapshotProto::displays(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.displays)
  return _internal_displays(index);
}
inline ::perfetto::protos::DisplayProto* LayersSnapshotProto::_internal_add_displays() {
  return _impl_.displays_.Add();
}
inline ::perfetto::protos::DisplayProto* LayersSnapshotProto::add_displays() {
  ::perfetto::protos::DisplayProto* _add = _internal_add_displays();
  // @@protoc_insertion_point(field_add:perfetto.protos.LayersSnapshotProto.displays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayProto >&
LayersSnapshotProto::displays() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayersSnapshotProto.displays)
  return _impl_.displays_;
}

// optional int64 vsync_id = 8;
inline bool LayersSnapshotProto::_internal_has_vsync_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LayersSnapshotProto::has_vsync_id() const {
  return _internal_has_vsync_id();
}
inline void LayersSnapshotProto::clear_vsync_id() {
  _impl_.vsync_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t LayersSnapshotProto::_internal_vsync_id() const {
  return _impl_.vsync_id_;
}
inline int64_t LayersSnapshotProto::vsync_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersSnapshotProto.vsync_id)
  return _internal_vsync_id();
}
inline void LayersSnapshotProto::_internal_set_vsync_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vsync_id_ = value;
}
inline void LayersSnapshotProto::set_vsync_id(int64_t value) {
  _internal_set_vsync_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayersSnapshotProto.vsync_id)
}

// -------------------------------------------------------------------

// LayersProto

// repeated .perfetto.protos.LayerProto layers = 1;
inline int LayersProto::_internal_layers_size() const {
  return _impl_.layers_.size();
}
inline int LayersProto::layers_size() const {
  return _internal_layers_size();
}
inline void LayersProto::clear_layers() {
  _impl_.layers_.Clear();
}
inline ::perfetto::protos::LayerProto* LayersProto::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayersProto.layers)
  return _impl_.layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerProto >*
LayersProto::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayersProto.layers)
  return &_impl_.layers_;
}
inline const ::perfetto::protos::LayerProto& LayersProto::_internal_layers(int index) const {
  return _impl_.layers_.Get(index);
}
inline const ::perfetto::protos::LayerProto& LayersProto::layers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayersProto.layers)
  return _internal_layers(index);
}
inline ::perfetto::protos::LayerProto* LayersProto::_internal_add_layers() {
  return _impl_.layers_.Add();
}
inline ::perfetto::protos::LayerProto* LayersProto::add_layers() {
  ::perfetto::protos::LayerProto* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:perfetto.protos.LayersProto.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerProto >&
LayersProto::layers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayersProto.layers)
  return _impl_.layers_;
}

// -------------------------------------------------------------------

// DisplayProto

// optional uint64 id = 1;
inline bool DisplayProto::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DisplayProto::has_id() const {
  return _internal_has_id();
}
inline void DisplayProto::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t DisplayProto::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t DisplayProto::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.id)
  return _internal_id();
}
inline void DisplayProto::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void DisplayProto::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayProto.id)
}

// optional string name = 2;
inline bool DisplayProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisplayProto::has_name() const {
  return _internal_has_name();
}
inline void DisplayProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplayProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayProto.name)
}
inline std::string* DisplayProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayProto.name)
  return _s;
}
inline const std::string& DisplayProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DisplayProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DisplayProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DisplayProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DisplayProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayProto.name)
}

// optional uint32 layer_stack = 3;
inline bool DisplayProto::_internal_has_layer_stack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DisplayProto::has_layer_stack() const {
  return _internal_has_layer_stack();
}
inline void DisplayProto::clear_layer_stack() {
  _impl_.layer_stack_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DisplayProto::_internal_layer_stack() const {
  return _impl_.layer_stack_;
}
inline uint32_t DisplayProto::layer_stack() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.layer_stack)
  return _internal_layer_stack();
}
inline void DisplayProto::_internal_set_layer_stack(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.layer_stack_ = value;
}
inline void DisplayProto::set_layer_stack(uint32_t value) {
  _internal_set_layer_stack(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayProto.layer_stack)
}

// optional .perfetto.protos.SizeProto size = 4;
inline bool DisplayProto::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool DisplayProto::has_size() const {
  return _internal_has_size();
}
inline const ::perfetto::protos::SizeProto& DisplayProto::_internal_size() const {
  const ::perfetto::protos::SizeProto* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::SizeProto&>(
      ::perfetto::protos::_SizeProto_default_instance_);
}
inline const ::perfetto::protos::SizeProto& DisplayProto::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.size)
  return _internal_size();
}
inline void DisplayProto::unsafe_arena_set_allocated_size(
    ::perfetto::protos::SizeProto* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DisplayProto.size)
}
inline ::perfetto::protos::SizeProto* DisplayProto::release_size() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::SizeProto* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::SizeProto* DisplayProto::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayProto.size)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::SizeProto* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::perfetto::protos::SizeProto* DisplayProto::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::SizeProto>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::perfetto::protos::SizeProto* DisplayProto::mutable_size() {
  ::perfetto::protos::SizeProto* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayProto.size)
  return _msg;
}
inline void DisplayProto::set_allocated_size(::perfetto::protos::SizeProto* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayProto.size)
}

// optional .perfetto.protos.RectProto layer_stack_space_rect = 5;
inline bool DisplayProto::_internal_has_layer_stack_space_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.layer_stack_space_rect_ != nullptr);
  return value;
}
inline bool DisplayProto::has_layer_stack_space_rect() const {
  return _internal_has_layer_stack_space_rect();
}
inline const ::perfetto::protos::RectProto& DisplayProto::_internal_layer_stack_space_rect() const {
  const ::perfetto::protos::RectProto* p = _impl_.layer_stack_space_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& DisplayProto::layer_stack_space_rect() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.layer_stack_space_rect)
  return _internal_layer_stack_space_rect();
}
inline void DisplayProto::unsafe_arena_set_allocated_layer_stack_space_rect(
    ::perfetto::protos::RectProto* layer_stack_space_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer_stack_space_rect_);
  }
  _impl_.layer_stack_space_rect_ = layer_stack_space_rect;
  if (layer_stack_space_rect) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DisplayProto.layer_stack_space_rect)
}
inline ::perfetto::protos::RectProto* DisplayProto::release_layer_stack_space_rect() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::RectProto* temp = _impl_.layer_stack_space_rect_;
  _impl_.layer_stack_space_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* DisplayProto::unsafe_arena_release_layer_stack_space_rect() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayProto.layer_stack_space_rect)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::RectProto* temp = _impl_.layer_stack_space_rect_;
  _impl_.layer_stack_space_rect_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* DisplayProto::_internal_mutable_layer_stack_space_rect() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.layer_stack_space_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.layer_stack_space_rect_ = p;
  }
  return _impl_.layer_stack_space_rect_;
}
inline ::perfetto::protos::RectProto* DisplayProto::mutable_layer_stack_space_rect() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_layer_stack_space_rect();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayProto.layer_stack_space_rect)
  return _msg;
}
inline void DisplayProto::set_allocated_layer_stack_space_rect(::perfetto::protos::RectProto* layer_stack_space_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer_stack_space_rect_);
  }
  if (layer_stack_space_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_stack_space_rect));
    if (message_arena != submessage_arena) {
      layer_stack_space_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_stack_space_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.layer_stack_space_rect_ = layer_stack_space_rect;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayProto.layer_stack_space_rect)
}

// optional .perfetto.protos.TransformProto transform = 6;
inline bool DisplayProto::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline bool DisplayProto::has_transform() const {
  return _internal_has_transform();
}
inline const ::perfetto::protos::TransformProto& DisplayProto::_internal_transform() const {
  const ::perfetto::protos::TransformProto* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TransformProto&>(
      ::perfetto::protos::_TransformProto_default_instance_);
}
inline const ::perfetto::protos::TransformProto& DisplayProto::transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.transform)
  return _internal_transform();
}
inline void DisplayProto::unsafe_arena_set_allocated_transform(
    ::perfetto::protos::TransformProto* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DisplayProto.transform)
}
inline ::perfetto::protos::TransformProto* DisplayProto::release_transform() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::TransformProto* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TransformProto* DisplayProto::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayProto.transform)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::TransformProto* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TransformProto* DisplayProto::_internal_mutable_transform() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TransformProto>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::perfetto::protos::TransformProto* DisplayProto::mutable_transform() {
  ::perfetto::protos::TransformProto* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayProto.transform)
  return _msg;
}
inline void DisplayProto::set_allocated_transform(::perfetto::protos::TransformProto* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayProto.transform)
}

// optional bool is_virtual = 7;
inline bool DisplayProto::_internal_has_is_virtual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DisplayProto::has_is_virtual() const {
  return _internal_has_is_virtual();
}
inline void DisplayProto::clear_is_virtual() {
  _impl_.is_virtual_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DisplayProto::_internal_is_virtual() const {
  return _impl_.is_virtual_;
}
inline bool DisplayProto::is_virtual() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.is_virtual)
  return _internal_is_virtual();
}
inline void DisplayProto::_internal_set_is_virtual(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_virtual_ = value;
}
inline void DisplayProto::set_is_virtual(bool value) {
  _internal_set_is_virtual(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayProto.is_virtual)
}

// optional double dpi_x = 8;
inline bool DisplayProto::_internal_has_dpi_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DisplayProto::has_dpi_x() const {
  return _internal_has_dpi_x();
}
inline void DisplayProto::clear_dpi_x() {
  _impl_.dpi_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double DisplayProto::_internal_dpi_x() const {
  return _impl_.dpi_x_;
}
inline double DisplayProto::dpi_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.dpi_x)
  return _internal_dpi_x();
}
inline void DisplayProto::_internal_set_dpi_x(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.dpi_x_ = value;
}
inline void DisplayProto::set_dpi_x(double value) {
  _internal_set_dpi_x(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayProto.dpi_x)
}

// optional double dpi_y = 9;
inline bool DisplayProto::_internal_has_dpi_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DisplayProto::has_dpi_y() const {
  return _internal_has_dpi_y();
}
inline void DisplayProto::clear_dpi_y() {
  _impl_.dpi_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double DisplayProto::_internal_dpi_y() const {
  return _impl_.dpi_y_;
}
inline double DisplayProto::dpi_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayProto.dpi_y)
  return _internal_dpi_y();
}
inline void DisplayProto::_internal_set_dpi_y(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.dpi_y_ = value;
}
inline void DisplayProto::set_dpi_y(double value) {
  _internal_set_dpi_y(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayProto.dpi_y)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LayerProto

// optional int32 id = 1;
inline bool LayerProto::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool LayerProto::has_id() const {
  return _internal_has_id();
}
inline void LayerProto::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline int32_t LayerProto::_internal_id() const {
  return _impl_.id_;
}
inline int32_t LayerProto::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.id)
  return _internal_id();
}
inline void LayerProto::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.id_ = value;
}
inline void LayerProto::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.id)
}

// optional string name = 2;
inline bool LayerProto::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerProto::has_name() const {
  return _internal_has_name();
}
inline void LayerProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerProto::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.name)
}
inline std::string* LayerProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.name)
  return _s;
}
inline const std::string& LayerProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LayerProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.name)
}

// repeated int32 children = 3 [packed = true];
inline int LayerProto::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int LayerProto::children_size() const {
  return _internal_children_size();
}
inline void LayerProto::clear_children() {
  _impl_.children_.Clear();
}
inline int32_t LayerProto::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline int32_t LayerProto::children(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.children)
  return _internal_children(index);
}
inline void LayerProto::set_children(int index, int32_t value) {
  _impl_.children_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.children)
}
inline void LayerProto::_internal_add_children(int32_t value) {
  _impl_.children_.Add(value);
}
inline void LayerProto::add_children(int32_t value) {
  _internal_add_children(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.LayerProto.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LayerProto::_internal_children() const {
  return _impl_.children_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LayerProto::children() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayerProto.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LayerProto::_internal_mutable_children() {
  return &_impl_.children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LayerProto::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayerProto.children)
  return _internal_mutable_children();
}

// repeated int32 relatives = 4 [packed = true];
inline int LayerProto::_internal_relatives_size() const {
  return _impl_.relatives_.size();
}
inline int LayerProto::relatives_size() const {
  return _internal_relatives_size();
}
inline void LayerProto::clear_relatives() {
  _impl_.relatives_.Clear();
}
inline int32_t LayerProto::_internal_relatives(int index) const {
  return _impl_.relatives_.Get(index);
}
inline int32_t LayerProto::relatives(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.relatives)
  return _internal_relatives(index);
}
inline void LayerProto::set_relatives(int index, int32_t value) {
  _impl_.relatives_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.relatives)
}
inline void LayerProto::_internal_add_relatives(int32_t value) {
  _impl_.relatives_.Add(value);
}
inline void LayerProto::add_relatives(int32_t value) {
  _internal_add_relatives(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.LayerProto.relatives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LayerProto::_internal_relatives() const {
  return _impl_.relatives_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LayerProto::relatives() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayerProto.relatives)
  return _internal_relatives();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LayerProto::_internal_mutable_relatives() {
  return &_impl_.relatives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LayerProto::mutable_relatives() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayerProto.relatives)
  return _internal_mutable_relatives();
}

// optional string type = 5;
inline bool LayerProto::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerProto::has_type() const {
  return _internal_has_type();
}
inline void LayerProto::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayerProto::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerProto::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.type)
}
inline std::string* LayerProto::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.type)
  return _s;
}
inline const std::string& LayerProto::_internal_type() const {
  return _impl_.type_.Get();
}
inline void LayerProto::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerProto::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerProto::release_type() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerProto::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.type)
}

// optional .perfetto.protos.RegionProto transparent_region = 6;
inline bool LayerProto::_internal_has_transparent_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transparent_region_ != nullptr);
  return value;
}
inline bool LayerProto::has_transparent_region() const {
  return _internal_has_transparent_region();
}
inline const ::perfetto::protos::RegionProto& LayerProto::_internal_transparent_region() const {
  const ::perfetto::protos::RegionProto* p = _impl_.transparent_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RegionProto&>(
      ::perfetto::protos::_RegionProto_default_instance_);
}
inline const ::perfetto::protos::RegionProto& LayerProto::transparent_region() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.transparent_region)
  return _internal_transparent_region();
}
inline void LayerProto::unsafe_arena_set_allocated_transparent_region(
    ::perfetto::protos::RegionProto* transparent_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transparent_region_);
  }
  _impl_.transparent_region_ = transparent_region;
  if (transparent_region) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.transparent_region)
}
inline ::perfetto::protos::RegionProto* LayerProto::release_transparent_region() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::RegionProto* temp = _impl_.transparent_region_;
  _impl_.transparent_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerProto::unsafe_arena_release_transparent_region() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.transparent_region)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::RegionProto* temp = _impl_.transparent_region_;
  _impl_.transparent_region_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerProto::_internal_mutable_transparent_region() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.transparent_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RegionProto>(GetArenaForAllocation());
    _impl_.transparent_region_ = p;
  }
  return _impl_.transparent_region_;
}
inline ::perfetto::protos::RegionProto* LayerProto::mutable_transparent_region() {
  ::perfetto::protos::RegionProto* _msg = _internal_mutable_transparent_region();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.transparent_region)
  return _msg;
}
inline void LayerProto::set_allocated_transparent_region(::perfetto::protos::RegionProto* transparent_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transparent_region_);
  }
  if (transparent_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transparent_region));
    if (message_arena != submessage_arena) {
      transparent_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transparent_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.transparent_region_ = transparent_region;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.transparent_region)
}

// optional .perfetto.protos.RegionProto visible_region = 7;
inline bool LayerProto::_internal_has_visible_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visible_region_ != nullptr);
  return value;
}
inline bool LayerProto::has_visible_region() const {
  return _internal_has_visible_region();
}
inline const ::perfetto::protos::RegionProto& LayerProto::_internal_visible_region() const {
  const ::perfetto::protos::RegionProto* p = _impl_.visible_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RegionProto&>(
      ::perfetto::protos::_RegionProto_default_instance_);
}
inline const ::perfetto::protos::RegionProto& LayerProto::visible_region() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.visible_region)
  return _internal_visible_region();
}
inline void LayerProto::unsafe_arena_set_allocated_visible_region(
    ::perfetto::protos::RegionProto* visible_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_region_);
  }
  _impl_.visible_region_ = visible_region;
  if (visible_region) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.visible_region)
}
inline ::perfetto::protos::RegionProto* LayerProto::release_visible_region() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::RegionProto* temp = _impl_.visible_region_;
  _impl_.visible_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerProto::unsafe_arena_release_visible_region() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.visible_region)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::RegionProto* temp = _impl_.visible_region_;
  _impl_.visible_region_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerProto::_internal_mutable_visible_region() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.visible_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RegionProto>(GetArenaForAllocation());
    _impl_.visible_region_ = p;
  }
  return _impl_.visible_region_;
}
inline ::perfetto::protos::RegionProto* LayerProto::mutable_visible_region() {
  ::perfetto::protos::RegionProto* _msg = _internal_mutable_visible_region();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.visible_region)
  return _msg;
}
inline void LayerProto::set_allocated_visible_region(::perfetto::protos::RegionProto* visible_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_region_);
  }
  if (visible_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_region));
    if (message_arena != submessage_arena) {
      visible_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.visible_region_ = visible_region;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.visible_region)
}

// optional .perfetto.protos.RegionProto damage_region = 8;
inline bool LayerProto::_internal_has_damage_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.damage_region_ != nullptr);
  return value;
}
inline bool LayerProto::has_damage_region() const {
  return _internal_has_damage_region();
}
inline const ::perfetto::protos::RegionProto& LayerProto::_internal_damage_region() const {
  const ::perfetto::protos::RegionProto* p = _impl_.damage_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RegionProto&>(
      ::perfetto::protos::_RegionProto_default_instance_);
}
inline const ::perfetto::protos::RegionProto& LayerProto::damage_region() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.damage_region)
  return _internal_damage_region();
}
inline void LayerProto::unsafe_arena_set_allocated_damage_region(
    ::perfetto::protos::RegionProto* damage_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.damage_region_);
  }
  _impl_.damage_region_ = damage_region;
  if (damage_region) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.damage_region)
}
inline ::perfetto::protos::RegionProto* LayerProto::release_damage_region() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::RegionProto* temp = _impl_.damage_region_;
  _impl_.damage_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerProto::unsafe_arena_release_damage_region() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.damage_region)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::RegionProto* temp = _impl_.damage_region_;
  _impl_.damage_region_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerProto::_internal_mutable_damage_region() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.damage_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RegionProto>(GetArenaForAllocation());
    _impl_.damage_region_ = p;
  }
  return _impl_.damage_region_;
}
inline ::perfetto::protos::RegionProto* LayerProto::mutable_damage_region() {
  ::perfetto::protos::RegionProto* _msg = _internal_mutable_damage_region();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.damage_region)
  return _msg;
}
inline void LayerProto::set_allocated_damage_region(::perfetto::protos::RegionProto* damage_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.damage_region_);
  }
  if (damage_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(damage_region));
    if (message_arena != submessage_arena) {
      damage_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damage_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.damage_region_ = damage_region;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.damage_region)
}

// optional uint32 layer_stack = 9;
inline bool LayerProto::_internal_has_layer_stack() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool LayerProto::has_layer_stack() const {
  return _internal_has_layer_stack();
}
inline void LayerProto::clear_layer_stack() {
  _impl_.layer_stack_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t LayerProto::_internal_layer_stack() const {
  return _impl_.layer_stack_;
}
inline uint32_t LayerProto::layer_stack() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.layer_stack)
  return _internal_layer_stack();
}
inline void LayerProto::_internal_set_layer_stack(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.layer_stack_ = value;
}
inline void LayerProto::set_layer_stack(uint32_t value) {
  _internal_set_layer_stack(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.layer_stack)
}

// optional int32 z = 10;
inline bool LayerProto::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool LayerProto::has_z() const {
  return _internal_has_z();
}
inline void LayerProto::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline int32_t LayerProto::_internal_z() const {
  return _impl_.z_;
}
inline int32_t LayerProto::z() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.z)
  return _internal_z();
}
inline void LayerProto::_internal_set_z(int32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.z_ = value;
}
inline void LayerProto::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.z)
}

// optional .perfetto.protos.PositionProto position = 11;
inline bool LayerProto::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool LayerProto::has_position() const {
  return _internal_has_position();
}
inline void LayerProto::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::perfetto::protos::PositionProto& LayerProto::_internal_position() const {
  const ::perfetto::protos::PositionProto* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PositionProto&>(
      ::perfetto::protos::_PositionProto_default_instance_);
}
inline const ::perfetto::protos::PositionProto& LayerProto::position() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.position)
  return _internal_position();
}
inline void LayerProto::unsafe_arena_set_allocated_position(
    ::perfetto::protos::PositionProto* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.position)
}
inline ::perfetto::protos::PositionProto* LayerProto::release_position() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::PositionProto* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PositionProto* LayerProto::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.position)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::PositionProto* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PositionProto* LayerProto::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PositionProto>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::perfetto::protos::PositionProto* LayerProto::mutable_position() {
  ::perfetto::protos::PositionProto* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.position)
  return _msg;
}
inline void LayerProto::set_allocated_position(::perfetto::protos::PositionProto* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.position)
}

// optional .perfetto.protos.PositionProto requested_position = 12;
inline bool LayerProto::_internal_has_requested_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requested_position_ != nullptr);
  return value;
}
inline bool LayerProto::has_requested_position() const {
  return _internal_has_requested_position();
}
inline void LayerProto::clear_requested_position() {
  if (_impl_.requested_position_ != nullptr) _impl_.requested_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::perfetto::protos::PositionProto& LayerProto::_internal_requested_position() const {
  const ::perfetto::protos::PositionProto* p = _impl_.requested_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PositionProto&>(
      ::perfetto::protos::_PositionProto_default_instance_);
}
inline const ::perfetto::protos::PositionProto& LayerProto::requested_position() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.requested_position)
  return _internal_requested_position();
}
inline void LayerProto::unsafe_arena_set_allocated_requested_position(
    ::perfetto::protos::PositionProto* requested_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requested_position_);
  }
  _impl_.requested_position_ = requested_position;
  if (requested_position) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.requested_position)
}
inline ::perfetto::protos::PositionProto* LayerProto::release_requested_position() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::PositionProto* temp = _impl_.requested_position_;
  _impl_.requested_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PositionProto* LayerProto::unsafe_arena_release_requested_position() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.requested_position)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::PositionProto* temp = _impl_.requested_position_;
  _impl_.requested_position_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PositionProto* LayerProto::_internal_mutable_requested_position() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.requested_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PositionProto>(GetArenaForAllocation());
    _impl_.requested_position_ = p;
  }
  return _impl_.requested_position_;
}
inline ::perfetto::protos::PositionProto* LayerProto::mutable_requested_position() {
  ::perfetto::protos::PositionProto* _msg = _internal_mutable_requested_position();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.requested_position)
  return _msg;
}
inline void LayerProto::set_allocated_requested_position(::perfetto::protos::PositionProto* requested_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.requested_position_;
  }
  if (requested_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requested_position);
    if (message_arena != submessage_arena) {
      requested_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requested_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.requested_position_ = requested_position;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.requested_position)
}

// optional .perfetto.protos.SizeProto size = 13;
inline bool LayerProto::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool LayerProto::has_size() const {
  return _internal_has_size();
}
inline const ::perfetto::protos::SizeProto& LayerProto::_internal_size() const {
  const ::perfetto::protos::SizeProto* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::SizeProto&>(
      ::perfetto::protos::_SizeProto_default_instance_);
}
inline const ::perfetto::protos::SizeProto& LayerProto::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.size)
  return _internal_size();
}
inline void LayerProto::unsafe_arena_set_allocated_size(
    ::perfetto::protos::SizeProto* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.size)
}
inline ::perfetto::protos::SizeProto* LayerProto::release_size() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::SizeProto* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::SizeProto* LayerProto::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.size)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::SizeProto* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::perfetto::protos::SizeProto* LayerProto::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::SizeProto>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::perfetto::protos::SizeProto* LayerProto::mutable_size() {
  ::perfetto::protos::SizeProto* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.size)
  return _msg;
}
inline void LayerProto::set_allocated_size(::perfetto::protos::SizeProto* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.size)
}

// optional .perfetto.protos.RectProto crop = 14;
inline bool LayerProto::_internal_has_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crop_ != nullptr);
  return value;
}
inline bool LayerProto::has_crop() const {
  return _internal_has_crop();
}
inline const ::perfetto::protos::RectProto& LayerProto::_internal_crop() const {
  const ::perfetto::protos::RectProto* p = _impl_.crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerProto::crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.crop)
  return _internal_crop();
}
inline void LayerProto::unsafe_arena_set_allocated_crop(
    ::perfetto::protos::RectProto* crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crop_);
  }
  _impl_.crop_ = crop;
  if (crop) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.crop)
}
inline ::perfetto::protos::RectProto* LayerProto::release_crop() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::RectProto* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::unsafe_arena_release_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.crop)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::RectProto* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::_internal_mutable_crop() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.crop_ = p;
  }
  return _impl_.crop_;
}
inline ::perfetto::protos::RectProto* LayerProto::mutable_crop() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.crop)
  return _msg;
}
inline void LayerProto::set_allocated_crop(::perfetto::protos::RectProto* crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crop_);
  }
  if (crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crop));
    if (message_arena != submessage_arena) {
      crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.crop_ = crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.crop)
}

// optional .perfetto.protos.RectProto final_crop = 15 [deprecated = true];
inline bool LayerProto::_internal_has_final_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.final_crop_ != nullptr);
  return value;
}
inline bool LayerProto::has_final_crop() const {
  return _internal_has_final_crop();
}
inline const ::perfetto::protos::RectProto& LayerProto::_internal_final_crop() const {
  const ::perfetto::protos::RectProto* p = _impl_.final_crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerProto::final_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.final_crop)
  return _internal_final_crop();
}
inline void LayerProto::unsafe_arena_set_allocated_final_crop(
    ::perfetto::protos::RectProto* final_crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.final_crop_);
  }
  _impl_.final_crop_ = final_crop;
  if (final_crop) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.final_crop)
}
inline ::perfetto::protos::RectProto* LayerProto::release_final_crop() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::RectProto* temp = _impl_.final_crop_;
  _impl_.final_crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::unsafe_arena_release_final_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.final_crop)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::RectProto* temp = _impl_.final_crop_;
  _impl_.final_crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::_internal_mutable_final_crop() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.final_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.final_crop_ = p;
  }
  return _impl_.final_crop_;
}
inline ::perfetto::protos::RectProto* LayerProto::mutable_final_crop() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_final_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.final_crop)
  return _msg;
}
inline void LayerProto::set_allocated_final_crop(::perfetto::protos::RectProto* final_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.final_crop_);
  }
  if (final_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_crop));
    if (message_arena != submessage_arena) {
      final_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_crop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.final_crop_ = final_crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.final_crop)
}

// optional bool is_opaque = 16;
inline bool LayerProto::_internal_has_is_opaque() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool LayerProto::has_is_opaque() const {
  return _internal_has_is_opaque();
}
inline void LayerProto::clear_is_opaque() {
  _impl_.is_opaque_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool LayerProto::_internal_is_opaque() const {
  return _impl_.is_opaque_;
}
inline bool LayerProto::is_opaque() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.is_opaque)
  return _internal_is_opaque();
}
inline void LayerProto::_internal_set_is_opaque(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.is_opaque_ = value;
}
inline void LayerProto::set_is_opaque(bool value) {
  _internal_set_is_opaque(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.is_opaque)
}

// optional bool invalidate = 17;
inline bool LayerProto::_internal_has_invalidate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool LayerProto::has_invalidate() const {
  return _internal_has_invalidate();
}
inline void LayerProto::clear_invalidate() {
  _impl_.invalidate_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool LayerProto::_internal_invalidate() const {
  return _impl_.invalidate_;
}
inline bool LayerProto::invalidate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.invalidate)
  return _internal_invalidate();
}
inline void LayerProto::_internal_set_invalidate(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.invalidate_ = value;
}
inline void LayerProto::set_invalidate(bool value) {
  _internal_set_invalidate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.invalidate)
}

// optional string dataspace = 18;
inline bool LayerProto::_internal_has_dataspace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayerProto::has_dataspace() const {
  return _internal_has_dataspace();
}
inline void LayerProto::clear_dataspace() {
  _impl_.dataspace_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LayerProto::dataspace() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.dataspace)
  return _internal_dataspace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerProto::set_dataspace(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.dataspace_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.dataspace)
}
inline std::string* LayerProto::mutable_dataspace() {
  std::string* _s = _internal_mutable_dataspace();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.dataspace)
  return _s;
}
inline const std::string& LayerProto::_internal_dataspace() const {
  return _impl_.dataspace_.Get();
}
inline void LayerProto::_internal_set_dataspace(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dataspace_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerProto::_internal_mutable_dataspace() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.dataspace_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerProto::release_dataspace() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.dataspace)
  if (!_internal_has_dataspace()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.dataspace_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataspace_.IsDefault()) {
    _impl_.dataspace_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerProto::set_allocated_dataspace(std::string* dataspace) {
  if (dataspace != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.dataspace_.SetAllocated(dataspace, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataspace_.IsDefault()) {
    _impl_.dataspace_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.dataspace)
}

// optional string pixel_format = 19;
inline bool LayerProto::_internal_has_pixel_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayerProto::has_pixel_format() const {
  return _internal_has_pixel_format();
}
inline void LayerProto::clear_pixel_format() {
  _impl_.pixel_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LayerProto::pixel_format() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.pixel_format)
  return _internal_pixel_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerProto::set_pixel_format(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.pixel_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.pixel_format)
}
inline std::string* LayerProto::mutable_pixel_format() {
  std::string* _s = _internal_mutable_pixel_format();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.pixel_format)
  return _s;
}
inline const std::string& LayerProto::_internal_pixel_format() const {
  return _impl_.pixel_format_.Get();
}
inline void LayerProto::_internal_set_pixel_format(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pixel_format_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerProto::_internal_mutable_pixel_format() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.pixel_format_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerProto::release_pixel_format() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.pixel_format)
  if (!_internal_has_pixel_format()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.pixel_format_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pixel_format_.IsDefault()) {
    _impl_.pixel_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerProto::set_allocated_pixel_format(std::string* pixel_format) {
  if (pixel_format != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.pixel_format_.SetAllocated(pixel_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pixel_format_.IsDefault()) {
    _impl_.pixel_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.pixel_format)
}

// optional .perfetto.protos.ColorProto color = 20;
inline bool LayerProto::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_ != nullptr);
  return value;
}
inline bool LayerProto::has_color() const {
  return _internal_has_color();
}
inline const ::perfetto::protos::ColorProto& LayerProto::_internal_color() const {
  const ::perfetto::protos::ColorProto* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ColorProto&>(
      ::perfetto::protos::_ColorProto_default_instance_);
}
inline const ::perfetto::protos::ColorProto& LayerProto::color() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.color)
  return _internal_color();
}
inline void LayerProto::unsafe_arena_set_allocated_color(
    ::perfetto::protos::ColorProto* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.color)
}
inline ::perfetto::protos::ColorProto* LayerProto::release_color() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::ColorProto* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ColorProto* LayerProto::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.color)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::ColorProto* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ColorProto* LayerProto::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ColorProto>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::perfetto::protos::ColorProto* LayerProto::mutable_color() {
  ::perfetto::protos::ColorProto* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.color)
  return _msg;
}
inline void LayerProto::set_allocated_color(::perfetto::protos::ColorProto* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.color)
}

// optional .perfetto.protos.ColorProto requested_color = 21;
inline bool LayerProto::_internal_has_requested_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requested_color_ != nullptr);
  return value;
}
inline bool LayerProto::has_requested_color() const {
  return _internal_has_requested_color();
}
inline const ::perfetto::protos::ColorProto& LayerProto::_internal_requested_color() const {
  const ::perfetto::protos::ColorProto* p = _impl_.requested_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ColorProto&>(
      ::perfetto::protos::_ColorProto_default_instance_);
}
inline const ::perfetto::protos::ColorProto& LayerProto::requested_color() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.requested_color)
  return _internal_requested_color();
}
inline void LayerProto::unsafe_arena_set_allocated_requested_color(
    ::perfetto::protos::ColorProto* requested_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requested_color_);
  }
  _impl_.requested_color_ = requested_color;
  if (requested_color) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.requested_color)
}
inline ::perfetto::protos::ColorProto* LayerProto::release_requested_color() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::ColorProto* temp = _impl_.requested_color_;
  _impl_.requested_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ColorProto* LayerProto::unsafe_arena_release_requested_color() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.requested_color)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::ColorProto* temp = _impl_.requested_color_;
  _impl_.requested_color_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ColorProto* LayerProto::_internal_mutable_requested_color() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.requested_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ColorProto>(GetArenaForAllocation());
    _impl_.requested_color_ = p;
  }
  return _impl_.requested_color_;
}
inline ::perfetto::protos::ColorProto* LayerProto::mutable_requested_color() {
  ::perfetto::protos::ColorProto* _msg = _internal_mutable_requested_color();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.requested_color)
  return _msg;
}
inline void LayerProto::set_allocated_requested_color(::perfetto::protos::ColorProto* requested_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requested_color_);
  }
  if (requested_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requested_color));
    if (message_arena != submessage_arena) {
      requested_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requested_color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.requested_color_ = requested_color;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.requested_color)
}

// optional uint32 flags = 22;
inline bool LayerProto::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool LayerProto::has_flags() const {
  return _internal_has_flags();
}
inline void LayerProto::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t LayerProto::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t LayerProto::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.flags)
  return _internal_flags();
}
inline void LayerProto::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.flags_ = value;
}
inline void LayerProto::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.flags)
}

// optional .perfetto.protos.TransformProto transform = 23;
inline bool LayerProto::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline bool LayerProto::has_transform() const {
  return _internal_has_transform();
}
inline const ::perfetto::protos::TransformProto& LayerProto::_internal_transform() const {
  const ::perfetto::protos::TransformProto* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TransformProto&>(
      ::perfetto::protos::_TransformProto_default_instance_);
}
inline const ::perfetto::protos::TransformProto& LayerProto::transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.transform)
  return _internal_transform();
}
inline void LayerProto::unsafe_arena_set_allocated_transform(
    ::perfetto::protos::TransformProto* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.transform)
}
inline ::perfetto::protos::TransformProto* LayerProto::release_transform() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::TransformProto* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.transform)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::TransformProto* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::_internal_mutable_transform() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TransformProto>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::perfetto::protos::TransformProto* LayerProto::mutable_transform() {
  ::perfetto::protos::TransformProto* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.transform)
  return _msg;
}
inline void LayerProto::set_allocated_transform(::perfetto::protos::TransformProto* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.transform)
}

// optional .perfetto.protos.TransformProto requested_transform = 24;
inline bool LayerProto::_internal_has_requested_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requested_transform_ != nullptr);
  return value;
}
inline bool LayerProto::has_requested_transform() const {
  return _internal_has_requested_transform();
}
inline const ::perfetto::protos::TransformProto& LayerProto::_internal_requested_transform() const {
  const ::perfetto::protos::TransformProto* p = _impl_.requested_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TransformProto&>(
      ::perfetto::protos::_TransformProto_default_instance_);
}
inline const ::perfetto::protos::TransformProto& LayerProto::requested_transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.requested_transform)
  return _internal_requested_transform();
}
inline void LayerProto::unsafe_arena_set_allocated_requested_transform(
    ::perfetto::protos::TransformProto* requested_transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requested_transform_);
  }
  _impl_.requested_transform_ = requested_transform;
  if (requested_transform) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.requested_transform)
}
inline ::perfetto::protos::TransformProto* LayerProto::release_requested_transform() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::TransformProto* temp = _impl_.requested_transform_;
  _impl_.requested_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::unsafe_arena_release_requested_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.requested_transform)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::TransformProto* temp = _impl_.requested_transform_;
  _impl_.requested_transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::_internal_mutable_requested_transform() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.requested_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TransformProto>(GetArenaForAllocation());
    _impl_.requested_transform_ = p;
  }
  return _impl_.requested_transform_;
}
inline ::perfetto::protos::TransformProto* LayerProto::mutable_requested_transform() {
  ::perfetto::protos::TransformProto* _msg = _internal_mutable_requested_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.requested_transform)
  return _msg;
}
inline void LayerProto::set_allocated_requested_transform(::perfetto::protos::TransformProto* requested_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requested_transform_);
  }
  if (requested_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requested_transform));
    if (message_arena != submessage_arena) {
      requested_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requested_transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.requested_transform_ = requested_transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.requested_transform)
}

// optional int32 parent = 25;
inline bool LayerProto::_internal_has_parent() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool LayerProto::has_parent() const {
  return _internal_has_parent();
}
inline void LayerProto::clear_parent() {
  _impl_.parent_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline int32_t LayerProto::_internal_parent() const {
  return _impl_.parent_;
}
inline int32_t LayerProto::parent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.parent)
  return _internal_parent();
}
inline void LayerProto::_internal_set_parent(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.parent_ = value;
}
inline void LayerProto::set_parent(int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.parent)
}

// optional int32 z_order_relative_of = 26;
inline bool LayerProto::_internal_has_z_order_relative_of() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool LayerProto::has_z_order_relative_of() const {
  return _internal_has_z_order_relative_of();
}
inline void LayerProto::clear_z_order_relative_of() {
  _impl_.z_order_relative_of_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline int32_t LayerProto::_internal_z_order_relative_of() const {
  return _impl_.z_order_relative_of_;
}
inline int32_t LayerProto::z_order_relative_of() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.z_order_relative_of)
  return _internal_z_order_relative_of();
}
inline void LayerProto::_internal_set_z_order_relative_of(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.z_order_relative_of_ = value;
}
inline void LayerProto::set_z_order_relative_of(int32_t value) {
  _internal_set_z_order_relative_of(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.z_order_relative_of)
}

// optional .perfetto.protos.ActiveBufferProto active_buffer = 27;
inline bool LayerProto::_internal_has_active_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.active_buffer_ != nullptr);
  return value;
}
inline bool LayerProto::has_active_buffer() const {
  return _internal_has_active_buffer();
}
inline void LayerProto::clear_active_buffer() {
  if (_impl_.active_buffer_ != nullptr) _impl_.active_buffer_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::perfetto::protos::ActiveBufferProto& LayerProto::_internal_active_buffer() const {
  const ::perfetto::protos::ActiveBufferProto* p = _impl_.active_buffer_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ActiveBufferProto&>(
      ::perfetto::protos::_ActiveBufferProto_default_instance_);
}
inline const ::perfetto::protos::ActiveBufferProto& LayerProto::active_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.active_buffer)
  return _internal_active_buffer();
}
inline void LayerProto::unsafe_arena_set_allocated_active_buffer(
    ::perfetto::protos::ActiveBufferProto* active_buffer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.active_buffer_);
  }
  _impl_.active_buffer_ = active_buffer;
  if (active_buffer) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.active_buffer)
}
inline ::perfetto::protos::ActiveBufferProto* LayerProto::release_active_buffer() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::perfetto::protos::ActiveBufferProto* temp = _impl_.active_buffer_;
  _impl_.active_buffer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ActiveBufferProto* LayerProto::unsafe_arena_release_active_buffer() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.active_buffer)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::perfetto::protos::ActiveBufferProto* temp = _impl_.active_buffer_;
  _impl_.active_buffer_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ActiveBufferProto* LayerProto::_internal_mutable_active_buffer() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.active_buffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ActiveBufferProto>(GetArenaForAllocation());
    _impl_.active_buffer_ = p;
  }
  return _impl_.active_buffer_;
}
inline ::perfetto::protos::ActiveBufferProto* LayerProto::mutable_active_buffer() {
  ::perfetto::protos::ActiveBufferProto* _msg = _internal_mutable_active_buffer();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.active_buffer)
  return _msg;
}
inline void LayerProto::set_allocated_active_buffer(::perfetto::protos::ActiveBufferProto* active_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.active_buffer_;
  }
  if (active_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(active_buffer);
    if (message_arena != submessage_arena) {
      active_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_buffer, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.active_buffer_ = active_buffer;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.active_buffer)
}

// optional int32 queued_frames = 28;
inline bool LayerProto::_internal_has_queued_frames() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool LayerProto::has_queued_frames() const {
  return _internal_has_queued_frames();
}
inline void LayerProto::clear_queued_frames() {
  _impl_.queued_frames_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline int32_t LayerProto::_internal_queued_frames() const {
  return _impl_.queued_frames_;
}
inline int32_t LayerProto::queued_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.queued_frames)
  return _internal_queued_frames();
}
inline void LayerProto::_internal_set_queued_frames(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.queued_frames_ = value;
}
inline void LayerProto::set_queued_frames(int32_t value) {
  _internal_set_queued_frames(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.queued_frames)
}

// optional bool refresh_pending = 29;
inline bool LayerProto::_internal_has_refresh_pending() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool LayerProto::has_refresh_pending() const {
  return _internal_has_refresh_pending();
}
inline void LayerProto::clear_refresh_pending() {
  _impl_.refresh_pending_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool LayerProto::_internal_refresh_pending() const {
  return _impl_.refresh_pending_;
}
inline bool LayerProto::refresh_pending() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.refresh_pending)
  return _internal_refresh_pending();
}
inline void LayerProto::_internal_set_refresh_pending(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.refresh_pending_ = value;
}
inline void LayerProto::set_refresh_pending(bool value) {
  _internal_set_refresh_pending(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.refresh_pending)
}

// optional .perfetto.protos.RectProto hwc_frame = 30;
inline bool LayerProto::_internal_has_hwc_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hwc_frame_ != nullptr);
  return value;
}
inline bool LayerProto::has_hwc_frame() const {
  return _internal_has_hwc_frame();
}
inline const ::perfetto::protos::RectProto& LayerProto::_internal_hwc_frame() const {
  const ::perfetto::protos::RectProto* p = _impl_.hwc_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerProto::hwc_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.hwc_frame)
  return _internal_hwc_frame();
}
inline void LayerProto::unsafe_arena_set_allocated_hwc_frame(
    ::perfetto::protos::RectProto* hwc_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hwc_frame_);
  }
  _impl_.hwc_frame_ = hwc_frame;
  if (hwc_frame) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.hwc_frame)
}
inline ::perfetto::protos::RectProto* LayerProto::release_hwc_frame() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::perfetto::protos::RectProto* temp = _impl_.hwc_frame_;
  _impl_.hwc_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::unsafe_arena_release_hwc_frame() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.hwc_frame)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::perfetto::protos::RectProto* temp = _impl_.hwc_frame_;
  _impl_.hwc_frame_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::_internal_mutable_hwc_frame() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.hwc_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.hwc_frame_ = p;
  }
  return _impl_.hwc_frame_;
}
inline ::perfetto::protos::RectProto* LayerProto::mutable_hwc_frame() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_hwc_frame();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.hwc_frame)
  return _msg;
}
inline void LayerProto::set_allocated_hwc_frame(::perfetto::protos::RectProto* hwc_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hwc_frame_);
  }
  if (hwc_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hwc_frame));
    if (message_arena != submessage_arena) {
      hwc_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hwc_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.hwc_frame_ = hwc_frame;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.hwc_frame)
}

// optional .perfetto.protos.FloatRectProto hwc_crop = 31;
inline bool LayerProto::_internal_has_hwc_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hwc_crop_ != nullptr);
  return value;
}
inline bool LayerProto::has_hwc_crop() const {
  return _internal_has_hwc_crop();
}
inline void LayerProto::clear_hwc_crop() {
  if (_impl_.hwc_crop_ != nullptr) _impl_.hwc_crop_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::_internal_hwc_crop() const {
  const ::perfetto::protos::FloatRectProto* p = _impl_.hwc_crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FloatRectProto&>(
      ::perfetto::protos::_FloatRectProto_default_instance_);
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::hwc_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.hwc_crop)
  return _internal_hwc_crop();
}
inline void LayerProto::unsafe_arena_set_allocated_hwc_crop(
    ::perfetto::protos::FloatRectProto* hwc_crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hwc_crop_);
  }
  _impl_.hwc_crop_ = hwc_crop;
  if (hwc_crop) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.hwc_crop)
}
inline ::perfetto::protos::FloatRectProto* LayerProto::release_hwc_crop() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.hwc_crop_;
  _impl_.hwc_crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::unsafe_arena_release_hwc_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.hwc_crop)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.hwc_crop_;
  _impl_.hwc_crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::_internal_mutable_hwc_crop() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.hwc_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FloatRectProto>(GetArenaForAllocation());
    _impl_.hwc_crop_ = p;
  }
  return _impl_.hwc_crop_;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::mutable_hwc_crop() {
  ::perfetto::protos::FloatRectProto* _msg = _internal_mutable_hwc_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.hwc_crop)
  return _msg;
}
inline void LayerProto::set_allocated_hwc_crop(::perfetto::protos::FloatRectProto* hwc_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hwc_crop_;
  }
  if (hwc_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hwc_crop);
    if (message_arena != submessage_arena) {
      hwc_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hwc_crop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.hwc_crop_ = hwc_crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.hwc_crop)
}

// optional int32 hwc_transform = 32;
inline bool LayerProto::_internal_has_hwc_transform() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool LayerProto::has_hwc_transform() const {
  return _internal_has_hwc_transform();
}
inline void LayerProto::clear_hwc_transform() {
  _impl_.hwc_transform_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline int32_t LayerProto::_internal_hwc_transform() const {
  return _impl_.hwc_transform_;
}
inline int32_t LayerProto::hwc_transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.hwc_transform)
  return _internal_hwc_transform();
}
inline void LayerProto::_internal_set_hwc_transform(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.hwc_transform_ = value;
}
inline void LayerProto::set_hwc_transform(int32_t value) {
  _internal_set_hwc_transform(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.hwc_transform)
}

// optional int32 window_type = 33 [deprecated = true];
inline bool LayerProto::_internal_has_window_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool LayerProto::has_window_type() const {
  return _internal_has_window_type();
}
inline void LayerProto::clear_window_type() {
  _impl_.window_type_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline int32_t LayerProto::_internal_window_type() const {
  return _impl_.window_type_;
}
inline int32_t LayerProto::window_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.window_type)
  return _internal_window_type();
}
inline void LayerProto::_internal_set_window_type(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.window_type_ = value;
}
inline void LayerProto::set_window_type(int32_t value) {
  _internal_set_window_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.window_type)
}

// optional int32 app_id = 34 [deprecated = true];
inline bool LayerProto::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool LayerProto::has_app_id() const {
  return _internal_has_app_id();
}
inline void LayerProto::clear_app_id() {
  _impl_.app_id_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline int32_t LayerProto::_internal_app_id() const {
  return _impl_.app_id_;
}
inline int32_t LayerProto::app_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.app_id)
  return _internal_app_id();
}
inline void LayerProto::_internal_set_app_id(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.app_id_ = value;
}
inline void LayerProto::set_app_id(int32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.app_id)
}

// optional .perfetto.protos.HwcCompositionType hwc_composition_type = 35;
inline bool LayerProto::_internal_has_hwc_composition_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool LayerProto::has_hwc_composition_type() const {
  return _internal_has_hwc_composition_type();
}
inline void LayerProto::clear_hwc_composition_type() {
  _impl_.hwc_composition_type_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::perfetto::protos::HwcCompositionType LayerProto::_internal_hwc_composition_type() const {
  return static_cast< ::perfetto::protos::HwcCompositionType >(_impl_.hwc_composition_type_);
}
inline ::perfetto::protos::HwcCompositionType LayerProto::hwc_composition_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.hwc_composition_type)
  return _internal_hwc_composition_type();
}
inline void LayerProto::_internal_set_hwc_composition_type(::perfetto::protos::HwcCompositionType value) {
  assert(::perfetto::protos::HwcCompositionType_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.hwc_composition_type_ = value;
}
inline void LayerProto::set_hwc_composition_type(::perfetto::protos::HwcCompositionType value) {
  _internal_set_hwc_composition_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.hwc_composition_type)
}

// optional bool is_protected = 36;
inline bool LayerProto::_internal_has_is_protected() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool LayerProto::has_is_protected() const {
  return _internal_has_is_protected();
}
inline void LayerProto::clear_is_protected() {
  _impl_.is_protected_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool LayerProto::_internal_is_protected() const {
  return _impl_.is_protected_;
}
inline bool LayerProto::is_protected() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.is_protected)
  return _internal_is_protected();
}
inline void LayerProto::_internal_set_is_protected(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.is_protected_ = value;
}
inline void LayerProto::set_is_protected(bool value) {
  _internal_set_is_protected(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.is_protected)
}

// optional uint64 curr_frame = 37;
inline bool LayerProto::_internal_has_curr_frame() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool LayerProto::has_curr_frame() const {
  return _internal_has_curr_frame();
}
inline void LayerProto::clear_curr_frame() {
  _impl_.curr_frame_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline uint64_t LayerProto::_internal_curr_frame() const {
  return _impl_.curr_frame_;
}
inline uint64_t LayerProto::curr_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.curr_frame)
  return _internal_curr_frame();
}
inline void LayerProto::_internal_set_curr_frame(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.curr_frame_ = value;
}
inline void LayerProto::set_curr_frame(uint64_t value) {
  _internal_set_curr_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.curr_frame)
}

// repeated .perfetto.protos.BarrierLayerProto barrier_layer = 38;
inline int LayerProto::_internal_barrier_layer_size() const {
  return _impl_.barrier_layer_.size();
}
inline int LayerProto::barrier_layer_size() const {
  return _internal_barrier_layer_size();
}
inline void LayerProto::clear_barrier_layer() {
  _impl_.barrier_layer_.Clear();
}
inline ::perfetto::protos::BarrierLayerProto* LayerProto::mutable_barrier_layer(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.barrier_layer)
  return _impl_.barrier_layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BarrierLayerProto >*
LayerProto::mutable_barrier_layer() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayerProto.barrier_layer)
  return &_impl_.barrier_layer_;
}
inline const ::perfetto::protos::BarrierLayerProto& LayerProto::_internal_barrier_layer(int index) const {
  return _impl_.barrier_layer_.Get(index);
}
inline const ::perfetto::protos::BarrierLayerProto& LayerProto::barrier_layer(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.barrier_layer)
  return _internal_barrier_layer(index);
}
inline ::perfetto::protos::BarrierLayerProto* LayerProto::_internal_add_barrier_layer() {
  return _impl_.barrier_layer_.Add();
}
inline ::perfetto::protos::BarrierLayerProto* LayerProto::add_barrier_layer() {
  ::perfetto::protos::BarrierLayerProto* _add = _internal_add_barrier_layer();
  // @@protoc_insertion_point(field_add:perfetto.protos.LayerProto.barrier_layer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BarrierLayerProto >&
LayerProto::barrier_layer() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayerProto.barrier_layer)
  return _impl_.barrier_layer_;
}

// optional .perfetto.protos.TransformProto buffer_transform = 39;
inline bool LayerProto::_internal_has_buffer_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_transform_ != nullptr);
  return value;
}
inline bool LayerProto::has_buffer_transform() const {
  return _internal_has_buffer_transform();
}
inline const ::perfetto::protos::TransformProto& LayerProto::_internal_buffer_transform() const {
  const ::perfetto::protos::TransformProto* p = _impl_.buffer_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TransformProto&>(
      ::perfetto::protos::_TransformProto_default_instance_);
}
inline const ::perfetto::protos::TransformProto& LayerProto::buffer_transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.buffer_transform)
  return _internal_buffer_transform();
}
inline void LayerProto::unsafe_arena_set_allocated_buffer_transform(
    ::perfetto::protos::TransformProto* buffer_transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_transform_);
  }
  _impl_.buffer_transform_ = buffer_transform;
  if (buffer_transform) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.buffer_transform)
}
inline ::perfetto::protos::TransformProto* LayerProto::release_buffer_transform() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::perfetto::protos::TransformProto* temp = _impl_.buffer_transform_;
  _impl_.buffer_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::unsafe_arena_release_buffer_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.buffer_transform)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::perfetto::protos::TransformProto* temp = _impl_.buffer_transform_;
  _impl_.buffer_transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::_internal_mutable_buffer_transform() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.buffer_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TransformProto>(GetArenaForAllocation());
    _impl_.buffer_transform_ = p;
  }
  return _impl_.buffer_transform_;
}
inline ::perfetto::protos::TransformProto* LayerProto::mutable_buffer_transform() {
  ::perfetto::protos::TransformProto* _msg = _internal_mutable_buffer_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.buffer_transform)
  return _msg;
}
inline void LayerProto::set_allocated_buffer_transform(::perfetto::protos::TransformProto* buffer_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_transform_);
  }
  if (buffer_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffer_transform));
    if (message_arena != submessage_arena) {
      buffer_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.buffer_transform_ = buffer_transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.buffer_transform)
}

// optional int32 effective_scaling_mode = 40;
inline bool LayerProto::_internal_has_effective_scaling_mode() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool LayerProto::has_effective_scaling_mode() const {
  return _internal_has_effective_scaling_mode();
}
inline void LayerProto::clear_effective_scaling_mode() {
  _impl_.effective_scaling_mode_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline int32_t LayerProto::_internal_effective_scaling_mode() const {
  return _impl_.effective_scaling_mode_;
}
inline int32_t LayerProto::effective_scaling_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.effective_scaling_mode)
  return _internal_effective_scaling_mode();
}
inline void LayerProto::_internal_set_effective_scaling_mode(int32_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.effective_scaling_mode_ = value;
}
inline void LayerProto::set_effective_scaling_mode(int32_t value) {
  _internal_set_effective_scaling_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.effective_scaling_mode)
}

// optional float corner_radius = 41;
inline bool LayerProto::_internal_has_corner_radius() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool LayerProto::has_corner_radius() const {
  return _internal_has_corner_radius();
}
inline void LayerProto::clear_corner_radius() {
  _impl_.corner_radius_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline float LayerProto::_internal_corner_radius() const {
  return _impl_.corner_radius_;
}
inline float LayerProto::corner_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.corner_radius)
  return _internal_corner_radius();
}
inline void LayerProto::_internal_set_corner_radius(float value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.corner_radius_ = value;
}
inline void LayerProto::set_corner_radius(float value) {
  _internal_set_corner_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.corner_radius)
}

// map<int32, string> metadata = 42;
inline int LayerProto::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int LayerProto::metadata_size() const {
  return _internal_metadata_size();
}
inline void LayerProto::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
LayerProto::_internal_metadata() const {
  return _impl_.metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
LayerProto::metadata() const {
  // @@protoc_insertion_point(field_map:perfetto.protos.LayerProto.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
LayerProto::_internal_mutable_metadata() {
  return _impl_.metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
LayerProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:perfetto.protos.LayerProto.metadata)
  return _internal_mutable_metadata();
}

// optional .perfetto.protos.TransformProto effective_transform = 43;
inline bool LayerProto::_internal_has_effective_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.effective_transform_ != nullptr);
  return value;
}
inline bool LayerProto::has_effective_transform() const {
  return _internal_has_effective_transform();
}
inline const ::perfetto::protos::TransformProto& LayerProto::_internal_effective_transform() const {
  const ::perfetto::protos::TransformProto* p = _impl_.effective_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TransformProto&>(
      ::perfetto::protos::_TransformProto_default_instance_);
}
inline const ::perfetto::protos::TransformProto& LayerProto::effective_transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.effective_transform)
  return _internal_effective_transform();
}
inline void LayerProto::unsafe_arena_set_allocated_effective_transform(
    ::perfetto::protos::TransformProto* effective_transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.effective_transform_);
  }
  _impl_.effective_transform_ = effective_transform;
  if (effective_transform) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.effective_transform)
}
inline ::perfetto::protos::TransformProto* LayerProto::release_effective_transform() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::perfetto::protos::TransformProto* temp = _impl_.effective_transform_;
  _impl_.effective_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::unsafe_arena_release_effective_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.effective_transform)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::perfetto::protos::TransformProto* temp = _impl_.effective_transform_;
  _impl_.effective_transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TransformProto* LayerProto::_internal_mutable_effective_transform() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.effective_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TransformProto>(GetArenaForAllocation());
    _impl_.effective_transform_ = p;
  }
  return _impl_.effective_transform_;
}
inline ::perfetto::protos::TransformProto* LayerProto::mutable_effective_transform() {
  ::perfetto::protos::TransformProto* _msg = _internal_mutable_effective_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.effective_transform)
  return _msg;
}
inline void LayerProto::set_allocated_effective_transform(::perfetto::protos::TransformProto* effective_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.effective_transform_);
  }
  if (effective_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effective_transform));
    if (message_arena != submessage_arena) {
      effective_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effective_transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.effective_transform_ = effective_transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.effective_transform)
}

// optional .perfetto.protos.FloatRectProto source_bounds = 44;
inline bool LayerProto::_internal_has_source_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_bounds_ != nullptr);
  return value;
}
inline bool LayerProto::has_source_bounds() const {
  return _internal_has_source_bounds();
}
inline void LayerProto::clear_source_bounds() {
  if (_impl_.source_bounds_ != nullptr) _impl_.source_bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::_internal_source_bounds() const {
  const ::perfetto::protos::FloatRectProto* p = _impl_.source_bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FloatRectProto&>(
      ::perfetto::protos::_FloatRectProto_default_instance_);
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::source_bounds() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.source_bounds)
  return _internal_source_bounds();
}
inline void LayerProto::unsafe_arena_set_allocated_source_bounds(
    ::perfetto::protos::FloatRectProto* source_bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_bounds_);
  }
  _impl_.source_bounds_ = source_bounds;
  if (source_bounds) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.source_bounds)
}
inline ::perfetto::protos::FloatRectProto* LayerProto::release_source_bounds() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.source_bounds_;
  _impl_.source_bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::unsafe_arena_release_source_bounds() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.source_bounds)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.source_bounds_;
  _impl_.source_bounds_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::_internal_mutable_source_bounds() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.source_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FloatRectProto>(GetArenaForAllocation());
    _impl_.source_bounds_ = p;
  }
  return _impl_.source_bounds_;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::mutable_source_bounds() {
  ::perfetto::protos::FloatRectProto* _msg = _internal_mutable_source_bounds();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.source_bounds)
  return _msg;
}
inline void LayerProto::set_allocated_source_bounds(::perfetto::protos::FloatRectProto* source_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.source_bounds_;
  }
  if (source_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_bounds);
    if (message_arena != submessage_arena) {
      source_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_bounds, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.source_bounds_ = source_bounds;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.source_bounds)
}

// optional .perfetto.protos.FloatRectProto bounds = 45;
inline bool LayerProto::_internal_has_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounds_ != nullptr);
  return value;
}
inline bool LayerProto::has_bounds() const {
  return _internal_has_bounds();
}
inline void LayerProto::clear_bounds() {
  if (_impl_.bounds_ != nullptr) _impl_.bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::_internal_bounds() const {
  const ::perfetto::protos::FloatRectProto* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FloatRectProto&>(
      ::perfetto::protos::_FloatRectProto_default_instance_);
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::bounds() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.bounds)
  return _internal_bounds();
}
inline void LayerProto::unsafe_arena_set_allocated_bounds(
    ::perfetto::protos::FloatRectProto* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = bounds;
  if (bounds) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.bounds)
}
inline ::perfetto::protos::FloatRectProto* LayerProto::release_bounds() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.bounds)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::_internal_mutable_bounds() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FloatRectProto>(GetArenaForAllocation());
    _impl_.bounds_ = p;
  }
  return _impl_.bounds_;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::mutable_bounds() {
  ::perfetto::protos::FloatRectProto* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.bounds)
  return _msg;
}
inline void LayerProto::set_allocated_bounds(::perfetto::protos::FloatRectProto* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.bounds)
}

// optional .perfetto.protos.FloatRectProto screen_bounds = 46;
inline bool LayerProto::_internal_has_screen_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.screen_bounds_ != nullptr);
  return value;
}
inline bool LayerProto::has_screen_bounds() const {
  return _internal_has_screen_bounds();
}
inline void LayerProto::clear_screen_bounds() {
  if (_impl_.screen_bounds_ != nullptr) _impl_.screen_bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::_internal_screen_bounds() const {
  const ::perfetto::protos::FloatRectProto* p = _impl_.screen_bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FloatRectProto&>(
      ::perfetto::protos::_FloatRectProto_default_instance_);
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::screen_bounds() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.screen_bounds)
  return _internal_screen_bounds();
}
inline void LayerProto::unsafe_arena_set_allocated_screen_bounds(
    ::perfetto::protos::FloatRectProto* screen_bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.screen_bounds_);
  }
  _impl_.screen_bounds_ = screen_bounds;
  if (screen_bounds) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.screen_bounds)
}
inline ::perfetto::protos::FloatRectProto* LayerProto::release_screen_bounds() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.screen_bounds_;
  _impl_.screen_bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::unsafe_arena_release_screen_bounds() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.screen_bounds)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.screen_bounds_;
  _impl_.screen_bounds_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::_internal_mutable_screen_bounds() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.screen_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FloatRectProto>(GetArenaForAllocation());
    _impl_.screen_bounds_ = p;
  }
  return _impl_.screen_bounds_;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::mutable_screen_bounds() {
  ::perfetto::protos::FloatRectProto* _msg = _internal_mutable_screen_bounds();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.screen_bounds)
  return _msg;
}
inline void LayerProto::set_allocated_screen_bounds(::perfetto::protos::FloatRectProto* screen_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.screen_bounds_;
  }
  if (screen_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(screen_bounds);
    if (message_arena != submessage_arena) {
      screen_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_bounds, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.screen_bounds_ = screen_bounds;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.screen_bounds)
}

// optional .perfetto.protos.InputWindowInfoProto input_window_info = 47;
inline bool LayerProto::_internal_has_input_window_info() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_window_info_ != nullptr);
  return value;
}
inline bool LayerProto::has_input_window_info() const {
  return _internal_has_input_window_info();
}
inline const ::perfetto::protos::InputWindowInfoProto& LayerProto::_internal_input_window_info() const {
  const ::perfetto::protos::InputWindowInfoProto* p = _impl_.input_window_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::InputWindowInfoProto&>(
      ::perfetto::protos::_InputWindowInfoProto_default_instance_);
}
inline const ::perfetto::protos::InputWindowInfoProto& LayerProto::input_window_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.input_window_info)
  return _internal_input_window_info();
}
inline void LayerProto::unsafe_arena_set_allocated_input_window_info(
    ::perfetto::protos::InputWindowInfoProto* input_window_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_window_info_);
  }
  _impl_.input_window_info_ = input_window_info;
  if (input_window_info) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.input_window_info)
}
inline ::perfetto::protos::InputWindowInfoProto* LayerProto::release_input_window_info() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::perfetto::protos::InputWindowInfoProto* temp = _impl_.input_window_info_;
  _impl_.input_window_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::InputWindowInfoProto* LayerProto::unsafe_arena_release_input_window_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.input_window_info)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::perfetto::protos::InputWindowInfoProto* temp = _impl_.input_window_info_;
  _impl_.input_window_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InputWindowInfoProto* LayerProto::_internal_mutable_input_window_info() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.input_window_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InputWindowInfoProto>(GetArenaForAllocation());
    _impl_.input_window_info_ = p;
  }
  return _impl_.input_window_info_;
}
inline ::perfetto::protos::InputWindowInfoProto* LayerProto::mutable_input_window_info() {
  ::perfetto::protos::InputWindowInfoProto* _msg = _internal_mutable_input_window_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.input_window_info)
  return _msg;
}
inline void LayerProto::set_allocated_input_window_info(::perfetto::protos::InputWindowInfoProto* input_window_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_window_info_);
  }
  if (input_window_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_window_info));
    if (message_arena != submessage_arena) {
      input_window_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_window_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.input_window_info_ = input_window_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.input_window_info)
}

// optional .perfetto.protos.FloatRectProto corner_radius_crop = 48;
inline bool LayerProto::_internal_has_corner_radius_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.corner_radius_crop_ != nullptr);
  return value;
}
inline bool LayerProto::has_corner_radius_crop() const {
  return _internal_has_corner_radius_crop();
}
inline void LayerProto::clear_corner_radius_crop() {
  if (_impl_.corner_radius_crop_ != nullptr) _impl_.corner_radius_crop_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::_internal_corner_radius_crop() const {
  const ::perfetto::protos::FloatRectProto* p = _impl_.corner_radius_crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FloatRectProto&>(
      ::perfetto::protos::_FloatRectProto_default_instance_);
}
inline const ::perfetto::protos::FloatRectProto& LayerProto::corner_radius_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.corner_radius_crop)
  return _internal_corner_radius_crop();
}
inline void LayerProto::unsafe_arena_set_allocated_corner_radius_crop(
    ::perfetto::protos::FloatRectProto* corner_radius_crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.corner_radius_crop_);
  }
  _impl_.corner_radius_crop_ = corner_radius_crop;
  if (corner_radius_crop) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.corner_radius_crop)
}
inline ::perfetto::protos::FloatRectProto* LayerProto::release_corner_radius_crop() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.corner_radius_crop_;
  _impl_.corner_radius_crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::unsafe_arena_release_corner_radius_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.corner_radius_crop)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::perfetto::protos::FloatRectProto* temp = _impl_.corner_radius_crop_;
  _impl_.corner_radius_crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::_internal_mutable_corner_radius_crop() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.corner_radius_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FloatRectProto>(GetArenaForAllocation());
    _impl_.corner_radius_crop_ = p;
  }
  return _impl_.corner_radius_crop_;
}
inline ::perfetto::protos::FloatRectProto* LayerProto::mutable_corner_radius_crop() {
  ::perfetto::protos::FloatRectProto* _msg = _internal_mutable_corner_radius_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.corner_radius_crop)
  return _msg;
}
inline void LayerProto::set_allocated_corner_radius_crop(::perfetto::protos::FloatRectProto* corner_radius_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.corner_radius_crop_;
  }
  if (corner_radius_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(corner_radius_crop);
    if (message_arena != submessage_arena) {
      corner_radius_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corner_radius_crop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.corner_radius_crop_ = corner_radius_crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.corner_radius_crop)
}

// optional float shadow_radius = 49;
inline bool LayerProto::_internal_has_shadow_radius() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool LayerProto::has_shadow_radius() const {
  return _internal_has_shadow_radius();
}
inline void LayerProto::clear_shadow_radius() {
  _impl_.shadow_radius_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline float LayerProto::_internal_shadow_radius() const {
  return _impl_.shadow_radius_;
}
inline float LayerProto::shadow_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.shadow_radius)
  return _internal_shadow_radius();
}
inline void LayerProto::_internal_set_shadow_radius(float value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.shadow_radius_ = value;
}
inline void LayerProto::set_shadow_radius(float value) {
  _internal_set_shadow_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.shadow_radius)
}

// optional .perfetto.protos.ColorTransformProto color_transform = 50;
inline bool LayerProto::_internal_has_color_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_transform_ != nullptr);
  return value;
}
inline bool LayerProto::has_color_transform() const {
  return _internal_has_color_transform();
}
inline const ::perfetto::protos::ColorTransformProto& LayerProto::_internal_color_transform() const {
  const ::perfetto::protos::ColorTransformProto* p = _impl_.color_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ColorTransformProto&>(
      ::perfetto::protos::_ColorTransformProto_default_instance_);
}
inline const ::perfetto::protos::ColorTransformProto& LayerProto::color_transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.color_transform)
  return _internal_color_transform();
}
inline void LayerProto::unsafe_arena_set_allocated_color_transform(
    ::perfetto::protos::ColorTransformProto* color_transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_transform_);
  }
  _impl_.color_transform_ = color_transform;
  if (color_transform) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.color_transform)
}
inline ::perfetto::protos::ColorTransformProto* LayerProto::release_color_transform() {
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::perfetto::protos::ColorTransformProto* temp = _impl_.color_transform_;
  _impl_.color_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ColorTransformProto* LayerProto::unsafe_arena_release_color_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.color_transform)
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::perfetto::protos::ColorTransformProto* temp = _impl_.color_transform_;
  _impl_.color_transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ColorTransformProto* LayerProto::_internal_mutable_color_transform() {
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.color_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ColorTransformProto>(GetArenaForAllocation());
    _impl_.color_transform_ = p;
  }
  return _impl_.color_transform_;
}
inline ::perfetto::protos::ColorTransformProto* LayerProto::mutable_color_transform() {
  ::perfetto::protos::ColorTransformProto* _msg = _internal_mutable_color_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.color_transform)
  return _msg;
}
inline void LayerProto::set_allocated_color_transform(::perfetto::protos::ColorTransformProto* color_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_transform_);
  }
  if (color_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_transform));
    if (message_arena != submessage_arena) {
      color_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.color_transform_ = color_transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.color_transform)
}

// optional bool is_relative_of = 51;
inline bool LayerProto::_internal_has_is_relative_of() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool LayerProto::has_is_relative_of() const {
  return _internal_has_is_relative_of();
}
inline void LayerProto::clear_is_relative_of() {
  _impl_.is_relative_of_ = false;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline bool LayerProto::_internal_is_relative_of() const {
  return _impl_.is_relative_of_;
}
inline bool LayerProto::is_relative_of() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.is_relative_of)
  return _internal_is_relative_of();
}
inline void LayerProto::_internal_set_is_relative_of(bool value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.is_relative_of_ = value;
}
inline void LayerProto::set_is_relative_of(bool value) {
  _internal_set_is_relative_of(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.is_relative_of)
}

// optional int32 background_blur_radius = 52;
inline bool LayerProto::_internal_has_background_blur_radius() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool LayerProto::has_background_blur_radius() const {
  return _internal_has_background_blur_radius();
}
inline void LayerProto::clear_background_blur_radius() {
  _impl_.background_blur_radius_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline int32_t LayerProto::_internal_background_blur_radius() const {
  return _impl_.background_blur_radius_;
}
inline int32_t LayerProto::background_blur_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.background_blur_radius)
  return _internal_background_blur_radius();
}
inline void LayerProto::_internal_set_background_blur_radius(int32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.background_blur_radius_ = value;
}
inline void LayerProto::set_background_blur_radius(int32_t value) {
  _internal_set_background_blur_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.background_blur_radius)
}

// optional uint32 owner_uid = 53;
inline bool LayerProto::_internal_has_owner_uid() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool LayerProto::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline void LayerProto::clear_owner_uid() {
  _impl_.owner_uid_ = 0u;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline uint32_t LayerProto::_internal_owner_uid() const {
  return _impl_.owner_uid_;
}
inline uint32_t LayerProto::owner_uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.owner_uid)
  return _internal_owner_uid();
}
inline void LayerProto::_internal_set_owner_uid(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.owner_uid_ = value;
}
inline void LayerProto::set_owner_uid(uint32_t value) {
  _internal_set_owner_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.owner_uid)
}

// repeated .perfetto.protos.BlurRegion blur_regions = 54;
inline int LayerProto::_internal_blur_regions_size() const {
  return _impl_.blur_regions_.size();
}
inline int LayerProto::blur_regions_size() const {
  return _internal_blur_regions_size();
}
inline ::perfetto::protos::BlurRegion* LayerProto::mutable_blur_regions(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.blur_regions)
  return _impl_.blur_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >*
LayerProto::mutable_blur_regions() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayerProto.blur_regions)
  return &_impl_.blur_regions_;
}
inline const ::perfetto::protos::BlurRegion& LayerProto::_internal_blur_regions(int index) const {
  return _impl_.blur_regions_.Get(index);
}
inline const ::perfetto::protos::BlurRegion& LayerProto::blur_regions(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.blur_regions)
  return _internal_blur_regions(index);
}
inline ::perfetto::protos::BlurRegion* LayerProto::_internal_add_blur_regions() {
  return _impl_.blur_regions_.Add();
}
inline ::perfetto::protos::BlurRegion* LayerProto::add_blur_regions() {
  ::perfetto::protos::BlurRegion* _add = _internal_add_blur_regions();
  // @@protoc_insertion_point(field_add:perfetto.protos.LayerProto.blur_regions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >&
LayerProto::blur_regions() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayerProto.blur_regions)
  return _impl_.blur_regions_;
}

// optional bool is_trusted_overlay = 55;
inline bool LayerProto::_internal_has_is_trusted_overlay() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool LayerProto::has_is_trusted_overlay() const {
  return _internal_has_is_trusted_overlay();
}
inline void LayerProto::clear_is_trusted_overlay() {
  _impl_.is_trusted_overlay_ = false;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline bool LayerProto::_internal_is_trusted_overlay() const {
  return _impl_.is_trusted_overlay_;
}
inline bool LayerProto::is_trusted_overlay() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.is_trusted_overlay)
  return _internal_is_trusted_overlay();
}
inline void LayerProto::_internal_set_is_trusted_overlay(bool value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.is_trusted_overlay_ = value;
}
inline void LayerProto::set_is_trusted_overlay(bool value) {
  _internal_set_is_trusted_overlay(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.is_trusted_overlay)
}

// optional float requested_corner_radius = 56;
inline bool LayerProto::_internal_has_requested_corner_radius() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool LayerProto::has_requested_corner_radius() const {
  return _internal_has_requested_corner_radius();
}
inline void LayerProto::clear_requested_corner_radius() {
  _impl_.requested_corner_radius_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline float LayerProto::_internal_requested_corner_radius() const {
  return _impl_.requested_corner_radius_;
}
inline float LayerProto::requested_corner_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.requested_corner_radius)
  return _internal_requested_corner_radius();
}
inline void LayerProto::_internal_set_requested_corner_radius(float value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.requested_corner_radius_ = value;
}
inline void LayerProto::set_requested_corner_radius(float value) {
  _internal_set_requested_corner_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.requested_corner_radius)
}

// optional .perfetto.protos.RectProto destination_frame = 57;
inline bool LayerProto::_internal_has_destination_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destination_frame_ != nullptr);
  return value;
}
inline bool LayerProto::has_destination_frame() const {
  return _internal_has_destination_frame();
}
inline const ::perfetto::protos::RectProto& LayerProto::_internal_destination_frame() const {
  const ::perfetto::protos::RectProto* p = _impl_.destination_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerProto::destination_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.destination_frame)
  return _internal_destination_frame();
}
inline void LayerProto::unsafe_arena_set_allocated_destination_frame(
    ::perfetto::protos::RectProto* destination_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_frame_);
  }
  _impl_.destination_frame_ = destination_frame;
  if (destination_frame) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerProto.destination_frame)
}
inline ::perfetto::protos::RectProto* LayerProto::release_destination_frame() {
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::perfetto::protos::RectProto* temp = _impl_.destination_frame_;
  _impl_.destination_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::unsafe_arena_release_destination_frame() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerProto.destination_frame)
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::perfetto::protos::RectProto* temp = _impl_.destination_frame_;
  _impl_.destination_frame_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerProto::_internal_mutable_destination_frame() {
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.destination_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.destination_frame_ = p;
  }
  return _impl_.destination_frame_;
}
inline ::perfetto::protos::RectProto* LayerProto::mutable_destination_frame() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_destination_frame();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerProto.destination_frame)
  return _msg;
}
inline void LayerProto::set_allocated_destination_frame(::perfetto::protos::RectProto* destination_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_frame_);
  }
  if (destination_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_frame));
    if (message_arena != submessage_arena) {
      destination_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.destination_frame_ = destination_frame;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerProto.destination_frame)
}

// optional uint32 original_id = 58;
inline bool LayerProto::_internal_has_original_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool LayerProto::has_original_id() const {
  return _internal_has_original_id();
}
inline void LayerProto::clear_original_id() {
  _impl_.original_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline uint32_t LayerProto::_internal_original_id() const {
  return _impl_.original_id_;
}
inline uint32_t LayerProto::original_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.original_id)
  return _internal_original_id();
}
inline void LayerProto::_internal_set_original_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.original_id_ = value;
}
inline void LayerProto::set_original_id(uint32_t value) {
  _internal_set_original_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.original_id)
}

// optional .perfetto.protos.TrustedOverlay trusted_overlay = 59;
inline bool LayerProto::_internal_has_trusted_overlay() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool LayerProto::has_trusted_overlay() const {
  return _internal_has_trusted_overlay();
}
inline void LayerProto::clear_trusted_overlay() {
  _impl_.trusted_overlay_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::perfetto::protos::TrustedOverlay LayerProto::_internal_trusted_overlay() const {
  return static_cast< ::perfetto::protos::TrustedOverlay >(_impl_.trusted_overlay_);
}
inline ::perfetto::protos::TrustedOverlay LayerProto::trusted_overlay() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerProto.trusted_overlay)
  return _internal_trusted_overlay();
}
inline void LayerProto::_internal_set_trusted_overlay(::perfetto::protos::TrustedOverlay value) {
  assert(::perfetto::protos::TrustedOverlay_IsValid(value));
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.trusted_overlay_ = value;
}
inline void LayerProto::set_trusted_overlay(::perfetto::protos::TrustedOverlay value) {
  _internal_set_trusted_overlay(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerProto.trusted_overlay)
}

// -------------------------------------------------------------------

// PositionProto

// optional float x = 1;
inline bool PositionProto::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionProto::has_x() const {
  return _internal_has_x();
}
inline void PositionProto::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PositionProto::_internal_x() const {
  return _impl_.x_;
}
inline float PositionProto::x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PositionProto.x)
  return _internal_x();
}
inline void PositionProto::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void PositionProto::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PositionProto.x)
}

// optional float y = 2;
inline bool PositionProto::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionProto::has_y() const {
  return _internal_has_y();
}
inline void PositionProto::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PositionProto::_internal_y() const {
  return _impl_.y_;
}
inline float PositionProto::y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PositionProto.y)
  return _internal_y();
}
inline void PositionProto::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void PositionProto::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PositionProto.y)
}

// -------------------------------------------------------------------

// FloatRectProto

// optional float left = 1;
inline bool FloatRectProto::_internal_has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FloatRectProto::has_left() const {
  return _internal_has_left();
}
inline void FloatRectProto::clear_left() {
  _impl_.left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FloatRectProto::_internal_left() const {
  return _impl_.left_;
}
inline float FloatRectProto::left() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FloatRectProto.left)
  return _internal_left();
}
inline void FloatRectProto::_internal_set_left(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.left_ = value;
}
inline void FloatRectProto::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FloatRectProto.left)
}

// optional float top = 2;
inline bool FloatRectProto::_internal_has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FloatRectProto::has_top() const {
  return _internal_has_top();
}
inline void FloatRectProto::clear_top() {
  _impl_.top_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FloatRectProto::_internal_top() const {
  return _impl_.top_;
}
inline float FloatRectProto::top() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FloatRectProto.top)
  return _internal_top();
}
inline void FloatRectProto::_internal_set_top(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_ = value;
}
inline void FloatRectProto::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FloatRectProto.top)
}

// optional float right = 3;
inline bool FloatRectProto::_internal_has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FloatRectProto::has_right() const {
  return _internal_has_right();
}
inline void FloatRectProto::clear_right() {
  _impl_.right_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FloatRectProto::_internal_right() const {
  return _impl_.right_;
}
inline float FloatRectProto::right() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FloatRectProto.right)
  return _internal_right();
}
inline void FloatRectProto::_internal_set_right(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.right_ = value;
}
inline void FloatRectProto::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FloatRectProto.right)
}

// optional float bottom = 4;
inline bool FloatRectProto::_internal_has_bottom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FloatRectProto::has_bottom() const {
  return _internal_has_bottom();
}
inline void FloatRectProto::clear_bottom() {
  _impl_.bottom_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float FloatRectProto::_internal_bottom() const {
  return _impl_.bottom_;
}
inline float FloatRectProto::bottom() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FloatRectProto.bottom)
  return _internal_bottom();
}
inline void FloatRectProto::_internal_set_bottom(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bottom_ = value;
}
inline void FloatRectProto::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FloatRectProto.bottom)
}

// -------------------------------------------------------------------

// ActiveBufferProto

// optional uint32 width = 1;
inline bool ActiveBufferProto::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActiveBufferProto::has_width() const {
  return _internal_has_width();
}
inline void ActiveBufferProto::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ActiveBufferProto::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t ActiveBufferProto::width() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ActiveBufferProto.width)
  return _internal_width();
}
inline void ActiveBufferProto::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.width_ = value;
}
inline void ActiveBufferProto::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ActiveBufferProto.width)
}

// optional uint32 height = 2;
inline bool ActiveBufferProto::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActiveBufferProto::has_height() const {
  return _internal_has_height();
}
inline void ActiveBufferProto::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ActiveBufferProto::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t ActiveBufferProto::height() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ActiveBufferProto.height)
  return _internal_height();
}
inline void ActiveBufferProto::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.height_ = value;
}
inline void ActiveBufferProto::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ActiveBufferProto.height)
}

// optional uint32 stride = 3;
inline bool ActiveBufferProto::_internal_has_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ActiveBufferProto::has_stride() const {
  return _internal_has_stride();
}
inline void ActiveBufferProto::clear_stride() {
  _impl_.stride_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ActiveBufferProto::_internal_stride() const {
  return _impl_.stride_;
}
inline uint32_t ActiveBufferProto::stride() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ActiveBufferProto.stride)
  return _internal_stride();
}
inline void ActiveBufferProto::_internal_set_stride(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stride_ = value;
}
inline void ActiveBufferProto::set_stride(uint32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ActiveBufferProto.stride)
}

// optional int32 format = 4;
inline bool ActiveBufferProto::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ActiveBufferProto::has_format() const {
  return _internal_has_format();
}
inline void ActiveBufferProto::clear_format() {
  _impl_.format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ActiveBufferProto::_internal_format() const {
  return _impl_.format_;
}
inline int32_t ActiveBufferProto::format() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ActiveBufferProto.format)
  return _internal_format();
}
inline void ActiveBufferProto::_internal_set_format(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.format_ = value;
}
inline void ActiveBufferProto::set_format(int32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ActiveBufferProto.format)
}

// optional uint64 usage = 5;
inline bool ActiveBufferProto::_internal_has_usage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ActiveBufferProto::has_usage() const {
  return _internal_has_usage();
}
inline void ActiveBufferProto::clear_usage() {
  _impl_.usage_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ActiveBufferProto::_internal_usage() const {
  return _impl_.usage_;
}
inline uint64_t ActiveBufferProto::usage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ActiveBufferProto.usage)
  return _internal_usage();
}
inline void ActiveBufferProto::_internal_set_usage(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.usage_ = value;
}
inline void ActiveBufferProto::set_usage(uint64_t value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ActiveBufferProto.usage)
}

// -------------------------------------------------------------------

// BarrierLayerProto

// optional int32 id = 1;
inline bool BarrierLayerProto::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BarrierLayerProto::has_id() const {
  return _internal_has_id();
}
inline void BarrierLayerProto::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t BarrierLayerProto::_internal_id() const {
  return _impl_.id_;
}
inline int32_t BarrierLayerProto::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BarrierLayerProto.id)
  return _internal_id();
}
inline void BarrierLayerProto::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void BarrierLayerProto::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BarrierLayerProto.id)
}

// optional uint64 frame_number = 2;
inline bool BarrierLayerProto::_internal_has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BarrierLayerProto::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void BarrierLayerProto::clear_frame_number() {
  _impl_.frame_number_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t BarrierLayerProto::_internal_frame_number() const {
  return _impl_.frame_number_;
}
inline uint64_t BarrierLayerProto::frame_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BarrierLayerProto.frame_number)
  return _internal_frame_number();
}
inline void BarrierLayerProto::_internal_set_frame_number(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frame_number_ = value;
}
inline void BarrierLayerProto::set_frame_number(uint64_t value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BarrierLayerProto.frame_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::LayersTraceFileProto_MagicNumber> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::HwcCompositionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5flayers_2eproto
