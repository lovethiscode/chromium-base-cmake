// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/frame_timeline_event.proto

#include "protos/perfetto/trace/android/frame_timeline_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cookie_)*/int64_t{0}
  , /*decltype(_impl_.token_)*/int64_t{0}
  , /*decltype(_impl_.display_frame_token_)*/int64_t{0}
  , /*decltype(_impl_.pid_)*/0} {}
struct FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ExpectedSurfaceFrameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_;
PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cookie_)*/int64_t{0}
  , /*decltype(_impl_.token_)*/int64_t{0}
  , /*decltype(_impl_.display_frame_token_)*/int64_t{0}
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.present_type_)*/0
  , /*decltype(_impl_.on_time_finish_)*/false
  , /*decltype(_impl_.gpu_composition_)*/false
  , /*decltype(_impl_.is_buffer_)*/false
  , /*decltype(_impl_.jank_type_)*/0
  , /*decltype(_impl_.prediction_type_)*/0
  , /*decltype(_impl_.jank_severity_type_)*/0} {}
struct FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ActualSurfaceFrameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_;
PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cookie_)*/int64_t{0}
  , /*decltype(_impl_.token_)*/int64_t{0}
  , /*decltype(_impl_.pid_)*/0} {}
struct FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ExpectedDisplayFrameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_;
PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cookie_)*/int64_t{0}
  , /*decltype(_impl_.token_)*/int64_t{0}
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.present_type_)*/0
  , /*decltype(_impl_.on_time_finish_)*/false
  , /*decltype(_impl_.gpu_composition_)*/false
  , /*decltype(_impl_.jank_type_)*/0
  , /*decltype(_impl_.prediction_type_)*/0
  , /*decltype(_impl_.jank_severity_type_)*/0} {}
struct FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ActualDisplayFrameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualDisplayFrameStart_default_instance_;
PROTOBUF_CONSTEXPR FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cookie_)*/int64_t{0}} {}
struct FrameTimelineEvent_FrameEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_FrameEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_FrameEndDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_FrameEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_FrameEndDefaultTypeInternal _FrameTimelineEvent_FrameEnd_default_instance_;
PROTOBUF_CONSTEXPR FrameTimelineEvent::FrameTimelineEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FrameTimelineEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEventDefaultTypeInternal() {}
  union {
    FrameTimelineEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEventDefaultTypeInternal _FrameTimelineEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool FrameTimelineEvent_JankType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameTimelineEvent_JankType_strings[12] = {};

static const char FrameTimelineEvent_JankType_names[] =
  "JANK_APP_DEADLINE_MISSED"
  "JANK_BUFFER_STUFFING"
  "JANK_DISPLAY_HAL"
  "JANK_DROPPED"
  "JANK_NONE"
  "JANK_PREDICTION_ERROR"
  "JANK_SF_CPU_DEADLINE_MISSED"
  "JANK_SF_GPU_DEADLINE_MISSED"
  "JANK_SF_SCHEDULING"
  "JANK_SF_STUFFING"
  "JANK_UNKNOWN"
  "JANK_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameTimelineEvent_JankType_entries[] = {
  { {FrameTimelineEvent_JankType_names + 0, 24}, 64 },
  { {FrameTimelineEvent_JankType_names + 24, 20}, 128 },
  { {FrameTimelineEvent_JankType_names + 44, 16}, 8 },
  { {FrameTimelineEvent_JankType_names + 60, 12}, 1024 },
  { {FrameTimelineEvent_JankType_names + 72, 9}, 1 },
  { {FrameTimelineEvent_JankType_names + 81, 21}, 4 },
  { {FrameTimelineEvent_JankType_names + 102, 27}, 16 },
  { {FrameTimelineEvent_JankType_names + 129, 27}, 32 },
  { {FrameTimelineEvent_JankType_names + 156, 18}, 2 },
  { {FrameTimelineEvent_JankType_names + 174, 16}, 512 },
  { {FrameTimelineEvent_JankType_names + 190, 12}, 256 },
  { {FrameTimelineEvent_JankType_names + 202, 16}, 0 },
};

static const int FrameTimelineEvent_JankType_entries_by_number[] = {
  11, // 0 -> JANK_UNSPECIFIED
  4, // 1 -> JANK_NONE
  8, // 2 -> JANK_SF_SCHEDULING
  5, // 4 -> JANK_PREDICTION_ERROR
  2, // 8 -> JANK_DISPLAY_HAL
  6, // 16 -> JANK_SF_CPU_DEADLINE_MISSED
  7, // 32 -> JANK_SF_GPU_DEADLINE_MISSED
  0, // 64 -> JANK_APP_DEADLINE_MISSED
  1, // 128 -> JANK_BUFFER_STUFFING
  10, // 256 -> JANK_UNKNOWN
  9, // 512 -> JANK_SF_STUFFING
  3, // 1024 -> JANK_DROPPED
};

const std::string& FrameTimelineEvent_JankType_Name(
    FrameTimelineEvent_JankType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameTimelineEvent_JankType_entries,
          FrameTimelineEvent_JankType_entries_by_number,
          12, FrameTimelineEvent_JankType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameTimelineEvent_JankType_entries,
      FrameTimelineEvent_JankType_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameTimelineEvent_JankType_strings[idx].get();
}
bool FrameTimelineEvent_JankType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FrameTimelineEvent_JankType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameTimelineEvent_JankType_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<FrameTimelineEvent_JankType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_UNSPECIFIED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_NONE;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_SCHEDULING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_PREDICTION_ERROR;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_DISPLAY_HAL;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_CPU_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_GPU_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_APP_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_BUFFER_STUFFING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_UNKNOWN;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_STUFFING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_DROPPED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JankType_MIN;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JankType_MAX;
constexpr int FrameTimelineEvent::JankType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool FrameTimelineEvent_JankSeverityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameTimelineEvent_JankSeverityType_strings[4] = {};

static const char FrameTimelineEvent_JankSeverityType_names[] =
  "SEVERITY_FULL"
  "SEVERITY_NONE"
  "SEVERITY_PARTIAL"
  "SEVERITY_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameTimelineEvent_JankSeverityType_entries[] = {
  { {FrameTimelineEvent_JankSeverityType_names + 0, 13}, 3 },
  { {FrameTimelineEvent_JankSeverityType_names + 13, 13}, 1 },
  { {FrameTimelineEvent_JankSeverityType_names + 26, 16}, 2 },
  { {FrameTimelineEvent_JankSeverityType_names + 42, 16}, 0 },
};

static const int FrameTimelineEvent_JankSeverityType_entries_by_number[] = {
  3, // 0 -> SEVERITY_UNKNOWN
  1, // 1 -> SEVERITY_NONE
  2, // 2 -> SEVERITY_PARTIAL
  0, // 3 -> SEVERITY_FULL
};

const std::string& FrameTimelineEvent_JankSeverityType_Name(
    FrameTimelineEvent_JankSeverityType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameTimelineEvent_JankSeverityType_entries,
          FrameTimelineEvent_JankSeverityType_entries_by_number,
          4, FrameTimelineEvent_JankSeverityType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameTimelineEvent_JankSeverityType_entries,
      FrameTimelineEvent_JankSeverityType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameTimelineEvent_JankSeverityType_strings[idx].get();
}
bool FrameTimelineEvent_JankSeverityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FrameTimelineEvent_JankSeverityType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameTimelineEvent_JankSeverityType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<FrameTimelineEvent_JankSeverityType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FrameTimelineEvent_JankSeverityType FrameTimelineEvent::SEVERITY_UNKNOWN;
constexpr FrameTimelineEvent_JankSeverityType FrameTimelineEvent::SEVERITY_NONE;
constexpr FrameTimelineEvent_JankSeverityType FrameTimelineEvent::SEVERITY_PARTIAL;
constexpr FrameTimelineEvent_JankSeverityType FrameTimelineEvent::SEVERITY_FULL;
constexpr FrameTimelineEvent_JankSeverityType FrameTimelineEvent::JankSeverityType_MIN;
constexpr FrameTimelineEvent_JankSeverityType FrameTimelineEvent::JankSeverityType_MAX;
constexpr int FrameTimelineEvent::JankSeverityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool FrameTimelineEvent_PresentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameTimelineEvent_PresentType_strings[6] = {};

static const char FrameTimelineEvent_PresentType_names[] =
  "PRESENT_DROPPED"
  "PRESENT_EARLY"
  "PRESENT_LATE"
  "PRESENT_ON_TIME"
  "PRESENT_UNKNOWN"
  "PRESENT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameTimelineEvent_PresentType_entries[] = {
  { {FrameTimelineEvent_PresentType_names + 0, 15}, 4 },
  { {FrameTimelineEvent_PresentType_names + 15, 13}, 3 },
  { {FrameTimelineEvent_PresentType_names + 28, 12}, 2 },
  { {FrameTimelineEvent_PresentType_names + 40, 15}, 1 },
  { {FrameTimelineEvent_PresentType_names + 55, 15}, 5 },
  { {FrameTimelineEvent_PresentType_names + 70, 19}, 0 },
};

static const int FrameTimelineEvent_PresentType_entries_by_number[] = {
  5, // 0 -> PRESENT_UNSPECIFIED
  3, // 1 -> PRESENT_ON_TIME
  2, // 2 -> PRESENT_LATE
  1, // 3 -> PRESENT_EARLY
  0, // 4 -> PRESENT_DROPPED
  4, // 5 -> PRESENT_UNKNOWN
};

const std::string& FrameTimelineEvent_PresentType_Name(
    FrameTimelineEvent_PresentType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameTimelineEvent_PresentType_entries,
          FrameTimelineEvent_PresentType_entries_by_number,
          6, FrameTimelineEvent_PresentType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameTimelineEvent_PresentType_entries,
      FrameTimelineEvent_PresentType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameTimelineEvent_PresentType_strings[idx].get();
}
bool FrameTimelineEvent_PresentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FrameTimelineEvent_PresentType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameTimelineEvent_PresentType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<FrameTimelineEvent_PresentType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_UNSPECIFIED;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_ON_TIME;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_LATE;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_EARLY;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_DROPPED;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_UNKNOWN;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PresentType_MIN;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PresentType_MAX;
constexpr int FrameTimelineEvent::PresentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool FrameTimelineEvent_PredictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FrameTimelineEvent_PredictionType_strings[4] = {};

static const char FrameTimelineEvent_PredictionType_names[] =
  "PREDICTION_EXPIRED"
  "PREDICTION_UNKNOWN"
  "PREDICTION_UNSPECIFIED"
  "PREDICTION_VALID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FrameTimelineEvent_PredictionType_entries[] = {
  { {FrameTimelineEvent_PredictionType_names + 0, 18}, 2 },
  { {FrameTimelineEvent_PredictionType_names + 18, 18}, 3 },
  { {FrameTimelineEvent_PredictionType_names + 36, 22}, 0 },
  { {FrameTimelineEvent_PredictionType_names + 58, 16}, 1 },
};

static const int FrameTimelineEvent_PredictionType_entries_by_number[] = {
  2, // 0 -> PREDICTION_UNSPECIFIED
  3, // 1 -> PREDICTION_VALID
  0, // 2 -> PREDICTION_EXPIRED
  1, // 3 -> PREDICTION_UNKNOWN
};

const std::string& FrameTimelineEvent_PredictionType_Name(
    FrameTimelineEvent_PredictionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FrameTimelineEvent_PredictionType_entries,
          FrameTimelineEvent_PredictionType_entries_by_number,
          4, FrameTimelineEvent_PredictionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FrameTimelineEvent_PredictionType_entries,
      FrameTimelineEvent_PredictionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FrameTimelineEvent_PredictionType_strings[idx].get();
}
bool FrameTimelineEvent_PredictionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FrameTimelineEvent_PredictionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FrameTimelineEvent_PredictionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<FrameTimelineEvent_PredictionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_UNSPECIFIED;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_VALID;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_EXPIRED;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_UNKNOWN;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PredictionType_MIN;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PredictionType_MAX;
constexpr int FrameTimelineEvent::PredictionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FrameTimelineEvent_ExpectedSurfaceFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ExpectedSurfaceFrameStart>()._impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_frame_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
}
FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FrameTimelineEvent_ExpectedSurfaceFrameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_){}
    , decltype(_impl_.cookie_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.display_frame_token_){}
    , decltype(_impl_.pid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_layer_name()) {
    _this->_impl_.layer_name_.Set(from._internal_layer_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cookie_, &from._impl_.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
}

inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_){}
    , decltype(_impl_.cookie_){int64_t{0}}
    , decltype(_impl_.token_){int64_t{0}}
    , decltype(_impl_.display_frame_token_){int64_t{0}}
    , decltype(_impl_.pid_){0}
  };
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameTimelineEvent_ExpectedSurfaceFrameStart::~FrameTimelineEvent_ExpectedSurfaceFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_name_.Destroy();
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.layer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pid_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.pid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameTimelineEvent_ExpectedSurfaceFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 display_frame_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_display_frame_token(&has_bits);
          _impl_.display_frame_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string layer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_layer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimelineEvent_ExpectedSurfaceFrameStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  // optional int64 display_frame_token = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_display_frame_token(), target);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_pid(), target);
  }

  // optional string layer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_layer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  return target;
}

size_t FrameTimelineEvent_ExpectedSurfaceFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string layer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer_name());
    }

    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_token());
    }

    // optional int64 display_frame_token = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_display_frame_token());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameTimelineEvent_ExpectedSurfaceFrameStart*>(
      &from));
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
  FrameTimelineEvent_ExpectedSurfaceFrameStart* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_layer_name(from._internal_layer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.display_frame_token_ = from._impl_.display_frame_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::CopyFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ExpectedSurfaceFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::InternalSwap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layer_name_, lhs_arena,
      &other->_impl_.layer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.pid_)
      + sizeof(FrameTimelineEvent_ExpectedSurfaceFrameStart::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

std::string FrameTimelineEvent_ExpectedSurfaceFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart";
}


// ===================================================================

class FrameTimelineEvent_ActualSurfaceFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ActualSurfaceFrameStart>()._impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_frame_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_present_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_on_time_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gpu_composition(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_jank_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_prediction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_jank_severity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
}
FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(const FrameTimelineEvent_ActualSurfaceFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FrameTimelineEvent_ActualSurfaceFrameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_){}
    , decltype(_impl_.cookie_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.display_frame_token_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.present_type_){}
    , decltype(_impl_.on_time_finish_){}
    , decltype(_impl_.gpu_composition_){}
    , decltype(_impl_.is_buffer_){}
    , decltype(_impl_.jank_type_){}
    , decltype(_impl_.prediction_type_){}
    , decltype(_impl_.jank_severity_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_layer_name()) {
    _this->_impl_.layer_name_.Set(from._internal_layer_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cookie_, &from._impl_.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.jank_severity_type_) -
    reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.jank_severity_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
}

inline void FrameTimelineEvent_ActualSurfaceFrameStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_){}
    , decltype(_impl_.cookie_){int64_t{0}}
    , decltype(_impl_.token_){int64_t{0}}
    , decltype(_impl_.display_frame_token_){int64_t{0}}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.present_type_){0}
    , decltype(_impl_.on_time_finish_){false}
    , decltype(_impl_.gpu_composition_){false}
    , decltype(_impl_.is_buffer_){false}
    , decltype(_impl_.jank_type_){0}
    , decltype(_impl_.prediction_type_){0}
    , decltype(_impl_.jank_severity_type_){0}
  };
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameTimelineEvent_ActualSurfaceFrameStart::~FrameTimelineEvent_ActualSurfaceFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ActualSurfaceFrameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_name_.Destroy();
}

void FrameTimelineEvent_ActualSurfaceFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ActualSurfaceFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.layer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gpu_composition_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.gpu_composition_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.is_buffer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.jank_severity_type_) -
        reinterpret_cast<char*>(&_impl_.is_buffer_)) + sizeof(_impl_.jank_severity_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameTimelineEvent_ActualSurfaceFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 display_frame_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_display_frame_token(&has_bits);
          _impl_.display_frame_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string layer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_layer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(val))) {
            _internal_set_present_type(static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool on_time_finish = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_on_time_finish(&has_bits);
          _impl_.on_time_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gpu_composition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_gpu_composition(&has_bits);
          _impl_.gpu_composition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 jank_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_jank_type(&has_bits);
          _impl_.jank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(val))) {
            _internal_set_prediction_type(static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_buffer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_buffer(&has_bits);
          _impl_.is_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.JankSeverityType jank_severity_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_JankSeverityType_IsValid(val))) {
            _internal_set_jank_severity_type(static_cast<::perfetto::protos::FrameTimelineEvent_JankSeverityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimelineEvent_ActualSurfaceFrameStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  // optional int64 display_frame_token = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_display_frame_token(), target);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_pid(), target);
  }

  // optional string layer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_layer_name(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_present_type(), target);
  }

  // optional bool on_time_finish = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_on_time_finish(), target);
  }

  // optional bool gpu_composition = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_gpu_composition(), target);
  }

  // optional int32 jank_type = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_jank_type(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_prediction_type(), target);
  }

  // optional bool is_buffer = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_buffer(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.JankSeverityType jank_severity_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_jank_severity_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  return target;
}

size_t FrameTimelineEvent_ActualSurfaceFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string layer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer_name());
    }

    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_token());
    }

    // optional int64 display_frame_token = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_display_frame_token());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_present_type());
    }

    // optional bool on_time_finish = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool gpu_composition = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_buffer = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 jank_type = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_jank_type());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_prediction_type());
    }

    // optional .perfetto.protos.FrameTimelineEvent.JankSeverityType jank_severity_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_jank_severity_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ActualSurfaceFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameTimelineEvent_ActualSurfaceFrameStart*>(
      &from));
}

void FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
  FrameTimelineEvent_ActualSurfaceFrameStart* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_layer_name(from._internal_layer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.display_frame_token_ = from._impl_.display_frame_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.present_type_ = from._impl_.present_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.on_time_finish_ = from._impl_.on_time_finish_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.gpu_composition_ = from._impl_.gpu_composition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_buffer_ = from._impl_.is_buffer_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.jank_type_ = from._impl_.jank_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.prediction_type_ = from._impl_.prediction_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.jank_severity_type_ = from._impl_.jank_severity_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameTimelineEvent_ActualSurfaceFrameStart::CopyFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ActualSurfaceFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ActualSurfaceFrameStart::InternalSwap(FrameTimelineEvent_ActualSurfaceFrameStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layer_name_, lhs_arena,
      &other->_impl_.layer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.jank_severity_type_)
      + sizeof(FrameTimelineEvent_ActualSurfaceFrameStart::_impl_.jank_severity_type_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

std::string FrameTimelineEvent_ActualSurfaceFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart";
}


// ===================================================================

class FrameTimelineEvent_ExpectedDisplayFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ExpectedDisplayFrameStart>()._impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
}
FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(const FrameTimelineEvent_ExpectedDisplayFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FrameTimelineEvent_ExpectedDisplayFrameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.pid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.cookie_, &from._impl_.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
}

inline void FrameTimelineEvent_ExpectedDisplayFrameStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_){int64_t{0}}
    , decltype(_impl_.token_){int64_t{0}}
    , decltype(_impl_.pid_){0}
  };
}

FrameTimelineEvent_ExpectedDisplayFrameStart::~FrameTimelineEvent_ExpectedDisplayFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ExpectedDisplayFrameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pid_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.pid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameTimelineEvent_ExpectedDisplayFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimelineEvent_ExpectedDisplayFrameStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  return target;
}

size_t FrameTimelineEvent_ExpectedDisplayFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_token());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameTimelineEvent_ExpectedDisplayFrameStart*>(
      &from));
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
  FrameTimelineEvent_ExpectedDisplayFrameStart* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::CopyFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ExpectedDisplayFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::InternalSwap(FrameTimelineEvent_ExpectedDisplayFrameStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_.pid_)
      + sizeof(FrameTimelineEvent_ExpectedDisplayFrameStart::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

std::string FrameTimelineEvent_ExpectedDisplayFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart";
}


// ===================================================================

class FrameTimelineEvent_ActualDisplayFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ActualDisplayFrameStart>()._impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_present_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_on_time_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gpu_composition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jank_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prediction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_jank_severity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
}
FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(const FrameTimelineEvent_ActualDisplayFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FrameTimelineEvent_ActualDisplayFrameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.present_type_){}
    , decltype(_impl_.on_time_finish_){}
    , decltype(_impl_.gpu_composition_){}
    , decltype(_impl_.jank_type_){}
    , decltype(_impl_.prediction_type_){}
    , decltype(_impl_.jank_severity_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.cookie_, &from._impl_.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.jank_severity_type_) -
    reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.jank_severity_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
}

inline void FrameTimelineEvent_ActualDisplayFrameStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_){int64_t{0}}
    , decltype(_impl_.token_){int64_t{0}}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.present_type_){0}
    , decltype(_impl_.on_time_finish_){false}
    , decltype(_impl_.gpu_composition_){false}
    , decltype(_impl_.jank_type_){0}
    , decltype(_impl_.prediction_type_){0}
    , decltype(_impl_.jank_severity_type_){0}
  };
}

FrameTimelineEvent_ActualDisplayFrameStart::~FrameTimelineEvent_ActualDisplayFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ActualDisplayFrameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameTimelineEvent_ActualDisplayFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ActualDisplayFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.prediction_type_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.prediction_type_));
  }
  _impl_.jank_severity_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameTimelineEvent_ActualDisplayFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(val))) {
            _internal_set_present_type(static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool on_time_finish = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_on_time_finish(&has_bits);
          _impl_.on_time_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gpu_composition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_gpu_composition(&has_bits);
          _impl_.gpu_composition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 jank_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_jank_type(&has_bits);
          _impl_.jank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(val))) {
            _internal_set_prediction_type(static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.JankSeverityType jank_severity_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_JankSeverityType_IsValid(val))) {
            _internal_set_jank_severity_type(static_cast<::perfetto::protos::FrameTimelineEvent_JankSeverityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimelineEvent_ActualDisplayFrameStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pid(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_present_type(), target);
  }

  // optional bool on_time_finish = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_on_time_finish(), target);
  }

  // optional bool gpu_composition = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_gpu_composition(), target);
  }

  // optional int32 jank_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_jank_type(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_prediction_type(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.JankSeverityType jank_severity_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_jank_severity_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  return target;
}

size_t FrameTimelineEvent_ActualDisplayFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_token());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_present_type());
    }

    // optional bool on_time_finish = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool gpu_composition = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 jank_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_jank_type());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_prediction_type());
    }

  }
  // optional .perfetto.protos.FrameTimelineEvent.JankSeverityType jank_severity_type = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_jank_severity_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_ActualDisplayFrameStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameTimelineEvent_ActualDisplayFrameStart*>(
      &from));
}

void FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from) {
  FrameTimelineEvent_ActualDisplayFrameStart* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.present_type_ = from._impl_.present_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.on_time_finish_ = from._impl_.on_time_finish_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gpu_composition_ = from._impl_.gpu_composition_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.jank_type_ = from._impl_.jank_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.prediction_type_ = from._impl_.prediction_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_jank_severity_type(from._internal_jank_severity_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameTimelineEvent_ActualDisplayFrameStart::CopyFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ActualDisplayFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ActualDisplayFrameStart::InternalSwap(FrameTimelineEvent_ActualDisplayFrameStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualDisplayFrameStart, _impl_.jank_severity_type_)
      + sizeof(FrameTimelineEvent_ActualDisplayFrameStart::_impl_.jank_severity_type_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualDisplayFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

std::string FrameTimelineEvent_ActualDisplayFrameStart::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart";
}


// ===================================================================

class FrameTimelineEvent_FrameEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_FrameEnd>()._impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
}
FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(const FrameTimelineEvent_FrameEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FrameTimelineEvent_FrameEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.cookie_ = from._impl_.cookie_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
}

inline void FrameTimelineEvent_FrameEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_){int64_t{0}}
  };
}

FrameTimelineEvent_FrameEnd::~FrameTimelineEvent_FrameEnd() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_FrameEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameTimelineEvent_FrameEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_FrameEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cookie_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameTimelineEvent_FrameEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimelineEvent_FrameEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.FrameEnd)
  return target;
}

size_t FrameTimelineEvent_FrameEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 cookie = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cookie());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent_FrameEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameTimelineEvent_FrameEnd*>(
      &from));
}

void FrameTimelineEvent_FrameEnd::MergeFrom(const FrameTimelineEvent_FrameEnd& from) {
  FrameTimelineEvent_FrameEnd* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cookie()) {
    _this->_internal_set_cookie(from._internal_cookie());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameTimelineEvent_FrameEnd::CopyFrom(const FrameTimelineEvent_FrameEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_FrameEnd::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_FrameEnd::InternalSwap(FrameTimelineEvent_FrameEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cookie_, other->_impl_.cookie_);
}

std::string FrameTimelineEvent_FrameEnd::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent.FrameEnd";
}


// ===================================================================

class FrameTimelineEvent::_Internal {
 public:
  static const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& expected_display_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& actual_display_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& expected_surface_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& actual_surface_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_FrameEnd& frame_end(const FrameTimelineEvent* msg);
};

const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart&
FrameTimelineEvent::_Internal::expected_display_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.expected_display_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart&
FrameTimelineEvent::_Internal::actual_display_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.actual_display_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart&
FrameTimelineEvent::_Internal::expected_surface_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.expected_surface_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart&
FrameTimelineEvent::_Internal::actual_surface_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.actual_surface_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_FrameEnd&
FrameTimelineEvent::_Internal::frame_end(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.frame_end_;
}
void FrameTimelineEvent::set_allocated_expected_display_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (expected_display_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expected_display_frame_start);
    if (message_arena != submessage_arena) {
      expected_display_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_display_frame_start, submessage_arena);
    }
    set_has_expected_display_frame_start();
    _impl_.event_.expected_display_frame_start_ = expected_display_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
}
void FrameTimelineEvent::set_allocated_actual_display_frame_start(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (actual_display_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actual_display_frame_start);
    if (message_arena != submessage_arena) {
      actual_display_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actual_display_frame_start, submessage_arena);
    }
    set_has_actual_display_frame_start();
    _impl_.event_.actual_display_frame_start_ = actual_display_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
}
void FrameTimelineEvent::set_allocated_expected_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (expected_surface_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expected_surface_frame_start);
    if (message_arena != submessage_arena) {
      expected_surface_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_surface_frame_start, submessage_arena);
    }
    set_has_expected_surface_frame_start();
    _impl_.event_.expected_surface_frame_start_ = expected_surface_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
}
void FrameTimelineEvent::set_allocated_actual_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (actual_surface_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actual_surface_frame_start);
    if (message_arena != submessage_arena) {
      actual_surface_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actual_surface_frame_start, submessage_arena);
    }
    set_has_actual_surface_frame_start();
    _impl_.event_.actual_surface_frame_start_ = actual_surface_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
}
void FrameTimelineEvent::set_allocated_frame_end(::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (frame_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(frame_end);
    if (message_arena != submessage_arena) {
      frame_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_end, submessage_arena);
    }
    set_has_frame_end();
    _impl_.event_.frame_end_ = frame_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.frame_end)
}
FrameTimelineEvent::FrameTimelineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent)
}
FrameTimelineEvent::FrameTimelineEvent(const FrameTimelineEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FrameTimelineEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kExpectedDisplayFrameStart: {
      _this->_internal_mutable_expected_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(
          from._internal_expected_display_frame_start());
      break;
    }
    case kActualDisplayFrameStart: {
      _this->_internal_mutable_actual_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(
          from._internal_actual_display_frame_start());
      break;
    }
    case kExpectedSurfaceFrameStart: {
      _this->_internal_mutable_expected_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(
          from._internal_expected_surface_frame_start());
      break;
    }
    case kActualSurfaceFrameStart: {
      _this->_internal_mutable_actual_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(
          from._internal_actual_surface_frame_start());
      break;
    }
    case kFrameEnd: {
      _this->_internal_mutable_frame_end()->::perfetto::protos::FrameTimelineEvent_FrameEnd::MergeFrom(
          from._internal_frame_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent)
}

inline void FrameTimelineEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

FrameTimelineEvent::~FrameTimelineEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void FrameTimelineEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.FrameTimelineEvent)
  switch (event_case()) {
    case kExpectedDisplayFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.expected_display_frame_start_;
      }
      break;
    }
    case kActualDisplayFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.actual_display_frame_start_;
      }
      break;
    }
    case kExpectedSurfaceFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.expected_surface_frame_start_;
      }
      break;
    }
    case kActualSurfaceFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.actual_surface_frame_start_;
      }
      break;
    }
    case kFrameEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.frame_end_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void FrameTimelineEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameTimelineEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_display_frame_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actual_display_frame_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_surface_frame_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_actual_surface_frame_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimelineEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kExpectedDisplayFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::expected_display_frame_start(this),
          _Internal::expected_display_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kActualDisplayFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::actual_display_frame_start(this),
          _Internal::actual_display_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kExpectedSurfaceFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::expected_surface_frame_start(this),
          _Internal::expected_surface_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kActualSurfaceFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::actual_surface_frame_start(this),
          _Internal::actual_surface_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kFrameEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::frame_end(this),
          _Internal::frame_end(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent)
  return target;
}

size_t FrameTimelineEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
    case kExpectedDisplayFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.expected_display_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
    case kActualDisplayFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.actual_display_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
    case kExpectedSurfaceFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.expected_surface_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
    case kActualSurfaceFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.actual_surface_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
    case kFrameEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.frame_end_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimelineEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FrameTimelineEvent*>(
      &from));
}

void FrameTimelineEvent::MergeFrom(const FrameTimelineEvent& from) {
  FrameTimelineEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kExpectedDisplayFrameStart: {
      _this->_internal_mutable_expected_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(
          from._internal_expected_display_frame_start());
      break;
    }
    case kActualDisplayFrameStart: {
      _this->_internal_mutable_actual_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(
          from._internal_actual_display_frame_start());
      break;
    }
    case kExpectedSurfaceFrameStart: {
      _this->_internal_mutable_expected_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(
          from._internal_expected_surface_frame_start());
      break;
    }
    case kActualSurfaceFrameStart: {
      _this->_internal_mutable_actual_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(
          from._internal_actual_surface_frame_start());
      break;
    }
    case kFrameEnd: {
      _this->_internal_mutable_frame_end()->::perfetto::protos::FrameTimelineEvent_FrameEnd::MergeFrom(
          from._internal_frame_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FrameTimelineEvent::CopyFrom(const FrameTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent::IsInitialized() const {
  return true;
}

void FrameTimelineEvent::InternalSwap(FrameTimelineEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string FrameTimelineEvent::GetTypeName() const {
  return "perfetto.protos.FrameTimelineEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_FrameEnd*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
