// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INSETSANIMATIONCONTROLIMPL_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INSETSANIMATIONCONTROLIMPL_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"


namespace perfetto {
namespace protos {
namespace pbzero {

class InsetsAnimationControlImplProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/8, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InsetsAnimationControlImplProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InsetsAnimationControlImplProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InsetsAnimationControlImplProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_is_cancelled() const { return at<1>().valid(); }
  bool is_cancelled() const { return at<1>().as_bool(); }
  bool has_is_finished() const { return at<2>().valid(); }
  bool is_finished() const { return at<2>().as_bool(); }
  bool has_tmp_matrix() const { return at<3>().valid(); }
  ::protozero::ConstChars tmp_matrix() const { return at<3>().as_string(); }
  bool has_pending_insets() const { return at<4>().valid(); }
  ::protozero::ConstChars pending_insets() const { return at<4>().as_string(); }
  bool has_pending_fraction() const { return at<5>().valid(); }
  float pending_fraction() const { return at<5>().as_float(); }
  bool has_shown_on_finish() const { return at<6>().valid(); }
  bool shown_on_finish() const { return at<6>().as_bool(); }
  bool has_current_alpha() const { return at<7>().valid(); }
  float current_alpha() const { return at<7>().as_float(); }
  bool has_pending_alpha() const { return at<8>().valid(); }
  float pending_alpha() const { return at<8>().as_float(); }
};

class InsetsAnimationControlImplProto : public ::protozero::Message {
 public:
  using Decoder = InsetsAnimationControlImplProto_Decoder;
  enum : int32_t {
    kIsCancelledFieldNumber = 1,
    kIsFinishedFieldNumber = 2,
    kTmpMatrixFieldNumber = 3,
    kPendingInsetsFieldNumber = 4,
    kPendingFractionFieldNumber = 5,
    kShownOnFinishFieldNumber = 6,
    kCurrentAlphaFieldNumber = 7,
    kPendingAlphaFieldNumber = 8,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InsetsAnimationControlImplProto"; }


  using FieldMetadata_IsCancelled =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_IsCancelled kIsCancelled{};
  void set_is_cancelled(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsCancelled::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsFinished =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_IsFinished kIsFinished{};
  void set_is_finished(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsFinished::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TmpMatrix =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_TmpMatrix kTmpMatrix{};
  void set_tmp_matrix(const char* data, size_t size) {
    AppendBytes(FieldMetadata_TmpMatrix::kFieldId, data, size);
  }
  void set_tmp_matrix(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_TmpMatrix::kFieldId, chars.data, chars.size);
  }
  void set_tmp_matrix(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_TmpMatrix::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PendingInsets =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_PendingInsets kPendingInsets{};
  void set_pending_insets(const char* data, size_t size) {
    AppendBytes(FieldMetadata_PendingInsets::kFieldId, data, size);
  }
  void set_pending_insets(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_PendingInsets::kFieldId, chars.data, chars.size);
  }
  void set_pending_insets(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_PendingInsets::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PendingFraction =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_PendingFraction kPendingFraction{};
  void set_pending_fraction(float value) {
    static constexpr uint32_t field_id = FieldMetadata_PendingFraction::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ShownOnFinish =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_ShownOnFinish kShownOnFinish{};
  void set_shown_on_finish(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ShownOnFinish::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CurrentAlpha =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_CurrentAlpha kCurrentAlpha{};
  void set_current_alpha(float value) {
    static constexpr uint32_t field_id = FieldMetadata_CurrentAlpha::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PendingAlpha =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      InsetsAnimationControlImplProto>;

  static constexpr FieldMetadata_PendingAlpha kPendingAlpha{};
  void set_pending_alpha(float value) {
    static constexpr uint32_t field_id = FieldMetadata_PendingAlpha::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
