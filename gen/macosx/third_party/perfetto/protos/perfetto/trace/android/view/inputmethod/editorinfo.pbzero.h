// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INPUTMETHOD_EDITORINFO_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INPUTMETHOD_EDITORINFO_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"


namespace perfetto {
namespace protos {
namespace pbzero {

class EditorInfoProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  EditorInfoProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit EditorInfoProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit EditorInfoProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_input_type() const { return at<1>().valid(); }
  int32_t input_type() const { return at<1>().as_int32(); }
  bool has_ime_options() const { return at<2>().valid(); }
  int32_t ime_options() const { return at<2>().as_int32(); }
  bool has_private_ime_options() const { return at<3>().valid(); }
  ::protozero::ConstChars private_ime_options() const { return at<3>().as_string(); }
  bool has_package_name() const { return at<4>().valid(); }
  ::protozero::ConstChars package_name() const { return at<4>().as_string(); }
  bool has_field_id() const { return at<5>().valid(); }
  int32_t field_id() const { return at<5>().as_int32(); }
  bool has_target_input_method_user_id() const { return at<6>().valid(); }
  int32_t target_input_method_user_id() const { return at<6>().as_int32(); }
};

class EditorInfoProto : public ::protozero::Message {
 public:
  using Decoder = EditorInfoProto_Decoder;
  enum : int32_t {
    kInputTypeFieldNumber = 1,
    kImeOptionsFieldNumber = 2,
    kPrivateImeOptionsFieldNumber = 3,
    kPackageNameFieldNumber = 4,
    kFieldIdFieldNumber = 5,
    kTargetInputMethodUserIdFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.EditorInfoProto"; }


  using FieldMetadata_InputType =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      EditorInfoProto>;

  static constexpr FieldMetadata_InputType kInputType{};
  void set_input_type(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_InputType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ImeOptions =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      EditorInfoProto>;

  static constexpr FieldMetadata_ImeOptions kImeOptions{};
  void set_ime_options(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ImeOptions::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PrivateImeOptions =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      EditorInfoProto>;

  static constexpr FieldMetadata_PrivateImeOptions kPrivateImeOptions{};
  void set_private_ime_options(const char* data, size_t size) {
    AppendBytes(FieldMetadata_PrivateImeOptions::kFieldId, data, size);
  }
  void set_private_ime_options(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_PrivateImeOptions::kFieldId, chars.data, chars.size);
  }
  void set_private_ime_options(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_PrivateImeOptions::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PackageName =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      EditorInfoProto>;

  static constexpr FieldMetadata_PackageName kPackageName{};
  void set_package_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_PackageName::kFieldId, data, size);
  }
  void set_package_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_PackageName::kFieldId, chars.data, chars.size);
  }
  void set_package_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_PackageName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FieldId =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      EditorInfoProto>;

  static constexpr FieldMetadata_FieldId kFieldId{};
  void set_field_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FieldId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TargetInputMethodUserId =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      EditorInfoProto>;

  static constexpr FieldMetadata_TargetInputMethodUserId kTargetInputMethodUserId{};
  void set_target_input_method_user_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TargetInputMethodUserId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
