// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_DISPLAYCUTOUT_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_DISPLAYCUTOUT_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class RectProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class DisplayCutoutProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/8, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  DisplayCutoutProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit DisplayCutoutProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit DisplayCutoutProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_insets() const { return at<1>().valid(); }
  ::protozero::ConstBytes insets() const { return at<1>().as_bytes(); }
  bool has_bound_left() const { return at<3>().valid(); }
  ::protozero::ConstBytes bound_left() const { return at<3>().as_bytes(); }
  bool has_bound_top() const { return at<4>().valid(); }
  ::protozero::ConstBytes bound_top() const { return at<4>().as_bytes(); }
  bool has_bound_right() const { return at<5>().valid(); }
  ::protozero::ConstBytes bound_right() const { return at<5>().as_bytes(); }
  bool has_bound_bottom() const { return at<6>().valid(); }
  ::protozero::ConstBytes bound_bottom() const { return at<6>().as_bytes(); }
  bool has_waterfall_insets() const { return at<7>().valid(); }
  ::protozero::ConstBytes waterfall_insets() const { return at<7>().as_bytes(); }
  bool has_side_overrides() const { return at<8>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> side_overrides() const { return GetRepeated<int32_t>(8); }
};

class DisplayCutoutProto : public ::protozero::Message {
 public:
  using Decoder = DisplayCutoutProto_Decoder;
  enum : int32_t {
    kInsetsFieldNumber = 1,
    kBoundLeftFieldNumber = 3,
    kBoundTopFieldNumber = 4,
    kBoundRightFieldNumber = 5,
    kBoundBottomFieldNumber = 6,
    kWaterfallInsetsFieldNumber = 7,
    kSideOverridesFieldNumber = 8,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.DisplayCutoutProto"; }


  using FieldMetadata_Insets =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayCutoutProto>;

  static constexpr FieldMetadata_Insets kInsets{};
  template <typename T = RectProto> T* set_insets() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_BoundLeft =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayCutoutProto>;

  static constexpr FieldMetadata_BoundLeft kBoundLeft{};
  template <typename T = RectProto> T* set_bound_left() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_BoundTop =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayCutoutProto>;

  static constexpr FieldMetadata_BoundTop kBoundTop{};
  template <typename T = RectProto> T* set_bound_top() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_BoundRight =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayCutoutProto>;

  static constexpr FieldMetadata_BoundRight kBoundRight{};
  template <typename T = RectProto> T* set_bound_right() {
    return BeginNestedMessage<T>(5);
  }


  using FieldMetadata_BoundBottom =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayCutoutProto>;

  static constexpr FieldMetadata_BoundBottom kBoundBottom{};
  template <typename T = RectProto> T* set_bound_bottom() {
    return BeginNestedMessage<T>(6);
  }


  using FieldMetadata_WaterfallInsets =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      DisplayCutoutProto>;

  static constexpr FieldMetadata_WaterfallInsets kWaterfallInsets{};
  template <typename T = RectProto> T* set_waterfall_insets() {
    return BeginNestedMessage<T>(7);
  }


  using FieldMetadata_SideOverrides =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      DisplayCutoutProto>;

  static constexpr FieldMetadata_SideOverrides kSideOverrides{};
  void add_side_overrides(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SideOverrides::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
