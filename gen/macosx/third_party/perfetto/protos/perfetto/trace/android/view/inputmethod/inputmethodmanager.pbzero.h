// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INPUTMETHOD_INPUTMETHODMANAGER_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INPUTMETHOD_INPUTMETHODMANAGER_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"


namespace perfetto {
namespace protos {
namespace pbzero {

class InputMethodManagerProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InputMethodManagerProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InputMethodManagerProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InputMethodManagerProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_cur_id() const { return at<1>().valid(); }
  ::protozero::ConstChars cur_id() const { return at<1>().as_string(); }
  bool has_fullscreen_mode() const { return at<2>().valid(); }
  bool fullscreen_mode() const { return at<2>().as_bool(); }
  bool has_display_id() const { return at<3>().valid(); }
  int32_t display_id() const { return at<3>().as_int32(); }
  bool has_active() const { return at<4>().valid(); }
  bool active() const { return at<4>().as_bool(); }
  bool has_served_connecting() const { return at<5>().valid(); }
  bool served_connecting() const { return at<5>().as_bool(); }
  bool has_served_view() const { return at<6>().valid(); }
  ::protozero::ConstChars served_view() const { return at<6>().as_string(); }
  bool has_next_served_view() const { return at<7>().valid(); }
  ::protozero::ConstChars next_served_view() const { return at<7>().as_string(); }
};

class InputMethodManagerProto : public ::protozero::Message {
 public:
  using Decoder = InputMethodManagerProto_Decoder;
  enum : int32_t {
    kCurIdFieldNumber = 1,
    kFullscreenModeFieldNumber = 2,
    kDisplayIdFieldNumber = 3,
    kActiveFieldNumber = 4,
    kServedConnectingFieldNumber = 5,
    kServedViewFieldNumber = 6,
    kNextServedViewFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InputMethodManagerProto"; }


  using FieldMetadata_CurId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodManagerProto>;

  static constexpr FieldMetadata_CurId kCurId{};
  void set_cur_id(const char* data, size_t size) {
    AppendBytes(FieldMetadata_CurId::kFieldId, data, size);
  }
  void set_cur_id(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_CurId::kFieldId, chars.data, chars.size);
  }
  void set_cur_id(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_CurId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FullscreenMode =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodManagerProto>;

  static constexpr FieldMetadata_FullscreenMode kFullscreenMode{};
  void set_fullscreen_mode(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_FullscreenMode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DisplayId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodManagerProto>;

  static constexpr FieldMetadata_DisplayId kDisplayId{};
  void set_display_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DisplayId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Active =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodManagerProto>;

  static constexpr FieldMetadata_Active kActive{};
  void set_active(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_Active::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ServedConnecting =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodManagerProto>;

  static constexpr FieldMetadata_ServedConnecting kServedConnecting{};
  void set_served_connecting(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ServedConnecting::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ServedView =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodManagerProto>;

  static constexpr FieldMetadata_ServedView kServedView{};
  void set_served_view(const char* data, size_t size) {
    AppendBytes(FieldMetadata_ServedView::kFieldId, data, size);
  }
  void set_served_view(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_ServedView::kFieldId, chars.data, chars.size);
  }
  void set_served_view(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_ServedView::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NextServedView =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodManagerProto>;

  static constexpr FieldMetadata_NextServedView kNextServedView{};
  void set_next_served_view(const char* data, size_t size) {
    AppendBytes(FieldMetadata_NextServedView::kFieldId, data, size);
  }
  void set_next_served_view(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_NextServedView::kFieldId, chars.data, chars.size);
  }
  void set_next_served_view(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_NextServedView::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
