// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INSETSSOURCECONSUMER_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INSETSSOURCECONSUMER_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class InsetsSourceControlProto;
class RectProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class InsetsSourceConsumerProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/8, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InsetsSourceConsumerProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InsetsSourceConsumerProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InsetsSourceConsumerProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_internal_insets_type() const { return at<1>().valid(); }
  ::protozero::ConstChars internal_insets_type() const { return at<1>().as_string(); }
  bool has_has_window_focus() const { return at<2>().valid(); }
  bool has_window_focus() const { return at<2>().as_bool(); }
  bool has_is_requested_visible() const { return at<3>().valid(); }
  bool is_requested_visible() const { return at<3>().as_bool(); }
  bool has_source_control() const { return at<4>().valid(); }
  ::protozero::ConstBytes source_control() const { return at<4>().as_bytes(); }
  bool has_pending_frame() const { return at<5>().valid(); }
  ::protozero::ConstBytes pending_frame() const { return at<5>().as_bytes(); }
  bool has_pending_visible_frame() const { return at<6>().valid(); }
  ::protozero::ConstBytes pending_visible_frame() const { return at<6>().as_bytes(); }
  bool has_animation_state() const { return at<7>().valid(); }
  int32_t animation_state() const { return at<7>().as_int32(); }
  bool has_type_number() const { return at<8>().valid(); }
  int32_t type_number() const { return at<8>().as_int32(); }
};

class InsetsSourceConsumerProto : public ::protozero::Message {
 public:
  using Decoder = InsetsSourceConsumerProto_Decoder;
  enum : int32_t {
    kInternalInsetsTypeFieldNumber = 1,
    kHasWindowFocusFieldNumber = 2,
    kIsRequestedVisibleFieldNumber = 3,
    kSourceControlFieldNumber = 4,
    kPendingFrameFieldNumber = 5,
    kPendingVisibleFrameFieldNumber = 6,
    kAnimationStateFieldNumber = 7,
    kTypeNumberFieldNumber = 8,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InsetsSourceConsumerProto"; }


  using FieldMetadata_InternalInsetsType =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_InternalInsetsType kInternalInsetsType{};
  void set_internal_insets_type(const char* data, size_t size) {
    AppendBytes(FieldMetadata_InternalInsetsType::kFieldId, data, size);
  }
  void set_internal_insets_type(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_InternalInsetsType::kFieldId, chars.data, chars.size);
  }
  void set_internal_insets_type(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_InternalInsetsType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasWindowFocus =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_HasWindowFocus kHasWindowFocus{};
  void set_has_window_focus(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasWindowFocus::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsRequestedVisible =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_IsRequestedVisible kIsRequestedVisible{};
  void set_is_requested_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsRequestedVisible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceControl =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InsetsSourceControlProto,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_SourceControl kSourceControl{};
  template <typename T = InsetsSourceControlProto> T* set_source_control() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_PendingFrame =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_PendingFrame kPendingFrame{};
  template <typename T = RectProto> T* set_pending_frame() {
    return BeginNestedMessage<T>(5);
  }


  using FieldMetadata_PendingVisibleFrame =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_PendingVisibleFrame kPendingVisibleFrame{};
  template <typename T = RectProto> T* set_pending_visible_frame() {
    return BeginNestedMessage<T>(6);
  }


  using FieldMetadata_AnimationState =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_AnimationState kAnimationState{};
  void set_animation_state(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_AnimationState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TypeNumber =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InsetsSourceConsumerProto>;

  static constexpr FieldMetadata_TypeNumber kTypeNumber{};
  void set_type_number(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TypeNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
