#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/android_system_property.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

AndroidSystemProperty::AndroidSystemProperty() = default;
AndroidSystemProperty::~AndroidSystemProperty() = default;
AndroidSystemProperty::AndroidSystemProperty(const AndroidSystemProperty&) = default;
AndroidSystemProperty& AndroidSystemProperty::operator=(const AndroidSystemProperty&) = default;
AndroidSystemProperty::AndroidSystemProperty(AndroidSystemProperty&&) noexcept = default;
AndroidSystemProperty& AndroidSystemProperty::operator=(AndroidSystemProperty&&) = default;

bool AndroidSystemProperty::operator==(const AndroidSystemProperty& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(values_, other.values_);
}

int AndroidSystemProperty::values_size() const { return static_cast<int>(values_.size()); }
void AndroidSystemProperty::clear_values() { values_.clear(); }
AndroidSystemProperty_PropertyValue* AndroidSystemProperty::add_values() { values_.emplace_back(); return &values_.back(); }
bool AndroidSystemProperty::ParseFromArray(const void* raw, size_t size) {
  values_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* values */:
        values_.emplace_back();
        values_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidSystemProperty::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidSystemProperty::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidSystemProperty::Serialize(::protozero::Message* msg) const {
  // Field 1: values
  for (auto& it : values_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


AndroidSystemProperty_PropertyValue::AndroidSystemProperty_PropertyValue() = default;
AndroidSystemProperty_PropertyValue::~AndroidSystemProperty_PropertyValue() = default;
AndroidSystemProperty_PropertyValue::AndroidSystemProperty_PropertyValue(const AndroidSystemProperty_PropertyValue&) = default;
AndroidSystemProperty_PropertyValue& AndroidSystemProperty_PropertyValue::operator=(const AndroidSystemProperty_PropertyValue&) = default;
AndroidSystemProperty_PropertyValue::AndroidSystemProperty_PropertyValue(AndroidSystemProperty_PropertyValue&&) noexcept = default;
AndroidSystemProperty_PropertyValue& AndroidSystemProperty_PropertyValue::operator=(AndroidSystemProperty_PropertyValue&&) = default;

bool AndroidSystemProperty_PropertyValue::operator==(const AndroidSystemProperty_PropertyValue& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool AndroidSystemProperty_PropertyValue::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* value */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string AndroidSystemProperty_PropertyValue::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> AndroidSystemProperty_PropertyValue::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void AndroidSystemProperty_PropertyValue::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
