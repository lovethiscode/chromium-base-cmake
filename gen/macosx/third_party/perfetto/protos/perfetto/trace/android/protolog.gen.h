// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PROTOLOG_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PROTOLOG_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ProtoLogViewerConfig;
class ProtoLogViewerConfig_Group;
class ProtoLogViewerConfig_MessageData;
class ProtoLogMessage;
enum ProtoLogLevel : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT ProtoLogViewerConfig : public ::protozero::CppMessageObj {
 public:
  using MessageData = ProtoLogViewerConfig_MessageData;
  using Group = ProtoLogViewerConfig_Group;
  enum FieldNumbers {
    kMessagesFieldNumber = 1,
    kGroupsFieldNumber = 2,
  };

  ProtoLogViewerConfig();
  ~ProtoLogViewerConfig() override;
  ProtoLogViewerConfig(ProtoLogViewerConfig&&) noexcept;
  ProtoLogViewerConfig& operator=(ProtoLogViewerConfig&&);
  ProtoLogViewerConfig(const ProtoLogViewerConfig&);
  ProtoLogViewerConfig& operator=(const ProtoLogViewerConfig&);
  bool operator==(const ProtoLogViewerConfig&) const;
  bool operator!=(const ProtoLogViewerConfig& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<ProtoLogViewerConfig_MessageData>& messages() const { return messages_; }
  std::vector<ProtoLogViewerConfig_MessageData>* mutable_messages() { return &messages_; }
  int messages_size() const;
  void clear_messages();
  ProtoLogViewerConfig_MessageData* add_messages();

  const std::vector<ProtoLogViewerConfig_Group>& groups() const { return groups_; }
  std::vector<ProtoLogViewerConfig_Group>* mutable_groups() { return &groups_; }
  int groups_size() const;
  void clear_groups();
  ProtoLogViewerConfig_Group* add_groups();

 private:
  std::vector<ProtoLogViewerConfig_MessageData> messages_;
  std::vector<ProtoLogViewerConfig_Group> groups_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ProtoLogViewerConfig_Group : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTagFieldNumber = 3,
  };

  ProtoLogViewerConfig_Group();
  ~ProtoLogViewerConfig_Group() override;
  ProtoLogViewerConfig_Group(ProtoLogViewerConfig_Group&&) noexcept;
  ProtoLogViewerConfig_Group& operator=(ProtoLogViewerConfig_Group&&);
  ProtoLogViewerConfig_Group(const ProtoLogViewerConfig_Group&);
  ProtoLogViewerConfig_Group& operator=(const ProtoLogViewerConfig_Group&);
  bool operator==(const ProtoLogViewerConfig_Group&) const;
  bool operator!=(const ProtoLogViewerConfig_Group& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint32_t id() const { return id_; }
  void set_id(uint32_t value) { id_ = value; _has_field_.set(1); }

  bool has_name() const { return _has_field_[2]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(2); }

  bool has_tag() const { return _has_field_[3]; }
  const std::string& tag() const { return tag_; }
  void set_tag(const std::string& value) { tag_ = value; _has_field_.set(3); }

 private:
  uint32_t id_{};
  std::string name_{};
  std::string tag_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ProtoLogViewerConfig_MessageData : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kMessageIdFieldNumber = 1,
    kMessageFieldNumber = 2,
    kLevelFieldNumber = 3,
    kGroupIdFieldNumber = 4,
  };

  ProtoLogViewerConfig_MessageData();
  ~ProtoLogViewerConfig_MessageData() override;
  ProtoLogViewerConfig_MessageData(ProtoLogViewerConfig_MessageData&&) noexcept;
  ProtoLogViewerConfig_MessageData& operator=(ProtoLogViewerConfig_MessageData&&);
  ProtoLogViewerConfig_MessageData(const ProtoLogViewerConfig_MessageData&);
  ProtoLogViewerConfig_MessageData& operator=(const ProtoLogViewerConfig_MessageData&);
  bool operator==(const ProtoLogViewerConfig_MessageData&) const;
  bool operator!=(const ProtoLogViewerConfig_MessageData& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_message_id() const { return _has_field_[1]; }
  uint64_t message_id() const { return message_id_; }
  void set_message_id(uint64_t value) { message_id_ = value; _has_field_.set(1); }

  bool has_message() const { return _has_field_[2]; }
  const std::string& message() const { return message_; }
  void set_message(const std::string& value) { message_ = value; _has_field_.set(2); }

  bool has_level() const { return _has_field_[3]; }
  ProtoLogLevel level() const { return level_; }
  void set_level(ProtoLogLevel value) { level_ = value; _has_field_.set(3); }

  bool has_group_id() const { return _has_field_[4]; }
  uint32_t group_id() const { return group_id_; }
  void set_group_id(uint32_t value) { group_id_ = value; _has_field_.set(4); }

 private:
  uint64_t message_id_{};
  std::string message_{};
  ProtoLogLevel level_{};
  uint32_t group_id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ProtoLogMessage : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kMessageIdFieldNumber = 1,
    kStrParamIidsFieldNumber = 2,
    kSint64ParamsFieldNumber = 3,
    kDoubleParamsFieldNumber = 4,
    kBooleanParamsFieldNumber = 5,
    kStacktraceIidFieldNumber = 6,
  };

  ProtoLogMessage();
  ~ProtoLogMessage() override;
  ProtoLogMessage(ProtoLogMessage&&) noexcept;
  ProtoLogMessage& operator=(ProtoLogMessage&&);
  ProtoLogMessage(const ProtoLogMessage&);
  ProtoLogMessage& operator=(const ProtoLogMessage&);
  bool operator==(const ProtoLogMessage&) const;
  bool operator!=(const ProtoLogMessage& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_message_id() const { return _has_field_[1]; }
  uint64_t message_id() const { return message_id_; }
  void set_message_id(uint64_t value) { message_id_ = value; _has_field_.set(1); }

  const std::vector<uint32_t>& str_param_iids() const { return str_param_iids_; }
  std::vector<uint32_t>* mutable_str_param_iids() { return &str_param_iids_; }
  int str_param_iids_size() const { return static_cast<int>(str_param_iids_.size()); }
  void clear_str_param_iids() { str_param_iids_.clear(); }
  void add_str_param_iids(uint32_t value) { str_param_iids_.emplace_back(value); }
  uint32_t* add_str_param_iids() { str_param_iids_.emplace_back(); return &str_param_iids_.back(); }

  const std::vector<int64_t>& sint64_params() const { return sint64_params_; }
  std::vector<int64_t>* mutable_sint64_params() { return &sint64_params_; }
  int sint64_params_size() const { return static_cast<int>(sint64_params_.size()); }
  void clear_sint64_params() { sint64_params_.clear(); }
  void add_sint64_params(int64_t value) { sint64_params_.emplace_back(value); }
  int64_t* add_sint64_params() { sint64_params_.emplace_back(); return &sint64_params_.back(); }

  const std::vector<double>& double_params() const { return double_params_; }
  std::vector<double>* mutable_double_params() { return &double_params_; }
  int double_params_size() const { return static_cast<int>(double_params_.size()); }
  void clear_double_params() { double_params_.clear(); }
  void add_double_params(double value) { double_params_.emplace_back(value); }
  double* add_double_params() { double_params_.emplace_back(); return &double_params_.back(); }

  const std::vector<int32_t>& boolean_params() const { return boolean_params_; }
  std::vector<int32_t>* mutable_boolean_params() { return &boolean_params_; }
  int boolean_params_size() const { return static_cast<int>(boolean_params_.size()); }
  void clear_boolean_params() { boolean_params_.clear(); }
  void add_boolean_params(int32_t value) { boolean_params_.emplace_back(value); }
  int32_t* add_boolean_params() { boolean_params_.emplace_back(); return &boolean_params_.back(); }

  bool has_stacktrace_iid() const { return _has_field_[6]; }
  uint32_t stacktrace_iid() const { return stacktrace_iid_; }
  void set_stacktrace_iid(uint32_t value) { stacktrace_iid_ = value; _has_field_.set(6); }

 private:
  uint64_t message_id_{};
  std::vector<uint32_t> str_param_iids_;
  std::vector<int64_t> sint64_params_;
  std::vector<double> double_params_;
  std::vector<int32_t> boolean_params_;
  uint32_t stacktrace_iid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PROTOLOG_PROTO_CPP_H_
