// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/camera_event.proto

#include "protos/perfetto/trace/android/camera_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR AndroidCameraFrameEvent_CameraNodeProcessingDetails::AndroidCameraFrameEvent_CameraNodeProcessingDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_id_)*/int64_t{0}
  , /*decltype(_impl_.start_processing_ns_)*/int64_t{0}
  , /*decltype(_impl_.end_processing_ns_)*/int64_t{0}
  , /*decltype(_impl_.scheduling_latency_ns_)*/int64_t{0}} {}
struct AndroidCameraFrameEvent_CameraNodeProcessingDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCameraFrameEvent_CameraNodeProcessingDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCameraFrameEvent_CameraNodeProcessingDetailsDefaultTypeInternal() {}
  union {
    AndroidCameraFrameEvent_CameraNodeProcessingDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCameraFrameEvent_CameraNodeProcessingDetailsDefaultTypeInternal _AndroidCameraFrameEvent_CameraNodeProcessingDetails_default_instance_;
PROTOBUF_CONSTEXPR AndroidCameraFrameEvent::AndroidCameraFrameEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_processing_details_)*/{}
  , /*decltype(_impl_.vendor_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/uint64_t{0u}
  , /*decltype(_impl_.frame_number_)*/int64_t{0}
  , /*decltype(_impl_.request_id_)*/int64_t{0}
  , /*decltype(_impl_.request_received_ns_)*/int64_t{0}
  , /*decltype(_impl_.request_processing_started_ns_)*/int64_t{0}
  , /*decltype(_impl_.camera_id_)*/0u
  , /*decltype(_impl_.capture_result_status_)*/0
  , /*decltype(_impl_.start_of_exposure_ns_)*/int64_t{0}
  , /*decltype(_impl_.start_of_frame_ns_)*/int64_t{0}
  , /*decltype(_impl_.responses_all_sent_ns_)*/int64_t{0}
  , /*decltype(_impl_.skipped_sensor_frames_)*/0
  , /*decltype(_impl_.capture_intent_)*/0
  , /*decltype(_impl_.num_streams_)*/0
  , /*decltype(_impl_.vendor_data_version_)*/0} {}
struct AndroidCameraFrameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCameraFrameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCameraFrameEventDefaultTypeInternal() {}
  union {
    AndroidCameraFrameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCameraFrameEventDefaultTypeInternal _AndroidCameraFrameEvent_default_instance_;
PROTOBUF_CONSTEXPR AndroidCameraSessionStats_CameraGraph_CameraNode::AndroidCameraSessionStats_CameraGraph_CameraNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_ids_)*/{}
  , /*decltype(_impl_.output_ids_)*/{}
  , /*decltype(_impl_.vendor_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/int64_t{0}
  , /*decltype(_impl_.vendor_data_version_)*/0} {}
struct AndroidCameraSessionStats_CameraGraph_CameraNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCameraSessionStats_CameraGraph_CameraNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCameraSessionStats_CameraGraph_CameraNodeDefaultTypeInternal() {}
  union {
    AndroidCameraSessionStats_CameraGraph_CameraNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCameraSessionStats_CameraGraph_CameraNodeDefaultTypeInternal _AndroidCameraSessionStats_CameraGraph_CameraNode_default_instance_;
PROTOBUF_CONSTEXPR AndroidCameraSessionStats_CameraGraph_CameraEdge::AndroidCameraSessionStats_CameraGraph_CameraEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vendor_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_node_id_)*/int64_t{0}
  , /*decltype(_impl_.output_id_)*/int64_t{0}
  , /*decltype(_impl_.input_node_id_)*/int64_t{0}
  , /*decltype(_impl_.input_id_)*/int64_t{0}
  , /*decltype(_impl_.vendor_data_version_)*/0} {}
struct AndroidCameraSessionStats_CameraGraph_CameraEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCameraSessionStats_CameraGraph_CameraEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCameraSessionStats_CameraGraph_CameraEdgeDefaultTypeInternal() {}
  union {
    AndroidCameraSessionStats_CameraGraph_CameraEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCameraSessionStats_CameraGraph_CameraEdgeDefaultTypeInternal _AndroidCameraSessionStats_CameraGraph_CameraEdge_default_instance_;
PROTOBUF_CONSTEXPR AndroidCameraSessionStats_CameraGraph::AndroidCameraSessionStats_CameraGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AndroidCameraSessionStats_CameraGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCameraSessionStats_CameraGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCameraSessionStats_CameraGraphDefaultTypeInternal() {}
  union {
    AndroidCameraSessionStats_CameraGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCameraSessionStats_CameraGraphDefaultTypeInternal _AndroidCameraSessionStats_CameraGraph_default_instance_;
PROTOBUF_CONSTEXPR AndroidCameraSessionStats::AndroidCameraSessionStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.graph_)*/nullptr
  , /*decltype(_impl_.session_id_)*/uint64_t{0u}} {}
struct AndroidCameraSessionStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidCameraSessionStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidCameraSessionStatsDefaultTypeInternal() {}
  union {
    AndroidCameraSessionStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidCameraSessionStatsDefaultTypeInternal _AndroidCameraSessionStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool AndroidCameraFrameEvent_CaptureResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidCameraFrameEvent_CaptureResultStatus_strings[6] = {};

static const char AndroidCameraFrameEvent_CaptureResultStatus_names[] =
  "STATUS_BUFFER_ERROR"
  "STATUS_EARLY_METADATA_ERROR"
  "STATUS_FINAL_METADATA_ERROR"
  "STATUS_FLUSH_ERROR"
  "STATUS_OK"
  "STATUS_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidCameraFrameEvent_CaptureResultStatus_entries[] = {
  { {AndroidCameraFrameEvent_CaptureResultStatus_names + 0, 19}, 4 },
  { {AndroidCameraFrameEvent_CaptureResultStatus_names + 19, 27}, 2 },
  { {AndroidCameraFrameEvent_CaptureResultStatus_names + 46, 27}, 3 },
  { {AndroidCameraFrameEvent_CaptureResultStatus_names + 73, 18}, 5 },
  { {AndroidCameraFrameEvent_CaptureResultStatus_names + 91, 9}, 1 },
  { {AndroidCameraFrameEvent_CaptureResultStatus_names + 100, 18}, 0 },
};

static const int AndroidCameraFrameEvent_CaptureResultStatus_entries_by_number[] = {
  5, // 0 -> STATUS_UNSPECIFIED
  4, // 1 -> STATUS_OK
  1, // 2 -> STATUS_EARLY_METADATA_ERROR
  2, // 3 -> STATUS_FINAL_METADATA_ERROR
  0, // 4 -> STATUS_BUFFER_ERROR
  3, // 5 -> STATUS_FLUSH_ERROR
};

const std::string& AndroidCameraFrameEvent_CaptureResultStatus_Name(
    AndroidCameraFrameEvent_CaptureResultStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidCameraFrameEvent_CaptureResultStatus_entries,
          AndroidCameraFrameEvent_CaptureResultStatus_entries_by_number,
          6, AndroidCameraFrameEvent_CaptureResultStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidCameraFrameEvent_CaptureResultStatus_entries,
      AndroidCameraFrameEvent_CaptureResultStatus_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidCameraFrameEvent_CaptureResultStatus_strings[idx].get();
}
bool AndroidCameraFrameEvent_CaptureResultStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AndroidCameraFrameEvent_CaptureResultStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidCameraFrameEvent_CaptureResultStatus_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<AndroidCameraFrameEvent_CaptureResultStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::STATUS_UNSPECIFIED;
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::STATUS_OK;
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::STATUS_EARLY_METADATA_ERROR;
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::STATUS_FINAL_METADATA_ERROR;
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::STATUS_BUFFER_ERROR;
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::STATUS_FLUSH_ERROR;
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::CaptureResultStatus_MIN;
constexpr AndroidCameraFrameEvent_CaptureResultStatus AndroidCameraFrameEvent::CaptureResultStatus_MAX;
constexpr int AndroidCameraFrameEvent::CaptureResultStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AndroidCameraFrameEvent_CameraNodeProcessingDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCameraFrameEvent_CameraNodeProcessingDetails>()._impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_processing_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_processing_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scheduling_latency_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AndroidCameraFrameEvent_CameraNodeProcessingDetails::AndroidCameraFrameEvent_CameraNodeProcessingDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
}
AndroidCameraFrameEvent_CameraNodeProcessingDetails::AndroidCameraFrameEvent_CameraNodeProcessingDetails(const AndroidCameraFrameEvent_CameraNodeProcessingDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidCameraFrameEvent_CameraNodeProcessingDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.start_processing_ns_){}
    , decltype(_impl_.end_processing_ns_){}
    , decltype(_impl_.scheduling_latency_ns_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scheduling_latency_ns_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.scheduling_latency_ns_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
}

inline void AndroidCameraFrameEvent_CameraNodeProcessingDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_id_){int64_t{0}}
    , decltype(_impl_.start_processing_ns_){int64_t{0}}
    , decltype(_impl_.end_processing_ns_){int64_t{0}}
    , decltype(_impl_.scheduling_latency_ns_){int64_t{0}}
  };
}

AndroidCameraFrameEvent_CameraNodeProcessingDetails::~AndroidCameraFrameEvent_CameraNodeProcessingDetails() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCameraFrameEvent_CameraNodeProcessingDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AndroidCameraFrameEvent_CameraNodeProcessingDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCameraFrameEvent_CameraNodeProcessingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scheduling_latency_ns_) -
        reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.scheduling_latency_ns_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidCameraFrameEvent_CameraNodeProcessingDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_processing_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_processing_ns(&has_bits);
          _impl_.start_processing_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_processing_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_processing_ns(&has_bits);
          _impl_.end_processing_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 scheduling_latency_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_scheduling_latency_ns(&has_bits);
          _impl_.scheduling_latency_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCameraFrameEvent_CameraNodeProcessingDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // optional int64 start_processing_ns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_processing_ns(), target);
  }

  // optional int64 end_processing_ns = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_end_processing_ns(), target);
  }

  // optional int64 scheduling_latency_ns = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_scheduling_latency_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
  return target;
}

size_t AndroidCameraFrameEvent_CameraNodeProcessingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_node_id());
    }

    // optional int64 start_processing_ns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_processing_ns());
    }

    // optional int64 end_processing_ns = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_processing_ns());
    }

    // optional int64 scheduling_latency_ns = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_scheduling_latency_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidCameraFrameEvent_CameraNodeProcessingDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidCameraFrameEvent_CameraNodeProcessingDetails*>(
      &from));
}

void AndroidCameraFrameEvent_CameraNodeProcessingDetails::MergeFrom(const AndroidCameraFrameEvent_CameraNodeProcessingDetails& from) {
  AndroidCameraFrameEvent_CameraNodeProcessingDetails* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.node_id_ = from._impl_.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_processing_ns_ = from._impl_.start_processing_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_processing_ns_ = from._impl_.end_processing_ns_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.scheduling_latency_ns_ = from._impl_.scheduling_latency_ns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidCameraFrameEvent_CameraNodeProcessingDetails::CopyFrom(const AndroidCameraFrameEvent_CameraNodeProcessingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCameraFrameEvent_CameraNodeProcessingDetails::IsInitialized() const {
  return true;
}

void AndroidCameraFrameEvent_CameraNodeProcessingDetails::InternalSwap(AndroidCameraFrameEvent_CameraNodeProcessingDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCameraFrameEvent_CameraNodeProcessingDetails, _impl_.scheduling_latency_ns_)
      + sizeof(AndroidCameraFrameEvent_CameraNodeProcessingDetails::_impl_.scheduling_latency_ns_)
      - PROTOBUF_FIELD_OFFSET(AndroidCameraFrameEvent_CameraNodeProcessingDetails, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

std::string AndroidCameraFrameEvent_CameraNodeProcessingDetails::GetTypeName() const {
  return "perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails";
}


// ===================================================================

class AndroidCameraFrameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCameraFrameEvent>()._impl_._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_request_received_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_request_processing_started_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_of_exposure_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_start_of_frame_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_responses_all_sent_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_capture_result_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_skipped_sensor_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_capture_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_num_streams(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_vendor_data_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_vendor_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidCameraFrameEvent::AndroidCameraFrameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidCameraFrameEvent)
}
AndroidCameraFrameEvent::AndroidCameraFrameEvent(const AndroidCameraFrameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidCameraFrameEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_processing_details_){from._impl_.node_processing_details_}
    , decltype(_impl_.vendor_data_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.frame_number_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.request_received_ns_){}
    , decltype(_impl_.request_processing_started_ns_){}
    , decltype(_impl_.camera_id_){}
    , decltype(_impl_.capture_result_status_){}
    , decltype(_impl_.start_of_exposure_ns_){}
    , decltype(_impl_.start_of_frame_ns_){}
    , decltype(_impl_.responses_all_sent_ns_){}
    , decltype(_impl_.skipped_sensor_frames_){}
    , decltype(_impl_.capture_intent_){}
    , decltype(_impl_.num_streams_){}
    , decltype(_impl_.vendor_data_version_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.vendor_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vendor_data()) {
    _this->_impl_.vendor_data_.Set(from._internal_vendor_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vendor_data_version_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.vendor_data_version_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidCameraFrameEvent)
}

inline void AndroidCameraFrameEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_processing_details_){arena}
    , decltype(_impl_.vendor_data_){}
    , decltype(_impl_.session_id_){uint64_t{0u}}
    , decltype(_impl_.frame_number_){int64_t{0}}
    , decltype(_impl_.request_id_){int64_t{0}}
    , decltype(_impl_.request_received_ns_){int64_t{0}}
    , decltype(_impl_.request_processing_started_ns_){int64_t{0}}
    , decltype(_impl_.camera_id_){0u}
    , decltype(_impl_.capture_result_status_){0}
    , decltype(_impl_.start_of_exposure_ns_){int64_t{0}}
    , decltype(_impl_.start_of_frame_ns_){int64_t{0}}
    , decltype(_impl_.responses_all_sent_ns_){int64_t{0}}
    , decltype(_impl_.skipped_sensor_frames_){0}
    , decltype(_impl_.capture_intent_){0}
    , decltype(_impl_.num_streams_){0}
    , decltype(_impl_.vendor_data_version_){0}
  };
  _impl_.vendor_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidCameraFrameEvent::~AndroidCameraFrameEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidCameraFrameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCameraFrameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_processing_details_.~RepeatedPtrField();
  _impl_.vendor_data_.Destroy();
}

void AndroidCameraFrameEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCameraFrameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidCameraFrameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_processing_details_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.vendor_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.capture_result_status_) -
        reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.capture_result_status_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.start_of_exposure_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vendor_data_version_) -
        reinterpret_cast<char*>(&_impl_.start_of_exposure_ns_)) + sizeof(_impl_.vendor_data_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidCameraFrameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_camera_id(&has_bits);
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 frame_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_number(&has_bits);
          _impl_.frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 request_received_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_request_received_ns(&has_bits);
          _impl_.request_received_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 request_processing_started_ns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_request_processing_started_ns(&has_bits);
          _impl_.request_processing_started_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_of_exposure_ns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_start_of_exposure_ns(&has_bits);
          _impl_.start_of_exposure_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 start_of_frame_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_start_of_frame_ns(&has_bits);
          _impl_.start_of_frame_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 responses_all_sent_ns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_responses_all_sent_ns(&has_bits);
          _impl_.responses_all_sent_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidCameraFrameEvent.CaptureResultStatus capture_result_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidCameraFrameEvent_CaptureResultStatus_IsValid(val))) {
            _internal_set_capture_result_status(static_cast<::perfetto::protos::AndroidCameraFrameEvent_CaptureResultStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 skipped_sensor_frames = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_skipped_sensor_frames(&has_bits);
          _impl_.skipped_sensor_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 capture_intent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_capture_intent(&has_bits);
          _impl_.capture_intent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_streams = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_num_streams(&has_bits);
          _impl_.num_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails node_processing_details = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_processing_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 vendor_data_version = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_vendor_data_version(&has_bits);
          _impl_.vendor_data_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes vendor_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_vendor_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCameraFrameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidCameraFrameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional uint32 camera_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_camera_id(), target);
  }

  // optional int64 frame_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_frame_number(), target);
  }

  // optional int64 request_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_request_id(), target);
  }

  // optional int64 request_received_ns = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_request_received_ns(), target);
  }

  // optional int64 request_processing_started_ns = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_request_processing_started_ns(), target);
  }

  // optional int64 start_of_exposure_ns = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_start_of_exposure_ns(), target);
  }

  // optional int64 start_of_frame_ns = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_start_of_frame_ns(), target);
  }

  // optional int64 responses_all_sent_ns = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_responses_all_sent_ns(), target);
  }

  // optional .perfetto.protos.AndroidCameraFrameEvent.CaptureResultStatus capture_result_status = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_capture_result_status(), target);
  }

  // optional int32 skipped_sensor_frames = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_skipped_sensor_frames(), target);
  }

  // optional int32 capture_intent = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_capture_intent(), target);
  }

  // optional int32 num_streams = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_num_streams(), target);
  }

  // repeated .perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails node_processing_details = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_processing_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_processing_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 vendor_data_version = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_vendor_data_version(), target);
  }

  // optional bytes vendor_data = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_vendor_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidCameraFrameEvent)
  return target;
}

size_t AndroidCameraFrameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidCameraFrameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidCameraFrameEvent.CameraNodeProcessingDetails node_processing_details = 14;
  total_size += 1UL * this->_internal_node_processing_details_size();
  for (const auto& msg : this->_impl_.node_processing_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes vendor_data = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vendor_data());
    }

    // optional uint64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
    }

    // optional int64 frame_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frame_number());
    }

    // optional int64 request_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
    }

    // optional int64 request_received_ns = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_received_ns());
    }

    // optional int64 request_processing_started_ns = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_processing_started_ns());
    }

    // optional uint32 camera_id = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camera_id());
    }

    // optional .perfetto.protos.AndroidCameraFrameEvent.CaptureResultStatus capture_result_status = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_capture_result_status());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int64 start_of_exposure_ns = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_of_exposure_ns());
    }

    // optional int64 start_of_frame_ns = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_of_frame_ns());
    }

    // optional int64 responses_all_sent_ns = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_responses_all_sent_ns());
    }

    // optional int32 skipped_sensor_frames = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skipped_sensor_frames());
    }

    // optional int32 capture_intent = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_capture_intent());
    }

    // optional int32 num_streams = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_streams());
    }

    // optional int32 vendor_data_version = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vendor_data_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidCameraFrameEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidCameraFrameEvent*>(
      &from));
}

void AndroidCameraFrameEvent::MergeFrom(const AndroidCameraFrameEvent& from) {
  AndroidCameraFrameEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidCameraFrameEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_processing_details_.MergeFrom(from._impl_.node_processing_details_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_vendor_data(from._internal_vendor_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.session_id_ = from._impl_.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.request_received_ns_ = from._impl_.request_received_ns_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.request_processing_started_ns_ = from._impl_.request_processing_started_ns_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.camera_id_ = from._impl_.camera_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.capture_result_status_ = from._impl_.capture_result_status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.start_of_exposure_ns_ = from._impl_.start_of_exposure_ns_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.start_of_frame_ns_ = from._impl_.start_of_frame_ns_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.responses_all_sent_ns_ = from._impl_.responses_all_sent_ns_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.skipped_sensor_frames_ = from._impl_.skipped_sensor_frames_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.capture_intent_ = from._impl_.capture_intent_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.num_streams_ = from._impl_.num_streams_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.vendor_data_version_ = from._impl_.vendor_data_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidCameraFrameEvent::CopyFrom(const AndroidCameraFrameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidCameraFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCameraFrameEvent::IsInitialized() const {
  return true;
}

void AndroidCameraFrameEvent::InternalSwap(AndroidCameraFrameEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.node_processing_details_.InternalSwap(&other->_impl_.node_processing_details_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_data_, lhs_arena,
      &other->_impl_.vendor_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCameraFrameEvent, _impl_.vendor_data_version_)
      + sizeof(AndroidCameraFrameEvent::_impl_.vendor_data_version_)
      - PROTOBUF_FIELD_OFFSET(AndroidCameraFrameEvent, _impl_.session_id_)>(
          reinterpret_cast<char*>(&_impl_.session_id_),
          reinterpret_cast<char*>(&other->_impl_.session_id_));
}

std::string AndroidCameraFrameEvent::GetTypeName() const {
  return "perfetto.protos.AndroidCameraFrameEvent";
}


// ===================================================================

class AndroidCameraSessionStats_CameraGraph_CameraNode::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCameraSessionStats_CameraGraph_CameraNode>()._impl_._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vendor_data_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vendor_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidCameraSessionStats_CameraGraph_CameraNode::AndroidCameraSessionStats_CameraGraph_CameraNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
}
AndroidCameraSessionStats_CameraGraph_CameraNode::AndroidCameraSessionStats_CameraGraph_CameraNode(const AndroidCameraSessionStats_CameraGraph_CameraNode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidCameraSessionStats_CameraGraph_CameraNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_ids_){from._impl_.input_ids_}
    , decltype(_impl_.output_ids_){from._impl_.output_ids_}
    , decltype(_impl_.vendor_data_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.vendor_data_version_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.vendor_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vendor_data()) {
    _this->_impl_.vendor_data_.Set(from._internal_vendor_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vendor_data_version_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.vendor_data_version_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
}

inline void AndroidCameraSessionStats_CameraGraph_CameraNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_ids_){arena}
    , decltype(_impl_.output_ids_){arena}
    , decltype(_impl_.vendor_data_){}
    , decltype(_impl_.node_id_){int64_t{0}}
    , decltype(_impl_.vendor_data_version_){0}
  };
  _impl_.vendor_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidCameraSessionStats_CameraGraph_CameraNode::~AndroidCameraSessionStats_CameraGraph_CameraNode() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCameraSessionStats_CameraGraph_CameraNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_ids_.~RepeatedField();
  _impl_.output_ids_.~RepeatedField();
  _impl_.vendor_data_.Destroy();
}

void AndroidCameraSessionStats_CameraGraph_CameraNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCameraSessionStats_CameraGraph_CameraNode::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_ids_.Clear();
  _impl_.output_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.vendor_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vendor_data_version_) -
        reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.vendor_data_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidCameraSessionStats_CameraGraph_CameraNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 input_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_input_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_output_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vendor_data_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_vendor_data_version(&has_bits);
          _impl_.vendor_data_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes vendor_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_vendor_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCameraSessionStats_CameraGraph_CameraNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // repeated int64 input_ids = 2;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_input_ids(i), target);
  }

  // repeated int64 output_ids = 3;
  for (int i = 0, n = this->_internal_output_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_output_ids(i), target);
  }

  // optional int32 vendor_data_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_vendor_data_version(), target);
  }

  // optional bytes vendor_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_vendor_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
  return target;
}

size_t AndroidCameraSessionStats_CameraGraph_CameraNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 input_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.input_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_input_ids_size());
    total_size += data_size;
  }

  // repeated int64 output_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_output_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes vendor_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vendor_data());
    }

    // optional int64 node_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_node_id());
    }

    // optional int32 vendor_data_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vendor_data_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidCameraSessionStats_CameraGraph_CameraNode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidCameraSessionStats_CameraGraph_CameraNode*>(
      &from));
}

void AndroidCameraSessionStats_CameraGraph_CameraNode::MergeFrom(const AndroidCameraSessionStats_CameraGraph_CameraNode& from) {
  AndroidCameraSessionStats_CameraGraph_CameraNode* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_ids_.MergeFrom(from._impl_.input_ids_);
  _this->_impl_.output_ids_.MergeFrom(from._impl_.output_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_vendor_data(from._internal_vendor_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.node_id_ = from._impl_.node_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.vendor_data_version_ = from._impl_.vendor_data_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidCameraSessionStats_CameraGraph_CameraNode::CopyFrom(const AndroidCameraSessionStats_CameraGraph_CameraNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCameraSessionStats_CameraGraph_CameraNode::IsInitialized() const {
  return true;
}

void AndroidCameraSessionStats_CameraGraph_CameraNode::InternalSwap(AndroidCameraSessionStats_CameraGraph_CameraNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_ids_.InternalSwap(&other->_impl_.input_ids_);
  _impl_.output_ids_.InternalSwap(&other->_impl_.output_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_data_, lhs_arena,
      &other->_impl_.vendor_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCameraSessionStats_CameraGraph_CameraNode, _impl_.vendor_data_version_)
      + sizeof(AndroidCameraSessionStats_CameraGraph_CameraNode::_impl_.vendor_data_version_)
      - PROTOBUF_FIELD_OFFSET(AndroidCameraSessionStats_CameraGraph_CameraNode, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

std::string AndroidCameraSessionStats_CameraGraph_CameraNode::GetTypeName() const {
  return "perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode";
}


// ===================================================================

class AndroidCameraSessionStats_CameraGraph_CameraEdge::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCameraSessionStats_CameraGraph_CameraEdge>()._impl_._has_bits_);
  static void set_has_output_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vendor_data_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vendor_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidCameraSessionStats_CameraGraph_CameraEdge::AndroidCameraSessionStats_CameraGraph_CameraEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
}
AndroidCameraSessionStats_CameraGraph_CameraEdge::AndroidCameraSessionStats_CameraGraph_CameraEdge(const AndroidCameraSessionStats_CameraGraph_CameraEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidCameraSessionStats_CameraGraph_CameraEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vendor_data_){}
    , decltype(_impl_.output_node_id_){}
    , decltype(_impl_.output_id_){}
    , decltype(_impl_.input_node_id_){}
    , decltype(_impl_.input_id_){}
    , decltype(_impl_.vendor_data_version_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.vendor_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vendor_data()) {
    _this->_impl_.vendor_data_.Set(from._internal_vendor_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.output_node_id_, &from._impl_.output_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vendor_data_version_) -
    reinterpret_cast<char*>(&_impl_.output_node_id_)) + sizeof(_impl_.vendor_data_version_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
}

inline void AndroidCameraSessionStats_CameraGraph_CameraEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vendor_data_){}
    , decltype(_impl_.output_node_id_){int64_t{0}}
    , decltype(_impl_.output_id_){int64_t{0}}
    , decltype(_impl_.input_node_id_){int64_t{0}}
    , decltype(_impl_.input_id_){int64_t{0}}
    , decltype(_impl_.vendor_data_version_){0}
  };
  _impl_.vendor_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidCameraSessionStats_CameraGraph_CameraEdge::~AndroidCameraSessionStats_CameraGraph_CameraEdge() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCameraSessionStats_CameraGraph_CameraEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_data_.Destroy();
}

void AndroidCameraSessionStats_CameraGraph_CameraEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCameraSessionStats_CameraGraph_CameraEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.vendor_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.output_node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vendor_data_version_) -
        reinterpret_cast<char*>(&_impl_.output_node_id_)) + sizeof(_impl_.vendor_data_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidCameraSessionStats_CameraGraph_CameraEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 output_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_output_node_id(&has_bits);
          _impl_.output_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 output_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_output_id(&has_bits);
          _impl_.output_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 input_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_input_node_id(&has_bits);
          _impl_.input_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 input_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_input_id(&has_bits);
          _impl_.input_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vendor_data_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_vendor_data_version(&has_bits);
          _impl_.vendor_data_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes vendor_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_vendor_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCameraSessionStats_CameraGraph_CameraEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 output_node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_output_node_id(), target);
  }

  // optional int64 output_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_output_id(), target);
  }

  // optional int64 input_node_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_input_node_id(), target);
  }

  // optional int64 input_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_input_id(), target);
  }

  // optional int32 vendor_data_version = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_vendor_data_version(), target);
  }

  // optional bytes vendor_data = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_vendor_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
  return target;
}

size_t AndroidCameraSessionStats_CameraGraph_CameraEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes vendor_data = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vendor_data());
    }

    // optional int64 output_node_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_output_node_id());
    }

    // optional int64 output_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_output_id());
    }

    // optional int64 input_node_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_input_node_id());
    }

    // optional int64 input_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_input_id());
    }

    // optional int32 vendor_data_version = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vendor_data_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidCameraSessionStats_CameraGraph_CameraEdge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidCameraSessionStats_CameraGraph_CameraEdge*>(
      &from));
}

void AndroidCameraSessionStats_CameraGraph_CameraEdge::MergeFrom(const AndroidCameraSessionStats_CameraGraph_CameraEdge& from) {
  AndroidCameraSessionStats_CameraGraph_CameraEdge* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_vendor_data(from._internal_vendor_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.output_node_id_ = from._impl_.output_node_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.output_id_ = from._impl_.output_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.input_node_id_ = from._impl_.input_node_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.input_id_ = from._impl_.input_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.vendor_data_version_ = from._impl_.vendor_data_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidCameraSessionStats_CameraGraph_CameraEdge::CopyFrom(const AndroidCameraSessionStats_CameraGraph_CameraEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCameraSessionStats_CameraGraph_CameraEdge::IsInitialized() const {
  return true;
}

void AndroidCameraSessionStats_CameraGraph_CameraEdge::InternalSwap(AndroidCameraSessionStats_CameraGraph_CameraEdge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_data_, lhs_arena,
      &other->_impl_.vendor_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCameraSessionStats_CameraGraph_CameraEdge, _impl_.vendor_data_version_)
      + sizeof(AndroidCameraSessionStats_CameraGraph_CameraEdge::_impl_.vendor_data_version_)
      - PROTOBUF_FIELD_OFFSET(AndroidCameraSessionStats_CameraGraph_CameraEdge, _impl_.output_node_id_)>(
          reinterpret_cast<char*>(&_impl_.output_node_id_),
          reinterpret_cast<char*>(&other->_impl_.output_node_id_));
}

std::string AndroidCameraSessionStats_CameraGraph_CameraEdge::GetTypeName() const {
  return "perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge";
}


// ===================================================================

class AndroidCameraSessionStats_CameraGraph::_Internal {
 public:
};

AndroidCameraSessionStats_CameraGraph::AndroidCameraSessionStats_CameraGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
}
AndroidCameraSessionStats_CameraGraph::AndroidCameraSessionStats_CameraGraph(const AndroidCameraSessionStats_CameraGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidCameraSessionStats_CameraGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.edges_){from._impl_.edges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
}

inline void AndroidCameraSessionStats_CameraGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.edges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AndroidCameraSessionStats_CameraGraph::~AndroidCameraSessionStats_CameraGraph() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCameraSessionStats_CameraGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
  _impl_.edges_.~RepeatedPtrField();
}

void AndroidCameraSessionStats_CameraGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCameraSessionStats_CameraGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.edges_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidCameraSessionStats_CameraGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCameraSessionStats_CameraGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge edges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
  return target;
}

size_t AndroidCameraSessionStats_CameraGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.AndroidCameraSessionStats.CameraGraph.CameraEdge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidCameraSessionStats_CameraGraph::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidCameraSessionStats_CameraGraph*>(
      &from));
}

void AndroidCameraSessionStats_CameraGraph::MergeFrom(const AndroidCameraSessionStats_CameraGraph& from) {
  AndroidCameraSessionStats_CameraGraph* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidCameraSessionStats_CameraGraph::CopyFrom(const AndroidCameraSessionStats_CameraGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidCameraSessionStats.CameraGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCameraSessionStats_CameraGraph::IsInitialized() const {
  return true;
}

void AndroidCameraSessionStats_CameraGraph::InternalSwap(AndroidCameraSessionStats_CameraGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
}

std::string AndroidCameraSessionStats_CameraGraph::GetTypeName() const {
  return "perfetto.protos.AndroidCameraSessionStats.CameraGraph";
}


// ===================================================================

class AndroidCameraSessionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidCameraSessionStats>()._impl_._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::AndroidCameraSessionStats_CameraGraph& graph(const AndroidCameraSessionStats* msg);
  static void set_has_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::AndroidCameraSessionStats_CameraGraph&
AndroidCameraSessionStats::_Internal::graph(const AndroidCameraSessionStats* msg) {
  return *msg->_impl_.graph_;
}
AndroidCameraSessionStats::AndroidCameraSessionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidCameraSessionStats)
}
AndroidCameraSessionStats::AndroidCameraSessionStats(const AndroidCameraSessionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidCameraSessionStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.session_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_graph()) {
    _this->_impl_.graph_ = new ::perfetto::protos::AndroidCameraSessionStats_CameraGraph(*from._impl_.graph_);
  }
  _this->_impl_.session_id_ = from._impl_.session_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidCameraSessionStats)
}

inline void AndroidCameraSessionStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.session_id_){uint64_t{0u}}
  };
}

AndroidCameraSessionStats::~AndroidCameraSessionStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidCameraSessionStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidCameraSessionStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.graph_;
}

void AndroidCameraSessionStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidCameraSessionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidCameraSessionStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.graph_ != nullptr);
    _impl_.graph_->Clear();
  }
  _impl_.session_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidCameraSessionStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_id(&has_bits);
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.AndroidCameraSessionStats.CameraGraph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidCameraSessionStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidCameraSessionStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // optional .perfetto.protos.AndroidCameraSessionStats.CameraGraph graph = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::graph(this),
        _Internal::graph(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidCameraSessionStats)
  return target;
}

size_t AndroidCameraSessionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidCameraSessionStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.AndroidCameraSessionStats.CameraGraph graph = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.graph_);
    }

    // optional uint64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidCameraSessionStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidCameraSessionStats*>(
      &from));
}

void AndroidCameraSessionStats::MergeFrom(const AndroidCameraSessionStats& from) {
  AndroidCameraSessionStats* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidCameraSessionStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_graph()->::perfetto::protos::AndroidCameraSessionStats_CameraGraph::MergeFrom(
          from._internal_graph());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.session_id_ = from._impl_.session_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidCameraSessionStats::CopyFrom(const AndroidCameraSessionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidCameraSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidCameraSessionStats::IsInitialized() const {
  return true;
}

void AndroidCameraSessionStats::InternalSwap(AndroidCameraSessionStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidCameraSessionStats, _impl_.session_id_)
      + sizeof(AndroidCameraSessionStats::_impl_.session_id_)
      - PROTOBUF_FIELD_OFFSET(AndroidCameraSessionStats, _impl_.graph_)>(
          reinterpret_cast<char*>(&_impl_.graph_),
          reinterpret_cast<char*>(&other->_impl_.graph_));
}

std::string AndroidCameraSessionStats::GetTypeName() const {
  return "perfetto.protos.AndroidCameraSessionStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidCameraFrameEvent_CameraNodeProcessingDetails*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidCameraFrameEvent_CameraNodeProcessingDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidCameraFrameEvent_CameraNodeProcessingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidCameraFrameEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidCameraFrameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidCameraFrameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidCameraSessionStats_CameraGraph_CameraNode*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidCameraSessionStats_CameraGraph_CameraNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidCameraSessionStats_CameraGraph_CameraNode >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidCameraSessionStats_CameraGraph_CameraEdge*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidCameraSessionStats_CameraGraph_CameraEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidCameraSessionStats_CameraGraph_CameraEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidCameraSessionStats_CameraGraph*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidCameraSessionStats_CameraGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidCameraSessionStats_CameraGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidCameraSessionStats*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidCameraSessionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidCameraSessionStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
