#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/graphics_frame_event.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

GraphicsFrameEvent::GraphicsFrameEvent() = default;
GraphicsFrameEvent::~GraphicsFrameEvent() = default;
GraphicsFrameEvent::GraphicsFrameEvent(const GraphicsFrameEvent&) = default;
GraphicsFrameEvent& GraphicsFrameEvent::operator=(const GraphicsFrameEvent&) = default;
GraphicsFrameEvent::GraphicsFrameEvent(GraphicsFrameEvent&&) noexcept = default;
GraphicsFrameEvent& GraphicsFrameEvent::operator=(GraphicsFrameEvent&&) = default;

bool GraphicsFrameEvent::operator==(const GraphicsFrameEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(buffer_event_, other.buffer_event_);
}

bool GraphicsFrameEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* buffer_event */:
        (*buffer_event_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GraphicsFrameEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GraphicsFrameEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GraphicsFrameEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: buffer_event
  if (_has_field_[1]) {
    (*buffer_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent() = default;
GraphicsFrameEvent_BufferEvent::~GraphicsFrameEvent_BufferEvent() = default;
GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent(const GraphicsFrameEvent_BufferEvent&) = default;
GraphicsFrameEvent_BufferEvent& GraphicsFrameEvent_BufferEvent::operator=(const GraphicsFrameEvent_BufferEvent&) = default;
GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent(GraphicsFrameEvent_BufferEvent&&) noexcept = default;
GraphicsFrameEvent_BufferEvent& GraphicsFrameEvent_BufferEvent::operator=(GraphicsFrameEvent_BufferEvent&&) = default;

bool GraphicsFrameEvent_BufferEvent::operator==(const GraphicsFrameEvent_BufferEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_number_, other.frame_number_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_name_, other.layer_name_)
   && ::protozero::internal::gen_helpers::EqualsField(duration_ns_, other.duration_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(buffer_id_, other.buffer_id_);
}

bool GraphicsFrameEvent_BufferEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* frame_number */:
        field.get(&frame_number_);
        break;
      case 2 /* type */:
        field.get(&type_);
        break;
      case 3 /* layer_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &layer_name_);
        break;
      case 4 /* duration_ns */:
        field.get(&duration_ns_);
        break;
      case 5 /* buffer_id */:
        field.get(&buffer_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string GraphicsFrameEvent_BufferEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> GraphicsFrameEvent_BufferEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void GraphicsFrameEvent_BufferEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: frame_number
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, frame_number_, msg);
  }

  // Field 2: type
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, type_, msg);
  }

  // Field 3: layer_name
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, layer_name_, msg);
  }

  // Field 4: duration_ns
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, duration_ns_, msg);
  }

  // Field 5: buffer_id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, buffer_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
