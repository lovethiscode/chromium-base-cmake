// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/pixel_modem_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fpixel_5fmodem_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fpixel_5fmodem_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fpixel_5fmodem_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fpixel_5fmodem_5fevents_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class PixelModemEvents;
struct PixelModemEventsDefaultTypeInternal;
extern PixelModemEventsDefaultTypeInternal _PixelModemEvents_default_instance_;
class PixelModemTokenDatabase;
struct PixelModemTokenDatabaseDefaultTypeInternal;
extern PixelModemTokenDatabaseDefaultTypeInternal _PixelModemTokenDatabase_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::PixelModemEvents* Arena::CreateMaybeMessage<::perfetto::protos::PixelModemEvents>(Arena*);
template<> ::perfetto::protos::PixelModemTokenDatabase* Arena::CreateMaybeMessage<::perfetto::protos::PixelModemTokenDatabase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class PixelModemEvents final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PixelModemEvents) */ {
 public:
  inline PixelModemEvents() : PixelModemEvents(nullptr) {}
  ~PixelModemEvents() override;
  explicit PROTOBUF_CONSTEXPR PixelModemEvents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PixelModemEvents(const PixelModemEvents& from);
  PixelModemEvents(PixelModemEvents&& from) noexcept
    : PixelModemEvents() {
    *this = ::std::move(from);
  }

  inline PixelModemEvents& operator=(const PixelModemEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelModemEvents& operator=(PixelModemEvents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PixelModemEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelModemEvents* internal_default_instance() {
    return reinterpret_cast<const PixelModemEvents*>(
               &_PixelModemEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PixelModemEvents& a, PixelModemEvents& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PixelModemEvents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelModemEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelModemEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelModemEvents>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PixelModemEvents& from);
  void MergeFrom(const PixelModemEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PixelModemEvents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PixelModemEvents";
  }
  protected:
  explicit PixelModemEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kEventTimeNanosFieldNumber = 2,
  };
  // repeated bytes events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  const std::string& events(int index) const;
  std::string* mutable_events(int index);
  void set_events(int index, const std::string& value);
  void set_events(int index, std::string&& value);
  void set_events(int index, const char* value);
  void set_events(int index, const void* value, size_t size);
  std::string* add_events();
  void add_events(const std::string& value);
  void add_events(std::string&& value);
  void add_events(const char* value);
  void add_events(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_events();
  private:
  const std::string& _internal_events(int index) const;
  std::string* _internal_add_events();
  public:

  // repeated uint64 event_time_nanos = 2;
  int event_time_nanos_size() const;
  private:
  int _internal_event_time_nanos_size() const;
  public:
  void clear_event_time_nanos();
  private:
  uint64_t _internal_event_time_nanos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_event_time_nanos() const;
  void _internal_add_event_time_nanos(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_event_time_nanos();
  public:
  uint64_t event_time_nanos(int index) const;
  void set_event_time_nanos(int index, uint64_t value);
  void add_event_time_nanos(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      event_time_nanos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_event_time_nanos();

  // @@protoc_insertion_point(class_scope:perfetto.protos.PixelModemEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > event_time_nanos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fpixel_5fmodem_5fevents_2eproto;
};
// -------------------------------------------------------------------

class PixelModemTokenDatabase final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PixelModemTokenDatabase) */ {
 public:
  inline PixelModemTokenDatabase() : PixelModemTokenDatabase(nullptr) {}
  ~PixelModemTokenDatabase() override;
  explicit PROTOBUF_CONSTEXPR PixelModemTokenDatabase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PixelModemTokenDatabase(const PixelModemTokenDatabase& from);
  PixelModemTokenDatabase(PixelModemTokenDatabase&& from) noexcept
    : PixelModemTokenDatabase() {
    *this = ::std::move(from);
  }

  inline PixelModemTokenDatabase& operator=(const PixelModemTokenDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelModemTokenDatabase& operator=(PixelModemTokenDatabase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PixelModemTokenDatabase& default_instance() {
    return *internal_default_instance();
  }
  static inline const PixelModemTokenDatabase* internal_default_instance() {
    return reinterpret_cast<const PixelModemTokenDatabase*>(
               &_PixelModemTokenDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PixelModemTokenDatabase& a, PixelModemTokenDatabase& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PixelModemTokenDatabase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelModemTokenDatabase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PixelModemTokenDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PixelModemTokenDatabase>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PixelModemTokenDatabase& from);
  void MergeFrom(const PixelModemTokenDatabase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PixelModemTokenDatabase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PixelModemTokenDatabase";
  }
  protected:
  explicit PixelModemTokenDatabase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
  };
  // optional bytes database = 1;
  bool has_database() const;
  private:
  bool _internal_has_database() const;
  public:
  void clear_database();
  const std::string& database() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database();
  PROTOBUF_NODISCARD std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.PixelModemTokenDatabase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fpixel_5fmodem_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PixelModemEvents

// repeated bytes events = 1;
inline int PixelModemEvents::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int PixelModemEvents::events_size() const {
  return _internal_events_size();
}
inline void PixelModemEvents::clear_events() {
  _impl_.events_.Clear();
}
inline std::string* PixelModemEvents::add_events() {
  std::string* _s = _internal_add_events();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PixelModemEvents.events)
  return _s;
}
inline const std::string& PixelModemEvents::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const std::string& PixelModemEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PixelModemEvents.events)
  return _internal_events(index);
}
inline std::string* PixelModemEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PixelModemEvents.events)
  return _impl_.events_.Mutable(index);
}
inline void PixelModemEvents::set_events(int index, const std::string& value) {
  _impl_.events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PixelModemEvents.events)
}
inline void PixelModemEvents::set_events(int index, std::string&& value) {
  _impl_.events_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.PixelModemEvents.events)
}
inline void PixelModemEvents::set_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PixelModemEvents.events)
}
inline void PixelModemEvents::set_events(int index, const void* value, size_t size) {
  _impl_.events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PixelModemEvents.events)
}
inline std::string* PixelModemEvents::_internal_add_events() {
  return _impl_.events_.Add();
}
inline void PixelModemEvents::add_events(const std::string& value) {
  _impl_.events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PixelModemEvents.events)
}
inline void PixelModemEvents::add_events(std::string&& value) {
  _impl_.events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PixelModemEvents.events)
}
inline void PixelModemEvents::add_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PixelModemEvents.events)
}
inline void PixelModemEvents::add_events(const void* value, size_t size) {
  _impl_.events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PixelModemEvents.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PixelModemEvents::events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PixelModemEvents.events)
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PixelModemEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PixelModemEvents.events)
  return &_impl_.events_;
}

// repeated uint64 event_time_nanos = 2;
inline int PixelModemEvents::_internal_event_time_nanos_size() const {
  return _impl_.event_time_nanos_.size();
}
inline int PixelModemEvents::event_time_nanos_size() const {
  return _internal_event_time_nanos_size();
}
inline void PixelModemEvents::clear_event_time_nanos() {
  _impl_.event_time_nanos_.Clear();
}
inline uint64_t PixelModemEvents::_internal_event_time_nanos(int index) const {
  return _impl_.event_time_nanos_.Get(index);
}
inline uint64_t PixelModemEvents::event_time_nanos(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PixelModemEvents.event_time_nanos)
  return _internal_event_time_nanos(index);
}
inline void PixelModemEvents::set_event_time_nanos(int index, uint64_t value) {
  _impl_.event_time_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PixelModemEvents.event_time_nanos)
}
inline void PixelModemEvents::_internal_add_event_time_nanos(uint64_t value) {
  _impl_.event_time_nanos_.Add(value);
}
inline void PixelModemEvents::add_event_time_nanos(uint64_t value) {
  _internal_add_event_time_nanos(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PixelModemEvents.event_time_nanos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PixelModemEvents::_internal_event_time_nanos() const {
  return _impl_.event_time_nanos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PixelModemEvents::event_time_nanos() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PixelModemEvents.event_time_nanos)
  return _internal_event_time_nanos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PixelModemEvents::_internal_mutable_event_time_nanos() {
  return &_impl_.event_time_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PixelModemEvents::mutable_event_time_nanos() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PixelModemEvents.event_time_nanos)
  return _internal_mutable_event_time_nanos();
}

// -------------------------------------------------------------------

// PixelModemTokenDatabase

// optional bytes database = 1;
inline bool PixelModemTokenDatabase::_internal_has_database() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PixelModemTokenDatabase::has_database() const {
  return _internal_has_database();
}
inline void PixelModemTokenDatabase::clear_database() {
  _impl_.database_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PixelModemTokenDatabase::database() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PixelModemTokenDatabase.database)
  return _internal_database();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PixelModemTokenDatabase::set_database(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.database_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.PixelModemTokenDatabase.database)
}
inline std::string* PixelModemTokenDatabase::mutable_database() {
  std::string* _s = _internal_mutable_database();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PixelModemTokenDatabase.database)
  return _s;
}
inline const std::string& PixelModemTokenDatabase::_internal_database() const {
  return _impl_.database_.Get();
}
inline void PixelModemTokenDatabase::_internal_set_database(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.database_.Set(value, GetArenaForAllocation());
}
inline std::string* PixelModemTokenDatabase::_internal_mutable_database() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.database_.Mutable(GetArenaForAllocation());
}
inline std::string* PixelModemTokenDatabase::release_database() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PixelModemTokenDatabase.database)
  if (!_internal_has_database()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.database_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_.IsDefault()) {
    _impl_.database_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PixelModemTokenDatabase::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.database_.SetAllocated(database, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_.IsDefault()) {
    _impl_.database_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PixelModemTokenDatabase.database)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fpixel_5fmodem_5fevents_2eproto
