#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/shell_transition.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ShellHandlerMapping::ShellHandlerMapping() = default;
ShellHandlerMapping::~ShellHandlerMapping() = default;
ShellHandlerMapping::ShellHandlerMapping(const ShellHandlerMapping&) = default;
ShellHandlerMapping& ShellHandlerMapping::operator=(const ShellHandlerMapping&) = default;
ShellHandlerMapping::ShellHandlerMapping(ShellHandlerMapping&&) noexcept = default;
ShellHandlerMapping& ShellHandlerMapping::operator=(ShellHandlerMapping&&) = default;

bool ShellHandlerMapping::operator==(const ShellHandlerMapping& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool ShellHandlerMapping::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ShellHandlerMapping::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ShellHandlerMapping::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ShellHandlerMapping::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ShellHandlerMappings::ShellHandlerMappings() = default;
ShellHandlerMappings::~ShellHandlerMappings() = default;
ShellHandlerMappings::ShellHandlerMappings(const ShellHandlerMappings&) = default;
ShellHandlerMappings& ShellHandlerMappings::operator=(const ShellHandlerMappings&) = default;
ShellHandlerMappings::ShellHandlerMappings(ShellHandlerMappings&&) noexcept = default;
ShellHandlerMappings& ShellHandlerMappings::operator=(ShellHandlerMappings&&) = default;

bool ShellHandlerMappings::operator==(const ShellHandlerMappings& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(mapping_, other.mapping_);
}

int ShellHandlerMappings::mapping_size() const { return static_cast<int>(mapping_.size()); }
void ShellHandlerMappings::clear_mapping() { mapping_.clear(); }
ShellHandlerMapping* ShellHandlerMappings::add_mapping() { mapping_.emplace_back(); return &mapping_.back(); }
bool ShellHandlerMappings::ParseFromArray(const void* raw, size_t size) {
  mapping_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* mapping */:
        mapping_.emplace_back();
        mapping_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ShellHandlerMappings::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ShellHandlerMappings::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ShellHandlerMappings::Serialize(::protozero::Message* msg) const {
  // Field 1: mapping
  for (auto& it : mapping_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ShellTransition::ShellTransition() = default;
ShellTransition::~ShellTransition() = default;
ShellTransition::ShellTransition(const ShellTransition&) = default;
ShellTransition& ShellTransition::operator=(const ShellTransition&) = default;
ShellTransition::ShellTransition(ShellTransition&&) noexcept = default;
ShellTransition& ShellTransition::operator=(ShellTransition&&) = default;

bool ShellTransition::operator==(const ShellTransition& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(create_time_ns_, other.create_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(send_time_ns_, other.send_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(dispatch_time_ns_, other.dispatch_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(merge_time_ns_, other.merge_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(merge_request_time_ns_, other.merge_request_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(shell_abort_time_ns_, other.shell_abort_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(wm_abort_time_ns_, other.wm_abort_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(finish_time_ns_, other.finish_time_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(start_transaction_id_, other.start_transaction_id_)
   && ::protozero::internal::gen_helpers::EqualsField(finish_transaction_id_, other.finish_transaction_id_)
   && ::protozero::internal::gen_helpers::EqualsField(handler_, other.handler_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(targets_, other.targets_)
   && ::protozero::internal::gen_helpers::EqualsField(merge_target_, other.merge_target_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(starting_window_remove_time_ns_, other.starting_window_remove_time_ns_);
}

int ShellTransition::targets_size() const { return static_cast<int>(targets_.size()); }
void ShellTransition::clear_targets() { targets_.clear(); }
ShellTransition_Target* ShellTransition::add_targets() { targets_.emplace_back(); return &targets_.back(); }
bool ShellTransition::ParseFromArray(const void* raw, size_t size) {
  targets_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* create_time_ns */:
        field.get(&create_time_ns_);
        break;
      case 3 /* send_time_ns */:
        field.get(&send_time_ns_);
        break;
      case 4 /* dispatch_time_ns */:
        field.get(&dispatch_time_ns_);
        break;
      case 5 /* merge_time_ns */:
        field.get(&merge_time_ns_);
        break;
      case 6 /* merge_request_time_ns */:
        field.get(&merge_request_time_ns_);
        break;
      case 7 /* shell_abort_time_ns */:
        field.get(&shell_abort_time_ns_);
        break;
      case 8 /* wm_abort_time_ns */:
        field.get(&wm_abort_time_ns_);
        break;
      case 9 /* finish_time_ns */:
        field.get(&finish_time_ns_);
        break;
      case 10 /* start_transaction_id */:
        field.get(&start_transaction_id_);
        break;
      case 11 /* finish_transaction_id */:
        field.get(&finish_transaction_id_);
        break;
      case 12 /* handler */:
        field.get(&handler_);
        break;
      case 13 /* type */:
        field.get(&type_);
        break;
      case 14 /* targets */:
        targets_.emplace_back();
        targets_.back().ParseFromArray(field.data(), field.size());
        break;
      case 15 /* merge_target */:
        field.get(&merge_target_);
        break;
      case 16 /* flags */:
        field.get(&flags_);
        break;
      case 17 /* starting_window_remove_time_ns */:
        field.get(&starting_window_remove_time_ns_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ShellTransition::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ShellTransition::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ShellTransition::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: create_time_ns
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, create_time_ns_, msg);
  }

  // Field 3: send_time_ns
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, send_time_ns_, msg);
  }

  // Field 4: dispatch_time_ns
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, dispatch_time_ns_, msg);
  }

  // Field 5: merge_time_ns
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, merge_time_ns_, msg);
  }

  // Field 6: merge_request_time_ns
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, merge_request_time_ns_, msg);
  }

  // Field 7: shell_abort_time_ns
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, shell_abort_time_ns_, msg);
  }

  // Field 8: wm_abort_time_ns
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, wm_abort_time_ns_, msg);
  }

  // Field 9: finish_time_ns
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, finish_time_ns_, msg);
  }

  // Field 10: start_transaction_id
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, start_transaction_id_, msg);
  }

  // Field 11: finish_transaction_id
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, finish_transaction_id_, msg);
  }

  // Field 12: handler
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, handler_, msg);
  }

  // Field 13: type
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, type_, msg);
  }

  // Field 14: targets
  for (auto& it : targets_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(14));
  }

  // Field 15: merge_target
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, merge_target_, msg);
  }

  // Field 16: flags
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, flags_, msg);
  }

  // Field 17: starting_window_remove_time_ns
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, starting_window_remove_time_ns_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ShellTransition_Target::ShellTransition_Target() = default;
ShellTransition_Target::~ShellTransition_Target() = default;
ShellTransition_Target::ShellTransition_Target(const ShellTransition_Target&) = default;
ShellTransition_Target& ShellTransition_Target::operator=(const ShellTransition_Target&) = default;
ShellTransition_Target::ShellTransition_Target(ShellTransition_Target&&) noexcept = default;
ShellTransition_Target& ShellTransition_Target::operator=(ShellTransition_Target&&) = default;

bool ShellTransition_Target::operator==(const ShellTransition_Target& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(mode_, other.mode_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_id_, other.layer_id_)
   && ::protozero::internal::gen_helpers::EqualsField(window_id_, other.window_id_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_);
}

bool ShellTransition_Target::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* mode */:
        field.get(&mode_);
        break;
      case 2 /* layer_id */:
        field.get(&layer_id_);
        break;
      case 3 /* window_id */:
        field.get(&window_id_);
        break;
      case 4 /* flags */:
        field.get(&flags_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ShellTransition_Target::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ShellTransition_Target::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ShellTransition_Target::Serialize(::protozero::Message* msg) const {
  // Field 1: mode
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, mode_, msg);
  }

  // Field 2: layer_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, layer_id_, msg);
  }

  // Field 3: window_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, window_id_, msg);
  }

  // Field 4: flags
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, flags_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
