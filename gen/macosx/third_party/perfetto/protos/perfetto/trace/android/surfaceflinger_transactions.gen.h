// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SURFACEFLINGER_TRANSACTIONS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SURFACEFLINGER_TRANSACTIONS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class DisplayState;
class RectProto;
class LayerState;
class LayerState_WindowInfo;
class Transform;
class RegionProto;
class BlurRegion;
class ColorTransformProto;
class LayerState_BufferData;
class LayerState_Color3;
class LayerState_Matrix22;
class TransactionState;
class LayerCreationArgs;
class DisplayInfo;
class TransactionTraceEntry;
class TransactionTraceFile;
enum DisplayState_Changes : int;
enum LayerState_ChangesLsb : int;
enum LayerState_ChangesMsb : int;
enum LayerState_Flags : int;
enum LayerState_DropInputMode : int;
enum TrustedOverlay : int;
enum LayerState_BufferData_BufferDataChange : int;
enum LayerState_BufferData_PixelFormat : int;
enum TransactionTraceFile_MagicNumber : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {
enum DisplayState_Changes : int {
  DisplayState_Changes_eChangesNone = 0,
  DisplayState_Changes_eSurfaceChanged = 1,
  DisplayState_Changes_eLayerStackChanged = 2,
  DisplayState_Changes_eDisplayProjectionChanged = 4,
  DisplayState_Changes_eDisplaySizeChanged = 8,
  DisplayState_Changes_eFlagsChanged = 16,
};
enum LayerState_ChangesLsb : int {
  LayerState_ChangesLsb_eChangesLsbNone = 0,
  LayerState_ChangesLsb_ePositionChanged = 1,
  LayerState_ChangesLsb_eLayerChanged = 2,
  LayerState_ChangesLsb_eAlphaChanged = 8,
  LayerState_ChangesLsb_eMatrixChanged = 16,
  LayerState_ChangesLsb_eTransparentRegionChanged = 32,
  LayerState_ChangesLsb_eFlagsChanged = 64,
  LayerState_ChangesLsb_eLayerStackChanged = 128,
  LayerState_ChangesLsb_eReleaseBufferListenerChanged = 1024,
  LayerState_ChangesLsb_eShadowRadiusChanged = 2048,
  LayerState_ChangesLsb_eBufferCropChanged = 8192,
  LayerState_ChangesLsb_eRelativeLayerChanged = 16384,
  LayerState_ChangesLsb_eReparent = 32768,
  LayerState_ChangesLsb_eColorChanged = 65536,
  LayerState_ChangesLsb_eBufferTransformChanged = 262144,
  LayerState_ChangesLsb_eTransformToDisplayInverseChanged = 524288,
  LayerState_ChangesLsb_eCropChanged = 1048576,
  LayerState_ChangesLsb_eBufferChanged = 2097152,
  LayerState_ChangesLsb_eAcquireFenceChanged = 4194304,
  LayerState_ChangesLsb_eDataspaceChanged = 8388608,
  LayerState_ChangesLsb_eHdrMetadataChanged = 16777216,
  LayerState_ChangesLsb_eSurfaceDamageRegionChanged = 33554432,
  LayerState_ChangesLsb_eApiChanged = 67108864,
  LayerState_ChangesLsb_eSidebandStreamChanged = 134217728,
  LayerState_ChangesLsb_eColorTransformChanged = 268435456,
  LayerState_ChangesLsb_eHasListenerCallbacksChanged = 536870912,
  LayerState_ChangesLsb_eInputInfoChanged = 1073741824,
  LayerState_ChangesLsb_eCornerRadiusChanged = -2147483648,
};
enum LayerState_ChangesMsb : int {
  LayerState_ChangesMsb_eChangesMsbNone = 0,
  LayerState_ChangesMsb_eDestinationFrameChanged = 1,
  LayerState_ChangesMsb_eCachedBufferChanged = 2,
  LayerState_ChangesMsb_eBackgroundColorChanged = 4,
  LayerState_ChangesMsb_eMetadataChanged = 8,
  LayerState_ChangesMsb_eColorSpaceAgnosticChanged = 16,
  LayerState_ChangesMsb_eFrameRateSelectionPriority = 32,
  LayerState_ChangesMsb_eFrameRateChanged = 64,
  LayerState_ChangesMsb_eBackgroundBlurRadiusChanged = 128,
  LayerState_ChangesMsb_eProducerDisconnect = 256,
  LayerState_ChangesMsb_eFixedTransformHintChanged = 512,
  LayerState_ChangesMsb_eFrameNumberChanged = 1024,
  LayerState_ChangesMsb_eBlurRegionsChanged = 2048,
  LayerState_ChangesMsb_eAutoRefreshChanged = 4096,
  LayerState_ChangesMsb_eStretchChanged = 8192,
  LayerState_ChangesMsb_eTrustedOverlayChanged = 16384,
  LayerState_ChangesMsb_eDropInputModeChanged = 32768,
};
enum LayerState_Flags : int {
  LayerState_Flags_eFlagsNone = 0,
  LayerState_Flags_eLayerHidden = 1,
  LayerState_Flags_eLayerOpaque = 2,
  LayerState_Flags_eLayerSkipScreenshot = 64,
  LayerState_Flags_eLayerSecure = 128,
  LayerState_Flags_eEnableBackpressure = 256,
  LayerState_Flags_eLayerIsDisplayDecoration = 512,
};
enum LayerState_DropInputMode : int {
  LayerState_DropInputMode_NONE = 0,
  LayerState_DropInputMode_ALL = 1,
  LayerState_DropInputMode_OBSCURED = 2,
};
enum LayerState_BufferData_BufferDataChange : int {
  LayerState_BufferData_BufferDataChange_BufferDataChangeNone = 0,
  LayerState_BufferData_BufferDataChange_fenceChanged = 1,
  LayerState_BufferData_BufferDataChange_frameNumberChanged = 2,
  LayerState_BufferData_BufferDataChange_cachedBufferChanged = 4,
};
enum LayerState_BufferData_PixelFormat : int {
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_UNKNOWN = 0,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM = -4,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSLUCENT = -3,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSPARENT = -2,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_OPAQUE = -1,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_8888 = 1,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBX_8888 = 2,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_888 = 3,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_565 = 4,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_BGRA_8888 = 5,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_5551 = 6,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_4444 = 7,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_FP16 = 22,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_1010102 = 43,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8 = 56,
};
enum TransactionTraceFile_MagicNumber : int {
  TransactionTraceFile_MagicNumber_INVALID = 0,
  TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L = 1415073364,
  TransactionTraceFile_MagicNumber_MAGIC_NUMBER_H = 1162035538,
};

class PERFETTO_EXPORT_COMPONENT DisplayState : public ::protozero::CppMessageObj {
 public:
  using Changes = DisplayState_Changes;
  static constexpr auto eChangesNone = DisplayState_Changes_eChangesNone;
  static constexpr auto eSurfaceChanged = DisplayState_Changes_eSurfaceChanged;
  static constexpr auto eLayerStackChanged = DisplayState_Changes_eLayerStackChanged;
  static constexpr auto eDisplayProjectionChanged = DisplayState_Changes_eDisplayProjectionChanged;
  static constexpr auto eDisplaySizeChanged = DisplayState_Changes_eDisplaySizeChanged;
  static constexpr auto eFlagsChanged = DisplayState_Changes_eFlagsChanged;
  static constexpr auto Changes_MIN = DisplayState_Changes_eChangesNone;
  static constexpr auto Changes_MAX = DisplayState_Changes_eFlagsChanged;
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kLayerStackFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kLayerStackSpaceRectFieldNumber = 6,
    kOrientedDisplaySpaceRectFieldNumber = 7,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
  };

  DisplayState();
  ~DisplayState() override;
  DisplayState(DisplayState&&) noexcept;
  DisplayState& operator=(DisplayState&&);
  DisplayState(const DisplayState&);
  DisplayState& operator=(const DisplayState&);
  bool operator==(const DisplayState&) const;
  bool operator!=(const DisplayState& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  int32_t id() const { return id_; }
  void set_id(int32_t value) { id_ = value; _has_field_.set(1); }

  bool has_what() const { return _has_field_[2]; }
  uint32_t what() const { return what_; }
  void set_what(uint32_t value) { what_ = value; _has_field_.set(2); }

  bool has_flags() const { return _has_field_[3]; }
  uint32_t flags() const { return flags_; }
  void set_flags(uint32_t value) { flags_ = value; _has_field_.set(3); }

  bool has_layer_stack() const { return _has_field_[4]; }
  uint32_t layer_stack() const { return layer_stack_; }
  void set_layer_stack(uint32_t value) { layer_stack_ = value; _has_field_.set(4); }

  bool has_orientation() const { return _has_field_[5]; }
  uint32_t orientation() const { return orientation_; }
  void set_orientation(uint32_t value) { orientation_ = value; _has_field_.set(5); }

  bool has_layer_stack_space_rect() const { return _has_field_[6]; }
  const RectProto& layer_stack_space_rect() const { return *layer_stack_space_rect_; }
  RectProto* mutable_layer_stack_space_rect() { _has_field_.set(6); return layer_stack_space_rect_.get(); }

  bool has_oriented_display_space_rect() const { return _has_field_[7]; }
  const RectProto& oriented_display_space_rect() const { return *oriented_display_space_rect_; }
  RectProto* mutable_oriented_display_space_rect() { _has_field_.set(7); return oriented_display_space_rect_.get(); }

  bool has_width() const { return _has_field_[8]; }
  uint32_t width() const { return width_; }
  void set_width(uint32_t value) { width_ = value; _has_field_.set(8); }

  bool has_height() const { return _has_field_[9]; }
  uint32_t height() const { return height_; }
  void set_height(uint32_t value) { height_ = value; _has_field_.set(9); }

 private:
  int32_t id_{};
  uint32_t what_{};
  uint32_t flags_{};
  uint32_t layer_stack_{};
  uint32_t orientation_{};
  ::protozero::CopyablePtr<RectProto> layer_stack_space_rect_;
  ::protozero::CopyablePtr<RectProto> oriented_display_space_rect_;
  uint32_t width_{};
  uint32_t height_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT LayerState : public ::protozero::CppMessageObj {
 public:
  using Matrix22 = LayerState_Matrix22;
  using Color3 = LayerState_Color3;
  using BufferData = LayerState_BufferData;
  using WindowInfo = LayerState_WindowInfo;
  using ChangesLsb = LayerState_ChangesLsb;
  static constexpr auto eChangesLsbNone = LayerState_ChangesLsb_eChangesLsbNone;
  static constexpr auto ePositionChanged = LayerState_ChangesLsb_ePositionChanged;
  static constexpr auto eLayerChanged = LayerState_ChangesLsb_eLayerChanged;
  static constexpr auto eAlphaChanged = LayerState_ChangesLsb_eAlphaChanged;
  static constexpr auto eMatrixChanged = LayerState_ChangesLsb_eMatrixChanged;
  static constexpr auto eTransparentRegionChanged = LayerState_ChangesLsb_eTransparentRegionChanged;
  static constexpr auto eFlagsChanged = LayerState_ChangesLsb_eFlagsChanged;
  static constexpr auto eLayerStackChanged = LayerState_ChangesLsb_eLayerStackChanged;
  static constexpr auto eReleaseBufferListenerChanged = LayerState_ChangesLsb_eReleaseBufferListenerChanged;
  static constexpr auto eShadowRadiusChanged = LayerState_ChangesLsb_eShadowRadiusChanged;
  static constexpr auto eBufferCropChanged = LayerState_ChangesLsb_eBufferCropChanged;
  static constexpr auto eRelativeLayerChanged = LayerState_ChangesLsb_eRelativeLayerChanged;
  static constexpr auto eReparent = LayerState_ChangesLsb_eReparent;
  static constexpr auto eColorChanged = LayerState_ChangesLsb_eColorChanged;
  static constexpr auto eBufferTransformChanged = LayerState_ChangesLsb_eBufferTransformChanged;
  static constexpr auto eTransformToDisplayInverseChanged = LayerState_ChangesLsb_eTransformToDisplayInverseChanged;
  static constexpr auto eCropChanged = LayerState_ChangesLsb_eCropChanged;
  static constexpr auto eBufferChanged = LayerState_ChangesLsb_eBufferChanged;
  static constexpr auto eAcquireFenceChanged = LayerState_ChangesLsb_eAcquireFenceChanged;
  static constexpr auto eDataspaceChanged = LayerState_ChangesLsb_eDataspaceChanged;
  static constexpr auto eHdrMetadataChanged = LayerState_ChangesLsb_eHdrMetadataChanged;
  static constexpr auto eSurfaceDamageRegionChanged = LayerState_ChangesLsb_eSurfaceDamageRegionChanged;
  static constexpr auto eApiChanged = LayerState_ChangesLsb_eApiChanged;
  static constexpr auto eSidebandStreamChanged = LayerState_ChangesLsb_eSidebandStreamChanged;
  static constexpr auto eColorTransformChanged = LayerState_ChangesLsb_eColorTransformChanged;
  static constexpr auto eHasListenerCallbacksChanged = LayerState_ChangesLsb_eHasListenerCallbacksChanged;
  static constexpr auto eInputInfoChanged = LayerState_ChangesLsb_eInputInfoChanged;
  static constexpr auto eCornerRadiusChanged = LayerState_ChangesLsb_eCornerRadiusChanged;
  static constexpr auto ChangesLsb_MIN = LayerState_ChangesLsb_eCornerRadiusChanged;
  static constexpr auto ChangesLsb_MAX = LayerState_ChangesLsb_eInputInfoChanged;
  using ChangesMsb = LayerState_ChangesMsb;
  static constexpr auto eChangesMsbNone = LayerState_ChangesMsb_eChangesMsbNone;
  static constexpr auto eDestinationFrameChanged = LayerState_ChangesMsb_eDestinationFrameChanged;
  static constexpr auto eCachedBufferChanged = LayerState_ChangesMsb_eCachedBufferChanged;
  static constexpr auto eBackgroundColorChanged = LayerState_ChangesMsb_eBackgroundColorChanged;
  static constexpr auto eMetadataChanged = LayerState_ChangesMsb_eMetadataChanged;
  static constexpr auto eColorSpaceAgnosticChanged = LayerState_ChangesMsb_eColorSpaceAgnosticChanged;
  static constexpr auto eFrameRateSelectionPriority = LayerState_ChangesMsb_eFrameRateSelectionPriority;
  static constexpr auto eFrameRateChanged = LayerState_ChangesMsb_eFrameRateChanged;
  static constexpr auto eBackgroundBlurRadiusChanged = LayerState_ChangesMsb_eBackgroundBlurRadiusChanged;
  static constexpr auto eProducerDisconnect = LayerState_ChangesMsb_eProducerDisconnect;
  static constexpr auto eFixedTransformHintChanged = LayerState_ChangesMsb_eFixedTransformHintChanged;
  static constexpr auto eFrameNumberChanged = LayerState_ChangesMsb_eFrameNumberChanged;
  static constexpr auto eBlurRegionsChanged = LayerState_ChangesMsb_eBlurRegionsChanged;
  static constexpr auto eAutoRefreshChanged = LayerState_ChangesMsb_eAutoRefreshChanged;
  static constexpr auto eStretchChanged = LayerState_ChangesMsb_eStretchChanged;
  static constexpr auto eTrustedOverlayChanged = LayerState_ChangesMsb_eTrustedOverlayChanged;
  static constexpr auto eDropInputModeChanged = LayerState_ChangesMsb_eDropInputModeChanged;
  static constexpr auto ChangesMsb_MIN = LayerState_ChangesMsb_eChangesMsbNone;
  static constexpr auto ChangesMsb_MAX = LayerState_ChangesMsb_eDropInputModeChanged;
  using Flags = LayerState_Flags;
  static constexpr auto eFlagsNone = LayerState_Flags_eFlagsNone;
  static constexpr auto eLayerHidden = LayerState_Flags_eLayerHidden;
  static constexpr auto eLayerOpaque = LayerState_Flags_eLayerOpaque;
  static constexpr auto eLayerSkipScreenshot = LayerState_Flags_eLayerSkipScreenshot;
  static constexpr auto eLayerSecure = LayerState_Flags_eLayerSecure;
  static constexpr auto eEnableBackpressure = LayerState_Flags_eEnableBackpressure;
  static constexpr auto eLayerIsDisplayDecoration = LayerState_Flags_eLayerIsDisplayDecoration;
  static constexpr auto Flags_MIN = LayerState_Flags_eFlagsNone;
  static constexpr auto Flags_MAX = LayerState_Flags_eLayerIsDisplayDecoration;
  using DropInputMode = LayerState_DropInputMode;
  static constexpr auto NONE = LayerState_DropInputMode_NONE;
  static constexpr auto ALL = LayerState_DropInputMode_ALL;
  static constexpr auto OBSCURED = LayerState_DropInputMode_OBSCURED;
  static constexpr auto DropInputMode_MIN = LayerState_DropInputMode_NONE;
  static constexpr auto DropInputMode_MAX = LayerState_DropInputMode_OBSCURED;
  enum FieldNumbers {
    kLayerIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kWFieldNumber = 6,
    kHFieldNumber = 7,
    kLayerStackFieldNumber = 8,
    kFlagsFieldNumber = 9,
    kMaskFieldNumber = 10,
    kMatrixFieldNumber = 11,
    kCornerRadiusFieldNumber = 12,
    kBackgroundBlurRadiusFieldNumber = 13,
    kParentIdFieldNumber = 14,
    kRelativeParentIdFieldNumber = 15,
    kAlphaFieldNumber = 16,
    kColorFieldNumber = 17,
    kTransparentRegionFieldNumber = 18,
    kTransformFieldNumber = 19,
    kTransformToDisplayInverseFieldNumber = 20,
    kCropFieldNumber = 21,
    kBufferDataFieldNumber = 22,
    kApiFieldNumber = 23,
    kHasSidebandStreamFieldNumber = 24,
    kColorTransformFieldNumber = 25,
    kBlurRegionsFieldNumber = 26,
    kWindowInfoHandleFieldNumber = 27,
    kBgColorAlphaFieldNumber = 28,
    kBgColorDataspaceFieldNumber = 29,
    kColorSpaceAgnosticFieldNumber = 30,
    kShadowRadiusFieldNumber = 31,
    kFrameRateSelectionPriorityFieldNumber = 32,
    kFrameRateFieldNumber = 33,
    kFrameRateCompatibilityFieldNumber = 34,
    kChangeFrameRateStrategyFieldNumber = 35,
    kFixedTransformHintFieldNumber = 36,
    kFrameNumberFieldNumber = 37,
    kAutoRefreshFieldNumber = 38,
    kIsTrustedOverlayFieldNumber = 39,
    kBufferCropFieldNumber = 40,
    kDestinationFrameFieldNumber = 41,
    kDropInputModeFieldNumber = 42,
    kTrustedOverlayFieldNumber = 43,
  };

  LayerState();
  ~LayerState() override;
  LayerState(LayerState&&) noexcept;
  LayerState& operator=(LayerState&&);
  LayerState(const LayerState&);
  LayerState& operator=(const LayerState&);
  bool operator==(const LayerState&) const;
  bool operator!=(const LayerState& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_layer_id() const { return _has_field_[1]; }
  uint32_t layer_id() const { return layer_id_; }
  void set_layer_id(uint32_t value) { layer_id_ = value; _has_field_.set(1); }

  bool has_what() const { return _has_field_[2]; }
  uint64_t what() const { return what_; }
  void set_what(uint64_t value) { what_ = value; _has_field_.set(2); }

  bool has_x() const { return _has_field_[3]; }
  float x() const { return x_; }
  void set_x(float value) { x_ = value; _has_field_.set(3); }

  bool has_y() const { return _has_field_[4]; }
  float y() const { return y_; }
  void set_y(float value) { y_ = value; _has_field_.set(4); }

  bool has_z() const { return _has_field_[5]; }
  int32_t z() const { return z_; }
  void set_z(int32_t value) { z_ = value; _has_field_.set(5); }

  bool has_w() const { return _has_field_[6]; }
  uint32_t w() const { return w_; }
  void set_w(uint32_t value) { w_ = value; _has_field_.set(6); }

  bool has_h() const { return _has_field_[7]; }
  uint32_t h() const { return h_; }
  void set_h(uint32_t value) { h_ = value; _has_field_.set(7); }

  bool has_layer_stack() const { return _has_field_[8]; }
  uint32_t layer_stack() const { return layer_stack_; }
  void set_layer_stack(uint32_t value) { layer_stack_ = value; _has_field_.set(8); }

  bool has_flags() const { return _has_field_[9]; }
  uint32_t flags() const { return flags_; }
  void set_flags(uint32_t value) { flags_ = value; _has_field_.set(9); }

  bool has_mask() const { return _has_field_[10]; }
  uint32_t mask() const { return mask_; }
  void set_mask(uint32_t value) { mask_ = value; _has_field_.set(10); }

  bool has_matrix() const { return _has_field_[11]; }
  const LayerState_Matrix22& matrix() const { return *matrix_; }
  LayerState_Matrix22* mutable_matrix() { _has_field_.set(11); return matrix_.get(); }

  bool has_corner_radius() const { return _has_field_[12]; }
  float corner_radius() const { return corner_radius_; }
  void set_corner_radius(float value) { corner_radius_ = value; _has_field_.set(12); }

  bool has_background_blur_radius() const { return _has_field_[13]; }
  uint32_t background_blur_radius() const { return background_blur_radius_; }
  void set_background_blur_radius(uint32_t value) { background_blur_radius_ = value; _has_field_.set(13); }

  bool has_parent_id() const { return _has_field_[14]; }
  uint32_t parent_id() const { return parent_id_; }
  void set_parent_id(uint32_t value) { parent_id_ = value; _has_field_.set(14); }

  bool has_relative_parent_id() const { return _has_field_[15]; }
  uint32_t relative_parent_id() const { return relative_parent_id_; }
  void set_relative_parent_id(uint32_t value) { relative_parent_id_ = value; _has_field_.set(15); }

  bool has_alpha() const { return _has_field_[16]; }
  float alpha() const { return alpha_; }
  void set_alpha(float value) { alpha_ = value; _has_field_.set(16); }

  bool has_color() const { return _has_field_[17]; }
  const LayerState_Color3& color() const { return *color_; }
  LayerState_Color3* mutable_color() { _has_field_.set(17); return color_.get(); }

  bool has_transparent_region() const { return _has_field_[18]; }
  const RegionProto& transparent_region() const { return *transparent_region_; }
  RegionProto* mutable_transparent_region() { _has_field_.set(18); return transparent_region_.get(); }

  bool has_transform() const { return _has_field_[19]; }
  uint32_t transform() const { return transform_; }
  void set_transform(uint32_t value) { transform_ = value; _has_field_.set(19); }

  bool has_transform_to_display_inverse() const { return _has_field_[20]; }
  bool transform_to_display_inverse() const { return transform_to_display_inverse_; }
  void set_transform_to_display_inverse(bool value) { transform_to_display_inverse_ = value; _has_field_.set(20); }

  bool has_crop() const { return _has_field_[21]; }
  const RectProto& crop() const { return *crop_; }
  RectProto* mutable_crop() { _has_field_.set(21); return crop_.get(); }

  bool has_buffer_data() const { return _has_field_[22]; }
  const LayerState_BufferData& buffer_data() const { return *buffer_data_; }
  LayerState_BufferData* mutable_buffer_data() { _has_field_.set(22); return buffer_data_.get(); }

  bool has_api() const { return _has_field_[23]; }
  int32_t api() const { return api_; }
  void set_api(int32_t value) { api_ = value; _has_field_.set(23); }

  bool has_has_sideband_stream() const { return _has_field_[24]; }
  bool has_sideband_stream() const { return has_sideband_stream_; }
  void set_has_sideband_stream(bool value) { has_sideband_stream_ = value; _has_field_.set(24); }

  bool has_color_transform() const { return _has_field_[25]; }
  const ColorTransformProto& color_transform() const { return *color_transform_; }
  ColorTransformProto* mutable_color_transform() { _has_field_.set(25); return color_transform_.get(); }

  const std::vector<BlurRegion>& blur_regions() const { return blur_regions_; }
  std::vector<BlurRegion>* mutable_blur_regions() { return &blur_regions_; }
  int blur_regions_size() const;
  void clear_blur_regions();
  BlurRegion* add_blur_regions();

  bool has_window_info_handle() const { return _has_field_[27]; }
  const LayerState_WindowInfo& window_info_handle() const { return *window_info_handle_; }
  LayerState_WindowInfo* mutable_window_info_handle() { _has_field_.set(27); return window_info_handle_.get(); }

  bool has_bg_color_alpha() const { return _has_field_[28]; }
  float bg_color_alpha() const { return bg_color_alpha_; }
  void set_bg_color_alpha(float value) { bg_color_alpha_ = value; _has_field_.set(28); }

  bool has_bg_color_dataspace() const { return _has_field_[29]; }
  int32_t bg_color_dataspace() const { return bg_color_dataspace_; }
  void set_bg_color_dataspace(int32_t value) { bg_color_dataspace_ = value; _has_field_.set(29); }

  bool has_color_space_agnostic() const { return _has_field_[30]; }
  bool color_space_agnostic() const { return color_space_agnostic_; }
  void set_color_space_agnostic(bool value) { color_space_agnostic_ = value; _has_field_.set(30); }

  bool has_shadow_radius() const { return _has_field_[31]; }
  float shadow_radius() const { return shadow_radius_; }
  void set_shadow_radius(float value) { shadow_radius_ = value; _has_field_.set(31); }

  bool has_frame_rate_selection_priority() const { return _has_field_[32]; }
  int32_t frame_rate_selection_priority() const { return frame_rate_selection_priority_; }
  void set_frame_rate_selection_priority(int32_t value) { frame_rate_selection_priority_ = value; _has_field_.set(32); }

  bool has_frame_rate() const { return _has_field_[33]; }
  float frame_rate() const { return frame_rate_; }
  void set_frame_rate(float value) { frame_rate_ = value; _has_field_.set(33); }

  bool has_frame_rate_compatibility() const { return _has_field_[34]; }
  int32_t frame_rate_compatibility() const { return frame_rate_compatibility_; }
  void set_frame_rate_compatibility(int32_t value) { frame_rate_compatibility_ = value; _has_field_.set(34); }

  bool has_change_frame_rate_strategy() const { return _has_field_[35]; }
  int32_t change_frame_rate_strategy() const { return change_frame_rate_strategy_; }
  void set_change_frame_rate_strategy(int32_t value) { change_frame_rate_strategy_ = value; _has_field_.set(35); }

  bool has_fixed_transform_hint() const { return _has_field_[36]; }
  uint32_t fixed_transform_hint() const { return fixed_transform_hint_; }
  void set_fixed_transform_hint(uint32_t value) { fixed_transform_hint_ = value; _has_field_.set(36); }

  bool has_frame_number() const { return _has_field_[37]; }
  uint64_t frame_number() const { return frame_number_; }
  void set_frame_number(uint64_t value) { frame_number_ = value; _has_field_.set(37); }

  bool has_auto_refresh() const { return _has_field_[38]; }
  bool auto_refresh() const { return auto_refresh_; }
  void set_auto_refresh(bool value) { auto_refresh_ = value; _has_field_.set(38); }

  bool has_is_trusted_overlay() const { return _has_field_[39]; }
  bool is_trusted_overlay() const { return is_trusted_overlay_; }
  void set_is_trusted_overlay(bool value) { is_trusted_overlay_ = value; _has_field_.set(39); }

  bool has_buffer_crop() const { return _has_field_[40]; }
  const RectProto& buffer_crop() const { return *buffer_crop_; }
  RectProto* mutable_buffer_crop() { _has_field_.set(40); return buffer_crop_.get(); }

  bool has_destination_frame() const { return _has_field_[41]; }
  const RectProto& destination_frame() const { return *destination_frame_; }
  RectProto* mutable_destination_frame() { _has_field_.set(41); return destination_frame_.get(); }

  bool has_drop_input_mode() const { return _has_field_[42]; }
  LayerState_DropInputMode drop_input_mode() const { return drop_input_mode_; }
  void set_drop_input_mode(LayerState_DropInputMode value) { drop_input_mode_ = value; _has_field_.set(42); }

  bool has_trusted_overlay() const { return _has_field_[43]; }
  TrustedOverlay trusted_overlay() const { return trusted_overlay_; }
  void set_trusted_overlay(TrustedOverlay value) { trusted_overlay_ = value; _has_field_.set(43); }

 private:
  uint32_t layer_id_{};
  uint64_t what_{};
  float x_{};
  float y_{};
  int32_t z_{};
  uint32_t w_{};
  uint32_t h_{};
  uint32_t layer_stack_{};
  uint32_t flags_{};
  uint32_t mask_{};
  ::protozero::CopyablePtr<LayerState_Matrix22> matrix_;
  float corner_radius_{};
  uint32_t background_blur_radius_{};
  uint32_t parent_id_{};
  uint32_t relative_parent_id_{};
  float alpha_{};
  ::protozero::CopyablePtr<LayerState_Color3> color_;
  ::protozero::CopyablePtr<RegionProto> transparent_region_;
  uint32_t transform_{};
  bool transform_to_display_inverse_{};
  ::protozero::CopyablePtr<RectProto> crop_;
  ::protozero::CopyablePtr<LayerState_BufferData> buffer_data_;
  int32_t api_{};
  bool has_sideband_stream_{};
  ::protozero::CopyablePtr<ColorTransformProto> color_transform_;
  std::vector<BlurRegion> blur_regions_;
  ::protozero::CopyablePtr<LayerState_WindowInfo> window_info_handle_;
  float bg_color_alpha_{};
  int32_t bg_color_dataspace_{};
  bool color_space_agnostic_{};
  float shadow_radius_{};
  int32_t frame_rate_selection_priority_{};
  float frame_rate_{};
  int32_t frame_rate_compatibility_{};
  int32_t change_frame_rate_strategy_{};
  uint32_t fixed_transform_hint_{};
  uint64_t frame_number_{};
  bool auto_refresh_{};
  bool is_trusted_overlay_{};
  ::protozero::CopyablePtr<RectProto> buffer_crop_;
  ::protozero::CopyablePtr<RectProto> destination_frame_;
  LayerState_DropInputMode drop_input_mode_{};
  TrustedOverlay trusted_overlay_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<44> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT LayerState_WindowInfo : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kLayoutParamsFlagsFieldNumber = 1,
    kLayoutParamsTypeFieldNumber = 2,
    kTouchableRegionFieldNumber = 3,
    kSurfaceInsetFieldNumber = 4,
    kFocusableFieldNumber = 5,
    kHasWallpaperFieldNumber = 6,
    kGlobalScaleFactorFieldNumber = 7,
    kCropLayerIdFieldNumber = 8,
    kReplaceTouchableRegionWithCropFieldNumber = 9,
    kTouchableRegionCropFieldNumber = 10,
    kTransformFieldNumber = 11,
    kInputConfigFieldNumber = 12,
  };

  LayerState_WindowInfo();
  ~LayerState_WindowInfo() override;
  LayerState_WindowInfo(LayerState_WindowInfo&&) noexcept;
  LayerState_WindowInfo& operator=(LayerState_WindowInfo&&);
  LayerState_WindowInfo(const LayerState_WindowInfo&);
  LayerState_WindowInfo& operator=(const LayerState_WindowInfo&);
  bool operator==(const LayerState_WindowInfo&) const;
  bool operator!=(const LayerState_WindowInfo& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_layout_params_flags() const { return _has_field_[1]; }
  uint32_t layout_params_flags() const { return layout_params_flags_; }
  void set_layout_params_flags(uint32_t value) { layout_params_flags_ = value; _has_field_.set(1); }

  bool has_layout_params_type() const { return _has_field_[2]; }
  int32_t layout_params_type() const { return layout_params_type_; }
  void set_layout_params_type(int32_t value) { layout_params_type_ = value; _has_field_.set(2); }

  bool has_touchable_region() const { return _has_field_[3]; }
  const RegionProto& touchable_region() const { return *touchable_region_; }
  RegionProto* mutable_touchable_region() { _has_field_.set(3); return touchable_region_.get(); }

  bool has_surface_inset() const { return _has_field_[4]; }
  int32_t surface_inset() const { return surface_inset_; }
  void set_surface_inset(int32_t value) { surface_inset_ = value; _has_field_.set(4); }

  bool has_focusable() const { return _has_field_[5]; }
  bool focusable() const { return focusable_; }
  void set_focusable(bool value) { focusable_ = value; _has_field_.set(5); }

  bool has_has_wallpaper() const { return _has_field_[6]; }
  bool has_wallpaper() const { return has_wallpaper_; }
  void set_has_wallpaper(bool value) { has_wallpaper_ = value; _has_field_.set(6); }

  bool has_global_scale_factor() const { return _has_field_[7]; }
  float global_scale_factor() const { return global_scale_factor_; }
  void set_global_scale_factor(float value) { global_scale_factor_ = value; _has_field_.set(7); }

  bool has_crop_layer_id() const { return _has_field_[8]; }
  uint32_t crop_layer_id() const { return crop_layer_id_; }
  void set_crop_layer_id(uint32_t value) { crop_layer_id_ = value; _has_field_.set(8); }

  bool has_replace_touchable_region_with_crop() const { return _has_field_[9]; }
  bool replace_touchable_region_with_crop() const { return replace_touchable_region_with_crop_; }
  void set_replace_touchable_region_with_crop(bool value) { replace_touchable_region_with_crop_ = value; _has_field_.set(9); }

  bool has_touchable_region_crop() const { return _has_field_[10]; }
  const RectProto& touchable_region_crop() const { return *touchable_region_crop_; }
  RectProto* mutable_touchable_region_crop() { _has_field_.set(10); return touchable_region_crop_.get(); }

  bool has_transform() const { return _has_field_[11]; }
  const Transform& transform() const { return *transform_; }
  Transform* mutable_transform() { _has_field_.set(11); return transform_.get(); }

  bool has_input_config() const { return _has_field_[12]; }
  uint32_t input_config() const { return input_config_; }
  void set_input_config(uint32_t value) { input_config_ = value; _has_field_.set(12); }

 private:
  uint32_t layout_params_flags_{};
  int32_t layout_params_type_{};
  ::protozero::CopyablePtr<RegionProto> touchable_region_;
  int32_t surface_inset_{};
  bool focusable_{};
  bool has_wallpaper_{};
  float global_scale_factor_{};
  uint32_t crop_layer_id_{};
  bool replace_touchable_region_with_crop_{};
  ::protozero::CopyablePtr<RectProto> touchable_region_crop_;
  ::protozero::CopyablePtr<Transform> transform_;
  uint32_t input_config_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<13> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT Transform : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDtdyFieldNumber = 3,
    kDsdyFieldNumber = 4,
    kTxFieldNumber = 5,
    kTyFieldNumber = 6,
  };

  Transform();
  ~Transform() override;
  Transform(Transform&&) noexcept;
  Transform& operator=(Transform&&);
  Transform(const Transform&);
  Transform& operator=(const Transform&);
  bool operator==(const Transform&) const;
  bool operator!=(const Transform& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_dsdx() const { return _has_field_[1]; }
  float dsdx() const { return dsdx_; }
  void set_dsdx(float value) { dsdx_ = value; _has_field_.set(1); }

  bool has_dtdx() const { return _has_field_[2]; }
  float dtdx() const { return dtdx_; }
  void set_dtdx(float value) { dtdx_ = value; _has_field_.set(2); }

  bool has_dtdy() const { return _has_field_[3]; }
  float dtdy() const { return dtdy_; }
  void set_dtdy(float value) { dtdy_ = value; _has_field_.set(3); }

  bool has_dsdy() const { return _has_field_[4]; }
  float dsdy() const { return dsdy_; }
  void set_dsdy(float value) { dsdy_ = value; _has_field_.set(4); }

  bool has_tx() const { return _has_field_[5]; }
  float tx() const { return tx_; }
  void set_tx(float value) { tx_ = value; _has_field_.set(5); }

  bool has_ty() const { return _has_field_[6]; }
  float ty() const { return ty_; }
  void set_ty(float value) { ty_ = value; _has_field_.set(6); }

 private:
  float dsdx_{};
  float dtdx_{};
  float dtdy_{};
  float dsdy_{};
  float tx_{};
  float ty_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT LayerState_BufferData : public ::protozero::CppMessageObj {
 public:
  using BufferDataChange = LayerState_BufferData_BufferDataChange;
  static constexpr auto BufferDataChangeNone = LayerState_BufferData_BufferDataChange_BufferDataChangeNone;
  static constexpr auto fenceChanged = LayerState_BufferData_BufferDataChange_fenceChanged;
  static constexpr auto frameNumberChanged = LayerState_BufferData_BufferDataChange_frameNumberChanged;
  static constexpr auto cachedBufferChanged = LayerState_BufferData_BufferDataChange_cachedBufferChanged;
  static constexpr auto BufferDataChange_MIN = LayerState_BufferData_BufferDataChange_BufferDataChangeNone;
  static constexpr auto BufferDataChange_MAX = LayerState_BufferData_BufferDataChange_cachedBufferChanged;
  using PixelFormat = LayerState_BufferData_PixelFormat;
  static constexpr auto PIXEL_FORMAT_UNKNOWN = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_UNKNOWN;
  static constexpr auto PIXEL_FORMAT_CUSTOM = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM;
  static constexpr auto PIXEL_FORMAT_TRANSLUCENT = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSLUCENT;
  static constexpr auto PIXEL_FORMAT_TRANSPARENT = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSPARENT;
  static constexpr auto PIXEL_FORMAT_OPAQUE = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_OPAQUE;
  static constexpr auto PIXEL_FORMAT_RGBA_8888 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_8888;
  static constexpr auto PIXEL_FORMAT_RGBX_8888 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBX_8888;
  static constexpr auto PIXEL_FORMAT_RGB_888 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_888;
  static constexpr auto PIXEL_FORMAT_RGB_565 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_565;
  static constexpr auto PIXEL_FORMAT_BGRA_8888 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_BGRA_8888;
  static constexpr auto PIXEL_FORMAT_RGBA_5551 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_5551;
  static constexpr auto PIXEL_FORMAT_RGBA_4444 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_4444;
  static constexpr auto PIXEL_FORMAT_RGBA_FP16 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_FP16;
  static constexpr auto PIXEL_FORMAT_RGBA_1010102 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_1010102;
  static constexpr auto PIXEL_FORMAT_R_8 = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8;
  static constexpr auto PixelFormat_MIN = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM;
  static constexpr auto PixelFormat_MAX = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8;
  enum FieldNumbers {
    kBufferIdFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFrameNumberFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kCachedBufferIdFieldNumber = 6,
    kPixelFormatFieldNumber = 7,
    kUsageFieldNumber = 8,
  };

  LayerState_BufferData();
  ~LayerState_BufferData() override;
  LayerState_BufferData(LayerState_BufferData&&) noexcept;
  LayerState_BufferData& operator=(LayerState_BufferData&&);
  LayerState_BufferData(const LayerState_BufferData&);
  LayerState_BufferData& operator=(const LayerState_BufferData&);
  bool operator==(const LayerState_BufferData&) const;
  bool operator!=(const LayerState_BufferData& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_buffer_id() const { return _has_field_[1]; }
  uint64_t buffer_id() const { return buffer_id_; }
  void set_buffer_id(uint64_t value) { buffer_id_ = value; _has_field_.set(1); }

  bool has_width() const { return _has_field_[2]; }
  uint32_t width() const { return width_; }
  void set_width(uint32_t value) { width_ = value; _has_field_.set(2); }

  bool has_height() const { return _has_field_[3]; }
  uint32_t height() const { return height_; }
  void set_height(uint32_t value) { height_ = value; _has_field_.set(3); }

  bool has_frame_number() const { return _has_field_[4]; }
  uint64_t frame_number() const { return frame_number_; }
  void set_frame_number(uint64_t value) { frame_number_ = value; _has_field_.set(4); }

  bool has_flags() const { return _has_field_[5]; }
  uint32_t flags() const { return flags_; }
  void set_flags(uint32_t value) { flags_ = value; _has_field_.set(5); }

  bool has_cached_buffer_id() const { return _has_field_[6]; }
  uint64_t cached_buffer_id() const { return cached_buffer_id_; }
  void set_cached_buffer_id(uint64_t value) { cached_buffer_id_ = value; _has_field_.set(6); }

  bool has_pixel_format() const { return _has_field_[7]; }
  LayerState_BufferData_PixelFormat pixel_format() const { return pixel_format_; }
  void set_pixel_format(LayerState_BufferData_PixelFormat value) { pixel_format_ = value; _has_field_.set(7); }

  bool has_usage() const { return _has_field_[8]; }
  uint64_t usage() const { return usage_; }
  void set_usage(uint64_t value) { usage_ = value; _has_field_.set(8); }

 private:
  uint64_t buffer_id_{};
  uint32_t width_{};
  uint32_t height_{};
  uint64_t frame_number_{};
  uint32_t flags_{};
  uint64_t cached_buffer_id_{};
  LayerState_BufferData_PixelFormat pixel_format_{};
  uint64_t usage_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<9> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT LayerState_Color3 : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };

  LayerState_Color3();
  ~LayerState_Color3() override;
  LayerState_Color3(LayerState_Color3&&) noexcept;
  LayerState_Color3& operator=(LayerState_Color3&&);
  LayerState_Color3(const LayerState_Color3&);
  LayerState_Color3& operator=(const LayerState_Color3&);
  bool operator==(const LayerState_Color3&) const;
  bool operator!=(const LayerState_Color3& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_r() const { return _has_field_[1]; }
  float r() const { return r_; }
  void set_r(float value) { r_ = value; _has_field_.set(1); }

  bool has_g() const { return _has_field_[2]; }
  float g() const { return g_; }
  void set_g(float value) { g_ = value; _has_field_.set(2); }

  bool has_b() const { return _has_field_[3]; }
  float b() const { return b_; }
  void set_b(float value) { b_ = value; _has_field_.set(3); }

 private:
  float r_{};
  float g_{};
  float b_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT LayerState_Matrix22 : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDtdyFieldNumber = 3,
    kDsdyFieldNumber = 4,
  };

  LayerState_Matrix22();
  ~LayerState_Matrix22() override;
  LayerState_Matrix22(LayerState_Matrix22&&) noexcept;
  LayerState_Matrix22& operator=(LayerState_Matrix22&&);
  LayerState_Matrix22(const LayerState_Matrix22&);
  LayerState_Matrix22& operator=(const LayerState_Matrix22&);
  bool operator==(const LayerState_Matrix22&) const;
  bool operator!=(const LayerState_Matrix22& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_dsdx() const { return _has_field_[1]; }
  float dsdx() const { return dsdx_; }
  void set_dsdx(float value) { dsdx_ = value; _has_field_.set(1); }

  bool has_dtdx() const { return _has_field_[2]; }
  float dtdx() const { return dtdx_; }
  void set_dtdx(float value) { dtdx_ = value; _has_field_.set(2); }

  bool has_dtdy() const { return _has_field_[3]; }
  float dtdy() const { return dtdy_; }
  void set_dtdy(float value) { dtdy_ = value; _has_field_.set(3); }

  bool has_dsdy() const { return _has_field_[4]; }
  float dsdy() const { return dsdy_; }
  void set_dsdy(float value) { dsdy_ = value; _has_field_.set(4); }

 private:
  float dsdx_{};
  float dtdx_{};
  float dtdy_{};
  float dsdy_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TransactionState : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kUidFieldNumber = 2,
    kVsyncIdFieldNumber = 3,
    kInputEventIdFieldNumber = 4,
    kPostTimeFieldNumber = 5,
    kTransactionIdFieldNumber = 6,
    kLayerChangesFieldNumber = 7,
    kDisplayChangesFieldNumber = 8,
    kMergedTransactionIdsFieldNumber = 9,
  };

  TransactionState();
  ~TransactionState() override;
  TransactionState(TransactionState&&) noexcept;
  TransactionState& operator=(TransactionState&&);
  TransactionState(const TransactionState&);
  TransactionState& operator=(const TransactionState&);
  bool operator==(const TransactionState&) const;
  bool operator!=(const TransactionState& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_uid() const { return _has_field_[2]; }
  int32_t uid() const { return uid_; }
  void set_uid(int32_t value) { uid_ = value; _has_field_.set(2); }

  bool has_vsync_id() const { return _has_field_[3]; }
  int64_t vsync_id() const { return vsync_id_; }
  void set_vsync_id(int64_t value) { vsync_id_ = value; _has_field_.set(3); }

  bool has_input_event_id() const { return _has_field_[4]; }
  int32_t input_event_id() const { return input_event_id_; }
  void set_input_event_id(int32_t value) { input_event_id_ = value; _has_field_.set(4); }

  bool has_post_time() const { return _has_field_[5]; }
  int64_t post_time() const { return post_time_; }
  void set_post_time(int64_t value) { post_time_ = value; _has_field_.set(5); }

  bool has_transaction_id() const { return _has_field_[6]; }
  uint64_t transaction_id() const { return transaction_id_; }
  void set_transaction_id(uint64_t value) { transaction_id_ = value; _has_field_.set(6); }

  const std::vector<LayerState>& layer_changes() const { return layer_changes_; }
  std::vector<LayerState>* mutable_layer_changes() { return &layer_changes_; }
  int layer_changes_size() const;
  void clear_layer_changes();
  LayerState* add_layer_changes();

  const std::vector<DisplayState>& display_changes() const { return display_changes_; }
  std::vector<DisplayState>* mutable_display_changes() { return &display_changes_; }
  int display_changes_size() const;
  void clear_display_changes();
  DisplayState* add_display_changes();

  const std::vector<uint64_t>& merged_transaction_ids() const { return merged_transaction_ids_; }
  std::vector<uint64_t>* mutable_merged_transaction_ids() { return &merged_transaction_ids_; }
  int merged_transaction_ids_size() const { return static_cast<int>(merged_transaction_ids_.size()); }
  void clear_merged_transaction_ids() { merged_transaction_ids_.clear(); }
  void add_merged_transaction_ids(uint64_t value) { merged_transaction_ids_.emplace_back(value); }
  uint64_t* add_merged_transaction_ids() { merged_transaction_ids_.emplace_back(); return &merged_transaction_ids_.back(); }

 private:
  int32_t pid_{};
  int32_t uid_{};
  int64_t vsync_id_{};
  int32_t input_event_id_{};
  int64_t post_time_{};
  uint64_t transaction_id_{};
  std::vector<LayerState> layer_changes_;
  std::vector<DisplayState> display_changes_;
  std::vector<uint64_t> merged_transaction_ids_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT LayerCreationArgs : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kLayerIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kParentIdFieldNumber = 4,
    kMirrorFromIdFieldNumber = 5,
    kAddToRootFieldNumber = 6,
    kLayerStackToMirrorFieldNumber = 7,
  };

  LayerCreationArgs();
  ~LayerCreationArgs() override;
  LayerCreationArgs(LayerCreationArgs&&) noexcept;
  LayerCreationArgs& operator=(LayerCreationArgs&&);
  LayerCreationArgs(const LayerCreationArgs&);
  LayerCreationArgs& operator=(const LayerCreationArgs&);
  bool operator==(const LayerCreationArgs&) const;
  bool operator!=(const LayerCreationArgs& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_layer_id() const { return _has_field_[1]; }
  uint32_t layer_id() const { return layer_id_; }
  void set_layer_id(uint32_t value) { layer_id_ = value; _has_field_.set(1); }

  bool has_name() const { return _has_field_[2]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(2); }

  bool has_flags() const { return _has_field_[3]; }
  uint32_t flags() const { return flags_; }
  void set_flags(uint32_t value) { flags_ = value; _has_field_.set(3); }

  bool has_parent_id() const { return _has_field_[4]; }
  uint32_t parent_id() const { return parent_id_; }
  void set_parent_id(uint32_t value) { parent_id_ = value; _has_field_.set(4); }

  bool has_mirror_from_id() const { return _has_field_[5]; }
  uint32_t mirror_from_id() const { return mirror_from_id_; }
  void set_mirror_from_id(uint32_t value) { mirror_from_id_ = value; _has_field_.set(5); }

  bool has_add_to_root() const { return _has_field_[6]; }
  bool add_to_root() const { return add_to_root_; }
  void set_add_to_root(bool value) { add_to_root_ = value; _has_field_.set(6); }

  bool has_layer_stack_to_mirror() const { return _has_field_[7]; }
  uint32_t layer_stack_to_mirror() const { return layer_stack_to_mirror_; }
  void set_layer_stack_to_mirror(uint32_t value) { layer_stack_to_mirror_ = value; _has_field_.set(7); }

 private:
  uint32_t layer_id_{};
  std::string name_{};
  uint32_t flags_{};
  uint32_t parent_id_{};
  uint32_t mirror_from_id_{};
  bool add_to_root_{};
  uint32_t layer_stack_to_mirror_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<8> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT DisplayInfo : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kLayerStackFieldNumber = 1,
    kDisplayIdFieldNumber = 2,
    kLogicalWidthFieldNumber = 3,
    kLogicalHeightFieldNumber = 4,
    kTransformInverseFieldNumber = 5,
    kTransformFieldNumber = 6,
    kReceivesInputFieldNumber = 7,
    kIsSecureFieldNumber = 8,
    kIsPrimaryFieldNumber = 9,
    kIsVirtualFieldNumber = 10,
    kRotationFlagsFieldNumber = 11,
    kTransformHintFieldNumber = 12,
  };

  DisplayInfo();
  ~DisplayInfo() override;
  DisplayInfo(DisplayInfo&&) noexcept;
  DisplayInfo& operator=(DisplayInfo&&);
  DisplayInfo(const DisplayInfo&);
  DisplayInfo& operator=(const DisplayInfo&);
  bool operator==(const DisplayInfo&) const;
  bool operator!=(const DisplayInfo& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_layer_stack() const { return _has_field_[1]; }
  uint32_t layer_stack() const { return layer_stack_; }
  void set_layer_stack(uint32_t value) { layer_stack_ = value; _has_field_.set(1); }

  bool has_display_id() const { return _has_field_[2]; }
  int32_t display_id() const { return display_id_; }
  void set_display_id(int32_t value) { display_id_ = value; _has_field_.set(2); }

  bool has_logical_width() const { return _has_field_[3]; }
  int32_t logical_width() const { return logical_width_; }
  void set_logical_width(int32_t value) { logical_width_ = value; _has_field_.set(3); }

  bool has_logical_height() const { return _has_field_[4]; }
  int32_t logical_height() const { return logical_height_; }
  void set_logical_height(int32_t value) { logical_height_ = value; _has_field_.set(4); }

  bool has_transform_inverse() const { return _has_field_[5]; }
  const Transform& transform_inverse() const { return *transform_inverse_; }
  Transform* mutable_transform_inverse() { _has_field_.set(5); return transform_inverse_.get(); }

  bool has_transform() const { return _has_field_[6]; }
  const Transform& transform() const { return *transform_; }
  Transform* mutable_transform() { _has_field_.set(6); return transform_.get(); }

  bool has_receives_input() const { return _has_field_[7]; }
  bool receives_input() const { return receives_input_; }
  void set_receives_input(bool value) { receives_input_ = value; _has_field_.set(7); }

  bool has_is_secure() const { return _has_field_[8]; }
  bool is_secure() const { return is_secure_; }
  void set_is_secure(bool value) { is_secure_ = value; _has_field_.set(8); }

  bool has_is_primary() const { return _has_field_[9]; }
  bool is_primary() const { return is_primary_; }
  void set_is_primary(bool value) { is_primary_ = value; _has_field_.set(9); }

  bool has_is_virtual() const { return _has_field_[10]; }
  bool is_virtual() const { return is_virtual_; }
  void set_is_virtual(bool value) { is_virtual_ = value; _has_field_.set(10); }

  bool has_rotation_flags() const { return _has_field_[11]; }
  int32_t rotation_flags() const { return rotation_flags_; }
  void set_rotation_flags(int32_t value) { rotation_flags_ = value; _has_field_.set(11); }

  bool has_transform_hint() const { return _has_field_[12]; }
  int32_t transform_hint() const { return transform_hint_; }
  void set_transform_hint(int32_t value) { transform_hint_ = value; _has_field_.set(12); }

 private:
  uint32_t layer_stack_{};
  int32_t display_id_{};
  int32_t logical_width_{};
  int32_t logical_height_{};
  ::protozero::CopyablePtr<Transform> transform_inverse_;
  ::protozero::CopyablePtr<Transform> transform_;
  bool receives_input_{};
  bool is_secure_{};
  bool is_primary_{};
  bool is_virtual_{};
  int32_t rotation_flags_{};
  int32_t transform_hint_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<13> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TransactionTraceEntry : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kElapsedRealtimeNanosFieldNumber = 1,
    kVsyncIdFieldNumber = 2,
    kTransactionsFieldNumber = 3,
    kAddedLayersFieldNumber = 4,
    kDestroyedLayersFieldNumber = 5,
    kAddedDisplaysFieldNumber = 6,
    kRemovedDisplaysFieldNumber = 7,
    kDestroyedLayerHandlesFieldNumber = 8,
    kDisplaysChangedFieldNumber = 9,
    kDisplaysFieldNumber = 10,
  };

  TransactionTraceEntry();
  ~TransactionTraceEntry() override;
  TransactionTraceEntry(TransactionTraceEntry&&) noexcept;
  TransactionTraceEntry& operator=(TransactionTraceEntry&&);
  TransactionTraceEntry(const TransactionTraceEntry&);
  TransactionTraceEntry& operator=(const TransactionTraceEntry&);
  bool operator==(const TransactionTraceEntry&) const;
  bool operator!=(const TransactionTraceEntry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_elapsed_realtime_nanos() const { return _has_field_[1]; }
  int64_t elapsed_realtime_nanos() const { return elapsed_realtime_nanos_; }
  void set_elapsed_realtime_nanos(int64_t value) { elapsed_realtime_nanos_ = value; _has_field_.set(1); }

  bool has_vsync_id() const { return _has_field_[2]; }
  int64_t vsync_id() const { return vsync_id_; }
  void set_vsync_id(int64_t value) { vsync_id_ = value; _has_field_.set(2); }

  const std::vector<TransactionState>& transactions() const { return transactions_; }
  std::vector<TransactionState>* mutable_transactions() { return &transactions_; }
  int transactions_size() const;
  void clear_transactions();
  TransactionState* add_transactions();

  const std::vector<LayerCreationArgs>& added_layers() const { return added_layers_; }
  std::vector<LayerCreationArgs>* mutable_added_layers() { return &added_layers_; }
  int added_layers_size() const;
  void clear_added_layers();
  LayerCreationArgs* add_added_layers();

  const std::vector<uint32_t>& destroyed_layers() const { return destroyed_layers_; }
  std::vector<uint32_t>* mutable_destroyed_layers() { return &destroyed_layers_; }
  int destroyed_layers_size() const { return static_cast<int>(destroyed_layers_.size()); }
  void clear_destroyed_layers() { destroyed_layers_.clear(); }
  void add_destroyed_layers(uint32_t value) { destroyed_layers_.emplace_back(value); }
  uint32_t* add_destroyed_layers() { destroyed_layers_.emplace_back(); return &destroyed_layers_.back(); }

  const std::vector<DisplayState>& added_displays() const { return added_displays_; }
  std::vector<DisplayState>* mutable_added_displays() { return &added_displays_; }
  int added_displays_size() const;
  void clear_added_displays();
  DisplayState* add_added_displays();

  const std::vector<int32_t>& removed_displays() const { return removed_displays_; }
  std::vector<int32_t>* mutable_removed_displays() { return &removed_displays_; }
  int removed_displays_size() const { return static_cast<int>(removed_displays_.size()); }
  void clear_removed_displays() { removed_displays_.clear(); }
  void add_removed_displays(int32_t value) { removed_displays_.emplace_back(value); }
  int32_t* add_removed_displays() { removed_displays_.emplace_back(); return &removed_displays_.back(); }

  const std::vector<uint32_t>& destroyed_layer_handles() const { return destroyed_layer_handles_; }
  std::vector<uint32_t>* mutable_destroyed_layer_handles() { return &destroyed_layer_handles_; }
  int destroyed_layer_handles_size() const { return static_cast<int>(destroyed_layer_handles_.size()); }
  void clear_destroyed_layer_handles() { destroyed_layer_handles_.clear(); }
  void add_destroyed_layer_handles(uint32_t value) { destroyed_layer_handles_.emplace_back(value); }
  uint32_t* add_destroyed_layer_handles() { destroyed_layer_handles_.emplace_back(); return &destroyed_layer_handles_.back(); }

  bool has_displays_changed() const { return _has_field_[9]; }
  bool displays_changed() const { return displays_changed_; }
  void set_displays_changed(bool value) { displays_changed_ = value; _has_field_.set(9); }

  const std::vector<DisplayInfo>& displays() const { return displays_; }
  std::vector<DisplayInfo>* mutable_displays() { return &displays_; }
  int displays_size() const;
  void clear_displays();
  DisplayInfo* add_displays();

 private:
  int64_t elapsed_realtime_nanos_{};
  int64_t vsync_id_{};
  std::vector<TransactionState> transactions_;
  std::vector<LayerCreationArgs> added_layers_;
  std::vector<uint32_t> destroyed_layers_;
  std::vector<DisplayState> added_displays_;
  std::vector<int32_t> removed_displays_;
  std::vector<uint32_t> destroyed_layer_handles_;
  bool displays_changed_{};
  std::vector<DisplayInfo> displays_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<11> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TransactionTraceFile : public ::protozero::CppMessageObj {
 public:
  using MagicNumber = TransactionTraceFile_MagicNumber;
  static constexpr auto INVALID = TransactionTraceFile_MagicNumber_INVALID;
  static constexpr auto MAGIC_NUMBER_L = TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L;
  static constexpr auto MAGIC_NUMBER_H = TransactionTraceFile_MagicNumber_MAGIC_NUMBER_H;
  static constexpr auto MagicNumber_MIN = TransactionTraceFile_MagicNumber_INVALID;
  static constexpr auto MagicNumber_MAX = TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L;
  enum FieldNumbers {
    kMagicNumberFieldNumber = 1,
    kEntryFieldNumber = 2,
    kRealToElapsedTimeOffsetNanosFieldNumber = 3,
    kVersionFieldNumber = 4,
  };

  TransactionTraceFile();
  ~TransactionTraceFile() override;
  TransactionTraceFile(TransactionTraceFile&&) noexcept;
  TransactionTraceFile& operator=(TransactionTraceFile&&);
  TransactionTraceFile(const TransactionTraceFile&);
  TransactionTraceFile& operator=(const TransactionTraceFile&);
  bool operator==(const TransactionTraceFile&) const;
  bool operator!=(const TransactionTraceFile& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_magic_number() const { return _has_field_[1]; }
  uint64_t magic_number() const { return magic_number_; }
  void set_magic_number(uint64_t value) { magic_number_ = value; _has_field_.set(1); }

  const std::vector<TransactionTraceEntry>& entry() const { return entry_; }
  std::vector<TransactionTraceEntry>* mutable_entry() { return &entry_; }
  int entry_size() const;
  void clear_entry();
  TransactionTraceEntry* add_entry();

  bool has_real_to_elapsed_time_offset_nanos() const { return _has_field_[3]; }
  uint64_t real_to_elapsed_time_offset_nanos() const { return real_to_elapsed_time_offset_nanos_; }
  void set_real_to_elapsed_time_offset_nanos(uint64_t value) { real_to_elapsed_time_offset_nanos_ = value; _has_field_.set(3); }

  bool has_version() const { return _has_field_[4]; }
  uint32_t version() const { return version_; }
  void set_version(uint32_t value) { version_ = value; _has_field_.set(4); }

 private:
  uint64_t magic_number_{};
  std::vector<TransactionTraceEntry> entry_;
  uint64_t real_to_elapsed_time_offset_nanos_{};
  uint32_t version_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SURFACEFLINGER_TRANSACTIONS_PROTO_CPP_H_
