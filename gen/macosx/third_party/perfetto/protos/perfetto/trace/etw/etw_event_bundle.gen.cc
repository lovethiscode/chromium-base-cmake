#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/etw/etw_event_bundle.gen.h"
#include "protos/perfetto/trace/etw/etw_event.gen.h"
#include "protos/perfetto/trace/etw/etw.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

EtwTraceEventBundle::EtwTraceEventBundle() = default;
EtwTraceEventBundle::~EtwTraceEventBundle() = default;
EtwTraceEventBundle::EtwTraceEventBundle(const EtwTraceEventBundle&) = default;
EtwTraceEventBundle& EtwTraceEventBundle::operator=(const EtwTraceEventBundle&) = default;
EtwTraceEventBundle::EtwTraceEventBundle(EtwTraceEventBundle&&) noexcept = default;
EtwTraceEventBundle& EtwTraceEventBundle::operator=(EtwTraceEventBundle&&) = default;

bool EtwTraceEventBundle::operator==(const EtwTraceEventBundle& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_, other.cpu_)
   && ::protozero::internal::gen_helpers::EqualsField(event_, other.event_);
}

int EtwTraceEventBundle::event_size() const { return static_cast<int>(event_.size()); }
void EtwTraceEventBundle::clear_event() { event_.clear(); }
EtwTraceEvent* EtwTraceEventBundle::add_event() { event_.emplace_back(); return &event_.back(); }
bool EtwTraceEventBundle::ParseFromArray(const void* raw, size_t size) {
  event_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* event */:
        event_.emplace_back();
        event_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string EtwTraceEventBundle::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> EtwTraceEventBundle::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void EtwTraceEventBundle::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cpu_, msg);
  }

  // Field 2: event
  for (auto& it : event_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
