// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/etw/etw.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fetw_2fetw_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fetw_2fetw_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fetw_2fetw_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fetw_2fetw_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class CSwitchEtwEvent;
struct CSwitchEtwEventDefaultTypeInternal;
extern CSwitchEtwEventDefaultTypeInternal _CSwitchEtwEvent_default_instance_;
class ReadyThreadEtwEvent;
struct ReadyThreadEtwEventDefaultTypeInternal;
extern ReadyThreadEtwEventDefaultTypeInternal _ReadyThreadEtwEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::CSwitchEtwEvent* Arena::CreateMaybeMessage<::perfetto::protos::CSwitchEtwEvent>(Arena*);
template<> ::perfetto::protos::ReadyThreadEtwEvent* Arena::CreateMaybeMessage<::perfetto::protos::ReadyThreadEtwEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum CSwitchEtwEvent_OldThreadWaitReason : int {
  CSwitchEtwEvent_OldThreadWaitReason_EXECUTIVE = 0,
  CSwitchEtwEvent_OldThreadWaitReason_FREE_PAGE = 1,
  CSwitchEtwEvent_OldThreadWaitReason_PAGE_IN = 2,
  CSwitchEtwEvent_OldThreadWaitReason_POOL_ALLOCATION = 3,
  CSwitchEtwEvent_OldThreadWaitReason_DELAY_EXECUTION = 4,
  CSwitchEtwEvent_OldThreadWaitReason_SUSPEND = 5,
  CSwitchEtwEvent_OldThreadWaitReason_USER_REQUEST = 6,
  CSwitchEtwEvent_OldThreadWaitReason_WR_EXECUTIVE = 7,
  CSwitchEtwEvent_OldThreadWaitReason_WR_FREE_PAGE = 8,
  CSwitchEtwEvent_OldThreadWaitReason_WR_PAGE_IN = 9,
  CSwitchEtwEvent_OldThreadWaitReason_WR_POOL_ALLOCATION = 10,
  CSwitchEtwEvent_OldThreadWaitReason_WR_DELAY_EXECUTION = 11,
  CSwitchEtwEvent_OldThreadWaitReason_WR_SUSPENDED = 12,
  CSwitchEtwEvent_OldThreadWaitReason_WR_USER_REQUEST = 13,
  CSwitchEtwEvent_OldThreadWaitReason_WR_EVENT_PAIR = 14,
  CSwitchEtwEvent_OldThreadWaitReason_WR_QUEUE = 15,
  CSwitchEtwEvent_OldThreadWaitReason_WR_LPC_RECEIVER = 16,
  CSwitchEtwEvent_OldThreadWaitReason_WR_LPC_REPLY = 17,
  CSwitchEtwEvent_OldThreadWaitReason_WR_VIRTUAL_MEMORY = 18,
  CSwitchEtwEvent_OldThreadWaitReason_WR_PAGE_OUT = 19,
  CSwitchEtwEvent_OldThreadWaitReason_WR_RENDEZ_VOUS = 20,
  CSwitchEtwEvent_OldThreadWaitReason_WR_KEYED_EVENT = 21,
  CSwitchEtwEvent_OldThreadWaitReason_WR_TERMINATED = 22,
  CSwitchEtwEvent_OldThreadWaitReason_WR_PROCESS_IN_SWAP = 23,
  CSwitchEtwEvent_OldThreadWaitReason_WR_CPU_RATE_CONTROL = 24,
  CSwitchEtwEvent_OldThreadWaitReason_WR_CALLOUT_STACK = 25,
  CSwitchEtwEvent_OldThreadWaitReason_WR_KERNEL = 26,
  CSwitchEtwEvent_OldThreadWaitReason_WR_RESOURCE = 27,
  CSwitchEtwEvent_OldThreadWaitReason_WR_PUSH_LOCK = 28,
  CSwitchEtwEvent_OldThreadWaitReason_WR_MUTEX = 29,
  CSwitchEtwEvent_OldThreadWaitReason_WR_QUANTUM_END = 30,
  CSwitchEtwEvent_OldThreadWaitReason_WR_DISPATCH_INT = 31,
  CSwitchEtwEvent_OldThreadWaitReason_WR_PREEMPTED = 32,
  CSwitchEtwEvent_OldThreadWaitReason_WR_YIELD_EXECUTION = 33,
  CSwitchEtwEvent_OldThreadWaitReason_WR_FAST_MUTEX = 34,
  CSwitchEtwEvent_OldThreadWaitReason_WR_GUARD_MUTEX = 35,
  CSwitchEtwEvent_OldThreadWaitReason_WR_RUNDOWN = 36,
  CSwitchEtwEvent_OldThreadWaitReason_MAXIMUM_WAIT_REASON = 37
};
bool CSwitchEtwEvent_OldThreadWaitReason_IsValid(int value);
constexpr CSwitchEtwEvent_OldThreadWaitReason CSwitchEtwEvent_OldThreadWaitReason_OldThreadWaitReason_MIN = CSwitchEtwEvent_OldThreadWaitReason_EXECUTIVE;
constexpr CSwitchEtwEvent_OldThreadWaitReason CSwitchEtwEvent_OldThreadWaitReason_OldThreadWaitReason_MAX = CSwitchEtwEvent_OldThreadWaitReason_MAXIMUM_WAIT_REASON;
constexpr int CSwitchEtwEvent_OldThreadWaitReason_OldThreadWaitReason_ARRAYSIZE = CSwitchEtwEvent_OldThreadWaitReason_OldThreadWaitReason_MAX + 1;

const std::string& CSwitchEtwEvent_OldThreadWaitReason_Name(CSwitchEtwEvent_OldThreadWaitReason value);
template<typename T>
inline const std::string& CSwitchEtwEvent_OldThreadWaitReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSwitchEtwEvent_OldThreadWaitReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSwitchEtwEvent_OldThreadWaitReason_Name.");
  return CSwitchEtwEvent_OldThreadWaitReason_Name(static_cast<CSwitchEtwEvent_OldThreadWaitReason>(enum_t_value));
}
bool CSwitchEtwEvent_OldThreadWaitReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSwitchEtwEvent_OldThreadWaitReason* value);
enum CSwitchEtwEvent_OldThreadWaitMode : int {
  CSwitchEtwEvent_OldThreadWaitMode_KERNEL_MODE = 0,
  CSwitchEtwEvent_OldThreadWaitMode_USER_MODE = 1
};
bool CSwitchEtwEvent_OldThreadWaitMode_IsValid(int value);
constexpr CSwitchEtwEvent_OldThreadWaitMode CSwitchEtwEvent_OldThreadWaitMode_OldThreadWaitMode_MIN = CSwitchEtwEvent_OldThreadWaitMode_KERNEL_MODE;
constexpr CSwitchEtwEvent_OldThreadWaitMode CSwitchEtwEvent_OldThreadWaitMode_OldThreadWaitMode_MAX = CSwitchEtwEvent_OldThreadWaitMode_USER_MODE;
constexpr int CSwitchEtwEvent_OldThreadWaitMode_OldThreadWaitMode_ARRAYSIZE = CSwitchEtwEvent_OldThreadWaitMode_OldThreadWaitMode_MAX + 1;

const std::string& CSwitchEtwEvent_OldThreadWaitMode_Name(CSwitchEtwEvent_OldThreadWaitMode value);
template<typename T>
inline const std::string& CSwitchEtwEvent_OldThreadWaitMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSwitchEtwEvent_OldThreadWaitMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSwitchEtwEvent_OldThreadWaitMode_Name.");
  return CSwitchEtwEvent_OldThreadWaitMode_Name(static_cast<CSwitchEtwEvent_OldThreadWaitMode>(enum_t_value));
}
bool CSwitchEtwEvent_OldThreadWaitMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSwitchEtwEvent_OldThreadWaitMode* value);
enum CSwitchEtwEvent_OldThreadState : int {
  CSwitchEtwEvent_OldThreadState_INITIALIZED = 0,
  CSwitchEtwEvent_OldThreadState_READY = 1,
  CSwitchEtwEvent_OldThreadState_RUNNING = 2,
  CSwitchEtwEvent_OldThreadState_STANDBY = 3,
  CSwitchEtwEvent_OldThreadState_TERMINATED = 4,
  CSwitchEtwEvent_OldThreadState_WAITING = 5,
  CSwitchEtwEvent_OldThreadState_TRANSITION = 6,
  CSwitchEtwEvent_OldThreadState_DEFERRED_READY = 7
};
bool CSwitchEtwEvent_OldThreadState_IsValid(int value);
constexpr CSwitchEtwEvent_OldThreadState CSwitchEtwEvent_OldThreadState_OldThreadState_MIN = CSwitchEtwEvent_OldThreadState_INITIALIZED;
constexpr CSwitchEtwEvent_OldThreadState CSwitchEtwEvent_OldThreadState_OldThreadState_MAX = CSwitchEtwEvent_OldThreadState_DEFERRED_READY;
constexpr int CSwitchEtwEvent_OldThreadState_OldThreadState_ARRAYSIZE = CSwitchEtwEvent_OldThreadState_OldThreadState_MAX + 1;

const std::string& CSwitchEtwEvent_OldThreadState_Name(CSwitchEtwEvent_OldThreadState value);
template<typename T>
inline const std::string& CSwitchEtwEvent_OldThreadState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSwitchEtwEvent_OldThreadState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSwitchEtwEvent_OldThreadState_Name.");
  return CSwitchEtwEvent_OldThreadState_Name(static_cast<CSwitchEtwEvent_OldThreadState>(enum_t_value));
}
bool CSwitchEtwEvent_OldThreadState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSwitchEtwEvent_OldThreadState* value);
enum ReadyThreadEtwEvent_AdjustReason : int {
  ReadyThreadEtwEvent_AdjustReason_IGNORE_THE_INCREMENT = 0,
  ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT = 1,
  ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT_BOOST = 2
};
bool ReadyThreadEtwEvent_AdjustReason_IsValid(int value);
constexpr ReadyThreadEtwEvent_AdjustReason ReadyThreadEtwEvent_AdjustReason_AdjustReason_MIN = ReadyThreadEtwEvent_AdjustReason_IGNORE_THE_INCREMENT;
constexpr ReadyThreadEtwEvent_AdjustReason ReadyThreadEtwEvent_AdjustReason_AdjustReason_MAX = ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT_BOOST;
constexpr int ReadyThreadEtwEvent_AdjustReason_AdjustReason_ARRAYSIZE = ReadyThreadEtwEvent_AdjustReason_AdjustReason_MAX + 1;

const std::string& ReadyThreadEtwEvent_AdjustReason_Name(ReadyThreadEtwEvent_AdjustReason value);
template<typename T>
inline const std::string& ReadyThreadEtwEvent_AdjustReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadyThreadEtwEvent_AdjustReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadyThreadEtwEvent_AdjustReason_Name.");
  return ReadyThreadEtwEvent_AdjustReason_Name(static_cast<ReadyThreadEtwEvent_AdjustReason>(enum_t_value));
}
bool ReadyThreadEtwEvent_AdjustReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadyThreadEtwEvent_AdjustReason* value);
enum ReadyThreadEtwEvent_TraceFlag : int {
  ReadyThreadEtwEvent_TraceFlag_TRACE_FLAG_UNSPECIFIED = 0,
  ReadyThreadEtwEvent_TraceFlag_THREAD_READIED = 1,
  ReadyThreadEtwEvent_TraceFlag_KERNEL_STACK_SWAPPED_OUT = 2,
  ReadyThreadEtwEvent_TraceFlag_PROCESS_ADDRESS_SWAPPED_OUT = 4
};
bool ReadyThreadEtwEvent_TraceFlag_IsValid(int value);
constexpr ReadyThreadEtwEvent_TraceFlag ReadyThreadEtwEvent_TraceFlag_TraceFlag_MIN = ReadyThreadEtwEvent_TraceFlag_TRACE_FLAG_UNSPECIFIED;
constexpr ReadyThreadEtwEvent_TraceFlag ReadyThreadEtwEvent_TraceFlag_TraceFlag_MAX = ReadyThreadEtwEvent_TraceFlag_PROCESS_ADDRESS_SWAPPED_OUT;
constexpr int ReadyThreadEtwEvent_TraceFlag_TraceFlag_ARRAYSIZE = ReadyThreadEtwEvent_TraceFlag_TraceFlag_MAX + 1;

const std::string& ReadyThreadEtwEvent_TraceFlag_Name(ReadyThreadEtwEvent_TraceFlag value);
template<typename T>
inline const std::string& ReadyThreadEtwEvent_TraceFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadyThreadEtwEvent_TraceFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadyThreadEtwEvent_TraceFlag_Name.");
  return ReadyThreadEtwEvent_TraceFlag_Name(static_cast<ReadyThreadEtwEvent_TraceFlag>(enum_t_value));
}
bool ReadyThreadEtwEvent_TraceFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadyThreadEtwEvent_TraceFlag* value);
// ===================================================================

class CSwitchEtwEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.CSwitchEtwEvent) */ {
 public:
  inline CSwitchEtwEvent() : CSwitchEtwEvent(nullptr) {}
  ~CSwitchEtwEvent() override;
  explicit PROTOBUF_CONSTEXPR CSwitchEtwEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSwitchEtwEvent(const CSwitchEtwEvent& from);
  CSwitchEtwEvent(CSwitchEtwEvent&& from) noexcept
    : CSwitchEtwEvent() {
    *this = ::std::move(from);
  }

  inline CSwitchEtwEvent& operator=(const CSwitchEtwEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSwitchEtwEvent& operator=(CSwitchEtwEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CSwitchEtwEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSwitchEtwEvent* internal_default_instance() {
    return reinterpret_cast<const CSwitchEtwEvent*>(
               &_CSwitchEtwEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSwitchEtwEvent& a, CSwitchEtwEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CSwitchEtwEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSwitchEtwEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSwitchEtwEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSwitchEtwEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CSwitchEtwEvent& from);
  void MergeFrom(const CSwitchEtwEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSwitchEtwEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.CSwitchEtwEvent";
  }
  protected:
  explicit CSwitchEtwEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CSwitchEtwEvent_OldThreadWaitReason OldThreadWaitReason;
  static constexpr OldThreadWaitReason EXECUTIVE =
    CSwitchEtwEvent_OldThreadWaitReason_EXECUTIVE;
  static constexpr OldThreadWaitReason FREE_PAGE =
    CSwitchEtwEvent_OldThreadWaitReason_FREE_PAGE;
  static constexpr OldThreadWaitReason PAGE_IN =
    CSwitchEtwEvent_OldThreadWaitReason_PAGE_IN;
  static constexpr OldThreadWaitReason POOL_ALLOCATION =
    CSwitchEtwEvent_OldThreadWaitReason_POOL_ALLOCATION;
  static constexpr OldThreadWaitReason DELAY_EXECUTION =
    CSwitchEtwEvent_OldThreadWaitReason_DELAY_EXECUTION;
  static constexpr OldThreadWaitReason SUSPEND =
    CSwitchEtwEvent_OldThreadWaitReason_SUSPEND;
  static constexpr OldThreadWaitReason USER_REQUEST =
    CSwitchEtwEvent_OldThreadWaitReason_USER_REQUEST;
  static constexpr OldThreadWaitReason WR_EXECUTIVE =
    CSwitchEtwEvent_OldThreadWaitReason_WR_EXECUTIVE;
  static constexpr OldThreadWaitReason WR_FREE_PAGE =
    CSwitchEtwEvent_OldThreadWaitReason_WR_FREE_PAGE;
  static constexpr OldThreadWaitReason WR_PAGE_IN =
    CSwitchEtwEvent_OldThreadWaitReason_WR_PAGE_IN;
  static constexpr OldThreadWaitReason WR_POOL_ALLOCATION =
    CSwitchEtwEvent_OldThreadWaitReason_WR_POOL_ALLOCATION;
  static constexpr OldThreadWaitReason WR_DELAY_EXECUTION =
    CSwitchEtwEvent_OldThreadWaitReason_WR_DELAY_EXECUTION;
  static constexpr OldThreadWaitReason WR_SUSPENDED =
    CSwitchEtwEvent_OldThreadWaitReason_WR_SUSPENDED;
  static constexpr OldThreadWaitReason WR_USER_REQUEST =
    CSwitchEtwEvent_OldThreadWaitReason_WR_USER_REQUEST;
  static constexpr OldThreadWaitReason WR_EVENT_PAIR =
    CSwitchEtwEvent_OldThreadWaitReason_WR_EVENT_PAIR;
  static constexpr OldThreadWaitReason WR_QUEUE =
    CSwitchEtwEvent_OldThreadWaitReason_WR_QUEUE;
  static constexpr OldThreadWaitReason WR_LPC_RECEIVER =
    CSwitchEtwEvent_OldThreadWaitReason_WR_LPC_RECEIVER;
  static constexpr OldThreadWaitReason WR_LPC_REPLY =
    CSwitchEtwEvent_OldThreadWaitReason_WR_LPC_REPLY;
  static constexpr OldThreadWaitReason WR_VIRTUAL_MEMORY =
    CSwitchEtwEvent_OldThreadWaitReason_WR_VIRTUAL_MEMORY;
  static constexpr OldThreadWaitReason WR_PAGE_OUT =
    CSwitchEtwEvent_OldThreadWaitReason_WR_PAGE_OUT;
  static constexpr OldThreadWaitReason WR_RENDEZ_VOUS =
    CSwitchEtwEvent_OldThreadWaitReason_WR_RENDEZ_VOUS;
  static constexpr OldThreadWaitReason WR_KEYED_EVENT =
    CSwitchEtwEvent_OldThreadWaitReason_WR_KEYED_EVENT;
  static constexpr OldThreadWaitReason WR_TERMINATED =
    CSwitchEtwEvent_OldThreadWaitReason_WR_TERMINATED;
  static constexpr OldThreadWaitReason WR_PROCESS_IN_SWAP =
    CSwitchEtwEvent_OldThreadWaitReason_WR_PROCESS_IN_SWAP;
  static constexpr OldThreadWaitReason WR_CPU_RATE_CONTROL =
    CSwitchEtwEvent_OldThreadWaitReason_WR_CPU_RATE_CONTROL;
  static constexpr OldThreadWaitReason WR_CALLOUT_STACK =
    CSwitchEtwEvent_OldThreadWaitReason_WR_CALLOUT_STACK;
  static constexpr OldThreadWaitReason WR_KERNEL =
    CSwitchEtwEvent_OldThreadWaitReason_WR_KERNEL;
  static constexpr OldThreadWaitReason WR_RESOURCE =
    CSwitchEtwEvent_OldThreadWaitReason_WR_RESOURCE;
  static constexpr OldThreadWaitReason WR_PUSH_LOCK =
    CSwitchEtwEvent_OldThreadWaitReason_WR_PUSH_LOCK;
  static constexpr OldThreadWaitReason WR_MUTEX =
    CSwitchEtwEvent_OldThreadWaitReason_WR_MUTEX;
  static constexpr OldThreadWaitReason WR_QUANTUM_END =
    CSwitchEtwEvent_OldThreadWaitReason_WR_QUANTUM_END;
  static constexpr OldThreadWaitReason WR_DISPATCH_INT =
    CSwitchEtwEvent_OldThreadWaitReason_WR_DISPATCH_INT;
  static constexpr OldThreadWaitReason WR_PREEMPTED =
    CSwitchEtwEvent_OldThreadWaitReason_WR_PREEMPTED;
  static constexpr OldThreadWaitReason WR_YIELD_EXECUTION =
    CSwitchEtwEvent_OldThreadWaitReason_WR_YIELD_EXECUTION;
  static constexpr OldThreadWaitReason WR_FAST_MUTEX =
    CSwitchEtwEvent_OldThreadWaitReason_WR_FAST_MUTEX;
  static constexpr OldThreadWaitReason WR_GUARD_MUTEX =
    CSwitchEtwEvent_OldThreadWaitReason_WR_GUARD_MUTEX;
  static constexpr OldThreadWaitReason WR_RUNDOWN =
    CSwitchEtwEvent_OldThreadWaitReason_WR_RUNDOWN;
  static constexpr OldThreadWaitReason MAXIMUM_WAIT_REASON =
    CSwitchEtwEvent_OldThreadWaitReason_MAXIMUM_WAIT_REASON;
  static inline bool OldThreadWaitReason_IsValid(int value) {
    return CSwitchEtwEvent_OldThreadWaitReason_IsValid(value);
  }
  static constexpr OldThreadWaitReason OldThreadWaitReason_MIN =
    CSwitchEtwEvent_OldThreadWaitReason_OldThreadWaitReason_MIN;
  static constexpr OldThreadWaitReason OldThreadWaitReason_MAX =
    CSwitchEtwEvent_OldThreadWaitReason_OldThreadWaitReason_MAX;
  static constexpr int OldThreadWaitReason_ARRAYSIZE =
    CSwitchEtwEvent_OldThreadWaitReason_OldThreadWaitReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& OldThreadWaitReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OldThreadWaitReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OldThreadWaitReason_Name.");
    return CSwitchEtwEvent_OldThreadWaitReason_Name(enum_t_value);
  }
  static inline bool OldThreadWaitReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OldThreadWaitReason* value) {
    return CSwitchEtwEvent_OldThreadWaitReason_Parse(name, value);
  }

  typedef CSwitchEtwEvent_OldThreadWaitMode OldThreadWaitMode;
  static constexpr OldThreadWaitMode KERNEL_MODE =
    CSwitchEtwEvent_OldThreadWaitMode_KERNEL_MODE;
  static constexpr OldThreadWaitMode USER_MODE =
    CSwitchEtwEvent_OldThreadWaitMode_USER_MODE;
  static inline bool OldThreadWaitMode_IsValid(int value) {
    return CSwitchEtwEvent_OldThreadWaitMode_IsValid(value);
  }
  static constexpr OldThreadWaitMode OldThreadWaitMode_MIN =
    CSwitchEtwEvent_OldThreadWaitMode_OldThreadWaitMode_MIN;
  static constexpr OldThreadWaitMode OldThreadWaitMode_MAX =
    CSwitchEtwEvent_OldThreadWaitMode_OldThreadWaitMode_MAX;
  static constexpr int OldThreadWaitMode_ARRAYSIZE =
    CSwitchEtwEvent_OldThreadWaitMode_OldThreadWaitMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& OldThreadWaitMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OldThreadWaitMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OldThreadWaitMode_Name.");
    return CSwitchEtwEvent_OldThreadWaitMode_Name(enum_t_value);
  }
  static inline bool OldThreadWaitMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OldThreadWaitMode* value) {
    return CSwitchEtwEvent_OldThreadWaitMode_Parse(name, value);
  }

  typedef CSwitchEtwEvent_OldThreadState OldThreadState;
  static constexpr OldThreadState INITIALIZED =
    CSwitchEtwEvent_OldThreadState_INITIALIZED;
  static constexpr OldThreadState READY =
    CSwitchEtwEvent_OldThreadState_READY;
  static constexpr OldThreadState RUNNING =
    CSwitchEtwEvent_OldThreadState_RUNNING;
  static constexpr OldThreadState STANDBY =
    CSwitchEtwEvent_OldThreadState_STANDBY;
  static constexpr OldThreadState TERMINATED =
    CSwitchEtwEvent_OldThreadState_TERMINATED;
  static constexpr OldThreadState WAITING =
    CSwitchEtwEvent_OldThreadState_WAITING;
  static constexpr OldThreadState TRANSITION =
    CSwitchEtwEvent_OldThreadState_TRANSITION;
  static constexpr OldThreadState DEFERRED_READY =
    CSwitchEtwEvent_OldThreadState_DEFERRED_READY;
  static inline bool OldThreadState_IsValid(int value) {
    return CSwitchEtwEvent_OldThreadState_IsValid(value);
  }
  static constexpr OldThreadState OldThreadState_MIN =
    CSwitchEtwEvent_OldThreadState_OldThreadState_MIN;
  static constexpr OldThreadState OldThreadState_MAX =
    CSwitchEtwEvent_OldThreadState_OldThreadState_MAX;
  static constexpr int OldThreadState_ARRAYSIZE =
    CSwitchEtwEvent_OldThreadState_OldThreadState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& OldThreadState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OldThreadState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OldThreadState_Name.");
    return CSwitchEtwEvent_OldThreadState_Name(enum_t_value);
  }
  static inline bool OldThreadState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OldThreadState* value) {
    return CSwitchEtwEvent_OldThreadState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewThreadIdFieldNumber = 1,
    kOldThreadIdFieldNumber = 2,
    kNewThreadPriorityFieldNumber = 3,
    kOldThreadPriorityFieldNumber = 4,
    kPreviousCStateFieldNumber = 5,
    kOldThreadWaitReasonFieldNumber = 6,
    kOldThreadWaitModeFieldNumber = 7,
    kOldThreadStateFieldNumber = 8,
    kOldThreadWaitIdealProcessorFieldNumber = 9,
    kNewThreadWaitTimeFieldNumber = 10,
  };
  // optional uint32 new_thread_id = 1;
  bool has_new_thread_id() const;
  private:
  bool _internal_has_new_thread_id() const;
  public:
  void clear_new_thread_id();
  uint32_t new_thread_id() const;
  void set_new_thread_id(uint32_t value);
  private:
  uint32_t _internal_new_thread_id() const;
  void _internal_set_new_thread_id(uint32_t value);
  public:

  // optional uint32 old_thread_id = 2;
  bool has_old_thread_id() const;
  private:
  bool _internal_has_old_thread_id() const;
  public:
  void clear_old_thread_id();
  uint32_t old_thread_id() const;
  void set_old_thread_id(uint32_t value);
  private:
  uint32_t _internal_old_thread_id() const;
  void _internal_set_old_thread_id(uint32_t value);
  public:

  // optional sint32 new_thread_priority = 3;
  bool has_new_thread_priority() const;
  private:
  bool _internal_has_new_thread_priority() const;
  public:
  void clear_new_thread_priority();
  int32_t new_thread_priority() const;
  void set_new_thread_priority(int32_t value);
  private:
  int32_t _internal_new_thread_priority() const;
  void _internal_set_new_thread_priority(int32_t value);
  public:

  // optional sint32 old_thread_priority = 4;
  bool has_old_thread_priority() const;
  private:
  bool _internal_has_old_thread_priority() const;
  public:
  void clear_old_thread_priority();
  int32_t old_thread_priority() const;
  void set_old_thread_priority(int32_t value);
  private:
  int32_t _internal_old_thread_priority() const;
  void _internal_set_old_thread_priority(int32_t value);
  public:

  // optional uint32 previous_c_state = 5;
  bool has_previous_c_state() const;
  private:
  bool _internal_has_previous_c_state() const;
  public:
  void clear_previous_c_state();
  uint32_t previous_c_state() const;
  void set_previous_c_state(uint32_t value);
  private:
  uint32_t _internal_previous_c_state() const;
  void _internal_set_previous_c_state(uint32_t value);
  public:

  // optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;
  bool has_old_thread_wait_reason() const;
  private:
  bool _internal_has_old_thread_wait_reason() const;
  public:
  void clear_old_thread_wait_reason();
  ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason old_thread_wait_reason() const;
  void set_old_thread_wait_reason(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason value);
  private:
  ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason _internal_old_thread_wait_reason() const;
  void _internal_set_old_thread_wait_reason(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason value);
  public:

  // optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;
  bool has_old_thread_wait_mode() const;
  private:
  bool _internal_has_old_thread_wait_mode() const;
  public:
  void clear_old_thread_wait_mode();
  ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode old_thread_wait_mode() const;
  void set_old_thread_wait_mode(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode value);
  private:
  ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode _internal_old_thread_wait_mode() const;
  void _internal_set_old_thread_wait_mode(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode value);
  public:

  // optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;
  bool has_old_thread_state() const;
  private:
  bool _internal_has_old_thread_state() const;
  public:
  void clear_old_thread_state();
  ::perfetto::protos::CSwitchEtwEvent_OldThreadState old_thread_state() const;
  void set_old_thread_state(::perfetto::protos::CSwitchEtwEvent_OldThreadState value);
  private:
  ::perfetto::protos::CSwitchEtwEvent_OldThreadState _internal_old_thread_state() const;
  void _internal_set_old_thread_state(::perfetto::protos::CSwitchEtwEvent_OldThreadState value);
  public:

  // optional sint32 old_thread_wait_ideal_processor = 9;
  bool has_old_thread_wait_ideal_processor() const;
  private:
  bool _internal_has_old_thread_wait_ideal_processor() const;
  public:
  void clear_old_thread_wait_ideal_processor();
  int32_t old_thread_wait_ideal_processor() const;
  void set_old_thread_wait_ideal_processor(int32_t value);
  private:
  int32_t _internal_old_thread_wait_ideal_processor() const;
  void _internal_set_old_thread_wait_ideal_processor(int32_t value);
  public:

  // optional uint32 new_thread_wait_time = 10;
  bool has_new_thread_wait_time() const;
  private:
  bool _internal_has_new_thread_wait_time() const;
  public:
  void clear_new_thread_wait_time();
  uint32_t new_thread_wait_time() const;
  void set_new_thread_wait_time(uint32_t value);
  private:
  uint32_t _internal_new_thread_wait_time() const;
  void _internal_set_new_thread_wait_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.CSwitchEtwEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t new_thread_id_;
    uint32_t old_thread_id_;
    int32_t new_thread_priority_;
    int32_t old_thread_priority_;
    uint32_t previous_c_state_;
    int old_thread_wait_reason_;
    int old_thread_wait_mode_;
    int old_thread_state_;
    int32_t old_thread_wait_ideal_processor_;
    uint32_t new_thread_wait_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fetw_2fetw_2eproto;
};
// -------------------------------------------------------------------

class ReadyThreadEtwEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ReadyThreadEtwEvent) */ {
 public:
  inline ReadyThreadEtwEvent() : ReadyThreadEtwEvent(nullptr) {}
  ~ReadyThreadEtwEvent() override;
  explicit PROTOBUF_CONSTEXPR ReadyThreadEtwEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadyThreadEtwEvent(const ReadyThreadEtwEvent& from);
  ReadyThreadEtwEvent(ReadyThreadEtwEvent&& from) noexcept
    : ReadyThreadEtwEvent() {
    *this = ::std::move(from);
  }

  inline ReadyThreadEtwEvent& operator=(const ReadyThreadEtwEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyThreadEtwEvent& operator=(ReadyThreadEtwEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ReadyThreadEtwEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadyThreadEtwEvent* internal_default_instance() {
    return reinterpret_cast<const ReadyThreadEtwEvent*>(
               &_ReadyThreadEtwEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadyThreadEtwEvent& a, ReadyThreadEtwEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ReadyThreadEtwEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyThreadEtwEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadyThreadEtwEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadyThreadEtwEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ReadyThreadEtwEvent& from);
  void MergeFrom(const ReadyThreadEtwEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadyThreadEtwEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ReadyThreadEtwEvent";
  }
  protected:
  explicit ReadyThreadEtwEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ReadyThreadEtwEvent_AdjustReason AdjustReason;
  static constexpr AdjustReason IGNORE_THE_INCREMENT =
    ReadyThreadEtwEvent_AdjustReason_IGNORE_THE_INCREMENT;
  static constexpr AdjustReason APPLY_INCREMENT =
    ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT;
  static constexpr AdjustReason APPLY_INCREMENT_BOOST =
    ReadyThreadEtwEvent_AdjustReason_APPLY_INCREMENT_BOOST;
  static inline bool AdjustReason_IsValid(int value) {
    return ReadyThreadEtwEvent_AdjustReason_IsValid(value);
  }
  static constexpr AdjustReason AdjustReason_MIN =
    ReadyThreadEtwEvent_AdjustReason_AdjustReason_MIN;
  static constexpr AdjustReason AdjustReason_MAX =
    ReadyThreadEtwEvent_AdjustReason_AdjustReason_MAX;
  static constexpr int AdjustReason_ARRAYSIZE =
    ReadyThreadEtwEvent_AdjustReason_AdjustReason_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AdjustReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AdjustReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AdjustReason_Name.");
    return ReadyThreadEtwEvent_AdjustReason_Name(enum_t_value);
  }
  static inline bool AdjustReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AdjustReason* value) {
    return ReadyThreadEtwEvent_AdjustReason_Parse(name, value);
  }

  typedef ReadyThreadEtwEvent_TraceFlag TraceFlag;
  static constexpr TraceFlag TRACE_FLAG_UNSPECIFIED =
    ReadyThreadEtwEvent_TraceFlag_TRACE_FLAG_UNSPECIFIED;
  static constexpr TraceFlag THREAD_READIED =
    ReadyThreadEtwEvent_TraceFlag_THREAD_READIED;
  static constexpr TraceFlag KERNEL_STACK_SWAPPED_OUT =
    ReadyThreadEtwEvent_TraceFlag_KERNEL_STACK_SWAPPED_OUT;
  static constexpr TraceFlag PROCESS_ADDRESS_SWAPPED_OUT =
    ReadyThreadEtwEvent_TraceFlag_PROCESS_ADDRESS_SWAPPED_OUT;
  static inline bool TraceFlag_IsValid(int value) {
    return ReadyThreadEtwEvent_TraceFlag_IsValid(value);
  }
  static constexpr TraceFlag TraceFlag_MIN =
    ReadyThreadEtwEvent_TraceFlag_TraceFlag_MIN;
  static constexpr TraceFlag TraceFlag_MAX =
    ReadyThreadEtwEvent_TraceFlag_TraceFlag_MAX;
  static constexpr int TraceFlag_ARRAYSIZE =
    ReadyThreadEtwEvent_TraceFlag_TraceFlag_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TraceFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TraceFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TraceFlag_Name.");
    return ReadyThreadEtwEvent_TraceFlag_Name(enum_t_value);
  }
  static inline bool TraceFlag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TraceFlag* value) {
    return ReadyThreadEtwEvent_TraceFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTThreadIdFieldNumber = 1,
    kAdjustReasonFieldNumber = 2,
    kAdjustIncrementFieldNumber = 3,
    kFlagFieldNumber = 4,
  };
  // optional uint32 t_thread_id = 1;
  bool has_t_thread_id() const;
  private:
  bool _internal_has_t_thread_id() const;
  public:
  void clear_t_thread_id();
  uint32_t t_thread_id() const;
  void set_t_thread_id(uint32_t value);
  private:
  uint32_t _internal_t_thread_id() const;
  void _internal_set_t_thread_id(uint32_t value);
  public:

  // optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;
  bool has_adjust_reason() const;
  private:
  bool _internal_has_adjust_reason() const;
  public:
  void clear_adjust_reason();
  ::perfetto::protos::ReadyThreadEtwEvent_AdjustReason adjust_reason() const;
  void set_adjust_reason(::perfetto::protos::ReadyThreadEtwEvent_AdjustReason value);
  private:
  ::perfetto::protos::ReadyThreadEtwEvent_AdjustReason _internal_adjust_reason() const;
  void _internal_set_adjust_reason(::perfetto::protos::ReadyThreadEtwEvent_AdjustReason value);
  public:

  // optional sint32 adjust_increment = 3;
  bool has_adjust_increment() const;
  private:
  bool _internal_has_adjust_increment() const;
  public:
  void clear_adjust_increment();
  int32_t adjust_increment() const;
  void set_adjust_increment(int32_t value);
  private:
  int32_t _internal_adjust_increment() const;
  void _internal_set_adjust_increment(int32_t value);
  public:

  // optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::perfetto::protos::ReadyThreadEtwEvent_TraceFlag flag() const;
  void set_flag(::perfetto::protos::ReadyThreadEtwEvent_TraceFlag value);
  private:
  ::perfetto::protos::ReadyThreadEtwEvent_TraceFlag _internal_flag() const;
  void _internal_set_flag(::perfetto::protos::ReadyThreadEtwEvent_TraceFlag value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ReadyThreadEtwEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t t_thread_id_;
    int adjust_reason_;
    int32_t adjust_increment_;
    int flag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fetw_2fetw_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSwitchEtwEvent

// optional uint32 new_thread_id = 1;
inline bool CSwitchEtwEvent::_internal_has_new_thread_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_new_thread_id() const {
  return _internal_has_new_thread_id();
}
inline void CSwitchEtwEvent::clear_new_thread_id() {
  _impl_.new_thread_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSwitchEtwEvent::_internal_new_thread_id() const {
  return _impl_.new_thread_id_;
}
inline uint32_t CSwitchEtwEvent::new_thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.new_thread_id)
  return _internal_new_thread_id();
}
inline void CSwitchEtwEvent::_internal_set_new_thread_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_thread_id_ = value;
}
inline void CSwitchEtwEvent::set_new_thread_id(uint32_t value) {
  _internal_set_new_thread_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.new_thread_id)
}

// optional uint32 old_thread_id = 2;
inline bool CSwitchEtwEvent::_internal_has_old_thread_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_old_thread_id() const {
  return _internal_has_old_thread_id();
}
inline void CSwitchEtwEvent::clear_old_thread_id() {
  _impl_.old_thread_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSwitchEtwEvent::_internal_old_thread_id() const {
  return _impl_.old_thread_id_;
}
inline uint32_t CSwitchEtwEvent::old_thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.old_thread_id)
  return _internal_old_thread_id();
}
inline void CSwitchEtwEvent::_internal_set_old_thread_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_thread_id_ = value;
}
inline void CSwitchEtwEvent::set_old_thread_id(uint32_t value) {
  _internal_set_old_thread_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.old_thread_id)
}

// optional sint32 new_thread_priority = 3;
inline bool CSwitchEtwEvent::_internal_has_new_thread_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_new_thread_priority() const {
  return _internal_has_new_thread_priority();
}
inline void CSwitchEtwEvent::clear_new_thread_priority() {
  _impl_.new_thread_priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CSwitchEtwEvent::_internal_new_thread_priority() const {
  return _impl_.new_thread_priority_;
}
inline int32_t CSwitchEtwEvent::new_thread_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.new_thread_priority)
  return _internal_new_thread_priority();
}
inline void CSwitchEtwEvent::_internal_set_new_thread_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_thread_priority_ = value;
}
inline void CSwitchEtwEvent::set_new_thread_priority(int32_t value) {
  _internal_set_new_thread_priority(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.new_thread_priority)
}

// optional sint32 old_thread_priority = 4;
inline bool CSwitchEtwEvent::_internal_has_old_thread_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_old_thread_priority() const {
  return _internal_has_old_thread_priority();
}
inline void CSwitchEtwEvent::clear_old_thread_priority() {
  _impl_.old_thread_priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CSwitchEtwEvent::_internal_old_thread_priority() const {
  return _impl_.old_thread_priority_;
}
inline int32_t CSwitchEtwEvent::old_thread_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.old_thread_priority)
  return _internal_old_thread_priority();
}
inline void CSwitchEtwEvent::_internal_set_old_thread_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.old_thread_priority_ = value;
}
inline void CSwitchEtwEvent::set_old_thread_priority(int32_t value) {
  _internal_set_old_thread_priority(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.old_thread_priority)
}

// optional uint32 previous_c_state = 5;
inline bool CSwitchEtwEvent::_internal_has_previous_c_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_previous_c_state() const {
  return _internal_has_previous_c_state();
}
inline void CSwitchEtwEvent::clear_previous_c_state() {
  _impl_.previous_c_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CSwitchEtwEvent::_internal_previous_c_state() const {
  return _impl_.previous_c_state_;
}
inline uint32_t CSwitchEtwEvent::previous_c_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.previous_c_state)
  return _internal_previous_c_state();
}
inline void CSwitchEtwEvent::_internal_set_previous_c_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.previous_c_state_ = value;
}
inline void CSwitchEtwEvent::set_previous_c_state(uint32_t value) {
  _internal_set_previous_c_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.previous_c_state)
}

// optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitReason old_thread_wait_reason = 6;
inline bool CSwitchEtwEvent::_internal_has_old_thread_wait_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_old_thread_wait_reason() const {
  return _internal_has_old_thread_wait_reason();
}
inline void CSwitchEtwEvent::clear_old_thread_wait_reason() {
  _impl_.old_thread_wait_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason CSwitchEtwEvent::_internal_old_thread_wait_reason() const {
  return static_cast< ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason >(_impl_.old_thread_wait_reason_);
}
inline ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason CSwitchEtwEvent::old_thread_wait_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.old_thread_wait_reason)
  return _internal_old_thread_wait_reason();
}
inline void CSwitchEtwEvent::_internal_set_old_thread_wait_reason(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason value) {
  assert(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.old_thread_wait_reason_ = value;
}
inline void CSwitchEtwEvent::set_old_thread_wait_reason(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason value) {
  _internal_set_old_thread_wait_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.old_thread_wait_reason)
}

// optional .perfetto.protos.CSwitchEtwEvent.OldThreadWaitMode old_thread_wait_mode = 7;
inline bool CSwitchEtwEvent::_internal_has_old_thread_wait_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_old_thread_wait_mode() const {
  return _internal_has_old_thread_wait_mode();
}
inline void CSwitchEtwEvent::clear_old_thread_wait_mode() {
  _impl_.old_thread_wait_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode CSwitchEtwEvent::_internal_old_thread_wait_mode() const {
  return static_cast< ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode >(_impl_.old_thread_wait_mode_);
}
inline ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode CSwitchEtwEvent::old_thread_wait_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.old_thread_wait_mode)
  return _internal_old_thread_wait_mode();
}
inline void CSwitchEtwEvent::_internal_set_old_thread_wait_mode(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode value) {
  assert(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.old_thread_wait_mode_ = value;
}
inline void CSwitchEtwEvent::set_old_thread_wait_mode(::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode value) {
  _internal_set_old_thread_wait_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.old_thread_wait_mode)
}

// optional .perfetto.protos.CSwitchEtwEvent.OldThreadState old_thread_state = 8;
inline bool CSwitchEtwEvent::_internal_has_old_thread_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_old_thread_state() const {
  return _internal_has_old_thread_state();
}
inline void CSwitchEtwEvent::clear_old_thread_state() {
  _impl_.old_thread_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::perfetto::protos::CSwitchEtwEvent_OldThreadState CSwitchEtwEvent::_internal_old_thread_state() const {
  return static_cast< ::perfetto::protos::CSwitchEtwEvent_OldThreadState >(_impl_.old_thread_state_);
}
inline ::perfetto::protos::CSwitchEtwEvent_OldThreadState CSwitchEtwEvent::old_thread_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.old_thread_state)
  return _internal_old_thread_state();
}
inline void CSwitchEtwEvent::_internal_set_old_thread_state(::perfetto::protos::CSwitchEtwEvent_OldThreadState value) {
  assert(::perfetto::protos::CSwitchEtwEvent_OldThreadState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.old_thread_state_ = value;
}
inline void CSwitchEtwEvent::set_old_thread_state(::perfetto::protos::CSwitchEtwEvent_OldThreadState value) {
  _internal_set_old_thread_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.old_thread_state)
}

// optional sint32 old_thread_wait_ideal_processor = 9;
inline bool CSwitchEtwEvent::_internal_has_old_thread_wait_ideal_processor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_old_thread_wait_ideal_processor() const {
  return _internal_has_old_thread_wait_ideal_processor();
}
inline void CSwitchEtwEvent::clear_old_thread_wait_ideal_processor() {
  _impl_.old_thread_wait_ideal_processor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CSwitchEtwEvent::_internal_old_thread_wait_ideal_processor() const {
  return _impl_.old_thread_wait_ideal_processor_;
}
inline int32_t CSwitchEtwEvent::old_thread_wait_ideal_processor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.old_thread_wait_ideal_processor)
  return _internal_old_thread_wait_ideal_processor();
}
inline void CSwitchEtwEvent::_internal_set_old_thread_wait_ideal_processor(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.old_thread_wait_ideal_processor_ = value;
}
inline void CSwitchEtwEvent::set_old_thread_wait_ideal_processor(int32_t value) {
  _internal_set_old_thread_wait_ideal_processor(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.old_thread_wait_ideal_processor)
}

// optional uint32 new_thread_wait_time = 10;
inline bool CSwitchEtwEvent::_internal_has_new_thread_wait_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSwitchEtwEvent::has_new_thread_wait_time() const {
  return _internal_has_new_thread_wait_time();
}
inline void CSwitchEtwEvent::clear_new_thread_wait_time() {
  _impl_.new_thread_wait_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CSwitchEtwEvent::_internal_new_thread_wait_time() const {
  return _impl_.new_thread_wait_time_;
}
inline uint32_t CSwitchEtwEvent::new_thread_wait_time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CSwitchEtwEvent.new_thread_wait_time)
  return _internal_new_thread_wait_time();
}
inline void CSwitchEtwEvent::_internal_set_new_thread_wait_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.new_thread_wait_time_ = value;
}
inline void CSwitchEtwEvent::set_new_thread_wait_time(uint32_t value) {
  _internal_set_new_thread_wait_time(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CSwitchEtwEvent.new_thread_wait_time)
}

// -------------------------------------------------------------------

// ReadyThreadEtwEvent

// optional uint32 t_thread_id = 1;
inline bool ReadyThreadEtwEvent::_internal_has_t_thread_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadyThreadEtwEvent::has_t_thread_id() const {
  return _internal_has_t_thread_id();
}
inline void ReadyThreadEtwEvent::clear_t_thread_id() {
  _impl_.t_thread_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ReadyThreadEtwEvent::_internal_t_thread_id() const {
  return _impl_.t_thread_id_;
}
inline uint32_t ReadyThreadEtwEvent::t_thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ReadyThreadEtwEvent.t_thread_id)
  return _internal_t_thread_id();
}
inline void ReadyThreadEtwEvent::_internal_set_t_thread_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.t_thread_id_ = value;
}
inline void ReadyThreadEtwEvent::set_t_thread_id(uint32_t value) {
  _internal_set_t_thread_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ReadyThreadEtwEvent.t_thread_id)
}

// optional .perfetto.protos.ReadyThreadEtwEvent.AdjustReason adjust_reason = 2;
inline bool ReadyThreadEtwEvent::_internal_has_adjust_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadyThreadEtwEvent::has_adjust_reason() const {
  return _internal_has_adjust_reason();
}
inline void ReadyThreadEtwEvent::clear_adjust_reason() {
  _impl_.adjust_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ReadyThreadEtwEvent_AdjustReason ReadyThreadEtwEvent::_internal_adjust_reason() const {
  return static_cast< ::perfetto::protos::ReadyThreadEtwEvent_AdjustReason >(_impl_.adjust_reason_);
}
inline ::perfetto::protos::ReadyThreadEtwEvent_AdjustReason ReadyThreadEtwEvent::adjust_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ReadyThreadEtwEvent.adjust_reason)
  return _internal_adjust_reason();
}
inline void ReadyThreadEtwEvent::_internal_set_adjust_reason(::perfetto::protos::ReadyThreadEtwEvent_AdjustReason value) {
  assert(::perfetto::protos::ReadyThreadEtwEvent_AdjustReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.adjust_reason_ = value;
}
inline void ReadyThreadEtwEvent::set_adjust_reason(::perfetto::protos::ReadyThreadEtwEvent_AdjustReason value) {
  _internal_set_adjust_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ReadyThreadEtwEvent.adjust_reason)
}

// optional sint32 adjust_increment = 3;
inline bool ReadyThreadEtwEvent::_internal_has_adjust_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReadyThreadEtwEvent::has_adjust_increment() const {
  return _internal_has_adjust_increment();
}
inline void ReadyThreadEtwEvent::clear_adjust_increment() {
  _impl_.adjust_increment_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ReadyThreadEtwEvent::_internal_adjust_increment() const {
  return _impl_.adjust_increment_;
}
inline int32_t ReadyThreadEtwEvent::adjust_increment() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ReadyThreadEtwEvent.adjust_increment)
  return _internal_adjust_increment();
}
inline void ReadyThreadEtwEvent::_internal_set_adjust_increment(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.adjust_increment_ = value;
}
inline void ReadyThreadEtwEvent::set_adjust_increment(int32_t value) {
  _internal_set_adjust_increment(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ReadyThreadEtwEvent.adjust_increment)
}

// optional .perfetto.protos.ReadyThreadEtwEvent.TraceFlag flag = 4;
inline bool ReadyThreadEtwEvent::_internal_has_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReadyThreadEtwEvent::has_flag() const {
  return _internal_has_flag();
}
inline void ReadyThreadEtwEvent::clear_flag() {
  _impl_.flag_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::perfetto::protos::ReadyThreadEtwEvent_TraceFlag ReadyThreadEtwEvent::_internal_flag() const {
  return static_cast< ::perfetto::protos::ReadyThreadEtwEvent_TraceFlag >(_impl_.flag_);
}
inline ::perfetto::protos::ReadyThreadEtwEvent_TraceFlag ReadyThreadEtwEvent::flag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ReadyThreadEtwEvent.flag)
  return _internal_flag();
}
inline void ReadyThreadEtwEvent::_internal_set_flag(::perfetto::protos::ReadyThreadEtwEvent_TraceFlag value) {
  assert(::perfetto::protos::ReadyThreadEtwEvent_TraceFlag_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flag_ = value;
}
inline void ReadyThreadEtwEvent::set_flag(::perfetto::protos::ReadyThreadEtwEvent_TraceFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ReadyThreadEtwEvent.flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitReason> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::CSwitchEtwEvent_OldThreadWaitMode> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::CSwitchEtwEvent_OldThreadState> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::ReadyThreadEtwEvent_AdjustReason> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::ReadyThreadEtwEvent_TraceFlag> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fetw_2fetw_2eproto
