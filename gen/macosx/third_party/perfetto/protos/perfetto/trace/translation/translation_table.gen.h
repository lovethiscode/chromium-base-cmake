// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_TRANSLATION_TRANSLATION_TABLE_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_TRANSLATION_TRANSLATION_TABLE_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class ProcessTrackNameTranslationTable;
class ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry;
class SliceNameTranslationTable;
class SliceNameTranslationTable_RawToDeobfuscatedNameEntry;
class ChromePerformanceMarkTranslationTable;
class ChromePerformanceMarkTranslationTable_MarkHashToNameEntry;
class ChromePerformanceMarkTranslationTable_SiteHashToNameEntry;
class ChromeUserEventTranslationTable;
class ChromeUserEventTranslationTable_ActionHashToNameEntry;
class ChromeHistorgramTranslationTable;
class ChromeHistorgramTranslationTable_HashToNameEntry;
class TranslationTable;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT ProcessTrackNameTranslationTable : public ::protozero::CppMessageObj {
 public:
  using RawToDeobfuscatedNameEntry = ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry;
  enum FieldNumbers {
    kRawToDeobfuscatedNameFieldNumber = 1,
  };

  ProcessTrackNameTranslationTable();
  ~ProcessTrackNameTranslationTable() override;
  ProcessTrackNameTranslationTable(ProcessTrackNameTranslationTable&&) noexcept;
  ProcessTrackNameTranslationTable& operator=(ProcessTrackNameTranslationTable&&);
  ProcessTrackNameTranslationTable(const ProcessTrackNameTranslationTable&);
  ProcessTrackNameTranslationTable& operator=(const ProcessTrackNameTranslationTable&);
  bool operator==(const ProcessTrackNameTranslationTable&) const;
  bool operator!=(const ProcessTrackNameTranslationTable& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry>& raw_to_deobfuscated_name() const { return raw_to_deobfuscated_name_; }
  std::vector<ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry>* mutable_raw_to_deobfuscated_name() { return &raw_to_deobfuscated_name_; }
  int raw_to_deobfuscated_name_size() const;
  void clear_raw_to_deobfuscated_name();
  ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry* add_raw_to_deobfuscated_name();

 private:
  std::vector<ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry> raw_to_deobfuscated_name_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry();
  ~ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry() override;
  ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry(ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry&&) noexcept;
  ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry& operator=(ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry&&);
  ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry(const ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry&);
  ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry& operator=(const ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry&);
  bool operator==(const ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry&) const;
  bool operator!=(const ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_key() const { return _has_field_[1]; }
  const std::string& key() const { return key_; }
  void set_key(const std::string& value) { key_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  std::string key_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT SliceNameTranslationTable : public ::protozero::CppMessageObj {
 public:
  using RawToDeobfuscatedNameEntry = SliceNameTranslationTable_RawToDeobfuscatedNameEntry;
  enum FieldNumbers {
    kRawToDeobfuscatedNameFieldNumber = 1,
  };

  SliceNameTranslationTable();
  ~SliceNameTranslationTable() override;
  SliceNameTranslationTable(SliceNameTranslationTable&&) noexcept;
  SliceNameTranslationTable& operator=(SliceNameTranslationTable&&);
  SliceNameTranslationTable(const SliceNameTranslationTable&);
  SliceNameTranslationTable& operator=(const SliceNameTranslationTable&);
  bool operator==(const SliceNameTranslationTable&) const;
  bool operator!=(const SliceNameTranslationTable& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<SliceNameTranslationTable_RawToDeobfuscatedNameEntry>& raw_to_deobfuscated_name() const { return raw_to_deobfuscated_name_; }
  std::vector<SliceNameTranslationTable_RawToDeobfuscatedNameEntry>* mutable_raw_to_deobfuscated_name() { return &raw_to_deobfuscated_name_; }
  int raw_to_deobfuscated_name_size() const;
  void clear_raw_to_deobfuscated_name();
  SliceNameTranslationTable_RawToDeobfuscatedNameEntry* add_raw_to_deobfuscated_name();

 private:
  std::vector<SliceNameTranslationTable_RawToDeobfuscatedNameEntry> raw_to_deobfuscated_name_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT SliceNameTranslationTable_RawToDeobfuscatedNameEntry : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  SliceNameTranslationTable_RawToDeobfuscatedNameEntry();
  ~SliceNameTranslationTable_RawToDeobfuscatedNameEntry() override;
  SliceNameTranslationTable_RawToDeobfuscatedNameEntry(SliceNameTranslationTable_RawToDeobfuscatedNameEntry&&) noexcept;
  SliceNameTranslationTable_RawToDeobfuscatedNameEntry& operator=(SliceNameTranslationTable_RawToDeobfuscatedNameEntry&&);
  SliceNameTranslationTable_RawToDeobfuscatedNameEntry(const SliceNameTranslationTable_RawToDeobfuscatedNameEntry&);
  SliceNameTranslationTable_RawToDeobfuscatedNameEntry& operator=(const SliceNameTranslationTable_RawToDeobfuscatedNameEntry&);
  bool operator==(const SliceNameTranslationTable_RawToDeobfuscatedNameEntry&) const;
  bool operator!=(const SliceNameTranslationTable_RawToDeobfuscatedNameEntry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_key() const { return _has_field_[1]; }
  const std::string& key() const { return key_; }
  void set_key(const std::string& value) { key_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  std::string key_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ChromePerformanceMarkTranslationTable : public ::protozero::CppMessageObj {
 public:
  using SiteHashToNameEntry = ChromePerformanceMarkTranslationTable_SiteHashToNameEntry;
  using MarkHashToNameEntry = ChromePerformanceMarkTranslationTable_MarkHashToNameEntry;
  enum FieldNumbers {
    kSiteHashToNameFieldNumber = 1,
    kMarkHashToNameFieldNumber = 2,
  };

  ChromePerformanceMarkTranslationTable();
  ~ChromePerformanceMarkTranslationTable() override;
  ChromePerformanceMarkTranslationTable(ChromePerformanceMarkTranslationTable&&) noexcept;
  ChromePerformanceMarkTranslationTable& operator=(ChromePerformanceMarkTranslationTable&&);
  ChromePerformanceMarkTranslationTable(const ChromePerformanceMarkTranslationTable&);
  ChromePerformanceMarkTranslationTable& operator=(const ChromePerformanceMarkTranslationTable&);
  bool operator==(const ChromePerformanceMarkTranslationTable&) const;
  bool operator!=(const ChromePerformanceMarkTranslationTable& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<ChromePerformanceMarkTranslationTable_SiteHashToNameEntry>& site_hash_to_name() const { return site_hash_to_name_; }
  std::vector<ChromePerformanceMarkTranslationTable_SiteHashToNameEntry>* mutable_site_hash_to_name() { return &site_hash_to_name_; }
  int site_hash_to_name_size() const;
  void clear_site_hash_to_name();
  ChromePerformanceMarkTranslationTable_SiteHashToNameEntry* add_site_hash_to_name();

  const std::vector<ChromePerformanceMarkTranslationTable_MarkHashToNameEntry>& mark_hash_to_name() const { return mark_hash_to_name_; }
  std::vector<ChromePerformanceMarkTranslationTable_MarkHashToNameEntry>* mutable_mark_hash_to_name() { return &mark_hash_to_name_; }
  int mark_hash_to_name_size() const;
  void clear_mark_hash_to_name();
  ChromePerformanceMarkTranslationTable_MarkHashToNameEntry* add_mark_hash_to_name();

 private:
  std::vector<ChromePerformanceMarkTranslationTable_SiteHashToNameEntry> site_hash_to_name_;
  std::vector<ChromePerformanceMarkTranslationTable_MarkHashToNameEntry> mark_hash_to_name_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ChromePerformanceMarkTranslationTable_MarkHashToNameEntry : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  ChromePerformanceMarkTranslationTable_MarkHashToNameEntry();
  ~ChromePerformanceMarkTranslationTable_MarkHashToNameEntry() override;
  ChromePerformanceMarkTranslationTable_MarkHashToNameEntry(ChromePerformanceMarkTranslationTable_MarkHashToNameEntry&&) noexcept;
  ChromePerformanceMarkTranslationTable_MarkHashToNameEntry& operator=(ChromePerformanceMarkTranslationTable_MarkHashToNameEntry&&);
  ChromePerformanceMarkTranslationTable_MarkHashToNameEntry(const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry&);
  ChromePerformanceMarkTranslationTable_MarkHashToNameEntry& operator=(const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry&);
  bool operator==(const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry&) const;
  bool operator!=(const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_key() const { return _has_field_[1]; }
  uint32_t key() const { return key_; }
  void set_key(uint32_t value) { key_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  uint32_t key_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ChromePerformanceMarkTranslationTable_SiteHashToNameEntry : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  ChromePerformanceMarkTranslationTable_SiteHashToNameEntry();
  ~ChromePerformanceMarkTranslationTable_SiteHashToNameEntry() override;
  ChromePerformanceMarkTranslationTable_SiteHashToNameEntry(ChromePerformanceMarkTranslationTable_SiteHashToNameEntry&&) noexcept;
  ChromePerformanceMarkTranslationTable_SiteHashToNameEntry& operator=(ChromePerformanceMarkTranslationTable_SiteHashToNameEntry&&);
  ChromePerformanceMarkTranslationTable_SiteHashToNameEntry(const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry&);
  ChromePerformanceMarkTranslationTable_SiteHashToNameEntry& operator=(const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry&);
  bool operator==(const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry&) const;
  bool operator!=(const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_key() const { return _has_field_[1]; }
  uint32_t key() const { return key_; }
  void set_key(uint32_t value) { key_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  uint32_t key_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ChromeUserEventTranslationTable : public ::protozero::CppMessageObj {
 public:
  using ActionHashToNameEntry = ChromeUserEventTranslationTable_ActionHashToNameEntry;
  enum FieldNumbers {
    kActionHashToNameFieldNumber = 1,
  };

  ChromeUserEventTranslationTable();
  ~ChromeUserEventTranslationTable() override;
  ChromeUserEventTranslationTable(ChromeUserEventTranslationTable&&) noexcept;
  ChromeUserEventTranslationTable& operator=(ChromeUserEventTranslationTable&&);
  ChromeUserEventTranslationTable(const ChromeUserEventTranslationTable&);
  ChromeUserEventTranslationTable& operator=(const ChromeUserEventTranslationTable&);
  bool operator==(const ChromeUserEventTranslationTable&) const;
  bool operator!=(const ChromeUserEventTranslationTable& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<ChromeUserEventTranslationTable_ActionHashToNameEntry>& action_hash_to_name() const { return action_hash_to_name_; }
  std::vector<ChromeUserEventTranslationTable_ActionHashToNameEntry>* mutable_action_hash_to_name() { return &action_hash_to_name_; }
  int action_hash_to_name_size() const;
  void clear_action_hash_to_name();
  ChromeUserEventTranslationTable_ActionHashToNameEntry* add_action_hash_to_name();

 private:
  std::vector<ChromeUserEventTranslationTable_ActionHashToNameEntry> action_hash_to_name_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ChromeUserEventTranslationTable_ActionHashToNameEntry : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  ChromeUserEventTranslationTable_ActionHashToNameEntry();
  ~ChromeUserEventTranslationTable_ActionHashToNameEntry() override;
  ChromeUserEventTranslationTable_ActionHashToNameEntry(ChromeUserEventTranslationTable_ActionHashToNameEntry&&) noexcept;
  ChromeUserEventTranslationTable_ActionHashToNameEntry& operator=(ChromeUserEventTranslationTable_ActionHashToNameEntry&&);
  ChromeUserEventTranslationTable_ActionHashToNameEntry(const ChromeUserEventTranslationTable_ActionHashToNameEntry&);
  ChromeUserEventTranslationTable_ActionHashToNameEntry& operator=(const ChromeUserEventTranslationTable_ActionHashToNameEntry&);
  bool operator==(const ChromeUserEventTranslationTable_ActionHashToNameEntry&) const;
  bool operator!=(const ChromeUserEventTranslationTable_ActionHashToNameEntry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_key() const { return _has_field_[1]; }
  uint64_t key() const { return key_; }
  void set_key(uint64_t value) { key_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  uint64_t key_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ChromeHistorgramTranslationTable : public ::protozero::CppMessageObj {
 public:
  using HashToNameEntry = ChromeHistorgramTranslationTable_HashToNameEntry;
  enum FieldNumbers {
    kHashToNameFieldNumber = 1,
  };

  ChromeHistorgramTranslationTable();
  ~ChromeHistorgramTranslationTable() override;
  ChromeHistorgramTranslationTable(ChromeHistorgramTranslationTable&&) noexcept;
  ChromeHistorgramTranslationTable& operator=(ChromeHistorgramTranslationTable&&);
  ChromeHistorgramTranslationTable(const ChromeHistorgramTranslationTable&);
  ChromeHistorgramTranslationTable& operator=(const ChromeHistorgramTranslationTable&);
  bool operator==(const ChromeHistorgramTranslationTable&) const;
  bool operator!=(const ChromeHistorgramTranslationTable& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<ChromeHistorgramTranslationTable_HashToNameEntry>& hash_to_name() const { return hash_to_name_; }
  std::vector<ChromeHistorgramTranslationTable_HashToNameEntry>* mutable_hash_to_name() { return &hash_to_name_; }
  int hash_to_name_size() const;
  void clear_hash_to_name();
  ChromeHistorgramTranslationTable_HashToNameEntry* add_hash_to_name();

 private:
  std::vector<ChromeHistorgramTranslationTable_HashToNameEntry> hash_to_name_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT ChromeHistorgramTranslationTable_HashToNameEntry : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  ChromeHistorgramTranslationTable_HashToNameEntry();
  ~ChromeHistorgramTranslationTable_HashToNameEntry() override;
  ChromeHistorgramTranslationTable_HashToNameEntry(ChromeHistorgramTranslationTable_HashToNameEntry&&) noexcept;
  ChromeHistorgramTranslationTable_HashToNameEntry& operator=(ChromeHistorgramTranslationTable_HashToNameEntry&&);
  ChromeHistorgramTranslationTable_HashToNameEntry(const ChromeHistorgramTranslationTable_HashToNameEntry&);
  ChromeHistorgramTranslationTable_HashToNameEntry& operator=(const ChromeHistorgramTranslationTable_HashToNameEntry&);
  bool operator==(const ChromeHistorgramTranslationTable_HashToNameEntry&) const;
  bool operator!=(const ChromeHistorgramTranslationTable_HashToNameEntry& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_key() const { return _has_field_[1]; }
  uint64_t key() const { return key_; }
  void set_key(uint64_t value) { key_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  uint64_t key_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TranslationTable : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kChromeHistogramFieldNumber = 1,
    kChromeUserEventFieldNumber = 2,
    kChromePerformanceMarkFieldNumber = 3,
    kSliceNameFieldNumber = 4,
    kProcessTrackNameFieldNumber = 5,
  };

  TranslationTable();
  ~TranslationTable() override;
  TranslationTable(TranslationTable&&) noexcept;
  TranslationTable& operator=(TranslationTable&&);
  TranslationTable(const TranslationTable&);
  TranslationTable& operator=(const TranslationTable&);
  bool operator==(const TranslationTable&) const;
  bool operator!=(const TranslationTable& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_chrome_histogram() const { return _has_field_[1]; }
  const ChromeHistorgramTranslationTable& chrome_histogram() const { return *chrome_histogram_; }
  ChromeHistorgramTranslationTable* mutable_chrome_histogram() { _has_field_.set(1); return chrome_histogram_.get(); }

  bool has_chrome_user_event() const { return _has_field_[2]; }
  const ChromeUserEventTranslationTable& chrome_user_event() const { return *chrome_user_event_; }
  ChromeUserEventTranslationTable* mutable_chrome_user_event() { _has_field_.set(2); return chrome_user_event_.get(); }

  bool has_chrome_performance_mark() const { return _has_field_[3]; }
  const ChromePerformanceMarkTranslationTable& chrome_performance_mark() const { return *chrome_performance_mark_; }
  ChromePerformanceMarkTranslationTable* mutable_chrome_performance_mark() { _has_field_.set(3); return chrome_performance_mark_.get(); }

  bool has_slice_name() const { return _has_field_[4]; }
  const SliceNameTranslationTable& slice_name() const { return *slice_name_; }
  SliceNameTranslationTable* mutable_slice_name() { _has_field_.set(4); return slice_name_.get(); }

  bool has_process_track_name() const { return _has_field_[5]; }
  const ProcessTrackNameTranslationTable& process_track_name() const { return *process_track_name_; }
  ProcessTrackNameTranslationTable* mutable_process_track_name() { _has_field_.set(5); return process_track_name_.get(); }

 private:
  ::protozero::CopyablePtr<ChromeHistorgramTranslationTable> chrome_histogram_;
  ::protozero::CopyablePtr<ChromeUserEventTranslationTable> chrome_user_event_;
  ::protozero::CopyablePtr<ChromePerformanceMarkTranslationTable> chrome_performance_mark_;
  ::protozero::CopyablePtr<SliceNameTranslationTable> slice_name_;
  ::protozero::CopyablePtr<ProcessTrackNameTranslationTable> process_track_name_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_TRANSLATION_TRANSLATION_TABLE_PROTO_CPP_H_
