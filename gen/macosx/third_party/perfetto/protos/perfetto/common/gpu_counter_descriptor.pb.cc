// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/gpu_counter_descriptor.proto

#include "protos/perfetto/common/gpu_counter_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.numerator_units_)*/{}
  , /*decltype(_impl_.denominator_units_)*/{}
  , /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.counter_id_)*/0u
  , /*decltype(_impl_.select_by_default_)*/false
  , /*decltype(_impl_.peak_value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal() {}
  union {
    GpuCounterDescriptor_GpuCounterSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal _GpuCounterDescriptor_GpuCounterSpec_default_instance_;
PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.counter_ids_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_id_)*/0u
  , /*decltype(_impl_.block_capacity_)*/0u} {}
struct GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal() {}
  union {
    GpuCounterDescriptor_GpuCounterBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal _GpuCounterDescriptor_GpuCounterBlock_default_instance_;
PROTOBUF_CONSTEXPR GpuCounterDescriptor::GpuCounterDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.specs_)*/{}
  , /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.min_sampling_period_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.max_sampling_period_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.supports_instrumented_sampling_)*/false} {}
struct GpuCounterDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterDescriptorDefaultTypeInternal() {}
  union {
    GpuCounterDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterDescriptorDefaultTypeInternal _GpuCounterDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool GpuCounterDescriptor_GpuCounterGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpuCounterDescriptor_GpuCounterGroup_strings[7] = {};

static const char GpuCounterDescriptor_GpuCounterGroup_names[] =
  "COMPUTE"
  "FRAGMENTS"
  "MEMORY"
  "PRIMITIVES"
  "SYSTEM"
  "UNCLASSIFIED"
  "VERTICES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpuCounterDescriptor_GpuCounterGroup_entries[] = {
  { {GpuCounterDescriptor_GpuCounterGroup_names + 0, 7}, 6 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 7, 9}, 3 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 16, 6}, 5 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 22, 10}, 4 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 32, 6}, 1 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 38, 12}, 0 },
  { {GpuCounterDescriptor_GpuCounterGroup_names + 50, 8}, 2 },
};

static const int GpuCounterDescriptor_GpuCounterGroup_entries_by_number[] = {
  5, // 0 -> UNCLASSIFIED
  4, // 1 -> SYSTEM
  6, // 2 -> VERTICES
  1, // 3 -> FRAGMENTS
  3, // 4 -> PRIMITIVES
  2, // 5 -> MEMORY
  0, // 6 -> COMPUTE
};

const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(
    GpuCounterDescriptor_GpuCounterGroup value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpuCounterDescriptor_GpuCounterGroup_entries,
          GpuCounterDescriptor_GpuCounterGroup_entries_by_number,
          7, GpuCounterDescriptor_GpuCounterGroup_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpuCounterDescriptor_GpuCounterGroup_entries,
      GpuCounterDescriptor_GpuCounterGroup_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpuCounterDescriptor_GpuCounterGroup_strings[idx].get();
}
bool GpuCounterDescriptor_GpuCounterGroup_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpuCounterDescriptor_GpuCounterGroup* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpuCounterDescriptor_GpuCounterGroup_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<GpuCounterDescriptor_GpuCounterGroup>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::UNCLASSIFIED;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::SYSTEM;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::VERTICES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::FRAGMENTS;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::PRIMITIVES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::MEMORY;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::COMPUTE;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MIN;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MAX;
constexpr int GpuCounterDescriptor::GpuCounterGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool GpuCounterDescriptor_MeasureUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpuCounterDescriptor_MeasureUnit_strings[41] = {};

static const char GpuCounterDescriptor_MeasureUnit_names[] =
  "AMPERE"
  "BIT"
  "BYTE"
  "CELSIUS"
  "FAHRENHEIT"
  "FRAGMENT"
  "GIGABIT"
  "GIGABYTE"
  "GIGAHERTZ"
  "HERTZ"
  "HOUR"
  "INSTRUCTION"
  "JOULE"
  "KELVIN"
  "KILOBIT"
  "KILOBYTE"
  "KILOHERTZ"
  "KILOWATT"
  "MEGABIT"
  "MEGABYTE"
  "MEGAHERTZ"
  "MICROSECOND"
  "MILLISECOND"
  "MILLIWATT"
  "MINUTE"
  "NANOSECOND"
  "NONE"
  "PERCENT"
  "PETABIT"
  "PETABYTE"
  "PETAHERTZ"
  "PIXEL"
  "PRIMITIVE"
  "SECOND"
  "TERABIT"
  "TERABYTE"
  "TERAHERTZ"
  "TRIANGLE"
  "VERTEX"
  "VOLT"
  "WATT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpuCounterDescriptor_MeasureUnit_entries[] = {
  { {GpuCounterDescriptor_MeasureUnit_names + 0, 6}, 33 },
  { {GpuCounterDescriptor_MeasureUnit_names + 6, 3}, 1 },
  { {GpuCounterDescriptor_MeasureUnit_names + 9, 4}, 7 },
  { {GpuCounterDescriptor_MeasureUnit_names + 13, 7}, 34 },
  { {GpuCounterDescriptor_MeasureUnit_names + 20, 10}, 35 },
  { {GpuCounterDescriptor_MeasureUnit_names + 30, 8}, 39 },
  { {GpuCounterDescriptor_MeasureUnit_names + 38, 7}, 4 },
  { {GpuCounterDescriptor_MeasureUnit_names + 45, 8}, 10 },
  { {GpuCounterDescriptor_MeasureUnit_names + 53, 9}, 16 },
  { {GpuCounterDescriptor_MeasureUnit_names + 62, 5}, 13 },
  { {GpuCounterDescriptor_MeasureUnit_names + 67, 4}, 24 },
  { {GpuCounterDescriptor_MeasureUnit_names + 71, 11}, 40 },
  { {GpuCounterDescriptor_MeasureUnit_names + 82, 5}, 31 },
  { {GpuCounterDescriptor_MeasureUnit_names + 87, 6}, 36 },
  { {GpuCounterDescriptor_MeasureUnit_names + 93, 7}, 2 },
  { {GpuCounterDescriptor_MeasureUnit_names + 100, 8}, 8 },
  { {GpuCounterDescriptor_MeasureUnit_names + 108, 9}, 14 },
  { {GpuCounterDescriptor_MeasureUnit_names + 117, 8}, 30 },
  { {GpuCounterDescriptor_MeasureUnit_names + 125, 7}, 3 },
  { {GpuCounterDescriptor_MeasureUnit_names + 132, 8}, 9 },
  { {GpuCounterDescriptor_MeasureUnit_names + 140, 9}, 15 },
  { {GpuCounterDescriptor_MeasureUnit_names + 149, 11}, 20 },
  { {GpuCounterDescriptor_MeasureUnit_names + 160, 11}, 21 },
  { {GpuCounterDescriptor_MeasureUnit_names + 171, 9}, 28 },
  { {GpuCounterDescriptor_MeasureUnit_names + 180, 6}, 23 },
  { {GpuCounterDescriptor_MeasureUnit_names + 186, 10}, 19 },
  { {GpuCounterDescriptor_MeasureUnit_names + 196, 4}, 0 },
  { {GpuCounterDescriptor_MeasureUnit_names + 200, 7}, 37 },
  { {GpuCounterDescriptor_MeasureUnit_names + 207, 7}, 6 },
  { {GpuCounterDescriptor_MeasureUnit_names + 214, 8}, 12 },
  { {GpuCounterDescriptor_MeasureUnit_names + 222, 9}, 18 },
  { {GpuCounterDescriptor_MeasureUnit_names + 231, 5}, 26 },
  { {GpuCounterDescriptor_MeasureUnit_names + 236, 9}, 38 },
  { {GpuCounterDescriptor_MeasureUnit_names + 245, 6}, 22 },
  { {GpuCounterDescriptor_MeasureUnit_names + 251, 7}, 5 },
  { {GpuCounterDescriptor_MeasureUnit_names + 258, 8}, 11 },
  { {GpuCounterDescriptor_MeasureUnit_names + 266, 9}, 17 },
  { {GpuCounterDescriptor_MeasureUnit_names + 275, 8}, 27 },
  { {GpuCounterDescriptor_MeasureUnit_names + 283, 6}, 25 },
  { {GpuCounterDescriptor_MeasureUnit_names + 289, 4}, 32 },
  { {GpuCounterDescriptor_MeasureUnit_names + 293, 4}, 29 },
};

static const int GpuCounterDescriptor_MeasureUnit_entries_by_number[] = {
  26, // 0 -> NONE
  1, // 1 -> BIT
  14, // 2 -> KILOBIT
  18, // 3 -> MEGABIT
  6, // 4 -> GIGABIT
  34, // 5 -> TERABIT
  28, // 6 -> PETABIT
  2, // 7 -> BYTE
  15, // 8 -> KILOBYTE
  19, // 9 -> MEGABYTE
  7, // 10 -> GIGABYTE
  35, // 11 -> TERABYTE
  29, // 12 -> PETABYTE
  9, // 13 -> HERTZ
  16, // 14 -> KILOHERTZ
  20, // 15 -> MEGAHERTZ
  8, // 16 -> GIGAHERTZ
  36, // 17 -> TERAHERTZ
  30, // 18 -> PETAHERTZ
  25, // 19 -> NANOSECOND
  21, // 20 -> MICROSECOND
  22, // 21 -> MILLISECOND
  33, // 22 -> SECOND
  24, // 23 -> MINUTE
  10, // 24 -> HOUR
  38, // 25 -> VERTEX
  31, // 26 -> PIXEL
  37, // 27 -> TRIANGLE
  23, // 28 -> MILLIWATT
  40, // 29 -> WATT
  17, // 30 -> KILOWATT
  12, // 31 -> JOULE
  39, // 32 -> VOLT
  0, // 33 -> AMPERE
  3, // 34 -> CELSIUS
  4, // 35 -> FAHRENHEIT
  13, // 36 -> KELVIN
  27, // 37 -> PERCENT
  32, // 38 -> PRIMITIVE
  5, // 39 -> FRAGMENT
  11, // 40 -> INSTRUCTION
};

const std::string& GpuCounterDescriptor_MeasureUnit_Name(
    GpuCounterDescriptor_MeasureUnit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpuCounterDescriptor_MeasureUnit_entries,
          GpuCounterDescriptor_MeasureUnit_entries_by_number,
          41, GpuCounterDescriptor_MeasureUnit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpuCounterDescriptor_MeasureUnit_entries,
      GpuCounterDescriptor_MeasureUnit_entries_by_number,
      41, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpuCounterDescriptor_MeasureUnit_strings[idx].get();
}
bool GpuCounterDescriptor_MeasureUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpuCounterDescriptor_MeasureUnit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpuCounterDescriptor_MeasureUnit_entries, 41, name, &int_value);
  if (success) {
    *value = static_cast<GpuCounterDescriptor_MeasureUnit>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NONE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NANOSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MICROSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLISECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::SECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MINUTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HOUR;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VERTEX;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PIXEL;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TRIANGLE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PRIMITIVE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FRAGMENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLIWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::WATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::JOULE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VOLT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::AMPERE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::CELSIUS;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FAHRENHEIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KELVIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PERCENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::INSTRUCTION;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MAX;
constexpr int GpuCounterDescriptor::MeasureUnit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GpuCounterDescriptor_GpuCounterSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterSpec>()._impl_._has_bits_);
  static void set_has_counter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_select_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}
GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(const GpuCounterDescriptor_GpuCounterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpuCounterDescriptor_GpuCounterSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numerator_units_){from._impl_.numerator_units_}
    , decltype(_impl_.denominator_units_){from._impl_.denominator_units_}
    , decltype(_impl_.groups_){from._impl_.groups_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.counter_id_){}
    , decltype(_impl_.select_by_default_){}
    , decltype(_impl_.peak_value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.counter_id_, &from._impl_.counter_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.select_by_default_) -
    reinterpret_cast<char*>(&_impl_.counter_id_)) + sizeof(_impl_.select_by_default_));
  clear_has_peak_value();
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      _this->_internal_set_int_peak_value(from._internal_int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      _this->_internal_set_double_peak_value(from._internal_double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}

inline void GpuCounterDescriptor_GpuCounterSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numerator_units_){arena}
    , decltype(_impl_.denominator_units_){arena}
    , decltype(_impl_.groups_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.counter_id_){0u}
    , decltype(_impl_.select_by_default_){false}
    , decltype(_impl_.peak_value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_peak_value();
}

GpuCounterDescriptor_GpuCounterSpec::~GpuCounterDescriptor_GpuCounterSpec() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterDescriptor_GpuCounterSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.numerator_units_.~RepeatedField();
  _impl_.denominator_units_.~RepeatedField();
  _impl_.groups_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  if (has_peak_value()) {
    clear_peak_value();
  }
}

void GpuCounterDescriptor_GpuCounterSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterDescriptor_GpuCounterSpec::clear_peak_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  switch (peak_value_case()) {
    case kIntPeakValue: {
      // No need to clear
      break;
    }
    case kDoublePeakValue: {
      // No need to clear
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PEAK_VALUE_NOT_SET;
}


void GpuCounterDescriptor_GpuCounterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.numerator_units_.Clear();
  _impl_.denominator_units_.Clear();
  _impl_.groups_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.counter_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.select_by_default_) -
        reinterpret_cast<char*>(&_impl_.counter_id_)) + sizeof(_impl_.select_by_default_));
  }
  clear_peak_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GpuCounterDescriptor_GpuCounterSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 counter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_counter_id(&has_bits);
          _impl_.counter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int_peak_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_int_peak_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_peak_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _internal_set_double_peak_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(val))) {
              _internal_add_numerator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_numerator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(val))) {
              _internal_add_denominator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_denominator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool select_by_default = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_select_by_default(&has_bits);
          _impl_.select_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(val))) {
              _internal_add_groups(static_cast<::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_groups(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpuCounterDescriptor_GpuCounterSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 counter_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_counter_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  switch (peak_value_case()) {
    case kIntPeakValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_int_peak_value(), target);
      break;
    }
    case kDoublePeakValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_double_peak_value(), target);
      break;
    }
    default: ;
  }
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  for (int i = 0, n = this->_internal_numerator_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_numerator_units(i), target);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  for (int i = 0, n = this->_internal_denominator_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_denominator_units(i), target);
  }

  // optional bool select_by_default = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_select_by_default(), target);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  for (int i = 0, n = this->_internal_groups_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_groups(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  return target;
}

size_t GpuCounterDescriptor_GpuCounterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_numerator_units_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_numerator_units(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_denominator_units_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_denominator_units(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_groups_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_groups(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 counter_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_counter_id());
    }

    // optional bool select_by_default = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  switch (peak_value_case()) {
    // int64 int_peak_value = 5;
    case kIntPeakValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int_peak_value());
      break;
    }
    // double double_peak_value = 6;
    case kDoublePeakValue: {
      total_size += 1 + 8;
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor_GpuCounterSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpuCounterDescriptor_GpuCounterSpec*>(
      &from));
}

void GpuCounterDescriptor_GpuCounterSpec::MergeFrom(const GpuCounterDescriptor_GpuCounterSpec& from) {
  GpuCounterDescriptor_GpuCounterSpec* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.numerator_units_.MergeFrom(from._impl_.numerator_units_);
  _this->_impl_.denominator_units_.MergeFrom(from._impl_.denominator_units_);
  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.counter_id_ = from._impl_.counter_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.select_by_default_ = from._impl_.select_by_default_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      _this->_internal_set_int_peak_value(from._internal_int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      _this->_internal_set_double_peak_value(from._internal_double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpuCounterDescriptor_GpuCounterSpec::CopyFrom(const GpuCounterDescriptor_GpuCounterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterSpec::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterSpec::InternalSwap(GpuCounterDescriptor_GpuCounterSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.numerator_units_.InternalSwap(&other->_impl_.numerator_units_);
  _impl_.denominator_units_.InternalSwap(&other->_impl_.denominator_units_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterSpec, _impl_.select_by_default_)
      + sizeof(GpuCounterDescriptor_GpuCounterSpec::_impl_.select_by_default_)
      - PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterSpec, _impl_.counter_id_)>(
          reinterpret_cast<char*>(&_impl_.counter_id_),
          reinterpret_cast<char*>(&other->_impl_.counter_id_));
  swap(_impl_.peak_value_, other->_impl_.peak_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string GpuCounterDescriptor_GpuCounterSpec::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec";
}


// ===================================================================

class GpuCounterDescriptor_GpuCounterBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterBlock>()._impl_._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}
GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(const GpuCounterDescriptor_GpuCounterBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpuCounterDescriptor_GpuCounterBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counter_ids_){from._impl_.counter_ids_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.block_id_){}
    , decltype(_impl_.block_capacity_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_id_, &from._impl_.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_capacity_) -
    reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.block_capacity_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}

inline void GpuCounterDescriptor_GpuCounterBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counter_ids_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.block_id_){0u}
    , decltype(_impl_.block_capacity_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GpuCounterDescriptor_GpuCounterBlock::~GpuCounterDescriptor_GpuCounterBlock() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterDescriptor_GpuCounterBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counter_ids_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void GpuCounterDescriptor_GpuCounterBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterDescriptor_GpuCounterBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counter_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.block_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.block_capacity_) -
        reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.block_capacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GpuCounterDescriptor_GpuCounterBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_block_id(&has_bits);
          _impl_.block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 block_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_block_capacity(&has_bits);
          _impl_.block_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 counter_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_counter_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_counter_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpuCounterDescriptor_GpuCounterBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 block_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_id(), target);
  }

  // optional uint32 block_capacity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_capacity(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // repeated uint32 counter_ids = 5;
  for (int i = 0, n = this->_internal_counter_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_counter_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  return target;
}

size_t GpuCounterDescriptor_GpuCounterBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 counter_ids = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.counter_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_counter_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 block_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_id());
    }

    // optional uint32 block_capacity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_capacity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor_GpuCounterBlock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpuCounterDescriptor_GpuCounterBlock*>(
      &from));
}

void GpuCounterDescriptor_GpuCounterBlock::MergeFrom(const GpuCounterDescriptor_GpuCounterBlock& from) {
  GpuCounterDescriptor_GpuCounterBlock* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.counter_ids_.MergeFrom(from._impl_.counter_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.block_id_ = from._impl_.block_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.block_capacity_ = from._impl_.block_capacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpuCounterDescriptor_GpuCounterBlock::CopyFrom(const GpuCounterDescriptor_GpuCounterBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterBlock::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterBlock::InternalSwap(GpuCounterDescriptor_GpuCounterBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.counter_ids_.InternalSwap(&other->_impl_.counter_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterBlock, _impl_.block_capacity_)
      + sizeof(GpuCounterDescriptor_GpuCounterBlock::_impl_.block_capacity_)
      - PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterBlock, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

std::string GpuCounterDescriptor_GpuCounterBlock::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock";
}


// ===================================================================

class GpuCounterDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor>()._impl_._has_bits_);
  static void set_has_min_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_supports_instrumented_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GpuCounterDescriptor::GpuCounterDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterDescriptor)
}
GpuCounterDescriptor::GpuCounterDescriptor(const GpuCounterDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpuCounterDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.specs_){from._impl_.specs_}
    , decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.min_sampling_period_ns_){}
    , decltype(_impl_.max_sampling_period_ns_){}
    , decltype(_impl_.supports_instrumented_sampling_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.min_sampling_period_ns_, &from._impl_.min_sampling_period_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.supports_instrumented_sampling_) -
    reinterpret_cast<char*>(&_impl_.min_sampling_period_ns_)) + sizeof(_impl_.supports_instrumented_sampling_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor)
}

inline void GpuCounterDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.specs_){arena}
    , decltype(_impl_.blocks_){arena}
    , decltype(_impl_.min_sampling_period_ns_){uint64_t{0u}}
    , decltype(_impl_.max_sampling_period_ns_){uint64_t{0u}}
    , decltype(_impl_.supports_instrumented_sampling_){false}
  };
}

GpuCounterDescriptor::~GpuCounterDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.specs_.~RepeatedPtrField();
  _impl_.blocks_.~RepeatedPtrField();
}

void GpuCounterDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.specs_.Clear();
  _impl_.blocks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.min_sampling_period_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.supports_instrumented_sampling_) -
        reinterpret_cast<char*>(&_impl_.min_sampling_period_ns_)) + sizeof(_impl_.supports_instrumented_sampling_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GpuCounterDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 min_sampling_period_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_min_sampling_period_ns(&has_bits);
          _impl_.min_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_sampling_period_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_sampling_period_ns(&has_bits);
          _impl_.max_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_instrumented_sampling = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_supports_instrumented_sampling(&has_bits);
          _impl_.supports_instrumented_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpuCounterDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_specs_size()); i < n; i++) {
    const auto& repfield = this->_internal_specs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 min_sampling_period_ns = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_min_sampling_period_ns(), target);
  }

  // optional uint64 max_sampling_period_ns = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_max_sampling_period_ns(), target);
  }

  // optional bool supports_instrumented_sampling = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_supports_instrumented_sampling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterDescriptor)
  return target;
}

size_t GpuCounterDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  total_size += 1UL * this->_internal_specs_size();
  for (const auto& msg : this->_impl_.specs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 min_sampling_period_ns = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min_sampling_period_ns());
    }

    // optional uint64 max_sampling_period_ns = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_sampling_period_ns());
    }

    // optional bool supports_instrumented_sampling = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpuCounterDescriptor*>(
      &from));
}

void GpuCounterDescriptor::MergeFrom(const GpuCounterDescriptor& from) {
  GpuCounterDescriptor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.specs_.MergeFrom(from._impl_.specs_);
  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_sampling_period_ns_ = from._impl_.min_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_sampling_period_ns_ = from._impl_.max_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.supports_instrumented_sampling_ = from._impl_.supports_instrumented_sampling_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpuCounterDescriptor::CopyFrom(const GpuCounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor::InternalSwap(GpuCounterDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.specs_.InternalSwap(&other->_impl_.specs_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor, _impl_.supports_instrumented_sampling_)
      + sizeof(GpuCounterDescriptor::_impl_.supports_instrumented_sampling_)
      - PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor, _impl_.min_sampling_period_ns_)>(
          reinterpret_cast<char*>(&_impl_.min_sampling_period_ns_),
          reinterpret_cast<char*>(&other->_impl_.min_sampling_period_ns_));
}

std::string GpuCounterDescriptor::GetTypeName() const {
  return "perfetto.protos.GpuCounterDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
