// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/etw/etw_config.proto

#include "protos/perfetto/config/etw/etw_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR EtwConfig::EtwConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kernel_flags_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EtwConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtwConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtwConfigDefaultTypeInternal() {}
  union {
    EtwConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtwConfigDefaultTypeInternal _EtwConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool EtwConfig_KernelFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EtwConfig_KernelFlag_strings[2] = {};

static const char EtwConfig_KernelFlag_names[] =
  "CSWITCH"
  "DISPATCHER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EtwConfig_KernelFlag_entries[] = {
  { {EtwConfig_KernelFlag_names + 0, 7}, 0 },
  { {EtwConfig_KernelFlag_names + 7, 10}, 1 },
};

static const int EtwConfig_KernelFlag_entries_by_number[] = {
  0, // 0 -> CSWITCH
  1, // 1 -> DISPATCHER
};

const std::string& EtwConfig_KernelFlag_Name(
    EtwConfig_KernelFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EtwConfig_KernelFlag_entries,
          EtwConfig_KernelFlag_entries_by_number,
          2, EtwConfig_KernelFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EtwConfig_KernelFlag_entries,
      EtwConfig_KernelFlag_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EtwConfig_KernelFlag_strings[idx].get();
}
bool EtwConfig_KernelFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EtwConfig_KernelFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EtwConfig_KernelFlag_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<EtwConfig_KernelFlag>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EtwConfig_KernelFlag EtwConfig::CSWITCH;
constexpr EtwConfig_KernelFlag EtwConfig::DISPATCHER;
constexpr EtwConfig_KernelFlag EtwConfig::KernelFlag_MIN;
constexpr EtwConfig_KernelFlag EtwConfig::KernelFlag_MAX;
constexpr int EtwConfig::KernelFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EtwConfig::_Internal {
 public:
};

EtwConfig::EtwConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.EtwConfig)
}
EtwConfig::EtwConfig(const EtwConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EtwConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kernel_flags_){from._impl_.kernel_flags_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.EtwConfig)
}

inline void EtwConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kernel_flags_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EtwConfig::~EtwConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.EtwConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EtwConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kernel_flags_.~RepeatedField();
}

void EtwConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EtwConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.EtwConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kernel_flags_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EtwConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.EtwConfig.KernelFlag kernel_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::EtwConfig_KernelFlag_IsValid(val))) {
              _internal_add_kernel_flags(static_cast<::perfetto::protos::EtwConfig_KernelFlag>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_kernel_flags(), ptr, ctx, ::perfetto::protos::EtwConfig_KernelFlag_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EtwConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.EtwConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.EtwConfig.KernelFlag kernel_flags = 1;
  for (int i = 0, n = this->_internal_kernel_flags_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_kernel_flags(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.EtwConfig)
  return target;
}

size_t EtwConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.EtwConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.EtwConfig.KernelFlag kernel_flags = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_kernel_flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_kernel_flags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EtwConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EtwConfig*>(
      &from));
}

void EtwConfig::MergeFrom(const EtwConfig& from) {
  EtwConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.EtwConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kernel_flags_.MergeFrom(from._impl_.kernel_flags_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EtwConfig::CopyFrom(const EtwConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.EtwConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtwConfig::IsInitialized() const {
  return true;
}

void EtwConfig::InternalSwap(EtwConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kernel_flags_.InternalSwap(&other->_impl_.kernel_flags_);
}

std::string EtwConfig::GetTypeName() const {
  return "perfetto.protos.EtwConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::EtwConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::EtwConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::EtwConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
