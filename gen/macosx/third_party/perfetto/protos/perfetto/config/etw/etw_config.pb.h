// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/etw/etw_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fetw_2fetw_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fetw_2fetw_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fetw_2fetw_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fetw_2fetw_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class EtwConfig;
struct EtwConfigDefaultTypeInternal;
extern EtwConfigDefaultTypeInternal _EtwConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::EtwConfig* Arena::CreateMaybeMessage<::perfetto::protos::EtwConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum EtwConfig_KernelFlag : int {
  EtwConfig_KernelFlag_CSWITCH = 0,
  EtwConfig_KernelFlag_DISPATCHER = 1
};
bool EtwConfig_KernelFlag_IsValid(int value);
constexpr EtwConfig_KernelFlag EtwConfig_KernelFlag_KernelFlag_MIN = EtwConfig_KernelFlag_CSWITCH;
constexpr EtwConfig_KernelFlag EtwConfig_KernelFlag_KernelFlag_MAX = EtwConfig_KernelFlag_DISPATCHER;
constexpr int EtwConfig_KernelFlag_KernelFlag_ARRAYSIZE = EtwConfig_KernelFlag_KernelFlag_MAX + 1;

const std::string& EtwConfig_KernelFlag_Name(EtwConfig_KernelFlag value);
template<typename T>
inline const std::string& EtwConfig_KernelFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EtwConfig_KernelFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EtwConfig_KernelFlag_Name.");
  return EtwConfig_KernelFlag_Name(static_cast<EtwConfig_KernelFlag>(enum_t_value));
}
bool EtwConfig_KernelFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EtwConfig_KernelFlag* value);
// ===================================================================

class EtwConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.EtwConfig) */ {
 public:
  inline EtwConfig() : EtwConfig(nullptr) {}
  ~EtwConfig() override;
  explicit PROTOBUF_CONSTEXPR EtwConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EtwConfig(const EtwConfig& from);
  EtwConfig(EtwConfig&& from) noexcept
    : EtwConfig() {
    *this = ::std::move(from);
  }

  inline EtwConfig& operator=(const EtwConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtwConfig& operator=(EtwConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EtwConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const EtwConfig* internal_default_instance() {
    return reinterpret_cast<const EtwConfig*>(
               &_EtwConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EtwConfig& a, EtwConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EtwConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EtwConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EtwConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EtwConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EtwConfig& from);
  void MergeFrom(const EtwConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EtwConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.EtwConfig";
  }
  protected:
  explicit EtwConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef EtwConfig_KernelFlag KernelFlag;
  static constexpr KernelFlag CSWITCH =
    EtwConfig_KernelFlag_CSWITCH;
  static constexpr KernelFlag DISPATCHER =
    EtwConfig_KernelFlag_DISPATCHER;
  static inline bool KernelFlag_IsValid(int value) {
    return EtwConfig_KernelFlag_IsValid(value);
  }
  static constexpr KernelFlag KernelFlag_MIN =
    EtwConfig_KernelFlag_KernelFlag_MIN;
  static constexpr KernelFlag KernelFlag_MAX =
    EtwConfig_KernelFlag_KernelFlag_MAX;
  static constexpr int KernelFlag_ARRAYSIZE =
    EtwConfig_KernelFlag_KernelFlag_ARRAYSIZE;
  template<typename T>
  static inline const std::string& KernelFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KernelFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KernelFlag_Name.");
    return EtwConfig_KernelFlag_Name(enum_t_value);
  }
  static inline bool KernelFlag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KernelFlag* value) {
    return EtwConfig_KernelFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKernelFlagsFieldNumber = 1,
  };
  // repeated .perfetto.protos.EtwConfig.KernelFlag kernel_flags = 1;
  int kernel_flags_size() const;
  private:
  int _internal_kernel_flags_size() const;
  public:
  void clear_kernel_flags();
  private:
  ::perfetto::protos::EtwConfig_KernelFlag _internal_kernel_flags(int index) const;
  void _internal_add_kernel_flags(::perfetto::protos::EtwConfig_KernelFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_kernel_flags();
  public:
  ::perfetto::protos::EtwConfig_KernelFlag kernel_flags(int index) const;
  void set_kernel_flags(int index, ::perfetto::protos::EtwConfig_KernelFlag value);
  void add_kernel_flags(::perfetto::protos::EtwConfig_KernelFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& kernel_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_kernel_flags();

  // @@protoc_insertion_point(class_scope:perfetto.protos.EtwConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> kernel_flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fetw_2fetw_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EtwConfig

// repeated .perfetto.protos.EtwConfig.KernelFlag kernel_flags = 1;
inline int EtwConfig::_internal_kernel_flags_size() const {
  return _impl_.kernel_flags_.size();
}
inline int EtwConfig::kernel_flags_size() const {
  return _internal_kernel_flags_size();
}
inline void EtwConfig::clear_kernel_flags() {
  _impl_.kernel_flags_.Clear();
}
inline ::perfetto::protos::EtwConfig_KernelFlag EtwConfig::_internal_kernel_flags(int index) const {
  return static_cast< ::perfetto::protos::EtwConfig_KernelFlag >(_impl_.kernel_flags_.Get(index));
}
inline ::perfetto::protos::EtwConfig_KernelFlag EtwConfig::kernel_flags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EtwConfig.kernel_flags)
  return _internal_kernel_flags(index);
}
inline void EtwConfig::set_kernel_flags(int index, ::perfetto::protos::EtwConfig_KernelFlag value) {
  assert(::perfetto::protos::EtwConfig_KernelFlag_IsValid(value));
  _impl_.kernel_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EtwConfig.kernel_flags)
}
inline void EtwConfig::_internal_add_kernel_flags(::perfetto::protos::EtwConfig_KernelFlag value) {
  assert(::perfetto::protos::EtwConfig_KernelFlag_IsValid(value));
  _impl_.kernel_flags_.Add(value);
}
inline void EtwConfig::add_kernel_flags(::perfetto::protos::EtwConfig_KernelFlag value) {
  _internal_add_kernel_flags(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.EtwConfig.kernel_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
EtwConfig::kernel_flags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.EtwConfig.kernel_flags)
  return _impl_.kernel_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
EtwConfig::_internal_mutable_kernel_flags() {
  return &_impl_.kernel_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
EtwConfig::mutable_kernel_flags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.EtwConfig.kernel_flags)
  return _internal_mutable_kernel_flags();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::EtwConfig_KernelFlag> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fetw_2fetw_5fconfig_2eproto
