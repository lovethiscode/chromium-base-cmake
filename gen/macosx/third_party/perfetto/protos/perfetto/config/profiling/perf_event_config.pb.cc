// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/perf_event_config.proto

#include "protos/perfetto/config/profiling/perf_event_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scope_)*/nullptr
  , /*decltype(_impl_.kernel_frames_)*/false
  , /*decltype(_impl_.user_frames_)*/0} {}
struct PerfEventConfig_CallstackSamplingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEventConfig_CallstackSamplingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEventConfig_CallstackSamplingDefaultTypeInternal() {}
  union {
    PerfEventConfig_CallstackSampling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEventConfig_CallstackSamplingDefaultTypeInternal _PerfEventConfig_CallstackSampling_default_instance_;
PROTOBUF_CONSTEXPR PerfEventConfig_Scope::PerfEventConfig_Scope(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_pid_)*/{}
  , /*decltype(_impl_.target_cmdline_)*/{}
  , /*decltype(_impl_.exclude_pid_)*/{}
  , /*decltype(_impl_.exclude_cmdline_)*/{}
  , /*decltype(_impl_.additional_cmdline_count_)*/0u
  , /*decltype(_impl_.process_shard_count_)*/0u} {}
struct PerfEventConfig_ScopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEventConfig_ScopeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEventConfig_ScopeDefaultTypeInternal() {}
  union {
    PerfEventConfig_Scope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEventConfig_ScopeDefaultTypeInternal _PerfEventConfig_Scope_default_instance_;
PROTOBUF_CONSTEXPR PerfEventConfig::PerfEventConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_pid_)*/{}
  , /*decltype(_impl_.target_cmdline_)*/{}
  , /*decltype(_impl_.exclude_pid_)*/{}
  , /*decltype(_impl_.exclude_cmdline_)*/{}
  , /*decltype(_impl_.target_installed_by_)*/{}
  , /*decltype(_impl_.timebase_)*/nullptr
  , /*decltype(_impl_.callstack_sampling_)*/nullptr
  , /*decltype(_impl_.sampling_frequency_)*/0u
  , /*decltype(_impl_.ring_buffer_pages_)*/0u
  , /*decltype(_impl_.all_cpus_)*/false
  , /*decltype(_impl_.kernel_frames_)*/false
  , /*decltype(_impl_.ring_buffer_read_period_ms_)*/0u
  , /*decltype(_impl_.remote_descriptor_timeout_ms_)*/0u
  , /*decltype(_impl_.unwind_state_clear_period_ms_)*/0u
  , /*decltype(_impl_.additional_cmdline_count_)*/0u
  , /*decltype(_impl_.max_daemon_memory_kb_)*/0u
  , /*decltype(_impl_.max_enqueued_footprint_kb_)*/uint64_t{0u}} {}
struct PerfEventConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEventConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEventConfigDefaultTypeInternal() {}
  union {
    PerfEventConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEventConfigDefaultTypeInternal _PerfEventConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool PerfEventConfig_UnwindMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfEventConfig_UnwindMode_strings[3] = {};

static const char PerfEventConfig_UnwindMode_names[] =
  "UNWIND_DWARF"
  "UNWIND_SKIP"
  "UNWIND_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfEventConfig_UnwindMode_entries[] = {
  { {PerfEventConfig_UnwindMode_names + 0, 12}, 2 },
  { {PerfEventConfig_UnwindMode_names + 12, 11}, 1 },
  { {PerfEventConfig_UnwindMode_names + 23, 14}, 0 },
};

static const int PerfEventConfig_UnwindMode_entries_by_number[] = {
  2, // 0 -> UNWIND_UNKNOWN
  1, // 1 -> UNWIND_SKIP
  0, // 2 -> UNWIND_DWARF
};

const std::string& PerfEventConfig_UnwindMode_Name(
    PerfEventConfig_UnwindMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfEventConfig_UnwindMode_entries,
          PerfEventConfig_UnwindMode_entries_by_number,
          3, PerfEventConfig_UnwindMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfEventConfig_UnwindMode_entries,
      PerfEventConfig_UnwindMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfEventConfig_UnwindMode_strings[idx].get();
}
bool PerfEventConfig_UnwindMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfEventConfig_UnwindMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfEventConfig_UnwindMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PerfEventConfig_UnwindMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UNWIND_UNKNOWN;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UNWIND_SKIP;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UNWIND_DWARF;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UnwindMode_MIN;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UnwindMode_MAX;
constexpr int PerfEventConfig::UnwindMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PerfEventConfig_CallstackSampling::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_CallstackSampling>()._impl_._has_bits_);
  static const ::perfetto::protos::PerfEventConfig_Scope& scope(const PerfEventConfig_CallstackSampling* msg);
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::PerfEventConfig_Scope&
PerfEventConfig_CallstackSampling::_Internal::scope(const PerfEventConfig_CallstackSampling* msg) {
  return *msg->_impl_.scope_;
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling(const PerfEventConfig_CallstackSampling& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfEventConfig_CallstackSampling* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scope_){nullptr}
    , decltype(_impl_.kernel_frames_){}
    , decltype(_impl_.user_frames_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_scope()) {
    _this->_impl_.scope_ = new ::perfetto::protos::PerfEventConfig_Scope(*from._impl_.scope_);
  }
  ::memcpy(&_impl_.kernel_frames_, &from._impl_.kernel_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_frames_) -
    reinterpret_cast<char*>(&_impl_.kernel_frames_)) + sizeof(_impl_.user_frames_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}

inline void PerfEventConfig_CallstackSampling::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scope_){nullptr}
    , decltype(_impl_.kernel_frames_){false}
    , decltype(_impl_.user_frames_){0}
  };
}

PerfEventConfig_CallstackSampling::~PerfEventConfig_CallstackSampling() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.CallstackSampling)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEventConfig_CallstackSampling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.scope_;
}

void PerfEventConfig_CallstackSampling::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEventConfig_CallstackSampling::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.scope_ != nullptr);
    _impl_.scope_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.kernel_frames_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_frames_) -
        reinterpret_cast<char*>(&_impl_.kernel_frames_)) + sizeof(_impl_.user_frames_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEventConfig_CallstackSampling::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scope(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool kernel_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kernel_frames(&has_bits);
          _impl_.kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEventConfig_UnwindMode_IsValid(val))) {
            _internal_set_user_frames(static_cast<::perfetto::protos::PerfEventConfig_UnwindMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfEventConfig_CallstackSampling::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scope(this),
        _Internal::scope(this).GetCachedSize(), target, stream);
  }

  // optional bool kernel_frames = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_kernel_frames(), target);
  }

  // optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_user_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEventConfig.CallstackSampling)
  return target;
}

size_t PerfEventConfig_CallstackSampling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scope_);
    }

    // optional bool kernel_frames = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_user_frames());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_CallstackSampling::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfEventConfig_CallstackSampling*>(
      &from));
}

void PerfEventConfig_CallstackSampling::MergeFrom(const PerfEventConfig_CallstackSampling& from) {
  PerfEventConfig_CallstackSampling* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_scope()->::perfetto::protos::PerfEventConfig_Scope::MergeFrom(
          from._internal_scope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kernel_frames_ = from._impl_.kernel_frames_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.user_frames_ = from._impl_.user_frames_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfEventConfig_CallstackSampling::CopyFrom(const PerfEventConfig_CallstackSampling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_CallstackSampling::IsInitialized() const {
  return true;
}

void PerfEventConfig_CallstackSampling::InternalSwap(PerfEventConfig_CallstackSampling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfEventConfig_CallstackSampling, _impl_.user_frames_)
      + sizeof(PerfEventConfig_CallstackSampling::_impl_.user_frames_)
      - PROTOBUF_FIELD_OFFSET(PerfEventConfig_CallstackSampling, _impl_.scope_)>(
          reinterpret_cast<char*>(&_impl_.scope_),
          reinterpret_cast<char*>(&other->_impl_.scope_));
}

std::string PerfEventConfig_CallstackSampling::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.CallstackSampling";
}


// ===================================================================

class PerfEventConfig_Scope::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_Scope>()._impl_._has_bits_);
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_shard_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PerfEventConfig_Scope::PerfEventConfig_Scope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEventConfig.Scope)
}
PerfEventConfig_Scope::PerfEventConfig_Scope(const PerfEventConfig_Scope& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfEventConfig_Scope* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_pid_){from._impl_.target_pid_}
    , decltype(_impl_.target_cmdline_){from._impl_.target_cmdline_}
    , decltype(_impl_.exclude_pid_){from._impl_.exclude_pid_}
    , decltype(_impl_.exclude_cmdline_){from._impl_.exclude_cmdline_}
    , decltype(_impl_.additional_cmdline_count_){}
    , decltype(_impl_.process_shard_count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.additional_cmdline_count_, &from._impl_.additional_cmdline_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.process_shard_count_) -
    reinterpret_cast<char*>(&_impl_.additional_cmdline_count_)) + sizeof(_impl_.process_shard_count_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.Scope)
}

inline void PerfEventConfig_Scope::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_pid_){arena}
    , decltype(_impl_.target_cmdline_){arena}
    , decltype(_impl_.exclude_pid_){arena}
    , decltype(_impl_.exclude_cmdline_){arena}
    , decltype(_impl_.additional_cmdline_count_){0u}
    , decltype(_impl_.process_shard_count_){0u}
  };
}

PerfEventConfig_Scope::~PerfEventConfig_Scope() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.Scope)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEventConfig_Scope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_pid_.~RepeatedField();
  _impl_.target_cmdline_.~RepeatedPtrField();
  _impl_.exclude_pid_.~RepeatedField();
  _impl_.exclude_cmdline_.~RepeatedPtrField();
}

void PerfEventConfig_Scope::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEventConfig_Scope::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.Scope)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_pid_.Clear();
  _impl_.target_cmdline_.Clear();
  _impl_.exclude_pid_.Clear();
  _impl_.exclude_cmdline_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.additional_cmdline_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.process_shard_count_) -
        reinterpret_cast<char*>(&_impl_.additional_cmdline_count_)) + sizeof(_impl_.process_shard_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEventConfig_Scope::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 target_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string target_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          _impl_.additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 process_shard_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_process_shard_count(&has_bits);
          _impl_.process_shard_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfEventConfig_Scope::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEventConfig.Scope)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  for (int i = 0, n = this->_internal_target_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_pid(i), target);
  }

  // repeated string target_cmdline = 2;
  for (int i = 0, n = this->_internal_target_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_target_cmdline(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 exclude_pid = 3;
  for (int i = 0, n = this->_internal_exclude_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_exclude_pid(i), target);
  }

  // repeated string exclude_cmdline = 4;
  for (int i = 0, n = this->_internal_exclude_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_cmdline(i);
    target = stream->WriteString(4, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 additional_cmdline_count = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_additional_cmdline_count(), target);
  }

  // optional uint32 process_shard_count = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_process_shard_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEventConfig.Scope)
  return target;
}

size_t PerfEventConfig_Scope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.Scope)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.target_pid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_cmdline_.size());
  for (int i = 0, n = _impl_.target_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_cmdline_.Get(i));
  }

  // repeated int32 exclude_pid = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.exclude_pid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exclude_cmdline_.size());
  for (int i = 0, n = _impl_.exclude_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exclude_cmdline_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 additional_cmdline_count = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_additional_cmdline_count());
    }

    // optional uint32 process_shard_count = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_process_shard_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_Scope::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfEventConfig_Scope*>(
      &from));
}

void PerfEventConfig_Scope::MergeFrom(const PerfEventConfig_Scope& from) {
  PerfEventConfig_Scope* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.Scope)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_pid_.MergeFrom(from._impl_.target_pid_);
  _this->_impl_.target_cmdline_.MergeFrom(from._impl_.target_cmdline_);
  _this->_impl_.exclude_pid_.MergeFrom(from._impl_.exclude_pid_);
  _this->_impl_.exclude_cmdline_.MergeFrom(from._impl_.exclude_cmdline_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.additional_cmdline_count_ = from._impl_.additional_cmdline_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.process_shard_count_ = from._impl_.process_shard_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfEventConfig_Scope::CopyFrom(const PerfEventConfig_Scope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_Scope::IsInitialized() const {
  return true;
}

void PerfEventConfig_Scope::InternalSwap(PerfEventConfig_Scope* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.target_pid_.InternalSwap(&other->_impl_.target_pid_);
  _impl_.target_cmdline_.InternalSwap(&other->_impl_.target_cmdline_);
  _impl_.exclude_pid_.InternalSwap(&other->_impl_.exclude_pid_);
  _impl_.exclude_cmdline_.InternalSwap(&other->_impl_.exclude_cmdline_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfEventConfig_Scope, _impl_.process_shard_count_)
      + sizeof(PerfEventConfig_Scope::_impl_.process_shard_count_)
      - PROTOBUF_FIELD_OFFSET(PerfEventConfig_Scope, _impl_.additional_cmdline_count_)>(
          reinterpret_cast<char*>(&_impl_.additional_cmdline_count_),
          reinterpret_cast<char*>(&other->_impl_.additional_cmdline_count_));
}

std::string PerfEventConfig_Scope::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.Scope";
}


// ===================================================================

class PerfEventConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig>()._impl_._has_bits_);
  static const ::perfetto::protos::PerfEvents_Timebase& timebase(const PerfEventConfig* msg);
  static void set_has_timebase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::PerfEventConfig_CallstackSampling& callstack_sampling(const PerfEventConfig* msg);
  static void set_has_callstack_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ring_buffer_read_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ring_buffer_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_enqueued_footprint_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_daemon_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_remote_descriptor_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unwind_state_clear_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_all_cpus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sampling_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::perfetto::protos::PerfEvents_Timebase&
PerfEventConfig::_Internal::timebase(const PerfEventConfig* msg) {
  return *msg->_impl_.timebase_;
}
const ::perfetto::protos::PerfEventConfig_CallstackSampling&
PerfEventConfig::_Internal::callstack_sampling(const PerfEventConfig* msg) {
  return *msg->_impl_.callstack_sampling_;
}
void PerfEventConfig::clear_timebase() {
  if (_impl_.timebase_ != nullptr) _impl_.timebase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PerfEventConfig::PerfEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEventConfig)
}
PerfEventConfig::PerfEventConfig(const PerfEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfEventConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_pid_){from._impl_.target_pid_}
    , decltype(_impl_.target_cmdline_){from._impl_.target_cmdline_}
    , decltype(_impl_.exclude_pid_){from._impl_.exclude_pid_}
    , decltype(_impl_.exclude_cmdline_){from._impl_.exclude_cmdline_}
    , decltype(_impl_.target_installed_by_){from._impl_.target_installed_by_}
    , decltype(_impl_.timebase_){nullptr}
    , decltype(_impl_.callstack_sampling_){nullptr}
    , decltype(_impl_.sampling_frequency_){}
    , decltype(_impl_.ring_buffer_pages_){}
    , decltype(_impl_.all_cpus_){}
    , decltype(_impl_.kernel_frames_){}
    , decltype(_impl_.ring_buffer_read_period_ms_){}
    , decltype(_impl_.remote_descriptor_timeout_ms_){}
    , decltype(_impl_.unwind_state_clear_period_ms_){}
    , decltype(_impl_.additional_cmdline_count_){}
    , decltype(_impl_.max_daemon_memory_kb_){}
    , decltype(_impl_.max_enqueued_footprint_kb_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timebase()) {
    _this->_impl_.timebase_ = new ::perfetto::protos::PerfEvents_Timebase(*from._impl_.timebase_);
  }
  if (from._internal_has_callstack_sampling()) {
    _this->_impl_.callstack_sampling_ = new ::perfetto::protos::PerfEventConfig_CallstackSampling(*from._impl_.callstack_sampling_);
  }
  ::memcpy(&_impl_.sampling_frequency_, &from._impl_.sampling_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_enqueued_footprint_kb_) -
    reinterpret_cast<char*>(&_impl_.sampling_frequency_)) + sizeof(_impl_.max_enqueued_footprint_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig)
}

inline void PerfEventConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_pid_){arena}
    , decltype(_impl_.target_cmdline_){arena}
    , decltype(_impl_.exclude_pid_){arena}
    , decltype(_impl_.exclude_cmdline_){arena}
    , decltype(_impl_.target_installed_by_){arena}
    , decltype(_impl_.timebase_){nullptr}
    , decltype(_impl_.callstack_sampling_){nullptr}
    , decltype(_impl_.sampling_frequency_){0u}
    , decltype(_impl_.ring_buffer_pages_){0u}
    , decltype(_impl_.all_cpus_){false}
    , decltype(_impl_.kernel_frames_){false}
    , decltype(_impl_.ring_buffer_read_period_ms_){0u}
    , decltype(_impl_.remote_descriptor_timeout_ms_){0u}
    , decltype(_impl_.unwind_state_clear_period_ms_){0u}
    , decltype(_impl_.additional_cmdline_count_){0u}
    , decltype(_impl_.max_daemon_memory_kb_){0u}
    , decltype(_impl_.max_enqueued_footprint_kb_){uint64_t{0u}}
  };
}

PerfEventConfig::~PerfEventConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEventConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_pid_.~RepeatedField();
  _impl_.target_cmdline_.~RepeatedPtrField();
  _impl_.exclude_pid_.~RepeatedField();
  _impl_.exclude_cmdline_.~RepeatedPtrField();
  _impl_.target_installed_by_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.timebase_;
  if (this != internal_default_instance()) delete _impl_.callstack_sampling_;
}

void PerfEventConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_pid_.Clear();
  _impl_.target_cmdline_.Clear();
  _impl_.exclude_pid_.Clear();
  _impl_.exclude_cmdline_.Clear();
  _impl_.target_installed_by_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.timebase_ != nullptr);
      _impl_.timebase_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.callstack_sampling_ != nullptr);
      _impl_.callstack_sampling_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.sampling_frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remote_descriptor_timeout_ms_) -
        reinterpret_cast<char*>(&_impl_.sampling_frequency_)) + sizeof(_impl_.remote_descriptor_timeout_ms_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.unwind_state_clear_period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_enqueued_footprint_kb_) -
        reinterpret_cast<char*>(&_impl_.unwind_state_clear_period_ms_)) + sizeof(_impl_.max_enqueued_footprint_kb_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEventConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool all_cpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_all_cpus(&has_bits);
          _impl_.all_cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sampling_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sampling_frequency(&has_bits);
          _impl_.sampling_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ring_buffer_pages(&has_bits);
          _impl_.ring_buffer_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 target_pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string target_cmdline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_read_period_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ring_buffer_read_period_ms(&has_bits);
          _impl_.ring_buffer_read_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 remote_descriptor_timeout_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_remote_descriptor_timeout_ms(&has_bits);
          _impl_.remote_descriptor_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unwind_state_clear_period_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_unwind_state_clear_period_ms(&has_bits);
          _impl_.unwind_state_clear_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          _impl_.additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool kernel_frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_kernel_frames(&has_bits);
          _impl_.kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_daemon_memory_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_max_daemon_memory_kb(&has_bits);
          _impl_.max_daemon_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_timebase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_callstack_sampling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_enqueued_footprint_kb = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_max_enqueued_footprint_kb(&has_bits);
          _impl_.max_enqueued_footprint_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string target_installed_by = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_target_installed_by();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfEventConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEventConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool all_cpus = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_all_cpus(), target);
  }

  // optional uint32 sampling_frequency = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sampling_frequency(), target);
  }

  // optional uint32 ring_buffer_pages = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ring_buffer_pages(), target);
  }

  // repeated int32 target_pid = 4;
  for (int i = 0, n = this->_internal_target_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_pid(i), target);
  }

  // repeated string target_cmdline = 5;
  for (int i = 0, n = this->_internal_target_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_target_cmdline(i);
    target = stream->WriteString(5, s, target);
  }

  // repeated int32 exclude_pid = 6;
  for (int i = 0, n = this->_internal_exclude_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_exclude_pid(i), target);
  }

  // repeated string exclude_cmdline = 7;
  for (int i = 0, n = this->_internal_exclude_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_cmdline(i);
    target = stream->WriteString(7, s, target);
  }

  // optional uint32 ring_buffer_read_period_ms = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ring_buffer_read_period_ms(), target);
  }

  // optional uint32 remote_descriptor_timeout_ms = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_remote_descriptor_timeout_ms(), target);
  }

  // optional uint32 unwind_state_clear_period_ms = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_unwind_state_clear_period_ms(), target);
  }

  // optional uint32 additional_cmdline_count = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_additional_cmdline_count(), target);
  }

  // optional bool kernel_frames = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_kernel_frames(), target);
  }

  // optional uint32 max_daemon_memory_kb = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_max_daemon_memory_kb(), target);
  }

  // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::timebase(this),
        _Internal::timebase(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::callstack_sampling(this),
        _Internal::callstack_sampling(this).GetCachedSize(), target, stream);
  }

  // optional uint64 max_enqueued_footprint_kb = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_max_enqueued_footprint_kb(), target);
  }

  // repeated string target_installed_by = 18;
  for (int i = 0, n = this->_internal_target_installed_by_size(); i < n; i++) {
    const auto& s = this->_internal_target_installed_by(i);
    target = stream->WriteString(18, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEventConfig)
  return target;
}

size_t PerfEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.target_pid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_cmdline_.size());
  for (int i = 0, n = _impl_.target_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_cmdline_.Get(i));
  }

  // repeated int32 exclude_pid = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.exclude_pid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exclude_cmdline_.size());
  for (int i = 0, n = _impl_.exclude_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exclude_cmdline_.Get(i));
  }

  // repeated string target_installed_by = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_installed_by_.size());
  for (int i = 0, n = _impl_.target_installed_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_installed_by_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timebase_);
    }

    // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.callstack_sampling_);
    }

    // optional uint32 sampling_frequency = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sampling_frequency());
    }

    // optional uint32 ring_buffer_pages = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ring_buffer_pages());
    }

    // optional bool all_cpus = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool kernel_frames = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 ring_buffer_read_period_ms = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ring_buffer_read_period_ms());
    }

    // optional uint32 remote_descriptor_timeout_ms = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_descriptor_timeout_ms());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 unwind_state_clear_period_ms = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unwind_state_clear_period_ms());
    }

    // optional uint32 additional_cmdline_count = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_additional_cmdline_count());
    }

    // optional uint32 max_daemon_memory_kb = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_daemon_memory_kb());
    }

    // optional uint64 max_enqueued_footprint_kb = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_max_enqueued_footprint_kb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfEventConfig*>(
      &from));
}

void PerfEventConfig::MergeFrom(const PerfEventConfig& from) {
  PerfEventConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_pid_.MergeFrom(from._impl_.target_pid_);
  _this->_impl_.target_cmdline_.MergeFrom(from._impl_.target_cmdline_);
  _this->_impl_.exclude_pid_.MergeFrom(from._impl_.exclude_pid_);
  _this->_impl_.exclude_cmdline_.MergeFrom(from._impl_.exclude_cmdline_);
  _this->_impl_.target_installed_by_.MergeFrom(from._impl_.target_installed_by_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timebase()->::perfetto::protos::PerfEvents_Timebase::MergeFrom(
          from._internal_timebase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_callstack_sampling()->::perfetto::protos::PerfEventConfig_CallstackSampling::MergeFrom(
          from._internal_callstack_sampling());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sampling_frequency_ = from._impl_.sampling_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ring_buffer_pages_ = from._impl_.ring_buffer_pages_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.all_cpus_ = from._impl_.all_cpus_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kernel_frames_ = from._impl_.kernel_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ring_buffer_read_period_ms_ = from._impl_.ring_buffer_read_period_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.remote_descriptor_timeout_ms_ = from._impl_.remote_descriptor_timeout_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.unwind_state_clear_period_ms_ = from._impl_.unwind_state_clear_period_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.additional_cmdline_count_ = from._impl_.additional_cmdline_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.max_daemon_memory_kb_ = from._impl_.max_daemon_memory_kb_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.max_enqueued_footprint_kb_ = from._impl_.max_enqueued_footprint_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfEventConfig::CopyFrom(const PerfEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig::IsInitialized() const {
  return true;
}

void PerfEventConfig::InternalSwap(PerfEventConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.target_pid_.InternalSwap(&other->_impl_.target_pid_);
  _impl_.target_cmdline_.InternalSwap(&other->_impl_.target_cmdline_);
  _impl_.exclude_pid_.InternalSwap(&other->_impl_.exclude_pid_);
  _impl_.exclude_cmdline_.InternalSwap(&other->_impl_.exclude_cmdline_);
  _impl_.target_installed_by_.InternalSwap(&other->_impl_.target_installed_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfEventConfig, _impl_.max_enqueued_footprint_kb_)
      + sizeof(PerfEventConfig::_impl_.max_enqueued_footprint_kb_)
      - PROTOBUF_FIELD_OFFSET(PerfEventConfig, _impl_.timebase_)>(
          reinterpret_cast<char*>(&_impl_.timebase_),
          reinterpret_cast<char*>(&other->_impl_.timebase_));
}

std::string PerfEventConfig::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_CallstackSampling*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_CallstackSampling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEventConfig_CallstackSampling >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_Scope*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_Scope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEventConfig_Scope >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEventConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
