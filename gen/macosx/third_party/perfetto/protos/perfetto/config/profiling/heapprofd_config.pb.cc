// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/heapprofd_config.proto

#include "protos/perfetto/config/profiling/heapprofd_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dump_phase_ms_)*/0u
  , /*decltype(_impl_.dump_interval_ms_)*/0u} {}
struct HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal() {}
  union {
    HeapprofdConfig_ContinuousDumpConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal _HeapprofdConfig_ContinuousDumpConfig_default_instance_;
PROTOBUF_CONSTEXPR HeapprofdConfig::HeapprofdConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.process_cmdline_)*/{}
  , /*decltype(_impl_.pid_)*/{}
  , /*decltype(_impl_.skip_symbol_prefix_)*/{}
  , /*decltype(_impl_.heaps_)*/{}
  , /*decltype(_impl_.heap_sampling_intervals_)*/{}
  , /*decltype(_impl_.target_installed_by_)*/{}
  , /*decltype(_impl_.exclude_heaps_)*/{}
  , /*decltype(_impl_.continuous_dump_config_)*/nullptr
  , /*decltype(_impl_.sampling_interval_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.shmem_size_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.no_startup_)*/false
  , /*decltype(_impl_.no_running_)*/false
  , /*decltype(_impl_.dump_at_max_)*/false
  , /*decltype(_impl_.disable_fork_teardown_)*/false
  , /*decltype(_impl_.block_client_timeout_us_)*/0u
  , /*decltype(_impl_.stream_allocations_)*/false
  , /*decltype(_impl_.all_heaps_)*/false
  , /*decltype(_impl_.all_)*/false
  , /*decltype(_impl_.block_client_)*/false
  , /*decltype(_impl_.min_anonymous_memory_kb_)*/0u
  , /*decltype(_impl_.max_heapprofd_cpu_secs_)*/uint64_t{0u}
  , /*decltype(_impl_.max_heapprofd_memory_kb_)*/0u
  , /*decltype(_impl_.disable_vfork_detection_)*/false
  , /*decltype(_impl_.adaptive_sampling_shmem_threshold_)*/uint64_t{0u}
  , /*decltype(_impl_.adaptive_sampling_max_sampling_interval_bytes_)*/uint64_t{0u}} {}
struct HeapprofdConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapprofdConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapprofdConfigDefaultTypeInternal() {}
  union {
    HeapprofdConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapprofdConfigDefaultTypeInternal _HeapprofdConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class HeapprofdConfig_ContinuousDumpConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig_ContinuousDumpConfig>()._impl_._has_bits_);
  static void set_has_dump_phase_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dump_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}
HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(const HeapprofdConfig_ContinuousDumpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeapprofdConfig_ContinuousDumpConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dump_phase_ms_){}
    , decltype(_impl_.dump_interval_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.dump_phase_ms_, &from._impl_.dump_phase_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dump_interval_ms_) -
    reinterpret_cast<char*>(&_impl_.dump_phase_ms_)) + sizeof(_impl_.dump_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}

inline void HeapprofdConfig_ContinuousDumpConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dump_phase_ms_){0u}
    , decltype(_impl_.dump_interval_ms_){0u}
  };
}

HeapprofdConfig_ContinuousDumpConfig::~HeapprofdConfig_ContinuousDumpConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapprofdConfig_ContinuousDumpConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeapprofdConfig_ContinuousDumpConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapprofdConfig_ContinuousDumpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.dump_phase_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dump_interval_ms_) -
        reinterpret_cast<char*>(&_impl_.dump_phase_ms_)) + sizeof(_impl_.dump_interval_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeapprofdConfig_ContinuousDumpConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dump_phase_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dump_phase_ms(&has_bits);
          _impl_.dump_phase_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dump_interval_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_dump_interval_ms(&has_bits);
          _impl_.dump_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapprofdConfig_ContinuousDumpConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 dump_phase_ms = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dump_phase_ms(), target);
  }

  // optional uint32 dump_interval_ms = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dump_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  return target;
}

size_t HeapprofdConfig_ContinuousDumpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dump_phase_ms = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dump_phase_ms());
    }

    // optional uint32 dump_interval_ms = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dump_interval_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapprofdConfig_ContinuousDumpConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeapprofdConfig_ContinuousDumpConfig*>(
      &from));
}

void HeapprofdConfig_ContinuousDumpConfig::MergeFrom(const HeapprofdConfig_ContinuousDumpConfig& from) {
  HeapprofdConfig_ContinuousDumpConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dump_phase_ms_ = from._impl_.dump_phase_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dump_interval_ms_ = from._impl_.dump_interval_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeapprofdConfig_ContinuousDumpConfig::CopyFrom(const HeapprofdConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig_ContinuousDumpConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig_ContinuousDumpConfig::InternalSwap(HeapprofdConfig_ContinuousDumpConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapprofdConfig_ContinuousDumpConfig, _impl_.dump_interval_ms_)
      + sizeof(HeapprofdConfig_ContinuousDumpConfig::_impl_.dump_interval_ms_)
      - PROTOBUF_FIELD_OFFSET(HeapprofdConfig_ContinuousDumpConfig, _impl_.dump_phase_ms_)>(
          reinterpret_cast<char*>(&_impl_.dump_phase_ms_),
          reinterpret_cast<char*>(&other->_impl_.dump_phase_ms_));
}

std::string HeapprofdConfig_ContinuousDumpConfig::GetTypeName() const {
  return "perfetto.protos.HeapprofdConfig.ContinuousDumpConfig";
}


// ===================================================================

class HeapprofdConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig>()._impl_._has_bits_);
  static void set_has_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adaptive_sampling_shmem_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_adaptive_sampling_max_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_stream_allocations(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_all_heaps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_anonymous_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_heapprofd_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_heapprofd_cpu_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& continuous_dump_config(const HeapprofdConfig* msg);
  static void set_has_continuous_dump_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shmem_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_client(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_block_client_timeout_us(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_no_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_no_running(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dump_at_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disable_fork_teardown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disable_vfork_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig&
HeapprofdConfig::_Internal::continuous_dump_config(const HeapprofdConfig* msg) {
  return *msg->_impl_.continuous_dump_config_;
}
HeapprofdConfig::HeapprofdConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapprofdConfig)
}
HeapprofdConfig::HeapprofdConfig(const HeapprofdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeapprofdConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_cmdline_){from._impl_.process_cmdline_}
    , decltype(_impl_.pid_){from._impl_.pid_}
    , decltype(_impl_.skip_symbol_prefix_){from._impl_.skip_symbol_prefix_}
    , decltype(_impl_.heaps_){from._impl_.heaps_}
    , decltype(_impl_.heap_sampling_intervals_){from._impl_.heap_sampling_intervals_}
    , decltype(_impl_.target_installed_by_){from._impl_.target_installed_by_}
    , decltype(_impl_.exclude_heaps_){from._impl_.exclude_heaps_}
    , decltype(_impl_.continuous_dump_config_){nullptr}
    , decltype(_impl_.sampling_interval_bytes_){}
    , decltype(_impl_.shmem_size_bytes_){}
    , decltype(_impl_.no_startup_){}
    , decltype(_impl_.no_running_){}
    , decltype(_impl_.dump_at_max_){}
    , decltype(_impl_.disable_fork_teardown_){}
    , decltype(_impl_.block_client_timeout_us_){}
    , decltype(_impl_.stream_allocations_){}
    , decltype(_impl_.all_heaps_){}
    , decltype(_impl_.all_){}
    , decltype(_impl_.block_client_){}
    , decltype(_impl_.min_anonymous_memory_kb_){}
    , decltype(_impl_.max_heapprofd_cpu_secs_){}
    , decltype(_impl_.max_heapprofd_memory_kb_){}
    , decltype(_impl_.disable_vfork_detection_){}
    , decltype(_impl_.adaptive_sampling_shmem_threshold_){}
    , decltype(_impl_.adaptive_sampling_max_sampling_interval_bytes_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_continuous_dump_config()) {
    _this->_impl_.continuous_dump_config_ = new ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig(*from._impl_.continuous_dump_config_);
  }
  ::memcpy(&_impl_.sampling_interval_bytes_, &from._impl_.sampling_interval_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.adaptive_sampling_max_sampling_interval_bytes_) -
    reinterpret_cast<char*>(&_impl_.sampling_interval_bytes_)) + sizeof(_impl_.adaptive_sampling_max_sampling_interval_bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig)
}

inline void HeapprofdConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_cmdline_){arena}
    , decltype(_impl_.pid_){arena}
    , decltype(_impl_.skip_symbol_prefix_){arena}
    , decltype(_impl_.heaps_){arena}
    , decltype(_impl_.heap_sampling_intervals_){arena}
    , decltype(_impl_.target_installed_by_){arena}
    , decltype(_impl_.exclude_heaps_){arena}
    , decltype(_impl_.continuous_dump_config_){nullptr}
    , decltype(_impl_.sampling_interval_bytes_){uint64_t{0u}}
    , decltype(_impl_.shmem_size_bytes_){uint64_t{0u}}
    , decltype(_impl_.no_startup_){false}
    , decltype(_impl_.no_running_){false}
    , decltype(_impl_.dump_at_max_){false}
    , decltype(_impl_.disable_fork_teardown_){false}
    , decltype(_impl_.block_client_timeout_us_){0u}
    , decltype(_impl_.stream_allocations_){false}
    , decltype(_impl_.all_heaps_){false}
    , decltype(_impl_.all_){false}
    , decltype(_impl_.block_client_){false}
    , decltype(_impl_.min_anonymous_memory_kb_){0u}
    , decltype(_impl_.max_heapprofd_cpu_secs_){uint64_t{0u}}
    , decltype(_impl_.max_heapprofd_memory_kb_){0u}
    , decltype(_impl_.disable_vfork_detection_){false}
    , decltype(_impl_.adaptive_sampling_shmem_threshold_){uint64_t{0u}}
    , decltype(_impl_.adaptive_sampling_max_sampling_interval_bytes_){uint64_t{0u}}
  };
}

HeapprofdConfig::~HeapprofdConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapprofdConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_cmdline_.~RepeatedPtrField();
  _impl_.pid_.~RepeatedField();
  _impl_.skip_symbol_prefix_.~RepeatedPtrField();
  _impl_.heaps_.~RepeatedPtrField();
  _impl_.heap_sampling_intervals_.~RepeatedField();
  _impl_.target_installed_by_.~RepeatedPtrField();
  _impl_.exclude_heaps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.continuous_dump_config_;
}

void HeapprofdConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapprofdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_cmdline_.Clear();
  _impl_.pid_.Clear();
  _impl_.skip_symbol_prefix_.Clear();
  _impl_.heaps_.Clear();
  _impl_.heap_sampling_intervals_.Clear();
  _impl_.target_installed_by_.Clear();
  _impl_.exclude_heaps_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.continuous_dump_config_ != nullptr);
    _impl_.continuous_dump_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.sampling_interval_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.block_client_timeout_us_) -
        reinterpret_cast<char*>(&_impl_.sampling_interval_bytes_)) + sizeof(_impl_.block_client_timeout_us_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.stream_allocations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.disable_vfork_detection_) -
        reinterpret_cast<char*>(&_impl_.stream_allocations_)) + sizeof(_impl_.disable_vfork_detection_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.adaptive_sampling_shmem_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.adaptive_sampling_max_sampling_interval_bytes_) -
        reinterpret_cast<char*>(&_impl_.adaptive_sampling_shmem_threshold_)) + sizeof(_impl_.adaptive_sampling_max_sampling_interval_bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeapprofdConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sampling_interval_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sampling_interval_bytes(&has_bits);
          _impl_.sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string process_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_process_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_all(&has_bits);
          _impl_.all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuous_dump_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string skip_symbol_prefix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_skip_symbol_prefix();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shmem_size_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_shmem_size_bytes(&has_bits);
          _impl_.shmem_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool block_client = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_block_client(&has_bits);
          _impl_.block_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool no_startup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_no_startup(&has_bits);
          _impl_.no_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool no_running = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_no_running(&has_bits);
          _impl_.no_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dump_at_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_dump_at_max(&has_bits);
          _impl_.dump_at_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 block_client_timeout_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_block_client_timeout_us(&has_bits);
          _impl_.block_client_timeout_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_anonymous_memory_kb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_min_anonymous_memory_kb(&has_bits);
          _impl_.min_anonymous_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_heapprofd_memory_kb = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_max_heapprofd_memory_kb(&has_bits);
          _impl_.max_heapprofd_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_heapprofd_cpu_secs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_max_heapprofd_cpu_secs(&has_bits);
          _impl_.max_heapprofd_cpu_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_fork_teardown = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_disable_fork_teardown(&has_bits);
          _impl_.disable_fork_teardown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_vfork_detection = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_disable_vfork_detection(&has_bits);
          _impl_.disable_vfork_detection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string heaps = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_heaps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool all_heaps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_all_heaps(&has_bits);
          _impl_.all_heaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 heap_sampling_intervals = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_heap_sampling_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_heap_sampling_intervals(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool stream_allocations = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_stream_allocations(&has_bits);
          _impl_.stream_allocations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 adaptive_sampling_shmem_threshold = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_adaptive_sampling_shmem_threshold(&has_bits);
          _impl_.adaptive_sampling_shmem_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_adaptive_sampling_max_sampling_interval_bytes(&has_bits);
          _impl_.adaptive_sampling_max_sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string target_installed_by = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_target_installed_by();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string exclude_heaps = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_exclude_heaps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeapprofdConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapprofdConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 sampling_interval_bytes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sampling_interval_bytes(), target);
  }

  // repeated string process_cmdline = 2;
  for (int i = 0, n = this->_internal_process_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_process_cmdline(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated uint64 pid = 4;
  for (int i = 0, n = this->_internal_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pid(i), target);
  }

  // optional bool all = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_all(), target);
  }

  // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::continuous_dump_config(this),
        _Internal::continuous_dump_config(this).GetCachedSize(), target, stream);
  }

  // repeated string skip_symbol_prefix = 7;
  for (int i = 0, n = this->_internal_skip_symbol_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_skip_symbol_prefix(i);
    target = stream->WriteString(7, s, target);
  }

  // optional uint64 shmem_size_bytes = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_shmem_size_bytes(), target);
  }

  // optional bool block_client = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_block_client(), target);
  }

  // optional bool no_startup = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_no_startup(), target);
  }

  // optional bool no_running = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_no_running(), target);
  }

  // optional bool dump_at_max = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_dump_at_max(), target);
  }

  // optional uint32 block_client_timeout_us = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_block_client_timeout_us(), target);
  }

  // optional uint32 min_anonymous_memory_kb = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_min_anonymous_memory_kb(), target);
  }

  // optional uint32 max_heapprofd_memory_kb = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_max_heapprofd_memory_kb(), target);
  }

  // optional uint64 max_heapprofd_cpu_secs = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_max_heapprofd_cpu_secs(), target);
  }

  // optional bool disable_fork_teardown = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_disable_fork_teardown(), target);
  }

  // optional bool disable_vfork_detection = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_disable_vfork_detection(), target);
  }

  // repeated string heaps = 20;
  for (int i = 0, n = this->_internal_heaps_size(); i < n; i++) {
    const auto& s = this->_internal_heaps(i);
    target = stream->WriteString(20, s, target);
  }

  // optional bool all_heaps = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_all_heaps(), target);
  }

  // repeated uint64 heap_sampling_intervals = 22;
  for (int i = 0, n = this->_internal_heap_sampling_intervals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_heap_sampling_intervals(i), target);
  }

  // optional bool stream_allocations = 23;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_stream_allocations(), target);
  }

  // optional uint64 adaptive_sampling_shmem_threshold = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(24, this->_internal_adaptive_sampling_shmem_threshold(), target);
  }

  // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_adaptive_sampling_max_sampling_interval_bytes(), target);
  }

  // repeated string target_installed_by = 26;
  for (int i = 0, n = this->_internal_target_installed_by_size(); i < n; i++) {
    const auto& s = this->_internal_target_installed_by(i);
    target = stream->WriteString(26, s, target);
  }

  // repeated string exclude_heaps = 27;
  for (int i = 0, n = this->_internal_exclude_heaps_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_heaps(i);
    target = stream->WriteString(27, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapprofdConfig)
  return target;
}

size_t HeapprofdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string process_cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.process_cmdline_.size());
  for (int i = 0, n = _impl_.process_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.process_cmdline_.Get(i));
  }

  // repeated uint64 pid = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.pid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pid_size());
    total_size += data_size;
  }

  // repeated string skip_symbol_prefix = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.skip_symbol_prefix_.size());
  for (int i = 0, n = _impl_.skip_symbol_prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.skip_symbol_prefix_.Get(i));
  }

  // repeated string heaps = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.heaps_.size());
  for (int i = 0, n = _impl_.heaps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.heaps_.Get(i));
  }

  // repeated uint64 heap_sampling_intervals = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.heap_sampling_intervals_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_heap_sampling_intervals_size());
    total_size += data_size;
  }

  // repeated string target_installed_by = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_installed_by_.size());
  for (int i = 0, n = _impl_.target_installed_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_installed_by_.Get(i));
  }

  // repeated string exclude_heaps = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exclude_heaps_.size());
  for (int i = 0, n = _impl_.exclude_heaps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exclude_heaps_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.continuous_dump_config_);
    }

    // optional uint64 sampling_interval_bytes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sampling_interval_bytes());
    }

    // optional uint64 shmem_size_bytes = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shmem_size_bytes());
    }

    // optional bool no_startup = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool no_running = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool dump_at_max = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool disable_fork_teardown = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional uint32 block_client_timeout_us = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_client_timeout_us());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool stream_allocations = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool all_heaps = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool all = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool block_client = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 min_anonymous_memory_kb = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_anonymous_memory_kb());
    }

    // optional uint64 max_heapprofd_cpu_secs = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_max_heapprofd_cpu_secs());
    }

    // optional uint32 max_heapprofd_memory_kb = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_max_heapprofd_memory_kb());
    }

    // optional bool disable_vfork_detection = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint64 adaptive_sampling_shmem_threshold = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_adaptive_sampling_shmem_threshold());
    }

    // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_adaptive_sampling_max_sampling_interval_bytes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeapprofdConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeapprofdConfig*>(
      &from));
}

void HeapprofdConfig::MergeFrom(const HeapprofdConfig& from) {
  HeapprofdConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.process_cmdline_.MergeFrom(from._impl_.process_cmdline_);
  _this->_impl_.pid_.MergeFrom(from._impl_.pid_);
  _this->_impl_.skip_symbol_prefix_.MergeFrom(from._impl_.skip_symbol_prefix_);
  _this->_impl_.heaps_.MergeFrom(from._impl_.heaps_);
  _this->_impl_.heap_sampling_intervals_.MergeFrom(from._impl_.heap_sampling_intervals_);
  _this->_impl_.target_installed_by_.MergeFrom(from._impl_.target_installed_by_);
  _this->_impl_.exclude_heaps_.MergeFrom(from._impl_.exclude_heaps_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_continuous_dump_config()->::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::MergeFrom(
          from._internal_continuous_dump_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sampling_interval_bytes_ = from._impl_.sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.shmem_size_bytes_ = from._impl_.shmem_size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.no_startup_ = from._impl_.no_startup_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.no_running_ = from._impl_.no_running_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dump_at_max_ = from._impl_.dump_at_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.disable_fork_teardown_ = from._impl_.disable_fork_teardown_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.block_client_timeout_us_ = from._impl_.block_client_timeout_us_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stream_allocations_ = from._impl_.stream_allocations_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.all_heaps_ = from._impl_.all_heaps_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.all_ = from._impl_.all_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.block_client_ = from._impl_.block_client_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.min_anonymous_memory_kb_ = from._impl_.min_anonymous_memory_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.max_heapprofd_cpu_secs_ = from._impl_.max_heapprofd_cpu_secs_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.max_heapprofd_memory_kb_ = from._impl_.max_heapprofd_memory_kb_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.disable_vfork_detection_ = from._impl_.disable_vfork_detection_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.adaptive_sampling_shmem_threshold_ = from._impl_.adaptive_sampling_shmem_threshold_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.adaptive_sampling_max_sampling_interval_bytes_ = from._impl_.adaptive_sampling_max_sampling_interval_bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeapprofdConfig::CopyFrom(const HeapprofdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig::InternalSwap(HeapprofdConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.process_cmdline_.InternalSwap(&other->_impl_.process_cmdline_);
  _impl_.pid_.InternalSwap(&other->_impl_.pid_);
  _impl_.skip_symbol_prefix_.InternalSwap(&other->_impl_.skip_symbol_prefix_);
  _impl_.heaps_.InternalSwap(&other->_impl_.heaps_);
  _impl_.heap_sampling_intervals_.InternalSwap(&other->_impl_.heap_sampling_intervals_);
  _impl_.target_installed_by_.InternalSwap(&other->_impl_.target_installed_by_);
  _impl_.exclude_heaps_.InternalSwap(&other->_impl_.exclude_heaps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapprofdConfig, _impl_.adaptive_sampling_max_sampling_interval_bytes_)
      + sizeof(HeapprofdConfig::_impl_.adaptive_sampling_max_sampling_interval_bytes_)
      - PROTOBUF_FIELD_OFFSET(HeapprofdConfig, _impl_.continuous_dump_config_)>(
          reinterpret_cast<char*>(&_impl_.continuous_dump_config_),
          reinterpret_cast<char*>(&other->_impl_.continuous_dump_config_));
}

std::string HeapprofdConfig::GetTypeName() const {
  return "perfetto.protos.HeapprofdConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapprofdConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
