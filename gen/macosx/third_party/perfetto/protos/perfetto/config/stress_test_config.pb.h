// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/stress_test_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/config/trace_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class StressTestConfig;
struct StressTestConfigDefaultTypeInternal;
extern StressTestConfigDefaultTypeInternal _StressTestConfig_default_instance_;
class StressTestConfig_WriterTiming;
struct StressTestConfig_WriterTimingDefaultTypeInternal;
extern StressTestConfig_WriterTimingDefaultTypeInternal _StressTestConfig_WriterTiming_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::StressTestConfig* Arena::CreateMaybeMessage<::perfetto::protos::StressTestConfig>(Arena*);
template<> ::perfetto::protos::StressTestConfig_WriterTiming* Arena::CreateMaybeMessage<::perfetto::protos::StressTestConfig_WriterTiming>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class StressTestConfig_WriterTiming final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StressTestConfig.WriterTiming) */ {
 public:
  inline StressTestConfig_WriterTiming() : StressTestConfig_WriterTiming(nullptr) {}
  ~StressTestConfig_WriterTiming() override;
  explicit PROTOBUF_CONSTEXPR StressTestConfig_WriterTiming(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StressTestConfig_WriterTiming(const StressTestConfig_WriterTiming& from);
  StressTestConfig_WriterTiming(StressTestConfig_WriterTiming&& from) noexcept
    : StressTestConfig_WriterTiming() {
    *this = ::std::move(from);
  }

  inline StressTestConfig_WriterTiming& operator=(const StressTestConfig_WriterTiming& from) {
    CopyFrom(from);
    return *this;
  }
  inline StressTestConfig_WriterTiming& operator=(StressTestConfig_WriterTiming&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StressTestConfig_WriterTiming& default_instance() {
    return *internal_default_instance();
  }
  static inline const StressTestConfig_WriterTiming* internal_default_instance() {
    return reinterpret_cast<const StressTestConfig_WriterTiming*>(
               &_StressTestConfig_WriterTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StressTestConfig_WriterTiming& a, StressTestConfig_WriterTiming& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StressTestConfig_WriterTiming* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StressTestConfig_WriterTiming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StressTestConfig_WriterTiming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StressTestConfig_WriterTiming>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StressTestConfig_WriterTiming& from);
  void MergeFrom(const StressTestConfig_WriterTiming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StressTestConfig_WriterTiming* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StressTestConfig.WriterTiming";
  }
  protected:
  explicit StressTestConfig_WriterTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadMeanFieldNumber = 1,
    kPayloadStddevFieldNumber = 2,
    kRateMeanFieldNumber = 3,
    kRateStddevFieldNumber = 4,
    kPayloadWriteTimeMsFieldNumber = 5,
  };
  // optional double payload_mean = 1;
  bool has_payload_mean() const;
  private:
  bool _internal_has_payload_mean() const;
  public:
  void clear_payload_mean();
  double payload_mean() const;
  void set_payload_mean(double value);
  private:
  double _internal_payload_mean() const;
  void _internal_set_payload_mean(double value);
  public:

  // optional double payload_stddev = 2;
  bool has_payload_stddev() const;
  private:
  bool _internal_has_payload_stddev() const;
  public:
  void clear_payload_stddev();
  double payload_stddev() const;
  void set_payload_stddev(double value);
  private:
  double _internal_payload_stddev() const;
  void _internal_set_payload_stddev(double value);
  public:

  // optional double rate_mean = 3;
  bool has_rate_mean() const;
  private:
  bool _internal_has_rate_mean() const;
  public:
  void clear_rate_mean();
  double rate_mean() const;
  void set_rate_mean(double value);
  private:
  double _internal_rate_mean() const;
  void _internal_set_rate_mean(double value);
  public:

  // optional double rate_stddev = 4;
  bool has_rate_stddev() const;
  private:
  bool _internal_has_rate_stddev() const;
  public:
  void clear_rate_stddev();
  double rate_stddev() const;
  void set_rate_stddev(double value);
  private:
  double _internal_rate_stddev() const;
  void _internal_set_rate_stddev(double value);
  public:

  // optional uint32 payload_write_time_ms = 5;
  bool has_payload_write_time_ms() const;
  private:
  bool _internal_has_payload_write_time_ms() const;
  public:
  void clear_payload_write_time_ms();
  uint32_t payload_write_time_ms() const;
  void set_payload_write_time_ms(uint32_t value);
  private:
  uint32_t _internal_payload_write_time_ms() const;
  void _internal_set_payload_write_time_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.StressTestConfig.WriterTiming)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double payload_mean_;
    double payload_stddev_;
    double rate_mean_;
    double rate_stddev_;
    uint32_t payload_write_time_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StressTestConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.StressTestConfig) */ {
 public:
  inline StressTestConfig() : StressTestConfig(nullptr) {}
  ~StressTestConfig() override;
  explicit PROTOBUF_CONSTEXPR StressTestConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StressTestConfig(const StressTestConfig& from);
  StressTestConfig(StressTestConfig&& from) noexcept
    : StressTestConfig() {
    *this = ::std::move(from);
  }

  inline StressTestConfig& operator=(const StressTestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StressTestConfig& operator=(StressTestConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StressTestConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StressTestConfig* internal_default_instance() {
    return reinterpret_cast<const StressTestConfig*>(
               &_StressTestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StressTestConfig& a, StressTestConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StressTestConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StressTestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StressTestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StressTestConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StressTestConfig& from);
  void MergeFrom(const StressTestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StressTestConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.StressTestConfig";
  }
  protected:
  explicit StressTestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StressTestConfig_WriterTiming WriterTiming;

  // accessors -------------------------------------------------------

  enum : int {
    kTraceConfigFieldNumber = 1,
    kSteadyStateTimingsFieldNumber = 8,
    kBurstTimingsFieldNumber = 11,
    kShmemSizeKbFieldNumber = 2,
    kShmemPageSizeKbFieldNumber = 3,
    kNumProcessesFieldNumber = 4,
    kNumThreadsFieldNumber = 5,
    kMaxEventsFieldNumber = 6,
    kNestingFieldNumber = 7,
    kBurstPeriodMsFieldNumber = 9,
    kBurstDurationMsFieldNumber = 10,
  };
  // optional .perfetto.protos.TraceConfig trace_config = 1;
  bool has_trace_config() const;
  private:
  bool _internal_has_trace_config() const;
  public:
  void clear_trace_config();
  const ::perfetto::protos::TraceConfig& trace_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig* release_trace_config();
  ::perfetto::protos::TraceConfig* mutable_trace_config();
  void set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config);
  private:
  const ::perfetto::protos::TraceConfig& _internal_trace_config() const;
  ::perfetto::protos::TraceConfig* _internal_mutable_trace_config();
  public:
  void unsafe_arena_set_allocated_trace_config(
      ::perfetto::protos::TraceConfig* trace_config);
  ::perfetto::protos::TraceConfig* unsafe_arena_release_trace_config();

  // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
  bool has_steady_state_timings() const;
  private:
  bool _internal_has_steady_state_timings() const;
  public:
  void clear_steady_state_timings();
  const ::perfetto::protos::StressTestConfig_WriterTiming& steady_state_timings() const;
  PROTOBUF_NODISCARD ::perfetto::protos::StressTestConfig_WriterTiming* release_steady_state_timings();
  ::perfetto::protos::StressTestConfig_WriterTiming* mutable_steady_state_timings();
  void set_allocated_steady_state_timings(::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings);
  private:
  const ::perfetto::protos::StressTestConfig_WriterTiming& _internal_steady_state_timings() const;
  ::perfetto::protos::StressTestConfig_WriterTiming* _internal_mutable_steady_state_timings();
  public:
  void unsafe_arena_set_allocated_steady_state_timings(
      ::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings);
  ::perfetto::protos::StressTestConfig_WriterTiming* unsafe_arena_release_steady_state_timings();

  // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
  bool has_burst_timings() const;
  private:
  bool _internal_has_burst_timings() const;
  public:
  void clear_burst_timings();
  const ::perfetto::protos::StressTestConfig_WriterTiming& burst_timings() const;
  PROTOBUF_NODISCARD ::perfetto::protos::StressTestConfig_WriterTiming* release_burst_timings();
  ::perfetto::protos::StressTestConfig_WriterTiming* mutable_burst_timings();
  void set_allocated_burst_timings(::perfetto::protos::StressTestConfig_WriterTiming* burst_timings);
  private:
  const ::perfetto::protos::StressTestConfig_WriterTiming& _internal_burst_timings() const;
  ::perfetto::protos::StressTestConfig_WriterTiming* _internal_mutable_burst_timings();
  public:
  void unsafe_arena_set_allocated_burst_timings(
      ::perfetto::protos::StressTestConfig_WriterTiming* burst_timings);
  ::perfetto::protos::StressTestConfig_WriterTiming* unsafe_arena_release_burst_timings();

  // optional uint32 shmem_size_kb = 2;
  bool has_shmem_size_kb() const;
  private:
  bool _internal_has_shmem_size_kb() const;
  public:
  void clear_shmem_size_kb();
  uint32_t shmem_size_kb() const;
  void set_shmem_size_kb(uint32_t value);
  private:
  uint32_t _internal_shmem_size_kb() const;
  void _internal_set_shmem_size_kb(uint32_t value);
  public:

  // optional uint32 shmem_page_size_kb = 3;
  bool has_shmem_page_size_kb() const;
  private:
  bool _internal_has_shmem_page_size_kb() const;
  public:
  void clear_shmem_page_size_kb();
  uint32_t shmem_page_size_kb() const;
  void set_shmem_page_size_kb(uint32_t value);
  private:
  uint32_t _internal_shmem_page_size_kb() const;
  void _internal_set_shmem_page_size_kb(uint32_t value);
  public:

  // optional uint32 num_processes = 4;
  bool has_num_processes() const;
  private:
  bool _internal_has_num_processes() const;
  public:
  void clear_num_processes();
  uint32_t num_processes() const;
  void set_num_processes(uint32_t value);
  private:
  uint32_t _internal_num_processes() const;
  void _internal_set_num_processes(uint32_t value);
  public:

  // optional uint32 num_threads = 5;
  bool has_num_threads() const;
  private:
  bool _internal_has_num_threads() const;
  public:
  void clear_num_threads();
  uint32_t num_threads() const;
  void set_num_threads(uint32_t value);
  private:
  uint32_t _internal_num_threads() const;
  void _internal_set_num_threads(uint32_t value);
  public:

  // optional uint32 max_events = 6;
  bool has_max_events() const;
  private:
  bool _internal_has_max_events() const;
  public:
  void clear_max_events();
  uint32_t max_events() const;
  void set_max_events(uint32_t value);
  private:
  uint32_t _internal_max_events() const;
  void _internal_set_max_events(uint32_t value);
  public:

  // optional uint32 nesting = 7;
  bool has_nesting() const;
  private:
  bool _internal_has_nesting() const;
  public:
  void clear_nesting();
  uint32_t nesting() const;
  void set_nesting(uint32_t value);
  private:
  uint32_t _internal_nesting() const;
  void _internal_set_nesting(uint32_t value);
  public:

  // optional uint32 burst_period_ms = 9;
  bool has_burst_period_ms() const;
  private:
  bool _internal_has_burst_period_ms() const;
  public:
  void clear_burst_period_ms();
  uint32_t burst_period_ms() const;
  void set_burst_period_ms(uint32_t value);
  private:
  uint32_t _internal_burst_period_ms() const;
  void _internal_set_burst_period_ms(uint32_t value);
  public:

  // optional uint32 burst_duration_ms = 10;
  bool has_burst_duration_ms() const;
  private:
  bool _internal_has_burst_duration_ms() const;
  public:
  void clear_burst_duration_ms();
  uint32_t burst_duration_ms() const;
  void set_burst_duration_ms(uint32_t value);
  private:
  uint32_t _internal_burst_duration_ms() const;
  void _internal_set_burst_duration_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.StressTestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::TraceConfig* trace_config_;
    ::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings_;
    ::perfetto::protos::StressTestConfig_WriterTiming* burst_timings_;
    uint32_t shmem_size_kb_;
    uint32_t shmem_page_size_kb_;
    uint32_t num_processes_;
    uint32_t num_threads_;
    uint32_t max_events_;
    uint32_t nesting_;
    uint32_t burst_period_ms_;
    uint32_t burst_duration_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StressTestConfig_WriterTiming

// optional double payload_mean = 1;
inline bool StressTestConfig_WriterTiming::_internal_has_payload_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StressTestConfig_WriterTiming::has_payload_mean() const {
  return _internal_has_payload_mean();
}
inline void StressTestConfig_WriterTiming::clear_payload_mean() {
  _impl_.payload_mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double StressTestConfig_WriterTiming::_internal_payload_mean() const {
  return _impl_.payload_mean_;
}
inline double StressTestConfig_WriterTiming::payload_mean() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.payload_mean)
  return _internal_payload_mean();
}
inline void StressTestConfig_WriterTiming::_internal_set_payload_mean(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.payload_mean_ = value;
}
inline void StressTestConfig_WriterTiming::set_payload_mean(double value) {
  _internal_set_payload_mean(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.payload_mean)
}

// optional double payload_stddev = 2;
inline bool StressTestConfig_WriterTiming::_internal_has_payload_stddev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StressTestConfig_WriterTiming::has_payload_stddev() const {
  return _internal_has_payload_stddev();
}
inline void StressTestConfig_WriterTiming::clear_payload_stddev() {
  _impl_.payload_stddev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double StressTestConfig_WriterTiming::_internal_payload_stddev() const {
  return _impl_.payload_stddev_;
}
inline double StressTestConfig_WriterTiming::payload_stddev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.payload_stddev)
  return _internal_payload_stddev();
}
inline void StressTestConfig_WriterTiming::_internal_set_payload_stddev(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.payload_stddev_ = value;
}
inline void StressTestConfig_WriterTiming::set_payload_stddev(double value) {
  _internal_set_payload_stddev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.payload_stddev)
}

// optional double rate_mean = 3;
inline bool StressTestConfig_WriterTiming::_internal_has_rate_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StressTestConfig_WriterTiming::has_rate_mean() const {
  return _internal_has_rate_mean();
}
inline void StressTestConfig_WriterTiming::clear_rate_mean() {
  _impl_.rate_mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double StressTestConfig_WriterTiming::_internal_rate_mean() const {
  return _impl_.rate_mean_;
}
inline double StressTestConfig_WriterTiming::rate_mean() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.rate_mean)
  return _internal_rate_mean();
}
inline void StressTestConfig_WriterTiming::_internal_set_rate_mean(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rate_mean_ = value;
}
inline void StressTestConfig_WriterTiming::set_rate_mean(double value) {
  _internal_set_rate_mean(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.rate_mean)
}

// optional double rate_stddev = 4;
inline bool StressTestConfig_WriterTiming::_internal_has_rate_stddev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StressTestConfig_WriterTiming::has_rate_stddev() const {
  return _internal_has_rate_stddev();
}
inline void StressTestConfig_WriterTiming::clear_rate_stddev() {
  _impl_.rate_stddev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double StressTestConfig_WriterTiming::_internal_rate_stddev() const {
  return _impl_.rate_stddev_;
}
inline double StressTestConfig_WriterTiming::rate_stddev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.rate_stddev)
  return _internal_rate_stddev();
}
inline void StressTestConfig_WriterTiming::_internal_set_rate_stddev(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rate_stddev_ = value;
}
inline void StressTestConfig_WriterTiming::set_rate_stddev(double value) {
  _internal_set_rate_stddev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.rate_stddev)
}

// optional uint32 payload_write_time_ms = 5;
inline bool StressTestConfig_WriterTiming::_internal_has_payload_write_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StressTestConfig_WriterTiming::has_payload_write_time_ms() const {
  return _internal_has_payload_write_time_ms();
}
inline void StressTestConfig_WriterTiming::clear_payload_write_time_ms() {
  _impl_.payload_write_time_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t StressTestConfig_WriterTiming::_internal_payload_write_time_ms() const {
  return _impl_.payload_write_time_ms_;
}
inline uint32_t StressTestConfig_WriterTiming::payload_write_time_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.WriterTiming.payload_write_time_ms)
  return _internal_payload_write_time_ms();
}
inline void StressTestConfig_WriterTiming::_internal_set_payload_write_time_ms(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.payload_write_time_ms_ = value;
}
inline void StressTestConfig_WriterTiming::set_payload_write_time_ms(uint32_t value) {
  _internal_set_payload_write_time_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.WriterTiming.payload_write_time_ms)
}

// -------------------------------------------------------------------

// StressTestConfig

// optional .perfetto.protos.TraceConfig trace_config = 1;
inline bool StressTestConfig::_internal_has_trace_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trace_config_ != nullptr);
  return value;
}
inline bool StressTestConfig::has_trace_config() const {
  return _internal_has_trace_config();
}
inline const ::perfetto::protos::TraceConfig& StressTestConfig::_internal_trace_config() const {
  const ::perfetto::protos::TraceConfig* p = _impl_.trace_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig&>(
      ::perfetto::protos::_TraceConfig_default_instance_);
}
inline const ::perfetto::protos::TraceConfig& StressTestConfig::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.trace_config)
  return _internal_trace_config();
}
inline void StressTestConfig::unsafe_arena_set_allocated_trace_config(
    ::perfetto::protos::TraceConfig* trace_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trace_config_);
  }
  _impl_.trace_config_ = trace_config;
  if (trace_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.StressTestConfig.trace_config)
}
inline ::perfetto::protos::TraceConfig* StressTestConfig::release_trace_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TraceConfig* temp = _impl_.trace_config_;
  _impl_.trace_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig* StressTestConfig::unsafe_arena_release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.StressTestConfig.trace_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TraceConfig* temp = _impl_.trace_config_;
  _impl_.trace_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig* StressTestConfig::_internal_mutable_trace_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trace_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig>(GetArenaForAllocation());
    _impl_.trace_config_ = p;
  }
  return _impl_.trace_config_;
}
inline ::perfetto::protos::TraceConfig* StressTestConfig::mutable_trace_config() {
  ::perfetto::protos::TraceConfig* _msg = _internal_mutable_trace_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.StressTestConfig.trace_config)
  return _msg;
}
inline void StressTestConfig::set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trace_config_);
  }
  if (trace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_config));
    if (message_arena != submessage_arena) {
      trace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trace_config_ = trace_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.StressTestConfig.trace_config)
}

// optional uint32 shmem_size_kb = 2;
inline bool StressTestConfig::_internal_has_shmem_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StressTestConfig::has_shmem_size_kb() const {
  return _internal_has_shmem_size_kb();
}
inline void StressTestConfig::clear_shmem_size_kb() {
  _impl_.shmem_size_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t StressTestConfig::_internal_shmem_size_kb() const {
  return _impl_.shmem_size_kb_;
}
inline uint32_t StressTestConfig::shmem_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.shmem_size_kb)
  return _internal_shmem_size_kb();
}
inline void StressTestConfig::_internal_set_shmem_size_kb(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.shmem_size_kb_ = value;
}
inline void StressTestConfig::set_shmem_size_kb(uint32_t value) {
  _internal_set_shmem_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.shmem_size_kb)
}

// optional uint32 shmem_page_size_kb = 3;
inline bool StressTestConfig::_internal_has_shmem_page_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StressTestConfig::has_shmem_page_size_kb() const {
  return _internal_has_shmem_page_size_kb();
}
inline void StressTestConfig::clear_shmem_page_size_kb() {
  _impl_.shmem_page_size_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t StressTestConfig::_internal_shmem_page_size_kb() const {
  return _impl_.shmem_page_size_kb_;
}
inline uint32_t StressTestConfig::shmem_page_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.shmem_page_size_kb)
  return _internal_shmem_page_size_kb();
}
inline void StressTestConfig::_internal_set_shmem_page_size_kb(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.shmem_page_size_kb_ = value;
}
inline void StressTestConfig::set_shmem_page_size_kb(uint32_t value) {
  _internal_set_shmem_page_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.shmem_page_size_kb)
}

// optional uint32 num_processes = 4;
inline bool StressTestConfig::_internal_has_num_processes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StressTestConfig::has_num_processes() const {
  return _internal_has_num_processes();
}
inline void StressTestConfig::clear_num_processes() {
  _impl_.num_processes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t StressTestConfig::_internal_num_processes() const {
  return _impl_.num_processes_;
}
inline uint32_t StressTestConfig::num_processes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.num_processes)
  return _internal_num_processes();
}
inline void StressTestConfig::_internal_set_num_processes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_processes_ = value;
}
inline void StressTestConfig::set_num_processes(uint32_t value) {
  _internal_set_num_processes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.num_processes)
}

// optional uint32 num_threads = 5;
inline bool StressTestConfig::_internal_has_num_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StressTestConfig::has_num_threads() const {
  return _internal_has_num_threads();
}
inline void StressTestConfig::clear_num_threads() {
  _impl_.num_threads_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t StressTestConfig::_internal_num_threads() const {
  return _impl_.num_threads_;
}
inline uint32_t StressTestConfig::num_threads() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.num_threads)
  return _internal_num_threads();
}
inline void StressTestConfig::_internal_set_num_threads(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.num_threads_ = value;
}
inline void StressTestConfig::set_num_threads(uint32_t value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.num_threads)
}

// optional uint32 max_events = 6;
inline bool StressTestConfig::_internal_has_max_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StressTestConfig::has_max_events() const {
  return _internal_has_max_events();
}
inline void StressTestConfig::clear_max_events() {
  _impl_.max_events_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t StressTestConfig::_internal_max_events() const {
  return _impl_.max_events_;
}
inline uint32_t StressTestConfig::max_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.max_events)
  return _internal_max_events();
}
inline void StressTestConfig::_internal_set_max_events(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.max_events_ = value;
}
inline void StressTestConfig::set_max_events(uint32_t value) {
  _internal_set_max_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.max_events)
}

// optional uint32 nesting = 7;
inline bool StressTestConfig::_internal_has_nesting() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StressTestConfig::has_nesting() const {
  return _internal_has_nesting();
}
inline void StressTestConfig::clear_nesting() {
  _impl_.nesting_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t StressTestConfig::_internal_nesting() const {
  return _impl_.nesting_;
}
inline uint32_t StressTestConfig::nesting() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.nesting)
  return _internal_nesting();
}
inline void StressTestConfig::_internal_set_nesting(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.nesting_ = value;
}
inline void StressTestConfig::set_nesting(uint32_t value) {
  _internal_set_nesting(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.nesting)
}

// optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
inline bool StressTestConfig::_internal_has_steady_state_timings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.steady_state_timings_ != nullptr);
  return value;
}
inline bool StressTestConfig::has_steady_state_timings() const {
  return _internal_has_steady_state_timings();
}
inline void StressTestConfig::clear_steady_state_timings() {
  if (_impl_.steady_state_timings_ != nullptr) _impl_.steady_state_timings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::StressTestConfig_WriterTiming& StressTestConfig::_internal_steady_state_timings() const {
  const ::perfetto::protos::StressTestConfig_WriterTiming* p = _impl_.steady_state_timings_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::StressTestConfig_WriterTiming&>(
      ::perfetto::protos::_StressTestConfig_WriterTiming_default_instance_);
}
inline const ::perfetto::protos::StressTestConfig_WriterTiming& StressTestConfig::steady_state_timings() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.steady_state_timings)
  return _internal_steady_state_timings();
}
inline void StressTestConfig::unsafe_arena_set_allocated_steady_state_timings(
    ::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steady_state_timings_);
  }
  _impl_.steady_state_timings_ = steady_state_timings;
  if (steady_state_timings) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.StressTestConfig.steady_state_timings)
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::release_steady_state_timings() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::StressTestConfig_WriterTiming* temp = _impl_.steady_state_timings_;
  _impl_.steady_state_timings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::unsafe_arena_release_steady_state_timings() {
  // @@protoc_insertion_point(field_release:perfetto.protos.StressTestConfig.steady_state_timings)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::StressTestConfig_WriterTiming* temp = _impl_.steady_state_timings_;
  _impl_.steady_state_timings_ = nullptr;
  return temp;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::_internal_mutable_steady_state_timings() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.steady_state_timings_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::StressTestConfig_WriterTiming>(GetArenaForAllocation());
    _impl_.steady_state_timings_ = p;
  }
  return _impl_.steady_state_timings_;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::mutable_steady_state_timings() {
  ::perfetto::protos::StressTestConfig_WriterTiming* _msg = _internal_mutable_steady_state_timings();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.StressTestConfig.steady_state_timings)
  return _msg;
}
inline void StressTestConfig::set_allocated_steady_state_timings(::perfetto::protos::StressTestConfig_WriterTiming* steady_state_timings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.steady_state_timings_;
  }
  if (steady_state_timings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(steady_state_timings);
    if (message_arena != submessage_arena) {
      steady_state_timings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steady_state_timings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.steady_state_timings_ = steady_state_timings;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.StressTestConfig.steady_state_timings)
}

// optional uint32 burst_period_ms = 9;
inline bool StressTestConfig::_internal_has_burst_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StressTestConfig::has_burst_period_ms() const {
  return _internal_has_burst_period_ms();
}
inline void StressTestConfig::clear_burst_period_ms() {
  _impl_.burst_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t StressTestConfig::_internal_burst_period_ms() const {
  return _impl_.burst_period_ms_;
}
inline uint32_t StressTestConfig::burst_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.burst_period_ms)
  return _internal_burst_period_ms();
}
inline void StressTestConfig::_internal_set_burst_period_ms(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.burst_period_ms_ = value;
}
inline void StressTestConfig::set_burst_period_ms(uint32_t value) {
  _internal_set_burst_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.burst_period_ms)
}

// optional uint32 burst_duration_ms = 10;
inline bool StressTestConfig::_internal_has_burst_duration_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StressTestConfig::has_burst_duration_ms() const {
  return _internal_has_burst_duration_ms();
}
inline void StressTestConfig::clear_burst_duration_ms() {
  _impl_.burst_duration_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t StressTestConfig::_internal_burst_duration_ms() const {
  return _impl_.burst_duration_ms_;
}
inline uint32_t StressTestConfig::burst_duration_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.burst_duration_ms)
  return _internal_burst_duration_ms();
}
inline void StressTestConfig::_internal_set_burst_duration_ms(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.burst_duration_ms_ = value;
}
inline void StressTestConfig::set_burst_duration_ms(uint32_t value) {
  _internal_set_burst_duration_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StressTestConfig.burst_duration_ms)
}

// optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
inline bool StressTestConfig::_internal_has_burst_timings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.burst_timings_ != nullptr);
  return value;
}
inline bool StressTestConfig::has_burst_timings() const {
  return _internal_has_burst_timings();
}
inline void StressTestConfig::clear_burst_timings() {
  if (_impl_.burst_timings_ != nullptr) _impl_.burst_timings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::StressTestConfig_WriterTiming& StressTestConfig::_internal_burst_timings() const {
  const ::perfetto::protos::StressTestConfig_WriterTiming* p = _impl_.burst_timings_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::StressTestConfig_WriterTiming&>(
      ::perfetto::protos::_StressTestConfig_WriterTiming_default_instance_);
}
inline const ::perfetto::protos::StressTestConfig_WriterTiming& StressTestConfig::burst_timings() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StressTestConfig.burst_timings)
  return _internal_burst_timings();
}
inline void StressTestConfig::unsafe_arena_set_allocated_burst_timings(
    ::perfetto::protos::StressTestConfig_WriterTiming* burst_timings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.burst_timings_);
  }
  _impl_.burst_timings_ = burst_timings;
  if (burst_timings) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.StressTestConfig.burst_timings)
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::release_burst_timings() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::StressTestConfig_WriterTiming* temp = _impl_.burst_timings_;
  _impl_.burst_timings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::unsafe_arena_release_burst_timings() {
  // @@protoc_insertion_point(field_release:perfetto.protos.StressTestConfig.burst_timings)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::StressTestConfig_WriterTiming* temp = _impl_.burst_timings_;
  _impl_.burst_timings_ = nullptr;
  return temp;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::_internal_mutable_burst_timings() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.burst_timings_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::StressTestConfig_WriterTiming>(GetArenaForAllocation());
    _impl_.burst_timings_ = p;
  }
  return _impl_.burst_timings_;
}
inline ::perfetto::protos::StressTestConfig_WriterTiming* StressTestConfig::mutable_burst_timings() {
  ::perfetto::protos::StressTestConfig_WriterTiming* _msg = _internal_mutable_burst_timings();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.StressTestConfig.burst_timings)
  return _msg;
}
inline void StressTestConfig::set_allocated_burst_timings(::perfetto::protos::StressTestConfig_WriterTiming* burst_timings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.burst_timings_;
  }
  if (burst_timings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(burst_timings);
    if (message_arena != submessage_arena) {
      burst_timings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, burst_timings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.burst_timings_ = burst_timings;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.StressTestConfig.burst_timings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fstress_5ftest_5fconfig_2eproto
