// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/android_input_event_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5finput_5fevent_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5finput_5fevent_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5finput_5fevent_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5finput_5fevent_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class AndroidInputEventConfig;
struct AndroidInputEventConfigDefaultTypeInternal;
extern AndroidInputEventConfigDefaultTypeInternal _AndroidInputEventConfig_default_instance_;
class AndroidInputEventConfig_TraceRule;
struct AndroidInputEventConfig_TraceRuleDefaultTypeInternal;
extern AndroidInputEventConfig_TraceRuleDefaultTypeInternal _AndroidInputEventConfig_TraceRule_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::AndroidInputEventConfig* Arena::CreateMaybeMessage<::perfetto::protos::AndroidInputEventConfig>(Arena*);
template<> ::perfetto::protos::AndroidInputEventConfig_TraceRule* Arena::CreateMaybeMessage<::perfetto::protos::AndroidInputEventConfig_TraceRule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum AndroidInputEventConfig_TraceMode : int {
  AndroidInputEventConfig_TraceMode_TRACE_MODE_TRACE_ALL = 0,
  AndroidInputEventConfig_TraceMode_TRACE_MODE_USE_RULES = 1
};
bool AndroidInputEventConfig_TraceMode_IsValid(int value);
constexpr AndroidInputEventConfig_TraceMode AndroidInputEventConfig_TraceMode_TraceMode_MIN = AndroidInputEventConfig_TraceMode_TRACE_MODE_TRACE_ALL;
constexpr AndroidInputEventConfig_TraceMode AndroidInputEventConfig_TraceMode_TraceMode_MAX = AndroidInputEventConfig_TraceMode_TRACE_MODE_USE_RULES;
constexpr int AndroidInputEventConfig_TraceMode_TraceMode_ARRAYSIZE = AndroidInputEventConfig_TraceMode_TraceMode_MAX + 1;

const std::string& AndroidInputEventConfig_TraceMode_Name(AndroidInputEventConfig_TraceMode value);
template<typename T>
inline const std::string& AndroidInputEventConfig_TraceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AndroidInputEventConfig_TraceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AndroidInputEventConfig_TraceMode_Name.");
  return AndroidInputEventConfig_TraceMode_Name(static_cast<AndroidInputEventConfig_TraceMode>(enum_t_value));
}
bool AndroidInputEventConfig_TraceMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AndroidInputEventConfig_TraceMode* value);
enum AndroidInputEventConfig_TraceLevel : int {
  AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_NONE = 0,
  AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_REDACTED = 1,
  AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_COMPLETE = 2
};
bool AndroidInputEventConfig_TraceLevel_IsValid(int value);
constexpr AndroidInputEventConfig_TraceLevel AndroidInputEventConfig_TraceLevel_TraceLevel_MIN = AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_NONE;
constexpr AndroidInputEventConfig_TraceLevel AndroidInputEventConfig_TraceLevel_TraceLevel_MAX = AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_COMPLETE;
constexpr int AndroidInputEventConfig_TraceLevel_TraceLevel_ARRAYSIZE = AndroidInputEventConfig_TraceLevel_TraceLevel_MAX + 1;

const std::string& AndroidInputEventConfig_TraceLevel_Name(AndroidInputEventConfig_TraceLevel value);
template<typename T>
inline const std::string& AndroidInputEventConfig_TraceLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AndroidInputEventConfig_TraceLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AndroidInputEventConfig_TraceLevel_Name.");
  return AndroidInputEventConfig_TraceLevel_Name(static_cast<AndroidInputEventConfig_TraceLevel>(enum_t_value));
}
bool AndroidInputEventConfig_TraceLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AndroidInputEventConfig_TraceLevel* value);
// ===================================================================

class AndroidInputEventConfig_TraceRule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidInputEventConfig.TraceRule) */ {
 public:
  inline AndroidInputEventConfig_TraceRule() : AndroidInputEventConfig_TraceRule(nullptr) {}
  ~AndroidInputEventConfig_TraceRule() override;
  explicit PROTOBUF_CONSTEXPR AndroidInputEventConfig_TraceRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidInputEventConfig_TraceRule(const AndroidInputEventConfig_TraceRule& from);
  AndroidInputEventConfig_TraceRule(AndroidInputEventConfig_TraceRule&& from) noexcept
    : AndroidInputEventConfig_TraceRule() {
    *this = ::std::move(from);
  }

  inline AndroidInputEventConfig_TraceRule& operator=(const AndroidInputEventConfig_TraceRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidInputEventConfig_TraceRule& operator=(AndroidInputEventConfig_TraceRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AndroidInputEventConfig_TraceRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidInputEventConfig_TraceRule* internal_default_instance() {
    return reinterpret_cast<const AndroidInputEventConfig_TraceRule*>(
               &_AndroidInputEventConfig_TraceRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AndroidInputEventConfig_TraceRule& a, AndroidInputEventConfig_TraceRule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AndroidInputEventConfig_TraceRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidInputEventConfig_TraceRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidInputEventConfig_TraceRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidInputEventConfig_TraceRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AndroidInputEventConfig_TraceRule& from);
  void MergeFrom(const AndroidInputEventConfig_TraceRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidInputEventConfig_TraceRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidInputEventConfig.TraceRule";
  }
  protected:
  explicit AndroidInputEventConfig_TraceRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchAllPackagesFieldNumber = 2,
    kMatchAnyPackagesFieldNumber = 3,
    kTraceLevelFieldNumber = 1,
    kMatchSecureFieldNumber = 4,
    kMatchImeConnectionActiveFieldNumber = 5,
  };
  // repeated string match_all_packages = 2;
  int match_all_packages_size() const;
  private:
  int _internal_match_all_packages_size() const;
  public:
  void clear_match_all_packages();
  const std::string& match_all_packages(int index) const;
  std::string* mutable_match_all_packages(int index);
  void set_match_all_packages(int index, const std::string& value);
  void set_match_all_packages(int index, std::string&& value);
  void set_match_all_packages(int index, const char* value);
  void set_match_all_packages(int index, const char* value, size_t size);
  std::string* add_match_all_packages();
  void add_match_all_packages(const std::string& value);
  void add_match_all_packages(std::string&& value);
  void add_match_all_packages(const char* value);
  void add_match_all_packages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& match_all_packages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_match_all_packages();
  private:
  const std::string& _internal_match_all_packages(int index) const;
  std::string* _internal_add_match_all_packages();
  public:

  // repeated string match_any_packages = 3;
  int match_any_packages_size() const;
  private:
  int _internal_match_any_packages_size() const;
  public:
  void clear_match_any_packages();
  const std::string& match_any_packages(int index) const;
  std::string* mutable_match_any_packages(int index);
  void set_match_any_packages(int index, const std::string& value);
  void set_match_any_packages(int index, std::string&& value);
  void set_match_any_packages(int index, const char* value);
  void set_match_any_packages(int index, const char* value, size_t size);
  std::string* add_match_any_packages();
  void add_match_any_packages(const std::string& value);
  void add_match_any_packages(std::string&& value);
  void add_match_any_packages(const char* value);
  void add_match_any_packages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& match_any_packages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_match_any_packages();
  private:
  const std::string& _internal_match_any_packages(int index) const;
  std::string* _internal_add_match_any_packages();
  public:

  // optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;
  bool has_trace_level() const;
  private:
  bool _internal_has_trace_level() const;
  public:
  void clear_trace_level();
  ::perfetto::protos::AndroidInputEventConfig_TraceLevel trace_level() const;
  void set_trace_level(::perfetto::protos::AndroidInputEventConfig_TraceLevel value);
  private:
  ::perfetto::protos::AndroidInputEventConfig_TraceLevel _internal_trace_level() const;
  void _internal_set_trace_level(::perfetto::protos::AndroidInputEventConfig_TraceLevel value);
  public:

  // optional bool match_secure = 4;
  bool has_match_secure() const;
  private:
  bool _internal_has_match_secure() const;
  public:
  void clear_match_secure();
  bool match_secure() const;
  void set_match_secure(bool value);
  private:
  bool _internal_match_secure() const;
  void _internal_set_match_secure(bool value);
  public:

  // optional bool match_ime_connection_active = 5;
  bool has_match_ime_connection_active() const;
  private:
  bool _internal_has_match_ime_connection_active() const;
  public:
  void clear_match_ime_connection_active();
  bool match_ime_connection_active() const;
  void set_match_ime_connection_active(bool value);
  private:
  bool _internal_match_ime_connection_active() const;
  void _internal_set_match_ime_connection_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidInputEventConfig.TraceRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> match_all_packages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> match_any_packages_;
    int trace_level_;
    bool match_secure_;
    bool match_ime_connection_active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5finput_5fevent_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AndroidInputEventConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidInputEventConfig) */ {
 public:
  inline AndroidInputEventConfig() : AndroidInputEventConfig(nullptr) {}
  ~AndroidInputEventConfig() override;
  explicit PROTOBUF_CONSTEXPR AndroidInputEventConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidInputEventConfig(const AndroidInputEventConfig& from);
  AndroidInputEventConfig(AndroidInputEventConfig&& from) noexcept
    : AndroidInputEventConfig() {
    *this = ::std::move(from);
  }

  inline AndroidInputEventConfig& operator=(const AndroidInputEventConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidInputEventConfig& operator=(AndroidInputEventConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AndroidInputEventConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidInputEventConfig* internal_default_instance() {
    return reinterpret_cast<const AndroidInputEventConfig*>(
               &_AndroidInputEventConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AndroidInputEventConfig& a, AndroidInputEventConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AndroidInputEventConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidInputEventConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidInputEventConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidInputEventConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AndroidInputEventConfig& from);
  void MergeFrom(const AndroidInputEventConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AndroidInputEventConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.AndroidInputEventConfig";
  }
  protected:
  explicit AndroidInputEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AndroidInputEventConfig_TraceRule TraceRule;

  typedef AndroidInputEventConfig_TraceMode TraceMode;
  static constexpr TraceMode TRACE_MODE_TRACE_ALL =
    AndroidInputEventConfig_TraceMode_TRACE_MODE_TRACE_ALL;
  static constexpr TraceMode TRACE_MODE_USE_RULES =
    AndroidInputEventConfig_TraceMode_TRACE_MODE_USE_RULES;
  static inline bool TraceMode_IsValid(int value) {
    return AndroidInputEventConfig_TraceMode_IsValid(value);
  }
  static constexpr TraceMode TraceMode_MIN =
    AndroidInputEventConfig_TraceMode_TraceMode_MIN;
  static constexpr TraceMode TraceMode_MAX =
    AndroidInputEventConfig_TraceMode_TraceMode_MAX;
  static constexpr int TraceMode_ARRAYSIZE =
    AndroidInputEventConfig_TraceMode_TraceMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TraceMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TraceMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TraceMode_Name.");
    return AndroidInputEventConfig_TraceMode_Name(enum_t_value);
  }
  static inline bool TraceMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TraceMode* value) {
    return AndroidInputEventConfig_TraceMode_Parse(name, value);
  }

  typedef AndroidInputEventConfig_TraceLevel TraceLevel;
  static constexpr TraceLevel TRACE_LEVEL_NONE =
    AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_NONE;
  static constexpr TraceLevel TRACE_LEVEL_REDACTED =
    AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_REDACTED;
  static constexpr TraceLevel TRACE_LEVEL_COMPLETE =
    AndroidInputEventConfig_TraceLevel_TRACE_LEVEL_COMPLETE;
  static inline bool TraceLevel_IsValid(int value) {
    return AndroidInputEventConfig_TraceLevel_IsValid(value);
  }
  static constexpr TraceLevel TraceLevel_MIN =
    AndroidInputEventConfig_TraceLevel_TraceLevel_MIN;
  static constexpr TraceLevel TraceLevel_MAX =
    AndroidInputEventConfig_TraceLevel_TraceLevel_MAX;
  static constexpr int TraceLevel_ARRAYSIZE =
    AndroidInputEventConfig_TraceLevel_TraceLevel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TraceLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TraceLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TraceLevel_Name.");
    return AndroidInputEventConfig_TraceLevel_Name(enum_t_value);
  }
  static inline bool TraceLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TraceLevel* value) {
    return AndroidInputEventConfig_TraceLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kModeFieldNumber = 1,
    kTraceDispatcherInputEventsFieldNumber = 3,
    kTraceDispatcherWindowDispatchFieldNumber = 4,
  };
  // repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::perfetto::protos::AndroidInputEventConfig_TraceRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidInputEventConfig_TraceRule >*
      mutable_rules();
  private:
  const ::perfetto::protos::AndroidInputEventConfig_TraceRule& _internal_rules(int index) const;
  ::perfetto::protos::AndroidInputEventConfig_TraceRule* _internal_add_rules();
  public:
  const ::perfetto::protos::AndroidInputEventConfig_TraceRule& rules(int index) const;
  ::perfetto::protos::AndroidInputEventConfig_TraceRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidInputEventConfig_TraceRule >&
      rules() const;

  // optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::perfetto::protos::AndroidInputEventConfig_TraceMode mode() const;
  void set_mode(::perfetto::protos::AndroidInputEventConfig_TraceMode value);
  private:
  ::perfetto::protos::AndroidInputEventConfig_TraceMode _internal_mode() const;
  void _internal_set_mode(::perfetto::protos::AndroidInputEventConfig_TraceMode value);
  public:

  // optional bool trace_dispatcher_input_events = 3;
  bool has_trace_dispatcher_input_events() const;
  private:
  bool _internal_has_trace_dispatcher_input_events() const;
  public:
  void clear_trace_dispatcher_input_events();
  bool trace_dispatcher_input_events() const;
  void set_trace_dispatcher_input_events(bool value);
  private:
  bool _internal_trace_dispatcher_input_events() const;
  void _internal_set_trace_dispatcher_input_events(bool value);
  public:

  // optional bool trace_dispatcher_window_dispatch = 4;
  bool has_trace_dispatcher_window_dispatch() const;
  private:
  bool _internal_has_trace_dispatcher_window_dispatch() const;
  public:
  void clear_trace_dispatcher_window_dispatch();
  bool trace_dispatcher_window_dispatch() const;
  void set_trace_dispatcher_window_dispatch(bool value);
  private:
  bool _internal_trace_dispatcher_window_dispatch() const;
  void _internal_set_trace_dispatcher_window_dispatch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidInputEventConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidInputEventConfig_TraceRule > rules_;
    int mode_;
    bool trace_dispatcher_input_events_;
    bool trace_dispatcher_window_dispatch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5finput_5fevent_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AndroidInputEventConfig_TraceRule

// optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;
inline bool AndroidInputEventConfig_TraceRule::_internal_has_trace_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidInputEventConfig_TraceRule::has_trace_level() const {
  return _internal_has_trace_level();
}
inline void AndroidInputEventConfig_TraceRule::clear_trace_level() {
  _impl_.trace_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::AndroidInputEventConfig_TraceLevel AndroidInputEventConfig_TraceRule::_internal_trace_level() const {
  return static_cast< ::perfetto::protos::AndroidInputEventConfig_TraceLevel >(_impl_.trace_level_);
}
inline ::perfetto::protos::AndroidInputEventConfig_TraceLevel AndroidInputEventConfig_TraceRule::trace_level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.TraceRule.trace_level)
  return _internal_trace_level();
}
inline void AndroidInputEventConfig_TraceRule::_internal_set_trace_level(::perfetto::protos::AndroidInputEventConfig_TraceLevel value) {
  assert(::perfetto::protos::AndroidInputEventConfig_TraceLevel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trace_level_ = value;
}
inline void AndroidInputEventConfig_TraceRule::set_trace_level(::perfetto::protos::AndroidInputEventConfig_TraceLevel value) {
  _internal_set_trace_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.TraceRule.trace_level)
}

// repeated string match_all_packages = 2;
inline int AndroidInputEventConfig_TraceRule::_internal_match_all_packages_size() const {
  return _impl_.match_all_packages_.size();
}
inline int AndroidInputEventConfig_TraceRule::match_all_packages_size() const {
  return _internal_match_all_packages_size();
}
inline void AndroidInputEventConfig_TraceRule::clear_match_all_packages() {
  _impl_.match_all_packages_.Clear();
}
inline std::string* AndroidInputEventConfig_TraceRule::add_match_all_packages() {
  std::string* _s = _internal_add_match_all_packages();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
  return _s;
}
inline const std::string& AndroidInputEventConfig_TraceRule::_internal_match_all_packages(int index) const {
  return _impl_.match_all_packages_.Get(index);
}
inline const std::string& AndroidInputEventConfig_TraceRule::match_all_packages(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
  return _internal_match_all_packages(index);
}
inline std::string* AndroidInputEventConfig_TraceRule::mutable_match_all_packages(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
  return _impl_.match_all_packages_.Mutable(index);
}
inline void AndroidInputEventConfig_TraceRule::set_match_all_packages(int index, const std::string& value) {
  _impl_.match_all_packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline void AndroidInputEventConfig_TraceRule::set_match_all_packages(int index, std::string&& value) {
  _impl_.match_all_packages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline void AndroidInputEventConfig_TraceRule::set_match_all_packages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.match_all_packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline void AndroidInputEventConfig_TraceRule::set_match_all_packages(int index, const char* value, size_t size) {
  _impl_.match_all_packages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline std::string* AndroidInputEventConfig_TraceRule::_internal_add_match_all_packages() {
  return _impl_.match_all_packages_.Add();
}
inline void AndroidInputEventConfig_TraceRule::add_match_all_packages(const std::string& value) {
  _impl_.match_all_packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline void AndroidInputEventConfig_TraceRule::add_match_all_packages(std::string&& value) {
  _impl_.match_all_packages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline void AndroidInputEventConfig_TraceRule::add_match_all_packages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.match_all_packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline void AndroidInputEventConfig_TraceRule::add_match_all_packages(const char* value, size_t size) {
  _impl_.match_all_packages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidInputEventConfig_TraceRule::match_all_packages() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
  return _impl_.match_all_packages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidInputEventConfig_TraceRule::mutable_match_all_packages() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidInputEventConfig.TraceRule.match_all_packages)
  return &_impl_.match_all_packages_;
}

// repeated string match_any_packages = 3;
inline int AndroidInputEventConfig_TraceRule::_internal_match_any_packages_size() const {
  return _impl_.match_any_packages_.size();
}
inline int AndroidInputEventConfig_TraceRule::match_any_packages_size() const {
  return _internal_match_any_packages_size();
}
inline void AndroidInputEventConfig_TraceRule::clear_match_any_packages() {
  _impl_.match_any_packages_.Clear();
}
inline std::string* AndroidInputEventConfig_TraceRule::add_match_any_packages() {
  std::string* _s = _internal_add_match_any_packages();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
  return _s;
}
inline const std::string& AndroidInputEventConfig_TraceRule::_internal_match_any_packages(int index) const {
  return _impl_.match_any_packages_.Get(index);
}
inline const std::string& AndroidInputEventConfig_TraceRule::match_any_packages(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
  return _internal_match_any_packages(index);
}
inline std::string* AndroidInputEventConfig_TraceRule::mutable_match_any_packages(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
  return _impl_.match_any_packages_.Mutable(index);
}
inline void AndroidInputEventConfig_TraceRule::set_match_any_packages(int index, const std::string& value) {
  _impl_.match_any_packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline void AndroidInputEventConfig_TraceRule::set_match_any_packages(int index, std::string&& value) {
  _impl_.match_any_packages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline void AndroidInputEventConfig_TraceRule::set_match_any_packages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.match_any_packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline void AndroidInputEventConfig_TraceRule::set_match_any_packages(int index, const char* value, size_t size) {
  _impl_.match_any_packages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline std::string* AndroidInputEventConfig_TraceRule::_internal_add_match_any_packages() {
  return _impl_.match_any_packages_.Add();
}
inline void AndroidInputEventConfig_TraceRule::add_match_any_packages(const std::string& value) {
  _impl_.match_any_packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline void AndroidInputEventConfig_TraceRule::add_match_any_packages(std::string&& value) {
  _impl_.match_any_packages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline void AndroidInputEventConfig_TraceRule::add_match_any_packages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.match_any_packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline void AndroidInputEventConfig_TraceRule::add_match_any_packages(const char* value, size_t size) {
  _impl_.match_any_packages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AndroidInputEventConfig_TraceRule::match_any_packages() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
  return _impl_.match_any_packages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AndroidInputEventConfig_TraceRule::mutable_match_any_packages() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidInputEventConfig.TraceRule.match_any_packages)
  return &_impl_.match_any_packages_;
}

// optional bool match_secure = 4;
inline bool AndroidInputEventConfig_TraceRule::_internal_has_match_secure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidInputEventConfig_TraceRule::has_match_secure() const {
  return _internal_has_match_secure();
}
inline void AndroidInputEventConfig_TraceRule::clear_match_secure() {
  _impl_.match_secure_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool AndroidInputEventConfig_TraceRule::_internal_match_secure() const {
  return _impl_.match_secure_;
}
inline bool AndroidInputEventConfig_TraceRule::match_secure() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.TraceRule.match_secure)
  return _internal_match_secure();
}
inline void AndroidInputEventConfig_TraceRule::_internal_set_match_secure(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.match_secure_ = value;
}
inline void AndroidInputEventConfig_TraceRule::set_match_secure(bool value) {
  _internal_set_match_secure(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.TraceRule.match_secure)
}

// optional bool match_ime_connection_active = 5;
inline bool AndroidInputEventConfig_TraceRule::_internal_has_match_ime_connection_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidInputEventConfig_TraceRule::has_match_ime_connection_active() const {
  return _internal_has_match_ime_connection_active();
}
inline void AndroidInputEventConfig_TraceRule::clear_match_ime_connection_active() {
  _impl_.match_ime_connection_active_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool AndroidInputEventConfig_TraceRule::_internal_match_ime_connection_active() const {
  return _impl_.match_ime_connection_active_;
}
inline bool AndroidInputEventConfig_TraceRule::match_ime_connection_active() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.TraceRule.match_ime_connection_active)
  return _internal_match_ime_connection_active();
}
inline void AndroidInputEventConfig_TraceRule::_internal_set_match_ime_connection_active(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_ime_connection_active_ = value;
}
inline void AndroidInputEventConfig_TraceRule::set_match_ime_connection_active(bool value) {
  _internal_set_match_ime_connection_active(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.TraceRule.match_ime_connection_active)
}

// -------------------------------------------------------------------

// AndroidInputEventConfig

// optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;
inline bool AndroidInputEventConfig::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AndroidInputEventConfig::has_mode() const {
  return _internal_has_mode();
}
inline void AndroidInputEventConfig::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::AndroidInputEventConfig_TraceMode AndroidInputEventConfig::_internal_mode() const {
  return static_cast< ::perfetto::protos::AndroidInputEventConfig_TraceMode >(_impl_.mode_);
}
inline ::perfetto::protos::AndroidInputEventConfig_TraceMode AndroidInputEventConfig::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.mode)
  return _internal_mode();
}
inline void AndroidInputEventConfig::_internal_set_mode(::perfetto::protos::AndroidInputEventConfig_TraceMode value) {
  assert(::perfetto::protos::AndroidInputEventConfig_TraceMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}
inline void AndroidInputEventConfig::set_mode(::perfetto::protos::AndroidInputEventConfig_TraceMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.mode)
}

// repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;
inline int AndroidInputEventConfig::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int AndroidInputEventConfig::rules_size() const {
  return _internal_rules_size();
}
inline void AndroidInputEventConfig::clear_rules() {
  _impl_.rules_.Clear();
}
inline ::perfetto::protos::AndroidInputEventConfig_TraceRule* AndroidInputEventConfig::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidInputEventConfig.rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidInputEventConfig_TraceRule >*
AndroidInputEventConfig::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.AndroidInputEventConfig.rules)
  return &_impl_.rules_;
}
inline const ::perfetto::protos::AndroidInputEventConfig_TraceRule& AndroidInputEventConfig::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::perfetto::protos::AndroidInputEventConfig_TraceRule& AndroidInputEventConfig::rules(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.rules)
  return _internal_rules(index);
}
inline ::perfetto::protos::AndroidInputEventConfig_TraceRule* AndroidInputEventConfig::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::perfetto::protos::AndroidInputEventConfig_TraceRule* AndroidInputEventConfig::add_rules() {
  ::perfetto::protos::AndroidInputEventConfig_TraceRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:perfetto.protos.AndroidInputEventConfig.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::AndroidInputEventConfig_TraceRule >&
AndroidInputEventConfig::rules() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.AndroidInputEventConfig.rules)
  return _impl_.rules_;
}

// optional bool trace_dispatcher_input_events = 3;
inline bool AndroidInputEventConfig::_internal_has_trace_dispatcher_input_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AndroidInputEventConfig::has_trace_dispatcher_input_events() const {
  return _internal_has_trace_dispatcher_input_events();
}
inline void AndroidInputEventConfig::clear_trace_dispatcher_input_events() {
  _impl_.trace_dispatcher_input_events_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool AndroidInputEventConfig::_internal_trace_dispatcher_input_events() const {
  return _impl_.trace_dispatcher_input_events_;
}
inline bool AndroidInputEventConfig::trace_dispatcher_input_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.trace_dispatcher_input_events)
  return _internal_trace_dispatcher_input_events();
}
inline void AndroidInputEventConfig::_internal_set_trace_dispatcher_input_events(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trace_dispatcher_input_events_ = value;
}
inline void AndroidInputEventConfig::set_trace_dispatcher_input_events(bool value) {
  _internal_set_trace_dispatcher_input_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.trace_dispatcher_input_events)
}

// optional bool trace_dispatcher_window_dispatch = 4;
inline bool AndroidInputEventConfig::_internal_has_trace_dispatcher_window_dispatch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidInputEventConfig::has_trace_dispatcher_window_dispatch() const {
  return _internal_has_trace_dispatcher_window_dispatch();
}
inline void AndroidInputEventConfig::clear_trace_dispatcher_window_dispatch() {
  _impl_.trace_dispatcher_window_dispatch_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool AndroidInputEventConfig::_internal_trace_dispatcher_window_dispatch() const {
  return _impl_.trace_dispatcher_window_dispatch_;
}
inline bool AndroidInputEventConfig::trace_dispatcher_window_dispatch() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidInputEventConfig.trace_dispatcher_window_dispatch)
  return _internal_trace_dispatcher_window_dispatch();
}
inline void AndroidInputEventConfig::_internal_set_trace_dispatcher_window_dispatch(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trace_dispatcher_window_dispatch_ = value;
}
inline void AndroidInputEventConfig::set_trace_dispatcher_window_dispatch(bool value) {
  _internal_set_trace_dispatcher_window_dispatch(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidInputEventConfig.trace_dispatcher_window_dispatch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::AndroidInputEventConfig_TraceMode> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::AndroidInputEventConfig_TraceLevel> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5finput_5fevent_5fconfig_2eproto
