// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/android_input_event_config.proto

#include "protos/perfetto/config/android/android_input_event_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR AndroidInputEventConfig_TraceRule::AndroidInputEventConfig_TraceRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_all_packages_)*/{}
  , /*decltype(_impl_.match_any_packages_)*/{}
  , /*decltype(_impl_.trace_level_)*/0
  , /*decltype(_impl_.match_secure_)*/false
  , /*decltype(_impl_.match_ime_connection_active_)*/false} {}
struct AndroidInputEventConfig_TraceRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidInputEventConfig_TraceRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidInputEventConfig_TraceRuleDefaultTypeInternal() {}
  union {
    AndroidInputEventConfig_TraceRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidInputEventConfig_TraceRuleDefaultTypeInternal _AndroidInputEventConfig_TraceRule_default_instance_;
PROTOBUF_CONSTEXPR AndroidInputEventConfig::AndroidInputEventConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.trace_dispatcher_input_events_)*/false
  , /*decltype(_impl_.trace_dispatcher_window_dispatch_)*/false} {}
struct AndroidInputEventConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidInputEventConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidInputEventConfigDefaultTypeInternal() {}
  union {
    AndroidInputEventConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidInputEventConfigDefaultTypeInternal _AndroidInputEventConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool AndroidInputEventConfig_TraceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidInputEventConfig_TraceMode_strings[2] = {};

static const char AndroidInputEventConfig_TraceMode_names[] =
  "TRACE_MODE_TRACE_ALL"
  "TRACE_MODE_USE_RULES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidInputEventConfig_TraceMode_entries[] = {
  { {AndroidInputEventConfig_TraceMode_names + 0, 20}, 0 },
  { {AndroidInputEventConfig_TraceMode_names + 20, 20}, 1 },
};

static const int AndroidInputEventConfig_TraceMode_entries_by_number[] = {
  0, // 0 -> TRACE_MODE_TRACE_ALL
  1, // 1 -> TRACE_MODE_USE_RULES
};

const std::string& AndroidInputEventConfig_TraceMode_Name(
    AndroidInputEventConfig_TraceMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidInputEventConfig_TraceMode_entries,
          AndroidInputEventConfig_TraceMode_entries_by_number,
          2, AndroidInputEventConfig_TraceMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidInputEventConfig_TraceMode_entries,
      AndroidInputEventConfig_TraceMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidInputEventConfig_TraceMode_strings[idx].get();
}
bool AndroidInputEventConfig_TraceMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AndroidInputEventConfig_TraceMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidInputEventConfig_TraceMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<AndroidInputEventConfig_TraceMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AndroidInputEventConfig_TraceMode AndroidInputEventConfig::TRACE_MODE_TRACE_ALL;
constexpr AndroidInputEventConfig_TraceMode AndroidInputEventConfig::TRACE_MODE_USE_RULES;
constexpr AndroidInputEventConfig_TraceMode AndroidInputEventConfig::TraceMode_MIN;
constexpr AndroidInputEventConfig_TraceMode AndroidInputEventConfig::TraceMode_MAX;
constexpr int AndroidInputEventConfig::TraceMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool AndroidInputEventConfig_TraceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AndroidInputEventConfig_TraceLevel_strings[3] = {};

static const char AndroidInputEventConfig_TraceLevel_names[] =
  "TRACE_LEVEL_COMPLETE"
  "TRACE_LEVEL_NONE"
  "TRACE_LEVEL_REDACTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AndroidInputEventConfig_TraceLevel_entries[] = {
  { {AndroidInputEventConfig_TraceLevel_names + 0, 20}, 2 },
  { {AndroidInputEventConfig_TraceLevel_names + 20, 16}, 0 },
  { {AndroidInputEventConfig_TraceLevel_names + 36, 20}, 1 },
};

static const int AndroidInputEventConfig_TraceLevel_entries_by_number[] = {
  1, // 0 -> TRACE_LEVEL_NONE
  2, // 1 -> TRACE_LEVEL_REDACTED
  0, // 2 -> TRACE_LEVEL_COMPLETE
};

const std::string& AndroidInputEventConfig_TraceLevel_Name(
    AndroidInputEventConfig_TraceLevel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AndroidInputEventConfig_TraceLevel_entries,
          AndroidInputEventConfig_TraceLevel_entries_by_number,
          3, AndroidInputEventConfig_TraceLevel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AndroidInputEventConfig_TraceLevel_entries,
      AndroidInputEventConfig_TraceLevel_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AndroidInputEventConfig_TraceLevel_strings[idx].get();
}
bool AndroidInputEventConfig_TraceLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AndroidInputEventConfig_TraceLevel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AndroidInputEventConfig_TraceLevel_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<AndroidInputEventConfig_TraceLevel>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AndroidInputEventConfig_TraceLevel AndroidInputEventConfig::TRACE_LEVEL_NONE;
constexpr AndroidInputEventConfig_TraceLevel AndroidInputEventConfig::TRACE_LEVEL_REDACTED;
constexpr AndroidInputEventConfig_TraceLevel AndroidInputEventConfig::TRACE_LEVEL_COMPLETE;
constexpr AndroidInputEventConfig_TraceLevel AndroidInputEventConfig::TraceLevel_MIN;
constexpr AndroidInputEventConfig_TraceLevel AndroidInputEventConfig::TraceLevel_MAX;
constexpr int AndroidInputEventConfig::TraceLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AndroidInputEventConfig_TraceRule::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidInputEventConfig_TraceRule>()._impl_._has_bits_);
  static void set_has_trace_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_ime_connection_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AndroidInputEventConfig_TraceRule::AndroidInputEventConfig_TraceRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidInputEventConfig.TraceRule)
}
AndroidInputEventConfig_TraceRule::AndroidInputEventConfig_TraceRule(const AndroidInputEventConfig_TraceRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidInputEventConfig_TraceRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_all_packages_){from._impl_.match_all_packages_}
    , decltype(_impl_.match_any_packages_){from._impl_.match_any_packages_}
    , decltype(_impl_.trace_level_){}
    , decltype(_impl_.match_secure_){}
    , decltype(_impl_.match_ime_connection_active_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.trace_level_, &from._impl_.trace_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_ime_connection_active_) -
    reinterpret_cast<char*>(&_impl_.trace_level_)) + sizeof(_impl_.match_ime_connection_active_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidInputEventConfig.TraceRule)
}

inline void AndroidInputEventConfig_TraceRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_all_packages_){arena}
    , decltype(_impl_.match_any_packages_){arena}
    , decltype(_impl_.trace_level_){0}
    , decltype(_impl_.match_secure_){false}
    , decltype(_impl_.match_ime_connection_active_){false}
  };
}

AndroidInputEventConfig_TraceRule::~AndroidInputEventConfig_TraceRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidInputEventConfig.TraceRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidInputEventConfig_TraceRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_all_packages_.~RepeatedPtrField();
  _impl_.match_any_packages_.~RepeatedPtrField();
}

void AndroidInputEventConfig_TraceRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidInputEventConfig_TraceRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidInputEventConfig.TraceRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_all_packages_.Clear();
  _impl_.match_any_packages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.trace_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_ime_connection_active_) -
        reinterpret_cast<char*>(&_impl_.trace_level_)) + sizeof(_impl_.match_ime_connection_active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidInputEventConfig_TraceRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidInputEventConfig_TraceLevel_IsValid(val))) {
            _internal_set_trace_level(static_cast<::perfetto::protos::AndroidInputEventConfig_TraceLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string match_all_packages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_all_packages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string match_any_packages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_any_packages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool match_secure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_secure(&has_bits);
          _impl_.match_secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool match_ime_connection_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_match_ime_connection_active(&has_bits);
          _impl_.match_ime_connection_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidInputEventConfig_TraceRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidInputEventConfig.TraceRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trace_level(), target);
  }

  // repeated string match_all_packages = 2;
  for (int i = 0, n = this->_internal_match_all_packages_size(); i < n; i++) {
    const auto& s = this->_internal_match_all_packages(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated string match_any_packages = 3;
  for (int i = 0, n = this->_internal_match_any_packages_size(); i < n; i++) {
    const auto& s = this->_internal_match_any_packages(i);
    target = stream->WriteString(3, s, target);
  }

  // optional bool match_secure = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_match_secure(), target);
  }

  // optional bool match_ime_connection_active = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_match_ime_connection_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidInputEventConfig.TraceRule)
  return target;
}

size_t AndroidInputEventConfig_TraceRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidInputEventConfig.TraceRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_all_packages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.match_all_packages_.size());
  for (int i = 0, n = _impl_.match_all_packages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.match_all_packages_.Get(i));
  }

  // repeated string match_any_packages = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.match_any_packages_.size());
  for (int i = 0, n = _impl_.match_any_packages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.match_any_packages_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.AndroidInputEventConfig.TraceLevel trace_level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trace_level());
    }

    // optional bool match_secure = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool match_ime_connection_active = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidInputEventConfig_TraceRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidInputEventConfig_TraceRule*>(
      &from));
}

void AndroidInputEventConfig_TraceRule::MergeFrom(const AndroidInputEventConfig_TraceRule& from) {
  AndroidInputEventConfig_TraceRule* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidInputEventConfig.TraceRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_all_packages_.MergeFrom(from._impl_.match_all_packages_);
  _this->_impl_.match_any_packages_.MergeFrom(from._impl_.match_any_packages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.trace_level_ = from._impl_.trace_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_secure_ = from._impl_.match_secure_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_ime_connection_active_ = from._impl_.match_ime_connection_active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidInputEventConfig_TraceRule::CopyFrom(const AndroidInputEventConfig_TraceRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidInputEventConfig.TraceRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidInputEventConfig_TraceRule::IsInitialized() const {
  return true;
}

void AndroidInputEventConfig_TraceRule::InternalSwap(AndroidInputEventConfig_TraceRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.match_all_packages_.InternalSwap(&other->_impl_.match_all_packages_);
  _impl_.match_any_packages_.InternalSwap(&other->_impl_.match_any_packages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidInputEventConfig_TraceRule, _impl_.match_ime_connection_active_)
      + sizeof(AndroidInputEventConfig_TraceRule::_impl_.match_ime_connection_active_)
      - PROTOBUF_FIELD_OFFSET(AndroidInputEventConfig_TraceRule, _impl_.trace_level_)>(
          reinterpret_cast<char*>(&_impl_.trace_level_),
          reinterpret_cast<char*>(&other->_impl_.trace_level_));
}

std::string AndroidInputEventConfig_TraceRule::GetTypeName() const {
  return "perfetto.protos.AndroidInputEventConfig.TraceRule";
}


// ===================================================================

class AndroidInputEventConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidInputEventConfig>()._impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trace_dispatcher_input_events(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trace_dispatcher_window_dispatch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AndroidInputEventConfig::AndroidInputEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidInputEventConfig)
}
AndroidInputEventConfig::AndroidInputEventConfig(const AndroidInputEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidInputEventConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_){from._impl_.rules_}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.trace_dispatcher_input_events_){}
    , decltype(_impl_.trace_dispatcher_window_dispatch_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trace_dispatcher_window_dispatch_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.trace_dispatcher_window_dispatch_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidInputEventConfig)
}

inline void AndroidInputEventConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_){arena}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.trace_dispatcher_input_events_){false}
    , decltype(_impl_.trace_dispatcher_window_dispatch_){false}
  };
}

AndroidInputEventConfig::~AndroidInputEventConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidInputEventConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidInputEventConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
}

void AndroidInputEventConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidInputEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidInputEventConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.trace_dispatcher_window_dispatch_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.trace_dispatcher_window_dispatch_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidInputEventConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidInputEventConfig_TraceMode_IsValid(val))) {
            _internal_set_mode(static_cast<::perfetto::protos::AndroidInputEventConfig_TraceMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool trace_dispatcher_input_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_trace_dispatcher_input_events(&has_bits);
          _impl_.trace_dispatcher_input_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool trace_dispatcher_window_dispatch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_trace_dispatcher_window_dispatch(&has_bits);
          _impl_.trace_dispatcher_window_dispatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidInputEventConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidInputEventConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool trace_dispatcher_input_events = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_trace_dispatcher_input_events(), target);
  }

  // optional bool trace_dispatcher_window_dispatch = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_trace_dispatcher_window_dispatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidInputEventConfig)
  return target;
}

size_t AndroidInputEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidInputEventConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidInputEventConfig.TraceRule rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.AndroidInputEventConfig.TraceMode mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool trace_dispatcher_input_events = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool trace_dispatcher_window_dispatch = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidInputEventConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidInputEventConfig*>(
      &from));
}

void AndroidInputEventConfig::MergeFrom(const AndroidInputEventConfig& from) {
  AndroidInputEventConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidInputEventConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.trace_dispatcher_input_events_ = from._impl_.trace_dispatcher_input_events_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.trace_dispatcher_window_dispatch_ = from._impl_.trace_dispatcher_window_dispatch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidInputEventConfig::CopyFrom(const AndroidInputEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidInputEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidInputEventConfig::IsInitialized() const {
  return true;
}

void AndroidInputEventConfig::InternalSwap(AndroidInputEventConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidInputEventConfig, _impl_.trace_dispatcher_window_dispatch_)
      + sizeof(AndroidInputEventConfig::_impl_.trace_dispatcher_window_dispatch_)
      - PROTOBUF_FIELD_OFFSET(AndroidInputEventConfig, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

std::string AndroidInputEventConfig::GetTypeName() const {
  return "perfetto.protos.AndroidInputEventConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidInputEventConfig_TraceRule*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidInputEventConfig_TraceRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidInputEventConfig_TraceRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidInputEventConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidInputEventConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidInputEventConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
