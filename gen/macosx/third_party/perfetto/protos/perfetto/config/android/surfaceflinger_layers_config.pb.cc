// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/surfaceflinger_layers_config.proto

#include "protos/perfetto/config/android/surfaceflinger_layers_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR SurfaceFlingerLayersConfig::SurfaceFlingerLayersConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trace_flags_)*/{}
  , /*decltype(_impl_.mode_)*/0} {}
struct SurfaceFlingerLayersConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurfaceFlingerLayersConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurfaceFlingerLayersConfigDefaultTypeInternal() {}
  union {
    SurfaceFlingerLayersConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurfaceFlingerLayersConfigDefaultTypeInternal _SurfaceFlingerLayersConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool SurfaceFlingerLayersConfig_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SurfaceFlingerLayersConfig_Mode_strings[5] = {};

static const char SurfaceFlingerLayersConfig_Mode_names[] =
  "MODE_ACTIVE"
  "MODE_DUMP"
  "MODE_GENERATED"
  "MODE_GENERATED_BUGREPORT_ONLY"
  "MODE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SurfaceFlingerLayersConfig_Mode_entries[] = {
  { {SurfaceFlingerLayersConfig_Mode_names + 0, 11}, 1 },
  { {SurfaceFlingerLayersConfig_Mode_names + 11, 9}, 3 },
  { {SurfaceFlingerLayersConfig_Mode_names + 20, 14}, 2 },
  { {SurfaceFlingerLayersConfig_Mode_names + 34, 29}, 4 },
  { {SurfaceFlingerLayersConfig_Mode_names + 63, 16}, 0 },
};

static const int SurfaceFlingerLayersConfig_Mode_entries_by_number[] = {
  4, // 0 -> MODE_UNSPECIFIED
  0, // 1 -> MODE_ACTIVE
  2, // 2 -> MODE_GENERATED
  1, // 3 -> MODE_DUMP
  3, // 4 -> MODE_GENERATED_BUGREPORT_ONLY
};

const std::string& SurfaceFlingerLayersConfig_Mode_Name(
    SurfaceFlingerLayersConfig_Mode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SurfaceFlingerLayersConfig_Mode_entries,
          SurfaceFlingerLayersConfig_Mode_entries_by_number,
          5, SurfaceFlingerLayersConfig_Mode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SurfaceFlingerLayersConfig_Mode_entries,
      SurfaceFlingerLayersConfig_Mode_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SurfaceFlingerLayersConfig_Mode_strings[idx].get();
}
bool SurfaceFlingerLayersConfig_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SurfaceFlingerLayersConfig_Mode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SurfaceFlingerLayersConfig_Mode_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SurfaceFlingerLayersConfig_Mode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::MODE_UNSPECIFIED;
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::MODE_ACTIVE;
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::MODE_GENERATED;
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::MODE_DUMP;
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::MODE_GENERATED_BUGREPORT_ONLY;
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::Mode_MIN;
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::Mode_MAX;
constexpr int SurfaceFlingerLayersConfig::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SurfaceFlingerLayersConfig_TraceFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 14:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SurfaceFlingerLayersConfig_TraceFlag_strings[8] = {};

static const char SurfaceFlingerLayersConfig_TraceFlag_names[] =
  "TRACE_FLAG_ALL"
  "TRACE_FLAG_BUFFERS"
  "TRACE_FLAG_COMPOSITION"
  "TRACE_FLAG_EXTRA"
  "TRACE_FLAG_HWC"
  "TRACE_FLAG_INPUT"
  "TRACE_FLAG_UNSPECIFIED"
  "TRACE_FLAG_VIRTUAL_DISPLAYS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SurfaceFlingerLayersConfig_TraceFlag_entries[] = {
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 0, 14}, 14 },
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 14, 18}, 32 },
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 32, 22}, 4 },
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 54, 16}, 8 },
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 70, 14}, 16 },
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 84, 16}, 2 },
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 100, 22}, 0 },
  { {SurfaceFlingerLayersConfig_TraceFlag_names + 122, 27}, 64 },
};

static const int SurfaceFlingerLayersConfig_TraceFlag_entries_by_number[] = {
  6, // 0 -> TRACE_FLAG_UNSPECIFIED
  5, // 2 -> TRACE_FLAG_INPUT
  2, // 4 -> TRACE_FLAG_COMPOSITION
  3, // 8 -> TRACE_FLAG_EXTRA
  0, // 14 -> TRACE_FLAG_ALL
  4, // 16 -> TRACE_FLAG_HWC
  1, // 32 -> TRACE_FLAG_BUFFERS
  7, // 64 -> TRACE_FLAG_VIRTUAL_DISPLAYS
};

const std::string& SurfaceFlingerLayersConfig_TraceFlag_Name(
    SurfaceFlingerLayersConfig_TraceFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SurfaceFlingerLayersConfig_TraceFlag_entries,
          SurfaceFlingerLayersConfig_TraceFlag_entries_by_number,
          8, SurfaceFlingerLayersConfig_TraceFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SurfaceFlingerLayersConfig_TraceFlag_entries,
      SurfaceFlingerLayersConfig_TraceFlag_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SurfaceFlingerLayersConfig_TraceFlag_strings[idx].get();
}
bool SurfaceFlingerLayersConfig_TraceFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SurfaceFlingerLayersConfig_TraceFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SurfaceFlingerLayersConfig_TraceFlag_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<SurfaceFlingerLayersConfig_TraceFlag>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_UNSPECIFIED;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_INPUT;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_COMPOSITION;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_EXTRA;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_HWC;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_BUFFERS;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_VIRTUAL_DISPLAYS;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TRACE_FLAG_ALL;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TraceFlag_MIN;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::TraceFlag_MAX;
constexpr int SurfaceFlingerLayersConfig::TraceFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SurfaceFlingerLayersConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceFlingerLayersConfig>()._impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SurfaceFlingerLayersConfig::SurfaceFlingerLayersConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SurfaceFlingerLayersConfig)
}
SurfaceFlingerLayersConfig::SurfaceFlingerLayersConfig(const SurfaceFlingerLayersConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SurfaceFlingerLayersConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_flags_){from._impl_.trace_flags_}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SurfaceFlingerLayersConfig)
}

inline void SurfaceFlingerLayersConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_flags_){arena}
    , decltype(_impl_.mode_){0}
  };
}

SurfaceFlingerLayersConfig::~SurfaceFlingerLayersConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SurfaceFlingerLayersConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SurfaceFlingerLayersConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_flags_.~RepeatedField();
}

void SurfaceFlingerLayersConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SurfaceFlingerLayersConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SurfaceFlingerLayersConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trace_flags_.Clear();
  _impl_.mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SurfaceFlingerLayersConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.SurfaceFlingerLayersConfig.Mode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::SurfaceFlingerLayersConfig_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::perfetto::protos::SurfaceFlingerLayersConfig_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag trace_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag_IsValid(val))) {
              _internal_add_trace_flags(static_cast<::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_trace_flags(), ptr, ctx, ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SurfaceFlingerLayersConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SurfaceFlingerLayersConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.SurfaceFlingerLayersConfig.Mode mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // repeated .perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag trace_flags = 2;
  for (int i = 0, n = this->_internal_trace_flags_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_trace_flags(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SurfaceFlingerLayersConfig)
  return target;
}

size_t SurfaceFlingerLayersConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SurfaceFlingerLayersConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag trace_flags = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_trace_flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_trace_flags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .perfetto.protos.SurfaceFlingerLayersConfig.Mode mode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceFlingerLayersConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SurfaceFlingerLayersConfig*>(
      &from));
}

void SurfaceFlingerLayersConfig::MergeFrom(const SurfaceFlingerLayersConfig& from) {
  SurfaceFlingerLayersConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SurfaceFlingerLayersConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trace_flags_.MergeFrom(from._impl_.trace_flags_);
  if (from._internal_has_mode()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SurfaceFlingerLayersConfig::CopyFrom(const SurfaceFlingerLayersConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SurfaceFlingerLayersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceFlingerLayersConfig::IsInitialized() const {
  return true;
}

void SurfaceFlingerLayersConfig::InternalSwap(SurfaceFlingerLayersConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trace_flags_.InternalSwap(&other->_impl_.trace_flags_);
  swap(_impl_.mode_, other->_impl_.mode_);
}

std::string SurfaceFlingerLayersConfig::GetTypeName() const {
  return "perfetto.protos.SurfaceFlingerLayersConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SurfaceFlingerLayersConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::SurfaceFlingerLayersConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SurfaceFlingerLayersConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
