// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/stress_test_config.proto

#include "protos/perfetto/config/stress_test_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR StressTestConfig_WriterTiming::StressTestConfig_WriterTiming(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_mean_)*/0
  , /*decltype(_impl_.payload_stddev_)*/0
  , /*decltype(_impl_.rate_mean_)*/0
  , /*decltype(_impl_.rate_stddev_)*/0
  , /*decltype(_impl_.payload_write_time_ms_)*/0u} {}
struct StressTestConfig_WriterTimingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StressTestConfig_WriterTimingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StressTestConfig_WriterTimingDefaultTypeInternal() {}
  union {
    StressTestConfig_WriterTiming _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StressTestConfig_WriterTimingDefaultTypeInternal _StressTestConfig_WriterTiming_default_instance_;
PROTOBUF_CONSTEXPR StressTestConfig::StressTestConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trace_config_)*/nullptr
  , /*decltype(_impl_.steady_state_timings_)*/nullptr
  , /*decltype(_impl_.burst_timings_)*/nullptr
  , /*decltype(_impl_.shmem_size_kb_)*/0u
  , /*decltype(_impl_.shmem_page_size_kb_)*/0u
  , /*decltype(_impl_.num_processes_)*/0u
  , /*decltype(_impl_.num_threads_)*/0u
  , /*decltype(_impl_.max_events_)*/0u
  , /*decltype(_impl_.nesting_)*/0u
  , /*decltype(_impl_.burst_period_ms_)*/0u
  , /*decltype(_impl_.burst_duration_ms_)*/0u} {}
struct StressTestConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StressTestConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StressTestConfigDefaultTypeInternal() {}
  union {
    StressTestConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StressTestConfigDefaultTypeInternal _StressTestConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class StressTestConfig_WriterTiming::_Internal {
 public:
  using HasBits = decltype(std::declval<StressTestConfig_WriterTiming>()._impl_._has_bits_);
  static void set_has_payload_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rate_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rate_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload_write_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StressTestConfig_WriterTiming::StressTestConfig_WriterTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StressTestConfig.WriterTiming)
}
StressTestConfig_WriterTiming::StressTestConfig_WriterTiming(const StressTestConfig_WriterTiming& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StressTestConfig_WriterTiming* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_mean_){}
    , decltype(_impl_.payload_stddev_){}
    , decltype(_impl_.rate_mean_){}
    , decltype(_impl_.rate_stddev_){}
    , decltype(_impl_.payload_write_time_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.payload_mean_, &from._impl_.payload_mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.payload_write_time_ms_) -
    reinterpret_cast<char*>(&_impl_.payload_mean_)) + sizeof(_impl_.payload_write_time_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StressTestConfig.WriterTiming)
}

inline void StressTestConfig_WriterTiming::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_mean_){0}
    , decltype(_impl_.payload_stddev_){0}
    , decltype(_impl_.rate_mean_){0}
    , decltype(_impl_.rate_stddev_){0}
    , decltype(_impl_.payload_write_time_ms_){0u}
  };
}

StressTestConfig_WriterTiming::~StressTestConfig_WriterTiming() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StressTestConfig.WriterTiming)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StressTestConfig_WriterTiming::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StressTestConfig_WriterTiming::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StressTestConfig_WriterTiming::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StressTestConfig.WriterTiming)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.payload_mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.payload_write_time_ms_) -
        reinterpret_cast<char*>(&_impl_.payload_mean_)) + sizeof(_impl_.payload_write_time_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StressTestConfig_WriterTiming::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double payload_mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_payload_mean(&has_bits);
          _impl_.payload_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double payload_stddev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_payload_stddev(&has_bits);
          _impl_.payload_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rate_mean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_rate_mean(&has_bits);
          _impl_.rate_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rate_stddev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_rate_stddev(&has_bits);
          _impl_.rate_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 payload_write_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_payload_write_time_ms(&has_bits);
          _impl_.payload_write_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StressTestConfig_WriterTiming::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StressTestConfig.WriterTiming)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double payload_mean = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_payload_mean(), target);
  }

  // optional double payload_stddev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_payload_stddev(), target);
  }

  // optional double rate_mean = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate_mean(), target);
  }

  // optional double rate_stddev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rate_stddev(), target);
  }

  // optional uint32 payload_write_time_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_payload_write_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StressTestConfig.WriterTiming)
  return target;
}

size_t StressTestConfig_WriterTiming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StressTestConfig.WriterTiming)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double payload_mean = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double payload_stddev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double rate_mean = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double rate_stddev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 payload_write_time_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_payload_write_time_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StressTestConfig_WriterTiming::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StressTestConfig_WriterTiming*>(
      &from));
}

void StressTestConfig_WriterTiming::MergeFrom(const StressTestConfig_WriterTiming& from) {
  StressTestConfig_WriterTiming* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StressTestConfig.WriterTiming)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.payload_mean_ = from._impl_.payload_mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.payload_stddev_ = from._impl_.payload_stddev_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rate_mean_ = from._impl_.rate_mean_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rate_stddev_ = from._impl_.rate_stddev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.payload_write_time_ms_ = from._impl_.payload_write_time_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StressTestConfig_WriterTiming::CopyFrom(const StressTestConfig_WriterTiming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StressTestConfig.WriterTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StressTestConfig_WriterTiming::IsInitialized() const {
  return true;
}

void StressTestConfig_WriterTiming::InternalSwap(StressTestConfig_WriterTiming* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StressTestConfig_WriterTiming, _impl_.payload_write_time_ms_)
      + sizeof(StressTestConfig_WriterTiming::_impl_.payload_write_time_ms_)
      - PROTOBUF_FIELD_OFFSET(StressTestConfig_WriterTiming, _impl_.payload_mean_)>(
          reinterpret_cast<char*>(&_impl_.payload_mean_),
          reinterpret_cast<char*>(&other->_impl_.payload_mean_));
}

std::string StressTestConfig_WriterTiming::GetTypeName() const {
  return "perfetto.protos.StressTestConfig.WriterTiming";
}


// ===================================================================

class StressTestConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StressTestConfig>()._impl_._has_bits_);
  static const ::perfetto::protos::TraceConfig& trace_config(const StressTestConfig* msg);
  static void set_has_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shmem_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shmem_page_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_processes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_events(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_nesting(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::StressTestConfig_WriterTiming& steady_state_timings(const StressTestConfig* msg);
  static void set_has_steady_state_timings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_burst_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_burst_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::StressTestConfig_WriterTiming& burst_timings(const StressTestConfig* msg);
  static void set_has_burst_timings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::TraceConfig&
StressTestConfig::_Internal::trace_config(const StressTestConfig* msg) {
  return *msg->_impl_.trace_config_;
}
const ::perfetto::protos::StressTestConfig_WriterTiming&
StressTestConfig::_Internal::steady_state_timings(const StressTestConfig* msg) {
  return *msg->_impl_.steady_state_timings_;
}
const ::perfetto::protos::StressTestConfig_WriterTiming&
StressTestConfig::_Internal::burst_timings(const StressTestConfig* msg) {
  return *msg->_impl_.burst_timings_;
}
void StressTestConfig::clear_trace_config() {
  if (_impl_.trace_config_ != nullptr) _impl_.trace_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StressTestConfig::StressTestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StressTestConfig)
}
StressTestConfig::StressTestConfig(const StressTestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StressTestConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.steady_state_timings_){nullptr}
    , decltype(_impl_.burst_timings_){nullptr}
    , decltype(_impl_.shmem_size_kb_){}
    , decltype(_impl_.shmem_page_size_kb_){}
    , decltype(_impl_.num_processes_){}
    , decltype(_impl_.num_threads_){}
    , decltype(_impl_.max_events_){}
    , decltype(_impl_.nesting_){}
    , decltype(_impl_.burst_period_ms_){}
    , decltype(_impl_.burst_duration_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_trace_config()) {
    _this->_impl_.trace_config_ = new ::perfetto::protos::TraceConfig(*from._impl_.trace_config_);
  }
  if (from._internal_has_steady_state_timings()) {
    _this->_impl_.steady_state_timings_ = new ::perfetto::protos::StressTestConfig_WriterTiming(*from._impl_.steady_state_timings_);
  }
  if (from._internal_has_burst_timings()) {
    _this->_impl_.burst_timings_ = new ::perfetto::protos::StressTestConfig_WriterTiming(*from._impl_.burst_timings_);
  }
  ::memcpy(&_impl_.shmem_size_kb_, &from._impl_.shmem_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.burst_duration_ms_) -
    reinterpret_cast<char*>(&_impl_.shmem_size_kb_)) + sizeof(_impl_.burst_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StressTestConfig)
}

inline void StressTestConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.steady_state_timings_){nullptr}
    , decltype(_impl_.burst_timings_){nullptr}
    , decltype(_impl_.shmem_size_kb_){0u}
    , decltype(_impl_.shmem_page_size_kb_){0u}
    , decltype(_impl_.num_processes_){0u}
    , decltype(_impl_.num_threads_){0u}
    , decltype(_impl_.max_events_){0u}
    , decltype(_impl_.nesting_){0u}
    , decltype(_impl_.burst_period_ms_){0u}
    , decltype(_impl_.burst_duration_ms_){0u}
  };
}

StressTestConfig::~StressTestConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StressTestConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StressTestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trace_config_;
  if (this != internal_default_instance()) delete _impl_.steady_state_timings_;
  if (this != internal_default_instance()) delete _impl_.burst_timings_;
}

void StressTestConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StressTestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StressTestConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.trace_config_ != nullptr);
      _impl_.trace_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.steady_state_timings_ != nullptr);
      _impl_.steady_state_timings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.burst_timings_ != nullptr);
      _impl_.burst_timings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.shmem_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_events_) -
        reinterpret_cast<char*>(&_impl_.shmem_size_kb_)) + sizeof(_impl_.max_events_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.nesting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.burst_duration_ms_) -
        reinterpret_cast<char*>(&_impl_.nesting_)) + sizeof(_impl_.burst_duration_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StressTestConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.TraceConfig trace_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shmem_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shmem_size_kb(&has_bits);
          _impl_.shmem_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shmem_page_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shmem_page_size_kb(&has_bits);
          _impl_.shmem_page_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_processes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_processes(&has_bits);
          _impl_.num_processes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_threads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_threads(&has_bits);
          _impl_.num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_events = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_max_events(&has_bits);
          _impl_.max_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nesting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_nesting(&has_bits);
          _impl_.nesting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_steady_state_timings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 burst_period_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_burst_period_ms(&has_bits);
          _impl_.burst_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 burst_duration_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_burst_duration_ms(&has_bits);
          _impl_.burst_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_burst_timings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StressTestConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StressTestConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TraceConfig trace_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trace_config(this),
        _Internal::trace_config(this).GetCachedSize(), target, stream);
  }

  // optional uint32 shmem_size_kb = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shmem_size_kb(), target);
  }

  // optional uint32 shmem_page_size_kb = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shmem_page_size_kb(), target);
  }

  // optional uint32 num_processes = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_processes(), target);
  }

  // optional uint32 num_threads = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_threads(), target);
  }

  // optional uint32 max_events = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_events(), target);
  }

  // optional uint32 nesting = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_nesting(), target);
  }

  // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::steady_state_timings(this),
        _Internal::steady_state_timings(this).GetCachedSize(), target, stream);
  }

  // optional uint32 burst_period_ms = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_burst_period_ms(), target);
  }

  // optional uint32 burst_duration_ms = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_burst_duration_ms(), target);
  }

  // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::burst_timings(this),
        _Internal::burst_timings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StressTestConfig)
  return target;
}

size_t StressTestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StressTestConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.TraceConfig trace_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trace_config_);
    }

    // optional .perfetto.protos.StressTestConfig.WriterTiming steady_state_timings = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.steady_state_timings_);
    }

    // optional .perfetto.protos.StressTestConfig.WriterTiming burst_timings = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.burst_timings_);
    }

    // optional uint32 shmem_size_kb = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shmem_size_kb());
    }

    // optional uint32 shmem_page_size_kb = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shmem_page_size_kb());
    }

    // optional uint32 num_processes = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_processes());
    }

    // optional uint32 num_threads = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_threads());
    }

    // optional uint32 max_events = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_events());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 nesting = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nesting());
    }

    // optional uint32 burst_period_ms = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_burst_period_ms());
    }

    // optional uint32 burst_duration_ms = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_burst_duration_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StressTestConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StressTestConfig*>(
      &from));
}

void StressTestConfig::MergeFrom(const StressTestConfig& from) {
  StressTestConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StressTestConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(
          from._internal_trace_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_steady_state_timings()->::perfetto::protos::StressTestConfig_WriterTiming::MergeFrom(
          from._internal_steady_state_timings());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_burst_timings()->::perfetto::protos::StressTestConfig_WriterTiming::MergeFrom(
          from._internal_burst_timings());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.shmem_size_kb_ = from._impl_.shmem_size_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shmem_page_size_kb_ = from._impl_.shmem_page_size_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.num_processes_ = from._impl_.num_processes_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.num_threads_ = from._impl_.num_threads_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.max_events_ = from._impl_.max_events_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.nesting_ = from._impl_.nesting_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.burst_period_ms_ = from._impl_.burst_period_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.burst_duration_ms_ = from._impl_.burst_duration_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StressTestConfig::CopyFrom(const StressTestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StressTestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StressTestConfig::IsInitialized() const {
  return true;
}

void StressTestConfig::InternalSwap(StressTestConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StressTestConfig, _impl_.burst_duration_ms_)
      + sizeof(StressTestConfig::_impl_.burst_duration_ms_)
      - PROTOBUF_FIELD_OFFSET(StressTestConfig, _impl_.trace_config_)>(
          reinterpret_cast<char*>(&_impl_.trace_config_),
          reinterpret_cast<char*>(&other->_impl_.trace_config_));
}

std::string StressTestConfig::GetTypeName() const {
  return "perfetto.protos.StressTestConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::StressTestConfig_WriterTiming*
Arena::CreateMaybeMessage< ::perfetto::protos::StressTestConfig_WriterTiming >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StressTestConfig_WriterTiming >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StressTestConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::StressTestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StressTestConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
