// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/trace_config.proto

#include "protos/perfetto/config/trace_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TraceConfig_BufferConfig::TraceConfig_BufferConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.size_kb_)*/0u
  , /*decltype(_impl_.fill_policy_)*/0
  , /*decltype(_impl_.transfer_on_clone_)*/false
  , /*decltype(_impl_.clear_before_clone_)*/false} {}
struct TraceConfig_BufferConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_BufferConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_BufferConfigDefaultTypeInternal() {}
  union {
    TraceConfig_BufferConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_BufferConfigDefaultTypeInternal _TraceConfig_BufferConfig_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_DataSource::TraceConfig_DataSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.producer_name_filter_)*/{}
  , /*decltype(_impl_.producer_name_regex_filter_)*/{}
  , /*decltype(_impl_.config_)*/nullptr} {}
struct TraceConfig_DataSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_DataSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_DataSourceDefaultTypeInternal() {}
  union {
    TraceConfig_DataSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_DataSourceDefaultTypeInternal _TraceConfig_DataSource_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disable_clock_snapshotting_)*/false
  , /*decltype(_impl_.disable_trace_config_)*/false
  , /*decltype(_impl_.disable_system_info_)*/false
  , /*decltype(_impl_.disable_service_events_)*/false
  , /*decltype(_impl_.primary_trace_clock_)*/0
  , /*decltype(_impl_.snapshot_interval_ms_)*/0u
  , /*decltype(_impl_.prefer_suspend_clock_for_snapshot_)*/false
  , /*decltype(_impl_.disable_chunk_usage_histograms_)*/false} {}
struct TraceConfig_BuiltinDataSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_BuiltinDataSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_BuiltinDataSourceDefaultTypeInternal() {}
  union {
    TraceConfig_BuiltinDataSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_BuiltinDataSourceDefaultTypeInternal _TraceConfig_BuiltinDataSource_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_ProducerConfig::TraceConfig_ProducerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.producer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shm_size_kb_)*/0u
  , /*decltype(_impl_.page_size_kb_)*/0u} {}
struct TraceConfig_ProducerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_ProducerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_ProducerConfigDefaultTypeInternal() {}
  union {
    TraceConfig_ProducerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_ProducerConfigDefaultTypeInternal _TraceConfig_ProducerConfig_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.triggering_alert_id_)*/int64_t{0}
  , /*decltype(_impl_.triggering_config_id_)*/int64_t{0}
  , /*decltype(_impl_.triggering_subscription_id_)*/int64_t{0}
  , /*decltype(_impl_.triggering_config_uid_)*/0} {}
struct TraceConfig_StatsdMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_StatsdMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_StatsdMetadataDefaultTypeInternal() {}
  union {
    TraceConfig_StatsdMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_StatsdMetadataDefaultTypeInternal _TraceConfig_StatsdMetadata_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_upload_per_day_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.max_tracing_buffer_size_kb_)*/0u} {}
struct TraceConfig_GuardrailOverridesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_GuardrailOverridesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_GuardrailOverridesDefaultTypeInternal() {}
  union {
    TraceConfig_GuardrailOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_GuardrailOverridesDefaultTypeInternal _TraceConfig_GuardrailOverrides_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.producer_name_regex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_delay_ms_)*/0u
  , /*decltype(_impl_.max_per_24_h_)*/0u
  , /*decltype(_impl_.skip_probability_)*/0} {}
struct TraceConfig_TriggerConfig_TriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig_TriggerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TriggerConfig_TriggerDefaultTypeInternal() {}
  union {
    TraceConfig_TriggerConfig_Trigger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TriggerConfig_TriggerDefaultTypeInternal _TraceConfig_TriggerConfig_Trigger_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig::TraceConfig_TriggerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.triggers_)*/{}
  , /*decltype(_impl_.trigger_mode_)*/0
  , /*decltype(_impl_.trigger_timeout_ms_)*/0u
  , /*decltype(_impl_.use_clone_snapshot_if_available_)*/false} {}
struct TraceConfig_TriggerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TriggerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TriggerConfigDefaultTypeInternal() {}
  union {
    TraceConfig_TriggerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TriggerConfigDefaultTypeInternal _TraceConfig_TriggerConfig_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clear_period_ms_)*/0u} {}
struct TraceConfig_IncrementalStateConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_IncrementalStateConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_IncrementalStateConfigDefaultTypeInternal() {}
  union {
    TraceConfig_IncrementalStateConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_IncrementalStateConfigDefaultTypeInternal _TraceConfig_IncrementalStateConfig_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_package_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_class_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.privacy_level_)*/0
  , /*decltype(_impl_.skip_incidentd_)*/false
  , /*decltype(_impl_.skip_dropbox_)*/false} {}
struct TraceConfig_IncidentReportConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_IncidentReportConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_IncidentReportConfigDefaultTypeInternal() {}
  union {
    TraceConfig_IncidentReportConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_IncidentReportConfigDefaultTypeInternal _TraceConfig_IncidentReportConfig_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterRule::TraceConfig_TraceFilter_StringFilterRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.regex_pattern_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.atrace_payload_starts_with_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.policy_)*/0} {}
struct TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal() {}
  union {
    TraceConfig_TraceFilter_StringFilterRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal _TraceConfig_TraceFilter_StringFilterRule_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterChain::TraceConfig_TraceFilter_StringFilterChain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal() {}
  union {
    TraceConfig_TraceFilter_StringFilterChain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal _TraceConfig_TraceFilter_StringFilterChain_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_TraceFilter::TraceConfig_TraceFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytecode_v2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string_filter_chain_)*/nullptr} {}
struct TraceConfig_TraceFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TraceFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TraceFilterDefaultTypeInternal() {}
  union {
    TraceConfig_TraceFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TraceFilterDefaultTypeInternal _TraceConfig_TraceFilter_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_AndroidReportConfig::TraceConfig_AndroidReportConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reporter_service_package_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reporter_service_class_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skip_report_)*/false
  , /*decltype(_impl_.use_pipe_in_framework_for_testing_)*/false} {}
struct TraceConfig_AndroidReportConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_AndroidReportConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_AndroidReportConfigDefaultTypeInternal() {}
  union {
    TraceConfig_AndroidReportConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_AndroidReportConfigDefaultTypeInternal _TraceConfig_AndroidReportConfig_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_CmdTraceStartDelay::TraceConfig_CmdTraceStartDelay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_delay_ms_)*/0u
  , /*decltype(_impl_.max_delay_ms_)*/0u} {}
struct TraceConfig_CmdTraceStartDelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_CmdTraceStartDelayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_CmdTraceStartDelayDefaultTypeInternal() {}
  union {
    TraceConfig_CmdTraceStartDelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_CmdTraceStartDelayDefaultTypeInternal _TraceConfig_CmdTraceStartDelay_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig_SessionSemaphore::TraceConfig_SessionSemaphore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_other_session_count_)*/uint64_t{0u}} {}
struct TraceConfig_SessionSemaphoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_SessionSemaphoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_SessionSemaphoreDefaultTypeInternal() {}
  union {
    TraceConfig_SessionSemaphore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_SessionSemaphoreDefaultTypeInternal _TraceConfig_SessionSemaphore_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig::TraceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buffers_)*/{}
  , /*decltype(_impl_.data_sources_)*/{}
  , /*decltype(_impl_.producers_)*/{}
  , /*decltype(_impl_.activate_triggers_)*/{}
  , /*decltype(_impl_.session_semaphores_)*/{}
  , /*decltype(_impl_.unique_session_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bugreport_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statsd_metadata_)*/nullptr
  , /*decltype(_impl_.guardrail_overrides_)*/nullptr
  , /*decltype(_impl_.trigger_config_)*/nullptr
  , /*decltype(_impl_.builtin_data_sources_)*/nullptr
  , /*decltype(_impl_.incremental_state_config_)*/nullptr
  , /*decltype(_impl_.incident_report_config_)*/nullptr
  , /*decltype(_impl_.trace_filter_)*/nullptr
  , /*decltype(_impl_.android_report_config_)*/nullptr
  , /*decltype(_impl_.cmd_trace_start_delay_)*/nullptr
  , /*decltype(_impl_.duration_ms_)*/0u
  , /*decltype(_impl_.lockdown_mode_)*/0
  , /*decltype(_impl_.max_file_size_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.file_write_period_ms_)*/0u
  , /*decltype(_impl_.flush_period_ms_)*/0u
  , /*decltype(_impl_.flush_timeout_ms_)*/0u
  , /*decltype(_impl_.prefer_suspend_clock_for_duration_)*/false
  , /*decltype(_impl_.enable_extra_guardrails_)*/false
  , /*decltype(_impl_.write_into_file_)*/false
  , /*decltype(_impl_.deferred_start_)*/false
  , /*decltype(_impl_.notify_traceur_)*/false
  , /*decltype(_impl_.allow_user_build_tracing_)*/false
  , /*decltype(_impl_.data_source_stop_timeout_ms_)*/0u
  , /*decltype(_impl_.trace_uuid_msb_)*/int64_t{0}
  , /*decltype(_impl_.compression_type_)*/0
  , /*decltype(_impl_.bugreport_score_)*/0
  , /*decltype(_impl_.trace_uuid_lsb_)*/int64_t{0}
  , /*decltype(_impl_.statsd_logging_)*/0} {}
struct TraceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfigDefaultTypeInternal() {}
  union {
    TraceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool TraceConfig_BufferConfig_FillPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_BufferConfig_FillPolicy_strings[3] = {};

static const char TraceConfig_BufferConfig_FillPolicy_names[] =
  "DISCARD"
  "RING_BUFFER"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_BufferConfig_FillPolicy_entries[] = {
  { {TraceConfig_BufferConfig_FillPolicy_names + 0, 7}, 2 },
  { {TraceConfig_BufferConfig_FillPolicy_names + 7, 11}, 1 },
  { {TraceConfig_BufferConfig_FillPolicy_names + 18, 11}, 0 },
};

static const int TraceConfig_BufferConfig_FillPolicy_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  1, // 1 -> RING_BUFFER
  0, // 2 -> DISCARD
};

const std::string& TraceConfig_BufferConfig_FillPolicy_Name(
    TraceConfig_BufferConfig_FillPolicy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_BufferConfig_FillPolicy_entries,
          TraceConfig_BufferConfig_FillPolicy_entries_by_number,
          3, TraceConfig_BufferConfig_FillPolicy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_BufferConfig_FillPolicy_entries,
      TraceConfig_BufferConfig_FillPolicy_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_BufferConfig_FillPolicy_strings[idx].get();
}
bool TraceConfig_BufferConfig_FillPolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceConfig_BufferConfig_FillPolicy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_BufferConfig_FillPolicy_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_BufferConfig_FillPolicy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::UNSPECIFIED;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::RING_BUFFER;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::DISCARD;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::FillPolicy_MIN;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::FillPolicy_MAX;
constexpr int TraceConfig_BufferConfig::FillPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TraceConfig_TriggerConfig_TriggerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_TriggerConfig_TriggerMode_strings[4] = {};

static const char TraceConfig_TriggerConfig_TriggerMode_names[] =
  "CLONE_SNAPSHOT"
  "START_TRACING"
  "STOP_TRACING"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_TriggerConfig_TriggerMode_entries[] = {
  { {TraceConfig_TriggerConfig_TriggerMode_names + 0, 14}, 4 },
  { {TraceConfig_TriggerConfig_TriggerMode_names + 14, 13}, 1 },
  { {TraceConfig_TriggerConfig_TriggerMode_names + 27, 12}, 2 },
  { {TraceConfig_TriggerConfig_TriggerMode_names + 39, 11}, 0 },
};

static const int TraceConfig_TriggerConfig_TriggerMode_entries_by_number[] = {
  3, // 0 -> UNSPECIFIED
  1, // 1 -> START_TRACING
  2, // 2 -> STOP_TRACING
  0, // 4 -> CLONE_SNAPSHOT
};

const std::string& TraceConfig_TriggerConfig_TriggerMode_Name(
    TraceConfig_TriggerConfig_TriggerMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_TriggerConfig_TriggerMode_entries,
          TraceConfig_TriggerConfig_TriggerMode_entries_by_number,
          4, TraceConfig_TriggerConfig_TriggerMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_TriggerConfig_TriggerMode_entries,
      TraceConfig_TriggerConfig_TriggerMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_TriggerConfig_TriggerMode_strings[idx].get();
}
bool TraceConfig_TriggerConfig_TriggerMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceConfig_TriggerConfig_TriggerMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_TriggerConfig_TriggerMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_TriggerConfig_TriggerMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::UNSPECIFIED;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::START_TRACING;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::STOP_TRACING;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::CLONE_SNAPSHOT;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::TriggerMode_MIN;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::TriggerMode_MAX;
constexpr int TraceConfig_TriggerConfig::TriggerMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TraceConfig_TraceFilter_StringFilterPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_TraceFilter_StringFilterPolicy_strings[6] = {};

static const char TraceConfig_TraceFilter_StringFilterPolicy_names[] =
  "SFP_ATRACE_MATCH_BREAK"
  "SFP_ATRACE_MATCH_REDACT_GROUPS"
  "SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS"
  "SFP_MATCH_BREAK"
  "SFP_MATCH_REDACT_GROUPS"
  "SFP_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_TraceFilter_StringFilterPolicy_entries[] = {
  { {TraceConfig_TraceFilter_StringFilterPolicy_names + 0, 22}, 4 },
  { {TraceConfig_TraceFilter_StringFilterPolicy_names + 22, 30}, 2 },
  { {TraceConfig_TraceFilter_StringFilterPolicy_names + 52, 40}, 5 },
  { {TraceConfig_TraceFilter_StringFilterPolicy_names + 92, 15}, 3 },
  { {TraceConfig_TraceFilter_StringFilterPolicy_names + 107, 23}, 1 },
  { {TraceConfig_TraceFilter_StringFilterPolicy_names + 130, 15}, 0 },
};

static const int TraceConfig_TraceFilter_StringFilterPolicy_entries_by_number[] = {
  5, // 0 -> SFP_UNSPECIFIED
  4, // 1 -> SFP_MATCH_REDACT_GROUPS
  1, // 2 -> SFP_ATRACE_MATCH_REDACT_GROUPS
  3, // 3 -> SFP_MATCH_BREAK
  0, // 4 -> SFP_ATRACE_MATCH_BREAK
  2, // 5 -> SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS
};

const std::string& TraceConfig_TraceFilter_StringFilterPolicy_Name(
    TraceConfig_TraceFilter_StringFilterPolicy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_TraceFilter_StringFilterPolicy_entries,
          TraceConfig_TraceFilter_StringFilterPolicy_entries_by_number,
          6, TraceConfig_TraceFilter_StringFilterPolicy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_TraceFilter_StringFilterPolicy_entries,
      TraceConfig_TraceFilter_StringFilterPolicy_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_TraceFilter_StringFilterPolicy_strings[idx].get();
}
bool TraceConfig_TraceFilter_StringFilterPolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceConfig_TraceFilter_StringFilterPolicy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_TraceFilter_StringFilterPolicy_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_TraceFilter_StringFilterPolicy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_UNSPECIFIED;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_MATCH_REDACT_GROUPS;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_ATRACE_MATCH_REDACT_GROUPS;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_MATCH_BREAK;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_ATRACE_MATCH_BREAK;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::StringFilterPolicy_MIN;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::StringFilterPolicy_MAX;
constexpr int TraceConfig_TraceFilter::StringFilterPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TraceConfig_LockdownModeOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_LockdownModeOperation_strings[3] = {};

static const char TraceConfig_LockdownModeOperation_names[] =
  "LOCKDOWN_CLEAR"
  "LOCKDOWN_SET"
  "LOCKDOWN_UNCHANGED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_LockdownModeOperation_entries[] = {
  { {TraceConfig_LockdownModeOperation_names + 0, 14}, 1 },
  { {TraceConfig_LockdownModeOperation_names + 14, 12}, 2 },
  { {TraceConfig_LockdownModeOperation_names + 26, 18}, 0 },
};

static const int TraceConfig_LockdownModeOperation_entries_by_number[] = {
  2, // 0 -> LOCKDOWN_UNCHANGED
  0, // 1 -> LOCKDOWN_CLEAR
  1, // 2 -> LOCKDOWN_SET
};

const std::string& TraceConfig_LockdownModeOperation_Name(
    TraceConfig_LockdownModeOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_LockdownModeOperation_entries,
          TraceConfig_LockdownModeOperation_entries_by_number,
          3, TraceConfig_LockdownModeOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_LockdownModeOperation_entries,
      TraceConfig_LockdownModeOperation_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_LockdownModeOperation_strings[idx].get();
}
bool TraceConfig_LockdownModeOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceConfig_LockdownModeOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_LockdownModeOperation_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_LockdownModeOperation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_UNCHANGED;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_CLEAR;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_SET;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LockdownModeOperation_MIN;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LockdownModeOperation_MAX;
constexpr int TraceConfig::LockdownModeOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TraceConfig_CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_CompressionType_strings[2] = {};

static const char TraceConfig_CompressionType_names[] =
  "COMPRESSION_TYPE_DEFLATE"
  "COMPRESSION_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_CompressionType_entries[] = {
  { {TraceConfig_CompressionType_names + 0, 24}, 1 },
  { {TraceConfig_CompressionType_names + 24, 28}, 0 },
};

static const int TraceConfig_CompressionType_entries_by_number[] = {
  1, // 0 -> COMPRESSION_TYPE_UNSPECIFIED
  0, // 1 -> COMPRESSION_TYPE_DEFLATE
};

const std::string& TraceConfig_CompressionType_Name(
    TraceConfig_CompressionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_CompressionType_entries,
          TraceConfig_CompressionType_entries_by_number,
          2, TraceConfig_CompressionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_CompressionType_entries,
      TraceConfig_CompressionType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_CompressionType_strings[idx].get();
}
bool TraceConfig_CompressionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceConfig_CompressionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_CompressionType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_CompressionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TraceConfig_CompressionType TraceConfig::COMPRESSION_TYPE_UNSPECIFIED;
constexpr TraceConfig_CompressionType TraceConfig::COMPRESSION_TYPE_DEFLATE;
constexpr TraceConfig_CompressionType TraceConfig::CompressionType_MIN;
constexpr TraceConfig_CompressionType TraceConfig::CompressionType_MAX;
constexpr int TraceConfig::CompressionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TraceConfig_StatsdLogging_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TraceConfig_StatsdLogging_strings[3] = {};

static const char TraceConfig_StatsdLogging_names[] =
  "STATSD_LOGGING_DISABLED"
  "STATSD_LOGGING_ENABLED"
  "STATSD_LOGGING_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TraceConfig_StatsdLogging_entries[] = {
  { {TraceConfig_StatsdLogging_names + 0, 23}, 2 },
  { {TraceConfig_StatsdLogging_names + 23, 22}, 1 },
  { {TraceConfig_StatsdLogging_names + 45, 26}, 0 },
};

static const int TraceConfig_StatsdLogging_entries_by_number[] = {
  2, // 0 -> STATSD_LOGGING_UNSPECIFIED
  1, // 1 -> STATSD_LOGGING_ENABLED
  0, // 2 -> STATSD_LOGGING_DISABLED
};

const std::string& TraceConfig_StatsdLogging_Name(
    TraceConfig_StatsdLogging value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TraceConfig_StatsdLogging_entries,
          TraceConfig_StatsdLogging_entries_by_number,
          3, TraceConfig_StatsdLogging_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TraceConfig_StatsdLogging_entries,
      TraceConfig_StatsdLogging_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TraceConfig_StatsdLogging_strings[idx].get();
}
bool TraceConfig_StatsdLogging_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceConfig_StatsdLogging* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TraceConfig_StatsdLogging_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TraceConfig_StatsdLogging>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TraceConfig_StatsdLogging TraceConfig::STATSD_LOGGING_UNSPECIFIED;
constexpr TraceConfig_StatsdLogging TraceConfig::STATSD_LOGGING_ENABLED;
constexpr TraceConfig_StatsdLogging TraceConfig::STATSD_LOGGING_DISABLED;
constexpr TraceConfig_StatsdLogging TraceConfig::StatsdLogging_MIN;
constexpr TraceConfig_StatsdLogging TraceConfig::StatsdLogging_MAX;
constexpr int TraceConfig::StatsdLogging_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TraceConfig_BufferConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_BufferConfig>()._impl_._has_bits_);
  static void set_has_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fill_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transfer_on_clone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_before_clone(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TraceConfig_BufferConfig::TraceConfig_BufferConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.BufferConfig)
}
TraceConfig_BufferConfig::TraceConfig_BufferConfig(const TraceConfig_BufferConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_BufferConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_kb_){}
    , decltype(_impl_.fill_policy_){}
    , decltype(_impl_.transfer_on_clone_){}
    , decltype(_impl_.clear_before_clone_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.size_kb_, &from._impl_.size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_before_clone_) -
    reinterpret_cast<char*>(&_impl_.size_kb_)) + sizeof(_impl_.clear_before_clone_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.BufferConfig)
}

inline void TraceConfig_BufferConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_kb_){0u}
    , decltype(_impl_.fill_policy_){0}
    , decltype(_impl_.transfer_on_clone_){false}
    , decltype(_impl_.clear_before_clone_){false}
  };
}

TraceConfig_BufferConfig::~TraceConfig_BufferConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.BufferConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_BufferConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_BufferConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_BufferConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.BufferConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.clear_before_clone_) -
        reinterpret_cast<char*>(&_impl_.size_kb_)) + sizeof(_impl_.clear_before_clone_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_BufferConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 size_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_size_kb(&has_bits);
          _impl_.size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy_IsValid(val))) {
            _internal_set_fill_policy(static_cast<::perfetto::protos::TraceConfig_BufferConfig_FillPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool transfer_on_clone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_transfer_on_clone(&has_bits);
          _impl_.transfer_on_clone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool clear_before_clone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_clear_before_clone(&has_bits);
          _impl_.clear_before_clone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_BufferConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.BufferConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 size_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size_kb(), target);
  }

  // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_fill_policy(), target);
  }

  // optional bool transfer_on_clone = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_transfer_on_clone(), target);
  }

  // optional bool clear_before_clone = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_clear_before_clone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.BufferConfig)
  return target;
}

size_t TraceConfig_BufferConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.BufferConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 size_kb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size_kb());
    }

    // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fill_policy());
    }

    // optional bool transfer_on_clone = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_before_clone = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_BufferConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_BufferConfig*>(
      &from));
}

void TraceConfig_BufferConfig::MergeFrom(const TraceConfig_BufferConfig& from) {
  TraceConfig_BufferConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.BufferConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.size_kb_ = from._impl_.size_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fill_policy_ = from._impl_.fill_policy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.transfer_on_clone_ = from._impl_.transfer_on_clone_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.clear_before_clone_ = from._impl_.clear_before_clone_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_BufferConfig::CopyFrom(const TraceConfig_BufferConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.BufferConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_BufferConfig::IsInitialized() const {
  return true;
}

void TraceConfig_BufferConfig::InternalSwap(TraceConfig_BufferConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_BufferConfig, _impl_.clear_before_clone_)
      + sizeof(TraceConfig_BufferConfig::_impl_.clear_before_clone_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_BufferConfig, _impl_.size_kb_)>(
          reinterpret_cast<char*>(&_impl_.size_kb_),
          reinterpret_cast<char*>(&other->_impl_.size_kb_));
}

std::string TraceConfig_BufferConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.BufferConfig";
}


// ===================================================================

class TraceConfig_DataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_DataSource>()._impl_._has_bits_);
  static const ::perfetto::protos::DataSourceConfig& config(const TraceConfig_DataSource* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::DataSourceConfig&
TraceConfig_DataSource::_Internal::config(const TraceConfig_DataSource* msg) {
  return *msg->_impl_.config_;
}
void TraceConfig_DataSource::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TraceConfig_DataSource::TraceConfig_DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.DataSource)
}
TraceConfig_DataSource::TraceConfig_DataSource(const TraceConfig_DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_DataSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_filter_){from._impl_.producer_name_filter_}
    , decltype(_impl_.producer_name_regex_filter_){from._impl_.producer_name_regex_filter_}
    , decltype(_impl_.config_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::perfetto::protos::DataSourceConfig(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.DataSource)
}

inline void TraceConfig_DataSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_filter_){arena}
    , decltype(_impl_.producer_name_regex_filter_){arena}
    , decltype(_impl_.config_){nullptr}
  };
}

TraceConfig_DataSource::~TraceConfig_DataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.DataSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_DataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.producer_name_filter_.~RepeatedPtrField();
  _impl_.producer_name_regex_filter_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.config_;
}

void TraceConfig_DataSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.DataSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.producer_name_filter_.Clear();
  _impl_.producer_name_regex_filter_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_DataSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.DataSourceConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string producer_name_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_producer_name_filter();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string producer_name_regex_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_producer_name_regex_filter();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_DataSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.DataSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.DataSourceConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // repeated string producer_name_filter = 2;
  for (int i = 0, n = this->_internal_producer_name_filter_size(); i < n; i++) {
    const auto& s = this->_internal_producer_name_filter(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated string producer_name_regex_filter = 3;
  for (int i = 0, n = this->_internal_producer_name_regex_filter_size(); i < n; i++) {
    const auto& s = this->_internal_producer_name_regex_filter(i);
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.DataSource)
  return target;
}

size_t TraceConfig_DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.DataSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string producer_name_filter = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.producer_name_filter_.size());
  for (int i = 0, n = _impl_.producer_name_filter_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.producer_name_filter_.Get(i));
  }

  // repeated string producer_name_regex_filter = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.producer_name_regex_filter_.size());
  for (int i = 0, n = _impl_.producer_name_regex_filter_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.producer_name_regex_filter_.Get(i));
  }

  // optional .perfetto.protos.DataSourceConfig config = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_DataSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_DataSource*>(
      &from));
}

void TraceConfig_DataSource::MergeFrom(const TraceConfig_DataSource& from) {
  TraceConfig_DataSource* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.DataSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.producer_name_filter_.MergeFrom(from._impl_.producer_name_filter_);
  _this->_impl_.producer_name_regex_filter_.MergeFrom(from._impl_.producer_name_regex_filter_);
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::perfetto::protos::DataSourceConfig::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_DataSource::CopyFrom(const TraceConfig_DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_DataSource::IsInitialized() const {
  return true;
}

void TraceConfig_DataSource::InternalSwap(TraceConfig_DataSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.producer_name_filter_.InternalSwap(&other->_impl_.producer_name_filter_);
  _impl_.producer_name_regex_filter_.InternalSwap(&other->_impl_.producer_name_regex_filter_);
  swap(_impl_.config_, other->_impl_.config_);
}

std::string TraceConfig_DataSource::GetTypeName() const {
  return "perfetto.protos.TraceConfig.DataSource";
}


// ===================================================================

class TraceConfig_BuiltinDataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_BuiltinDataSource>()._impl_._has_bits_);
  static void set_has_disable_clock_snapshotting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disable_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disable_system_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_disable_service_events(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_primary_trace_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_snapshot_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prefer_suspend_clock_for_snapshot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disable_chunk_usage_histograms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.BuiltinDataSource)
}
TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource(const TraceConfig_BuiltinDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_BuiltinDataSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disable_clock_snapshotting_){}
    , decltype(_impl_.disable_trace_config_){}
    , decltype(_impl_.disable_system_info_){}
    , decltype(_impl_.disable_service_events_){}
    , decltype(_impl_.primary_trace_clock_){}
    , decltype(_impl_.snapshot_interval_ms_){}
    , decltype(_impl_.prefer_suspend_clock_for_snapshot_){}
    , decltype(_impl_.disable_chunk_usage_histograms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.disable_clock_snapshotting_, &from._impl_.disable_clock_snapshotting_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disable_chunk_usage_histograms_) -
    reinterpret_cast<char*>(&_impl_.disable_clock_snapshotting_)) + sizeof(_impl_.disable_chunk_usage_histograms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.BuiltinDataSource)
}

inline void TraceConfig_BuiltinDataSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disable_clock_snapshotting_){false}
    , decltype(_impl_.disable_trace_config_){false}
    , decltype(_impl_.disable_system_info_){false}
    , decltype(_impl_.disable_service_events_){false}
    , decltype(_impl_.primary_trace_clock_){0}
    , decltype(_impl_.snapshot_interval_ms_){0u}
    , decltype(_impl_.prefer_suspend_clock_for_snapshot_){false}
    , decltype(_impl_.disable_chunk_usage_histograms_){false}
  };
}

TraceConfig_BuiltinDataSource::~TraceConfig_BuiltinDataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.BuiltinDataSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_BuiltinDataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_BuiltinDataSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_BuiltinDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.disable_clock_snapshotting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.disable_chunk_usage_histograms_) -
        reinterpret_cast<char*>(&_impl_.disable_clock_snapshotting_)) + sizeof(_impl_.disable_chunk_usage_histograms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_BuiltinDataSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool disable_clock_snapshotting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_disable_clock_snapshotting(&has_bits);
          _impl_.disable_clock_snapshotting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_trace_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_disable_trace_config(&has_bits);
          _impl_.disable_trace_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_system_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_disable_system_info(&has_bits);
          _impl_.disable_system_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_service_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_disable_service_events(&has_bits);
          _impl_.disable_service_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BuiltinClock_IsValid(val))) {
            _internal_set_primary_trace_clock(static_cast<::perfetto::protos::BuiltinClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 snapshot_interval_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_snapshot_interval_ms(&has_bits);
          _impl_.snapshot_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prefer_suspend_clock_for_snapshot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_prefer_suspend_clock_for_snapshot(&has_bits);
          _impl_.prefer_suspend_clock_for_snapshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_chunk_usage_histograms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_disable_chunk_usage_histograms(&has_bits);
          _impl_.disable_chunk_usage_histograms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_BuiltinDataSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool disable_clock_snapshotting = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_disable_clock_snapshotting(), target);
  }

  // optional bool disable_trace_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_trace_config(), target);
  }

  // optional bool disable_system_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_disable_system_info(), target);
  }

  // optional bool disable_service_events = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_disable_service_events(), target);
  }

  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_primary_trace_clock(), target);
  }

  // optional uint32 snapshot_interval_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_snapshot_interval_ms(), target);
  }

  // optional bool prefer_suspend_clock_for_snapshot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_prefer_suspend_clock_for_snapshot(), target);
  }

  // optional bool disable_chunk_usage_histograms = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_disable_chunk_usage_histograms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.BuiltinDataSource)
  return target;
}

size_t TraceConfig_BuiltinDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool disable_clock_snapshotting = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool disable_trace_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool disable_system_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool disable_service_events = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_primary_trace_clock());
    }

    // optional uint32 snapshot_interval_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_snapshot_interval_ms());
    }

    // optional bool prefer_suspend_clock_for_snapshot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool disable_chunk_usage_histograms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_BuiltinDataSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_BuiltinDataSource*>(
      &from));
}

void TraceConfig_BuiltinDataSource::MergeFrom(const TraceConfig_BuiltinDataSource& from) {
  TraceConfig_BuiltinDataSource* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.disable_clock_snapshotting_ = from._impl_.disable_clock_snapshotting_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disable_trace_config_ = from._impl_.disable_trace_config_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.disable_system_info_ = from._impl_.disable_system_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.disable_service_events_ = from._impl_.disable_service_events_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.primary_trace_clock_ = from._impl_.primary_trace_clock_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.snapshot_interval_ms_ = from._impl_.snapshot_interval_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.prefer_suspend_clock_for_snapshot_ = from._impl_.prefer_suspend_clock_for_snapshot_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.disable_chunk_usage_histograms_ = from._impl_.disable_chunk_usage_histograms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_BuiltinDataSource::CopyFrom(const TraceConfig_BuiltinDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_BuiltinDataSource::IsInitialized() const {
  return true;
}

void TraceConfig_BuiltinDataSource::InternalSwap(TraceConfig_BuiltinDataSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_BuiltinDataSource, _impl_.disable_chunk_usage_histograms_)
      + sizeof(TraceConfig_BuiltinDataSource::_impl_.disable_chunk_usage_histograms_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_BuiltinDataSource, _impl_.disable_clock_snapshotting_)>(
          reinterpret_cast<char*>(&_impl_.disable_clock_snapshotting_),
          reinterpret_cast<char*>(&other->_impl_.disable_clock_snapshotting_));
}

std::string TraceConfig_BuiltinDataSource::GetTypeName() const {
  return "perfetto.protos.TraceConfig.BuiltinDataSource";
}


// ===================================================================

class TraceConfig_ProducerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_ProducerConfig>()._impl_._has_bits_);
  static void set_has_producer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shm_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TraceConfig_ProducerConfig::TraceConfig_ProducerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.ProducerConfig)
}
TraceConfig_ProducerConfig::TraceConfig_ProducerConfig(const TraceConfig_ProducerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_ProducerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_){}
    , decltype(_impl_.shm_size_kb_){}
    , decltype(_impl_.page_size_kb_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.producer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_producer_name()) {
    _this->_impl_.producer_name_.Set(from._internal_producer_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.shm_size_kb_, &from._impl_.shm_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.page_size_kb_) -
    reinterpret_cast<char*>(&_impl_.shm_size_kb_)) + sizeof(_impl_.page_size_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.ProducerConfig)
}

inline void TraceConfig_ProducerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_){}
    , decltype(_impl_.shm_size_kb_){0u}
    , decltype(_impl_.page_size_kb_){0u}
  };
  _impl_.producer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_ProducerConfig::~TraceConfig_ProducerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.ProducerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_ProducerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.producer_name_.Destroy();
}

void TraceConfig_ProducerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_ProducerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.ProducerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.producer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.shm_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.page_size_kb_) -
        reinterpret_cast<char*>(&_impl_.shm_size_kb_)) + sizeof(_impl_.page_size_kb_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_ProducerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string producer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_producer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shm_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shm_size_kb(&has_bits);
          _impl_.shm_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 page_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_page_size_kb(&has_bits);
          _impl_.page_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_ProducerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.ProducerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string producer_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_producer_name(), target);
  }

  // optional uint32 shm_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shm_size_kb(), target);
  }

  // optional uint32 page_size_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page_size_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.ProducerConfig)
  return target;
}

size_t TraceConfig_ProducerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.ProducerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string producer_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_producer_name());
    }

    // optional uint32 shm_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shm_size_kb());
    }

    // optional uint32 page_size_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_size_kb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_ProducerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_ProducerConfig*>(
      &from));
}

void TraceConfig_ProducerConfig::MergeFrom(const TraceConfig_ProducerConfig& from) {
  TraceConfig_ProducerConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.ProducerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_producer_name(from._internal_producer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shm_size_kb_ = from._impl_.shm_size_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.page_size_kb_ = from._impl_.page_size_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_ProducerConfig::CopyFrom(const TraceConfig_ProducerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.ProducerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_ProducerConfig::IsInitialized() const {
  return true;
}

void TraceConfig_ProducerConfig::InternalSwap(TraceConfig_ProducerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producer_name_, lhs_arena,
      &other->_impl_.producer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_ProducerConfig, _impl_.page_size_kb_)
      + sizeof(TraceConfig_ProducerConfig::_impl_.page_size_kb_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_ProducerConfig, _impl_.shm_size_kb_)>(
          reinterpret_cast<char*>(&_impl_.shm_size_kb_),
          reinterpret_cast<char*>(&other->_impl_.shm_size_kb_));
}

std::string TraceConfig_ProducerConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.ProducerConfig";
}


// ===================================================================

class TraceConfig_StatsdMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_StatsdMetadata>()._impl_._has_bits_);
  static void set_has_triggering_alert_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_triggering_config_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_triggering_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_triggering_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.StatsdMetadata)
}
TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata(const TraceConfig_StatsdMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_StatsdMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggering_alert_id_){}
    , decltype(_impl_.triggering_config_id_){}
    , decltype(_impl_.triggering_subscription_id_){}
    , decltype(_impl_.triggering_config_uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.triggering_alert_id_, &from._impl_.triggering_alert_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.triggering_config_uid_) -
    reinterpret_cast<char*>(&_impl_.triggering_alert_id_)) + sizeof(_impl_.triggering_config_uid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.StatsdMetadata)
}

inline void TraceConfig_StatsdMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggering_alert_id_){int64_t{0}}
    , decltype(_impl_.triggering_config_id_){int64_t{0}}
    , decltype(_impl_.triggering_subscription_id_){int64_t{0}}
    , decltype(_impl_.triggering_config_uid_){0}
  };
}

TraceConfig_StatsdMetadata::~TraceConfig_StatsdMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.StatsdMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_StatsdMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_StatsdMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_StatsdMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.StatsdMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.triggering_alert_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.triggering_config_uid_) -
        reinterpret_cast<char*>(&_impl_.triggering_alert_id_)) + sizeof(_impl_.triggering_config_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_StatsdMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 triggering_alert_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_triggering_alert_id(&has_bits);
          _impl_.triggering_alert_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 triggering_config_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_triggering_config_uid(&has_bits);
          _impl_.triggering_config_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 triggering_config_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_triggering_config_id(&has_bits);
          _impl_.triggering_config_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 triggering_subscription_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_triggering_subscription_id(&has_bits);
          _impl_.triggering_subscription_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_StatsdMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.StatsdMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 triggering_alert_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_triggering_alert_id(), target);
  }

  // optional int32 triggering_config_uid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_triggering_config_uid(), target);
  }

  // optional int64 triggering_config_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_triggering_config_id(), target);
  }

  // optional int64 triggering_subscription_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_triggering_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.StatsdMetadata)
  return target;
}

size_t TraceConfig_StatsdMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.StatsdMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 triggering_alert_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_triggering_alert_id());
    }

    // optional int64 triggering_config_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_triggering_config_id());
    }

    // optional int64 triggering_subscription_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_triggering_subscription_id());
    }

    // optional int32 triggering_config_uid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_triggering_config_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_StatsdMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_StatsdMetadata*>(
      &from));
}

void TraceConfig_StatsdMetadata::MergeFrom(const TraceConfig_StatsdMetadata& from) {
  TraceConfig_StatsdMetadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.StatsdMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.triggering_alert_id_ = from._impl_.triggering_alert_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.triggering_config_id_ = from._impl_.triggering_config_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.triggering_subscription_id_ = from._impl_.triggering_subscription_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.triggering_config_uid_ = from._impl_.triggering_config_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_StatsdMetadata::CopyFrom(const TraceConfig_StatsdMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.StatsdMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_StatsdMetadata::IsInitialized() const {
  return true;
}

void TraceConfig_StatsdMetadata::InternalSwap(TraceConfig_StatsdMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_StatsdMetadata, _impl_.triggering_config_uid_)
      + sizeof(TraceConfig_StatsdMetadata::_impl_.triggering_config_uid_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_StatsdMetadata, _impl_.triggering_alert_id_)>(
          reinterpret_cast<char*>(&_impl_.triggering_alert_id_),
          reinterpret_cast<char*>(&other->_impl_.triggering_alert_id_));
}

std::string TraceConfig_StatsdMetadata::GetTypeName() const {
  return "perfetto.protos.TraceConfig.StatsdMetadata";
}


// ===================================================================

class TraceConfig_GuardrailOverrides::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_GuardrailOverrides>()._impl_._has_bits_);
  static void set_has_max_upload_per_day_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_tracing_buffer_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.GuardrailOverrides)
}
TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides(const TraceConfig_GuardrailOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_GuardrailOverrides* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_upload_per_day_bytes_){}
    , decltype(_impl_.max_tracing_buffer_size_kb_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.max_upload_per_day_bytes_, &from._impl_.max_upload_per_day_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_tracing_buffer_size_kb_) -
    reinterpret_cast<char*>(&_impl_.max_upload_per_day_bytes_)) + sizeof(_impl_.max_tracing_buffer_size_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.GuardrailOverrides)
}

inline void TraceConfig_GuardrailOverrides::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_upload_per_day_bytes_){uint64_t{0u}}
    , decltype(_impl_.max_tracing_buffer_size_kb_){0u}
  };
}

TraceConfig_GuardrailOverrides::~TraceConfig_GuardrailOverrides() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.GuardrailOverrides)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_GuardrailOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_GuardrailOverrides::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_GuardrailOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_upload_per_day_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_tracing_buffer_size_kb_) -
        reinterpret_cast<char*>(&_impl_.max_upload_per_day_bytes_)) + sizeof(_impl_.max_tracing_buffer_size_kb_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_GuardrailOverrides::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 max_upload_per_day_bytes = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_upload_per_day_bytes(&has_bits);
          _impl_.max_upload_per_day_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_tracing_buffer_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_tracing_buffer_size_kb(&has_bits);
          _impl_.max_tracing_buffer_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_GuardrailOverrides::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 max_upload_per_day_bytes = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_max_upload_per_day_bytes(), target);
  }

  // optional uint32 max_tracing_buffer_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_tracing_buffer_size_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.GuardrailOverrides)
  return target;
}

size_t TraceConfig_GuardrailOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 max_upload_per_day_bytes = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_upload_per_day_bytes());
    }

    // optional uint32 max_tracing_buffer_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_tracing_buffer_size_kb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_GuardrailOverrides::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_GuardrailOverrides*>(
      &from));
}

void TraceConfig_GuardrailOverrides::MergeFrom(const TraceConfig_GuardrailOverrides& from) {
  TraceConfig_GuardrailOverrides* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_upload_per_day_bytes_ = from._impl_.max_upload_per_day_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_tracing_buffer_size_kb_ = from._impl_.max_tracing_buffer_size_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_GuardrailOverrides::CopyFrom(const TraceConfig_GuardrailOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_GuardrailOverrides::IsInitialized() const {
  return true;
}

void TraceConfig_GuardrailOverrides::InternalSwap(TraceConfig_GuardrailOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_GuardrailOverrides, _impl_.max_tracing_buffer_size_kb_)
      + sizeof(TraceConfig_GuardrailOverrides::_impl_.max_tracing_buffer_size_kb_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_GuardrailOverrides, _impl_.max_upload_per_day_bytes_)>(
          reinterpret_cast<char*>(&_impl_.max_upload_per_day_bytes_),
          reinterpret_cast<char*>(&other->_impl_.max_upload_per_day_bytes_));
}

std::string TraceConfig_GuardrailOverrides::GetTypeName() const {
  return "perfetto.protos.TraceConfig.GuardrailOverrides";
}


// ===================================================================

class TraceConfig_TriggerConfig_Trigger::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TriggerConfig_Trigger>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_name_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_per_24_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skip_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
}
TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger(const TraceConfig_TriggerConfig_Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_TriggerConfig_Trigger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.producer_name_regex_){}
    , decltype(_impl_.stop_delay_ms_){}
    , decltype(_impl_.max_per_24_h_){}
    , decltype(_impl_.skip_probability_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.producer_name_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_name_regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_producer_name_regex()) {
    _this->_impl_.producer_name_regex_.Set(from._internal_producer_name_regex(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stop_delay_ms_, &from._impl_.stop_delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skip_probability_) -
    reinterpret_cast<char*>(&_impl_.stop_delay_ms_)) + sizeof(_impl_.skip_probability_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
}

inline void TraceConfig_TriggerConfig_Trigger::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.producer_name_regex_){}
    , decltype(_impl_.stop_delay_ms_){0u}
    , decltype(_impl_.max_per_24_h_){0u}
    , decltype(_impl_.skip_probability_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.producer_name_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.producer_name_regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_TriggerConfig_Trigger::~TraceConfig_TriggerConfig_Trigger() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TriggerConfig_Trigger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.producer_name_regex_.Destroy();
}

void TraceConfig_TriggerConfig_Trigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TriggerConfig_Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.producer_name_regex_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.stop_delay_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.skip_probability_) -
        reinterpret_cast<char*>(&_impl_.stop_delay_ms_)) + sizeof(_impl_.skip_probability_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_TriggerConfig_Trigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string producer_name_regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_producer_name_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stop_delay_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stop_delay_ms(&has_bits);
          _impl_.stop_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_per_24_h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_per_24_h(&has_bits);
          _impl_.max_per_24_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double skip_probability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_skip_probability(&has_bits);
          _impl_.skip_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_TriggerConfig_Trigger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string producer_name_regex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_producer_name_regex(), target);
  }

  // optional uint32 stop_delay_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stop_delay_ms(), target);
  }

  // optional uint32 max_per_24_h = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_per_24_h(), target);
  }

  // optional double skip_probability = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_skip_probability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  return target;
}

size_t TraceConfig_TriggerConfig_Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string producer_name_regex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_producer_name_regex());
    }

    // optional uint32 stop_delay_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_delay_ms());
    }

    // optional uint32 max_per_24_h = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_per_24_h());
    }

    // optional double skip_probability = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_TriggerConfig_Trigger::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_TriggerConfig_Trigger*>(
      &from));
}

void TraceConfig_TriggerConfig_Trigger::MergeFrom(const TraceConfig_TriggerConfig_Trigger& from) {
  TraceConfig_TriggerConfig_Trigger* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_producer_name_regex(from._internal_producer_name_regex());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stop_delay_ms_ = from._impl_.stop_delay_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_per_24_h_ = from._impl_.max_per_24_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.skip_probability_ = from._impl_.skip_probability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_TriggerConfig_Trigger::CopyFrom(const TraceConfig_TriggerConfig_Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TriggerConfig_Trigger::IsInitialized() const {
  return true;
}

void TraceConfig_TriggerConfig_Trigger::InternalSwap(TraceConfig_TriggerConfig_Trigger* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.producer_name_regex_, lhs_arena,
      &other->_impl_.producer_name_regex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig_Trigger, _impl_.skip_probability_)
      + sizeof(TraceConfig_TriggerConfig_Trigger::_impl_.skip_probability_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig_Trigger, _impl_.stop_delay_ms_)>(
          reinterpret_cast<char*>(&_impl_.stop_delay_ms_),
          reinterpret_cast<char*>(&other->_impl_.stop_delay_ms_));
}

std::string TraceConfig_TriggerConfig_Trigger::GetTypeName() const {
  return "perfetto.protos.TraceConfig.TriggerConfig.Trigger";
}


// ===================================================================

class TraceConfig_TriggerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TriggerConfig>()._impl_._has_bits_);
  static void set_has_trigger_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_clone_snapshot_if_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trigger_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_TriggerConfig::TraceConfig_TriggerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TriggerConfig)
}
TraceConfig_TriggerConfig::TraceConfig_TriggerConfig(const TraceConfig_TriggerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_TriggerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggers_){from._impl_.triggers_}
    , decltype(_impl_.trigger_mode_){}
    , decltype(_impl_.trigger_timeout_ms_){}
    , decltype(_impl_.use_clone_snapshot_if_available_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.trigger_mode_, &from._impl_.trigger_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_clone_snapshot_if_available_) -
    reinterpret_cast<char*>(&_impl_.trigger_mode_)) + sizeof(_impl_.use_clone_snapshot_if_available_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TriggerConfig)
}

inline void TraceConfig_TriggerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggers_){arena}
    , decltype(_impl_.trigger_mode_){0}
    , decltype(_impl_.trigger_timeout_ms_){0u}
    , decltype(_impl_.use_clone_snapshot_if_available_){false}
  };
}

TraceConfig_TriggerConfig::~TraceConfig_TriggerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TriggerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TriggerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.triggers_.~RepeatedPtrField();
}

void TraceConfig_TriggerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TriggerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TriggerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.triggers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.trigger_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_clone_snapshot_if_available_) -
        reinterpret_cast<char*>(&_impl_.trigger_mode_)) + sizeof(_impl_.use_clone_snapshot_if_available_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_TriggerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode_IsValid(val))) {
            _internal_set_trigger_mode(static_cast<::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trigger_timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_trigger_timeout_ms(&has_bits);
          _impl_.trigger_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_clone_snapshot_if_available = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_use_clone_snapshot_if_available(&has_bits);
          _impl_.use_clone_snapshot_if_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_TriggerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TriggerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_mode(), target);
  }

  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triggers_size()); i < n; i++) {
    const auto& repfield = this->_internal_triggers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 trigger_timeout_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_trigger_timeout_ms(), target);
  }

  // optional bool use_clone_snapshot_if_available = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_use_clone_snapshot_if_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TriggerConfig)
  return target;
}

size_t TraceConfig_TriggerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TriggerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  total_size += 1UL * this->_internal_triggers_size();
  for (const auto& msg : this->_impl_.triggers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trigger_mode());
    }

    // optional uint32 trigger_timeout_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trigger_timeout_ms());
    }

    // optional bool use_clone_snapshot_if_available = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_TriggerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_TriggerConfig*>(
      &from));
}

void TraceConfig_TriggerConfig::MergeFrom(const TraceConfig_TriggerConfig& from) {
  TraceConfig_TriggerConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TriggerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.triggers_.MergeFrom(from._impl_.triggers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.trigger_mode_ = from._impl_.trigger_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.trigger_timeout_ms_ = from._impl_.trigger_timeout_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.use_clone_snapshot_if_available_ = from._impl_.use_clone_snapshot_if_available_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_TriggerConfig::CopyFrom(const TraceConfig_TriggerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TriggerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TriggerConfig::IsInitialized() const {
  return true;
}

void TraceConfig_TriggerConfig::InternalSwap(TraceConfig_TriggerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.triggers_.InternalSwap(&other->_impl_.triggers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig, _impl_.use_clone_snapshot_if_available_)
      + sizeof(TraceConfig_TriggerConfig::_impl_.use_clone_snapshot_if_available_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig, _impl_.trigger_mode_)>(
          reinterpret_cast<char*>(&_impl_.trigger_mode_),
          reinterpret_cast<char*>(&other->_impl_.trigger_mode_));
}

std::string TraceConfig_TriggerConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.TriggerConfig";
}


// ===================================================================

class TraceConfig_IncrementalStateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_IncrementalStateConfig>()._impl_._has_bits_);
  static void set_has_clear_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
}
TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig(const TraceConfig_IncrementalStateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_IncrementalStateConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clear_period_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.clear_period_ms_ = from._impl_.clear_period_ms_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
}

inline void TraceConfig_IncrementalStateConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clear_period_ms_){0u}
  };
}

TraceConfig_IncrementalStateConfig::~TraceConfig_IncrementalStateConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_IncrementalStateConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_IncrementalStateConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_IncrementalStateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clear_period_ms_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_IncrementalStateConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 clear_period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_clear_period_ms(&has_bits);
          _impl_.clear_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_IncrementalStateConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 clear_period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_clear_period_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.IncrementalStateConfig)
  return target;
}

size_t TraceConfig_IncrementalStateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 clear_period_ms = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clear_period_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_IncrementalStateConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_IncrementalStateConfig*>(
      &from));
}

void TraceConfig_IncrementalStateConfig::MergeFrom(const TraceConfig_IncrementalStateConfig& from) {
  TraceConfig_IncrementalStateConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clear_period_ms()) {
    _this->_internal_set_clear_period_ms(from._internal_clear_period_ms());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_IncrementalStateConfig::CopyFrom(const TraceConfig_IncrementalStateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_IncrementalStateConfig::IsInitialized() const {
  return true;
}

void TraceConfig_IncrementalStateConfig::InternalSwap(TraceConfig_IncrementalStateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.clear_period_ms_, other->_impl_.clear_period_ms_);
}

std::string TraceConfig_IncrementalStateConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.IncrementalStateConfig";
}


// ===================================================================

class TraceConfig_IncidentReportConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_IncidentReportConfig>()._impl_._has_bits_);
  static void set_has_destination_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skip_incidentd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skip_dropbox(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.IncidentReportConfig)
}
TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig(const TraceConfig_IncidentReportConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_IncidentReportConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_package_){}
    , decltype(_impl_.destination_class_){}
    , decltype(_impl_.privacy_level_){}
    , decltype(_impl_.skip_incidentd_){}
    , decltype(_impl_.skip_dropbox_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.destination_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_destination_package()) {
    _this->_impl_.destination_package_.Set(from._internal_destination_package(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_class_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_destination_class()) {
    _this->_impl_.destination_class_.Set(from._internal_destination_class(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.privacy_level_, &from._impl_.privacy_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skip_dropbox_) -
    reinterpret_cast<char*>(&_impl_.privacy_level_)) + sizeof(_impl_.skip_dropbox_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.IncidentReportConfig)
}

inline void TraceConfig_IncidentReportConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_package_){}
    , decltype(_impl_.destination_class_){}
    , decltype(_impl_.privacy_level_){0}
    , decltype(_impl_.skip_incidentd_){false}
    , decltype(_impl_.skip_dropbox_){false}
  };
  _impl_.destination_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_class_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_IncidentReportConfig::~TraceConfig_IncidentReportConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.IncidentReportConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_IncidentReportConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_package_.Destroy();
  _impl_.destination_class_.Destroy();
}

void TraceConfig_IncidentReportConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_IncidentReportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.destination_package_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.destination_class_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.privacy_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.skip_dropbox_) -
        reinterpret_cast<char*>(&_impl_.privacy_level_)) + sizeof(_impl_.skip_dropbox_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_IncidentReportConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string destination_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string destination_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination_class();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 privacy_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_privacy_level(&has_bits);
          _impl_.privacy_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_dropbox = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_skip_dropbox(&has_bits);
          _impl_.skip_dropbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_incidentd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_skip_incidentd(&has_bits);
          _impl_.skip_incidentd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_IncidentReportConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string destination_package = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination_package(), target);
  }

  // optional string destination_class = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destination_class(), target);
  }

  // optional int32 privacy_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_privacy_level(), target);
  }

  // optional bool skip_dropbox = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_skip_dropbox(), target);
  }

  // optional bool skip_incidentd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_skip_incidentd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.IncidentReportConfig)
  return target;
}

size_t TraceConfig_IncidentReportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string destination_package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destination_package());
    }

    // optional string destination_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destination_class());
    }

    // optional int32 privacy_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_privacy_level());
    }

    // optional bool skip_incidentd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool skip_dropbox = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_IncidentReportConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_IncidentReportConfig*>(
      &from));
}

void TraceConfig_IncidentReportConfig::MergeFrom(const TraceConfig_IncidentReportConfig& from) {
  TraceConfig_IncidentReportConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_destination_package(from._internal_destination_package());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_destination_class(from._internal_destination_class());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.privacy_level_ = from._impl_.privacy_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.skip_incidentd_ = from._impl_.skip_incidentd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.skip_dropbox_ = from._impl_.skip_dropbox_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_IncidentReportConfig::CopyFrom(const TraceConfig_IncidentReportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_IncidentReportConfig::IsInitialized() const {
  return true;
}

void TraceConfig_IncidentReportConfig::InternalSwap(TraceConfig_IncidentReportConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_package_, lhs_arena,
      &other->_impl_.destination_package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_class_, lhs_arena,
      &other->_impl_.destination_class_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_IncidentReportConfig, _impl_.skip_dropbox_)
      + sizeof(TraceConfig_IncidentReportConfig::_impl_.skip_dropbox_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_IncidentReportConfig, _impl_.privacy_level_)>(
          reinterpret_cast<char*>(&_impl_.privacy_level_),
          reinterpret_cast<char*>(&other->_impl_.privacy_level_));
}

std::string TraceConfig_IncidentReportConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.IncidentReportConfig";
}


// ===================================================================

class TraceConfig_TraceFilter_StringFilterRule::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TraceFilter_StringFilterRule>()._impl_._has_bits_);
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_regex_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_atrace_payload_starts_with(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_TraceFilter_StringFilterRule::TraceConfig_TraceFilter_StringFilterRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
}
TraceConfig_TraceFilter_StringFilterRule::TraceConfig_TraceFilter_StringFilterRule(const TraceConfig_TraceFilter_StringFilterRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_TraceFilter_StringFilterRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regex_pattern_){}
    , decltype(_impl_.atrace_payload_starts_with_){}
    , decltype(_impl_.policy_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.regex_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regex_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_regex_pattern()) {
    _this->_impl_.regex_pattern_.Set(from._internal_regex_pattern(), 
      _this->GetArenaForAllocation());
  }
  _impl_.atrace_payload_starts_with_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atrace_payload_starts_with_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_atrace_payload_starts_with()) {
    _this->_impl_.atrace_payload_starts_with_.Set(from._internal_atrace_payload_starts_with(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.policy_ = from._impl_.policy_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
}

inline void TraceConfig_TraceFilter_StringFilterRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regex_pattern_){}
    , decltype(_impl_.atrace_payload_starts_with_){}
    , decltype(_impl_.policy_){0}
  };
  _impl_.regex_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.regex_pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atrace_payload_starts_with_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atrace_payload_starts_with_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_TraceFilter_StringFilterRule::~TraceConfig_TraceFilter_StringFilterRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TraceFilter_StringFilterRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regex_pattern_.Destroy();
  _impl_.atrace_payload_starts_with_.Destroy();
}

void TraceConfig_TraceFilter_StringFilterRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TraceFilter_StringFilterRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.regex_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.atrace_payload_starts_with_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.policy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_TraceFilter_StringFilterRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy_IsValid(val))) {
            _internal_set_policy(static_cast<::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string regex_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_regex_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string atrace_payload_starts_with = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_atrace_payload_starts_with();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_TraceFilter_StringFilterRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_policy(), target);
  }

  // optional string regex_pattern = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_regex_pattern(), target);
  }

  // optional string atrace_payload_starts_with = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_atrace_payload_starts_with(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  return target;
}

size_t TraceConfig_TraceFilter_StringFilterRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string regex_pattern = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_regex_pattern());
    }

    // optional string atrace_payload_starts_with = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_atrace_payload_starts_with());
    }

    // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_policy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_TraceFilter_StringFilterRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_TraceFilter_StringFilterRule*>(
      &from));
}

void TraceConfig_TraceFilter_StringFilterRule::MergeFrom(const TraceConfig_TraceFilter_StringFilterRule& from) {
  TraceConfig_TraceFilter_StringFilterRule* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_regex_pattern(from._internal_regex_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_atrace_payload_starts_with(from._internal_atrace_payload_starts_with());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.policy_ = from._impl_.policy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_TraceFilter_StringFilterRule::CopyFrom(const TraceConfig_TraceFilter_StringFilterRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TraceFilter_StringFilterRule::IsInitialized() const {
  return true;
}

void TraceConfig_TraceFilter_StringFilterRule::InternalSwap(TraceConfig_TraceFilter_StringFilterRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.regex_pattern_, lhs_arena,
      &other->_impl_.regex_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.atrace_payload_starts_with_, lhs_arena,
      &other->_impl_.atrace_payload_starts_with_, rhs_arena
  );
  swap(_impl_.policy_, other->_impl_.policy_);
}

std::string TraceConfig_TraceFilter_StringFilterRule::GetTypeName() const {
  return "perfetto.protos.TraceConfig.TraceFilter.StringFilterRule";
}


// ===================================================================

class TraceConfig_TraceFilter_StringFilterChain::_Internal {
 public:
};

TraceConfig_TraceFilter_StringFilterChain::TraceConfig_TraceFilter_StringFilterChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
}
TraceConfig_TraceFilter_StringFilterChain::TraceConfig_TraceFilter_StringFilterChain(const TraceConfig_TraceFilter_StringFilterChain& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_TraceFilter_StringFilterChain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){from._impl_.rules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
}

inline void TraceConfig_TraceFilter_StringFilterChain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TraceConfig_TraceFilter_StringFilterChain::~TraceConfig_TraceFilter_StringFilterChain() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TraceFilter_StringFilterChain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
}

void TraceConfig_TraceFilter_StringFilterChain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TraceFilter_StringFilterChain::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_TraceFilter_StringFilterChain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_TraceFilter_StringFilterChain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  return target;
}

size_t TraceConfig_TraceFilter_StringFilterChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_TraceFilter_StringFilterChain::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_TraceFilter_StringFilterChain*>(
      &from));
}

void TraceConfig_TraceFilter_StringFilterChain::MergeFrom(const TraceConfig_TraceFilter_StringFilterChain& from) {
  TraceConfig_TraceFilter_StringFilterChain* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_TraceFilter_StringFilterChain::CopyFrom(const TraceConfig_TraceFilter_StringFilterChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TraceFilter_StringFilterChain::IsInitialized() const {
  return true;
}

void TraceConfig_TraceFilter_StringFilterChain::InternalSwap(TraceConfig_TraceFilter_StringFilterChain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
}

std::string TraceConfig_TraceFilter_StringFilterChain::GetTypeName() const {
  return "perfetto.protos.TraceConfig.TraceFilter.StringFilterChain";
}


// ===================================================================

class TraceConfig_TraceFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TraceFilter>()._impl_._has_bits_);
  static void set_has_bytecode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytecode_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain& string_filter_chain(const TraceConfig_TraceFilter* msg);
  static void set_has_string_filter_chain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain&
TraceConfig_TraceFilter::_Internal::string_filter_chain(const TraceConfig_TraceFilter* msg) {
  return *msg->_impl_.string_filter_chain_;
}
TraceConfig_TraceFilter::TraceConfig_TraceFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TraceFilter)
}
TraceConfig_TraceFilter::TraceConfig_TraceFilter(const TraceConfig_TraceFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_TraceFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytecode_){}
    , decltype(_impl_.bytecode_v2_){}
    , decltype(_impl_.string_filter_chain_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.bytecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bytecode()) {
    _this->_impl_.bytecode_.Set(from._internal_bytecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bytecode_v2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytecode_v2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bytecode_v2()) {
    _this->_impl_.bytecode_v2_.Set(from._internal_bytecode_v2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_string_filter_chain()) {
    _this->_impl_.string_filter_chain_ = new ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain(*from._impl_.string_filter_chain_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TraceFilter)
}

inline void TraceConfig_TraceFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytecode_){}
    , decltype(_impl_.bytecode_v2_){}
    , decltype(_impl_.string_filter_chain_){nullptr}
  };
  _impl_.bytecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bytecode_v2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytecode_v2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_TraceFilter::~TraceConfig_TraceFilter() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TraceFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TraceFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bytecode_.Destroy();
  _impl_.bytecode_v2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.string_filter_chain_;
}

void TraceConfig_TraceFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TraceFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TraceFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bytecode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bytecode_v2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.string_filter_chain_ != nullptr);
      _impl_.string_filter_chain_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_TraceFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes bytecode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bytecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bytecode_v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bytecode_v2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_filter_chain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_TraceFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TraceFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes bytecode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bytecode(), target);
  }

  // optional bytes bytecode_v2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bytecode_v2(), target);
  }

  // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::string_filter_chain(this),
        _Internal::string_filter_chain(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TraceFilter)
  return target;
}

size_t TraceConfig_TraceFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TraceFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes bytecode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytecode());
    }

    // optional bytes bytecode_v2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytecode_v2());
    }

    // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.string_filter_chain_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_TraceFilter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_TraceFilter*>(
      &from));
}

void TraceConfig_TraceFilter::MergeFrom(const TraceConfig_TraceFilter& from) {
  TraceConfig_TraceFilter* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TraceFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_bytecode(from._internal_bytecode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bytecode_v2(from._internal_bytecode_v2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_string_filter_chain()->::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain::MergeFrom(
          from._internal_string_filter_chain());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_TraceFilter::CopyFrom(const TraceConfig_TraceFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TraceFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TraceFilter::IsInitialized() const {
  return true;
}

void TraceConfig_TraceFilter::InternalSwap(TraceConfig_TraceFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bytecode_, lhs_arena,
      &other->_impl_.bytecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bytecode_v2_, lhs_arena,
      &other->_impl_.bytecode_v2_, rhs_arena
  );
  swap(_impl_.string_filter_chain_, other->_impl_.string_filter_chain_);
}

std::string TraceConfig_TraceFilter::GetTypeName() const {
  return "perfetto.protos.TraceConfig.TraceFilter";
}


// ===================================================================

class TraceConfig_AndroidReportConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_AndroidReportConfig>()._impl_._has_bits_);
  static void set_has_reporter_service_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reporter_service_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skip_report(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_pipe_in_framework_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TraceConfig_AndroidReportConfig::TraceConfig_AndroidReportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.AndroidReportConfig)
}
TraceConfig_AndroidReportConfig::TraceConfig_AndroidReportConfig(const TraceConfig_AndroidReportConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_AndroidReportConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reporter_service_package_){}
    , decltype(_impl_.reporter_service_class_){}
    , decltype(_impl_.skip_report_){}
    , decltype(_impl_.use_pipe_in_framework_for_testing_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.reporter_service_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reporter_service_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reporter_service_package()) {
    _this->_impl_.reporter_service_package_.Set(from._internal_reporter_service_package(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reporter_service_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reporter_service_class_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reporter_service_class()) {
    _this->_impl_.reporter_service_class_.Set(from._internal_reporter_service_class(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_report_, &from._impl_.skip_report_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_pipe_in_framework_for_testing_) -
    reinterpret_cast<char*>(&_impl_.skip_report_)) + sizeof(_impl_.use_pipe_in_framework_for_testing_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.AndroidReportConfig)
}

inline void TraceConfig_AndroidReportConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reporter_service_package_){}
    , decltype(_impl_.reporter_service_class_){}
    , decltype(_impl_.skip_report_){false}
    , decltype(_impl_.use_pipe_in_framework_for_testing_){false}
  };
  _impl_.reporter_service_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reporter_service_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reporter_service_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reporter_service_class_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_AndroidReportConfig::~TraceConfig_AndroidReportConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.AndroidReportConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_AndroidReportConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reporter_service_package_.Destroy();
  _impl_.reporter_service_class_.Destroy();
}

void TraceConfig_AndroidReportConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_AndroidReportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reporter_service_package_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.reporter_service_class_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.skip_report_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_pipe_in_framework_for_testing_) -
      reinterpret_cast<char*>(&_impl_.skip_report_)) + sizeof(_impl_.use_pipe_in_framework_for_testing_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_AndroidReportConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string reporter_service_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reporter_service_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string reporter_service_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reporter_service_class();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_skip_report(&has_bits);
          _impl_.skip_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_pipe_in_framework_for_testing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_pipe_in_framework_for_testing(&has_bits);
          _impl_.use_pipe_in_framework_for_testing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_AndroidReportConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string reporter_service_package = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reporter_service_package(), target);
  }

  // optional string reporter_service_class = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reporter_service_class(), target);
  }

  // optional bool skip_report = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_skip_report(), target);
  }

  // optional bool use_pipe_in_framework_for_testing = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_use_pipe_in_framework_for_testing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.AndroidReportConfig)
  return target;
}

size_t TraceConfig_AndroidReportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string reporter_service_package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reporter_service_package());
    }

    // optional string reporter_service_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reporter_service_class());
    }

    // optional bool skip_report = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_pipe_in_framework_for_testing = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_AndroidReportConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_AndroidReportConfig*>(
      &from));
}

void TraceConfig_AndroidReportConfig::MergeFrom(const TraceConfig_AndroidReportConfig& from) {
  TraceConfig_AndroidReportConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reporter_service_package(from._internal_reporter_service_package());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_reporter_service_class(from._internal_reporter_service_class());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.skip_report_ = from._impl_.skip_report_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.use_pipe_in_framework_for_testing_ = from._impl_.use_pipe_in_framework_for_testing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_AndroidReportConfig::CopyFrom(const TraceConfig_AndroidReportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_AndroidReportConfig::IsInitialized() const {
  return true;
}

void TraceConfig_AndroidReportConfig::InternalSwap(TraceConfig_AndroidReportConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reporter_service_package_, lhs_arena,
      &other->_impl_.reporter_service_package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reporter_service_class_, lhs_arena,
      &other->_impl_.reporter_service_class_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_AndroidReportConfig, _impl_.use_pipe_in_framework_for_testing_)
      + sizeof(TraceConfig_AndroidReportConfig::_impl_.use_pipe_in_framework_for_testing_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_AndroidReportConfig, _impl_.skip_report_)>(
          reinterpret_cast<char*>(&_impl_.skip_report_),
          reinterpret_cast<char*>(&other->_impl_.skip_report_));
}

std::string TraceConfig_AndroidReportConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig.AndroidReportConfig";
}


// ===================================================================

class TraceConfig_CmdTraceStartDelay::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_CmdTraceStartDelay>()._impl_._has_bits_);
  static void set_has_min_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_CmdTraceStartDelay::TraceConfig_CmdTraceStartDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.CmdTraceStartDelay)
}
TraceConfig_CmdTraceStartDelay::TraceConfig_CmdTraceStartDelay(const TraceConfig_CmdTraceStartDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_CmdTraceStartDelay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_delay_ms_){}
    , decltype(_impl_.max_delay_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.min_delay_ms_, &from._impl_.min_delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_delay_ms_) -
    reinterpret_cast<char*>(&_impl_.min_delay_ms_)) + sizeof(_impl_.max_delay_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.CmdTraceStartDelay)
}

inline void TraceConfig_CmdTraceStartDelay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_delay_ms_){0u}
    , decltype(_impl_.max_delay_ms_){0u}
  };
}

TraceConfig_CmdTraceStartDelay::~TraceConfig_CmdTraceStartDelay() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_CmdTraceStartDelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_CmdTraceStartDelay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_CmdTraceStartDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_delay_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_delay_ms_) -
        reinterpret_cast<char*>(&_impl_.min_delay_ms_)) + sizeof(_impl_.max_delay_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_CmdTraceStartDelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 min_delay_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_delay_ms(&has_bits);
          _impl_.min_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_delay_ms(&has_bits);
          _impl_.max_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_CmdTraceStartDelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 min_delay_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_delay_ms(), target);
  }

  // optional uint32 max_delay_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_delay_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  return target;
}

size_t TraceConfig_CmdTraceStartDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min_delay_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_delay_ms());
    }

    // optional uint32 max_delay_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_delay_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_CmdTraceStartDelay::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_CmdTraceStartDelay*>(
      &from));
}

void TraceConfig_CmdTraceStartDelay::MergeFrom(const TraceConfig_CmdTraceStartDelay& from) {
  TraceConfig_CmdTraceStartDelay* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_delay_ms_ = from._impl_.min_delay_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_delay_ms_ = from._impl_.max_delay_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_CmdTraceStartDelay::CopyFrom(const TraceConfig_CmdTraceStartDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_CmdTraceStartDelay::IsInitialized() const {
  return true;
}

void TraceConfig_CmdTraceStartDelay::InternalSwap(TraceConfig_CmdTraceStartDelay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_CmdTraceStartDelay, _impl_.max_delay_ms_)
      + sizeof(TraceConfig_CmdTraceStartDelay::_impl_.max_delay_ms_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_CmdTraceStartDelay, _impl_.min_delay_ms_)>(
          reinterpret_cast<char*>(&_impl_.min_delay_ms_),
          reinterpret_cast<char*>(&other->_impl_.min_delay_ms_));
}

std::string TraceConfig_CmdTraceStartDelay::GetTypeName() const {
  return "perfetto.protos.TraceConfig.CmdTraceStartDelay";
}


// ===================================================================

class TraceConfig_SessionSemaphore::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_SessionSemaphore>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_other_session_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_SessionSemaphore::TraceConfig_SessionSemaphore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.SessionSemaphore)
}
TraceConfig_SessionSemaphore::TraceConfig_SessionSemaphore(const TraceConfig_SessionSemaphore& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig_SessionSemaphore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.max_other_session_count_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.max_other_session_count_ = from._impl_.max_other_session_count_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.SessionSemaphore)
}

inline void TraceConfig_SessionSemaphore::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.max_other_session_count_){uint64_t{0u}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_SessionSemaphore::~TraceConfig_SessionSemaphore() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.SessionSemaphore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_SessionSemaphore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TraceConfig_SessionSemaphore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_SessionSemaphore::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.SessionSemaphore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.max_other_session_count_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig_SessionSemaphore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_other_session_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_other_session_count(&has_bits);
          _impl_.max_other_session_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig_SessionSemaphore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.SessionSemaphore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint64 max_other_session_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_other_session_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.SessionSemaphore)
  return target;
}

size_t TraceConfig_SessionSemaphore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.SessionSemaphore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 max_other_session_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_other_session_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig_SessionSemaphore::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig_SessionSemaphore*>(
      &from));
}

void TraceConfig_SessionSemaphore::MergeFrom(const TraceConfig_SessionSemaphore& from) {
  TraceConfig_SessionSemaphore* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.SessionSemaphore)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_other_session_count_ = from._impl_.max_other_session_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig_SessionSemaphore::CopyFrom(const TraceConfig_SessionSemaphore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.SessionSemaphore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_SessionSemaphore::IsInitialized() const {
  return true;
}

void TraceConfig_SessionSemaphore::InternalSwap(TraceConfig_SessionSemaphore* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.max_other_session_count_, other->_impl_.max_other_session_count_);
}

std::string TraceConfig_SessionSemaphore::GetTypeName() const {
  return "perfetto.protos.TraceConfig.SessionSemaphore";
}


// ===================================================================

class TraceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig>()._impl_._has_bits_);
  static const ::perfetto::protos::TraceConfig_BuiltinDataSource& builtin_data_sources(const TraceConfig* msg);
  static void set_has_builtin_data_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_prefer_suspend_clock_for_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_extra_guardrails(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lockdown_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::TraceConfig_StatsdMetadata& statsd_metadata(const TraceConfig* msg);
  static void set_has_statsd_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_write_into_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_output_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_write_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_file_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::perfetto::protos::TraceConfig_GuardrailOverrides& guardrail_overrides(const TraceConfig* msg);
  static void set_has_guardrail_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deferred_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_flush_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_flush_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_data_source_stop_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_notify_traceur(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_bugreport_score(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_bugreport_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::TraceConfig_TriggerConfig& trigger_config(const TraceConfig* msg);
  static void set_has_trigger_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::TraceConfig_IncrementalStateConfig& incremental_state_config(const TraceConfig* msg);
  static void set_has_incremental_state_config(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_allow_user_build_tracing(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_unique_session_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compression_type(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::perfetto::protos::TraceConfig_IncidentReportConfig& incident_report_config(const TraceConfig* msg);
  static void set_has_incident_report_config(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_statsd_logging(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_trace_uuid_msb(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_trace_uuid_lsb(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::perfetto::protos::TraceConfig_TraceFilter& trace_filter(const TraceConfig* msg);
  static void set_has_trace_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::TraceConfig_AndroidReportConfig& android_report_config(const TraceConfig* msg);
  static void set_has_android_report_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::TraceConfig_CmdTraceStartDelay& cmd_trace_start_delay(const TraceConfig* msg);
  static void set_has_cmd_trace_start_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::perfetto::protos::TraceConfig_BuiltinDataSource&
TraceConfig::_Internal::builtin_data_sources(const TraceConfig* msg) {
  return *msg->_impl_.builtin_data_sources_;
}
const ::perfetto::protos::TraceConfig_StatsdMetadata&
TraceConfig::_Internal::statsd_metadata(const TraceConfig* msg) {
  return *msg->_impl_.statsd_metadata_;
}
const ::perfetto::protos::TraceConfig_GuardrailOverrides&
TraceConfig::_Internal::guardrail_overrides(const TraceConfig* msg) {
  return *msg->_impl_.guardrail_overrides_;
}
const ::perfetto::protos::TraceConfig_TriggerConfig&
TraceConfig::_Internal::trigger_config(const TraceConfig* msg) {
  return *msg->_impl_.trigger_config_;
}
const ::perfetto::protos::TraceConfig_IncrementalStateConfig&
TraceConfig::_Internal::incremental_state_config(const TraceConfig* msg) {
  return *msg->_impl_.incremental_state_config_;
}
const ::perfetto::protos::TraceConfig_IncidentReportConfig&
TraceConfig::_Internal::incident_report_config(const TraceConfig* msg) {
  return *msg->_impl_.incident_report_config_;
}
const ::perfetto::protos::TraceConfig_TraceFilter&
TraceConfig::_Internal::trace_filter(const TraceConfig* msg) {
  return *msg->_impl_.trace_filter_;
}
const ::perfetto::protos::TraceConfig_AndroidReportConfig&
TraceConfig::_Internal::android_report_config(const TraceConfig* msg) {
  return *msg->_impl_.android_report_config_;
}
const ::perfetto::protos::TraceConfig_CmdTraceStartDelay&
TraceConfig::_Internal::cmd_trace_start_delay(const TraceConfig* msg) {
  return *msg->_impl_.cmd_trace_start_delay_;
}
TraceConfig::TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TraceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffers_){from._impl_.buffers_}
    , decltype(_impl_.data_sources_){from._impl_.data_sources_}
    , decltype(_impl_.producers_){from._impl_.producers_}
    , decltype(_impl_.activate_triggers_){from._impl_.activate_triggers_}
    , decltype(_impl_.session_semaphores_){from._impl_.session_semaphores_}
    , decltype(_impl_.unique_session_name_){}
    , decltype(_impl_.output_path_){}
    , decltype(_impl_.bugreport_filename_){}
    , decltype(_impl_.statsd_metadata_){nullptr}
    , decltype(_impl_.guardrail_overrides_){nullptr}
    , decltype(_impl_.trigger_config_){nullptr}
    , decltype(_impl_.builtin_data_sources_){nullptr}
    , decltype(_impl_.incremental_state_config_){nullptr}
    , decltype(_impl_.incident_report_config_){nullptr}
    , decltype(_impl_.trace_filter_){nullptr}
    , decltype(_impl_.android_report_config_){nullptr}
    , decltype(_impl_.cmd_trace_start_delay_){nullptr}
    , decltype(_impl_.duration_ms_){}
    , decltype(_impl_.lockdown_mode_){}
    , decltype(_impl_.max_file_size_bytes_){}
    , decltype(_impl_.file_write_period_ms_){}
    , decltype(_impl_.flush_period_ms_){}
    , decltype(_impl_.flush_timeout_ms_){}
    , decltype(_impl_.prefer_suspend_clock_for_duration_){}
    , decltype(_impl_.enable_extra_guardrails_){}
    , decltype(_impl_.write_into_file_){}
    , decltype(_impl_.deferred_start_){}
    , decltype(_impl_.notify_traceur_){}
    , decltype(_impl_.allow_user_build_tracing_){}
    , decltype(_impl_.data_source_stop_timeout_ms_){}
    , decltype(_impl_.trace_uuid_msb_){}
    , decltype(_impl_.compression_type_){}
    , decltype(_impl_.bugreport_score_){}
    , decltype(_impl_.trace_uuid_lsb_){}
    , decltype(_impl_.statsd_logging_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.unique_session_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unique_session_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_session_name()) {
    _this->_impl_.unique_session_name_.Set(from._internal_unique_session_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_output_path()) {
    _this->_impl_.output_path_.Set(from._internal_output_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bugreport_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bugreport_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bugreport_filename()) {
    _this->_impl_.bugreport_filename_.Set(from._internal_bugreport_filename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_statsd_metadata()) {
    _this->_impl_.statsd_metadata_ = new ::perfetto::protos::TraceConfig_StatsdMetadata(*from._impl_.statsd_metadata_);
  }
  if (from._internal_has_guardrail_overrides()) {
    _this->_impl_.guardrail_overrides_ = new ::perfetto::protos::TraceConfig_GuardrailOverrides(*from._impl_.guardrail_overrides_);
  }
  if (from._internal_has_trigger_config()) {
    _this->_impl_.trigger_config_ = new ::perfetto::protos::TraceConfig_TriggerConfig(*from._impl_.trigger_config_);
  }
  if (from._internal_has_builtin_data_sources()) {
    _this->_impl_.builtin_data_sources_ = new ::perfetto::protos::TraceConfig_BuiltinDataSource(*from._impl_.builtin_data_sources_);
  }
  if (from._internal_has_incremental_state_config()) {
    _this->_impl_.incremental_state_config_ = new ::perfetto::protos::TraceConfig_IncrementalStateConfig(*from._impl_.incremental_state_config_);
  }
  if (from._internal_has_incident_report_config()) {
    _this->_impl_.incident_report_config_ = new ::perfetto::protos::TraceConfig_IncidentReportConfig(*from._impl_.incident_report_config_);
  }
  if (from._internal_has_trace_filter()) {
    _this->_impl_.trace_filter_ = new ::perfetto::protos::TraceConfig_TraceFilter(*from._impl_.trace_filter_);
  }
  if (from._internal_has_android_report_config()) {
    _this->_impl_.android_report_config_ = new ::perfetto::protos::TraceConfig_AndroidReportConfig(*from._impl_.android_report_config_);
  }
  if (from._internal_has_cmd_trace_start_delay()) {
    _this->_impl_.cmd_trace_start_delay_ = new ::perfetto::protos::TraceConfig_CmdTraceStartDelay(*from._impl_.cmd_trace_start_delay_);
  }
  ::memcpy(&_impl_.duration_ms_, &from._impl_.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.statsd_logging_) -
    reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.statsd_logging_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig)
}

inline void TraceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffers_){arena}
    , decltype(_impl_.data_sources_){arena}
    , decltype(_impl_.producers_){arena}
    , decltype(_impl_.activate_triggers_){arena}
    , decltype(_impl_.session_semaphores_){arena}
    , decltype(_impl_.unique_session_name_){}
    , decltype(_impl_.output_path_){}
    , decltype(_impl_.bugreport_filename_){}
    , decltype(_impl_.statsd_metadata_){nullptr}
    , decltype(_impl_.guardrail_overrides_){nullptr}
    , decltype(_impl_.trigger_config_){nullptr}
    , decltype(_impl_.builtin_data_sources_){nullptr}
    , decltype(_impl_.incremental_state_config_){nullptr}
    , decltype(_impl_.incident_report_config_){nullptr}
    , decltype(_impl_.trace_filter_){nullptr}
    , decltype(_impl_.android_report_config_){nullptr}
    , decltype(_impl_.cmd_trace_start_delay_){nullptr}
    , decltype(_impl_.duration_ms_){0u}
    , decltype(_impl_.lockdown_mode_){0}
    , decltype(_impl_.max_file_size_bytes_){uint64_t{0u}}
    , decltype(_impl_.file_write_period_ms_){0u}
    , decltype(_impl_.flush_period_ms_){0u}
    , decltype(_impl_.flush_timeout_ms_){0u}
    , decltype(_impl_.prefer_suspend_clock_for_duration_){false}
    , decltype(_impl_.enable_extra_guardrails_){false}
    , decltype(_impl_.write_into_file_){false}
    , decltype(_impl_.deferred_start_){false}
    , decltype(_impl_.notify_traceur_){false}
    , decltype(_impl_.allow_user_build_tracing_){false}
    , decltype(_impl_.data_source_stop_timeout_ms_){0u}
    , decltype(_impl_.trace_uuid_msb_){int64_t{0}}
    , decltype(_impl_.compression_type_){0}
    , decltype(_impl_.bugreport_score_){0}
    , decltype(_impl_.trace_uuid_lsb_){int64_t{0}}
    , decltype(_impl_.statsd_logging_){0}
  };
  _impl_.unique_session_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unique_session_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bugreport_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bugreport_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buffers_.~RepeatedPtrField();
  _impl_.data_sources_.~RepeatedPtrField();
  _impl_.producers_.~RepeatedPtrField();
  _impl_.activate_triggers_.~RepeatedPtrField();
  _impl_.session_semaphores_.~RepeatedPtrField();
  _impl_.unique_session_name_.Destroy();
  _impl_.output_path_.Destroy();
  _impl_.bugreport_filename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.statsd_metadata_;
  if (this != internal_default_instance()) delete _impl_.guardrail_overrides_;
  if (this != internal_default_instance()) delete _impl_.trigger_config_;
  if (this != internal_default_instance()) delete _impl_.builtin_data_sources_;
  if (this != internal_default_instance()) delete _impl_.incremental_state_config_;
  if (this != internal_default_instance()) delete _impl_.incident_report_config_;
  if (this != internal_default_instance()) delete _impl_.trace_filter_;
  if (this != internal_default_instance()) delete _impl_.android_report_config_;
  if (this != internal_default_instance()) delete _impl_.cmd_trace_start_delay_;
}

void TraceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buffers_.Clear();
  _impl_.data_sources_.Clear();
  _impl_.producers_.Clear();
  _impl_.activate_triggers_.Clear();
  _impl_.session_semaphores_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.unique_session_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.output_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.bugreport_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.statsd_metadata_ != nullptr);
      _impl_.statsd_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.guardrail_overrides_ != nullptr);
      _impl_.guardrail_overrides_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.trigger_config_ != nullptr);
      _impl_.trigger_config_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.builtin_data_sources_ != nullptr);
      _impl_.builtin_data_sources_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.incremental_state_config_ != nullptr);
      _impl_.incremental_state_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.incident_report_config_ != nullptr);
      _impl_.incident_report_config_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.trace_filter_ != nullptr);
      _impl_.trace_filter_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.android_report_config_ != nullptr);
      _impl_.android_report_config_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.cmd_trace_start_delay_ != nullptr);
      _impl_.cmd_trace_start_delay_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.file_write_period_ms_) -
        reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.file_write_period_ms_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.flush_period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.allow_user_build_tracing_) -
        reinterpret_cast<char*>(&_impl_.flush_period_ms_)) + sizeof(_impl_.allow_user_build_tracing_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&_impl_.data_source_stop_timeout_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.statsd_logging_) -
        reinterpret_cast<char*>(&_impl_.data_source_stop_timeout_ms_)) + sizeof(_impl_.statsd_logging_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TraceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          _impl_.duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_extra_guardrails = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_extra_guardrails(&has_bits);
          _impl_.enable_extra_guardrails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_LockdownModeOperation_IsValid(val))) {
            _internal_set_lockdown_mode(static_cast<::perfetto::protos::TraceConfig_LockdownModeOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_producers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_statsd_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool write_into_file = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_write_into_file(&has_bits);
          _impl_.write_into_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_write_period_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_file_write_period_ms(&has_bits);
          _impl_.file_write_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_file_size_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_max_file_size_bytes(&has_bits);
          _impl_.max_file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_guardrail_overrides(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deferred_start = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_deferred_start(&has_bits);
          _impl_.deferred_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flush_period_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_flush_period_ms(&has_bits);
          _impl_.flush_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flush_timeout_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_flush_timeout_ms(&has_bits);
          _impl_.flush_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notify_traceur = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_notify_traceur(&has_bits);
          _impl_.notify_traceur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string activate_triggers = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_activate_triggers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_user_build_tracing = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_allow_user_build_tracing(&has_bits);
          _impl_.allow_user_build_tracing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_builtin_data_sources(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_incremental_state_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_session_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_unique_session_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_source_stop_timeout_ms = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_data_source_stop_timeout_ms(&has_bits);
          _impl_.data_source_stop_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_CompressionType_IsValid(val))) {
            _internal_set_compression_type(static_cast<::perfetto::protos::TraceConfig_CompressionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_incident_report_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 trace_uuid_msb = 27 [deprecated = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_trace_uuid_msb(&has_bits);
          _impl_.trace_uuid_msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 trace_uuid_lsb = 28 [deprecated = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_trace_uuid_lsb(&has_bits);
          _impl_.trace_uuid_lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string output_path = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_output_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bugreport_score = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_bugreport_score(&has_bits);
          _impl_.bugreport_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_StatsdLogging_IsValid(val))) {
            _internal_set_statsd_logging(static_cast<::perfetto::protos::TraceConfig_StatsdLogging>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_report_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_trace_start_delay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prefer_suspend_clock_for_duration = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_prefer_suspend_clock_for_duration(&has_bits);
          _impl_.prefer_suspend_clock_for_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bugreport_filename = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bugreport_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TraceConfig.SessionSemaphore session_semaphores = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_session_semaphores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffers_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 duration_ms = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration_ms(), target);
  }

  // optional bool enable_extra_guardrails = 4;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_extra_guardrails(), target);
  }

  // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_lockdown_mode(), target);
  }

  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_producers_size()); i < n; i++) {
    const auto& repfield = this->_internal_producers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::statsd_metadata(this),
        _Internal::statsd_metadata(this).GetCachedSize(), target, stream);
  }

  // optional bool write_into_file = 8;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_write_into_file(), target);
  }

  // optional uint32 file_write_period_ms = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_file_write_period_ms(), target);
  }

  // optional uint64 max_file_size_bytes = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_max_file_size_bytes(), target);
  }

  // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::guardrail_overrides(this),
        _Internal::guardrail_overrides(this).GetCachedSize(), target, stream);
  }

  // optional bool deferred_start = 12;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_deferred_start(), target);
  }

  // optional uint32 flush_period_ms = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_flush_period_ms(), target);
  }

  // optional uint32 flush_timeout_ms = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_flush_timeout_ms(), target);
  }

  // optional bool notify_traceur = 16;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_notify_traceur(), target);
  }

  // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::trigger_config(this),
        _Internal::trigger_config(this).GetCachedSize(), target, stream);
  }

  // repeated string activate_triggers = 18;
  for (int i = 0, n = this->_internal_activate_triggers_size(); i < n; i++) {
    const auto& s = this->_internal_activate_triggers(i);
    target = stream->WriteString(18, s, target);
  }

  // optional bool allow_user_build_tracing = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_allow_user_build_tracing(), target);
  }

  // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::builtin_data_sources(this),
        _Internal::builtin_data_sources(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::incremental_state_config(this),
        _Internal::incremental_state_config(this).GetCachedSize(), target, stream);
  }

  // optional string unique_session_name = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_unique_session_name(), target);
  }

  // optional uint32 data_source_stop_timeout_ms = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_data_source_stop_timeout_ms(), target);
  }

  // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_compression_type(), target);
  }

  // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::incident_report_config(this),
        _Internal::incident_report_config(this).GetCachedSize(), target, stream);
  }

  // optional int64 trace_uuid_msb = 27 [deprecated = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_trace_uuid_msb(), target);
  }

  // optional int64 trace_uuid_lsb = 28 [deprecated = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_trace_uuid_lsb(), target);
  }

  // optional string output_path = 29;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_output_path(), target);
  }

  // optional int32 bugreport_score = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_bugreport_score(), target);
  }

  // optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_statsd_logging(), target);
  }

  // optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::trace_filter(this),
        _Internal::trace_filter(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::android_report_config(this),
        _Internal::android_report_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::cmd_trace_start_delay(this),
        _Internal::cmd_trace_start_delay(this).GetCachedSize(), target, stream);
  }

  // optional bool prefer_suspend_clock_for_duration = 36;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_prefer_suspend_clock_for_duration(), target);
  }

  // optional string bugreport_filename = 38;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_bugreport_filename(), target);
  }

  // repeated .perfetto.protos.TraceConfig.SessionSemaphore session_semaphores = 39;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_session_semaphores_size()); i < n; i++) {
    const auto& repfield = this->_internal_session_semaphores(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(39, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig)
  return target;
}

size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  total_size += 1UL * this->_internal_buffers_size();
  for (const auto& msg : this->_impl_.buffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->_impl_.data_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  total_size += 1UL * this->_internal_producers_size();
  for (const auto& msg : this->_impl_.producers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string activate_triggers = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.activate_triggers_.size());
  for (int i = 0, n = _impl_.activate_triggers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.activate_triggers_.Get(i));
  }

  // repeated .perfetto.protos.TraceConfig.SessionSemaphore session_semaphores = 39;
  total_size += 2UL * this->_internal_session_semaphores_size();
  for (const auto& msg : this->_impl_.session_semaphores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_session_name = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_session_name());
    }

    // optional string output_path = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_path());
    }

    // optional string bugreport_filename = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bugreport_filename());
    }

    // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.statsd_metadata_);
    }

    // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.guardrail_overrides_);
    }

    // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trigger_config_);
    }

    // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.builtin_data_sources_);
    }

    // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.incremental_state_config_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.incident_report_config_);
    }

    // optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trace_filter_);
    }

    // optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.android_report_config_);
    }

    // optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_trace_start_delay_);
    }

    // optional uint32 duration_ms = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_ms());
    }

    // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lockdown_mode());
    }

    // optional uint64 max_file_size_bytes = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_file_size_bytes());
    }

    // optional uint32 file_write_period_ms = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_file_write_period_ms());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 flush_period_ms = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flush_period_ms());
    }

    // optional uint32 flush_timeout_ms = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flush_timeout_ms());
    }

    // optional bool prefer_suspend_clock_for_duration = 36;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_extra_guardrails = 4;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool write_into_file = 8;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool deferred_start = 12;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool notify_traceur = 16;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool allow_user_build_tracing = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional uint32 data_source_stop_timeout_ms = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_data_source_stop_timeout_ms());
    }

    // optional int64 trace_uuid_msb = 27 [deprecated = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_trace_uuid_msb());
    }

    // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_compression_type());
    }

    // optional int32 bugreport_score = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bugreport_score());
    }

    // optional int64 trace_uuid_lsb = 28 [deprecated = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_trace_uuid_lsb());
    }

    // optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_statsd_logging());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TraceConfig*>(
      &from));
}

void TraceConfig::MergeFrom(const TraceConfig& from) {
  TraceConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buffers_.MergeFrom(from._impl_.buffers_);
  _this->_impl_.data_sources_.MergeFrom(from._impl_.data_sources_);
  _this->_impl_.producers_.MergeFrom(from._impl_.producers_);
  _this->_impl_.activate_triggers_.MergeFrom(from._impl_.activate_triggers_);
  _this->_impl_.session_semaphores_.MergeFrom(from._impl_.session_semaphores_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unique_session_name(from._internal_unique_session_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_output_path(from._internal_output_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_bugreport_filename(from._internal_bugreport_filename());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_statsd_metadata()->::perfetto::protos::TraceConfig_StatsdMetadata::MergeFrom(
          from._internal_statsd_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_guardrail_overrides()->::perfetto::protos::TraceConfig_GuardrailOverrides::MergeFrom(
          from._internal_guardrail_overrides());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_trigger_config()->::perfetto::protos::TraceConfig_TriggerConfig::MergeFrom(
          from._internal_trigger_config());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_builtin_data_sources()->::perfetto::protos::TraceConfig_BuiltinDataSource::MergeFrom(
          from._internal_builtin_data_sources());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_incremental_state_config()->::perfetto::protos::TraceConfig_IncrementalStateConfig::MergeFrom(
          from._internal_incremental_state_config());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_incident_report_config()->::perfetto::protos::TraceConfig_IncidentReportConfig::MergeFrom(
          from._internal_incident_report_config());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_trace_filter()->::perfetto::protos::TraceConfig_TraceFilter::MergeFrom(
          from._internal_trace_filter());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_android_report_config()->::perfetto::protos::TraceConfig_AndroidReportConfig::MergeFrom(
          from._internal_android_report_config());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_cmd_trace_start_delay()->::perfetto::protos::TraceConfig_CmdTraceStartDelay::MergeFrom(
          from._internal_cmd_trace_start_delay());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.duration_ms_ = from._impl_.duration_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.lockdown_mode_ = from._impl_.lockdown_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.max_file_size_bytes_ = from._impl_.max_file_size_bytes_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.file_write_period_ms_ = from._impl_.file_write_period_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.flush_period_ms_ = from._impl_.flush_period_ms_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.flush_timeout_ms_ = from._impl_.flush_timeout_ms_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.prefer_suspend_clock_for_duration_ = from._impl_.prefer_suspend_clock_for_duration_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.enable_extra_guardrails_ = from._impl_.enable_extra_guardrails_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.write_into_file_ = from._impl_.write_into_file_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.deferred_start_ = from._impl_.deferred_start_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.notify_traceur_ = from._impl_.notify_traceur_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.allow_user_build_tracing_ = from._impl_.allow_user_build_tracing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.data_source_stop_timeout_ms_ = from._impl_.data_source_stop_timeout_ms_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.trace_uuid_msb_ = from._impl_.trace_uuid_msb_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.compression_type_ = from._impl_.compression_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.bugreport_score_ = from._impl_.bugreport_score_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.trace_uuid_lsb_ = from._impl_.trace_uuid_lsb_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.statsd_logging_ = from._impl_.statsd_logging_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buffers_.InternalSwap(&other->_impl_.buffers_);
  _impl_.data_sources_.InternalSwap(&other->_impl_.data_sources_);
  _impl_.producers_.InternalSwap(&other->_impl_.producers_);
  _impl_.activate_triggers_.InternalSwap(&other->_impl_.activate_triggers_);
  _impl_.session_semaphores_.InternalSwap(&other->_impl_.session_semaphores_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unique_session_name_, lhs_arena,
      &other->_impl_.unique_session_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_path_, lhs_arena,
      &other->_impl_.output_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bugreport_filename_, lhs_arena,
      &other->_impl_.bugreport_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig, _impl_.statsd_logging_)
      + sizeof(TraceConfig::_impl_.statsd_logging_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig, _impl_.statsd_metadata_)>(
          reinterpret_cast<char*>(&_impl_.statsd_metadata_),
          reinterpret_cast<char*>(&other->_impl_.statsd_metadata_));
}

std::string TraceConfig::GetTypeName() const {
  return "perfetto.protos.TraceConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_BufferConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_BufferConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_BufferConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_DataSource*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_DataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_BuiltinDataSource*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_BuiltinDataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_BuiltinDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_ProducerConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_ProducerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_ProducerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_StatsdMetadata*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_StatsdMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_StatsdMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_GuardrailOverrides*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_GuardrailOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_GuardrailOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TriggerConfig_Trigger*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TriggerConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TriggerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TriggerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_IncrementalStateConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_IncrementalStateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_IncrementalStateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_IncidentReportConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_IncidentReportConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_IncidentReportConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TraceFilter*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TraceFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TraceFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_AndroidReportConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_AndroidReportConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_AndroidReportConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_CmdTraceStartDelay*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_CmdTraceStartDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_CmdTraceStartDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_SessionSemaphore*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_SessionSemaphore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_SessionSemaphore >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
