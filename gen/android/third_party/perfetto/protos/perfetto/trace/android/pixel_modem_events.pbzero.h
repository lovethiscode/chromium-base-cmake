// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PIXEL_MODEM_EVENTS_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PIXEL_MODEM_EVENTS_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"


namespace perfetto {
namespace protos {
namespace pbzero {

class PixelModemTokenDatabase_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  PixelModemTokenDatabase_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PixelModemTokenDatabase_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PixelModemTokenDatabase_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_database() const { return at<1>().valid(); }
  ::protozero::ConstBytes database() const { return at<1>().as_bytes(); }
};

class PixelModemTokenDatabase : public ::protozero::Message {
 public:
  using Decoder = PixelModemTokenDatabase_Decoder;
  enum : int32_t {
    kDatabaseFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.PixelModemTokenDatabase"; }


  using FieldMetadata_Database =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBytes,
      std::string,
      PixelModemTokenDatabase>;

  static constexpr FieldMetadata_Database kDatabase{};
  void set_database(const uint8_t* data, size_t size) {
    AppendBytes(FieldMetadata_Database::kFieldId, data, size);
  }
  void set_database(::protozero::ConstBytes bytes) {
    AppendBytes(FieldMetadata_Database::kFieldId, bytes.data, bytes.size);
  }
  void set_database(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Database::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBytes>
        ::Append(*this, field_id, value);
  }
};

class PixelModemEvents_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  PixelModemEvents_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PixelModemEvents_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PixelModemEvents_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_events() const { return at<1>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> events() const { return GetRepeated<::protozero::ConstBytes>(1); }
  bool has_event_time_nanos() const { return at<2>().valid(); }
  ::protozero::RepeatedFieldIterator<uint64_t> event_time_nanos() const { return GetRepeated<uint64_t>(2); }
};

class PixelModemEvents : public ::protozero::Message {
 public:
  using Decoder = PixelModemEvents_Decoder;
  enum : int32_t {
    kEventsFieldNumber = 1,
    kEventTimeNanosFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.PixelModemEvents"; }


  using FieldMetadata_Events =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kBytes,
      std::string,
      PixelModemEvents>;

  static constexpr FieldMetadata_Events kEvents{};
  void add_events(const uint8_t* data, size_t size) {
    AppendBytes(FieldMetadata_Events::kFieldId, data, size);
  }
  void add_events(::protozero::ConstBytes bytes) {
    AppendBytes(FieldMetadata_Events::kFieldId, bytes.data, bytes.size);
  }
  void add_events(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Events::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBytes>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_EventTimeNanos =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      PixelModemEvents>;

  static constexpr FieldMetadata_EventTimeNanos kEventTimeNanos{};
  void add_event_time_nanos(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_EventTimeNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
