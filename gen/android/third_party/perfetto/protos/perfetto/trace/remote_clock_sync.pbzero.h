// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_REMOTE_CLOCK_SYNC_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_REMOTE_CLOCK_SYNC_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class ClockSnapshot;
class RemoteClockSync_SyncedClocks;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class RemoteClockSync_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  RemoteClockSync_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RemoteClockSync_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RemoteClockSync_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_synced_clocks() const { return at<1>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> synced_clocks() const { return GetRepeated<::protozero::ConstBytes>(1); }
};

class RemoteClockSync : public ::protozero::Message {
 public:
  using Decoder = RemoteClockSync_Decoder;
  enum : int32_t {
    kSyncedClocksFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RemoteClockSync"; }

  using SyncedClocks = ::perfetto::protos::pbzero::RemoteClockSync_SyncedClocks;

  using FieldMetadata_SyncedClocks =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RemoteClockSync_SyncedClocks,
      RemoteClockSync>;

  static constexpr FieldMetadata_SyncedClocks kSyncedClocks{};
  template <typename T = RemoteClockSync_SyncedClocks> T* add_synced_clocks() {
    return BeginNestedMessage<T>(1);
  }

};

class RemoteClockSync_SyncedClocks_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  RemoteClockSync_SyncedClocks_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RemoteClockSync_SyncedClocks_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RemoteClockSync_SyncedClocks_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_client_clocks() const { return at<2>().valid(); }
  ::protozero::ConstBytes client_clocks() const { return at<2>().as_bytes(); }
  bool has_host_clocks() const { return at<3>().valid(); }
  ::protozero::ConstBytes host_clocks() const { return at<3>().as_bytes(); }
};

class RemoteClockSync_SyncedClocks : public ::protozero::Message {
 public:
  using Decoder = RemoteClockSync_SyncedClocks_Decoder;
  enum : int32_t {
    kClientClocksFieldNumber = 2,
    kHostClocksFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RemoteClockSync.SyncedClocks"; }


  using FieldMetadata_ClientClocks =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ClockSnapshot,
      RemoteClockSync_SyncedClocks>;

  static constexpr FieldMetadata_ClientClocks kClientClocks{};
  template <typename T = ClockSnapshot> T* set_client_clocks() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_HostClocks =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ClockSnapshot,
      RemoteClockSync_SyncedClocks>;

  static constexpr FieldMetadata_HostClocks kHostClocks{};
  template <typename T = ClockSnapshot> T* set_host_clocks() {
    return BeginNestedMessage<T>(3);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
