// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_CONFIG_ETW_ETW_CONFIG_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_CONFIG_ETW_ETW_CONFIG_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
namespace perfetto_pbzero_enum_EtwConfig {
enum KernelFlag : int32_t;
}  // namespace perfetto_pbzero_enum_EtwConfig
using EtwConfig_KernelFlag = perfetto_pbzero_enum_EtwConfig::KernelFlag;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

namespace perfetto_pbzero_enum_EtwConfig {
enum KernelFlag : int32_t {
  CSWITCH = 0,
  DISPATCHER = 1,
};
} // namespace perfetto_pbzero_enum_EtwConfig
using EtwConfig_KernelFlag = perfetto_pbzero_enum_EtwConfig::KernelFlag;


constexpr EtwConfig_KernelFlag EtwConfig_KernelFlag_MIN = EtwConfig_KernelFlag::CSWITCH;
constexpr EtwConfig_KernelFlag EtwConfig_KernelFlag_MAX = EtwConfig_KernelFlag::DISPATCHER;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* EtwConfig_KernelFlag_Name(::perfetto::protos::pbzero::EtwConfig_KernelFlag value) {
  switch (value) {
  case ::perfetto::protos::pbzero::EtwConfig_KernelFlag::CSWITCH:
    return "CSWITCH";

  case ::perfetto::protos::pbzero::EtwConfig_KernelFlag::DISPATCHER:
    return "DISPATCHER";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

class EtwConfig_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  EtwConfig_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit EtwConfig_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit EtwConfig_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_kernel_flags() const { return at<1>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> kernel_flags() const { return GetRepeated<int32_t>(1); }
};

class EtwConfig : public ::protozero::Message {
 public:
  using Decoder = EtwConfig_Decoder;
  enum : int32_t {
    kKernelFlagsFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.EtwConfig"; }


  using KernelFlag = ::perfetto::protos::pbzero::EtwConfig_KernelFlag;
  static inline const char* KernelFlag_Name(KernelFlag value) {
    return ::perfetto::protos::pbzero::EtwConfig_KernelFlag_Name(value);
  }
  static inline const KernelFlag CSWITCH = KernelFlag::CSWITCH;
  static inline const KernelFlag DISPATCHER = KernelFlag::DISPATCHER;

  using FieldMetadata_KernelFlags =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      EtwConfig_KernelFlag,
      EtwConfig>;

  static constexpr FieldMetadata_KernelFlags kKernelFlags{};
  void add_kernel_flags(EtwConfig_KernelFlag value) {
    static constexpr uint32_t field_id = FieldMetadata_KernelFlags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
