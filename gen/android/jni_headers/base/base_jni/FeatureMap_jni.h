// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     org.chromium.base.FeatureMap

#ifndef org_chromium_base_FeatureMap_JNI
#define org_chromium_base_FeatureMap_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "../../../../../../third_party/jni_zero/jni_zero_internal.h"
namespace base {
namespace android {
// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static std::string JNI_FeatureMap_GetFieldTrialParamByFeature(
    JNIEnv* env,
    jlong featureMap,
    std::string& featureName,
    std::string& paramName);

JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1FeatureMap_1getFieldTrialParamByFeature(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jobject featureName,
    jobject paramName) {
  std::string featureName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, featureName));
  std::string paramName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, paramName));
  auto _ret = JNI_FeatureMap_GetFieldTrialParamByFeature(
      env,
      featureMap,
      featureName_converted,
      paramName_converted);
  jobject converted_ret = jni_zero::ToJniType(env, _ret).Release();
  return converted_ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jboolean JNI_FeatureMap_GetFieldTrialParamByFeatureAsBoolean(
    JNIEnv* env,
    jlong featureMap,
    std::string& featureName,
    std::string& paramName,
    jboolean defaultValue);

JNI_POSSIBLE_BOUNDARY_EXPORT jboolean Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1FeatureMap_1getFieldTrialParamByFeatureAsBoolean(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jobject featureName,
    jobject paramName,
    jboolean defaultValue) {
  std::string featureName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, featureName));
  std::string paramName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, paramName));
  auto _ret = JNI_FeatureMap_GetFieldTrialParamByFeatureAsBoolean(
      env,
      featureMap,
      featureName_converted,
      paramName_converted,
      defaultValue);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jdouble JNI_FeatureMap_GetFieldTrialParamByFeatureAsDouble(
    JNIEnv* env,
    jlong featureMap,
    std::string& featureName,
    std::string& paramName,
    jdouble defaultValue);

JNI_POSSIBLE_BOUNDARY_EXPORT jdouble Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1FeatureMap_1getFieldTrialParamByFeatureAsDouble(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jobject featureName,
    jobject paramName,
    jdouble defaultValue) {
  std::string featureName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, featureName));
  std::string paramName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, paramName));
  auto _ret = JNI_FeatureMap_GetFieldTrialParamByFeatureAsDouble(
      env,
      featureMap,
      featureName_converted,
      paramName_converted,
      defaultValue);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jint JNI_FeatureMap_GetFieldTrialParamByFeatureAsInt(
    JNIEnv* env,
    jlong featureMap,
    std::string& featureName,
    std::string& paramName,
    jint defaultValue);

JNI_POSSIBLE_BOUNDARY_EXPORT jint Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1FeatureMap_1getFieldTrialParamByFeatureAsInt(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jobject featureName,
    jobject paramName,
    jint defaultValue) {
  std::string featureName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, featureName));
  std::string paramName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, paramName));
  auto _ret = JNI_FeatureMap_GetFieldTrialParamByFeatureAsInt(
      env,
      featureMap,
      featureName_converted,
      paramName_converted,
      defaultValue);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static std::vector<std::string> JNI_FeatureMap_GetFlattedFieldTrialParamsForFeature(
    JNIEnv* env,
    jlong featureMap,
    std::string& featureName);

JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1FeatureMap_1getFlattedFieldTrialParamsForFeature(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jobject featureName) {
  std::string featureName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, featureName));
  auto _ret = JNI_FeatureMap_GetFlattedFieldTrialParamsForFeature(
      env,
      featureMap,
      featureName_converted);
  jobject converted_ret = jni_zero::ToJniArray(
      env,
      _ret,
      jni_zero::g_string_class).Release();
  return converted_ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jboolean JNI_FeatureMap_IsEnabled(
    JNIEnv* env,
    jlong featureMap,
    std::string& featureName);

JNI_POSSIBLE_BOUNDARY_EXPORT jboolean Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1FeatureMap_1isEnabled(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jobject featureName) {
  std::string featureName_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, featureName));
  auto _ret = JNI_FeatureMap_IsEnabled(env, featureMap, featureName_converted);
  return _ret;
}


}  // namespace android
}  // namespace base
#endif  // org_chromium_base_FeatureMap_JNI
