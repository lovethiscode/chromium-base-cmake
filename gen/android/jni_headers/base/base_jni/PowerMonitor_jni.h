// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     org.chromium.base.PowerMonitor

#ifndef org_chromium_base_PowerMonitor_JNI
#define org_chromium_base_PowerMonitor_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "../../../../../../third_party/jni_zero/jni_zero_internal.h"
// Class Accessors.
#ifndef org_chromium_base_PowerMonitor_clazz_defined
#define org_chromium_base_PowerMonitor_clazz_defined
inline jclass org_chromium_base_PowerMonitor_clazz(JNIEnv* env) {
  static const char kClassName[] = "org/chromium/base/PowerMonitor";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif

namespace base {
namespace android {
// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static void JNI_PowerMonitor_OnBatteryChargingChanged(JNIEnv* env);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1PowerMonitor_1onBatteryChargingChanged(
    JNIEnv* env,
    jclass jcaller) {
  JNI_PowerMonitor_OnBatteryChargingChanged(env);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_PowerMonitor_OnThermalStatusChanged(
    JNIEnv* env,
    jint thermalStatus);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1PowerMonitor_1onThermalStatusChanged(
    JNIEnv* env,
    jclass jcaller,
    jint thermalStatus) {
  JNI_PowerMonitor_OnThermalStatusChanged(env, thermalStatus);
}

// Native to Java functions
static jint Java_PowerMonitor_getCurrentThermalStatus(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = org_chromium_base_PowerMonitor_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, 0);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getCurrentThermalStatus",
      "()I",
      &cached_method_id);
  auto _ret = env->CallStaticIntMethod(clazz, call_context.method_id());
  return _ret;
}

static jint Java_PowerMonitor_getRemainingBatteryCapacity(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = org_chromium_base_PowerMonitor_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, 0);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getRemainingBatteryCapacity",
      "()I",
      &cached_method_id);
  auto _ret = env->CallStaticIntMethod(clazz, call_context.method_id());
  return _ret;
}

static jboolean Java_PowerMonitor_isBatteryPower(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = org_chromium_base_PowerMonitor_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "isBatteryPower",
      "()Z",
      &cached_method_id);
  auto _ret = env->CallStaticBooleanMethod(clazz, call_context.method_id());
  return _ret;
}


}  // namespace android
}  // namespace base
#endif  // org_chromium_base_PowerMonitor_JNI
