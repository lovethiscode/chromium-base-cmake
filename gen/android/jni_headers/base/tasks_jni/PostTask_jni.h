// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     org.chromium.base.task.PostTask

#ifndef org_chromium_base_task_PostTask_JNI
#define org_chromium_base_task_PostTask_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "../../../../../../third_party/jni_zero/jni_zero_internal.h"
// Class Accessors.
#ifndef org_chromium_base_task_PostTask_clazz_defined
#define org_chromium_base_task_PostTask_clazz_defined
inline jclass org_chromium_base_task_PostTask_clazz(JNIEnv* env) {
  static const char kClassName[] = "org/chromium/base/task/PostTask";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif

namespace base {
// Native to Java functions
static void Java_PostTask_onNativeSchedulerReady(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = org_chromium_base_task_PostTask_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "onNativeSchedulerReady",
      "()V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id());
}


}  // namespace base
#endif  // org_chromium_base_task_PostTask_JNI
