// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     org.chromium.base.memory.MemoryPurgeManager

#ifndef org_chromium_base_memory_MemoryPurgeManager_JNI
#define org_chromium_base_memory_MemoryPurgeManager_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "../../../../../../third_party/jni_zero/jni_zero_internal.h"
// Class Accessors.
#ifndef org_chromium_base_memory_MemoryPurgeManager_clazz_defined
#define org_chromium_base_memory_MemoryPurgeManager_clazz_defined
inline jclass org_chromium_base_memory_MemoryPurgeManager_clazz(JNIEnv* env) {
  static const char kClassName[] = "org/chromium/base/memory/MemoryPurgeManager";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static jboolean JNI_MemoryPurgeManager_IsOnPreFreezeMemoryTrimEnabled(
    JNIEnv* env);

JNI_POSSIBLE_BOUNDARY_EXPORT jboolean Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1memory_1MemoryPurgeManager_1isOnPreFreezeMemoryTrimEnabled(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_MemoryPurgeManager_IsOnPreFreezeMemoryTrimEnabled(env);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_MemoryPurgeManager_PostDelayedPurgeTaskOnUiThread(
    JNIEnv* env,
    jlong delayMillis);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1memory_1MemoryPurgeManager_1postDelayedPurgeTaskOnUiThread(
    JNIEnv* env,
    jclass jcaller,
    jlong delayMillis) {
  JNI_MemoryPurgeManager_PostDelayedPurgeTaskOnUiThread(env, delayMillis);
}

// Native to Java functions
static void Java_MemoryPurgeManager_doDelayedPurge(
    JNIEnv* env,
    jboolean mustPurgeNow) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = org_chromium_base_memory_MemoryPurgeManager_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "doDelayedPurge",
      "(Z)V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id(), mustPurgeNow);
}


#endif  // org_chromium_base_memory_MemoryPurgeManager_JNI
