// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     org.chromium.base.CommandLine

#ifndef org_chromium_base_CommandLine_JNI
#define org_chromium_base_CommandLine_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "../../../../../../third_party/jni_zero/jni_zero_internal.h"
// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_AppendSwitch(
    JNIEnv* env,
    std::string& switchString);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1appendSwitch(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  JNI_CommandLine_AppendSwitch(env, switchString_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_AppendSwitchWithValue(
    JNIEnv* env,
    std::string& switchString,
    std::string& value);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1appendSwitchWithValue(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString,
    jobject value) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  std::string value_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, value));
  JNI_CommandLine_AppendSwitchWithValue(
      env,
      switchString_converted,
      value_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_AppendSwitchesAndArguments(
    JNIEnv* env,
    std::vector<std::string>& array);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1appendSwitchesAndArguments(
    JNIEnv* env,
    jclass jcaller,
    jobject array) {
  std::vector<std::string> array_converted = jni_zero::FromJniArray<std::vector<std::string>>(
      env,
      jni_zero::JavaParamRef<jobjectArray>(env, static_cast<jobjectArray>(array)));
  JNI_CommandLine_AppendSwitchesAndArguments(env, array_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static std::string JNI_CommandLine_GetSwitchValue(
    JNIEnv* env,
    std::string& switchString);

JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1getSwitchValue(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  auto _ret = JNI_CommandLine_GetSwitchValue(env, switchString_converted);
  jobject converted_ret = jni_zero::ToJniType(env, _ret).Release();
  return converted_ret;
}

// Forward declaration. To be implemented by the including .cc file.
static std::vector<std::string> JNI_CommandLine_GetSwitchesFlattened(
    JNIEnv* env);

JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1getSwitchesFlattened(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_CommandLine_GetSwitchesFlattened(env);
  jobject converted_ret = jni_zero::ToJniArray(
      env,
      _ret,
      jni_zero::g_string_class).Release();
  return converted_ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jboolean JNI_CommandLine_HasSwitch(
    JNIEnv* env,
    std::string& switchString);

JNI_POSSIBLE_BOUNDARY_EXPORT jboolean Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1hasSwitch(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  auto _ret = JNI_CommandLine_HasSwitch(env, switchString_converted);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_Init(JNIEnv* env, std::vector<std::string>& args);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1init(
    JNIEnv* env,
    jclass jcaller,
    jobject args) {
  std::vector<std::string> args_converted = jni_zero::FromJniArray<std::vector<std::string>>(
      env,
      jni_zero::JavaParamRef<jobjectArray>(env, static_cast<jobjectArray>(args)));
  JNI_CommandLine_Init(env, args_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_RemoveSwitch(
    JNIEnv* env,
    std::string& switchString);

JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_jni_1zero_GEN_1JNI_org_1chromium_1base_1CommandLine_1removeSwitch(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  JNI_CommandLine_RemoveSwitch(env, switchString_converted);
}


#endif  // org_chromium_base_CommandLine_JNI
