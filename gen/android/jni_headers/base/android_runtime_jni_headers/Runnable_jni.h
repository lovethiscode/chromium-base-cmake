// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     java.lang.Runnable

#ifndef java_lang_Runnable_JNI
#define java_lang_Runnable_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "../../../../../../third_party/jni_zero/jni_zero_internal.h"
// Class Accessors.
#ifndef java_lang_Runnable_clazz_defined
#define java_lang_Runnable_clazz_defined
inline jclass java_lang_Runnable_clazz(JNIEnv* env) {
  static const char kClassName[] = "java/lang/Runnable";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif

namespace JNI_Runnable {
// Native to Java functions
[[maybe_unused]] static void Java_Runnable_run(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runnable_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "run",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}


}  // namespace JNI_Runnable
#endif  // java_lang_Runnable_JNI
