// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     java.lang.Runtime

#ifndef java_lang_Runtime_JNI
#define java_lang_Runtime_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "../../../../../../third_party/jni_zero/jni_zero_internal.h"
// Class Accessors.
#ifndef java_lang_Runtime_clazz_defined
#define java_lang_Runtime_clazz_defined
inline jclass java_lang_Runtime_clazz(JNIEnv* env) {
  static const char kClassName[] = "java/lang/Runtime";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif

namespace JNI_Runtime {
// Native to Java functions
[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_Constructor(
    JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "<init>",
      "()V",
      &cached_method_id);
  auto _ret = env->NewObject(clazz, call_context.method_id());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static void Java_Runtime_addShutdownHook(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobject>& p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "addShutdownHook",
      "(Ljava/lang/Thread;)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), p0.obj());
}

[[maybe_unused]] static jint Java_Runtime_availableProcessors(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, 0);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "availableProcessors",
      "()I",
      &cached_method_id);
  auto _ret = env->CallIntMethod(obj.obj(), call_context.method_id());
  return _ret;
}

[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_exec__String(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jstring>& p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "exec",
      "(Ljava/lang/String;)Ljava/lang/Process;",
      &cached_method_id);
  auto _ret = env->CallObjectMethod(
      obj.obj(),
      call_context.method_id(),
      p0.obj());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_exec__String__StringArray(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jstring>& p0,
    const jni_zero::JavaRef<jobjectArray>& p1) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "exec",
      "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;",
      &cached_method_id);
  auto _ret = env->CallObjectMethod(
      obj.obj(),
      call_context.method_id(),
      p0.obj(),
      p1.obj());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_exec__String__StringArray__java_io_File(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jstring>& p0,
    const jni_zero::JavaRef<jobjectArray>& p1,
    const jni_zero::JavaRef<jobject>& p2) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "exec",
      "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;",
      &cached_method_id);
  auto _ret = env->CallObjectMethod(
      obj.obj(),
      call_context.method_id(),
      p0.obj(),
      p1.obj(),
      p2.obj());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_exec__StringArray(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobjectArray>& p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "exec",
      "([Ljava/lang/String;)Ljava/lang/Process;",
      &cached_method_id);
  auto _ret = env->CallObjectMethod(
      obj.obj(),
      call_context.method_id(),
      p0.obj());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_exec__StringArray__StringArray(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobjectArray>& p0,
    const jni_zero::JavaRef<jobjectArray>& p1) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "exec",
      "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;",
      &cached_method_id);
  auto _ret = env->CallObjectMethod(
      obj.obj(),
      call_context.method_id(),
      p0.obj(),
      p1.obj());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_exec__StringArray__StringArray__java_io_File(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobjectArray>& p0,
    const jni_zero::JavaRef<jobjectArray>& p1,
    const jni_zero::JavaRef<jobject>& p2) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "exec",
      "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;",
      &cached_method_id);
  auto _ret = env->CallObjectMethod(
      obj.obj(),
      call_context.method_id(),
      p0.obj(),
      p1.obj(),
      p2.obj());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static void Java_Runtime_exit(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "exit",
      "(I)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), as_jint(p0));
}

[[maybe_unused]] static jlong Java_Runtime_freeMemory(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, 0);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "freeMemory",
      "()J",
      &cached_method_id);
  auto _ret = env->CallLongMethod(obj.obj(), call_context.method_id());
  return _ret;
}

[[maybe_unused]] static void Java_Runtime_gc(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "gc",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_Runtime_getRuntime(
    JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getRuntime",
      "()Ljava/lang/Runtime;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

[[maybe_unused]] static void Java_Runtime_halt(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "halt",
      "(I)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), as_jint(p0));
}

[[maybe_unused]] static void Java_Runtime_load(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jstring>& p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "load",
      "(Ljava/lang/String;)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), p0.obj());
}

[[maybe_unused]] static void Java_Runtime_loadLibrary(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jstring>& p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "loadLibrary",
      "(Ljava/lang/String;)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), p0.obj());
}

[[maybe_unused]] static jlong Java_Runtime_maxMemory(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, 0);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "maxMemory",
      "()J",
      &cached_method_id);
  auto _ret = env->CallLongMethod(obj.obj(), call_context.method_id());
  return _ret;
}

[[maybe_unused]] static jboolean Java_Runtime_removeShutdownHook(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobject>& p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "removeShutdownHook",
      "(Ljava/lang/Thread;)Z",
      &cached_method_id);
  auto _ret = env->CallBooleanMethod(
      obj.obj(),
      call_context.method_id(),
      p0.obj());
  return _ret;
}

[[maybe_unused]] static void Java_Runtime_runFinalization(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "runFinalization",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

[[maybe_unused]] static void Java_Runtime_runFinalizersOnExit(
    JNIEnv* env,
    jboolean p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "runFinalizersOnExit",
      "(Z)V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id(), p0);
}

[[maybe_unused]] static jlong Java_Runtime_totalMemory(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, 0);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "totalMemory",
      "()J",
      &cached_method_id);
  auto _ret = env->CallLongMethod(obj.obj(), call_context.method_id());
  return _ret;
}

[[maybe_unused]] static void Java_Runtime_traceInstructions(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jboolean p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "traceInstructions",
      "(Z)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), p0);
}

[[maybe_unused]] static void Java_Runtime_traceMethodCalls(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jboolean p0) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = java_lang_Runtime_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "traceMethodCalls",
      "(Z)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), p0);
}


}  // namespace JNI_Runtime
#endif  // java_lang_Runtime_JNI
