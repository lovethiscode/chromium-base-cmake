// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/pixel_modem_config.proto

#include "protos/perfetto/config/android/pixel_modem_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR PixelModemConfig::PixelModemConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pigweed_hash_allow_list_)*/{}
  , /*decltype(_impl_.pigweed_hash_deny_list_)*/{}
  , /*decltype(_impl_.event_group_)*/0} {}
struct PixelModemConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PixelModemConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PixelModemConfigDefaultTypeInternal() {}
  union {
    PixelModemConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PixelModemConfigDefaultTypeInternal _PixelModemConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool PixelModemConfig_EventGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PixelModemConfig_EventGroup_strings[3] = {};

static const char PixelModemConfig_EventGroup_names[] =
  "EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH"
  "EVENT_GROUP_LOW_BANDWIDTH"
  "EVENT_GROUP_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PixelModemConfig_EventGroup_entries[] = {
  { {PixelModemConfig_EventGroup_names + 0, 34}, 2 },
  { {PixelModemConfig_EventGroup_names + 34, 25}, 1 },
  { {PixelModemConfig_EventGroup_names + 59, 19}, 0 },
};

static const int PixelModemConfig_EventGroup_entries_by_number[] = {
  2, // 0 -> EVENT_GROUP_UNKNOWN
  1, // 1 -> EVENT_GROUP_LOW_BANDWIDTH
  0, // 2 -> EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH
};

const std::string& PixelModemConfig_EventGroup_Name(
    PixelModemConfig_EventGroup value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PixelModemConfig_EventGroup_entries,
          PixelModemConfig_EventGroup_entries_by_number,
          3, PixelModemConfig_EventGroup_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PixelModemConfig_EventGroup_entries,
      PixelModemConfig_EventGroup_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PixelModemConfig_EventGroup_strings[idx].get();
}
bool PixelModemConfig_EventGroup_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PixelModemConfig_EventGroup* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PixelModemConfig_EventGroup_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PixelModemConfig_EventGroup>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PixelModemConfig_EventGroup PixelModemConfig::EVENT_GROUP_UNKNOWN;
constexpr PixelModemConfig_EventGroup PixelModemConfig::EVENT_GROUP_LOW_BANDWIDTH;
constexpr PixelModemConfig_EventGroup PixelModemConfig::EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH;
constexpr PixelModemConfig_EventGroup PixelModemConfig::EventGroup_MIN;
constexpr PixelModemConfig_EventGroup PixelModemConfig::EventGroup_MAX;
constexpr int PixelModemConfig::EventGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PixelModemConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PixelModemConfig>()._impl_._has_bits_);
  static void set_has_event_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PixelModemConfig::PixelModemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PixelModemConfig)
}
PixelModemConfig::PixelModemConfig(const PixelModemConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PixelModemConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pigweed_hash_allow_list_){from._impl_.pigweed_hash_allow_list_}
    , decltype(_impl_.pigweed_hash_deny_list_){from._impl_.pigweed_hash_deny_list_}
    , decltype(_impl_.event_group_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.event_group_ = from._impl_.event_group_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PixelModemConfig)
}

inline void PixelModemConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pigweed_hash_allow_list_){arena}
    , decltype(_impl_.pigweed_hash_deny_list_){arena}
    , decltype(_impl_.event_group_){0}
  };
}

PixelModemConfig::~PixelModemConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PixelModemConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PixelModemConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pigweed_hash_allow_list_.~RepeatedField();
  _impl_.pigweed_hash_deny_list_.~RepeatedField();
}

void PixelModemConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PixelModemConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PixelModemConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pigweed_hash_allow_list_.Clear();
  _impl_.pigweed_hash_deny_list_.Clear();
  _impl_.event_group_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PixelModemConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.PixelModemConfig.EventGroup event_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PixelModemConfig_EventGroup_IsValid(val))) {
            _internal_set_event_group(static_cast<::perfetto::protos::PixelModemConfig_EventGroup>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int64 pigweed_hash_allow_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pigweed_hash_allow_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_pigweed_hash_allow_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 pigweed_hash_deny_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pigweed_hash_deny_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_pigweed_hash_deny_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PixelModemConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PixelModemConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.PixelModemConfig.EventGroup event_group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_group(), target);
  }

  // repeated int64 pigweed_hash_allow_list = 2;
  for (int i = 0, n = this->_internal_pigweed_hash_allow_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_pigweed_hash_allow_list(i), target);
  }

  // repeated int64 pigweed_hash_deny_list = 3;
  for (int i = 0, n = this->_internal_pigweed_hash_deny_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_pigweed_hash_deny_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PixelModemConfig)
  return target;
}

size_t PixelModemConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PixelModemConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 pigweed_hash_allow_list = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.pigweed_hash_allow_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pigweed_hash_allow_list_size());
    total_size += data_size;
  }

  // repeated int64 pigweed_hash_deny_list = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.pigweed_hash_deny_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pigweed_hash_deny_list_size());
    total_size += data_size;
  }

  // optional .perfetto.protos.PixelModemConfig.EventGroup event_group = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PixelModemConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PixelModemConfig*>(
      &from));
}

void PixelModemConfig::MergeFrom(const PixelModemConfig& from) {
  PixelModemConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PixelModemConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pigweed_hash_allow_list_.MergeFrom(from._impl_.pigweed_hash_allow_list_);
  _this->_impl_.pigweed_hash_deny_list_.MergeFrom(from._impl_.pigweed_hash_deny_list_);
  if (from._internal_has_event_group()) {
    _this->_internal_set_event_group(from._internal_event_group());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PixelModemConfig::CopyFrom(const PixelModemConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PixelModemConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelModemConfig::IsInitialized() const {
  return true;
}

void PixelModemConfig::InternalSwap(PixelModemConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pigweed_hash_allow_list_.InternalSwap(&other->_impl_.pigweed_hash_allow_list_);
  _impl_.pigweed_hash_deny_list_.InternalSwap(&other->_impl_.pigweed_hash_deny_list_);
  swap(_impl_.event_group_, other->_impl_.event_group_);
}

std::string PixelModemConfig::GetTypeName() const {
  return "perfetto.protos.PixelModemConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PixelModemConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::PixelModemConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PixelModemConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
