// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/protolog_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fprotolog_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fprotolog_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/common/protolog_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fandroid_2fprotolog_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fprotolog_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ProtoLogConfig;
struct ProtoLogConfigDefaultTypeInternal;
extern ProtoLogConfigDefaultTypeInternal _ProtoLogConfig_default_instance_;
class ProtoLogGroup;
struct ProtoLogGroupDefaultTypeInternal;
extern ProtoLogGroupDefaultTypeInternal _ProtoLogGroup_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ProtoLogConfig* Arena::CreateMaybeMessage<::perfetto::protos::ProtoLogConfig>(Arena*);
template<> ::perfetto::protos::ProtoLogGroup* Arena::CreateMaybeMessage<::perfetto::protos::ProtoLogGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum ProtoLogConfig_TracingMode : int {
  ProtoLogConfig_TracingMode_DEFAULT = 0,
  ProtoLogConfig_TracingMode_ENABLE_ALL = 1
};
bool ProtoLogConfig_TracingMode_IsValid(int value);
constexpr ProtoLogConfig_TracingMode ProtoLogConfig_TracingMode_TracingMode_MIN = ProtoLogConfig_TracingMode_DEFAULT;
constexpr ProtoLogConfig_TracingMode ProtoLogConfig_TracingMode_TracingMode_MAX = ProtoLogConfig_TracingMode_ENABLE_ALL;
constexpr int ProtoLogConfig_TracingMode_TracingMode_ARRAYSIZE = ProtoLogConfig_TracingMode_TracingMode_MAX + 1;

const std::string& ProtoLogConfig_TracingMode_Name(ProtoLogConfig_TracingMode value);
template<typename T>
inline const std::string& ProtoLogConfig_TracingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoLogConfig_TracingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoLogConfig_TracingMode_Name.");
  return ProtoLogConfig_TracingMode_Name(static_cast<ProtoLogConfig_TracingMode>(enum_t_value));
}
bool ProtoLogConfig_TracingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoLogConfig_TracingMode* value);
// ===================================================================

class ProtoLogConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProtoLogConfig) */ {
 public:
  inline ProtoLogConfig() : ProtoLogConfig(nullptr) {}
  ~ProtoLogConfig() override;
  explicit PROTOBUF_CONSTEXPR ProtoLogConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoLogConfig(const ProtoLogConfig& from);
  ProtoLogConfig(ProtoLogConfig&& from) noexcept
    : ProtoLogConfig() {
    *this = ::std::move(from);
  }

  inline ProtoLogConfig& operator=(const ProtoLogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoLogConfig& operator=(ProtoLogConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProtoLogConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoLogConfig* internal_default_instance() {
    return reinterpret_cast<const ProtoLogConfig*>(
               &_ProtoLogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoLogConfig& a, ProtoLogConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProtoLogConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoLogConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoLogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoLogConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProtoLogConfig& from);
  void MergeFrom(const ProtoLogConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProtoLogConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProtoLogConfig";
  }
  protected:
  explicit ProtoLogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProtoLogConfig_TracingMode TracingMode;
  static constexpr TracingMode DEFAULT =
    ProtoLogConfig_TracingMode_DEFAULT;
  static constexpr TracingMode ENABLE_ALL =
    ProtoLogConfig_TracingMode_ENABLE_ALL;
  static inline bool TracingMode_IsValid(int value) {
    return ProtoLogConfig_TracingMode_IsValid(value);
  }
  static constexpr TracingMode TracingMode_MIN =
    ProtoLogConfig_TracingMode_TracingMode_MIN;
  static constexpr TracingMode TracingMode_MAX =
    ProtoLogConfig_TracingMode_TracingMode_MAX;
  static constexpr int TracingMode_ARRAYSIZE =
    ProtoLogConfig_TracingMode_TracingMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TracingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TracingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TracingMode_Name.");
    return ProtoLogConfig_TracingMode_Name(enum_t_value);
  }
  static inline bool TracingMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TracingMode* value) {
    return ProtoLogConfig_TracingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGroupOverridesFieldNumber = 1,
    kTracingModeFieldNumber = 2,
  };
  // repeated .perfetto.protos.ProtoLogGroup group_overrides = 1;
  int group_overrides_size() const;
  private:
  int _internal_group_overrides_size() const;
  public:
  void clear_group_overrides();
  ::perfetto::protos::ProtoLogGroup* mutable_group_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogGroup >*
      mutable_group_overrides();
  private:
  const ::perfetto::protos::ProtoLogGroup& _internal_group_overrides(int index) const;
  ::perfetto::protos::ProtoLogGroup* _internal_add_group_overrides();
  public:
  const ::perfetto::protos::ProtoLogGroup& group_overrides(int index) const;
  ::perfetto::protos::ProtoLogGroup* add_group_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogGroup >&
      group_overrides() const;

  // optional .perfetto.protos.ProtoLogConfig.TracingMode tracing_mode = 2;
  bool has_tracing_mode() const;
  private:
  bool _internal_has_tracing_mode() const;
  public:
  void clear_tracing_mode();
  ::perfetto::protos::ProtoLogConfig_TracingMode tracing_mode() const;
  void set_tracing_mode(::perfetto::protos::ProtoLogConfig_TracingMode value);
  private:
  ::perfetto::protos::ProtoLogConfig_TracingMode _internal_tracing_mode() const;
  void _internal_set_tracing_mode(::perfetto::protos::ProtoLogConfig_TracingMode value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProtoLogConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogGroup > group_overrides_;
    int tracing_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fprotolog_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ProtoLogGroup final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProtoLogGroup) */ {
 public:
  inline ProtoLogGroup() : ProtoLogGroup(nullptr) {}
  ~ProtoLogGroup() override;
  explicit PROTOBUF_CONSTEXPR ProtoLogGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoLogGroup(const ProtoLogGroup& from);
  ProtoLogGroup(ProtoLogGroup&& from) noexcept
    : ProtoLogGroup() {
    *this = ::std::move(from);
  }

  inline ProtoLogGroup& operator=(const ProtoLogGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoLogGroup& operator=(ProtoLogGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProtoLogGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoLogGroup* internal_default_instance() {
    return reinterpret_cast<const ProtoLogGroup*>(
               &_ProtoLogGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoLogGroup& a, ProtoLogGroup& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProtoLogGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoLogGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoLogGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoLogGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProtoLogGroup& from);
  void MergeFrom(const ProtoLogGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProtoLogGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProtoLogGroup";
  }
  protected:
  explicit ProtoLogGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kLogFromFieldNumber = 2,
    kCollectStacktraceFieldNumber = 3,
  };
  // optional string group_name = 1;
  bool has_group_name() const;
  private:
  bool _internal_has_group_name() const;
  public:
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // optional .perfetto.protos.ProtoLogLevel log_from = 2;
  bool has_log_from() const;
  private:
  bool _internal_has_log_from() const;
  public:
  void clear_log_from();
  ::perfetto::protos::ProtoLogLevel log_from() const;
  void set_log_from(::perfetto::protos::ProtoLogLevel value);
  private:
  ::perfetto::protos::ProtoLogLevel _internal_log_from() const;
  void _internal_set_log_from(::perfetto::protos::ProtoLogLevel value);
  public:

  // optional bool collect_stacktrace = 3;
  bool has_collect_stacktrace() const;
  private:
  bool _internal_has_collect_stacktrace() const;
  public:
  void clear_collect_stacktrace();
  bool collect_stacktrace() const;
  void set_collect_stacktrace(bool value);
  private:
  bool _internal_collect_stacktrace() const;
  void _internal_set_collect_stacktrace(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProtoLogGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    int log_from_;
    bool collect_stacktrace_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fprotolog_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoLogConfig

// repeated .perfetto.protos.ProtoLogGroup group_overrides = 1;
inline int ProtoLogConfig::_internal_group_overrides_size() const {
  return _impl_.group_overrides_.size();
}
inline int ProtoLogConfig::group_overrides_size() const {
  return _internal_group_overrides_size();
}
inline void ProtoLogConfig::clear_group_overrides() {
  _impl_.group_overrides_.Clear();
}
inline ::perfetto::protos::ProtoLogGroup* ProtoLogConfig::mutable_group_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProtoLogConfig.group_overrides)
  return _impl_.group_overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogGroup >*
ProtoLogConfig::mutable_group_overrides() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProtoLogConfig.group_overrides)
  return &_impl_.group_overrides_;
}
inline const ::perfetto::protos::ProtoLogGroup& ProtoLogConfig::_internal_group_overrides(int index) const {
  return _impl_.group_overrides_.Get(index);
}
inline const ::perfetto::protos::ProtoLogGroup& ProtoLogConfig::group_overrides(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogConfig.group_overrides)
  return _internal_group_overrides(index);
}
inline ::perfetto::protos::ProtoLogGroup* ProtoLogConfig::_internal_add_group_overrides() {
  return _impl_.group_overrides_.Add();
}
inline ::perfetto::protos::ProtoLogGroup* ProtoLogConfig::add_group_overrides() {
  ::perfetto::protos::ProtoLogGroup* _add = _internal_add_group_overrides();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProtoLogConfig.group_overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProtoLogGroup >&
ProtoLogConfig::group_overrides() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProtoLogConfig.group_overrides)
  return _impl_.group_overrides_;
}

// optional .perfetto.protos.ProtoLogConfig.TracingMode tracing_mode = 2;
inline bool ProtoLogConfig::_internal_has_tracing_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoLogConfig::has_tracing_mode() const {
  return _internal_has_tracing_mode();
}
inline void ProtoLogConfig::clear_tracing_mode() {
  _impl_.tracing_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::ProtoLogConfig_TracingMode ProtoLogConfig::_internal_tracing_mode() const {
  return static_cast< ::perfetto::protos::ProtoLogConfig_TracingMode >(_impl_.tracing_mode_);
}
inline ::perfetto::protos::ProtoLogConfig_TracingMode ProtoLogConfig::tracing_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogConfig.tracing_mode)
  return _internal_tracing_mode();
}
inline void ProtoLogConfig::_internal_set_tracing_mode(::perfetto::protos::ProtoLogConfig_TracingMode value) {
  assert(::perfetto::protos::ProtoLogConfig_TracingMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tracing_mode_ = value;
}
inline void ProtoLogConfig::set_tracing_mode(::perfetto::protos::ProtoLogConfig_TracingMode value) {
  _internal_set_tracing_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogConfig.tracing_mode)
}

// -------------------------------------------------------------------

// ProtoLogGroup

// optional string group_name = 1;
inline bool ProtoLogGroup::_internal_has_group_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoLogGroup::has_group_name() const {
  return _internal_has_group_name();
}
inline void ProtoLogGroup::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoLogGroup::group_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogGroup.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoLogGroup::set_group_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogGroup.group_name)
}
inline std::string* ProtoLogGroup::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProtoLogGroup.group_name)
  return _s;
}
inline const std::string& ProtoLogGroup::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void ProtoLogGroup::_internal_set_group_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtoLogGroup::_internal_mutable_group_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProtoLogGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProtoLogGroup.group_name)
  if (!_internal_has_group_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.group_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoLogGroup::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProtoLogGroup.group_name)
}

// optional .perfetto.protos.ProtoLogLevel log_from = 2;
inline bool ProtoLogGroup::_internal_has_log_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoLogGroup::has_log_from() const {
  return _internal_has_log_from();
}
inline void ProtoLogGroup::clear_log_from() {
  _impl_.log_from_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ProtoLogLevel ProtoLogGroup::_internal_log_from() const {
  return static_cast< ::perfetto::protos::ProtoLogLevel >(_impl_.log_from_);
}
inline ::perfetto::protos::ProtoLogLevel ProtoLogGroup::log_from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogGroup.log_from)
  return _internal_log_from();
}
inline void ProtoLogGroup::_internal_set_log_from(::perfetto::protos::ProtoLogLevel value) {
  assert(::perfetto::protos::ProtoLogLevel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.log_from_ = value;
}
inline void ProtoLogGroup::set_log_from(::perfetto::protos::ProtoLogLevel value) {
  _internal_set_log_from(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogGroup.log_from)
}

// optional bool collect_stacktrace = 3;
inline bool ProtoLogGroup::_internal_has_collect_stacktrace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtoLogGroup::has_collect_stacktrace() const {
  return _internal_has_collect_stacktrace();
}
inline void ProtoLogGroup::clear_collect_stacktrace() {
  _impl_.collect_stacktrace_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ProtoLogGroup::_internal_collect_stacktrace() const {
  return _impl_.collect_stacktrace_;
}
inline bool ProtoLogGroup::collect_stacktrace() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProtoLogGroup.collect_stacktrace)
  return _internal_collect_stacktrace();
}
inline void ProtoLogGroup::_internal_set_collect_stacktrace(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.collect_stacktrace_ = value;
}
inline void ProtoLogGroup::set_collect_stacktrace(bool value) {
  _internal_set_collect_stacktrace(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProtoLogGroup.collect_stacktrace)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::ProtoLogConfig_TracingMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fprotolog_5fconfig_2eproto
