// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/protolog_config.proto

#include "protos/perfetto/config/android/protolog_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ProtoLogConfig::ProtoLogConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_overrides_)*/{}
  , /*decltype(_impl_.tracing_mode_)*/0} {}
struct ProtoLogConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoLogConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoLogConfigDefaultTypeInternal() {}
  union {
    ProtoLogConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoLogConfigDefaultTypeInternal _ProtoLogConfig_default_instance_;
PROTOBUF_CONSTEXPR ProtoLogGroup::ProtoLogGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_from_)*/0
  , /*decltype(_impl_.collect_stacktrace_)*/false} {}
struct ProtoLogGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoLogGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoLogGroupDefaultTypeInternal() {}
  union {
    ProtoLogGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoLogGroupDefaultTypeInternal _ProtoLogGroup_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ProtoLogConfig_TracingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProtoLogConfig_TracingMode_strings[2] = {};

static const char ProtoLogConfig_TracingMode_names[] =
  "DEFAULT"
  "ENABLE_ALL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProtoLogConfig_TracingMode_entries[] = {
  { {ProtoLogConfig_TracingMode_names + 0, 7}, 0 },
  { {ProtoLogConfig_TracingMode_names + 7, 10}, 1 },
};

static const int ProtoLogConfig_TracingMode_entries_by_number[] = {
  0, // 0 -> DEFAULT
  1, // 1 -> ENABLE_ALL
};

const std::string& ProtoLogConfig_TracingMode_Name(
    ProtoLogConfig_TracingMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProtoLogConfig_TracingMode_entries,
          ProtoLogConfig_TracingMode_entries_by_number,
          2, ProtoLogConfig_TracingMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProtoLogConfig_TracingMode_entries,
      ProtoLogConfig_TracingMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProtoLogConfig_TracingMode_strings[idx].get();
}
bool ProtoLogConfig_TracingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoLogConfig_TracingMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProtoLogConfig_TracingMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ProtoLogConfig_TracingMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProtoLogConfig_TracingMode ProtoLogConfig::DEFAULT;
constexpr ProtoLogConfig_TracingMode ProtoLogConfig::ENABLE_ALL;
constexpr ProtoLogConfig_TracingMode ProtoLogConfig::TracingMode_MIN;
constexpr ProtoLogConfig_TracingMode ProtoLogConfig::TracingMode_MAX;
constexpr int ProtoLogConfig::TracingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProtoLogConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoLogConfig>()._impl_._has_bits_);
  static void set_has_tracing_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProtoLogConfig::ProtoLogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProtoLogConfig)
}
ProtoLogConfig::ProtoLogConfig(const ProtoLogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProtoLogConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_overrides_){from._impl_.group_overrides_}
    , decltype(_impl_.tracing_mode_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.tracing_mode_ = from._impl_.tracing_mode_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProtoLogConfig)
}

inline void ProtoLogConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_overrides_){arena}
    , decltype(_impl_.tracing_mode_){0}
  };
}

ProtoLogConfig::~ProtoLogConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProtoLogConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoLogConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_overrides_.~RepeatedPtrField();
}

void ProtoLogConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoLogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProtoLogConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_overrides_.Clear();
  _impl_.tracing_mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProtoLogConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProtoLogGroup group_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_overrides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProtoLogConfig.TracingMode tracing_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProtoLogConfig_TracingMode_IsValid(val))) {
            _internal_set_tracing_mode(static_cast<::perfetto::protos::ProtoLogConfig_TracingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoLogConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProtoLogConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProtoLogGroup group_overrides = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_overrides_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_overrides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ProtoLogConfig.TracingMode tracing_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tracing_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProtoLogConfig)
  return target;
}

size_t ProtoLogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProtoLogConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProtoLogGroup group_overrides = 1;
  total_size += 1UL * this->_internal_group_overrides_size();
  for (const auto& msg : this->_impl_.group_overrides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .perfetto.protos.ProtoLogConfig.TracingMode tracing_mode = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracing_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoLogConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProtoLogConfig*>(
      &from));
}

void ProtoLogConfig::MergeFrom(const ProtoLogConfig& from) {
  ProtoLogConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProtoLogConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_overrides_.MergeFrom(from._impl_.group_overrides_);
  if (from._internal_has_tracing_mode()) {
    _this->_internal_set_tracing_mode(from._internal_tracing_mode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProtoLogConfig::CopyFrom(const ProtoLogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProtoLogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLogConfig::IsInitialized() const {
  return true;
}

void ProtoLogConfig::InternalSwap(ProtoLogConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_overrides_.InternalSwap(&other->_impl_.group_overrides_);
  swap(_impl_.tracing_mode_, other->_impl_.tracing_mode_);
}

std::string ProtoLogConfig::GetTypeName() const {
  return "perfetto.protos.ProtoLogConfig";
}


// ===================================================================

class ProtoLogGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoLogGroup>()._impl_._has_bits_);
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_log_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_collect_stacktrace(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ProtoLogGroup::ProtoLogGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProtoLogGroup)
}
ProtoLogGroup::ProtoLogGroup(const ProtoLogGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProtoLogGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.log_from_){}
    , decltype(_impl_.collect_stacktrace_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_name()) {
    _this->_impl_.group_name_.Set(from._internal_group_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.log_from_, &from._impl_.log_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collect_stacktrace_) -
    reinterpret_cast<char*>(&_impl_.log_from_)) + sizeof(_impl_.collect_stacktrace_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProtoLogGroup)
}

inline void ProtoLogGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.log_from_){0}
    , decltype(_impl_.collect_stacktrace_){false}
  };
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoLogGroup::~ProtoLogGroup() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProtoLogGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoLogGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_name_.Destroy();
}

void ProtoLogGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoLogGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProtoLogGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.group_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.log_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.collect_stacktrace_) -
        reinterpret_cast<char*>(&_impl_.log_from_)) + sizeof(_impl_.collect_stacktrace_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProtoLogGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string group_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProtoLogLevel log_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProtoLogLevel_IsValid(val))) {
            _internal_set_log_from(static_cast<::perfetto::protos::ProtoLogLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool collect_stacktrace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_collect_stacktrace(&has_bits);
          _impl_.collect_stacktrace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoLogGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProtoLogGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string group_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_name(), target);
  }

  // optional .perfetto.protos.ProtoLogLevel log_from = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_log_from(), target);
  }

  // optional bool collect_stacktrace = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_collect_stacktrace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProtoLogGroup)
  return target;
}

size_t ProtoLogGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProtoLogGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string group_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_name());
    }

    // optional .perfetto.protos.ProtoLogLevel log_from = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_log_from());
    }

    // optional bool collect_stacktrace = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoLogGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProtoLogGroup*>(
      &from));
}

void ProtoLogGroup::MergeFrom(const ProtoLogGroup& from) {
  ProtoLogGroup* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProtoLogGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_group_name(from._internal_group_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.log_from_ = from._impl_.log_from_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.collect_stacktrace_ = from._impl_.collect_stacktrace_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProtoLogGroup::CopyFrom(const ProtoLogGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProtoLogGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLogGroup::IsInitialized() const {
  return true;
}

void ProtoLogGroup::InternalSwap(ProtoLogGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoLogGroup, _impl_.collect_stacktrace_)
      + sizeof(ProtoLogGroup::_impl_.collect_stacktrace_)
      - PROTOBUF_FIELD_OFFSET(ProtoLogGroup, _impl_.log_from_)>(
          reinterpret_cast<char*>(&_impl_.log_from_),
          reinterpret_cast<char*>(&other->_impl_.log_from_));
}

std::string ProtoLogGroup::GetTypeName() const {
  return "perfetto.protos.ProtoLogGroup";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProtoLogConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::ProtoLogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProtoLogConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProtoLogGroup*
Arena::CreateMaybeMessage< ::perfetto::protos::ProtoLogGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProtoLogGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
