// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/surfaceflinger_layers_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fsurfaceflinger_5flayers_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fsurfaceflinger_5flayers_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fandroid_2fsurfaceflinger_5flayers_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fsurfaceflinger_5flayers_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class SurfaceFlingerLayersConfig;
struct SurfaceFlingerLayersConfigDefaultTypeInternal;
extern SurfaceFlingerLayersConfigDefaultTypeInternal _SurfaceFlingerLayersConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SurfaceFlingerLayersConfig* Arena::CreateMaybeMessage<::perfetto::protos::SurfaceFlingerLayersConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum SurfaceFlingerLayersConfig_Mode : int {
  SurfaceFlingerLayersConfig_Mode_MODE_UNSPECIFIED = 0,
  SurfaceFlingerLayersConfig_Mode_MODE_ACTIVE = 1,
  SurfaceFlingerLayersConfig_Mode_MODE_GENERATED = 2,
  SurfaceFlingerLayersConfig_Mode_MODE_DUMP = 3,
  SurfaceFlingerLayersConfig_Mode_MODE_GENERATED_BUGREPORT_ONLY = 4
};
bool SurfaceFlingerLayersConfig_Mode_IsValid(int value);
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig_Mode_Mode_MIN = SurfaceFlingerLayersConfig_Mode_MODE_UNSPECIFIED;
constexpr SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig_Mode_Mode_MAX = SurfaceFlingerLayersConfig_Mode_MODE_GENERATED_BUGREPORT_ONLY;
constexpr int SurfaceFlingerLayersConfig_Mode_Mode_ARRAYSIZE = SurfaceFlingerLayersConfig_Mode_Mode_MAX + 1;

const std::string& SurfaceFlingerLayersConfig_Mode_Name(SurfaceFlingerLayersConfig_Mode value);
template<typename T>
inline const std::string& SurfaceFlingerLayersConfig_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SurfaceFlingerLayersConfig_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SurfaceFlingerLayersConfig_Mode_Name.");
  return SurfaceFlingerLayersConfig_Mode_Name(static_cast<SurfaceFlingerLayersConfig_Mode>(enum_t_value));
}
bool SurfaceFlingerLayersConfig_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SurfaceFlingerLayersConfig_Mode* value);
enum SurfaceFlingerLayersConfig_TraceFlag : int {
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_UNSPECIFIED = 0,
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_INPUT = 2,
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_COMPOSITION = 4,
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_EXTRA = 8,
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_HWC = 16,
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_BUFFERS = 32,
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_VIRTUAL_DISPLAYS = 64,
  SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_ALL = 14
};
bool SurfaceFlingerLayersConfig_TraceFlag_IsValid(int value);
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig_TraceFlag_TraceFlag_MIN = SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_UNSPECIFIED;
constexpr SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig_TraceFlag_TraceFlag_MAX = SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_VIRTUAL_DISPLAYS;
constexpr int SurfaceFlingerLayersConfig_TraceFlag_TraceFlag_ARRAYSIZE = SurfaceFlingerLayersConfig_TraceFlag_TraceFlag_MAX + 1;

const std::string& SurfaceFlingerLayersConfig_TraceFlag_Name(SurfaceFlingerLayersConfig_TraceFlag value);
template<typename T>
inline const std::string& SurfaceFlingerLayersConfig_TraceFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SurfaceFlingerLayersConfig_TraceFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SurfaceFlingerLayersConfig_TraceFlag_Name.");
  return SurfaceFlingerLayersConfig_TraceFlag_Name(static_cast<SurfaceFlingerLayersConfig_TraceFlag>(enum_t_value));
}
bool SurfaceFlingerLayersConfig_TraceFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SurfaceFlingerLayersConfig_TraceFlag* value);
// ===================================================================

class SurfaceFlingerLayersConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SurfaceFlingerLayersConfig) */ {
 public:
  inline SurfaceFlingerLayersConfig() : SurfaceFlingerLayersConfig(nullptr) {}
  ~SurfaceFlingerLayersConfig() override;
  explicit PROTOBUF_CONSTEXPR SurfaceFlingerLayersConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SurfaceFlingerLayersConfig(const SurfaceFlingerLayersConfig& from);
  SurfaceFlingerLayersConfig(SurfaceFlingerLayersConfig&& from) noexcept
    : SurfaceFlingerLayersConfig() {
    *this = ::std::move(from);
  }

  inline SurfaceFlingerLayersConfig& operator=(const SurfaceFlingerLayersConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceFlingerLayersConfig& operator=(SurfaceFlingerLayersConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SurfaceFlingerLayersConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SurfaceFlingerLayersConfig* internal_default_instance() {
    return reinterpret_cast<const SurfaceFlingerLayersConfig*>(
               &_SurfaceFlingerLayersConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SurfaceFlingerLayersConfig& a, SurfaceFlingerLayersConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SurfaceFlingerLayersConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SurfaceFlingerLayersConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SurfaceFlingerLayersConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SurfaceFlingerLayersConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SurfaceFlingerLayersConfig& from);
  void MergeFrom(const SurfaceFlingerLayersConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceFlingerLayersConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SurfaceFlingerLayersConfig";
  }
  protected:
  explicit SurfaceFlingerLayersConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SurfaceFlingerLayersConfig_Mode Mode;
  static constexpr Mode MODE_UNSPECIFIED =
    SurfaceFlingerLayersConfig_Mode_MODE_UNSPECIFIED;
  static constexpr Mode MODE_ACTIVE =
    SurfaceFlingerLayersConfig_Mode_MODE_ACTIVE;
  static constexpr Mode MODE_GENERATED =
    SurfaceFlingerLayersConfig_Mode_MODE_GENERATED;
  static constexpr Mode MODE_DUMP =
    SurfaceFlingerLayersConfig_Mode_MODE_DUMP;
  static constexpr Mode MODE_GENERATED_BUGREPORT_ONLY =
    SurfaceFlingerLayersConfig_Mode_MODE_GENERATED_BUGREPORT_ONLY;
  static inline bool Mode_IsValid(int value) {
    return SurfaceFlingerLayersConfig_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    SurfaceFlingerLayersConfig_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    SurfaceFlingerLayersConfig_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    SurfaceFlingerLayersConfig_Mode_Mode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return SurfaceFlingerLayersConfig_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return SurfaceFlingerLayersConfig_Mode_Parse(name, value);
  }

  typedef SurfaceFlingerLayersConfig_TraceFlag TraceFlag;
  static constexpr TraceFlag TRACE_FLAG_UNSPECIFIED =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_UNSPECIFIED;
  static constexpr TraceFlag TRACE_FLAG_INPUT =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_INPUT;
  static constexpr TraceFlag TRACE_FLAG_COMPOSITION =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_COMPOSITION;
  static constexpr TraceFlag TRACE_FLAG_EXTRA =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_EXTRA;
  static constexpr TraceFlag TRACE_FLAG_HWC =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_HWC;
  static constexpr TraceFlag TRACE_FLAG_BUFFERS =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_BUFFERS;
  static constexpr TraceFlag TRACE_FLAG_VIRTUAL_DISPLAYS =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_VIRTUAL_DISPLAYS;
  static constexpr TraceFlag TRACE_FLAG_ALL =
    SurfaceFlingerLayersConfig_TraceFlag_TRACE_FLAG_ALL;
  static inline bool TraceFlag_IsValid(int value) {
    return SurfaceFlingerLayersConfig_TraceFlag_IsValid(value);
  }
  static constexpr TraceFlag TraceFlag_MIN =
    SurfaceFlingerLayersConfig_TraceFlag_TraceFlag_MIN;
  static constexpr TraceFlag TraceFlag_MAX =
    SurfaceFlingerLayersConfig_TraceFlag_TraceFlag_MAX;
  static constexpr int TraceFlag_ARRAYSIZE =
    SurfaceFlingerLayersConfig_TraceFlag_TraceFlag_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TraceFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TraceFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TraceFlag_Name.");
    return SurfaceFlingerLayersConfig_TraceFlag_Name(enum_t_value);
  }
  static inline bool TraceFlag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TraceFlag* value) {
    return SurfaceFlingerLayersConfig_TraceFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTraceFlagsFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // repeated .perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag trace_flags = 2;
  int trace_flags_size() const;
  private:
  int _internal_trace_flags_size() const;
  public:
  void clear_trace_flags();
  private:
  ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag _internal_trace_flags(int index) const;
  void _internal_add_trace_flags(::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_trace_flags();
  public:
  ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag trace_flags(int index) const;
  void set_trace_flags(int index, ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag value);
  void add_trace_flags(::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& trace_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_trace_flags();

  // optional .perfetto.protos.SurfaceFlingerLayersConfig.Mode mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::perfetto::protos::SurfaceFlingerLayersConfig_Mode mode() const;
  void set_mode(::perfetto::protos::SurfaceFlingerLayersConfig_Mode value);
  private:
  ::perfetto::protos::SurfaceFlingerLayersConfig_Mode _internal_mode() const;
  void _internal_set_mode(::perfetto::protos::SurfaceFlingerLayersConfig_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SurfaceFlingerLayersConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> trace_flags_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fsurfaceflinger_5flayers_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SurfaceFlingerLayersConfig

// optional .perfetto.protos.SurfaceFlingerLayersConfig.Mode mode = 1;
inline bool SurfaceFlingerLayersConfig::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SurfaceFlingerLayersConfig::has_mode() const {
  return _internal_has_mode();
}
inline void SurfaceFlingerLayersConfig::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::_internal_mode() const {
  return static_cast< ::perfetto::protos::SurfaceFlingerLayersConfig_Mode >(_impl_.mode_);
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig_Mode SurfaceFlingerLayersConfig::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SurfaceFlingerLayersConfig.mode)
  return _internal_mode();
}
inline void SurfaceFlingerLayersConfig::_internal_set_mode(::perfetto::protos::SurfaceFlingerLayersConfig_Mode value) {
  assert(::perfetto::protos::SurfaceFlingerLayersConfig_Mode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}
inline void SurfaceFlingerLayersConfig::set_mode(::perfetto::protos::SurfaceFlingerLayersConfig_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SurfaceFlingerLayersConfig.mode)
}

// repeated .perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag trace_flags = 2;
inline int SurfaceFlingerLayersConfig::_internal_trace_flags_size() const {
  return _impl_.trace_flags_.size();
}
inline int SurfaceFlingerLayersConfig::trace_flags_size() const {
  return _internal_trace_flags_size();
}
inline void SurfaceFlingerLayersConfig::clear_trace_flags() {
  _impl_.trace_flags_.Clear();
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::_internal_trace_flags(int index) const {
  return static_cast< ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag >(_impl_.trace_flags_.Get(index));
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag SurfaceFlingerLayersConfig::trace_flags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SurfaceFlingerLayersConfig.trace_flags)
  return _internal_trace_flags(index);
}
inline void SurfaceFlingerLayersConfig::set_trace_flags(int index, ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag value) {
  assert(::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag_IsValid(value));
  _impl_.trace_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SurfaceFlingerLayersConfig.trace_flags)
}
inline void SurfaceFlingerLayersConfig::_internal_add_trace_flags(::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag value) {
  assert(::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag_IsValid(value));
  _impl_.trace_flags_.Add(value);
}
inline void SurfaceFlingerLayersConfig::add_trace_flags(::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag value) {
  _internal_add_trace_flags(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SurfaceFlingerLayersConfig.trace_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SurfaceFlingerLayersConfig::trace_flags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SurfaceFlingerLayersConfig.trace_flags)
  return _impl_.trace_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SurfaceFlingerLayersConfig::_internal_mutable_trace_flags() {
  return &_impl_.trace_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SurfaceFlingerLayersConfig::mutable_trace_flags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SurfaceFlingerLayersConfig.trace_flags)
  return _internal_mutable_trace_flags();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::SurfaceFlingerLayersConfig_Mode> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::SurfaceFlingerLayersConfig_TraceFlag> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fandroid_2fsurfaceflinger_5flayers_5fconfig_2eproto
