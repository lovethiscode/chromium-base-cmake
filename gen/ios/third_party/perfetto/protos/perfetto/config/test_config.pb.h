// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/test_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftest_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftest_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2ftest_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2ftest_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class TestConfig;
struct TestConfigDefaultTypeInternal;
extern TestConfigDefaultTypeInternal _TestConfig_default_instance_;
class TestConfig_DummyFields;
struct TestConfig_DummyFieldsDefaultTypeInternal;
extern TestConfig_DummyFieldsDefaultTypeInternal _TestConfig_DummyFields_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TestConfig* Arena::CreateMaybeMessage<::perfetto::protos::TestConfig>(Arena*);
template<> ::perfetto::protos::TestConfig_DummyFields* Arena::CreateMaybeMessage<::perfetto::protos::TestConfig_DummyFields>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TestConfig_DummyFields final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestConfig.DummyFields) */ {
 public:
  inline TestConfig_DummyFields() : TestConfig_DummyFields(nullptr) {}
  ~TestConfig_DummyFields() override;
  explicit PROTOBUF_CONSTEXPR TestConfig_DummyFields(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestConfig_DummyFields(const TestConfig_DummyFields& from);
  TestConfig_DummyFields(TestConfig_DummyFields&& from) noexcept
    : TestConfig_DummyFields() {
    *this = ::std::move(from);
  }

  inline TestConfig_DummyFields& operator=(const TestConfig_DummyFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConfig_DummyFields& operator=(TestConfig_DummyFields&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TestConfig_DummyFields& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConfig_DummyFields* internal_default_instance() {
    return reinterpret_cast<const TestConfig_DummyFields*>(
               &_TestConfig_DummyFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestConfig_DummyFields& a, TestConfig_DummyFields& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TestConfig_DummyFields* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConfig_DummyFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConfig_DummyFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestConfig_DummyFields>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TestConfig_DummyFields& from);
  void MergeFrom(const TestConfig_DummyFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestConfig_DummyFields* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TestConfig.DummyFields";
  }
  protected:
  explicit TestConfig_DummyFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldStringFieldNumber = 13,
    kFieldBytesFieldNumber = 14,
    kFieldUint32FieldNumber = 1,
    kFieldInt32FieldNumber = 2,
    kFieldUint64FieldNumber = 3,
    kFieldInt64FieldNumber = 4,
    kFieldFixed64FieldNumber = 5,
    kFieldSfixed64FieldNumber = 6,
    kFieldFixed32FieldNumber = 7,
    kFieldSfixed32FieldNumber = 8,
    kFieldDoubleFieldNumber = 9,
    kFieldSint64FieldNumber = 11,
    kFieldFloatFieldNumber = 10,
    kFieldSint32FieldNumber = 12,
  };
  // optional string field_string = 13;
  bool has_field_string() const;
  private:
  bool _internal_has_field_string() const;
  public:
  void clear_field_string();
  const std::string& field_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_string();
  PROTOBUF_NODISCARD std::string* release_field_string();
  void set_allocated_field_string(std::string* field_string);
  private:
  const std::string& _internal_field_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_string(const std::string& value);
  std::string* _internal_mutable_field_string();
  public:

  // optional bytes field_bytes = 14;
  bool has_field_bytes() const;
  private:
  bool _internal_has_field_bytes() const;
  public:
  void clear_field_bytes();
  const std::string& field_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_bytes();
  PROTOBUF_NODISCARD std::string* release_field_bytes();
  void set_allocated_field_bytes(std::string* field_bytes);
  private:
  const std::string& _internal_field_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_bytes(const std::string& value);
  std::string* _internal_mutable_field_bytes();
  public:

  // optional uint32 field_uint32 = 1;
  bool has_field_uint32() const;
  private:
  bool _internal_has_field_uint32() const;
  public:
  void clear_field_uint32();
  uint32_t field_uint32() const;
  void set_field_uint32(uint32_t value);
  private:
  uint32_t _internal_field_uint32() const;
  void _internal_set_field_uint32(uint32_t value);
  public:

  // optional int32 field_int32 = 2;
  bool has_field_int32() const;
  private:
  bool _internal_has_field_int32() const;
  public:
  void clear_field_int32();
  int32_t field_int32() const;
  void set_field_int32(int32_t value);
  private:
  int32_t _internal_field_int32() const;
  void _internal_set_field_int32(int32_t value);
  public:

  // optional uint64 field_uint64 = 3;
  bool has_field_uint64() const;
  private:
  bool _internal_has_field_uint64() const;
  public:
  void clear_field_uint64();
  uint64_t field_uint64() const;
  void set_field_uint64(uint64_t value);
  private:
  uint64_t _internal_field_uint64() const;
  void _internal_set_field_uint64(uint64_t value);
  public:

  // optional int64 field_int64 = 4;
  bool has_field_int64() const;
  private:
  bool _internal_has_field_int64() const;
  public:
  void clear_field_int64();
  int64_t field_int64() const;
  void set_field_int64(int64_t value);
  private:
  int64_t _internal_field_int64() const;
  void _internal_set_field_int64(int64_t value);
  public:

  // optional fixed64 field_fixed64 = 5;
  bool has_field_fixed64() const;
  private:
  bool _internal_has_field_fixed64() const;
  public:
  void clear_field_fixed64();
  uint64_t field_fixed64() const;
  void set_field_fixed64(uint64_t value);
  private:
  uint64_t _internal_field_fixed64() const;
  void _internal_set_field_fixed64(uint64_t value);
  public:

  // optional sfixed64 field_sfixed64 = 6;
  bool has_field_sfixed64() const;
  private:
  bool _internal_has_field_sfixed64() const;
  public:
  void clear_field_sfixed64();
  int64_t field_sfixed64() const;
  void set_field_sfixed64(int64_t value);
  private:
  int64_t _internal_field_sfixed64() const;
  void _internal_set_field_sfixed64(int64_t value);
  public:

  // optional fixed32 field_fixed32 = 7;
  bool has_field_fixed32() const;
  private:
  bool _internal_has_field_fixed32() const;
  public:
  void clear_field_fixed32();
  uint32_t field_fixed32() const;
  void set_field_fixed32(uint32_t value);
  private:
  uint32_t _internal_field_fixed32() const;
  void _internal_set_field_fixed32(uint32_t value);
  public:

  // optional sfixed32 field_sfixed32 = 8;
  bool has_field_sfixed32() const;
  private:
  bool _internal_has_field_sfixed32() const;
  public:
  void clear_field_sfixed32();
  int32_t field_sfixed32() const;
  void set_field_sfixed32(int32_t value);
  private:
  int32_t _internal_field_sfixed32() const;
  void _internal_set_field_sfixed32(int32_t value);
  public:

  // optional double field_double = 9;
  bool has_field_double() const;
  private:
  bool _internal_has_field_double() const;
  public:
  void clear_field_double();
  double field_double() const;
  void set_field_double(double value);
  private:
  double _internal_field_double() const;
  void _internal_set_field_double(double value);
  public:

  // optional sint64 field_sint64 = 11;
  bool has_field_sint64() const;
  private:
  bool _internal_has_field_sint64() const;
  public:
  void clear_field_sint64();
  int64_t field_sint64() const;
  void set_field_sint64(int64_t value);
  private:
  int64_t _internal_field_sint64() const;
  void _internal_set_field_sint64(int64_t value);
  public:

  // optional float field_float = 10;
  bool has_field_float() const;
  private:
  bool _internal_has_field_float() const;
  public:
  void clear_field_float();
  float field_float() const;
  void set_field_float(float value);
  private:
  float _internal_field_float() const;
  void _internal_set_field_float(float value);
  public:

  // optional sint32 field_sint32 = 12;
  bool has_field_sint32() const;
  private:
  bool _internal_has_field_sint32() const;
  public:
  void clear_field_sint32();
  int32_t field_sint32() const;
  void set_field_sint32(int32_t value);
  private:
  int32_t _internal_field_sint32() const;
  void _internal_set_field_sint32(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TestConfig.DummyFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_bytes_;
    uint32_t field_uint32_;
    int32_t field_int32_;
    uint64_t field_uint64_;
    int64_t field_int64_;
    uint64_t field_fixed64_;
    int64_t field_sfixed64_;
    uint32_t field_fixed32_;
    int32_t field_sfixed32_;
    double field_double_;
    int64_t field_sint64_;
    float field_float_;
    int32_t field_sint32_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftest_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TestConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestConfig) */ {
 public:
  inline TestConfig() : TestConfig(nullptr) {}
  ~TestConfig() override;
  explicit PROTOBUF_CONSTEXPR TestConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestConfig(const TestConfig& from);
  TestConfig(TestConfig&& from) noexcept
    : TestConfig() {
    *this = ::std::move(from);
  }

  inline TestConfig& operator=(const TestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConfig& operator=(TestConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TestConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestConfig* internal_default_instance() {
    return reinterpret_cast<const TestConfig*>(
               &_TestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestConfig& a, TestConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TestConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TestConfig& from);
  void MergeFrom(const TestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TestConfig";
  }
  protected:
  explicit TestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TestConfig_DummyFields DummyFields;

  // accessors -------------------------------------------------------

  enum : int {
    kDummyFieldsFieldNumber = 6,
    kMessageCountFieldNumber = 1,
    kMaxMessagesPerSecondFieldNumber = 2,
    kSeedFieldNumber = 3,
    kMessageSizeFieldNumber = 4,
    kSendBatchOnRegisterFieldNumber = 5,
  };
  // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
  bool has_dummy_fields() const;
  private:
  bool _internal_has_dummy_fields() const;
  public:
  void clear_dummy_fields();
  const ::perfetto::protos::TestConfig_DummyFields& dummy_fields() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TestConfig_DummyFields* release_dummy_fields();
  ::perfetto::protos::TestConfig_DummyFields* mutable_dummy_fields();
  void set_allocated_dummy_fields(::perfetto::protos::TestConfig_DummyFields* dummy_fields);
  private:
  const ::perfetto::protos::TestConfig_DummyFields& _internal_dummy_fields() const;
  ::perfetto::protos::TestConfig_DummyFields* _internal_mutable_dummy_fields();
  public:
  void unsafe_arena_set_allocated_dummy_fields(
      ::perfetto::protos::TestConfig_DummyFields* dummy_fields);
  ::perfetto::protos::TestConfig_DummyFields* unsafe_arena_release_dummy_fields();

  // optional uint32 message_count = 1;
  bool has_message_count() const;
  private:
  bool _internal_has_message_count() const;
  public:
  void clear_message_count();
  uint32_t message_count() const;
  void set_message_count(uint32_t value);
  private:
  uint32_t _internal_message_count() const;
  void _internal_set_message_count(uint32_t value);
  public:

  // optional uint32 max_messages_per_second = 2;
  bool has_max_messages_per_second() const;
  private:
  bool _internal_has_max_messages_per_second() const;
  public:
  void clear_max_messages_per_second();
  uint32_t max_messages_per_second() const;
  void set_max_messages_per_second(uint32_t value);
  private:
  uint32_t _internal_max_messages_per_second() const;
  void _internal_set_max_messages_per_second(uint32_t value);
  public:

  // optional uint32 seed = 3;
  bool has_seed() const;
  private:
  bool _internal_has_seed() const;
  public:
  void clear_seed();
  uint32_t seed() const;
  void set_seed(uint32_t value);
  private:
  uint32_t _internal_seed() const;
  void _internal_set_seed(uint32_t value);
  public:

  // optional uint32 message_size = 4;
  bool has_message_size() const;
  private:
  bool _internal_has_message_size() const;
  public:
  void clear_message_size();
  uint32_t message_size() const;
  void set_message_size(uint32_t value);
  private:
  uint32_t _internal_message_size() const;
  void _internal_set_message_size(uint32_t value);
  public:

  // optional bool send_batch_on_register = 5;
  bool has_send_batch_on_register() const;
  private:
  bool _internal_has_send_batch_on_register() const;
  public:
  void clear_send_batch_on_register();
  bool send_batch_on_register() const;
  void set_send_batch_on_register(bool value);
  private:
  bool _internal_send_batch_on_register() const;
  void _internal_set_send_batch_on_register(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TestConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::TestConfig_DummyFields* dummy_fields_;
    uint32_t message_count_;
    uint32_t max_messages_per_second_;
    uint32_t seed_;
    uint32_t message_size_;
    bool send_batch_on_register_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftest_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestConfig_DummyFields

// optional uint32 field_uint32 = 1;
inline bool TestConfig_DummyFields::_internal_has_field_uint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_uint32() const {
  return _internal_has_field_uint32();
}
inline void TestConfig_DummyFields::clear_field_uint32() {
  _impl_.field_uint32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TestConfig_DummyFields::_internal_field_uint32() const {
  return _impl_.field_uint32_;
}
inline uint32_t TestConfig_DummyFields::field_uint32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_uint32)
  return _internal_field_uint32();
}
inline void TestConfig_DummyFields::_internal_set_field_uint32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.field_uint32_ = value;
}
inline void TestConfig_DummyFields::set_field_uint32(uint32_t value) {
  _internal_set_field_uint32(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_uint32)
}

// optional int32 field_int32 = 2;
inline bool TestConfig_DummyFields::_internal_has_field_int32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_int32() const {
  return _internal_has_field_int32();
}
inline void TestConfig_DummyFields::clear_field_int32() {
  _impl_.field_int32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestConfig_DummyFields::_internal_field_int32() const {
  return _impl_.field_int32_;
}
inline int32_t TestConfig_DummyFields::field_int32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_int32)
  return _internal_field_int32();
}
inline void TestConfig_DummyFields::_internal_set_field_int32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.field_int32_ = value;
}
inline void TestConfig_DummyFields::set_field_int32(int32_t value) {
  _internal_set_field_int32(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_int32)
}

// optional uint64 field_uint64 = 3;
inline bool TestConfig_DummyFields::_internal_has_field_uint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_uint64() const {
  return _internal_has_field_uint64();
}
inline void TestConfig_DummyFields::clear_field_uint64() {
  _impl_.field_uint64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t TestConfig_DummyFields::_internal_field_uint64() const {
  return _impl_.field_uint64_;
}
inline uint64_t TestConfig_DummyFields::field_uint64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_uint64)
  return _internal_field_uint64();
}
inline void TestConfig_DummyFields::_internal_set_field_uint64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.field_uint64_ = value;
}
inline void TestConfig_DummyFields::set_field_uint64(uint64_t value) {
  _internal_set_field_uint64(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_uint64)
}

// optional int64 field_int64 = 4;
inline bool TestConfig_DummyFields::_internal_has_field_int64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_int64() const {
  return _internal_has_field_int64();
}
inline void TestConfig_DummyFields::clear_field_int64() {
  _impl_.field_int64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t TestConfig_DummyFields::_internal_field_int64() const {
  return _impl_.field_int64_;
}
inline int64_t TestConfig_DummyFields::field_int64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_int64)
  return _internal_field_int64();
}
inline void TestConfig_DummyFields::_internal_set_field_int64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.field_int64_ = value;
}
inline void TestConfig_DummyFields::set_field_int64(int64_t value) {
  _internal_set_field_int64(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_int64)
}

// optional fixed64 field_fixed64 = 5;
inline bool TestConfig_DummyFields::_internal_has_field_fixed64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_fixed64() const {
  return _internal_has_field_fixed64();
}
inline void TestConfig_DummyFields::clear_field_fixed64() {
  _impl_.field_fixed64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t TestConfig_DummyFields::_internal_field_fixed64() const {
  return _impl_.field_fixed64_;
}
inline uint64_t TestConfig_DummyFields::field_fixed64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_fixed64)
  return _internal_field_fixed64();
}
inline void TestConfig_DummyFields::_internal_set_field_fixed64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.field_fixed64_ = value;
}
inline void TestConfig_DummyFields::set_field_fixed64(uint64_t value) {
  _internal_set_field_fixed64(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_fixed64)
}

// optional sfixed64 field_sfixed64 = 6;
inline bool TestConfig_DummyFields::_internal_has_field_sfixed64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_sfixed64() const {
  return _internal_has_field_sfixed64();
}
inline void TestConfig_DummyFields::clear_field_sfixed64() {
  _impl_.field_sfixed64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t TestConfig_DummyFields::_internal_field_sfixed64() const {
  return _impl_.field_sfixed64_;
}
inline int64_t TestConfig_DummyFields::field_sfixed64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sfixed64)
  return _internal_field_sfixed64();
}
inline void TestConfig_DummyFields::_internal_set_field_sfixed64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.field_sfixed64_ = value;
}
inline void TestConfig_DummyFields::set_field_sfixed64(int64_t value) {
  _internal_set_field_sfixed64(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sfixed64)
}

// optional fixed32 field_fixed32 = 7;
inline bool TestConfig_DummyFields::_internal_has_field_fixed32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_fixed32() const {
  return _internal_has_field_fixed32();
}
inline void TestConfig_DummyFields::clear_field_fixed32() {
  _impl_.field_fixed32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t TestConfig_DummyFields::_internal_field_fixed32() const {
  return _impl_.field_fixed32_;
}
inline uint32_t TestConfig_DummyFields::field_fixed32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_fixed32)
  return _internal_field_fixed32();
}
inline void TestConfig_DummyFields::_internal_set_field_fixed32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.field_fixed32_ = value;
}
inline void TestConfig_DummyFields::set_field_fixed32(uint32_t value) {
  _internal_set_field_fixed32(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_fixed32)
}

// optional sfixed32 field_sfixed32 = 8;
inline bool TestConfig_DummyFields::_internal_has_field_sfixed32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_sfixed32() const {
  return _internal_has_field_sfixed32();
}
inline void TestConfig_DummyFields::clear_field_sfixed32() {
  _impl_.field_sfixed32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t TestConfig_DummyFields::_internal_field_sfixed32() const {
  return _impl_.field_sfixed32_;
}
inline int32_t TestConfig_DummyFields::field_sfixed32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sfixed32)
  return _internal_field_sfixed32();
}
inline void TestConfig_DummyFields::_internal_set_field_sfixed32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.field_sfixed32_ = value;
}
inline void TestConfig_DummyFields::set_field_sfixed32(int32_t value) {
  _internal_set_field_sfixed32(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sfixed32)
}

// optional double field_double = 9;
inline bool TestConfig_DummyFields::_internal_has_field_double() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_double() const {
  return _internal_has_field_double();
}
inline void TestConfig_DummyFields::clear_field_double() {
  _impl_.field_double_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double TestConfig_DummyFields::_internal_field_double() const {
  return _impl_.field_double_;
}
inline double TestConfig_DummyFields::field_double() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_double)
  return _internal_field_double();
}
inline void TestConfig_DummyFields::_internal_set_field_double(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.field_double_ = value;
}
inline void TestConfig_DummyFields::set_field_double(double value) {
  _internal_set_field_double(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_double)
}

// optional float field_float = 10;
inline bool TestConfig_DummyFields::_internal_has_field_float() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_float() const {
  return _internal_has_field_float();
}
inline void TestConfig_DummyFields::clear_field_float() {
  _impl_.field_float_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float TestConfig_DummyFields::_internal_field_float() const {
  return _impl_.field_float_;
}
inline float TestConfig_DummyFields::field_float() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_float)
  return _internal_field_float();
}
inline void TestConfig_DummyFields::_internal_set_field_float(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.field_float_ = value;
}
inline void TestConfig_DummyFields::set_field_float(float value) {
  _internal_set_field_float(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_float)
}

// optional sint64 field_sint64 = 11;
inline bool TestConfig_DummyFields::_internal_has_field_sint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_sint64() const {
  return _internal_has_field_sint64();
}
inline void TestConfig_DummyFields::clear_field_sint64() {
  _impl_.field_sint64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int64_t TestConfig_DummyFields::_internal_field_sint64() const {
  return _impl_.field_sint64_;
}
inline int64_t TestConfig_DummyFields::field_sint64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sint64)
  return _internal_field_sint64();
}
inline void TestConfig_DummyFields::_internal_set_field_sint64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.field_sint64_ = value;
}
inline void TestConfig_DummyFields::set_field_sint64(int64_t value) {
  _internal_set_field_sint64(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sint64)
}

// optional sint32 field_sint32 = 12;
inline bool TestConfig_DummyFields::_internal_has_field_sint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_sint32() const {
  return _internal_has_field_sint32();
}
inline void TestConfig_DummyFields::clear_field_sint32() {
  _impl_.field_sint32_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t TestConfig_DummyFields::_internal_field_sint32() const {
  return _impl_.field_sint32_;
}
inline int32_t TestConfig_DummyFields::field_sint32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_sint32)
  return _internal_field_sint32();
}
inline void TestConfig_DummyFields::_internal_set_field_sint32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.field_sint32_ = value;
}
inline void TestConfig_DummyFields::set_field_sint32(int32_t value) {
  _internal_set_field_sint32(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_sint32)
}

// optional string field_string = 13;
inline bool TestConfig_DummyFields::_internal_has_field_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_string() const {
  return _internal_has_field_string();
}
inline void TestConfig_DummyFields::clear_field_string() {
  _impl_.field_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestConfig_DummyFields::field_string() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_string)
  return _internal_field_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestConfig_DummyFields::set_field_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.field_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_string)
}
inline std::string* TestConfig_DummyFields::mutable_field_string() {
  std::string* _s = _internal_mutable_field_string();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestConfig.DummyFields.field_string)
  return _s;
}
inline const std::string& TestConfig_DummyFields::_internal_field_string() const {
  return _impl_.field_string_.Get();
}
inline void TestConfig_DummyFields::_internal_set_field_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.field_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestConfig_DummyFields::_internal_mutable_field_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.field_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestConfig_DummyFields::release_field_string() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestConfig.DummyFields.field_string)
  if (!_internal_has_field_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.field_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_string_.IsDefault()) {
    _impl_.field_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestConfig_DummyFields::set_allocated_field_string(std::string* field_string) {
  if (field_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.field_string_.SetAllocated(field_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_string_.IsDefault()) {
    _impl_.field_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestConfig.DummyFields.field_string)
}

// optional bytes field_bytes = 14;
inline bool TestConfig_DummyFields::_internal_has_field_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestConfig_DummyFields::has_field_bytes() const {
  return _internal_has_field_bytes();
}
inline void TestConfig_DummyFields::clear_field_bytes() {
  _impl_.field_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestConfig_DummyFields::field_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.DummyFields.field_bytes)
  return _internal_field_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestConfig_DummyFields::set_field_bytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.field_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.DummyFields.field_bytes)
}
inline std::string* TestConfig_DummyFields::mutable_field_bytes() {
  std::string* _s = _internal_mutable_field_bytes();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestConfig.DummyFields.field_bytes)
  return _s;
}
inline const std::string& TestConfig_DummyFields::_internal_field_bytes() const {
  return _impl_.field_bytes_.Get();
}
inline void TestConfig_DummyFields::_internal_set_field_bytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.field_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestConfig_DummyFields::_internal_mutable_field_bytes() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.field_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* TestConfig_DummyFields::release_field_bytes() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestConfig.DummyFields.field_bytes)
  if (!_internal_has_field_bytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.field_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_bytes_.IsDefault()) {
    _impl_.field_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestConfig_DummyFields::set_allocated_field_bytes(std::string* field_bytes) {
  if (field_bytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.field_bytes_.SetAllocated(field_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_bytes_.IsDefault()) {
    _impl_.field_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestConfig.DummyFields.field_bytes)
}

// -------------------------------------------------------------------

// TestConfig

// optional uint32 message_count = 1;
inline bool TestConfig::_internal_has_message_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestConfig::has_message_count() const {
  return _internal_has_message_count();
}
inline void TestConfig::clear_message_count() {
  _impl_.message_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TestConfig::_internal_message_count() const {
  return _impl_.message_count_;
}
inline uint32_t TestConfig::message_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_count)
  return _internal_message_count();
}
inline void TestConfig::_internal_set_message_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_count_ = value;
}
inline void TestConfig::set_message_count(uint32_t value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_count)
}

// optional uint32 max_messages_per_second = 2;
inline bool TestConfig::_internal_has_max_messages_per_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestConfig::has_max_messages_per_second() const {
  return _internal_has_max_messages_per_second();
}
inline void TestConfig::clear_max_messages_per_second() {
  _impl_.max_messages_per_second_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TestConfig::_internal_max_messages_per_second() const {
  return _impl_.max_messages_per_second_;
}
inline uint32_t TestConfig::max_messages_per_second() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.max_messages_per_second)
  return _internal_max_messages_per_second();
}
inline void TestConfig::_internal_set_max_messages_per_second(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_messages_per_second_ = value;
}
inline void TestConfig::set_max_messages_per_second(uint32_t value) {
  _internal_set_max_messages_per_second(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.max_messages_per_second)
}

// optional uint32 seed = 3;
inline bool TestConfig::_internal_has_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestConfig::has_seed() const {
  return _internal_has_seed();
}
inline void TestConfig::clear_seed() {
  _impl_.seed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t TestConfig::_internal_seed() const {
  return _impl_.seed_;
}
inline uint32_t TestConfig::seed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.seed)
  return _internal_seed();
}
inline void TestConfig::_internal_set_seed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seed_ = value;
}
inline void TestConfig::set_seed(uint32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.seed)
}

// optional uint32 message_size = 4;
inline bool TestConfig::_internal_has_message_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestConfig::has_message_size() const {
  return _internal_has_message_size();
}
inline void TestConfig::clear_message_size() {
  _impl_.message_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t TestConfig::_internal_message_size() const {
  return _impl_.message_size_;
}
inline uint32_t TestConfig::message_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.message_size)
  return _internal_message_size();
}
inline void TestConfig::_internal_set_message_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.message_size_ = value;
}
inline void TestConfig::set_message_size(uint32_t value) {
  _internal_set_message_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.message_size)
}

// optional bool send_batch_on_register = 5;
inline bool TestConfig::_internal_has_send_batch_on_register() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestConfig::has_send_batch_on_register() const {
  return _internal_has_send_batch_on_register();
}
inline void TestConfig::clear_send_batch_on_register() {
  _impl_.send_batch_on_register_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool TestConfig::_internal_send_batch_on_register() const {
  return _impl_.send_batch_on_register_;
}
inline bool TestConfig::send_batch_on_register() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.send_batch_on_register)
  return _internal_send_batch_on_register();
}
inline void TestConfig::_internal_set_send_batch_on_register(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.send_batch_on_register_ = value;
}
inline void TestConfig::set_send_batch_on_register(bool value) {
  _internal_set_send_batch_on_register(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestConfig.send_batch_on_register)
}

// optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
inline bool TestConfig::_internal_has_dummy_fields() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dummy_fields_ != nullptr);
  return value;
}
inline bool TestConfig::has_dummy_fields() const {
  return _internal_has_dummy_fields();
}
inline void TestConfig::clear_dummy_fields() {
  if (_impl_.dummy_fields_ != nullptr) _impl_.dummy_fields_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::TestConfig_DummyFields& TestConfig::_internal_dummy_fields() const {
  const ::perfetto::protos::TestConfig_DummyFields* p = _impl_.dummy_fields_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TestConfig_DummyFields&>(
      ::perfetto::protos::_TestConfig_DummyFields_default_instance_);
}
inline const ::perfetto::protos::TestConfig_DummyFields& TestConfig::dummy_fields() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestConfig.dummy_fields)
  return _internal_dummy_fields();
}
inline void TestConfig::unsafe_arena_set_allocated_dummy_fields(
    ::perfetto::protos::TestConfig_DummyFields* dummy_fields) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dummy_fields_);
  }
  _impl_.dummy_fields_ = dummy_fields;
  if (dummy_fields) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TestConfig.dummy_fields)
}
inline ::perfetto::protos::TestConfig_DummyFields* TestConfig::release_dummy_fields() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TestConfig_DummyFields* temp = _impl_.dummy_fields_;
  _impl_.dummy_fields_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TestConfig_DummyFields* TestConfig::unsafe_arena_release_dummy_fields() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestConfig.dummy_fields)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TestConfig_DummyFields* temp = _impl_.dummy_fields_;
  _impl_.dummy_fields_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TestConfig_DummyFields* TestConfig::_internal_mutable_dummy_fields() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dummy_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TestConfig_DummyFields>(GetArenaForAllocation());
    _impl_.dummy_fields_ = p;
  }
  return _impl_.dummy_fields_;
}
inline ::perfetto::protos::TestConfig_DummyFields* TestConfig::mutable_dummy_fields() {
  ::perfetto::protos::TestConfig_DummyFields* _msg = _internal_mutable_dummy_fields();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestConfig.dummy_fields)
  return _msg;
}
inline void TestConfig::set_allocated_dummy_fields(::perfetto::protos::TestConfig_DummyFields* dummy_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dummy_fields_;
  }
  if (dummy_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dummy_fields);
    if (message_arena != submessage_arena) {
      dummy_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dummy_fields, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dummy_fields_ = dummy_fields;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestConfig.dummy_fields)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftest_5fconfig_2eproto
