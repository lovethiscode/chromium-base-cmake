// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/test_config.proto

#include "protos/perfetto/config/test_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TestConfig_DummyFields::TestConfig_DummyFields(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.field_uint32_)*/0u
  , /*decltype(_impl_.field_int32_)*/0
  , /*decltype(_impl_.field_uint64_)*/uint64_t{0u}
  , /*decltype(_impl_.field_int64_)*/int64_t{0}
  , /*decltype(_impl_.field_fixed64_)*/uint64_t{0u}
  , /*decltype(_impl_.field_sfixed64_)*/int64_t{0}
  , /*decltype(_impl_.field_fixed32_)*/0u
  , /*decltype(_impl_.field_sfixed32_)*/0
  , /*decltype(_impl_.field_double_)*/0
  , /*decltype(_impl_.field_sint64_)*/int64_t{0}
  , /*decltype(_impl_.field_float_)*/0
  , /*decltype(_impl_.field_sint32_)*/0} {}
struct TestConfig_DummyFieldsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConfig_DummyFieldsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConfig_DummyFieldsDefaultTypeInternal() {}
  union {
    TestConfig_DummyFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConfig_DummyFieldsDefaultTypeInternal _TestConfig_DummyFields_default_instance_;
PROTOBUF_CONSTEXPR TestConfig::TestConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dummy_fields_)*/nullptr
  , /*decltype(_impl_.message_count_)*/0u
  , /*decltype(_impl_.max_messages_per_second_)*/0u
  , /*decltype(_impl_.seed_)*/0u
  , /*decltype(_impl_.message_size_)*/0u
  , /*decltype(_impl_.send_batch_on_register_)*/false} {}
struct TestConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConfigDefaultTypeInternal() {}
  union {
    TestConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConfigDefaultTypeInternal _TestConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class TestConfig_DummyFields::_Internal {
 public:
  using HasBits = decltype(std::declval<TestConfig_DummyFields>()._impl_._has_bits_);
  static void set_has_field_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_field_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_field_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_field_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_field_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_field_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_field_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_field_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_field_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_field_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestConfig_DummyFields::TestConfig_DummyFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TestConfig.DummyFields)
}
TestConfig_DummyFields::TestConfig_DummyFields(const TestConfig_DummyFields& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TestConfig_DummyFields* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_string_){}
    , decltype(_impl_.field_bytes_){}
    , decltype(_impl_.field_uint32_){}
    , decltype(_impl_.field_int32_){}
    , decltype(_impl_.field_uint64_){}
    , decltype(_impl_.field_int64_){}
    , decltype(_impl_.field_fixed64_){}
    , decltype(_impl_.field_sfixed64_){}
    , decltype(_impl_.field_fixed32_){}
    , decltype(_impl_.field_sfixed32_){}
    , decltype(_impl_.field_double_){}
    , decltype(_impl_.field_sint64_){}
    , decltype(_impl_.field_float_){}
    , decltype(_impl_.field_sint32_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.field_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_field_string()) {
    _this->_impl_.field_string_.Set(from._internal_field_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.field_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_field_bytes()) {
    _this->_impl_.field_bytes_.Set(from._internal_field_bytes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.field_uint32_, &from._impl_.field_uint32_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.field_sint32_) -
    reinterpret_cast<char*>(&_impl_.field_uint32_)) + sizeof(_impl_.field_sint32_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestConfig.DummyFields)
}

inline void TestConfig_DummyFields::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_string_){}
    , decltype(_impl_.field_bytes_){}
    , decltype(_impl_.field_uint32_){0u}
    , decltype(_impl_.field_int32_){0}
    , decltype(_impl_.field_uint64_){uint64_t{0u}}
    , decltype(_impl_.field_int64_){int64_t{0}}
    , decltype(_impl_.field_fixed64_){uint64_t{0u}}
    , decltype(_impl_.field_sfixed64_){int64_t{0}}
    , decltype(_impl_.field_fixed32_){0u}
    , decltype(_impl_.field_sfixed32_){0}
    , decltype(_impl_.field_double_){0}
    , decltype(_impl_.field_sint64_){int64_t{0}}
    , decltype(_impl_.field_float_){0}
    , decltype(_impl_.field_sint32_){0}
  };
  _impl_.field_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.field_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestConfig_DummyFields::~TestConfig_DummyFields() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestConfig.DummyFields)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConfig_DummyFields::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_string_.Destroy();
  _impl_.field_bytes_.Destroy();
}

void TestConfig_DummyFields::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConfig_DummyFields::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestConfig.DummyFields)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.field_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.field_bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.field_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.field_sfixed64_) -
        reinterpret_cast<char*>(&_impl_.field_uint32_)) + sizeof(_impl_.field_sfixed64_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.field_fixed32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.field_sint32_) -
        reinterpret_cast<char*>(&_impl_.field_fixed32_)) + sizeof(_impl_.field_sint32_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestConfig_DummyFields::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field_uint32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field_uint32(&has_bits);
          _impl_.field_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field_int32(&has_bits);
          _impl_.field_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 field_uint64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_field_uint64(&has_bits);
          _impl_.field_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 field_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_field_int64(&has_bits);
          _impl_.field_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 field_fixed64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_field_fixed64(&has_bits);
          _impl_.field_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 field_sfixed64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_field_sfixed64(&has_bits);
          _impl_.field_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 field_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_field_fixed32(&has_bits);
          _impl_.field_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 field_sfixed32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_field_sfixed32(&has_bits);
          _impl_.field_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional double field_double = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_field_double(&has_bits);
          _impl_.field_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float field_float = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_field_float(&has_bits);
          _impl_.field_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 field_sint64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_field_sint64(&has_bits);
          _impl_.field_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 field_sint32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_field_sint32(&has_bits);
          _impl_.field_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string field_string = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_field_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes field_bytes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_field_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConfig_DummyFields::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TestConfig.DummyFields)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field_uint32 = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field_uint32(), target);
  }

  // optional int32 field_int32 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_field_int32(), target);
  }

  // optional uint64 field_uint64 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_field_uint64(), target);
  }

  // optional int64 field_int64 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_field_int64(), target);
  }

  // optional fixed64 field_fixed64 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_field_fixed64(), target);
  }

  // optional sfixed64 field_sfixed64 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_field_sfixed64(), target);
  }

  // optional fixed32 field_fixed32 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_field_fixed32(), target);
  }

  // optional sfixed32 field_sfixed32 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(8, this->_internal_field_sfixed32(), target);
  }

  // optional double field_double = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_field_double(), target);
  }

  // optional float field_float = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_field_float(), target);
  }

  // optional sint64 field_sint64 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(11, this->_internal_field_sint64(), target);
  }

  // optional sint32 field_sint32 = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(12, this->_internal_field_sint32(), target);
  }

  // optional string field_string = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_field_string(), target);
  }

  // optional bytes field_bytes = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_field_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TestConfig.DummyFields)
  return target;
}

size_t TestConfig_DummyFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestConfig.DummyFields)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string field_string = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field_string());
    }

    // optional bytes field_bytes = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_field_bytes());
    }

    // optional uint32 field_uint32 = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field_uint32());
    }

    // optional int32 field_int32 = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_int32());
    }

    // optional uint64 field_uint64 = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_field_uint64());
    }

    // optional int64 field_int64 = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_field_int64());
    }

    // optional fixed64 field_fixed64 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 field_sfixed64 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional fixed32 field_fixed32 = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional sfixed32 field_sfixed32 = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional double field_double = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional sint64 field_sint64 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_field_sint64());
    }

    // optional float field_float = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional sint32 field_sint32 = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_field_sint32());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConfig_DummyFields::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestConfig_DummyFields*>(
      &from));
}

void TestConfig_DummyFields::MergeFrom(const TestConfig_DummyFields& from) {
  TestConfig_DummyFields* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestConfig.DummyFields)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_field_string(from._internal_field_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_field_bytes(from._internal_field_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.field_uint32_ = from._impl_.field_uint32_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.field_int32_ = from._impl_.field_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.field_uint64_ = from._impl_.field_uint64_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.field_int64_ = from._impl_.field_int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.field_fixed64_ = from._impl_.field_fixed64_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.field_sfixed64_ = from._impl_.field_sfixed64_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.field_fixed32_ = from._impl_.field_fixed32_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.field_sfixed32_ = from._impl_.field_sfixed32_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.field_double_ = from._impl_.field_double_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.field_sint64_ = from._impl_.field_sint64_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.field_float_ = from._impl_.field_float_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.field_sint32_ = from._impl_.field_sint32_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestConfig_DummyFields::CopyFrom(const TestConfig_DummyFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestConfig.DummyFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig_DummyFields::IsInitialized() const {
  return true;
}

void TestConfig_DummyFields::InternalSwap(TestConfig_DummyFields* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_string_, lhs_arena,
      &other->_impl_.field_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_bytes_, lhs_arena,
      &other->_impl_.field_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestConfig_DummyFields, _impl_.field_sint32_)
      + sizeof(TestConfig_DummyFields::_impl_.field_sint32_)
      - PROTOBUF_FIELD_OFFSET(TestConfig_DummyFields, _impl_.field_uint32_)>(
          reinterpret_cast<char*>(&_impl_.field_uint32_),
          reinterpret_cast<char*>(&other->_impl_.field_uint32_));
}

std::string TestConfig_DummyFields::GetTypeName() const {
  return "perfetto.protos.TestConfig.DummyFields";
}


// ===================================================================

class TestConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TestConfig>()._impl_._has_bits_);
  static void set_has_message_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_messages_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send_batch_on_register(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::TestConfig_DummyFields& dummy_fields(const TestConfig* msg);
  static void set_has_dummy_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::TestConfig_DummyFields&
TestConfig::_Internal::dummy_fields(const TestConfig* msg) {
  return *msg->_impl_.dummy_fields_;
}
TestConfig::TestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TestConfig)
}
TestConfig::TestConfig(const TestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TestConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_fields_){nullptr}
    , decltype(_impl_.message_count_){}
    , decltype(_impl_.max_messages_per_second_){}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.message_size_){}
    , decltype(_impl_.send_batch_on_register_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_dummy_fields()) {
    _this->_impl_.dummy_fields_ = new ::perfetto::protos::TestConfig_DummyFields(*from._impl_.dummy_fields_);
  }
  ::memcpy(&_impl_.message_count_, &from._impl_.message_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.send_batch_on_register_) -
    reinterpret_cast<char*>(&_impl_.message_count_)) + sizeof(_impl_.send_batch_on_register_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestConfig)
}

inline void TestConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_fields_){nullptr}
    , decltype(_impl_.message_count_){0u}
    , decltype(_impl_.max_messages_per_second_){0u}
    , decltype(_impl_.seed_){0u}
    , decltype(_impl_.message_size_){0u}
    , decltype(_impl_.send_batch_on_register_){false}
  };
}

TestConfig::~TestConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dummy_fields_;
}

void TestConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.dummy_fields_ != nullptr);
    _impl_.dummy_fields_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.message_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.send_batch_on_register_) -
        reinterpret_cast<char*>(&_impl_.message_count_)) + sizeof(_impl_.send_batch_on_register_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 message_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_message_count(&has_bits);
          _impl_.message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_messages_per_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_messages_per_second(&has_bits);
          _impl_.max_messages_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seed(&has_bits);
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 message_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_message_size(&has_bits);
          _impl_.message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool send_batch_on_register = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_send_batch_on_register(&has_bits);
          _impl_.send_batch_on_register_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dummy_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TestConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 message_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_count(), target);
  }

  // optional uint32 max_messages_per_second = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_messages_per_second(), target);
  }

  // optional uint32 seed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seed(), target);
  }

  // optional uint32 message_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_message_size(), target);
  }

  // optional bool send_batch_on_register = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_send_batch_on_register(), target);
  }

  // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::dummy_fields(this),
        _Internal::dummy_fields(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TestConfig)
  return target;
}

size_t TestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dummy_fields_);
    }

    // optional uint32 message_count = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_count());
    }

    // optional uint32 max_messages_per_second = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_messages_per_second());
    }

    // optional uint32 seed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seed());
    }

    // optional uint32 message_size = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_size());
    }

    // optional bool send_batch_on_register = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestConfig*>(
      &from));
}

void TestConfig::MergeFrom(const TestConfig& from) {
  TestConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_dummy_fields()->::perfetto::protos::TestConfig_DummyFields::MergeFrom(
          from._internal_dummy_fields());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.message_count_ = from._impl_.message_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_messages_per_second_ = from._impl_.max_messages_per_second_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seed_ = from._impl_.seed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.message_size_ = from._impl_.message_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.send_batch_on_register_ = from._impl_.send_batch_on_register_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestConfig::CopyFrom(const TestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig::IsInitialized() const {
  return true;
}

void TestConfig::InternalSwap(TestConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestConfig, _impl_.send_batch_on_register_)
      + sizeof(TestConfig::_impl_.send_batch_on_register_)
      - PROTOBUF_FIELD_OFFSET(TestConfig, _impl_.dummy_fields_)>(
          reinterpret_cast<char*>(&_impl_.dummy_fields_),
          reinterpret_cast<char*>(&other->_impl_.dummy_fields_));
}

std::string TestConfig::GetTypeName() const {
  return "perfetto.protos.TestConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestConfig_DummyFields*
Arena::CreateMaybeMessage< ::perfetto::protos::TestConfig_DummyFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TestConfig_DummyFields >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TestConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
