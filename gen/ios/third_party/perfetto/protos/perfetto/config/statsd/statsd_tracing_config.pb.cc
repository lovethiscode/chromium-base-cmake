// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/statsd/statsd_tracing_config.proto

#include "protos/perfetto/config/statsd/statsd_tracing_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR StatsdTracingConfig::StatsdTracingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.push_atom_id_)*/{}
  , /*decltype(_impl_.raw_push_atom_id_)*/{}
  , /*decltype(_impl_.pull_config_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsdTracingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsdTracingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsdTracingConfigDefaultTypeInternal() {}
  union {
    StatsdTracingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsdTracingConfigDefaultTypeInternal _StatsdTracingConfig_default_instance_;
PROTOBUF_CONSTEXPR StatsdPullAtomConfig::StatsdPullAtomConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pull_atom_id_)*/{}
  , /*decltype(_impl_.raw_pull_atom_id_)*/{}
  , /*decltype(_impl_.packages_)*/{}
  , /*decltype(_impl_.pull_frequency_ms_)*/0} {}
struct StatsdPullAtomConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsdPullAtomConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsdPullAtomConfigDefaultTypeInternal() {}
  union {
    StatsdPullAtomConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsdPullAtomConfigDefaultTypeInternal _StatsdPullAtomConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class StatsdTracingConfig::_Internal {
 public:
};

StatsdTracingConfig::StatsdTracingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StatsdTracingConfig)
}
StatsdTracingConfig::StatsdTracingConfig(const StatsdTracingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StatsdTracingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.push_atom_id_){from._impl_.push_atom_id_}
    , decltype(_impl_.raw_push_atom_id_){from._impl_.raw_push_atom_id_}
    , decltype(_impl_.pull_config_){from._impl_.pull_config_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StatsdTracingConfig)
}

inline void StatsdTracingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.push_atom_id_){arena}
    , decltype(_impl_.raw_push_atom_id_){arena}
    , decltype(_impl_.pull_config_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatsdTracingConfig::~StatsdTracingConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StatsdTracingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsdTracingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.push_atom_id_.~RepeatedField();
  _impl_.raw_push_atom_id_.~RepeatedField();
  _impl_.pull_config_.~RepeatedPtrField();
}

void StatsdTracingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsdTracingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StatsdTracingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.push_atom_id_.Clear();
  _impl_.raw_push_atom_id_.Clear();
  _impl_.pull_config_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StatsdTracingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.AtomId push_atom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AtomId_IsValid(val))) {
              _internal_add_push_atom_id(static_cast<::perfetto::protos::AtomId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_push_atom_id(), ptr, ctx, ::perfetto::protos::AtomId_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 raw_push_atom_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_raw_push_atom_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_raw_push_atom_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.StatsdPullAtomConfig pull_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pull_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsdTracingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StatsdTracingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId push_atom_id = 1;
  for (int i = 0, n = this->_internal_push_atom_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_push_atom_id(i), target);
  }

  // repeated int32 raw_push_atom_id = 2;
  for (int i = 0, n = this->_internal_raw_push_atom_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_raw_push_atom_id(i), target);
  }

  // repeated .perfetto.protos.StatsdPullAtomConfig pull_config = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pull_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_pull_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StatsdTracingConfig)
  return target;
}

size_t StatsdTracingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StatsdTracingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId push_atom_id = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_push_atom_id_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_push_atom_id(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated int32 raw_push_atom_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.raw_push_atom_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_raw_push_atom_id_size());
    total_size += data_size;
  }

  // repeated .perfetto.protos.StatsdPullAtomConfig pull_config = 3;
  total_size += 1UL * this->_internal_pull_config_size();
  for (const auto& msg : this->_impl_.pull_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsdTracingConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StatsdTracingConfig*>(
      &from));
}

void StatsdTracingConfig::MergeFrom(const StatsdTracingConfig& from) {
  StatsdTracingConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StatsdTracingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.push_atom_id_.MergeFrom(from._impl_.push_atom_id_);
  _this->_impl_.raw_push_atom_id_.MergeFrom(from._impl_.raw_push_atom_id_);
  _this->_impl_.pull_config_.MergeFrom(from._impl_.pull_config_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StatsdTracingConfig::CopyFrom(const StatsdTracingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StatsdTracingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsdTracingConfig::IsInitialized() const {
  return true;
}

void StatsdTracingConfig::InternalSwap(StatsdTracingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.push_atom_id_.InternalSwap(&other->_impl_.push_atom_id_);
  _impl_.raw_push_atom_id_.InternalSwap(&other->_impl_.raw_push_atom_id_);
  _impl_.pull_config_.InternalSwap(&other->_impl_.pull_config_);
}

std::string StatsdTracingConfig::GetTypeName() const {
  return "perfetto.protos.StatsdTracingConfig";
}


// ===================================================================

class StatsdPullAtomConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StatsdPullAtomConfig>()._impl_._has_bits_);
  static void set_has_pull_frequency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StatsdPullAtomConfig::StatsdPullAtomConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StatsdPullAtomConfig)
}
StatsdPullAtomConfig::StatsdPullAtomConfig(const StatsdPullAtomConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StatsdPullAtomConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pull_atom_id_){from._impl_.pull_atom_id_}
    , decltype(_impl_.raw_pull_atom_id_){from._impl_.raw_pull_atom_id_}
    , decltype(_impl_.packages_){from._impl_.packages_}
    , decltype(_impl_.pull_frequency_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.pull_frequency_ms_ = from._impl_.pull_frequency_ms_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StatsdPullAtomConfig)
}

inline void StatsdPullAtomConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pull_atom_id_){arena}
    , decltype(_impl_.raw_pull_atom_id_){arena}
    , decltype(_impl_.packages_){arena}
    , decltype(_impl_.pull_frequency_ms_){0}
  };
}

StatsdPullAtomConfig::~StatsdPullAtomConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StatsdPullAtomConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsdPullAtomConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pull_atom_id_.~RepeatedField();
  _impl_.raw_pull_atom_id_.~RepeatedField();
  _impl_.packages_.~RepeatedPtrField();
}

void StatsdPullAtomConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsdPullAtomConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StatsdPullAtomConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pull_atom_id_.Clear();
  _impl_.raw_pull_atom_id_.Clear();
  _impl_.packages_.Clear();
  _impl_.pull_frequency_ms_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StatsdPullAtomConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.AtomId pull_atom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AtomId_IsValid(val))) {
              _internal_add_pull_atom_id(static_cast<::perfetto::protos::AtomId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_pull_atom_id(), ptr, ctx, ::perfetto::protos::AtomId_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 raw_pull_atom_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_raw_pull_atom_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_raw_pull_atom_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pull_frequency_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pull_frequency_ms(&has_bits);
          _impl_.pull_frequency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string packages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_packages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsdPullAtomConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StatsdPullAtomConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId pull_atom_id = 1;
  for (int i = 0, n = this->_internal_pull_atom_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_pull_atom_id(i), target);
  }

  // repeated int32 raw_pull_atom_id = 2;
  for (int i = 0, n = this->_internal_raw_pull_atom_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_raw_pull_atom_id(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pull_frequency_ms = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pull_frequency_ms(), target);
  }

  // repeated string packages = 4;
  for (int i = 0, n = this->_internal_packages_size(); i < n; i++) {
    const auto& s = this->_internal_packages(i);
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StatsdPullAtomConfig)
  return target;
}

size_t StatsdPullAtomConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StatsdPullAtomConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId pull_atom_id = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_pull_atom_id_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_pull_atom_id(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated int32 raw_pull_atom_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.raw_pull_atom_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_raw_pull_atom_id_size());
    total_size += data_size;
  }

  // repeated string packages = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.packages_.size());
  for (int i = 0, n = _impl_.packages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.packages_.Get(i));
  }

  // optional int32 pull_frequency_ms = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pull_frequency_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsdPullAtomConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StatsdPullAtomConfig*>(
      &from));
}

void StatsdPullAtomConfig::MergeFrom(const StatsdPullAtomConfig& from) {
  StatsdPullAtomConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StatsdPullAtomConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pull_atom_id_.MergeFrom(from._impl_.pull_atom_id_);
  _this->_impl_.raw_pull_atom_id_.MergeFrom(from._impl_.raw_pull_atom_id_);
  _this->_impl_.packages_.MergeFrom(from._impl_.packages_);
  if (from._internal_has_pull_frequency_ms()) {
    _this->_internal_set_pull_frequency_ms(from._internal_pull_frequency_ms());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StatsdPullAtomConfig::CopyFrom(const StatsdPullAtomConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StatsdPullAtomConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsdPullAtomConfig::IsInitialized() const {
  return true;
}

void StatsdPullAtomConfig::InternalSwap(StatsdPullAtomConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pull_atom_id_.InternalSwap(&other->_impl_.pull_atom_id_);
  _impl_.raw_pull_atom_id_.InternalSwap(&other->_impl_.raw_pull_atom_id_);
  _impl_.packages_.InternalSwap(&other->_impl_.packages_);
  swap(_impl_.pull_frequency_ms_, other->_impl_.pull_frequency_ms_);
}

std::string StatsdPullAtomConfig::GetTypeName() const {
  return "perfetto.protos.StatsdPullAtomConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::StatsdTracingConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::StatsdTracingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StatsdTracingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StatsdPullAtomConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::StatsdPullAtomConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StatsdPullAtomConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
