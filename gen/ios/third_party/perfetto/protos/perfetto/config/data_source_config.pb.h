// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/data_source_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fdata_5fsource_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fdata_5fsource_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/config/android/android_game_intervention_list_config.pb.h"
#include "protos/perfetto/config/android/android_input_event_config.pb.h"
#include "protos/perfetto/config/android/android_log_config.pb.h"
#include "protos/perfetto/config/android/android_polled_state_config.pb.h"
#include "protos/perfetto/config/android/android_system_property_config.pb.h"
#include "protos/perfetto/config/android/android_sdk_sysprop_guard_config.pb.h"
#include "protos/perfetto/config/android/network_trace_config.pb.h"
#include "protos/perfetto/config/android/packages_list_config.pb.h"
#include "protos/perfetto/config/android/pixel_modem_config.pb.h"
#include "protos/perfetto/config/android/protolog_config.pb.h"
#include "protos/perfetto/config/android/surfaceflinger_layers_config.pb.h"
#include "protos/perfetto/config/android/surfaceflinger_transactions_config.pb.h"
#include "protos/perfetto/config/chrome/chrome_config.pb.h"
#include "protos/perfetto/config/chrome/v8_config.pb.h"
#include "protos/perfetto/config/etw/etw_config.pb.h"
#include "protos/perfetto/config/ftrace/ftrace_config.pb.h"
#include "protos/perfetto/config/gpu/gpu_counter_config.pb.h"
#include "protos/perfetto/config/gpu/vulkan_memory_config.pb.h"
#include "protos/perfetto/config/inode_file/inode_file_config.pb.h"
#include "protos/perfetto/config/interceptor_config.pb.h"
#include "protos/perfetto/config/power/android_power_config.pb.h"
#include "protos/perfetto/config/statsd/statsd_tracing_config.pb.h"
#include "protos/perfetto/config/process_stats/process_stats_config.pb.h"
#include "protos/perfetto/config/profiling/heapprofd_config.pb.h"
#include "protos/perfetto/config/profiling/java_hprof_config.pb.h"
#include "protos/perfetto/config/profiling/perf_event_config.pb.h"
#include "protos/perfetto/config/sys_stats/sys_stats_config.pb.h"
#include "protos/perfetto/config/test_config.pb.h"
#include "protos/perfetto/config/track_event/track_event_config.pb.h"
#include "protos/perfetto/config/system_info/system_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fdata_5fsource_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fdata_5fsource_5fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class DataSourceConfig;
struct DataSourceConfigDefaultTypeInternal;
extern DataSourceConfigDefaultTypeInternal _DataSourceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::DataSourceConfig* Arena::CreateMaybeMessage<::perfetto::protos::DataSourceConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum DataSourceConfig_SessionInitiator : int {
  DataSourceConfig_SessionInitiator_SESSION_INITIATOR_UNSPECIFIED = 0,
  DataSourceConfig_SessionInitiator_SESSION_INITIATOR_TRUSTED_SYSTEM = 1
};
bool DataSourceConfig_SessionInitiator_IsValid(int value);
constexpr DataSourceConfig_SessionInitiator DataSourceConfig_SessionInitiator_SessionInitiator_MIN = DataSourceConfig_SessionInitiator_SESSION_INITIATOR_UNSPECIFIED;
constexpr DataSourceConfig_SessionInitiator DataSourceConfig_SessionInitiator_SessionInitiator_MAX = DataSourceConfig_SessionInitiator_SESSION_INITIATOR_TRUSTED_SYSTEM;
constexpr int DataSourceConfig_SessionInitiator_SessionInitiator_ARRAYSIZE = DataSourceConfig_SessionInitiator_SessionInitiator_MAX + 1;

const std::string& DataSourceConfig_SessionInitiator_Name(DataSourceConfig_SessionInitiator value);
template<typename T>
inline const std::string& DataSourceConfig_SessionInitiator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataSourceConfig_SessionInitiator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataSourceConfig_SessionInitiator_Name.");
  return DataSourceConfig_SessionInitiator_Name(static_cast<DataSourceConfig_SessionInitiator>(enum_t_value));
}
bool DataSourceConfig_SessionInitiator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataSourceConfig_SessionInitiator* value);
// ===================================================================

class DataSourceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DataSourceConfig) */ {
 public:
  inline DataSourceConfig() : DataSourceConfig(nullptr) {}
  ~DataSourceConfig() override;
  explicit PROTOBUF_CONSTEXPR DataSourceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSourceConfig(const DataSourceConfig& from);
  DataSourceConfig(DataSourceConfig&& from) noexcept
    : DataSourceConfig() {
    *this = ::std::move(from);
  }

  inline DataSourceConfig& operator=(const DataSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceConfig& operator=(DataSourceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DataSourceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSourceConfig* internal_default_instance() {
    return reinterpret_cast<const DataSourceConfig*>(
               &_DataSourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataSourceConfig& a, DataSourceConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DataSourceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSourceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataSourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataSourceConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DataSourceConfig& from);
  void MergeFrom(const DataSourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataSourceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DataSourceConfig";
  }
  protected:
  explicit DataSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DataSourceConfig_SessionInitiator SessionInitiator;
  static constexpr SessionInitiator SESSION_INITIATOR_UNSPECIFIED =
    DataSourceConfig_SessionInitiator_SESSION_INITIATOR_UNSPECIFIED;
  static constexpr SessionInitiator SESSION_INITIATOR_TRUSTED_SYSTEM =
    DataSourceConfig_SessionInitiator_SESSION_INITIATOR_TRUSTED_SYSTEM;
  static inline bool SessionInitiator_IsValid(int value) {
    return DataSourceConfig_SessionInitiator_IsValid(value);
  }
  static constexpr SessionInitiator SessionInitiator_MIN =
    DataSourceConfig_SessionInitiator_SessionInitiator_MIN;
  static constexpr SessionInitiator SessionInitiator_MAX =
    DataSourceConfig_SessionInitiator_SessionInitiator_MAX;
  static constexpr int SessionInitiator_ARRAYSIZE =
    DataSourceConfig_SessionInitiator_SessionInitiator_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SessionInitiator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SessionInitiator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SessionInitiator_Name.");
    return DataSourceConfig_SessionInitiator_Name(enum_t_value);
  }
  static inline bool SessionInitiator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SessionInitiator* value) {
    return DataSourceConfig_SessionInitiator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLegacyConfigFieldNumber = 1000,
    kFtraceConfigFieldNumber = 100,
    kChromeConfigFieldNumber = 101,
    kInodeFileConfigFieldNumber = 102,
    kProcessStatsConfigFieldNumber = 103,
    kSysStatsConfigFieldNumber = 104,
    kHeapprofdConfigFieldNumber = 105,
    kAndroidPowerConfigFieldNumber = 106,
    kAndroidLogConfigFieldNumber = 107,
    kGpuCounterConfigFieldNumber = 108,
    kPackagesListConfigFieldNumber = 109,
    kJavaHprofConfigFieldNumber = 110,
    kPerfEventConfigFieldNumber = 111,
    kVulkanMemoryConfigFieldNumber = 112,
    kTrackEventConfigFieldNumber = 113,
    kAndroidPolledStateConfigFieldNumber = 114,
    kInterceptorConfigFieldNumber = 115,
    kAndroidGameInterventionListConfigFieldNumber = 116,
    kStatsdTracingConfigFieldNumber = 117,
    kAndroidSystemPropertyConfigFieldNumber = 118,
    kSystemInfoConfigFieldNumber = 119,
    kNetworkPacketTraceConfigFieldNumber = 120,
    kSurfaceflingerLayersConfigFieldNumber = 121,
    kSurfaceflingerTransactionsConfigFieldNumber = 123,
    kAndroidSdkSyspropGuardConfigFieldNumber = 124,
    kEtwConfigFieldNumber = 125,
    kProtologConfigFieldNumber = 126,
    kV8ConfigFieldNumber = 127,
    kAndroidInputEventConfigFieldNumber = 128,
    kPixelModemConfigFieldNumber = 129,
    kForTestingFieldNumber = 1001,
    kTargetBufferFieldNumber = 2,
    kTraceDurationMsFieldNumber = 3,
    kTracingSessionIdFieldNumber = 4,
    kStopTimeoutMsFieldNumber = 7,
    kSessionInitiatorFieldNumber = 8,
    kPreferSuspendClockForDurationFieldNumber = 122,
    kEnableExtraGuardrailsFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string legacy_config = 1000;
  bool has_legacy_config() const;
  private:
  bool _internal_has_legacy_config() const;
  public:
  void clear_legacy_config();
  const std::string& legacy_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legacy_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legacy_config();
  PROTOBUF_NODISCARD std::string* release_legacy_config();
  void set_allocated_legacy_config(std::string* legacy_config);
  private:
  const std::string& _internal_legacy_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legacy_config(const std::string& value);
  std::string* _internal_mutable_legacy_config();
  public:

  // optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
  bool has_ftrace_config() const;
  private:
  bool _internal_has_ftrace_config() const;
  public:
  void clear_ftrace_config();
  const ::perfetto::protos::FtraceConfig& ftrace_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceConfig* release_ftrace_config();
  ::perfetto::protos::FtraceConfig* mutable_ftrace_config();
  void set_allocated_ftrace_config(::perfetto::protos::FtraceConfig* ftrace_config);
  private:
  const ::perfetto::protos::FtraceConfig& _internal_ftrace_config() const;
  ::perfetto::protos::FtraceConfig* _internal_mutable_ftrace_config();
  public:
  void unsafe_arena_set_allocated_ftrace_config(
      ::perfetto::protos::FtraceConfig* ftrace_config);
  ::perfetto::protos::FtraceConfig* unsafe_arena_release_ftrace_config();

  // optional .perfetto.protos.ChromeConfig chrome_config = 101;
  bool has_chrome_config() const;
  private:
  bool _internal_has_chrome_config() const;
  public:
  void clear_chrome_config();
  const ::perfetto::protos::ChromeConfig& chrome_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeConfig* release_chrome_config();
  ::perfetto::protos::ChromeConfig* mutable_chrome_config();
  void set_allocated_chrome_config(::perfetto::protos::ChromeConfig* chrome_config);
  private:
  const ::perfetto::protos::ChromeConfig& _internal_chrome_config() const;
  ::perfetto::protos::ChromeConfig* _internal_mutable_chrome_config();
  public:
  void unsafe_arena_set_allocated_chrome_config(
      ::perfetto::protos::ChromeConfig* chrome_config);
  ::perfetto::protos::ChromeConfig* unsafe_arena_release_chrome_config();

  // optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
  bool has_inode_file_config() const;
  private:
  bool _internal_has_inode_file_config() const;
  public:
  void clear_inode_file_config();
  const ::perfetto::protos::InodeFileConfig& inode_file_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::InodeFileConfig* release_inode_file_config();
  ::perfetto::protos::InodeFileConfig* mutable_inode_file_config();
  void set_allocated_inode_file_config(::perfetto::protos::InodeFileConfig* inode_file_config);
  private:
  const ::perfetto::protos::InodeFileConfig& _internal_inode_file_config() const;
  ::perfetto::protos::InodeFileConfig* _internal_mutable_inode_file_config();
  public:
  void unsafe_arena_set_allocated_inode_file_config(
      ::perfetto::protos::InodeFileConfig* inode_file_config);
  ::perfetto::protos::InodeFileConfig* unsafe_arena_release_inode_file_config();

  // optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
  bool has_process_stats_config() const;
  private:
  bool _internal_has_process_stats_config() const;
  public:
  void clear_process_stats_config();
  const ::perfetto::protos::ProcessStatsConfig& process_stats_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProcessStatsConfig* release_process_stats_config();
  ::perfetto::protos::ProcessStatsConfig* mutable_process_stats_config();
  void set_allocated_process_stats_config(::perfetto::protos::ProcessStatsConfig* process_stats_config);
  private:
  const ::perfetto::protos::ProcessStatsConfig& _internal_process_stats_config() const;
  ::perfetto::protos::ProcessStatsConfig* _internal_mutable_process_stats_config();
  public:
  void unsafe_arena_set_allocated_process_stats_config(
      ::perfetto::protos::ProcessStatsConfig* process_stats_config);
  ::perfetto::protos::ProcessStatsConfig* unsafe_arena_release_process_stats_config();

  // optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
  bool has_sys_stats_config() const;
  private:
  bool _internal_has_sys_stats_config() const;
  public:
  void clear_sys_stats_config();
  const ::perfetto::protos::SysStatsConfig& sys_stats_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SysStatsConfig* release_sys_stats_config();
  ::perfetto::protos::SysStatsConfig* mutable_sys_stats_config();
  void set_allocated_sys_stats_config(::perfetto::protos::SysStatsConfig* sys_stats_config);
  private:
  const ::perfetto::protos::SysStatsConfig& _internal_sys_stats_config() const;
  ::perfetto::protos::SysStatsConfig* _internal_mutable_sys_stats_config();
  public:
  void unsafe_arena_set_allocated_sys_stats_config(
      ::perfetto::protos::SysStatsConfig* sys_stats_config);
  ::perfetto::protos::SysStatsConfig* unsafe_arena_release_sys_stats_config();

  // optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
  bool has_heapprofd_config() const;
  private:
  bool _internal_has_heapprofd_config() const;
  public:
  void clear_heapprofd_config();
  const ::perfetto::protos::HeapprofdConfig& heapprofd_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::HeapprofdConfig* release_heapprofd_config();
  ::perfetto::protos::HeapprofdConfig* mutable_heapprofd_config();
  void set_allocated_heapprofd_config(::perfetto::protos::HeapprofdConfig* heapprofd_config);
  private:
  const ::perfetto::protos::HeapprofdConfig& _internal_heapprofd_config() const;
  ::perfetto::protos::HeapprofdConfig* _internal_mutable_heapprofd_config();
  public:
  void unsafe_arena_set_allocated_heapprofd_config(
      ::perfetto::protos::HeapprofdConfig* heapprofd_config);
  ::perfetto::protos::HeapprofdConfig* unsafe_arena_release_heapprofd_config();

  // optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
  bool has_android_power_config() const;
  private:
  bool _internal_has_android_power_config() const;
  public:
  void clear_android_power_config();
  const ::perfetto::protos::AndroidPowerConfig& android_power_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidPowerConfig* release_android_power_config();
  ::perfetto::protos::AndroidPowerConfig* mutable_android_power_config();
  void set_allocated_android_power_config(::perfetto::protos::AndroidPowerConfig* android_power_config);
  private:
  const ::perfetto::protos::AndroidPowerConfig& _internal_android_power_config() const;
  ::perfetto::protos::AndroidPowerConfig* _internal_mutable_android_power_config();
  public:
  void unsafe_arena_set_allocated_android_power_config(
      ::perfetto::protos::AndroidPowerConfig* android_power_config);
  ::perfetto::protos::AndroidPowerConfig* unsafe_arena_release_android_power_config();

  // optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
  bool has_android_log_config() const;
  private:
  bool _internal_has_android_log_config() const;
  public:
  void clear_android_log_config();
  const ::perfetto::protos::AndroidLogConfig& android_log_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidLogConfig* release_android_log_config();
  ::perfetto::protos::AndroidLogConfig* mutable_android_log_config();
  void set_allocated_android_log_config(::perfetto::protos::AndroidLogConfig* android_log_config);
  private:
  const ::perfetto::protos::AndroidLogConfig& _internal_android_log_config() const;
  ::perfetto::protos::AndroidLogConfig* _internal_mutable_android_log_config();
  public:
  void unsafe_arena_set_allocated_android_log_config(
      ::perfetto::protos::AndroidLogConfig* android_log_config);
  ::perfetto::protos::AndroidLogConfig* unsafe_arena_release_android_log_config();

  // optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
  bool has_gpu_counter_config() const;
  private:
  bool _internal_has_gpu_counter_config() const;
  public:
  void clear_gpu_counter_config();
  const ::perfetto::protos::GpuCounterConfig& gpu_counter_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GpuCounterConfig* release_gpu_counter_config();
  ::perfetto::protos::GpuCounterConfig* mutable_gpu_counter_config();
  void set_allocated_gpu_counter_config(::perfetto::protos::GpuCounterConfig* gpu_counter_config);
  private:
  const ::perfetto::protos::GpuCounterConfig& _internal_gpu_counter_config() const;
  ::perfetto::protos::GpuCounterConfig* _internal_mutable_gpu_counter_config();
  public:
  void unsafe_arena_set_allocated_gpu_counter_config(
      ::perfetto::protos::GpuCounterConfig* gpu_counter_config);
  ::perfetto::protos::GpuCounterConfig* unsafe_arena_release_gpu_counter_config();

  // optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
  bool has_packages_list_config() const;
  private:
  bool _internal_has_packages_list_config() const;
  public:
  void clear_packages_list_config();
  const ::perfetto::protos::PackagesListConfig& packages_list_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PackagesListConfig* release_packages_list_config();
  ::perfetto::protos::PackagesListConfig* mutable_packages_list_config();
  void set_allocated_packages_list_config(::perfetto::protos::PackagesListConfig* packages_list_config);
  private:
  const ::perfetto::protos::PackagesListConfig& _internal_packages_list_config() const;
  ::perfetto::protos::PackagesListConfig* _internal_mutable_packages_list_config();
  public:
  void unsafe_arena_set_allocated_packages_list_config(
      ::perfetto::protos::PackagesListConfig* packages_list_config);
  ::perfetto::protos::PackagesListConfig* unsafe_arena_release_packages_list_config();

  // optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
  bool has_java_hprof_config() const;
  private:
  bool _internal_has_java_hprof_config() const;
  public:
  void clear_java_hprof_config();
  const ::perfetto::protos::JavaHprofConfig& java_hprof_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::JavaHprofConfig* release_java_hprof_config();
  ::perfetto::protos::JavaHprofConfig* mutable_java_hprof_config();
  void set_allocated_java_hprof_config(::perfetto::protos::JavaHprofConfig* java_hprof_config);
  private:
  const ::perfetto::protos::JavaHprofConfig& _internal_java_hprof_config() const;
  ::perfetto::protos::JavaHprofConfig* _internal_mutable_java_hprof_config();
  public:
  void unsafe_arena_set_allocated_java_hprof_config(
      ::perfetto::protos::JavaHprofConfig* java_hprof_config);
  ::perfetto::protos::JavaHprofConfig* unsafe_arena_release_java_hprof_config();

  // optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
  bool has_perf_event_config() const;
  private:
  bool _internal_has_perf_event_config() const;
  public:
  void clear_perf_event_config();
  const ::perfetto::protos::PerfEventConfig& perf_event_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfEventConfig* release_perf_event_config();
  ::perfetto::protos::PerfEventConfig* mutable_perf_event_config();
  void set_allocated_perf_event_config(::perfetto::protos::PerfEventConfig* perf_event_config);
  private:
  const ::perfetto::protos::PerfEventConfig& _internal_perf_event_config() const;
  ::perfetto::protos::PerfEventConfig* _internal_mutable_perf_event_config();
  public:
  void unsafe_arena_set_allocated_perf_event_config(
      ::perfetto::protos::PerfEventConfig* perf_event_config);
  ::perfetto::protos::PerfEventConfig* unsafe_arena_release_perf_event_config();

  // optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
  bool has_vulkan_memory_config() const;
  private:
  bool _internal_has_vulkan_memory_config() const;
  public:
  void clear_vulkan_memory_config();
  const ::perfetto::protos::VulkanMemoryConfig& vulkan_memory_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VulkanMemoryConfig* release_vulkan_memory_config();
  ::perfetto::protos::VulkanMemoryConfig* mutable_vulkan_memory_config();
  void set_allocated_vulkan_memory_config(::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config);
  private:
  const ::perfetto::protos::VulkanMemoryConfig& _internal_vulkan_memory_config() const;
  ::perfetto::protos::VulkanMemoryConfig* _internal_mutable_vulkan_memory_config();
  public:
  void unsafe_arena_set_allocated_vulkan_memory_config(
      ::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config);
  ::perfetto::protos::VulkanMemoryConfig* unsafe_arena_release_vulkan_memory_config();

  // optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
  bool has_track_event_config() const;
  private:
  bool _internal_has_track_event_config() const;
  public:
  void clear_track_event_config();
  const ::perfetto::protos::TrackEventConfig& track_event_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrackEventConfig* release_track_event_config();
  ::perfetto::protos::TrackEventConfig* mutable_track_event_config();
  void set_allocated_track_event_config(::perfetto::protos::TrackEventConfig* track_event_config);
  private:
  const ::perfetto::protos::TrackEventConfig& _internal_track_event_config() const;
  ::perfetto::protos::TrackEventConfig* _internal_mutable_track_event_config();
  public:
  void unsafe_arena_set_allocated_track_event_config(
      ::perfetto::protos::TrackEventConfig* track_event_config);
  ::perfetto::protos::TrackEventConfig* unsafe_arena_release_track_event_config();

  // optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
  bool has_android_polled_state_config() const;
  private:
  bool _internal_has_android_polled_state_config() const;
  public:
  void clear_android_polled_state_config();
  const ::perfetto::protos::AndroidPolledStateConfig& android_polled_state_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidPolledStateConfig* release_android_polled_state_config();
  ::perfetto::protos::AndroidPolledStateConfig* mutable_android_polled_state_config();
  void set_allocated_android_polled_state_config(::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config);
  private:
  const ::perfetto::protos::AndroidPolledStateConfig& _internal_android_polled_state_config() const;
  ::perfetto::protos::AndroidPolledStateConfig* _internal_mutable_android_polled_state_config();
  public:
  void unsafe_arena_set_allocated_android_polled_state_config(
      ::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config);
  ::perfetto::protos::AndroidPolledStateConfig* unsafe_arena_release_android_polled_state_config();

  // optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
  bool has_interceptor_config() const;
  private:
  bool _internal_has_interceptor_config() const;
  public:
  void clear_interceptor_config();
  const ::perfetto::protos::InterceptorConfig& interceptor_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::InterceptorConfig* release_interceptor_config();
  ::perfetto::protos::InterceptorConfig* mutable_interceptor_config();
  void set_allocated_interceptor_config(::perfetto::protos::InterceptorConfig* interceptor_config);
  private:
  const ::perfetto::protos::InterceptorConfig& _internal_interceptor_config() const;
  ::perfetto::protos::InterceptorConfig* _internal_mutable_interceptor_config();
  public:
  void unsafe_arena_set_allocated_interceptor_config(
      ::perfetto::protos::InterceptorConfig* interceptor_config);
  ::perfetto::protos::InterceptorConfig* unsafe_arena_release_interceptor_config();

  // optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];
  bool has_android_game_intervention_list_config() const;
  private:
  bool _internal_has_android_game_intervention_list_config() const;
  public:
  void clear_android_game_intervention_list_config();
  const ::perfetto::protos::AndroidGameInterventionListConfig& android_game_intervention_list_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidGameInterventionListConfig* release_android_game_intervention_list_config();
  ::perfetto::protos::AndroidGameInterventionListConfig* mutable_android_game_intervention_list_config();
  void set_allocated_android_game_intervention_list_config(::perfetto::protos::AndroidGameInterventionListConfig* android_game_intervention_list_config);
  private:
  const ::perfetto::protos::AndroidGameInterventionListConfig& _internal_android_game_intervention_list_config() const;
  ::perfetto::protos::AndroidGameInterventionListConfig* _internal_mutable_android_game_intervention_list_config();
  public:
  void unsafe_arena_set_allocated_android_game_intervention_list_config(
      ::perfetto::protos::AndroidGameInterventionListConfig* android_game_intervention_list_config);
  ::perfetto::protos::AndroidGameInterventionListConfig* unsafe_arena_release_android_game_intervention_list_config();

  // optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];
  bool has_statsd_tracing_config() const;
  private:
  bool _internal_has_statsd_tracing_config() const;
  public:
  void clear_statsd_tracing_config();
  const ::perfetto::protos::StatsdTracingConfig& statsd_tracing_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::StatsdTracingConfig* release_statsd_tracing_config();
  ::perfetto::protos::StatsdTracingConfig* mutable_statsd_tracing_config();
  void set_allocated_statsd_tracing_config(::perfetto::protos::StatsdTracingConfig* statsd_tracing_config);
  private:
  const ::perfetto::protos::StatsdTracingConfig& _internal_statsd_tracing_config() const;
  ::perfetto::protos::StatsdTracingConfig* _internal_mutable_statsd_tracing_config();
  public:
  void unsafe_arena_set_allocated_statsd_tracing_config(
      ::perfetto::protos::StatsdTracingConfig* statsd_tracing_config);
  ::perfetto::protos::StatsdTracingConfig* unsafe_arena_release_statsd_tracing_config();

  // optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];
  bool has_android_system_property_config() const;
  private:
  bool _internal_has_android_system_property_config() const;
  public:
  void clear_android_system_property_config();
  const ::perfetto::protos::AndroidSystemPropertyConfig& android_system_property_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidSystemPropertyConfig* release_android_system_property_config();
  ::perfetto::protos::AndroidSystemPropertyConfig* mutable_android_system_property_config();
  void set_allocated_android_system_property_config(::perfetto::protos::AndroidSystemPropertyConfig* android_system_property_config);
  private:
  const ::perfetto::protos::AndroidSystemPropertyConfig& _internal_android_system_property_config() const;
  ::perfetto::protos::AndroidSystemPropertyConfig* _internal_mutable_android_system_property_config();
  public:
  void unsafe_arena_set_allocated_android_system_property_config(
      ::perfetto::protos::AndroidSystemPropertyConfig* android_system_property_config);
  ::perfetto::protos::AndroidSystemPropertyConfig* unsafe_arena_release_android_system_property_config();

  // optional .perfetto.protos.SystemInfoConfig system_info_config = 119;
  bool has_system_info_config() const;
  private:
  bool _internal_has_system_info_config() const;
  public:
  void clear_system_info_config();
  const ::perfetto::protos::SystemInfoConfig& system_info_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SystemInfoConfig* release_system_info_config();
  ::perfetto::protos::SystemInfoConfig* mutable_system_info_config();
  void set_allocated_system_info_config(::perfetto::protos::SystemInfoConfig* system_info_config);
  private:
  const ::perfetto::protos::SystemInfoConfig& _internal_system_info_config() const;
  ::perfetto::protos::SystemInfoConfig* _internal_mutable_system_info_config();
  public:
  void unsafe_arena_set_allocated_system_info_config(
      ::perfetto::protos::SystemInfoConfig* system_info_config);
  ::perfetto::protos::SystemInfoConfig* unsafe_arena_release_system_info_config();

  // optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];
  bool has_network_packet_trace_config() const;
  private:
  bool _internal_has_network_packet_trace_config() const;
  public:
  void clear_network_packet_trace_config();
  const ::perfetto::protos::NetworkPacketTraceConfig& network_packet_trace_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NetworkPacketTraceConfig* release_network_packet_trace_config();
  ::perfetto::protos::NetworkPacketTraceConfig* mutable_network_packet_trace_config();
  void set_allocated_network_packet_trace_config(::perfetto::protos::NetworkPacketTraceConfig* network_packet_trace_config);
  private:
  const ::perfetto::protos::NetworkPacketTraceConfig& _internal_network_packet_trace_config() const;
  ::perfetto::protos::NetworkPacketTraceConfig* _internal_mutable_network_packet_trace_config();
  public:
  void unsafe_arena_set_allocated_network_packet_trace_config(
      ::perfetto::protos::NetworkPacketTraceConfig* network_packet_trace_config);
  ::perfetto::protos::NetworkPacketTraceConfig* unsafe_arena_release_network_packet_trace_config();

  // optional .perfetto.protos.SurfaceFlingerLayersConfig surfaceflinger_layers_config = 121 [lazy = true];
  bool has_surfaceflinger_layers_config() const;
  private:
  bool _internal_has_surfaceflinger_layers_config() const;
  public:
  void clear_surfaceflinger_layers_config();
  const ::perfetto::protos::SurfaceFlingerLayersConfig& surfaceflinger_layers_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SurfaceFlingerLayersConfig* release_surfaceflinger_layers_config();
  ::perfetto::protos::SurfaceFlingerLayersConfig* mutable_surfaceflinger_layers_config();
  void set_allocated_surfaceflinger_layers_config(::perfetto::protos::SurfaceFlingerLayersConfig* surfaceflinger_layers_config);
  private:
  const ::perfetto::protos::SurfaceFlingerLayersConfig& _internal_surfaceflinger_layers_config() const;
  ::perfetto::protos::SurfaceFlingerLayersConfig* _internal_mutable_surfaceflinger_layers_config();
  public:
  void unsafe_arena_set_allocated_surfaceflinger_layers_config(
      ::perfetto::protos::SurfaceFlingerLayersConfig* surfaceflinger_layers_config);
  ::perfetto::protos::SurfaceFlingerLayersConfig* unsafe_arena_release_surfaceflinger_layers_config();

  // optional .perfetto.protos.SurfaceFlingerTransactionsConfig surfaceflinger_transactions_config = 123 [lazy = true];
  bool has_surfaceflinger_transactions_config() const;
  private:
  bool _internal_has_surfaceflinger_transactions_config() const;
  public:
  void clear_surfaceflinger_transactions_config();
  const ::perfetto::protos::SurfaceFlingerTransactionsConfig& surfaceflinger_transactions_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SurfaceFlingerTransactionsConfig* release_surfaceflinger_transactions_config();
  ::perfetto::protos::SurfaceFlingerTransactionsConfig* mutable_surfaceflinger_transactions_config();
  void set_allocated_surfaceflinger_transactions_config(::perfetto::protos::SurfaceFlingerTransactionsConfig* surfaceflinger_transactions_config);
  private:
  const ::perfetto::protos::SurfaceFlingerTransactionsConfig& _internal_surfaceflinger_transactions_config() const;
  ::perfetto::protos::SurfaceFlingerTransactionsConfig* _internal_mutable_surfaceflinger_transactions_config();
  public:
  void unsafe_arena_set_allocated_surfaceflinger_transactions_config(
      ::perfetto::protos::SurfaceFlingerTransactionsConfig* surfaceflinger_transactions_config);
  ::perfetto::protos::SurfaceFlingerTransactionsConfig* unsafe_arena_release_surfaceflinger_transactions_config();

  // optional .perfetto.protos.AndroidSdkSyspropGuardConfig android_sdk_sysprop_guard_config = 124 [lazy = true];
  bool has_android_sdk_sysprop_guard_config() const;
  private:
  bool _internal_has_android_sdk_sysprop_guard_config() const;
  public:
  void clear_android_sdk_sysprop_guard_config();
  const ::perfetto::protos::AndroidSdkSyspropGuardConfig& android_sdk_sysprop_guard_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidSdkSyspropGuardConfig* release_android_sdk_sysprop_guard_config();
  ::perfetto::protos::AndroidSdkSyspropGuardConfig* mutable_android_sdk_sysprop_guard_config();
  void set_allocated_android_sdk_sysprop_guard_config(::perfetto::protos::AndroidSdkSyspropGuardConfig* android_sdk_sysprop_guard_config);
  private:
  const ::perfetto::protos::AndroidSdkSyspropGuardConfig& _internal_android_sdk_sysprop_guard_config() const;
  ::perfetto::protos::AndroidSdkSyspropGuardConfig* _internal_mutable_android_sdk_sysprop_guard_config();
  public:
  void unsafe_arena_set_allocated_android_sdk_sysprop_guard_config(
      ::perfetto::protos::AndroidSdkSyspropGuardConfig* android_sdk_sysprop_guard_config);
  ::perfetto::protos::AndroidSdkSyspropGuardConfig* unsafe_arena_release_android_sdk_sysprop_guard_config();

  // optional .perfetto.protos.EtwConfig etw_config = 125 [lazy = true];
  bool has_etw_config() const;
  private:
  bool _internal_has_etw_config() const;
  public:
  void clear_etw_config();
  const ::perfetto::protos::EtwConfig& etw_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::EtwConfig* release_etw_config();
  ::perfetto::protos::EtwConfig* mutable_etw_config();
  void set_allocated_etw_config(::perfetto::protos::EtwConfig* etw_config);
  private:
  const ::perfetto::protos::EtwConfig& _internal_etw_config() const;
  ::perfetto::protos::EtwConfig* _internal_mutable_etw_config();
  public:
  void unsafe_arena_set_allocated_etw_config(
      ::perfetto::protos::EtwConfig* etw_config);
  ::perfetto::protos::EtwConfig* unsafe_arena_release_etw_config();

  // optional .perfetto.protos.ProtoLogConfig protolog_config = 126 [lazy = true];
  bool has_protolog_config() const;
  private:
  bool _internal_has_protolog_config() const;
  public:
  void clear_protolog_config();
  const ::perfetto::protos::ProtoLogConfig& protolog_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProtoLogConfig* release_protolog_config();
  ::perfetto::protos::ProtoLogConfig* mutable_protolog_config();
  void set_allocated_protolog_config(::perfetto::protos::ProtoLogConfig* protolog_config);
  private:
  const ::perfetto::protos::ProtoLogConfig& _internal_protolog_config() const;
  ::perfetto::protos::ProtoLogConfig* _internal_mutable_protolog_config();
  public:
  void unsafe_arena_set_allocated_protolog_config(
      ::perfetto::protos::ProtoLogConfig* protolog_config);
  ::perfetto::protos::ProtoLogConfig* unsafe_arena_release_protolog_config();

  // optional .perfetto.protos.V8Config v8_config = 127 [lazy = true];
  bool has_v8_config() const;
  private:
  bool _internal_has_v8_config() const;
  public:
  void clear_v8_config();
  const ::perfetto::protos::V8Config& v8_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::V8Config* release_v8_config();
  ::perfetto::protos::V8Config* mutable_v8_config();
  void set_allocated_v8_config(::perfetto::protos::V8Config* v8_config);
  private:
  const ::perfetto::protos::V8Config& _internal_v8_config() const;
  ::perfetto::protos::V8Config* _internal_mutable_v8_config();
  public:
  void unsafe_arena_set_allocated_v8_config(
      ::perfetto::protos::V8Config* v8_config);
  ::perfetto::protos::V8Config* unsafe_arena_release_v8_config();

  // optional .perfetto.protos.AndroidInputEventConfig android_input_event_config = 128 [lazy = true];
  bool has_android_input_event_config() const;
  private:
  bool _internal_has_android_input_event_config() const;
  public:
  void clear_android_input_event_config();
  const ::perfetto::protos::AndroidInputEventConfig& android_input_event_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidInputEventConfig* release_android_input_event_config();
  ::perfetto::protos::AndroidInputEventConfig* mutable_android_input_event_config();
  void set_allocated_android_input_event_config(::perfetto::protos::AndroidInputEventConfig* android_input_event_config);
  private:
  const ::perfetto::protos::AndroidInputEventConfig& _internal_android_input_event_config() const;
  ::perfetto::protos::AndroidInputEventConfig* _internal_mutable_android_input_event_config();
  public:
  void unsafe_arena_set_allocated_android_input_event_config(
      ::perfetto::protos::AndroidInputEventConfig* android_input_event_config);
  ::perfetto::protos::AndroidInputEventConfig* unsafe_arena_release_android_input_event_config();

  // optional .perfetto.protos.PixelModemConfig pixel_modem_config = 129 [lazy = true];
  bool has_pixel_modem_config() const;
  private:
  bool _internal_has_pixel_modem_config() const;
  public:
  void clear_pixel_modem_config();
  const ::perfetto::protos::PixelModemConfig& pixel_modem_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PixelModemConfig* release_pixel_modem_config();
  ::perfetto::protos::PixelModemConfig* mutable_pixel_modem_config();
  void set_allocated_pixel_modem_config(::perfetto::protos::PixelModemConfig* pixel_modem_config);
  private:
  const ::perfetto::protos::PixelModemConfig& _internal_pixel_modem_config() const;
  ::perfetto::protos::PixelModemConfig* _internal_mutable_pixel_modem_config();
  public:
  void unsafe_arena_set_allocated_pixel_modem_config(
      ::perfetto::protos::PixelModemConfig* pixel_modem_config);
  ::perfetto::protos::PixelModemConfig* unsafe_arena_release_pixel_modem_config();

  // optional .perfetto.protos.TestConfig for_testing = 1001;
  bool has_for_testing() const;
  private:
  bool _internal_has_for_testing() const;
  public:
  void clear_for_testing();
  const ::perfetto::protos::TestConfig& for_testing() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TestConfig* release_for_testing();
  ::perfetto::protos::TestConfig* mutable_for_testing();
  void set_allocated_for_testing(::perfetto::protos::TestConfig* for_testing);
  private:
  const ::perfetto::protos::TestConfig& _internal_for_testing() const;
  ::perfetto::protos::TestConfig* _internal_mutable_for_testing();
  public:
  void unsafe_arena_set_allocated_for_testing(
      ::perfetto::protos::TestConfig* for_testing);
  ::perfetto::protos::TestConfig* unsafe_arena_release_for_testing();

  // optional uint32 target_buffer = 2;
  bool has_target_buffer() const;
  private:
  bool _internal_has_target_buffer() const;
  public:
  void clear_target_buffer();
  uint32_t target_buffer() const;
  void set_target_buffer(uint32_t value);
  private:
  uint32_t _internal_target_buffer() const;
  void _internal_set_target_buffer(uint32_t value);
  public:

  // optional uint32 trace_duration_ms = 3;
  bool has_trace_duration_ms() const;
  private:
  bool _internal_has_trace_duration_ms() const;
  public:
  void clear_trace_duration_ms();
  uint32_t trace_duration_ms() const;
  void set_trace_duration_ms(uint32_t value);
  private:
  uint32_t _internal_trace_duration_ms() const;
  void _internal_set_trace_duration_ms(uint32_t value);
  public:

  // optional uint64 tracing_session_id = 4;
  bool has_tracing_session_id() const;
  private:
  bool _internal_has_tracing_session_id() const;
  public:
  void clear_tracing_session_id();
  uint64_t tracing_session_id() const;
  void set_tracing_session_id(uint64_t value);
  private:
  uint64_t _internal_tracing_session_id() const;
  void _internal_set_tracing_session_id(uint64_t value);
  public:

  // optional uint32 stop_timeout_ms = 7;
  bool has_stop_timeout_ms() const;
  private:
  bool _internal_has_stop_timeout_ms() const;
  public:
  void clear_stop_timeout_ms();
  uint32_t stop_timeout_ms() const;
  void set_stop_timeout_ms(uint32_t value);
  private:
  uint32_t _internal_stop_timeout_ms() const;
  void _internal_set_stop_timeout_ms(uint32_t value);
  public:

  // optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;
  bool has_session_initiator() const;
  private:
  bool _internal_has_session_initiator() const;
  public:
  void clear_session_initiator();
  ::perfetto::protos::DataSourceConfig_SessionInitiator session_initiator() const;
  void set_session_initiator(::perfetto::protos::DataSourceConfig_SessionInitiator value);
  private:
  ::perfetto::protos::DataSourceConfig_SessionInitiator _internal_session_initiator() const;
  void _internal_set_session_initiator(::perfetto::protos::DataSourceConfig_SessionInitiator value);
  public:

  // optional bool prefer_suspend_clock_for_duration = 122;
  bool has_prefer_suspend_clock_for_duration() const;
  private:
  bool _internal_has_prefer_suspend_clock_for_duration() const;
  public:
  void clear_prefer_suspend_clock_for_duration();
  bool prefer_suspend_clock_for_duration() const;
  void set_prefer_suspend_clock_for_duration(bool value);
  private:
  bool _internal_prefer_suspend_clock_for_duration() const;
  void _internal_set_prefer_suspend_clock_for_duration(bool value);
  public:

  // optional bool enable_extra_guardrails = 6;
  bool has_enable_extra_guardrails() const;
  private:
  bool _internal_has_enable_extra_guardrails() const;
  public:
  void clear_enable_extra_guardrails();
  bool enable_extra_guardrails() const;
  void set_enable_extra_guardrails(bool value);
  private:
  bool _internal_enable_extra_guardrails() const;
  void _internal_set_enable_extra_guardrails(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.DataSourceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_config_;
    ::perfetto::protos::FtraceConfig* ftrace_config_;
    ::perfetto::protos::ChromeConfig* chrome_config_;
    ::perfetto::protos::InodeFileConfig* inode_file_config_;
    ::perfetto::protos::ProcessStatsConfig* process_stats_config_;
    ::perfetto::protos::SysStatsConfig* sys_stats_config_;
    ::perfetto::protos::HeapprofdConfig* heapprofd_config_;
    ::perfetto::protos::AndroidPowerConfig* android_power_config_;
    ::perfetto::protos::AndroidLogConfig* android_log_config_;
    ::perfetto::protos::GpuCounterConfig* gpu_counter_config_;
    ::perfetto::protos::PackagesListConfig* packages_list_config_;
    ::perfetto::protos::JavaHprofConfig* java_hprof_config_;
    ::perfetto::protos::PerfEventConfig* perf_event_config_;
    ::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config_;
    ::perfetto::protos::TrackEventConfig* track_event_config_;
    ::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config_;
    ::perfetto::protos::InterceptorConfig* interceptor_config_;
    ::perfetto::protos::AndroidGameInterventionListConfig* android_game_intervention_list_config_;
    ::perfetto::protos::StatsdTracingConfig* statsd_tracing_config_;
    ::perfetto::protos::AndroidSystemPropertyConfig* android_system_property_config_;
    ::perfetto::protos::SystemInfoConfig* system_info_config_;
    ::perfetto::protos::NetworkPacketTraceConfig* network_packet_trace_config_;
    ::perfetto::protos::SurfaceFlingerLayersConfig* surfaceflinger_layers_config_;
    ::perfetto::protos::SurfaceFlingerTransactionsConfig* surfaceflinger_transactions_config_;
    ::perfetto::protos::AndroidSdkSyspropGuardConfig* android_sdk_sysprop_guard_config_;
    ::perfetto::protos::EtwConfig* etw_config_;
    ::perfetto::protos::ProtoLogConfig* protolog_config_;
    ::perfetto::protos::V8Config* v8_config_;
    ::perfetto::protos::AndroidInputEventConfig* android_input_event_config_;
    ::perfetto::protos::PixelModemConfig* pixel_modem_config_;
    ::perfetto::protos::TestConfig* for_testing_;
    uint32_t target_buffer_;
    uint32_t trace_duration_ms_;
    uint64_t tracing_session_id_;
    uint32_t stop_timeout_ms_;
    int session_initiator_;
    bool prefer_suspend_clock_for_duration_;
    bool enable_extra_guardrails_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fdata_5fsource_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataSourceConfig

// optional string name = 1;
inline bool DataSourceConfig::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataSourceConfig::has_name() const {
  return _internal_has_name();
}
inline void DataSourceConfig::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataSourceConfig::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.name)
}
inline std::string* DataSourceConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.name)
  return _s;
}
inline const std::string& DataSourceConfig::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DataSourceConfig::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceConfig::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceConfig::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataSourceConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.name)
}

// optional uint32 target_buffer = 2;
inline bool DataSourceConfig::_internal_has_target_buffer() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool DataSourceConfig::has_target_buffer() const {
  return _internal_has_target_buffer();
}
inline void DataSourceConfig::clear_target_buffer() {
  _impl_.target_buffer_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t DataSourceConfig::_internal_target_buffer() const {
  return _impl_.target_buffer_;
}
inline uint32_t DataSourceConfig::target_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.target_buffer)
  return _internal_target_buffer();
}
inline void DataSourceConfig::_internal_set_target_buffer(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.target_buffer_ = value;
}
inline void DataSourceConfig::set_target_buffer(uint32_t value) {
  _internal_set_target_buffer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.target_buffer)
}

// optional uint32 trace_duration_ms = 3;
inline bool DataSourceConfig::_internal_has_trace_duration_ms() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool DataSourceConfig::has_trace_duration_ms() const {
  return _internal_has_trace_duration_ms();
}
inline void DataSourceConfig::clear_trace_duration_ms() {
  _impl_.trace_duration_ms_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint32_t DataSourceConfig::_internal_trace_duration_ms() const {
  return _impl_.trace_duration_ms_;
}
inline uint32_t DataSourceConfig::trace_duration_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.trace_duration_ms)
  return _internal_trace_duration_ms();
}
inline void DataSourceConfig::_internal_set_trace_duration_ms(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.trace_duration_ms_ = value;
}
inline void DataSourceConfig::set_trace_duration_ms(uint32_t value) {
  _internal_set_trace_duration_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.trace_duration_ms)
}

// optional bool prefer_suspend_clock_for_duration = 122;
inline bool DataSourceConfig::_internal_has_prefer_suspend_clock_for_duration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool DataSourceConfig::has_prefer_suspend_clock_for_duration() const {
  return _internal_has_prefer_suspend_clock_for_duration();
}
inline void DataSourceConfig::clear_prefer_suspend_clock_for_duration() {
  _impl_.prefer_suspend_clock_for_duration_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool DataSourceConfig::_internal_prefer_suspend_clock_for_duration() const {
  return _impl_.prefer_suspend_clock_for_duration_;
}
inline bool DataSourceConfig::prefer_suspend_clock_for_duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.prefer_suspend_clock_for_duration)
  return _internal_prefer_suspend_clock_for_duration();
}
inline void DataSourceConfig::_internal_set_prefer_suspend_clock_for_duration(bool value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.prefer_suspend_clock_for_duration_ = value;
}
inline void DataSourceConfig::set_prefer_suspend_clock_for_duration(bool value) {
  _internal_set_prefer_suspend_clock_for_duration(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.prefer_suspend_clock_for_duration)
}

// optional uint32 stop_timeout_ms = 7;
inline bool DataSourceConfig::_internal_has_stop_timeout_ms() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool DataSourceConfig::has_stop_timeout_ms() const {
  return _internal_has_stop_timeout_ms();
}
inline void DataSourceConfig::clear_stop_timeout_ms() {
  _impl_.stop_timeout_ms_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t DataSourceConfig::_internal_stop_timeout_ms() const {
  return _impl_.stop_timeout_ms_;
}
inline uint32_t DataSourceConfig::stop_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.stop_timeout_ms)
  return _internal_stop_timeout_ms();
}
inline void DataSourceConfig::_internal_set_stop_timeout_ms(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.stop_timeout_ms_ = value;
}
inline void DataSourceConfig::set_stop_timeout_ms(uint32_t value) {
  _internal_set_stop_timeout_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.stop_timeout_ms)
}

// optional bool enable_extra_guardrails = 6;
inline bool DataSourceConfig::_internal_has_enable_extra_guardrails() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool DataSourceConfig::has_enable_extra_guardrails() const {
  return _internal_has_enable_extra_guardrails();
}
inline void DataSourceConfig::clear_enable_extra_guardrails() {
  _impl_.enable_extra_guardrails_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool DataSourceConfig::_internal_enable_extra_guardrails() const {
  return _impl_.enable_extra_guardrails_;
}
inline bool DataSourceConfig::enable_extra_guardrails() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.enable_extra_guardrails)
  return _internal_enable_extra_guardrails();
}
inline void DataSourceConfig::_internal_set_enable_extra_guardrails(bool value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.enable_extra_guardrails_ = value;
}
inline void DataSourceConfig::set_enable_extra_guardrails(bool value) {
  _internal_set_enable_extra_guardrails(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.enable_extra_guardrails)
}

// optional .perfetto.protos.DataSourceConfig.SessionInitiator session_initiator = 8;
inline bool DataSourceConfig::_internal_has_session_initiator() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool DataSourceConfig::has_session_initiator() const {
  return _internal_has_session_initiator();
}
inline void DataSourceConfig::clear_session_initiator() {
  _impl_.session_initiator_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::perfetto::protos::DataSourceConfig_SessionInitiator DataSourceConfig::_internal_session_initiator() const {
  return static_cast< ::perfetto::protos::DataSourceConfig_SessionInitiator >(_impl_.session_initiator_);
}
inline ::perfetto::protos::DataSourceConfig_SessionInitiator DataSourceConfig::session_initiator() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.session_initiator)
  return _internal_session_initiator();
}
inline void DataSourceConfig::_internal_set_session_initiator(::perfetto::protos::DataSourceConfig_SessionInitiator value) {
  assert(::perfetto::protos::DataSourceConfig_SessionInitiator_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.session_initiator_ = value;
}
inline void DataSourceConfig::set_session_initiator(::perfetto::protos::DataSourceConfig_SessionInitiator value) {
  _internal_set_session_initiator(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.session_initiator)
}

// optional uint64 tracing_session_id = 4;
inline bool DataSourceConfig::_internal_has_tracing_session_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool DataSourceConfig::has_tracing_session_id() const {
  return _internal_has_tracing_session_id();
}
inline void DataSourceConfig::clear_tracing_session_id() {
  _impl_.tracing_session_id_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint64_t DataSourceConfig::_internal_tracing_session_id() const {
  return _impl_.tracing_session_id_;
}
inline uint64_t DataSourceConfig::tracing_session_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.tracing_session_id)
  return _internal_tracing_session_id();
}
inline void DataSourceConfig::_internal_set_tracing_session_id(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.tracing_session_id_ = value;
}
inline void DataSourceConfig::set_tracing_session_id(uint64_t value) {
  _internal_set_tracing_session_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.tracing_session_id)
}

// optional .perfetto.protos.FtraceConfig ftrace_config = 100 [lazy = true];
inline bool DataSourceConfig::_internal_has_ftrace_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ftrace_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_ftrace_config() const {
  return _internal_has_ftrace_config();
}
inline const ::perfetto::protos::FtraceConfig& DataSourceConfig::_internal_ftrace_config() const {
  const ::perfetto::protos::FtraceConfig* p = _impl_.ftrace_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FtraceConfig&>(
      ::perfetto::protos::_FtraceConfig_default_instance_);
}
inline const ::perfetto::protos::FtraceConfig& DataSourceConfig::ftrace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.ftrace_config)
  return _internal_ftrace_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_ftrace_config(
    ::perfetto::protos::FtraceConfig* ftrace_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ftrace_config_);
  }
  _impl_.ftrace_config_ = ftrace_config;
  if (ftrace_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.ftrace_config)
}
inline ::perfetto::protos::FtraceConfig* DataSourceConfig::release_ftrace_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::FtraceConfig* temp = _impl_.ftrace_config_;
  _impl_.ftrace_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FtraceConfig* DataSourceConfig::unsafe_arena_release_ftrace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.ftrace_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::FtraceConfig* temp = _impl_.ftrace_config_;
  _impl_.ftrace_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceConfig* DataSourceConfig::_internal_mutable_ftrace_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.ftrace_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceConfig>(GetArenaForAllocation());
    _impl_.ftrace_config_ = p;
  }
  return _impl_.ftrace_config_;
}
inline ::perfetto::protos::FtraceConfig* DataSourceConfig::mutable_ftrace_config() {
  ::perfetto::protos::FtraceConfig* _msg = _internal_mutable_ftrace_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.ftrace_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_ftrace_config(::perfetto::protos::FtraceConfig* ftrace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ftrace_config_);
  }
  if (ftrace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ftrace_config));
    if (message_arena != submessage_arena) {
      ftrace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ftrace_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ftrace_config_ = ftrace_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.ftrace_config)
}

// optional .perfetto.protos.InodeFileConfig inode_file_config = 102 [lazy = true];
inline bool DataSourceConfig::_internal_has_inode_file_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inode_file_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_inode_file_config() const {
  return _internal_has_inode_file_config();
}
inline const ::perfetto::protos::InodeFileConfig& DataSourceConfig::_internal_inode_file_config() const {
  const ::perfetto::protos::InodeFileConfig* p = _impl_.inode_file_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::InodeFileConfig&>(
      ::perfetto::protos::_InodeFileConfig_default_instance_);
}
inline const ::perfetto::protos::InodeFileConfig& DataSourceConfig::inode_file_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.inode_file_config)
  return _internal_inode_file_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_inode_file_config(
    ::perfetto::protos::InodeFileConfig* inode_file_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inode_file_config_);
  }
  _impl_.inode_file_config_ = inode_file_config;
  if (inode_file_config) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.inode_file_config)
}
inline ::perfetto::protos::InodeFileConfig* DataSourceConfig::release_inode_file_config() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::InodeFileConfig* temp = _impl_.inode_file_config_;
  _impl_.inode_file_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::InodeFileConfig* DataSourceConfig::unsafe_arena_release_inode_file_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.inode_file_config)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::InodeFileConfig* temp = _impl_.inode_file_config_;
  _impl_.inode_file_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InodeFileConfig* DataSourceConfig::_internal_mutable_inode_file_config() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.inode_file_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InodeFileConfig>(GetArenaForAllocation());
    _impl_.inode_file_config_ = p;
  }
  return _impl_.inode_file_config_;
}
inline ::perfetto::protos::InodeFileConfig* DataSourceConfig::mutable_inode_file_config() {
  ::perfetto::protos::InodeFileConfig* _msg = _internal_mutable_inode_file_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.inode_file_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_inode_file_config(::perfetto::protos::InodeFileConfig* inode_file_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inode_file_config_);
  }
  if (inode_file_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inode_file_config));
    if (message_arena != submessage_arena) {
      inode_file_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inode_file_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.inode_file_config_ = inode_file_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.inode_file_config)
}

// optional .perfetto.protos.ProcessStatsConfig process_stats_config = 103 [lazy = true];
inline bool DataSourceConfig::_internal_has_process_stats_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.process_stats_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_process_stats_config() const {
  return _internal_has_process_stats_config();
}
inline const ::perfetto::protos::ProcessStatsConfig& DataSourceConfig::_internal_process_stats_config() const {
  const ::perfetto::protos::ProcessStatsConfig* p = _impl_.process_stats_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ProcessStatsConfig&>(
      ::perfetto::protos::_ProcessStatsConfig_default_instance_);
}
inline const ::perfetto::protos::ProcessStatsConfig& DataSourceConfig::process_stats_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.process_stats_config)
  return _internal_process_stats_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_process_stats_config(
    ::perfetto::protos::ProcessStatsConfig* process_stats_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.process_stats_config_);
  }
  _impl_.process_stats_config_ = process_stats_config;
  if (process_stats_config) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.process_stats_config)
}
inline ::perfetto::protos::ProcessStatsConfig* DataSourceConfig::release_process_stats_config() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ProcessStatsConfig* temp = _impl_.process_stats_config_;
  _impl_.process_stats_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ProcessStatsConfig* DataSourceConfig::unsafe_arena_release_process_stats_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.process_stats_config)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ProcessStatsConfig* temp = _impl_.process_stats_config_;
  _impl_.process_stats_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProcessStatsConfig* DataSourceConfig::_internal_mutable_process_stats_config() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.process_stats_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProcessStatsConfig>(GetArenaForAllocation());
    _impl_.process_stats_config_ = p;
  }
  return _impl_.process_stats_config_;
}
inline ::perfetto::protos::ProcessStatsConfig* DataSourceConfig::mutable_process_stats_config() {
  ::perfetto::protos::ProcessStatsConfig* _msg = _internal_mutable_process_stats_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.process_stats_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_process_stats_config(::perfetto::protos::ProcessStatsConfig* process_stats_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.process_stats_config_);
  }
  if (process_stats_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_stats_config));
    if (message_arena != submessage_arena) {
      process_stats_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_stats_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.process_stats_config_ = process_stats_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.process_stats_config)
}

// optional .perfetto.protos.SysStatsConfig sys_stats_config = 104 [lazy = true];
inline bool DataSourceConfig::_internal_has_sys_stats_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sys_stats_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_sys_stats_config() const {
  return _internal_has_sys_stats_config();
}
inline const ::perfetto::protos::SysStatsConfig& DataSourceConfig::_internal_sys_stats_config() const {
  const ::perfetto::protos::SysStatsConfig* p = _impl_.sys_stats_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::SysStatsConfig&>(
      ::perfetto::protos::_SysStatsConfig_default_instance_);
}
inline const ::perfetto::protos::SysStatsConfig& DataSourceConfig::sys_stats_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.sys_stats_config)
  return _internal_sys_stats_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_sys_stats_config(
    ::perfetto::protos::SysStatsConfig* sys_stats_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sys_stats_config_);
  }
  _impl_.sys_stats_config_ = sys_stats_config;
  if (sys_stats_config) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.sys_stats_config)
}
inline ::perfetto::protos::SysStatsConfig* DataSourceConfig::release_sys_stats_config() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::SysStatsConfig* temp = _impl_.sys_stats_config_;
  _impl_.sys_stats_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::SysStatsConfig* DataSourceConfig::unsafe_arena_release_sys_stats_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.sys_stats_config)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::SysStatsConfig* temp = _impl_.sys_stats_config_;
  _impl_.sys_stats_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::SysStatsConfig* DataSourceConfig::_internal_mutable_sys_stats_config() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.sys_stats_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::SysStatsConfig>(GetArenaForAllocation());
    _impl_.sys_stats_config_ = p;
  }
  return _impl_.sys_stats_config_;
}
inline ::perfetto::protos::SysStatsConfig* DataSourceConfig::mutable_sys_stats_config() {
  ::perfetto::protos::SysStatsConfig* _msg = _internal_mutable_sys_stats_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.sys_stats_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_sys_stats_config(::perfetto::protos::SysStatsConfig* sys_stats_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sys_stats_config_);
  }
  if (sys_stats_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_stats_config));
    if (message_arena != submessage_arena) {
      sys_stats_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_stats_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.sys_stats_config_ = sys_stats_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.sys_stats_config)
}

// optional .perfetto.protos.HeapprofdConfig heapprofd_config = 105 [lazy = true];
inline bool DataSourceConfig::_internal_has_heapprofd_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heapprofd_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_heapprofd_config() const {
  return _internal_has_heapprofd_config();
}
inline const ::perfetto::protos::HeapprofdConfig& DataSourceConfig::_internal_heapprofd_config() const {
  const ::perfetto::protos::HeapprofdConfig* p = _impl_.heapprofd_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::HeapprofdConfig&>(
      ::perfetto::protos::_HeapprofdConfig_default_instance_);
}
inline const ::perfetto::protos::HeapprofdConfig& DataSourceConfig::heapprofd_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.heapprofd_config)
  return _internal_heapprofd_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_heapprofd_config(
    ::perfetto::protos::HeapprofdConfig* heapprofd_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heapprofd_config_);
  }
  _impl_.heapprofd_config_ = heapprofd_config;
  if (heapprofd_config) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.heapprofd_config)
}
inline ::perfetto::protos::HeapprofdConfig* DataSourceConfig::release_heapprofd_config() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::HeapprofdConfig* temp = _impl_.heapprofd_config_;
  _impl_.heapprofd_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::HeapprofdConfig* DataSourceConfig::unsafe_arena_release_heapprofd_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.heapprofd_config)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::HeapprofdConfig* temp = _impl_.heapprofd_config_;
  _impl_.heapprofd_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::HeapprofdConfig* DataSourceConfig::_internal_mutable_heapprofd_config() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.heapprofd_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::HeapprofdConfig>(GetArenaForAllocation());
    _impl_.heapprofd_config_ = p;
  }
  return _impl_.heapprofd_config_;
}
inline ::perfetto::protos::HeapprofdConfig* DataSourceConfig::mutable_heapprofd_config() {
  ::perfetto::protos::HeapprofdConfig* _msg = _internal_mutable_heapprofd_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.heapprofd_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_heapprofd_config(::perfetto::protos::HeapprofdConfig* heapprofd_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heapprofd_config_);
  }
  if (heapprofd_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heapprofd_config));
    if (message_arena != submessage_arena) {
      heapprofd_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heapprofd_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.heapprofd_config_ = heapprofd_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.heapprofd_config)
}

// optional .perfetto.protos.JavaHprofConfig java_hprof_config = 110 [lazy = true];
inline bool DataSourceConfig::_internal_has_java_hprof_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.java_hprof_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_java_hprof_config() const {
  return _internal_has_java_hprof_config();
}
inline const ::perfetto::protos::JavaHprofConfig& DataSourceConfig::_internal_java_hprof_config() const {
  const ::perfetto::protos::JavaHprofConfig* p = _impl_.java_hprof_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::JavaHprofConfig&>(
      ::perfetto::protos::_JavaHprofConfig_default_instance_);
}
inline const ::perfetto::protos::JavaHprofConfig& DataSourceConfig::java_hprof_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.java_hprof_config)
  return _internal_java_hprof_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_java_hprof_config(
    ::perfetto::protos::JavaHprofConfig* java_hprof_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.java_hprof_config_);
  }
  _impl_.java_hprof_config_ = java_hprof_config;
  if (java_hprof_config) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.java_hprof_config)
}
inline ::perfetto::protos::JavaHprofConfig* DataSourceConfig::release_java_hprof_config() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::JavaHprofConfig* temp = _impl_.java_hprof_config_;
  _impl_.java_hprof_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::JavaHprofConfig* DataSourceConfig::unsafe_arena_release_java_hprof_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.java_hprof_config)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::JavaHprofConfig* temp = _impl_.java_hprof_config_;
  _impl_.java_hprof_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::JavaHprofConfig* DataSourceConfig::_internal_mutable_java_hprof_config() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.java_hprof_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::JavaHprofConfig>(GetArenaForAllocation());
    _impl_.java_hprof_config_ = p;
  }
  return _impl_.java_hprof_config_;
}
inline ::perfetto::protos::JavaHprofConfig* DataSourceConfig::mutable_java_hprof_config() {
  ::perfetto::protos::JavaHprofConfig* _msg = _internal_mutable_java_hprof_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.java_hprof_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_java_hprof_config(::perfetto::protos::JavaHprofConfig* java_hprof_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.java_hprof_config_);
  }
  if (java_hprof_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(java_hprof_config));
    if (message_arena != submessage_arena) {
      java_hprof_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, java_hprof_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.java_hprof_config_ = java_hprof_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.java_hprof_config)
}

// optional .perfetto.protos.AndroidPowerConfig android_power_config = 106 [lazy = true];
inline bool DataSourceConfig::_internal_has_android_power_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_power_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_android_power_config() const {
  return _internal_has_android_power_config();
}
inline const ::perfetto::protos::AndroidPowerConfig& DataSourceConfig::_internal_android_power_config() const {
  const ::perfetto::protos::AndroidPowerConfig* p = _impl_.android_power_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::AndroidPowerConfig&>(
      ::perfetto::protos::_AndroidPowerConfig_default_instance_);
}
inline const ::perfetto::protos::AndroidPowerConfig& DataSourceConfig::android_power_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_power_config)
  return _internal_android_power_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_android_power_config(
    ::perfetto::protos::AndroidPowerConfig* android_power_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_power_config_);
  }
  _impl_.android_power_config_ = android_power_config;
  if (android_power_config) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.android_power_config)
}
inline ::perfetto::protos::AndroidPowerConfig* DataSourceConfig::release_android_power_config() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::AndroidPowerConfig* temp = _impl_.android_power_config_;
  _impl_.android_power_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::AndroidPowerConfig* DataSourceConfig::unsafe_arena_release_android_power_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_power_config)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::AndroidPowerConfig* temp = _impl_.android_power_config_;
  _impl_.android_power_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidPowerConfig* DataSourceConfig::_internal_mutable_android_power_config() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.android_power_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidPowerConfig>(GetArenaForAllocation());
    _impl_.android_power_config_ = p;
  }
  return _impl_.android_power_config_;
}
inline ::perfetto::protos::AndroidPowerConfig* DataSourceConfig::mutable_android_power_config() {
  ::perfetto::protos::AndroidPowerConfig* _msg = _internal_mutable_android_power_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_power_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_android_power_config(::perfetto::protos::AndroidPowerConfig* android_power_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_power_config_);
  }
  if (android_power_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_power_config));
    if (message_arena != submessage_arena) {
      android_power_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_power_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.android_power_config_ = android_power_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_power_config)
}

// optional .perfetto.protos.AndroidLogConfig android_log_config = 107 [lazy = true];
inline bool DataSourceConfig::_internal_has_android_log_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_log_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_android_log_config() const {
  return _internal_has_android_log_config();
}
inline const ::perfetto::protos::AndroidLogConfig& DataSourceConfig::_internal_android_log_config() const {
  const ::perfetto::protos::AndroidLogConfig* p = _impl_.android_log_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::AndroidLogConfig&>(
      ::perfetto::protos::_AndroidLogConfig_default_instance_);
}
inline const ::perfetto::protos::AndroidLogConfig& DataSourceConfig::android_log_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_log_config)
  return _internal_android_log_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_android_log_config(
    ::perfetto::protos::AndroidLogConfig* android_log_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_log_config_);
  }
  _impl_.android_log_config_ = android_log_config;
  if (android_log_config) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.android_log_config)
}
inline ::perfetto::protos::AndroidLogConfig* DataSourceConfig::release_android_log_config() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::AndroidLogConfig* temp = _impl_.android_log_config_;
  _impl_.android_log_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::AndroidLogConfig* DataSourceConfig::unsafe_arena_release_android_log_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_log_config)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::AndroidLogConfig* temp = _impl_.android_log_config_;
  _impl_.android_log_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidLogConfig* DataSourceConfig::_internal_mutable_android_log_config() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.android_log_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidLogConfig>(GetArenaForAllocation());
    _impl_.android_log_config_ = p;
  }
  return _impl_.android_log_config_;
}
inline ::perfetto::protos::AndroidLogConfig* DataSourceConfig::mutable_android_log_config() {
  ::perfetto::protos::AndroidLogConfig* _msg = _internal_mutable_android_log_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_log_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_android_log_config(::perfetto::protos::AndroidLogConfig* android_log_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_log_config_);
  }
  if (android_log_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_log_config));
    if (message_arena != submessage_arena) {
      android_log_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_log_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.android_log_config_ = android_log_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_log_config)
}

// optional .perfetto.protos.GpuCounterConfig gpu_counter_config = 108 [lazy = true];
inline bool DataSourceConfig::_internal_has_gpu_counter_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gpu_counter_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_gpu_counter_config() const {
  return _internal_has_gpu_counter_config();
}
inline const ::perfetto::protos::GpuCounterConfig& DataSourceConfig::_internal_gpu_counter_config() const {
  const ::perfetto::protos::GpuCounterConfig* p = _impl_.gpu_counter_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::GpuCounterConfig&>(
      ::perfetto::protos::_GpuCounterConfig_default_instance_);
}
inline const ::perfetto::protos::GpuCounterConfig& DataSourceConfig::gpu_counter_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.gpu_counter_config)
  return _internal_gpu_counter_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_gpu_counter_config(
    ::perfetto::protos::GpuCounterConfig* gpu_counter_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gpu_counter_config_);
  }
  _impl_.gpu_counter_config_ = gpu_counter_config;
  if (gpu_counter_config) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.gpu_counter_config)
}
inline ::perfetto::protos::GpuCounterConfig* DataSourceConfig::release_gpu_counter_config() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::GpuCounterConfig* temp = _impl_.gpu_counter_config_;
  _impl_.gpu_counter_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::GpuCounterConfig* DataSourceConfig::unsafe_arena_release_gpu_counter_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.gpu_counter_config)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::GpuCounterConfig* temp = _impl_.gpu_counter_config_;
  _impl_.gpu_counter_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::GpuCounterConfig* DataSourceConfig::_internal_mutable_gpu_counter_config() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.gpu_counter_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::GpuCounterConfig>(GetArenaForAllocation());
    _impl_.gpu_counter_config_ = p;
  }
  return _impl_.gpu_counter_config_;
}
inline ::perfetto::protos::GpuCounterConfig* DataSourceConfig::mutable_gpu_counter_config() {
  ::perfetto::protos::GpuCounterConfig* _msg = _internal_mutable_gpu_counter_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.gpu_counter_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_gpu_counter_config(::perfetto::protos::GpuCounterConfig* gpu_counter_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gpu_counter_config_);
  }
  if (gpu_counter_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_counter_config));
    if (message_arena != submessage_arena) {
      gpu_counter_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_counter_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.gpu_counter_config_ = gpu_counter_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.gpu_counter_config)
}

// optional .perfetto.protos.AndroidGameInterventionListConfig android_game_intervention_list_config = 116 [lazy = true];
inline bool DataSourceConfig::_internal_has_android_game_intervention_list_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_game_intervention_list_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_android_game_intervention_list_config() const {
  return _internal_has_android_game_intervention_list_config();
}
inline const ::perfetto::protos::AndroidGameInterventionListConfig& DataSourceConfig::_internal_android_game_intervention_list_config() const {
  const ::perfetto::protos::AndroidGameInterventionListConfig* p = _impl_.android_game_intervention_list_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::AndroidGameInterventionListConfig&>(
      ::perfetto::protos::_AndroidGameInterventionListConfig_default_instance_);
}
inline const ::perfetto::protos::AndroidGameInterventionListConfig& DataSourceConfig::android_game_intervention_list_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_game_intervention_list_config)
  return _internal_android_game_intervention_list_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_android_game_intervention_list_config(
    ::perfetto::protos::AndroidGameInterventionListConfig* android_game_intervention_list_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_game_intervention_list_config_);
  }
  _impl_.android_game_intervention_list_config_ = android_game_intervention_list_config;
  if (android_game_intervention_list_config) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.android_game_intervention_list_config)
}
inline ::perfetto::protos::AndroidGameInterventionListConfig* DataSourceConfig::release_android_game_intervention_list_config() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::perfetto::protos::AndroidGameInterventionListConfig* temp = _impl_.android_game_intervention_list_config_;
  _impl_.android_game_intervention_list_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::AndroidGameInterventionListConfig* DataSourceConfig::unsafe_arena_release_android_game_intervention_list_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_game_intervention_list_config)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::perfetto::protos::AndroidGameInterventionListConfig* temp = _impl_.android_game_intervention_list_config_;
  _impl_.android_game_intervention_list_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidGameInterventionListConfig* DataSourceConfig::_internal_mutable_android_game_intervention_list_config() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.android_game_intervention_list_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidGameInterventionListConfig>(GetArenaForAllocation());
    _impl_.android_game_intervention_list_config_ = p;
  }
  return _impl_.android_game_intervention_list_config_;
}
inline ::perfetto::protos::AndroidGameInterventionListConfig* DataSourceConfig::mutable_android_game_intervention_list_config() {
  ::perfetto::protos::AndroidGameInterventionListConfig* _msg = _internal_mutable_android_game_intervention_list_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_game_intervention_list_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_android_game_intervention_list_config(::perfetto::protos::AndroidGameInterventionListConfig* android_game_intervention_list_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_game_intervention_list_config_);
  }
  if (android_game_intervention_list_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_game_intervention_list_config));
    if (message_arena != submessage_arena) {
      android_game_intervention_list_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_game_intervention_list_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.android_game_intervention_list_config_ = android_game_intervention_list_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_game_intervention_list_config)
}

// optional .perfetto.protos.PackagesListConfig packages_list_config = 109 [lazy = true];
inline bool DataSourceConfig::_internal_has_packages_list_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packages_list_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_packages_list_config() const {
  return _internal_has_packages_list_config();
}
inline const ::perfetto::protos::PackagesListConfig& DataSourceConfig::_internal_packages_list_config() const {
  const ::perfetto::protos::PackagesListConfig* p = _impl_.packages_list_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PackagesListConfig&>(
      ::perfetto::protos::_PackagesListConfig_default_instance_);
}
inline const ::perfetto::protos::PackagesListConfig& DataSourceConfig::packages_list_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.packages_list_config)
  return _internal_packages_list_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_packages_list_config(
    ::perfetto::protos::PackagesListConfig* packages_list_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packages_list_config_);
  }
  _impl_.packages_list_config_ = packages_list_config;
  if (packages_list_config) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.packages_list_config)
}
inline ::perfetto::protos::PackagesListConfig* DataSourceConfig::release_packages_list_config() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::PackagesListConfig* temp = _impl_.packages_list_config_;
  _impl_.packages_list_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PackagesListConfig* DataSourceConfig::unsafe_arena_release_packages_list_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.packages_list_config)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::PackagesListConfig* temp = _impl_.packages_list_config_;
  _impl_.packages_list_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PackagesListConfig* DataSourceConfig::_internal_mutable_packages_list_config() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.packages_list_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PackagesListConfig>(GetArenaForAllocation());
    _impl_.packages_list_config_ = p;
  }
  return _impl_.packages_list_config_;
}
inline ::perfetto::protos::PackagesListConfig* DataSourceConfig::mutable_packages_list_config() {
  ::perfetto::protos::PackagesListConfig* _msg = _internal_mutable_packages_list_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.packages_list_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_packages_list_config(::perfetto::protos::PackagesListConfig* packages_list_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packages_list_config_);
  }
  if (packages_list_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packages_list_config));
    if (message_arena != submessage_arena) {
      packages_list_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packages_list_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.packages_list_config_ = packages_list_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.packages_list_config)
}

// optional .perfetto.protos.PerfEventConfig perf_event_config = 111 [lazy = true];
inline bool DataSourceConfig::_internal_has_perf_event_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.perf_event_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_perf_event_config() const {
  return _internal_has_perf_event_config();
}
inline const ::perfetto::protos::PerfEventConfig& DataSourceConfig::_internal_perf_event_config() const {
  const ::perfetto::protos::PerfEventConfig* p = _impl_.perf_event_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PerfEventConfig&>(
      ::perfetto::protos::_PerfEventConfig_default_instance_);
}
inline const ::perfetto::protos::PerfEventConfig& DataSourceConfig::perf_event_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.perf_event_config)
  return _internal_perf_event_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_perf_event_config(
    ::perfetto::protos::PerfEventConfig* perf_event_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perf_event_config_);
  }
  _impl_.perf_event_config_ = perf_event_config;
  if (perf_event_config) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.perf_event_config)
}
inline ::perfetto::protos::PerfEventConfig* DataSourceConfig::release_perf_event_config() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::PerfEventConfig* temp = _impl_.perf_event_config_;
  _impl_.perf_event_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PerfEventConfig* DataSourceConfig::unsafe_arena_release_perf_event_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.perf_event_config)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::PerfEventConfig* temp = _impl_.perf_event_config_;
  _impl_.perf_event_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig* DataSourceConfig::_internal_mutable_perf_event_config() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.perf_event_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig>(GetArenaForAllocation());
    _impl_.perf_event_config_ = p;
  }
  return _impl_.perf_event_config_;
}
inline ::perfetto::protos::PerfEventConfig* DataSourceConfig::mutable_perf_event_config() {
  ::perfetto::protos::PerfEventConfig* _msg = _internal_mutable_perf_event_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.perf_event_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_perf_event_config(::perfetto::protos::PerfEventConfig* perf_event_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perf_event_config_);
  }
  if (perf_event_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_event_config));
    if (message_arena != submessage_arena) {
      perf_event_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_event_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.perf_event_config_ = perf_event_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.perf_event_config)
}

// optional .perfetto.protos.VulkanMemoryConfig vulkan_memory_config = 112 [lazy = true];
inline bool DataSourceConfig::_internal_has_vulkan_memory_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vulkan_memory_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_vulkan_memory_config() const {
  return _internal_has_vulkan_memory_config();
}
inline const ::perfetto::protos::VulkanMemoryConfig& DataSourceConfig::_internal_vulkan_memory_config() const {
  const ::perfetto::protos::VulkanMemoryConfig* p = _impl_.vulkan_memory_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::VulkanMemoryConfig&>(
      ::perfetto::protos::_VulkanMemoryConfig_default_instance_);
}
inline const ::perfetto::protos::VulkanMemoryConfig& DataSourceConfig::vulkan_memory_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.vulkan_memory_config)
  return _internal_vulkan_memory_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_vulkan_memory_config(
    ::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vulkan_memory_config_);
  }
  _impl_.vulkan_memory_config_ = vulkan_memory_config;
  if (vulkan_memory_config) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.vulkan_memory_config)
}
inline ::perfetto::protos::VulkanMemoryConfig* DataSourceConfig::release_vulkan_memory_config() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::VulkanMemoryConfig* temp = _impl_.vulkan_memory_config_;
  _impl_.vulkan_memory_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::VulkanMemoryConfig* DataSourceConfig::unsafe_arena_release_vulkan_memory_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.vulkan_memory_config)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::VulkanMemoryConfig* temp = _impl_.vulkan_memory_config_;
  _impl_.vulkan_memory_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::VulkanMemoryConfig* DataSourceConfig::_internal_mutable_vulkan_memory_config() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.vulkan_memory_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::VulkanMemoryConfig>(GetArenaForAllocation());
    _impl_.vulkan_memory_config_ = p;
  }
  return _impl_.vulkan_memory_config_;
}
inline ::perfetto::protos::VulkanMemoryConfig* DataSourceConfig::mutable_vulkan_memory_config() {
  ::perfetto::protos::VulkanMemoryConfig* _msg = _internal_mutable_vulkan_memory_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.vulkan_memory_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_vulkan_memory_config(::perfetto::protos::VulkanMemoryConfig* vulkan_memory_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vulkan_memory_config_);
  }
  if (vulkan_memory_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vulkan_memory_config));
    if (message_arena != submessage_arena) {
      vulkan_memory_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vulkan_memory_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.vulkan_memory_config_ = vulkan_memory_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.vulkan_memory_config)
}

// optional .perfetto.protos.TrackEventConfig track_event_config = 113 [lazy = true];
inline bool DataSourceConfig::_internal_has_track_event_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.track_event_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_track_event_config() const {
  return _internal_has_track_event_config();
}
inline const ::perfetto::protos::TrackEventConfig& DataSourceConfig::_internal_track_event_config() const {
  const ::perfetto::protos::TrackEventConfig* p = _impl_.track_event_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TrackEventConfig&>(
      ::perfetto::protos::_TrackEventConfig_default_instance_);
}
inline const ::perfetto::protos::TrackEventConfig& DataSourceConfig::track_event_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.track_event_config)
  return _internal_track_event_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_track_event_config(
    ::perfetto::protos::TrackEventConfig* track_event_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.track_event_config_);
  }
  _impl_.track_event_config_ = track_event_config;
  if (track_event_config) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.track_event_config)
}
inline ::perfetto::protos::TrackEventConfig* DataSourceConfig::release_track_event_config() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::TrackEventConfig* temp = _impl_.track_event_config_;
  _impl_.track_event_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TrackEventConfig* DataSourceConfig::unsafe_arena_release_track_event_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.track_event_config)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::TrackEventConfig* temp = _impl_.track_event_config_;
  _impl_.track_event_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TrackEventConfig* DataSourceConfig::_internal_mutable_track_event_config() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.track_event_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TrackEventConfig>(GetArenaForAllocation());
    _impl_.track_event_config_ = p;
  }
  return _impl_.track_event_config_;
}
inline ::perfetto::protos::TrackEventConfig* DataSourceConfig::mutable_track_event_config() {
  ::perfetto::protos::TrackEventConfig* _msg = _internal_mutable_track_event_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.track_event_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_track_event_config(::perfetto::protos::TrackEventConfig* track_event_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.track_event_config_);
  }
  if (track_event_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_event_config));
    if (message_arena != submessage_arena) {
      track_event_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.track_event_config_ = track_event_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.track_event_config)
}

// optional .perfetto.protos.AndroidPolledStateConfig android_polled_state_config = 114 [lazy = true];
inline bool DataSourceConfig::_internal_has_android_polled_state_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_polled_state_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_android_polled_state_config() const {
  return _internal_has_android_polled_state_config();
}
inline const ::perfetto::protos::AndroidPolledStateConfig& DataSourceConfig::_internal_android_polled_state_config() const {
  const ::perfetto::protos::AndroidPolledStateConfig* p = _impl_.android_polled_state_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::AndroidPolledStateConfig&>(
      ::perfetto::protos::_AndroidPolledStateConfig_default_instance_);
}
inline const ::perfetto::protos::AndroidPolledStateConfig& DataSourceConfig::android_polled_state_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_polled_state_config)
  return _internal_android_polled_state_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_android_polled_state_config(
    ::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_polled_state_config_);
  }
  _impl_.android_polled_state_config_ = android_polled_state_config;
  if (android_polled_state_config) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.android_polled_state_config)
}
inline ::perfetto::protos::AndroidPolledStateConfig* DataSourceConfig::release_android_polled_state_config() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::perfetto::protos::AndroidPolledStateConfig* temp = _impl_.android_polled_state_config_;
  _impl_.android_polled_state_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::AndroidPolledStateConfig* DataSourceConfig::unsafe_arena_release_android_polled_state_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_polled_state_config)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::perfetto::protos::AndroidPolledStateConfig* temp = _impl_.android_polled_state_config_;
  _impl_.android_polled_state_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidPolledStateConfig* DataSourceConfig::_internal_mutable_android_polled_state_config() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.android_polled_state_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidPolledStateConfig>(GetArenaForAllocation());
    _impl_.android_polled_state_config_ = p;
  }
  return _impl_.android_polled_state_config_;
}
inline ::perfetto::protos::AndroidPolledStateConfig* DataSourceConfig::mutable_android_polled_state_config() {
  ::perfetto::protos::AndroidPolledStateConfig* _msg = _internal_mutable_android_polled_state_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_polled_state_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_android_polled_state_config(::perfetto::protos::AndroidPolledStateConfig* android_polled_state_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_polled_state_config_);
  }
  if (android_polled_state_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_polled_state_config));
    if (message_arena != submessage_arena) {
      android_polled_state_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_polled_state_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.android_polled_state_config_ = android_polled_state_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_polled_state_config)
}

// optional .perfetto.protos.AndroidSystemPropertyConfig android_system_property_config = 118 [lazy = true];
inline bool DataSourceConfig::_internal_has_android_system_property_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_system_property_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_android_system_property_config() const {
  return _internal_has_android_system_property_config();
}
inline const ::perfetto::protos::AndroidSystemPropertyConfig& DataSourceConfig::_internal_android_system_property_config() const {
  const ::perfetto::protos::AndroidSystemPropertyConfig* p = _impl_.android_system_property_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::AndroidSystemPropertyConfig&>(
      ::perfetto::protos::_AndroidSystemPropertyConfig_default_instance_);
}
inline const ::perfetto::protos::AndroidSystemPropertyConfig& DataSourceConfig::android_system_property_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_system_property_config)
  return _internal_android_system_property_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_android_system_property_config(
    ::perfetto::protos::AndroidSystemPropertyConfig* android_system_property_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_system_property_config_);
  }
  _impl_.android_system_property_config_ = android_system_property_config;
  if (android_system_property_config) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.android_system_property_config)
}
inline ::perfetto::protos::AndroidSystemPropertyConfig* DataSourceConfig::release_android_system_property_config() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::perfetto::protos::AndroidSystemPropertyConfig* temp = _impl_.android_system_property_config_;
  _impl_.android_system_property_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::AndroidSystemPropertyConfig* DataSourceConfig::unsafe_arena_release_android_system_property_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_system_property_config)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::perfetto::protos::AndroidSystemPropertyConfig* temp = _impl_.android_system_property_config_;
  _impl_.android_system_property_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidSystemPropertyConfig* DataSourceConfig::_internal_mutable_android_system_property_config() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.android_system_property_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidSystemPropertyConfig>(GetArenaForAllocation());
    _impl_.android_system_property_config_ = p;
  }
  return _impl_.android_system_property_config_;
}
inline ::perfetto::protos::AndroidSystemPropertyConfig* DataSourceConfig::mutable_android_system_property_config() {
  ::perfetto::protos::AndroidSystemPropertyConfig* _msg = _internal_mutable_android_system_property_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_system_property_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_android_system_property_config(::perfetto::protos::AndroidSystemPropertyConfig* android_system_property_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_system_property_config_);
  }
  if (android_system_property_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_system_property_config));
    if (message_arena != submessage_arena) {
      android_system_property_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_system_property_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.android_system_property_config_ = android_system_property_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_system_property_config)
}

// optional .perfetto.protos.StatsdTracingConfig statsd_tracing_config = 117 [lazy = true];
inline bool DataSourceConfig::_internal_has_statsd_tracing_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statsd_tracing_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_statsd_tracing_config() const {
  return _internal_has_statsd_tracing_config();
}
inline const ::perfetto::protos::StatsdTracingConfig& DataSourceConfig::_internal_statsd_tracing_config() const {
  const ::perfetto::protos::StatsdTracingConfig* p = _impl_.statsd_tracing_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::StatsdTracingConfig&>(
      ::perfetto::protos::_StatsdTracingConfig_default_instance_);
}
inline const ::perfetto::protos::StatsdTracingConfig& DataSourceConfig::statsd_tracing_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.statsd_tracing_config)
  return _internal_statsd_tracing_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_statsd_tracing_config(
    ::perfetto::protos::StatsdTracingConfig* statsd_tracing_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statsd_tracing_config_);
  }
  _impl_.statsd_tracing_config_ = statsd_tracing_config;
  if (statsd_tracing_config) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.statsd_tracing_config)
}
inline ::perfetto::protos::StatsdTracingConfig* DataSourceConfig::release_statsd_tracing_config() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::perfetto::protos::StatsdTracingConfig* temp = _impl_.statsd_tracing_config_;
  _impl_.statsd_tracing_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::StatsdTracingConfig* DataSourceConfig::unsafe_arena_release_statsd_tracing_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.statsd_tracing_config)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::perfetto::protos::StatsdTracingConfig* temp = _impl_.statsd_tracing_config_;
  _impl_.statsd_tracing_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::StatsdTracingConfig* DataSourceConfig::_internal_mutable_statsd_tracing_config() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.statsd_tracing_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::StatsdTracingConfig>(GetArenaForAllocation());
    _impl_.statsd_tracing_config_ = p;
  }
  return _impl_.statsd_tracing_config_;
}
inline ::perfetto::protos::StatsdTracingConfig* DataSourceConfig::mutable_statsd_tracing_config() {
  ::perfetto::protos::StatsdTracingConfig* _msg = _internal_mutable_statsd_tracing_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.statsd_tracing_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_statsd_tracing_config(::perfetto::protos::StatsdTracingConfig* statsd_tracing_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statsd_tracing_config_);
  }
  if (statsd_tracing_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statsd_tracing_config));
    if (message_arena != submessage_arena) {
      statsd_tracing_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statsd_tracing_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.statsd_tracing_config_ = statsd_tracing_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.statsd_tracing_config)
}

// optional .perfetto.protos.SystemInfoConfig system_info_config = 119;
inline bool DataSourceConfig::_internal_has_system_info_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.system_info_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_system_info_config() const {
  return _internal_has_system_info_config();
}
inline const ::perfetto::protos::SystemInfoConfig& DataSourceConfig::_internal_system_info_config() const {
  const ::perfetto::protos::SystemInfoConfig* p = _impl_.system_info_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::SystemInfoConfig&>(
      ::perfetto::protos::_SystemInfoConfig_default_instance_);
}
inline const ::perfetto::protos::SystemInfoConfig& DataSourceConfig::system_info_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.system_info_config)
  return _internal_system_info_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_system_info_config(
    ::perfetto::protos::SystemInfoConfig* system_info_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_info_config_);
  }
  _impl_.system_info_config_ = system_info_config;
  if (system_info_config) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.system_info_config)
}
inline ::perfetto::protos::SystemInfoConfig* DataSourceConfig::release_system_info_config() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::perfetto::protos::SystemInfoConfig* temp = _impl_.system_info_config_;
  _impl_.system_info_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::SystemInfoConfig* DataSourceConfig::unsafe_arena_release_system_info_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.system_info_config)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::perfetto::protos::SystemInfoConfig* temp = _impl_.system_info_config_;
  _impl_.system_info_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::SystemInfoConfig* DataSourceConfig::_internal_mutable_system_info_config() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.system_info_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::SystemInfoConfig>(GetArenaForAllocation());
    _impl_.system_info_config_ = p;
  }
  return _impl_.system_info_config_;
}
inline ::perfetto::protos::SystemInfoConfig* DataSourceConfig::mutable_system_info_config() {
  ::perfetto::protos::SystemInfoConfig* _msg = _internal_mutable_system_info_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.system_info_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_system_info_config(::perfetto::protos::SystemInfoConfig* system_info_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_info_config_);
  }
  if (system_info_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_info_config));
    if (message_arena != submessage_arena) {
      system_info_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_info_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.system_info_config_ = system_info_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.system_info_config)
}

// optional .perfetto.protos.ChromeConfig chrome_config = 101;
inline bool DataSourceConfig::_internal_has_chrome_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_chrome_config() const {
  return _internal_has_chrome_config();
}
inline const ::perfetto::protos::ChromeConfig& DataSourceConfig::_internal_chrome_config() const {
  const ::perfetto::protos::ChromeConfig* p = _impl_.chrome_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeConfig&>(
      ::perfetto::protos::_ChromeConfig_default_instance_);
}
inline const ::perfetto::protos::ChromeConfig& DataSourceConfig::chrome_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.chrome_config)
  return _internal_chrome_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_chrome_config(
    ::perfetto::protos::ChromeConfig* chrome_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_config_);
  }
  _impl_.chrome_config_ = chrome_config;
  if (chrome_config) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.chrome_config)
}
inline ::perfetto::protos::ChromeConfig* DataSourceConfig::release_chrome_config() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeConfig* temp = _impl_.chrome_config_;
  _impl_.chrome_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeConfig* DataSourceConfig::unsafe_arena_release_chrome_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.chrome_config)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeConfig* temp = _impl_.chrome_config_;
  _impl_.chrome_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeConfig* DataSourceConfig::_internal_mutable_chrome_config() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.chrome_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeConfig>(GetArenaForAllocation());
    _impl_.chrome_config_ = p;
  }
  return _impl_.chrome_config_;
}
inline ::perfetto::protos::ChromeConfig* DataSourceConfig::mutable_chrome_config() {
  ::perfetto::protos::ChromeConfig* _msg = _internal_mutable_chrome_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.chrome_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_chrome_config(::perfetto::protos::ChromeConfig* chrome_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_config_);
  }
  if (chrome_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_config));
    if (message_arena != submessage_arena) {
      chrome_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.chrome_config_ = chrome_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.chrome_config)
}

// optional .perfetto.protos.V8Config v8_config = 127 [lazy = true];
inline bool DataSourceConfig::_internal_has_v8_config() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.v8_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_v8_config() const {
  return _internal_has_v8_config();
}
inline const ::perfetto::protos::V8Config& DataSourceConfig::_internal_v8_config() const {
  const ::perfetto::protos::V8Config* p = _impl_.v8_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::V8Config&>(
      ::perfetto::protos::_V8Config_default_instance_);
}
inline const ::perfetto::protos::V8Config& DataSourceConfig::v8_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.v8_config)
  return _internal_v8_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_v8_config(
    ::perfetto::protos::V8Config* v8_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v8_config_);
  }
  _impl_.v8_config_ = v8_config;
  if (v8_config) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.v8_config)
}
inline ::perfetto::protos::V8Config* DataSourceConfig::release_v8_config() {
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::perfetto::protos::V8Config* temp = _impl_.v8_config_;
  _impl_.v8_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::V8Config* DataSourceConfig::unsafe_arena_release_v8_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.v8_config)
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::perfetto::protos::V8Config* temp = _impl_.v8_config_;
  _impl_.v8_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::V8Config* DataSourceConfig::_internal_mutable_v8_config() {
  _impl_._has_bits_[0] |= 0x10000000u;
  if (_impl_.v8_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::V8Config>(GetArenaForAllocation());
    _impl_.v8_config_ = p;
  }
  return _impl_.v8_config_;
}
inline ::perfetto::protos::V8Config* DataSourceConfig::mutable_v8_config() {
  ::perfetto::protos::V8Config* _msg = _internal_mutable_v8_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.v8_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_v8_config(::perfetto::protos::V8Config* v8_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v8_config_);
  }
  if (v8_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v8_config));
    if (message_arena != submessage_arena) {
      v8_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v8_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.v8_config_ = v8_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.v8_config)
}

// optional .perfetto.protos.InterceptorConfig interceptor_config = 115;
inline bool DataSourceConfig::_internal_has_interceptor_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interceptor_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_interceptor_config() const {
  return _internal_has_interceptor_config();
}
inline const ::perfetto::protos::InterceptorConfig& DataSourceConfig::_internal_interceptor_config() const {
  const ::perfetto::protos::InterceptorConfig* p = _impl_.interceptor_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::InterceptorConfig&>(
      ::perfetto::protos::_InterceptorConfig_default_instance_);
}
inline const ::perfetto::protos::InterceptorConfig& DataSourceConfig::interceptor_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.interceptor_config)
  return _internal_interceptor_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_interceptor_config(
    ::perfetto::protos::InterceptorConfig* interceptor_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interceptor_config_);
  }
  _impl_.interceptor_config_ = interceptor_config;
  if (interceptor_config) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.interceptor_config)
}
inline ::perfetto::protos::InterceptorConfig* DataSourceConfig::release_interceptor_config() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::perfetto::protos::InterceptorConfig* temp = _impl_.interceptor_config_;
  _impl_.interceptor_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::InterceptorConfig* DataSourceConfig::unsafe_arena_release_interceptor_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.interceptor_config)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::perfetto::protos::InterceptorConfig* temp = _impl_.interceptor_config_;
  _impl_.interceptor_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InterceptorConfig* DataSourceConfig::_internal_mutable_interceptor_config() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.interceptor_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InterceptorConfig>(GetArenaForAllocation());
    _impl_.interceptor_config_ = p;
  }
  return _impl_.interceptor_config_;
}
inline ::perfetto::protos::InterceptorConfig* DataSourceConfig::mutable_interceptor_config() {
  ::perfetto::protos::InterceptorConfig* _msg = _internal_mutable_interceptor_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.interceptor_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_interceptor_config(::perfetto::protos::InterceptorConfig* interceptor_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interceptor_config_);
  }
  if (interceptor_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interceptor_config));
    if (message_arena != submessage_arena) {
      interceptor_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interceptor_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.interceptor_config_ = interceptor_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.interceptor_config)
}

// optional .perfetto.protos.NetworkPacketTraceConfig network_packet_trace_config = 120 [lazy = true];
inline bool DataSourceConfig::_internal_has_network_packet_trace_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.network_packet_trace_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_network_packet_trace_config() const {
  return _internal_has_network_packet_trace_config();
}
inline const ::perfetto::protos::NetworkPacketTraceConfig& DataSourceConfig::_internal_network_packet_trace_config() const {
  const ::perfetto::protos::NetworkPacketTraceConfig* p = _impl_.network_packet_trace_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::NetworkPacketTraceConfig&>(
      ::perfetto::protos::_NetworkPacketTraceConfig_default_instance_);
}
inline const ::perfetto::protos::NetworkPacketTraceConfig& DataSourceConfig::network_packet_trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.network_packet_trace_config)
  return _internal_network_packet_trace_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_network_packet_trace_config(
    ::perfetto::protos::NetworkPacketTraceConfig* network_packet_trace_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.network_packet_trace_config_);
  }
  _impl_.network_packet_trace_config_ = network_packet_trace_config;
  if (network_packet_trace_config) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.network_packet_trace_config)
}
inline ::perfetto::protos::NetworkPacketTraceConfig* DataSourceConfig::release_network_packet_trace_config() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::perfetto::protos::NetworkPacketTraceConfig* temp = _impl_.network_packet_trace_config_;
  _impl_.network_packet_trace_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::NetworkPacketTraceConfig* DataSourceConfig::unsafe_arena_release_network_packet_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.network_packet_trace_config)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::perfetto::protos::NetworkPacketTraceConfig* temp = _impl_.network_packet_trace_config_;
  _impl_.network_packet_trace_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::NetworkPacketTraceConfig* DataSourceConfig::_internal_mutable_network_packet_trace_config() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.network_packet_trace_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::NetworkPacketTraceConfig>(GetArenaForAllocation());
    _impl_.network_packet_trace_config_ = p;
  }
  return _impl_.network_packet_trace_config_;
}
inline ::perfetto::protos::NetworkPacketTraceConfig* DataSourceConfig::mutable_network_packet_trace_config() {
  ::perfetto::protos::NetworkPacketTraceConfig* _msg = _internal_mutable_network_packet_trace_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.network_packet_trace_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_network_packet_trace_config(::perfetto::protos::NetworkPacketTraceConfig* network_packet_trace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.network_packet_trace_config_);
  }
  if (network_packet_trace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_packet_trace_config));
    if (message_arena != submessage_arena) {
      network_packet_trace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_packet_trace_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.network_packet_trace_config_ = network_packet_trace_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.network_packet_trace_config)
}

// optional .perfetto.protos.SurfaceFlingerLayersConfig surfaceflinger_layers_config = 121 [lazy = true];
inline bool DataSourceConfig::_internal_has_surfaceflinger_layers_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.surfaceflinger_layers_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_surfaceflinger_layers_config() const {
  return _internal_has_surfaceflinger_layers_config();
}
inline const ::perfetto::protos::SurfaceFlingerLayersConfig& DataSourceConfig::_internal_surfaceflinger_layers_config() const {
  const ::perfetto::protos::SurfaceFlingerLayersConfig* p = _impl_.surfaceflinger_layers_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::SurfaceFlingerLayersConfig&>(
      ::perfetto::protos::_SurfaceFlingerLayersConfig_default_instance_);
}
inline const ::perfetto::protos::SurfaceFlingerLayersConfig& DataSourceConfig::surfaceflinger_layers_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.surfaceflinger_layers_config)
  return _internal_surfaceflinger_layers_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_surfaceflinger_layers_config(
    ::perfetto::protos::SurfaceFlingerLayersConfig* surfaceflinger_layers_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surfaceflinger_layers_config_);
  }
  _impl_.surfaceflinger_layers_config_ = surfaceflinger_layers_config;
  if (surfaceflinger_layers_config) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.surfaceflinger_layers_config)
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig* DataSourceConfig::release_surfaceflinger_layers_config() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::perfetto::protos::SurfaceFlingerLayersConfig* temp = _impl_.surfaceflinger_layers_config_;
  _impl_.surfaceflinger_layers_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig* DataSourceConfig::unsafe_arena_release_surfaceflinger_layers_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.surfaceflinger_layers_config)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::perfetto::protos::SurfaceFlingerLayersConfig* temp = _impl_.surfaceflinger_layers_config_;
  _impl_.surfaceflinger_layers_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig* DataSourceConfig::_internal_mutable_surfaceflinger_layers_config() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.surfaceflinger_layers_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::SurfaceFlingerLayersConfig>(GetArenaForAllocation());
    _impl_.surfaceflinger_layers_config_ = p;
  }
  return _impl_.surfaceflinger_layers_config_;
}
inline ::perfetto::protos::SurfaceFlingerLayersConfig* DataSourceConfig::mutable_surfaceflinger_layers_config() {
  ::perfetto::protos::SurfaceFlingerLayersConfig* _msg = _internal_mutable_surfaceflinger_layers_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.surfaceflinger_layers_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_surfaceflinger_layers_config(::perfetto::protos::SurfaceFlingerLayersConfig* surfaceflinger_layers_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surfaceflinger_layers_config_);
  }
  if (surfaceflinger_layers_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceflinger_layers_config));
    if (message_arena != submessage_arena) {
      surfaceflinger_layers_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surfaceflinger_layers_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.surfaceflinger_layers_config_ = surfaceflinger_layers_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.surfaceflinger_layers_config)
}

// optional .perfetto.protos.SurfaceFlingerTransactionsConfig surfaceflinger_transactions_config = 123 [lazy = true];
inline bool DataSourceConfig::_internal_has_surfaceflinger_transactions_config() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.surfaceflinger_transactions_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_surfaceflinger_transactions_config() const {
  return _internal_has_surfaceflinger_transactions_config();
}
inline const ::perfetto::protos::SurfaceFlingerTransactionsConfig& DataSourceConfig::_internal_surfaceflinger_transactions_config() const {
  const ::perfetto::protos::SurfaceFlingerTransactionsConfig* p = _impl_.surfaceflinger_transactions_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::SurfaceFlingerTransactionsConfig&>(
      ::perfetto::protos::_SurfaceFlingerTransactionsConfig_default_instance_);
}
inline const ::perfetto::protos::SurfaceFlingerTransactionsConfig& DataSourceConfig::surfaceflinger_transactions_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.surfaceflinger_transactions_config)
  return _internal_surfaceflinger_transactions_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_surfaceflinger_transactions_config(
    ::perfetto::protos::SurfaceFlingerTransactionsConfig* surfaceflinger_transactions_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surfaceflinger_transactions_config_);
  }
  _impl_.surfaceflinger_transactions_config_ = surfaceflinger_transactions_config;
  if (surfaceflinger_transactions_config) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.surfaceflinger_transactions_config)
}
inline ::perfetto::protos::SurfaceFlingerTransactionsConfig* DataSourceConfig::release_surfaceflinger_transactions_config() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::perfetto::protos::SurfaceFlingerTransactionsConfig* temp = _impl_.surfaceflinger_transactions_config_;
  _impl_.surfaceflinger_transactions_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::SurfaceFlingerTransactionsConfig* DataSourceConfig::unsafe_arena_release_surfaceflinger_transactions_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.surfaceflinger_transactions_config)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::perfetto::protos::SurfaceFlingerTransactionsConfig* temp = _impl_.surfaceflinger_transactions_config_;
  _impl_.surfaceflinger_transactions_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::SurfaceFlingerTransactionsConfig* DataSourceConfig::_internal_mutable_surfaceflinger_transactions_config() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.surfaceflinger_transactions_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::SurfaceFlingerTransactionsConfig>(GetArenaForAllocation());
    _impl_.surfaceflinger_transactions_config_ = p;
  }
  return _impl_.surfaceflinger_transactions_config_;
}
inline ::perfetto::protos::SurfaceFlingerTransactionsConfig* DataSourceConfig::mutable_surfaceflinger_transactions_config() {
  ::perfetto::protos::SurfaceFlingerTransactionsConfig* _msg = _internal_mutable_surfaceflinger_transactions_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.surfaceflinger_transactions_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_surfaceflinger_transactions_config(::perfetto::protos::SurfaceFlingerTransactionsConfig* surfaceflinger_transactions_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.surfaceflinger_transactions_config_);
  }
  if (surfaceflinger_transactions_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceflinger_transactions_config));
    if (message_arena != submessage_arena) {
      surfaceflinger_transactions_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surfaceflinger_transactions_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.surfaceflinger_transactions_config_ = surfaceflinger_transactions_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.surfaceflinger_transactions_config)
}

// optional .perfetto.protos.AndroidSdkSyspropGuardConfig android_sdk_sysprop_guard_config = 124 [lazy = true];
inline bool DataSourceConfig::_internal_has_android_sdk_sysprop_guard_config() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_sdk_sysprop_guard_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_android_sdk_sysprop_guard_config() const {
  return _internal_has_android_sdk_sysprop_guard_config();
}
inline const ::perfetto::protos::AndroidSdkSyspropGuardConfig& DataSourceConfig::_internal_android_sdk_sysprop_guard_config() const {
  const ::perfetto::protos::AndroidSdkSyspropGuardConfig* p = _impl_.android_sdk_sysprop_guard_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::AndroidSdkSyspropGuardConfig&>(
      ::perfetto::protos::_AndroidSdkSyspropGuardConfig_default_instance_);
}
inline const ::perfetto::protos::AndroidSdkSyspropGuardConfig& DataSourceConfig::android_sdk_sysprop_guard_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_sdk_sysprop_guard_config)
  return _internal_android_sdk_sysprop_guard_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_android_sdk_sysprop_guard_config(
    ::perfetto::protos::AndroidSdkSyspropGuardConfig* android_sdk_sysprop_guard_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_sdk_sysprop_guard_config_);
  }
  _impl_.android_sdk_sysprop_guard_config_ = android_sdk_sysprop_guard_config;
  if (android_sdk_sysprop_guard_config) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.android_sdk_sysprop_guard_config)
}
inline ::perfetto::protos::AndroidSdkSyspropGuardConfig* DataSourceConfig::release_android_sdk_sysprop_guard_config() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::perfetto::protos::AndroidSdkSyspropGuardConfig* temp = _impl_.android_sdk_sysprop_guard_config_;
  _impl_.android_sdk_sysprop_guard_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::AndroidSdkSyspropGuardConfig* DataSourceConfig::unsafe_arena_release_android_sdk_sysprop_guard_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_sdk_sysprop_guard_config)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::perfetto::protos::AndroidSdkSyspropGuardConfig* temp = _impl_.android_sdk_sysprop_guard_config_;
  _impl_.android_sdk_sysprop_guard_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidSdkSyspropGuardConfig* DataSourceConfig::_internal_mutable_android_sdk_sysprop_guard_config() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.android_sdk_sysprop_guard_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidSdkSyspropGuardConfig>(GetArenaForAllocation());
    _impl_.android_sdk_sysprop_guard_config_ = p;
  }
  return _impl_.android_sdk_sysprop_guard_config_;
}
inline ::perfetto::protos::AndroidSdkSyspropGuardConfig* DataSourceConfig::mutable_android_sdk_sysprop_guard_config() {
  ::perfetto::protos::AndroidSdkSyspropGuardConfig* _msg = _internal_mutable_android_sdk_sysprop_guard_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_sdk_sysprop_guard_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_android_sdk_sysprop_guard_config(::perfetto::protos::AndroidSdkSyspropGuardConfig* android_sdk_sysprop_guard_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_sdk_sysprop_guard_config_);
  }
  if (android_sdk_sysprop_guard_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_sdk_sysprop_guard_config));
    if (message_arena != submessage_arena) {
      android_sdk_sysprop_guard_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_sdk_sysprop_guard_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.android_sdk_sysprop_guard_config_ = android_sdk_sysprop_guard_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_sdk_sysprop_guard_config)
}

// optional .perfetto.protos.EtwConfig etw_config = 125 [lazy = true];
inline bool DataSourceConfig::_internal_has_etw_config() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.etw_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_etw_config() const {
  return _internal_has_etw_config();
}
inline const ::perfetto::protos::EtwConfig& DataSourceConfig::_internal_etw_config() const {
  const ::perfetto::protos::EtwConfig* p = _impl_.etw_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::EtwConfig&>(
      ::perfetto::protos::_EtwConfig_default_instance_);
}
inline const ::perfetto::protos::EtwConfig& DataSourceConfig::etw_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.etw_config)
  return _internal_etw_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_etw_config(
    ::perfetto::protos::EtwConfig* etw_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.etw_config_);
  }
  _impl_.etw_config_ = etw_config;
  if (etw_config) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.etw_config)
}
inline ::perfetto::protos::EtwConfig* DataSourceConfig::release_etw_config() {
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::perfetto::protos::EtwConfig* temp = _impl_.etw_config_;
  _impl_.etw_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::EtwConfig* DataSourceConfig::unsafe_arena_release_etw_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.etw_config)
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::perfetto::protos::EtwConfig* temp = _impl_.etw_config_;
  _impl_.etw_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::EtwConfig* DataSourceConfig::_internal_mutable_etw_config() {
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.etw_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::EtwConfig>(GetArenaForAllocation());
    _impl_.etw_config_ = p;
  }
  return _impl_.etw_config_;
}
inline ::perfetto::protos::EtwConfig* DataSourceConfig::mutable_etw_config() {
  ::perfetto::protos::EtwConfig* _msg = _internal_mutable_etw_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.etw_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_etw_config(::perfetto::protos::EtwConfig* etw_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.etw_config_);
  }
  if (etw_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(etw_config));
    if (message_arena != submessage_arena) {
      etw_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, etw_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.etw_config_ = etw_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.etw_config)
}

// optional .perfetto.protos.ProtoLogConfig protolog_config = 126 [lazy = true];
inline bool DataSourceConfig::_internal_has_protolog_config() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.protolog_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_protolog_config() const {
  return _internal_has_protolog_config();
}
inline const ::perfetto::protos::ProtoLogConfig& DataSourceConfig::_internal_protolog_config() const {
  const ::perfetto::protos::ProtoLogConfig* p = _impl_.protolog_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ProtoLogConfig&>(
      ::perfetto::protos::_ProtoLogConfig_default_instance_);
}
inline const ::perfetto::protos::ProtoLogConfig& DataSourceConfig::protolog_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.protolog_config)
  return _internal_protolog_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_protolog_config(
    ::perfetto::protos::ProtoLogConfig* protolog_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.protolog_config_);
  }
  _impl_.protolog_config_ = protolog_config;
  if (protolog_config) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.protolog_config)
}
inline ::perfetto::protos::ProtoLogConfig* DataSourceConfig::release_protolog_config() {
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::perfetto::protos::ProtoLogConfig* temp = _impl_.protolog_config_;
  _impl_.protolog_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ProtoLogConfig* DataSourceConfig::unsafe_arena_release_protolog_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.protolog_config)
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::perfetto::protos::ProtoLogConfig* temp = _impl_.protolog_config_;
  _impl_.protolog_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProtoLogConfig* DataSourceConfig::_internal_mutable_protolog_config() {
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.protolog_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProtoLogConfig>(GetArenaForAllocation());
    _impl_.protolog_config_ = p;
  }
  return _impl_.protolog_config_;
}
inline ::perfetto::protos::ProtoLogConfig* DataSourceConfig::mutable_protolog_config() {
  ::perfetto::protos::ProtoLogConfig* _msg = _internal_mutable_protolog_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.protolog_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_protolog_config(::perfetto::protos::ProtoLogConfig* protolog_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.protolog_config_);
  }
  if (protolog_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protolog_config));
    if (message_arena != submessage_arena) {
      protolog_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protolog_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.protolog_config_ = protolog_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.protolog_config)
}

// optional .perfetto.protos.AndroidInputEventConfig android_input_event_config = 128 [lazy = true];
inline bool DataSourceConfig::_internal_has_android_input_event_config() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_input_event_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_android_input_event_config() const {
  return _internal_has_android_input_event_config();
}
inline const ::perfetto::protos::AndroidInputEventConfig& DataSourceConfig::_internal_android_input_event_config() const {
  const ::perfetto::protos::AndroidInputEventConfig* p = _impl_.android_input_event_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::AndroidInputEventConfig&>(
      ::perfetto::protos::_AndroidInputEventConfig_default_instance_);
}
inline const ::perfetto::protos::AndroidInputEventConfig& DataSourceConfig::android_input_event_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.android_input_event_config)
  return _internal_android_input_event_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_android_input_event_config(
    ::perfetto::protos::AndroidInputEventConfig* android_input_event_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_input_event_config_);
  }
  _impl_.android_input_event_config_ = android_input_event_config;
  if (android_input_event_config) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.android_input_event_config)
}
inline ::perfetto::protos::AndroidInputEventConfig* DataSourceConfig::release_android_input_event_config() {
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::perfetto::protos::AndroidInputEventConfig* temp = _impl_.android_input_event_config_;
  _impl_.android_input_event_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::AndroidInputEventConfig* DataSourceConfig::unsafe_arena_release_android_input_event_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.android_input_event_config)
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::perfetto::protos::AndroidInputEventConfig* temp = _impl_.android_input_event_config_;
  _impl_.android_input_event_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::AndroidInputEventConfig* DataSourceConfig::_internal_mutable_android_input_event_config() {
  _impl_._has_bits_[0] |= 0x20000000u;
  if (_impl_.android_input_event_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::AndroidInputEventConfig>(GetArenaForAllocation());
    _impl_.android_input_event_config_ = p;
  }
  return _impl_.android_input_event_config_;
}
inline ::perfetto::protos::AndroidInputEventConfig* DataSourceConfig::mutable_android_input_event_config() {
  ::perfetto::protos::AndroidInputEventConfig* _msg = _internal_mutable_android_input_event_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.android_input_event_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_android_input_event_config(::perfetto::protos::AndroidInputEventConfig* android_input_event_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_input_event_config_);
  }
  if (android_input_event_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_input_event_config));
    if (message_arena != submessage_arena) {
      android_input_event_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_input_event_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.android_input_event_config_ = android_input_event_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.android_input_event_config)
}

// optional .perfetto.protos.PixelModemConfig pixel_modem_config = 129 [lazy = true];
inline bool DataSourceConfig::_internal_has_pixel_modem_config() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pixel_modem_config_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_pixel_modem_config() const {
  return _internal_has_pixel_modem_config();
}
inline const ::perfetto::protos::PixelModemConfig& DataSourceConfig::_internal_pixel_modem_config() const {
  const ::perfetto::protos::PixelModemConfig* p = _impl_.pixel_modem_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PixelModemConfig&>(
      ::perfetto::protos::_PixelModemConfig_default_instance_);
}
inline const ::perfetto::protos::PixelModemConfig& DataSourceConfig::pixel_modem_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.pixel_modem_config)
  return _internal_pixel_modem_config();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_pixel_modem_config(
    ::perfetto::protos::PixelModemConfig* pixel_modem_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_modem_config_);
  }
  _impl_.pixel_modem_config_ = pixel_modem_config;
  if (pixel_modem_config) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.pixel_modem_config)
}
inline ::perfetto::protos::PixelModemConfig* DataSourceConfig::release_pixel_modem_config() {
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::perfetto::protos::PixelModemConfig* temp = _impl_.pixel_modem_config_;
  _impl_.pixel_modem_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PixelModemConfig* DataSourceConfig::unsafe_arena_release_pixel_modem_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.pixel_modem_config)
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::perfetto::protos::PixelModemConfig* temp = _impl_.pixel_modem_config_;
  _impl_.pixel_modem_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PixelModemConfig* DataSourceConfig::_internal_mutable_pixel_modem_config() {
  _impl_._has_bits_[0] |= 0x40000000u;
  if (_impl_.pixel_modem_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PixelModemConfig>(GetArenaForAllocation());
    _impl_.pixel_modem_config_ = p;
  }
  return _impl_.pixel_modem_config_;
}
inline ::perfetto::protos::PixelModemConfig* DataSourceConfig::mutable_pixel_modem_config() {
  ::perfetto::protos::PixelModemConfig* _msg = _internal_mutable_pixel_modem_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.pixel_modem_config)
  return _msg;
}
inline void DataSourceConfig::set_allocated_pixel_modem_config(::perfetto::protos::PixelModemConfig* pixel_modem_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_modem_config_);
  }
  if (pixel_modem_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pixel_modem_config));
    if (message_arena != submessage_arena) {
      pixel_modem_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pixel_modem_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.pixel_modem_config_ = pixel_modem_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.pixel_modem_config)
}

// optional string legacy_config = 1000;
inline bool DataSourceConfig::_internal_has_legacy_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataSourceConfig::has_legacy_config() const {
  return _internal_has_legacy_config();
}
inline void DataSourceConfig::clear_legacy_config() {
  _impl_.legacy_config_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataSourceConfig::legacy_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.legacy_config)
  return _internal_legacy_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSourceConfig::set_legacy_config(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.legacy_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DataSourceConfig.legacy_config)
}
inline std::string* DataSourceConfig::mutable_legacy_config() {
  std::string* _s = _internal_mutable_legacy_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.legacy_config)
  return _s;
}
inline const std::string& DataSourceConfig::_internal_legacy_config() const {
  return _impl_.legacy_config_.Get();
}
inline void DataSourceConfig::_internal_set_legacy_config(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.legacy_config_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSourceConfig::_internal_mutable_legacy_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.legacy_config_.Mutable(GetArenaForAllocation());
}
inline std::string* DataSourceConfig::release_legacy_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.legacy_config)
  if (!_internal_has_legacy_config()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.legacy_config_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legacy_config_.IsDefault()) {
    _impl_.legacy_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataSourceConfig::set_allocated_legacy_config(std::string* legacy_config) {
  if (legacy_config != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.legacy_config_.SetAllocated(legacy_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legacy_config_.IsDefault()) {
    _impl_.legacy_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.legacy_config)
}

// optional .perfetto.protos.TestConfig for_testing = 1001;
inline bool DataSourceConfig::_internal_has_for_testing() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.for_testing_ != nullptr);
  return value;
}
inline bool DataSourceConfig::has_for_testing() const {
  return _internal_has_for_testing();
}
inline const ::perfetto::protos::TestConfig& DataSourceConfig::_internal_for_testing() const {
  const ::perfetto::protos::TestConfig* p = _impl_.for_testing_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TestConfig&>(
      ::perfetto::protos::_TestConfig_default_instance_);
}
inline const ::perfetto::protos::TestConfig& DataSourceConfig::for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DataSourceConfig.for_testing)
  return _internal_for_testing();
}
inline void DataSourceConfig::unsafe_arena_set_allocated_for_testing(
    ::perfetto::protos::TestConfig* for_testing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.for_testing_);
  }
  _impl_.for_testing_ = for_testing;
  if (for_testing) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DataSourceConfig.for_testing)
}
inline ::perfetto::protos::TestConfig* DataSourceConfig::release_for_testing() {
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::perfetto::protos::TestConfig* temp = _impl_.for_testing_;
  _impl_.for_testing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TestConfig* DataSourceConfig::unsafe_arena_release_for_testing() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DataSourceConfig.for_testing)
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::perfetto::protos::TestConfig* temp = _impl_.for_testing_;
  _impl_.for_testing_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TestConfig* DataSourceConfig::_internal_mutable_for_testing() {
  _impl_._has_bits_[0] |= 0x80000000u;
  if (_impl_.for_testing_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TestConfig>(GetArenaForAllocation());
    _impl_.for_testing_ = p;
  }
  return _impl_.for_testing_;
}
inline ::perfetto::protos::TestConfig* DataSourceConfig::mutable_for_testing() {
  ::perfetto::protos::TestConfig* _msg = _internal_mutable_for_testing();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DataSourceConfig.for_testing)
  return _msg;
}
inline void DataSourceConfig::set_allocated_for_testing(::perfetto::protos::TestConfig* for_testing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.for_testing_);
  }
  if (for_testing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(for_testing));
    if (message_arena != submessage_arena) {
      for_testing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, for_testing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.for_testing_ = for_testing;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DataSourceConfig.for_testing)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::DataSourceConfig_SessionInitiator> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fdata_5fsource_5fconfig_2eproto
