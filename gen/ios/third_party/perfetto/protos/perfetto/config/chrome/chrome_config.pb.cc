// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/chrome/chrome_config.proto

#include "protos/perfetto/config/chrome/chrome_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ChromeConfig::ChromeConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trace_config_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.json_agent_label_filter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.privacy_filtering_enabled_)*/false
  , /*decltype(_impl_.convert_to_legacy_json_)*/false
  , /*decltype(_impl_.client_priority_)*/0} {}
struct ChromeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeConfigDefaultTypeInternal() {}
  union {
    ChromeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeConfigDefaultTypeInternal _ChromeConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ChromeConfig_ClientPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeConfig_ClientPriority_strings[3] = {};

static const char ChromeConfig_ClientPriority_names[] =
  "BACKGROUND"
  "UNKNOWN"
  "USER_INITIATED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeConfig_ClientPriority_entries[] = {
  { {ChromeConfig_ClientPriority_names + 0, 10}, 1 },
  { {ChromeConfig_ClientPriority_names + 10, 7}, 0 },
  { {ChromeConfig_ClientPriority_names + 17, 14}, 2 },
};

static const int ChromeConfig_ClientPriority_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> BACKGROUND
  2, // 2 -> USER_INITIATED
};

const std::string& ChromeConfig_ClientPriority_Name(
    ChromeConfig_ClientPriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeConfig_ClientPriority_entries,
          ChromeConfig_ClientPriority_entries_by_number,
          3, ChromeConfig_ClientPriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeConfig_ClientPriority_entries,
      ChromeConfig_ClientPriority_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeConfig_ClientPriority_strings[idx].get();
}
bool ChromeConfig_ClientPriority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeConfig_ClientPriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeConfig_ClientPriority_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeConfig_ClientPriority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeConfig_ClientPriority ChromeConfig::UNKNOWN;
constexpr ChromeConfig_ClientPriority ChromeConfig::BACKGROUND;
constexpr ChromeConfig_ClientPriority ChromeConfig::USER_INITIATED;
constexpr ChromeConfig_ClientPriority ChromeConfig::ClientPriority_MIN;
constexpr ChromeConfig_ClientPriority ChromeConfig::ClientPriority_MAX;
constexpr int ChromeConfig::ClientPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeConfig>()._impl_._has_bits_);
  static void set_has_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privacy_filtering_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_convert_to_legacy_json(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_json_agent_label_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeConfig::ChromeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeConfig)
}
ChromeConfig::ChromeConfig(const ChromeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_config_){}
    , decltype(_impl_.json_agent_label_filter_){}
    , decltype(_impl_.privacy_filtering_enabled_){}
    , decltype(_impl_.convert_to_legacy_json_){}
    , decltype(_impl_.client_priority_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.trace_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trace_config()) {
    _this->_impl_.trace_config_.Set(from._internal_trace_config(), 
      _this->GetArenaForAllocation());
  }
  _impl_.json_agent_label_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_agent_label_filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_agent_label_filter()) {
    _this->_impl_.json_agent_label_filter_.Set(from._internal_json_agent_label_filter(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.privacy_filtering_enabled_, &from._impl_.privacy_filtering_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_priority_) -
    reinterpret_cast<char*>(&_impl_.privacy_filtering_enabled_)) + sizeof(_impl_.client_priority_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeConfig)
}

inline void ChromeConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_config_){}
    , decltype(_impl_.json_agent_label_filter_){}
    , decltype(_impl_.privacy_filtering_enabled_){false}
    , decltype(_impl_.convert_to_legacy_json_){false}
    , decltype(_impl_.client_priority_){0}
  };
  _impl_.trace_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trace_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.json_agent_label_filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_agent_label_filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeConfig::~ChromeConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_config_.Destroy();
  _impl_.json_agent_label_filter_.Destroy();
}

void ChromeConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.trace_config_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.json_agent_label_filter_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.privacy_filtering_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_priority_) -
        reinterpret_cast<char*>(&_impl_.privacy_filtering_enabled_)) + sizeof(_impl_.client_priority_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trace_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trace_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool privacy_filtering_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_privacy_filtering_enabled(&has_bits);
          _impl_.privacy_filtering_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool convert_to_legacy_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_convert_to_legacy_json(&has_bits);
          _impl_.convert_to_legacy_json_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeConfig_ClientPriority_IsValid(val))) {
            _internal_set_client_priority(static_cast<::perfetto::protos::ChromeConfig_ClientPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string json_agent_label_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_json_agent_label_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string trace_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trace_config(), target);
  }

  // optional bool privacy_filtering_enabled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_privacy_filtering_enabled(), target);
  }

  // optional bool convert_to_legacy_json = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_convert_to_legacy_json(), target);
  }

  // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_priority(), target);
  }

  // optional string json_agent_label_filter = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_json_agent_label_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeConfig)
  return target;
}

size_t ChromeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trace_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trace_config());
    }

    // optional string json_agent_label_filter = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_agent_label_filter());
    }

    // optional bool privacy_filtering_enabled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_legacy_json = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_client_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeConfig*>(
      &from));
}

void ChromeConfig::MergeFrom(const ChromeConfig& from) {
  ChromeConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_trace_config(from._internal_trace_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_json_agent_label_filter(from._internal_json_agent_label_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.privacy_filtering_enabled_ = from._impl_.privacy_filtering_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.convert_to_legacy_json_ = from._impl_.convert_to_legacy_json_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.client_priority_ = from._impl_.client_priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeConfig::CopyFrom(const ChromeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeConfig::IsInitialized() const {
  return true;
}

void ChromeConfig::InternalSwap(ChromeConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trace_config_, lhs_arena,
      &other->_impl_.trace_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.json_agent_label_filter_, lhs_arena,
      &other->_impl_.json_agent_label_filter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeConfig, _impl_.client_priority_)
      + sizeof(ChromeConfig::_impl_.client_priority_)
      - PROTOBUF_FIELD_OFFSET(ChromeConfig, _impl_.privacy_filtering_enabled_)>(
          reinterpret_cast<char*>(&_impl_.privacy_filtering_enabled_),
          reinterpret_cast<char*>(&other->_impl_.privacy_filtering_enabled_));
}

std::string ChromeConfig::GetTypeName() const {
  return "perfetto.protos.ChromeConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
