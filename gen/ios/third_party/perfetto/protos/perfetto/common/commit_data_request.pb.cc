// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/commit_data_request.proto

#include "protos/perfetto/common/commit_data_request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR CommitDataRequest_ChunksToMove::CommitDataRequest_ChunksToMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.chunk_)*/0u
  , /*decltype(_impl_.target_buffer_)*/0u} {}
struct CommitDataRequest_ChunksToMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitDataRequest_ChunksToMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitDataRequest_ChunksToMoveDefaultTypeInternal() {}
  union {
    CommitDataRequest_ChunksToMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitDataRequest_ChunksToMoveDefaultTypeInternal _CommitDataRequest_ChunksToMove_default_instance_;
PROTOBUF_CONSTEXPR CommitDataRequest_ChunkToPatch_Patch::CommitDataRequest_ChunkToPatch_Patch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_)*/0u} {}
struct CommitDataRequest_ChunkToPatch_PatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitDataRequest_ChunkToPatch_PatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitDataRequest_ChunkToPatch_PatchDefaultTypeInternal() {}
  union {
    CommitDataRequest_ChunkToPatch_Patch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitDataRequest_ChunkToPatch_PatchDefaultTypeInternal _CommitDataRequest_ChunkToPatch_Patch_default_instance_;
PROTOBUF_CONSTEXPR CommitDataRequest_ChunkToPatch::CommitDataRequest_ChunkToPatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.patches_)*/{}
  , /*decltype(_impl_.target_buffer_)*/0u
  , /*decltype(_impl_.writer_id_)*/0u
  , /*decltype(_impl_.chunk_id_)*/0u
  , /*decltype(_impl_.has_more_patches_)*/false} {}
struct CommitDataRequest_ChunkToPatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitDataRequest_ChunkToPatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitDataRequest_ChunkToPatchDefaultTypeInternal() {}
  union {
    CommitDataRequest_ChunkToPatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitDataRequest_ChunkToPatchDefaultTypeInternal _CommitDataRequest_ChunkToPatch_default_instance_;
PROTOBUF_CONSTEXPR CommitDataRequest::CommitDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chunks_to_move_)*/{}
  , /*decltype(_impl_.chunks_to_patch_)*/{}
  , /*decltype(_impl_.flush_request_id_)*/uint64_t{0u}} {}
struct CommitDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitDataRequestDefaultTypeInternal() {}
  union {
    CommitDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitDataRequestDefaultTypeInternal _CommitDataRequest_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class CommitDataRequest_ChunksToMove::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest_ChunksToMove>()._impl_._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommitDataRequest_ChunksToMove::CommitDataRequest_ChunksToMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest.ChunksToMove)
}
CommitDataRequest_ChunksToMove::CommitDataRequest_ChunksToMove(const CommitDataRequest_ChunksToMove& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CommitDataRequest_ChunksToMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.page_){}
    , decltype(_impl_.chunk_){}
    , decltype(_impl_.target_buffer_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_buffer_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.target_buffer_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunksToMove)
}

inline void CommitDataRequest_ChunksToMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.chunk_){0u}
    , decltype(_impl_.target_buffer_){0u}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommitDataRequest_ChunksToMove::~CommitDataRequest_ChunksToMove() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunksToMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitDataRequest_ChunksToMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CommitDataRequest_ChunksToMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitDataRequest_ChunksToMove::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_buffer_) -
        reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.target_buffer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest_ChunksToMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_page(&has_bits);
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chunk(&has_bits);
          _impl_.chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_target_buffer(&has_bits);
          _impl_.target_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitDataRequest_ChunksToMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 page = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // optional uint32 chunk = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunk(), target);
  }

  // optional uint32 target_buffer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_buffer(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest.ChunksToMove)
  return target;
}

size_t CommitDataRequest_ChunksToMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 page = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
    }

    // optional uint32 chunk = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunk());
    }

    // optional uint32 target_buffer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_buffer());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest_ChunksToMove::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CommitDataRequest_ChunksToMove*>(
      &from));
}

void CommitDataRequest_ChunksToMove::MergeFrom(const CommitDataRequest_ChunksToMove& from) {
  CommitDataRequest_ChunksToMove* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.page_ = from._impl_.page_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chunk_ = from._impl_.chunk_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_buffer_ = from._impl_.target_buffer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CommitDataRequest_ChunksToMove::CopyFrom(const CommitDataRequest_ChunksToMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunksToMove::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunksToMove::InternalSwap(CommitDataRequest_ChunksToMove* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunksToMove, _impl_.target_buffer_)
      + sizeof(CommitDataRequest_ChunksToMove::_impl_.target_buffer_)
      - PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunksToMove, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

std::string CommitDataRequest_ChunksToMove::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunksToMove";
}


// ===================================================================

class CommitDataRequest_ChunkToPatch_Patch::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest_ChunkToPatch_Patch>()._impl_._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommitDataRequest_ChunkToPatch_Patch::CommitDataRequest_ChunkToPatch_Patch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
}
CommitDataRequest_ChunkToPatch_Patch::CommitDataRequest_ChunkToPatch_Patch(const CommitDataRequest_ChunkToPatch_Patch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CommitDataRequest_ChunkToPatch_Patch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.offset_ = from._impl_.offset_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
}

inline void CommitDataRequest_ChunkToPatch_Patch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.offset_){0u}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommitDataRequest_ChunkToPatch_Patch::~CommitDataRequest_ChunkToPatch_Patch() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitDataRequest_ChunkToPatch_Patch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CommitDataRequest_ChunkToPatch_Patch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitDataRequest_ChunkToPatch_Patch::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_.offset_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest_ChunkToPatch_Patch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitDataRequest_ChunkToPatch_Patch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_offset(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  return target;
}

size_t CommitDataRequest_ChunkToPatch_Patch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 offset = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest_ChunkToPatch_Patch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CommitDataRequest_ChunkToPatch_Patch*>(
      &from));
}

void CommitDataRequest_ChunkToPatch_Patch::MergeFrom(const CommitDataRequest_ChunkToPatch_Patch& from) {
  CommitDataRequest_ChunkToPatch_Patch* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CommitDataRequest_ChunkToPatch_Patch::CopyFrom(const CommitDataRequest_ChunkToPatch_Patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunkToPatch_Patch::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunkToPatch_Patch::InternalSwap(CommitDataRequest_ChunkToPatch_Patch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.offset_, other->_impl_.offset_);
}

std::string CommitDataRequest_ChunkToPatch_Patch::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunkToPatch.Patch";
}


// ===================================================================

class CommitDataRequest_ChunkToPatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest_ChunkToPatch>()._impl_._has_bits_);
  static void set_has_target_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_writer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_more_patches(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CommitDataRequest_ChunkToPatch::CommitDataRequest_ChunkToPatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
}
CommitDataRequest_ChunkToPatch::CommitDataRequest_ChunkToPatch(const CommitDataRequest_ChunkToPatch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CommitDataRequest_ChunkToPatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.patches_){from._impl_.patches_}
    , decltype(_impl_.target_buffer_){}
    , decltype(_impl_.writer_id_){}
    , decltype(_impl_.chunk_id_){}
    , decltype(_impl_.has_more_patches_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.target_buffer_, &from._impl_.target_buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_more_patches_) -
    reinterpret_cast<char*>(&_impl_.target_buffer_)) + sizeof(_impl_.has_more_patches_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
}

inline void CommitDataRequest_ChunkToPatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.patches_){arena}
    , decltype(_impl_.target_buffer_){0u}
    , decltype(_impl_.writer_id_){0u}
    , decltype(_impl_.chunk_id_){0u}
    , decltype(_impl_.has_more_patches_){false}
  };
}

CommitDataRequest_ChunkToPatch::~CommitDataRequest_ChunkToPatch() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitDataRequest_ChunkToPatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.patches_.~RepeatedPtrField();
}

void CommitDataRequest_ChunkToPatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitDataRequest_ChunkToPatch::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.patches_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.target_buffer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_more_patches_) -
        reinterpret_cast<char*>(&_impl_.target_buffer_)) + sizeof(_impl_.has_more_patches_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest_ChunkToPatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_buffer(&has_bits);
          _impl_.target_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 writer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_writer_id(&has_bits);
          _impl_.writer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunk_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chunk_id(&has_bits);
          _impl_.chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool has_more_patches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_has_more_patches(&has_bits);
          _impl_.has_more_patches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitDataRequest_ChunkToPatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_buffer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_buffer(), target);
  }

  // optional uint32 writer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_writer_id(), target);
  }

  // optional uint32 chunk_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunk_id(), target);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_patches_size()); i < n; i++) {
    const auto& repfield = this->_internal_patches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool has_more_patches = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_has_more_patches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest.ChunkToPatch)
  return target;
}

size_t CommitDataRequest_ChunkToPatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
  total_size += 1UL * this->_internal_patches_size();
  for (const auto& msg : this->_impl_.patches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 target_buffer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_buffer());
    }

    // optional uint32 writer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_writer_id());
    }

    // optional uint32 chunk_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunk_id());
    }

    // optional bool has_more_patches = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest_ChunkToPatch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CommitDataRequest_ChunkToPatch*>(
      &from));
}

void CommitDataRequest_ChunkToPatch::MergeFrom(const CommitDataRequest_ChunkToPatch& from) {
  CommitDataRequest_ChunkToPatch* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.patches_.MergeFrom(from._impl_.patches_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_buffer_ = from._impl_.target_buffer_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.writer_id_ = from._impl_.writer_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chunk_id_ = from._impl_.chunk_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.has_more_patches_ = from._impl_.has_more_patches_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CommitDataRequest_ChunkToPatch::CopyFrom(const CommitDataRequest_ChunkToPatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunkToPatch::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunkToPatch::InternalSwap(CommitDataRequest_ChunkToPatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.patches_.InternalSwap(&other->_impl_.patches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunkToPatch, _impl_.has_more_patches_)
      + sizeof(CommitDataRequest_ChunkToPatch::_impl_.has_more_patches_)
      - PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunkToPatch, _impl_.target_buffer_)>(
          reinterpret_cast<char*>(&_impl_.target_buffer_),
          reinterpret_cast<char*>(&other->_impl_.target_buffer_));
}

std::string CommitDataRequest_ChunkToPatch::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunkToPatch";
}


// ===================================================================

class CommitDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest>()._impl_._has_bits_);
  static void set_has_flush_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommitDataRequest::CommitDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest)
}
CommitDataRequest::CommitDataRequest(const CommitDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CommitDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_move_){from._impl_.chunks_to_move_}
    , decltype(_impl_.chunks_to_patch_){from._impl_.chunks_to_patch_}
    , decltype(_impl_.flush_request_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.flush_request_id_ = from._impl_.flush_request_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest)
}

inline void CommitDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunks_to_move_){arena}
    , decltype(_impl_.chunks_to_patch_){arena}
    , decltype(_impl_.flush_request_id_){uint64_t{0u}}
  };
}

CommitDataRequest::~CommitDataRequest() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunks_to_move_.~RepeatedPtrField();
  _impl_.chunks_to_patch_.~RepeatedPtrField();
}

void CommitDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_to_move_.Clear();
  _impl_.chunks_to_patch_.Clear();
  _impl_.flush_request_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_move(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_patch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 flush_request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flush_request_id(&has_bits);
          _impl_.flush_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_to_move_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_to_move(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_to_patch_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks_to_patch(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 flush_request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_flush_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest)
  return target;
}

size_t CommitDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
  total_size += 1UL * this->_internal_chunks_to_move_size();
  for (const auto& msg : this->_impl_.chunks_to_move_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
  total_size += 1UL * this->_internal_chunks_to_patch_size();
  for (const auto& msg : this->_impl_.chunks_to_patch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 flush_request_id = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flush_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CommitDataRequest*>(
      &from));
}

void CommitDataRequest::MergeFrom(const CommitDataRequest& from) {
  CommitDataRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunks_to_move_.MergeFrom(from._impl_.chunks_to_move_);
  _this->_impl_.chunks_to_patch_.MergeFrom(from._impl_.chunks_to_patch_);
  if (from._internal_has_flush_request_id()) {
    _this->_internal_set_flush_request_id(from._internal_flush_request_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CommitDataRequest::CopyFrom(const CommitDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest::IsInitialized() const {
  return true;
}

void CommitDataRequest::InternalSwap(CommitDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chunks_to_move_.InternalSwap(&other->_impl_.chunks_to_move_);
  _impl_.chunks_to_patch_.InternalSwap(&other->_impl_.chunks_to_patch_);
  swap(_impl_.flush_request_id_, other->_impl_.flush_request_id_);
}

std::string CommitDataRequest::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest_ChunksToMove*
Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest_ChunksToMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest_ChunksToMove >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch*
Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest_ChunkToPatch*
Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest_ChunkToPatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest_ChunkToPatch >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest*
Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
