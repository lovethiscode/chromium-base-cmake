// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/perf_events.proto

#include "protos/perfetto/common/perf_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR PerfEvents_Timebase::PerfEvents_Timebase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_clock_)*/0
  , /*decltype(_impl_.interval_)*/{}
  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfEvents_TimebaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEvents_TimebaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEvents_TimebaseDefaultTypeInternal() {}
  union {
    PerfEvents_Timebase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEvents_TimebaseDefaultTypeInternal _PerfEvents_Timebase_default_instance_;
PROTOBUF_CONSTEXPR PerfEvents_Tracepoint::PerfEvents_Tracepoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PerfEvents_TracepointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEvents_TracepointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEvents_TracepointDefaultTypeInternal() {}
  union {
    PerfEvents_Tracepoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEvents_TracepointDefaultTypeInternal _PerfEvents_Tracepoint_default_instance_;
PROTOBUF_CONSTEXPR PerfEvents_RawEvent::PerfEvents_RawEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.config_)*/uint64_t{0u}
  , /*decltype(_impl_.config1_)*/uint64_t{0u}
  , /*decltype(_impl_.config2_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0u} {}
struct PerfEvents_RawEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEvents_RawEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEvents_RawEventDefaultTypeInternal() {}
  union {
    PerfEvents_RawEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEvents_RawEventDefaultTypeInternal _PerfEvents_RawEvent_default_instance_;
PROTOBUF_CONSTEXPR PerfEvents::PerfEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct PerfEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEventsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEventsDefaultTypeInternal() {}
  union {
    PerfEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEventsDefaultTypeInternal _PerfEvents_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool PerfEvents_Counter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfEvents_Counter_strings[21] = {};

static const char PerfEvents_Counter_names[] =
  "HW_BRANCH_INSTRUCTIONS"
  "HW_BRANCH_MISSES"
  "HW_BUS_CYCLES"
  "HW_CACHE_MISSES"
  "HW_CACHE_REFERENCES"
  "HW_CPU_CYCLES"
  "HW_INSTRUCTIONS"
  "HW_REF_CPU_CYCLES"
  "HW_STALLED_CYCLES_BACKEND"
  "HW_STALLED_CYCLES_FRONTEND"
  "SW_ALIGNMENT_FAULTS"
  "SW_CONTEXT_SWITCHES"
  "SW_CPU_CLOCK"
  "SW_CPU_MIGRATIONS"
  "SW_DUMMY"
  "SW_EMULATION_FAULTS"
  "SW_PAGE_FAULTS"
  "SW_PAGE_FAULTS_MAJ"
  "SW_PAGE_FAULTS_MIN"
  "SW_TASK_CLOCK"
  "UNKNOWN_COUNTER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfEvents_Counter_entries[] = {
  { {PerfEvents_Counter_names + 0, 22}, 14 },
  { {PerfEvents_Counter_names + 22, 16}, 15 },
  { {PerfEvents_Counter_names + 38, 13}, 16 },
  { {PerfEvents_Counter_names + 51, 15}, 13 },
  { {PerfEvents_Counter_names + 66, 19}, 12 },
  { {PerfEvents_Counter_names + 85, 13}, 10 },
  { {PerfEvents_Counter_names + 98, 15}, 11 },
  { {PerfEvents_Counter_names + 113, 17}, 19 },
  { {PerfEvents_Counter_names + 130, 25}, 18 },
  { {PerfEvents_Counter_names + 155, 26}, 17 },
  { {PerfEvents_Counter_names + 181, 19}, 8 },
  { {PerfEvents_Counter_names + 200, 19}, 4 },
  { {PerfEvents_Counter_names + 219, 12}, 1 },
  { {PerfEvents_Counter_names + 231, 17}, 5 },
  { {PerfEvents_Counter_names + 248, 8}, 20 },
  { {PerfEvents_Counter_names + 256, 19}, 9 },
  { {PerfEvents_Counter_names + 275, 14}, 2 },
  { {PerfEvents_Counter_names + 289, 18}, 7 },
  { {PerfEvents_Counter_names + 307, 18}, 6 },
  { {PerfEvents_Counter_names + 325, 13}, 3 },
  { {PerfEvents_Counter_names + 338, 15}, 0 },
};

static const int PerfEvents_Counter_entries_by_number[] = {
  20, // 0 -> UNKNOWN_COUNTER
  12, // 1 -> SW_CPU_CLOCK
  16, // 2 -> SW_PAGE_FAULTS
  19, // 3 -> SW_TASK_CLOCK
  11, // 4 -> SW_CONTEXT_SWITCHES
  13, // 5 -> SW_CPU_MIGRATIONS
  18, // 6 -> SW_PAGE_FAULTS_MIN
  17, // 7 -> SW_PAGE_FAULTS_MAJ
  10, // 8 -> SW_ALIGNMENT_FAULTS
  15, // 9 -> SW_EMULATION_FAULTS
  5, // 10 -> HW_CPU_CYCLES
  6, // 11 -> HW_INSTRUCTIONS
  4, // 12 -> HW_CACHE_REFERENCES
  3, // 13 -> HW_CACHE_MISSES
  0, // 14 -> HW_BRANCH_INSTRUCTIONS
  1, // 15 -> HW_BRANCH_MISSES
  2, // 16 -> HW_BUS_CYCLES
  9, // 17 -> HW_STALLED_CYCLES_FRONTEND
  8, // 18 -> HW_STALLED_CYCLES_BACKEND
  7, // 19 -> HW_REF_CPU_CYCLES
  14, // 20 -> SW_DUMMY
};

const std::string& PerfEvents_Counter_Name(
    PerfEvents_Counter value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfEvents_Counter_entries,
          PerfEvents_Counter_entries_by_number,
          21, PerfEvents_Counter_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfEvents_Counter_entries,
      PerfEvents_Counter_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfEvents_Counter_strings[idx].get();
}
bool PerfEvents_Counter_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfEvents_Counter* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfEvents_Counter_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<PerfEvents_Counter>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PerfEvents_Counter PerfEvents::UNKNOWN_COUNTER;
constexpr PerfEvents_Counter PerfEvents::SW_CPU_CLOCK;
constexpr PerfEvents_Counter PerfEvents::SW_PAGE_FAULTS;
constexpr PerfEvents_Counter PerfEvents::SW_TASK_CLOCK;
constexpr PerfEvents_Counter PerfEvents::SW_CONTEXT_SWITCHES;
constexpr PerfEvents_Counter PerfEvents::SW_CPU_MIGRATIONS;
constexpr PerfEvents_Counter PerfEvents::SW_PAGE_FAULTS_MIN;
constexpr PerfEvents_Counter PerfEvents::SW_PAGE_FAULTS_MAJ;
constexpr PerfEvents_Counter PerfEvents::SW_ALIGNMENT_FAULTS;
constexpr PerfEvents_Counter PerfEvents::SW_EMULATION_FAULTS;
constexpr PerfEvents_Counter PerfEvents::SW_DUMMY;
constexpr PerfEvents_Counter PerfEvents::HW_CPU_CYCLES;
constexpr PerfEvents_Counter PerfEvents::HW_INSTRUCTIONS;
constexpr PerfEvents_Counter PerfEvents::HW_CACHE_REFERENCES;
constexpr PerfEvents_Counter PerfEvents::HW_CACHE_MISSES;
constexpr PerfEvents_Counter PerfEvents::HW_BRANCH_INSTRUCTIONS;
constexpr PerfEvents_Counter PerfEvents::HW_BRANCH_MISSES;
constexpr PerfEvents_Counter PerfEvents::HW_BUS_CYCLES;
constexpr PerfEvents_Counter PerfEvents::HW_STALLED_CYCLES_FRONTEND;
constexpr PerfEvents_Counter PerfEvents::HW_STALLED_CYCLES_BACKEND;
constexpr PerfEvents_Counter PerfEvents::HW_REF_CPU_CYCLES;
constexpr PerfEvents_Counter PerfEvents::Counter_MIN;
constexpr PerfEvents_Counter PerfEvents::Counter_MAX;
constexpr int PerfEvents::Counter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool PerfEvents_PerfClock_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfEvents_PerfClock_strings[5] = {};

static const char PerfEvents_PerfClock_names[] =
  "PERF_CLOCK_BOOTTIME"
  "PERF_CLOCK_MONOTONIC"
  "PERF_CLOCK_MONOTONIC_RAW"
  "PERF_CLOCK_REALTIME"
  "UNKNOWN_PERF_CLOCK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfEvents_PerfClock_entries[] = {
  { {PerfEvents_PerfClock_names + 0, 19}, 4 },
  { {PerfEvents_PerfClock_names + 19, 20}, 2 },
  { {PerfEvents_PerfClock_names + 39, 24}, 3 },
  { {PerfEvents_PerfClock_names + 63, 19}, 1 },
  { {PerfEvents_PerfClock_names + 82, 18}, 0 },
};

static const int PerfEvents_PerfClock_entries_by_number[] = {
  4, // 0 -> UNKNOWN_PERF_CLOCK
  3, // 1 -> PERF_CLOCK_REALTIME
  1, // 2 -> PERF_CLOCK_MONOTONIC
  2, // 3 -> PERF_CLOCK_MONOTONIC_RAW
  0, // 4 -> PERF_CLOCK_BOOTTIME
};

const std::string& PerfEvents_PerfClock_Name(
    PerfEvents_PerfClock value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfEvents_PerfClock_entries,
          PerfEvents_PerfClock_entries_by_number,
          5, PerfEvents_PerfClock_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfEvents_PerfClock_entries,
      PerfEvents_PerfClock_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfEvents_PerfClock_strings[idx].get();
}
bool PerfEvents_PerfClock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfEvents_PerfClock* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfEvents_PerfClock_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<PerfEvents_PerfClock>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PerfEvents_PerfClock PerfEvents::UNKNOWN_PERF_CLOCK;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_REALTIME;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_MONOTONIC;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_MONOTONIC_RAW;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_BOOTTIME;
constexpr PerfEvents_PerfClock PerfEvents::PerfClock_MIN;
constexpr PerfEvents_PerfClock PerfEvents::PerfClock_MAX;
constexpr int PerfEvents::PerfClock_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PerfEvents_Timebase::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_Timebase>()._impl_._has_bits_);
  static const ::perfetto::protos::PerfEvents_Tracepoint& tracepoint(const PerfEvents_Timebase* msg);
  static const ::perfetto::protos::PerfEvents_RawEvent& raw_event(const PerfEvents_Timebase* msg);
  static void set_has_timestamp_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::PerfEvents_Tracepoint&
PerfEvents_Timebase::_Internal::tracepoint(const PerfEvents_Timebase* msg) {
  return *msg->_impl_.event_.tracepoint_;
}
const ::perfetto::protos::PerfEvents_RawEvent&
PerfEvents_Timebase::_Internal::raw_event(const PerfEvents_Timebase* msg) {
  return *msg->_impl_.event_.raw_event_;
}
void PerfEvents_Timebase::set_allocated_tracepoint(::perfetto::protos::PerfEvents_Tracepoint* tracepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (tracepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tracepoint);
    if (message_arena != submessage_arena) {
      tracepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracepoint, submessage_arena);
    }
    set_has_tracepoint();
    _impl_.event_.tracepoint_ = tracepoint;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEvents.Timebase.tracepoint)
}
void PerfEvents_Timebase::set_allocated_raw_event(::perfetto::protos::PerfEvents_RawEvent* raw_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (raw_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_event);
    if (message_arena != submessage_arena) {
      raw_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    set_has_raw_event();
    _impl_.event_.raw_event_ = raw_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEvents.Timebase.raw_event)
}
PerfEvents_Timebase::PerfEvents_Timebase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents.Timebase)
}
PerfEvents_Timebase::PerfEvents_Timebase(const PerfEvents_Timebase& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfEvents_Timebase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.timestamp_clock_){}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_clock_ = from._impl_.timestamp_clock_;
  clear_has_interval();
  switch (from.interval_case()) {
    case kFrequency: {
      _this->_internal_set_frequency(from._internal_frequency());
      break;
    }
    case kPeriod: {
      _this->_internal_set_period(from._internal_period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  clear_has_event();
  switch (from.event_case()) {
    case kCounter: {
      _this->_internal_set_counter(from._internal_counter());
      break;
    }
    case kTracepoint: {
      _this->_internal_mutable_tracepoint()->::perfetto::protos::PerfEvents_Tracepoint::MergeFrom(
          from._internal_tracepoint());
      break;
    }
    case kRawEvent: {
      _this->_internal_mutable_raw_event()->::perfetto::protos::PerfEvents_RawEvent::MergeFrom(
          from._internal_raw_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.Timebase)
}

inline void PerfEvents_Timebase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.timestamp_clock_){0}
    , decltype(_impl_.interval_){}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_interval();
  clear_has_event();
}

PerfEvents_Timebase::~PerfEvents_Timebase() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.Timebase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEvents_Timebase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_interval()) {
    clear_interval();
  }
  if (has_event()) {
    clear_event();
  }
}

void PerfEvents_Timebase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEvents_Timebase::clear_interval() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEvents.Timebase)
  switch (interval_case()) {
    case kFrequency: {
      // No need to clear
      break;
    }
    case kPeriod: {
      // No need to clear
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTERVAL_NOT_SET;
}

void PerfEvents_Timebase::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEvents.Timebase)
  switch (event_case()) {
    case kCounter: {
      // No need to clear
      break;
    }
    case kTracepoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.tracepoint_;
      }
      break;
    }
    case kRawEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.raw_event_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = EVENT_NOT_SET;
}


void PerfEvents_Timebase::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.Timebase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.timestamp_clock_ = 0;
  clear_interval();
  clear_event();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEvents_Timebase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_period(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracepoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.PerfEvents.Counter counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEvents_Counter_IsValid(val))) {
            _internal_set_counter(static_cast<::perfetto::protos::PerfEvents_Counter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.PerfEvents.RawEvent raw_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEvents_PerfClock_IsValid(val))) {
            _internal_set_timestamp_clock(static_cast<::perfetto::protos::PerfEvents_PerfClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfEvents_Timebase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEvents.Timebase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (interval_case()) {
    case kPeriod: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_period(), target);
      break;
    }
    case kFrequency: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frequency(), target);
      break;
    }
    default: ;
  }
  switch (event_case()) {
    case kTracepoint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::tracepoint(this),
          _Internal::tracepoint(this).GetCachedSize(), target, stream);
      break;
    }
    case kCounter: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_counter(), target);
      break;
    }
    case kRawEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::raw_event(this),
          _Internal::raw_event(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_timestamp_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEvents.Timebase)
  return target;
}

size_t PerfEvents_Timebase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.Timebase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_timestamp_clock());
    }

  }
  switch (interval_case()) {
    // uint64 frequency = 2;
    case kFrequency: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frequency());
      break;
    }
    // uint64 period = 1;
    case kPeriod: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (event_case()) {
    // .perfetto.protos.PerfEvents.Counter counter = 4;
    case kCounter: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_counter());
      break;
    }
    // .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
    case kTracepoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.tracepoint_);
      break;
    }
    // .perfetto.protos.PerfEvents.RawEvent raw_event = 5;
    case kRawEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.raw_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEvents_Timebase::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfEvents_Timebase*>(
      &from));
}

void PerfEvents_Timebase::MergeFrom(const PerfEvents_Timebase& from) {
  PerfEvents_Timebase* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.Timebase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_clock_ = from._impl_.timestamp_clock_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.interval_case()) {
    case kFrequency: {
      _this->_internal_set_frequency(from._internal_frequency());
      break;
    }
    case kPeriod: {
      _this->_internal_set_period(from._internal_period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (from.event_case()) {
    case kCounter: {
      _this->_internal_set_counter(from._internal_counter());
      break;
    }
    case kTracepoint: {
      _this->_internal_mutable_tracepoint()->::perfetto::protos::PerfEvents_Tracepoint::MergeFrom(
          from._internal_tracepoint());
      break;
    }
    case kRawEvent: {
      _this->_internal_mutable_raw_event()->::perfetto::protos::PerfEvents_RawEvent::MergeFrom(
          from._internal_raw_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfEvents_Timebase::CopyFrom(const PerfEvents_Timebase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.Timebase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_Timebase::IsInitialized() const {
  return true;
}

void PerfEvents_Timebase::InternalSwap(PerfEvents_Timebase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.timestamp_clock_, other->_impl_.timestamp_clock_);
  swap(_impl_.interval_, other->_impl_.interval_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

std::string PerfEvents_Timebase::GetTypeName() const {
  return "perfetto.protos.PerfEvents.Timebase";
}


// ===================================================================

class PerfEvents_Tracepoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_Tracepoint>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PerfEvents_Tracepoint::PerfEvents_Tracepoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents.Tracepoint)
}
PerfEvents_Tracepoint::PerfEvents_Tracepoint(const PerfEvents_Tracepoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfEvents_Tracepoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.filter_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filter()) {
    _this->_impl_.filter_.Set(from._internal_filter(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.Tracepoint)
}

inline void PerfEvents_Tracepoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.filter_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerfEvents_Tracepoint::~PerfEvents_Tracepoint() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.Tracepoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEvents_Tracepoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.filter_.Destroy();
}

void PerfEvents_Tracepoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEvents_Tracepoint::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.Tracepoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.filter_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEvents_Tracepoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfEvents_Tracepoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEvents.Tracepoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string filter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEvents.Tracepoint)
  return target;
}

size_t PerfEvents_Tracepoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.Tracepoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string filter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEvents_Tracepoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfEvents_Tracepoint*>(
      &from));
}

void PerfEvents_Tracepoint::MergeFrom(const PerfEvents_Tracepoint& from) {
  PerfEvents_Tracepoint* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.Tracepoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_filter(from._internal_filter());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfEvents_Tracepoint::CopyFrom(const PerfEvents_Tracepoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.Tracepoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_Tracepoint::IsInitialized() const {
  return true;
}

void PerfEvents_Tracepoint::InternalSwap(PerfEvents_Tracepoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filter_, lhs_arena,
      &other->_impl_.filter_, rhs_arena
  );
}

std::string PerfEvents_Tracepoint::GetTypeName() const {
  return "perfetto.protos.PerfEvents.Tracepoint";
}


// ===================================================================

class PerfEvents_RawEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_RawEvent>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PerfEvents_RawEvent::PerfEvents_RawEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents.RawEvent)
}
PerfEvents_RawEvent::PerfEvents_RawEvent(const PerfEvents_RawEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfEvents_RawEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_){}
    , decltype(_impl_.config1_){}
    , decltype(_impl_.config2_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.config_, &from._impl_.config_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.config_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.RawEvent)
}

inline void PerfEvents_RawEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_){uint64_t{0u}}
    , decltype(_impl_.config1_){uint64_t{0u}}
    , decltype(_impl_.config2_){uint64_t{0u}}
    , decltype(_impl_.type_){0u}
  };
}

PerfEvents_RawEvent::~PerfEvents_RawEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.RawEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEvents_RawEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfEvents_RawEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEvents_RawEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.RawEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.config_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.config_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEvents_RawEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_config(&has_bits);
          _impl_.config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 config1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_config1(&has_bits);
          _impl_.config1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 config2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_config2(&has_bits);
          _impl_.config2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfEvents_RawEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEvents.RawEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_config(), target);
  }

  // optional uint64 config1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_config1(), target);
  }

  // optional uint64 config2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_config2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEvents.RawEvent)
  return target;
}

size_t PerfEvents_RawEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.RawEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_config());
    }

    // optional uint64 config1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_config1());
    }

    // optional uint64 config2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_config2());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEvents_RawEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfEvents_RawEvent*>(
      &from));
}

void PerfEvents_RawEvent::MergeFrom(const PerfEvents_RawEvent& from) {
  PerfEvents_RawEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.RawEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.config_ = from._impl_.config_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.config1_ = from._impl_.config1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.config2_ = from._impl_.config2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfEvents_RawEvent::CopyFrom(const PerfEvents_RawEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.RawEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_RawEvent::IsInitialized() const {
  return true;
}

void PerfEvents_RawEvent::InternalSwap(PerfEvents_RawEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfEvents_RawEvent, _impl_.type_)
      + sizeof(PerfEvents_RawEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PerfEvents_RawEvent, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

std::string PerfEvents_RawEvent::GetTypeName() const {
  return "perfetto.protos.PerfEvents.RawEvent";
}


// ===================================================================

class PerfEvents::_Internal {
 public:
};

PerfEvents::PerfEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents)
}
PerfEvents::PerfEvents(const PerfEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PerfEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents)
}

inline void PerfEvents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

PerfEvents::~PerfEvents() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* PerfEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerfEvents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEvents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEvents)
  return target;
}

size_t PerfEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerfEvents*>(
      &from));
}

void PerfEvents::MergeFrom(const PerfEvents& from) {
  PerfEvents* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerfEvents::CopyFrom(const PerfEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents::IsInitialized() const {
  return true;
}

void PerfEvents::InternalSwap(PerfEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string PerfEvents::GetTypeName() const {
  return "perfetto.protos.PerfEvents";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_Timebase*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_Timebase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents_Timebase >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_Tracepoint*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_Tracepoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents_Tracepoint >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_RawEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_RawEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents_RawEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
