// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/trace_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class TraceStats;
struct TraceStatsDefaultTypeInternal;
extern TraceStatsDefaultTypeInternal _TraceStats_default_instance_;
class TraceStats_BufferStats;
struct TraceStats_BufferStatsDefaultTypeInternal;
extern TraceStats_BufferStatsDefaultTypeInternal _TraceStats_BufferStats_default_instance_;
class TraceStats_FilterStats;
struct TraceStats_FilterStatsDefaultTypeInternal;
extern TraceStats_FilterStatsDefaultTypeInternal _TraceStats_FilterStats_default_instance_;
class TraceStats_WriterStats;
struct TraceStats_WriterStatsDefaultTypeInternal;
extern TraceStats_WriterStatsDefaultTypeInternal _TraceStats_WriterStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TraceStats* Arena::CreateMaybeMessage<::perfetto::protos::TraceStats>(Arena*);
template<> ::perfetto::protos::TraceStats_BufferStats* Arena::CreateMaybeMessage<::perfetto::protos::TraceStats_BufferStats>(Arena*);
template<> ::perfetto::protos::TraceStats_FilterStats* Arena::CreateMaybeMessage<::perfetto::protos::TraceStats_FilterStats>(Arena*);
template<> ::perfetto::protos::TraceStats_WriterStats* Arena::CreateMaybeMessage<::perfetto::protos::TraceStats_WriterStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum TraceStats_FinalFlushOutcome : int {
  TraceStats_FinalFlushOutcome_FINAL_FLUSH_UNSPECIFIED = 0,
  TraceStats_FinalFlushOutcome_FINAL_FLUSH_SUCCEEDED = 1,
  TraceStats_FinalFlushOutcome_FINAL_FLUSH_FAILED = 2
};
bool TraceStats_FinalFlushOutcome_IsValid(int value);
constexpr TraceStats_FinalFlushOutcome TraceStats_FinalFlushOutcome_FinalFlushOutcome_MIN = TraceStats_FinalFlushOutcome_FINAL_FLUSH_UNSPECIFIED;
constexpr TraceStats_FinalFlushOutcome TraceStats_FinalFlushOutcome_FinalFlushOutcome_MAX = TraceStats_FinalFlushOutcome_FINAL_FLUSH_FAILED;
constexpr int TraceStats_FinalFlushOutcome_FinalFlushOutcome_ARRAYSIZE = TraceStats_FinalFlushOutcome_FinalFlushOutcome_MAX + 1;

const std::string& TraceStats_FinalFlushOutcome_Name(TraceStats_FinalFlushOutcome value);
template<typename T>
inline const std::string& TraceStats_FinalFlushOutcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceStats_FinalFlushOutcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceStats_FinalFlushOutcome_Name.");
  return TraceStats_FinalFlushOutcome_Name(static_cast<TraceStats_FinalFlushOutcome>(enum_t_value));
}
bool TraceStats_FinalFlushOutcome_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceStats_FinalFlushOutcome* value);
// ===================================================================

class TraceStats_BufferStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceStats.BufferStats) */ {
 public:
  inline TraceStats_BufferStats() : TraceStats_BufferStats(nullptr) {}
  ~TraceStats_BufferStats() override;
  explicit PROTOBUF_CONSTEXPR TraceStats_BufferStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceStats_BufferStats(const TraceStats_BufferStats& from);
  TraceStats_BufferStats(TraceStats_BufferStats&& from) noexcept
    : TraceStats_BufferStats() {
    *this = ::std::move(from);
  }

  inline TraceStats_BufferStats& operator=(const TraceStats_BufferStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceStats_BufferStats& operator=(TraceStats_BufferStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TraceStats_BufferStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceStats_BufferStats* internal_default_instance() {
    return reinterpret_cast<const TraceStats_BufferStats*>(
               &_TraceStats_BufferStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceStats_BufferStats& a, TraceStats_BufferStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TraceStats_BufferStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceStats_BufferStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceStats_BufferStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceStats_BufferStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TraceStats_BufferStats& from);
  void MergeFrom(const TraceStats_BufferStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceStats_BufferStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceStats.BufferStats";
  }
  protected:
  explicit TraceStats_BufferStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesWrittenFieldNumber = 1,
    kChunksWrittenFieldNumber = 2,
    kChunksOverwrittenFieldNumber = 3,
    kWriteWrapCountFieldNumber = 4,
    kPatchesSucceededFieldNumber = 5,
    kPatchesFailedFieldNumber = 6,
    kReadaheadsSucceededFieldNumber = 7,
    kReadaheadsFailedFieldNumber = 8,
    kAbiViolationsFieldNumber = 9,
    kChunksRewrittenFieldNumber = 10,
    kChunksCommittedOutOfOrderFieldNumber = 11,
    kBufferSizeFieldNumber = 12,
    kBytesOverwrittenFieldNumber = 13,
    kBytesReadFieldNumber = 14,
    kPaddingBytesWrittenFieldNumber = 15,
    kPaddingBytesClearedFieldNumber = 16,
    kChunksReadFieldNumber = 17,
    kChunksDiscardedFieldNumber = 18,
    kTraceWriterPacketLossFieldNumber = 19,
  };
  // optional uint64 bytes_written = 1;
  bool has_bytes_written() const;
  private:
  bool _internal_has_bytes_written() const;
  public:
  void clear_bytes_written();
  uint64_t bytes_written() const;
  void set_bytes_written(uint64_t value);
  private:
  uint64_t _internal_bytes_written() const;
  void _internal_set_bytes_written(uint64_t value);
  public:

  // optional uint64 chunks_written = 2;
  bool has_chunks_written() const;
  private:
  bool _internal_has_chunks_written() const;
  public:
  void clear_chunks_written();
  uint64_t chunks_written() const;
  void set_chunks_written(uint64_t value);
  private:
  uint64_t _internal_chunks_written() const;
  void _internal_set_chunks_written(uint64_t value);
  public:

  // optional uint64 chunks_overwritten = 3;
  bool has_chunks_overwritten() const;
  private:
  bool _internal_has_chunks_overwritten() const;
  public:
  void clear_chunks_overwritten();
  uint64_t chunks_overwritten() const;
  void set_chunks_overwritten(uint64_t value);
  private:
  uint64_t _internal_chunks_overwritten() const;
  void _internal_set_chunks_overwritten(uint64_t value);
  public:

  // optional uint64 write_wrap_count = 4;
  bool has_write_wrap_count() const;
  private:
  bool _internal_has_write_wrap_count() const;
  public:
  void clear_write_wrap_count();
  uint64_t write_wrap_count() const;
  void set_write_wrap_count(uint64_t value);
  private:
  uint64_t _internal_write_wrap_count() const;
  void _internal_set_write_wrap_count(uint64_t value);
  public:

  // optional uint64 patches_succeeded = 5;
  bool has_patches_succeeded() const;
  private:
  bool _internal_has_patches_succeeded() const;
  public:
  void clear_patches_succeeded();
  uint64_t patches_succeeded() const;
  void set_patches_succeeded(uint64_t value);
  private:
  uint64_t _internal_patches_succeeded() const;
  void _internal_set_patches_succeeded(uint64_t value);
  public:

  // optional uint64 patches_failed = 6;
  bool has_patches_failed() const;
  private:
  bool _internal_has_patches_failed() const;
  public:
  void clear_patches_failed();
  uint64_t patches_failed() const;
  void set_patches_failed(uint64_t value);
  private:
  uint64_t _internal_patches_failed() const;
  void _internal_set_patches_failed(uint64_t value);
  public:

  // optional uint64 readaheads_succeeded = 7;
  bool has_readaheads_succeeded() const;
  private:
  bool _internal_has_readaheads_succeeded() const;
  public:
  void clear_readaheads_succeeded();
  uint64_t readaheads_succeeded() const;
  void set_readaheads_succeeded(uint64_t value);
  private:
  uint64_t _internal_readaheads_succeeded() const;
  void _internal_set_readaheads_succeeded(uint64_t value);
  public:

  // optional uint64 readaheads_failed = 8;
  bool has_readaheads_failed() const;
  private:
  bool _internal_has_readaheads_failed() const;
  public:
  void clear_readaheads_failed();
  uint64_t readaheads_failed() const;
  void set_readaheads_failed(uint64_t value);
  private:
  uint64_t _internal_readaheads_failed() const;
  void _internal_set_readaheads_failed(uint64_t value);
  public:

  // optional uint64 abi_violations = 9;
  bool has_abi_violations() const;
  private:
  bool _internal_has_abi_violations() const;
  public:
  void clear_abi_violations();
  uint64_t abi_violations() const;
  void set_abi_violations(uint64_t value);
  private:
  uint64_t _internal_abi_violations() const;
  void _internal_set_abi_violations(uint64_t value);
  public:

  // optional uint64 chunks_rewritten = 10;
  bool has_chunks_rewritten() const;
  private:
  bool _internal_has_chunks_rewritten() const;
  public:
  void clear_chunks_rewritten();
  uint64_t chunks_rewritten() const;
  void set_chunks_rewritten(uint64_t value);
  private:
  uint64_t _internal_chunks_rewritten() const;
  void _internal_set_chunks_rewritten(uint64_t value);
  public:

  // optional uint64 chunks_committed_out_of_order = 11;
  bool has_chunks_committed_out_of_order() const;
  private:
  bool _internal_has_chunks_committed_out_of_order() const;
  public:
  void clear_chunks_committed_out_of_order();
  uint64_t chunks_committed_out_of_order() const;
  void set_chunks_committed_out_of_order(uint64_t value);
  private:
  uint64_t _internal_chunks_committed_out_of_order() const;
  void _internal_set_chunks_committed_out_of_order(uint64_t value);
  public:

  // optional uint64 buffer_size = 12;
  bool has_buffer_size() const;
  private:
  bool _internal_has_buffer_size() const;
  public:
  void clear_buffer_size();
  uint64_t buffer_size() const;
  void set_buffer_size(uint64_t value);
  private:
  uint64_t _internal_buffer_size() const;
  void _internal_set_buffer_size(uint64_t value);
  public:

  // optional uint64 bytes_overwritten = 13;
  bool has_bytes_overwritten() const;
  private:
  bool _internal_has_bytes_overwritten() const;
  public:
  void clear_bytes_overwritten();
  uint64_t bytes_overwritten() const;
  void set_bytes_overwritten(uint64_t value);
  private:
  uint64_t _internal_bytes_overwritten() const;
  void _internal_set_bytes_overwritten(uint64_t value);
  public:

  // optional uint64 bytes_read = 14;
  bool has_bytes_read() const;
  private:
  bool _internal_has_bytes_read() const;
  public:
  void clear_bytes_read();
  uint64_t bytes_read() const;
  void set_bytes_read(uint64_t value);
  private:
  uint64_t _internal_bytes_read() const;
  void _internal_set_bytes_read(uint64_t value);
  public:

  // optional uint64 padding_bytes_written = 15;
  bool has_padding_bytes_written() const;
  private:
  bool _internal_has_padding_bytes_written() const;
  public:
  void clear_padding_bytes_written();
  uint64_t padding_bytes_written() const;
  void set_padding_bytes_written(uint64_t value);
  private:
  uint64_t _internal_padding_bytes_written() const;
  void _internal_set_padding_bytes_written(uint64_t value);
  public:

  // optional uint64 padding_bytes_cleared = 16;
  bool has_padding_bytes_cleared() const;
  private:
  bool _internal_has_padding_bytes_cleared() const;
  public:
  void clear_padding_bytes_cleared();
  uint64_t padding_bytes_cleared() const;
  void set_padding_bytes_cleared(uint64_t value);
  private:
  uint64_t _internal_padding_bytes_cleared() const;
  void _internal_set_padding_bytes_cleared(uint64_t value);
  public:

  // optional uint64 chunks_read = 17;
  bool has_chunks_read() const;
  private:
  bool _internal_has_chunks_read() const;
  public:
  void clear_chunks_read();
  uint64_t chunks_read() const;
  void set_chunks_read(uint64_t value);
  private:
  uint64_t _internal_chunks_read() const;
  void _internal_set_chunks_read(uint64_t value);
  public:

  // optional uint64 chunks_discarded = 18;
  bool has_chunks_discarded() const;
  private:
  bool _internal_has_chunks_discarded() const;
  public:
  void clear_chunks_discarded();
  uint64_t chunks_discarded() const;
  void set_chunks_discarded(uint64_t value);
  private:
  uint64_t _internal_chunks_discarded() const;
  void _internal_set_chunks_discarded(uint64_t value);
  public:

  // optional uint64 trace_writer_packet_loss = 19;
  bool has_trace_writer_packet_loss() const;
  private:
  bool _internal_has_trace_writer_packet_loss() const;
  public:
  void clear_trace_writer_packet_loss();
  uint64_t trace_writer_packet_loss() const;
  void set_trace_writer_packet_loss(uint64_t value);
  private:
  uint64_t _internal_trace_writer_packet_loss() const;
  void _internal_set_trace_writer_packet_loss(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceStats.BufferStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t bytes_written_;
    uint64_t chunks_written_;
    uint64_t chunks_overwritten_;
    uint64_t write_wrap_count_;
    uint64_t patches_succeeded_;
    uint64_t patches_failed_;
    uint64_t readaheads_succeeded_;
    uint64_t readaheads_failed_;
    uint64_t abi_violations_;
    uint64_t chunks_rewritten_;
    uint64_t chunks_committed_out_of_order_;
    uint64_t buffer_size_;
    uint64_t bytes_overwritten_;
    uint64_t bytes_read_;
    uint64_t padding_bytes_written_;
    uint64_t padding_bytes_cleared_;
    uint64_t chunks_read_;
    uint64_t chunks_discarded_;
    uint64_t trace_writer_packet_loss_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
};
// -------------------------------------------------------------------

class TraceStats_WriterStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceStats.WriterStats) */ {
 public:
  inline TraceStats_WriterStats() : TraceStats_WriterStats(nullptr) {}
  ~TraceStats_WriterStats() override;
  explicit PROTOBUF_CONSTEXPR TraceStats_WriterStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceStats_WriterStats(const TraceStats_WriterStats& from);
  TraceStats_WriterStats(TraceStats_WriterStats&& from) noexcept
    : TraceStats_WriterStats() {
    *this = ::std::move(from);
  }

  inline TraceStats_WriterStats& operator=(const TraceStats_WriterStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceStats_WriterStats& operator=(TraceStats_WriterStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TraceStats_WriterStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceStats_WriterStats* internal_default_instance() {
    return reinterpret_cast<const TraceStats_WriterStats*>(
               &_TraceStats_WriterStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TraceStats_WriterStats& a, TraceStats_WriterStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TraceStats_WriterStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceStats_WriterStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceStats_WriterStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceStats_WriterStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TraceStats_WriterStats& from);
  void MergeFrom(const TraceStats_WriterStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceStats_WriterStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceStats.WriterStats";
  }
  protected:
  explicit TraceStats_WriterStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkPayloadHistogramCountsFieldNumber = 2,
    kChunkPayloadHistogramSumFieldNumber = 3,
    kSequenceIdFieldNumber = 1,
    kBufferFieldNumber = 4,
  };
  // repeated uint64 chunk_payload_histogram_counts = 2 [packed = true];
  int chunk_payload_histogram_counts_size() const;
  private:
  int _internal_chunk_payload_histogram_counts_size() const;
  public:
  void clear_chunk_payload_histogram_counts();
  private:
  uint64_t _internal_chunk_payload_histogram_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_chunk_payload_histogram_counts() const;
  void _internal_add_chunk_payload_histogram_counts(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_chunk_payload_histogram_counts();
  public:
  uint64_t chunk_payload_histogram_counts(int index) const;
  void set_chunk_payload_histogram_counts(int index, uint64_t value);
  void add_chunk_payload_histogram_counts(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      chunk_payload_histogram_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_chunk_payload_histogram_counts();

  // repeated int64 chunk_payload_histogram_sum = 3 [packed = true];
  int chunk_payload_histogram_sum_size() const;
  private:
  int _internal_chunk_payload_histogram_sum_size() const;
  public:
  void clear_chunk_payload_histogram_sum();
  private:
  int64_t _internal_chunk_payload_histogram_sum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_chunk_payload_histogram_sum() const;
  void _internal_add_chunk_payload_histogram_sum(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_chunk_payload_histogram_sum();
  public:
  int64_t chunk_payload_histogram_sum(int index) const;
  void set_chunk_payload_histogram_sum(int index, int64_t value);
  void add_chunk_payload_histogram_sum(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      chunk_payload_histogram_sum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_chunk_payload_histogram_sum();

  // optional uint64 sequence_id = 1;
  bool has_sequence_id() const;
  private:
  bool _internal_has_sequence_id() const;
  public:
  void clear_sequence_id();
  uint64_t sequence_id() const;
  void set_sequence_id(uint64_t value);
  private:
  uint64_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint64_t value);
  public:

  // optional uint32 buffer = 4;
  bool has_buffer() const;
  private:
  bool _internal_has_buffer() const;
  public:
  void clear_buffer();
  uint32_t buffer() const;
  void set_buffer(uint32_t value);
  private:
  uint32_t _internal_buffer() const;
  void _internal_set_buffer(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceStats.WriterStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > chunk_payload_histogram_counts_;
    mutable std::atomic<int> _chunk_payload_histogram_counts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > chunk_payload_histogram_sum_;
    mutable std::atomic<int> _chunk_payload_histogram_sum_cached_byte_size_;
    uint64_t sequence_id_;
    uint32_t buffer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
};
// -------------------------------------------------------------------

class TraceStats_FilterStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceStats.FilterStats) */ {
 public:
  inline TraceStats_FilterStats() : TraceStats_FilterStats(nullptr) {}
  ~TraceStats_FilterStats() override;
  explicit PROTOBUF_CONSTEXPR TraceStats_FilterStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceStats_FilterStats(const TraceStats_FilterStats& from);
  TraceStats_FilterStats(TraceStats_FilterStats&& from) noexcept
    : TraceStats_FilterStats() {
    *this = ::std::move(from);
  }

  inline TraceStats_FilterStats& operator=(const TraceStats_FilterStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceStats_FilterStats& operator=(TraceStats_FilterStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TraceStats_FilterStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceStats_FilterStats* internal_default_instance() {
    return reinterpret_cast<const TraceStats_FilterStats*>(
               &_TraceStats_FilterStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TraceStats_FilterStats& a, TraceStats_FilterStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TraceStats_FilterStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceStats_FilterStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceStats_FilterStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceStats_FilterStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TraceStats_FilterStats& from);
  void MergeFrom(const TraceStats_FilterStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceStats_FilterStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceStats.FilterStats";
  }
  protected:
  explicit TraceStats_FilterStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesDiscardedPerBufferFieldNumber = 20,
    kInputPacketsFieldNumber = 1,
    kInputBytesFieldNumber = 2,
    kOutputBytesFieldNumber = 3,
    kErrorsFieldNumber = 4,
    kTimeTakenNsFieldNumber = 5,
  };
  // repeated uint64 bytes_discarded_per_buffer = 20;
  int bytes_discarded_per_buffer_size() const;
  private:
  int _internal_bytes_discarded_per_buffer_size() const;
  public:
  void clear_bytes_discarded_per_buffer();
  private:
  uint64_t _internal_bytes_discarded_per_buffer(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_bytes_discarded_per_buffer() const;
  void _internal_add_bytes_discarded_per_buffer(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_bytes_discarded_per_buffer();
  public:
  uint64_t bytes_discarded_per_buffer(int index) const;
  void set_bytes_discarded_per_buffer(int index, uint64_t value);
  void add_bytes_discarded_per_buffer(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      bytes_discarded_per_buffer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_bytes_discarded_per_buffer();

  // optional uint64 input_packets = 1;
  bool has_input_packets() const;
  private:
  bool _internal_has_input_packets() const;
  public:
  void clear_input_packets();
  uint64_t input_packets() const;
  void set_input_packets(uint64_t value);
  private:
  uint64_t _internal_input_packets() const;
  void _internal_set_input_packets(uint64_t value);
  public:

  // optional uint64 input_bytes = 2;
  bool has_input_bytes() const;
  private:
  bool _internal_has_input_bytes() const;
  public:
  void clear_input_bytes();
  uint64_t input_bytes() const;
  void set_input_bytes(uint64_t value);
  private:
  uint64_t _internal_input_bytes() const;
  void _internal_set_input_bytes(uint64_t value);
  public:

  // optional uint64 output_bytes = 3;
  bool has_output_bytes() const;
  private:
  bool _internal_has_output_bytes() const;
  public:
  void clear_output_bytes();
  uint64_t output_bytes() const;
  void set_output_bytes(uint64_t value);
  private:
  uint64_t _internal_output_bytes() const;
  void _internal_set_output_bytes(uint64_t value);
  public:

  // optional uint64 errors = 4;
  bool has_errors() const;
  private:
  bool _internal_has_errors() const;
  public:
  void clear_errors();
  uint64_t errors() const;
  void set_errors(uint64_t value);
  private:
  uint64_t _internal_errors() const;
  void _internal_set_errors(uint64_t value);
  public:

  // optional uint64 time_taken_ns = 5;
  bool has_time_taken_ns() const;
  private:
  bool _internal_has_time_taken_ns() const;
  public:
  void clear_time_taken_ns();
  uint64_t time_taken_ns() const;
  void set_time_taken_ns(uint64_t value);
  private:
  uint64_t _internal_time_taken_ns() const;
  void _internal_set_time_taken_ns(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceStats.FilterStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > bytes_discarded_per_buffer_;
    uint64_t input_packets_;
    uint64_t input_bytes_;
    uint64_t output_bytes_;
    uint64_t errors_;
    uint64_t time_taken_ns_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
};
// -------------------------------------------------------------------

class TraceStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceStats) */ {
 public:
  inline TraceStats() : TraceStats(nullptr) {}
  ~TraceStats() override;
  explicit PROTOBUF_CONSTEXPR TraceStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceStats(const TraceStats& from);
  TraceStats(TraceStats&& from) noexcept
    : TraceStats() {
    *this = ::std::move(from);
  }

  inline TraceStats& operator=(const TraceStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceStats& operator=(TraceStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TraceStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceStats* internal_default_instance() {
    return reinterpret_cast<const TraceStats*>(
               &_TraceStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TraceStats& a, TraceStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TraceStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TraceStats& from);
  void MergeFrom(const TraceStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TraceStats";
  }
  protected:
  explicit TraceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TraceStats_BufferStats BufferStats;
  typedef TraceStats_WriterStats WriterStats;
  typedef TraceStats_FilterStats FilterStats;

  typedef TraceStats_FinalFlushOutcome FinalFlushOutcome;
  static constexpr FinalFlushOutcome FINAL_FLUSH_UNSPECIFIED =
    TraceStats_FinalFlushOutcome_FINAL_FLUSH_UNSPECIFIED;
  static constexpr FinalFlushOutcome FINAL_FLUSH_SUCCEEDED =
    TraceStats_FinalFlushOutcome_FINAL_FLUSH_SUCCEEDED;
  static constexpr FinalFlushOutcome FINAL_FLUSH_FAILED =
    TraceStats_FinalFlushOutcome_FINAL_FLUSH_FAILED;
  static inline bool FinalFlushOutcome_IsValid(int value) {
    return TraceStats_FinalFlushOutcome_IsValid(value);
  }
  static constexpr FinalFlushOutcome FinalFlushOutcome_MIN =
    TraceStats_FinalFlushOutcome_FinalFlushOutcome_MIN;
  static constexpr FinalFlushOutcome FinalFlushOutcome_MAX =
    TraceStats_FinalFlushOutcome_FinalFlushOutcome_MAX;
  static constexpr int FinalFlushOutcome_ARRAYSIZE =
    TraceStats_FinalFlushOutcome_FinalFlushOutcome_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FinalFlushOutcome_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FinalFlushOutcome>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FinalFlushOutcome_Name.");
    return TraceStats_FinalFlushOutcome_Name(enum_t_value);
  }
  static inline bool FinalFlushOutcome_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FinalFlushOutcome* value) {
    return TraceStats_FinalFlushOutcome_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBufferStatsFieldNumber = 1,
    kChunkPayloadHistogramDefFieldNumber = 17,
    kWriterStatsFieldNumber = 18,
    kFilterStatsFieldNumber = 11,
    kProducersSeenFieldNumber = 3,
    kProducersConnectedFieldNumber = 2,
    kDataSourcesRegisteredFieldNumber = 4,
    kDataSourcesSeenFieldNumber = 5,
    kTracingSessionsFieldNumber = 6,
    kTotalBuffersFieldNumber = 7,
    kChunksDiscardedFieldNumber = 8,
    kPatchesDiscardedFieldNumber = 9,
    kInvalidPacketsFieldNumber = 10,
    kFlushesRequestedFieldNumber = 12,
    kFlushesSucceededFieldNumber = 13,
    kFlushesFailedFieldNumber = 14,
    kFinalFlushOutcomeFieldNumber = 15,
  };
  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  int buffer_stats_size() const;
  private:
  int _internal_buffer_stats_size() const;
  public:
  void clear_buffer_stats();
  ::perfetto::protos::TraceStats_BufferStats* mutable_buffer_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >*
      mutable_buffer_stats();
  private:
  const ::perfetto::protos::TraceStats_BufferStats& _internal_buffer_stats(int index) const;
  ::perfetto::protos::TraceStats_BufferStats* _internal_add_buffer_stats();
  public:
  const ::perfetto::protos::TraceStats_BufferStats& buffer_stats(int index) const;
  ::perfetto::protos::TraceStats_BufferStats* add_buffer_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >&
      buffer_stats() const;

  // repeated int64 chunk_payload_histogram_def = 17;
  int chunk_payload_histogram_def_size() const;
  private:
  int _internal_chunk_payload_histogram_def_size() const;
  public:
  void clear_chunk_payload_histogram_def();
  private:
  int64_t _internal_chunk_payload_histogram_def(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_chunk_payload_histogram_def() const;
  void _internal_add_chunk_payload_histogram_def(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_chunk_payload_histogram_def();
  public:
  int64_t chunk_payload_histogram_def(int index) const;
  void set_chunk_payload_histogram_def(int index, int64_t value);
  void add_chunk_payload_histogram_def(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      chunk_payload_histogram_def() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_chunk_payload_histogram_def();

  // repeated .perfetto.protos.TraceStats.WriterStats writer_stats = 18;
  int writer_stats_size() const;
  private:
  int _internal_writer_stats_size() const;
  public:
  void clear_writer_stats();
  ::perfetto::protos::TraceStats_WriterStats* mutable_writer_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_WriterStats >*
      mutable_writer_stats();
  private:
  const ::perfetto::protos::TraceStats_WriterStats& _internal_writer_stats(int index) const;
  ::perfetto::protos::TraceStats_WriterStats* _internal_add_writer_stats();
  public:
  const ::perfetto::protos::TraceStats_WriterStats& writer_stats(int index) const;
  ::perfetto::protos::TraceStats_WriterStats* add_writer_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_WriterStats >&
      writer_stats() const;

  // optional .perfetto.protos.TraceStats.FilterStats filter_stats = 11;
  bool has_filter_stats() const;
  private:
  bool _internal_has_filter_stats() const;
  public:
  void clear_filter_stats();
  const ::perfetto::protos::TraceStats_FilterStats& filter_stats() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceStats_FilterStats* release_filter_stats();
  ::perfetto::protos::TraceStats_FilterStats* mutable_filter_stats();
  void set_allocated_filter_stats(::perfetto::protos::TraceStats_FilterStats* filter_stats);
  private:
  const ::perfetto::protos::TraceStats_FilterStats& _internal_filter_stats() const;
  ::perfetto::protos::TraceStats_FilterStats* _internal_mutable_filter_stats();
  public:
  void unsafe_arena_set_allocated_filter_stats(
      ::perfetto::protos::TraceStats_FilterStats* filter_stats);
  ::perfetto::protos::TraceStats_FilterStats* unsafe_arena_release_filter_stats();

  // optional uint64 producers_seen = 3;
  bool has_producers_seen() const;
  private:
  bool _internal_has_producers_seen() const;
  public:
  void clear_producers_seen();
  uint64_t producers_seen() const;
  void set_producers_seen(uint64_t value);
  private:
  uint64_t _internal_producers_seen() const;
  void _internal_set_producers_seen(uint64_t value);
  public:

  // optional uint32 producers_connected = 2;
  bool has_producers_connected() const;
  private:
  bool _internal_has_producers_connected() const;
  public:
  void clear_producers_connected();
  uint32_t producers_connected() const;
  void set_producers_connected(uint32_t value);
  private:
  uint32_t _internal_producers_connected() const;
  void _internal_set_producers_connected(uint32_t value);
  public:

  // optional uint32 data_sources_registered = 4;
  bool has_data_sources_registered() const;
  private:
  bool _internal_has_data_sources_registered() const;
  public:
  void clear_data_sources_registered();
  uint32_t data_sources_registered() const;
  void set_data_sources_registered(uint32_t value);
  private:
  uint32_t _internal_data_sources_registered() const;
  void _internal_set_data_sources_registered(uint32_t value);
  public:

  // optional uint64 data_sources_seen = 5;
  bool has_data_sources_seen() const;
  private:
  bool _internal_has_data_sources_seen() const;
  public:
  void clear_data_sources_seen();
  uint64_t data_sources_seen() const;
  void set_data_sources_seen(uint64_t value);
  private:
  uint64_t _internal_data_sources_seen() const;
  void _internal_set_data_sources_seen(uint64_t value);
  public:

  // optional uint32 tracing_sessions = 6;
  bool has_tracing_sessions() const;
  private:
  bool _internal_has_tracing_sessions() const;
  public:
  void clear_tracing_sessions();
  uint32_t tracing_sessions() const;
  void set_tracing_sessions(uint32_t value);
  private:
  uint32_t _internal_tracing_sessions() const;
  void _internal_set_tracing_sessions(uint32_t value);
  public:

  // optional uint32 total_buffers = 7;
  bool has_total_buffers() const;
  private:
  bool _internal_has_total_buffers() const;
  public:
  void clear_total_buffers();
  uint32_t total_buffers() const;
  void set_total_buffers(uint32_t value);
  private:
  uint32_t _internal_total_buffers() const;
  void _internal_set_total_buffers(uint32_t value);
  public:

  // optional uint64 chunks_discarded = 8;
  bool has_chunks_discarded() const;
  private:
  bool _internal_has_chunks_discarded() const;
  public:
  void clear_chunks_discarded();
  uint64_t chunks_discarded() const;
  void set_chunks_discarded(uint64_t value);
  private:
  uint64_t _internal_chunks_discarded() const;
  void _internal_set_chunks_discarded(uint64_t value);
  public:

  // optional uint64 patches_discarded = 9;
  bool has_patches_discarded() const;
  private:
  bool _internal_has_patches_discarded() const;
  public:
  void clear_patches_discarded();
  uint64_t patches_discarded() const;
  void set_patches_discarded(uint64_t value);
  private:
  uint64_t _internal_patches_discarded() const;
  void _internal_set_patches_discarded(uint64_t value);
  public:

  // optional uint64 invalid_packets = 10;
  bool has_invalid_packets() const;
  private:
  bool _internal_has_invalid_packets() const;
  public:
  void clear_invalid_packets();
  uint64_t invalid_packets() const;
  void set_invalid_packets(uint64_t value);
  private:
  uint64_t _internal_invalid_packets() const;
  void _internal_set_invalid_packets(uint64_t value);
  public:

  // optional uint64 flushes_requested = 12;
  bool has_flushes_requested() const;
  private:
  bool _internal_has_flushes_requested() const;
  public:
  void clear_flushes_requested();
  uint64_t flushes_requested() const;
  void set_flushes_requested(uint64_t value);
  private:
  uint64_t _internal_flushes_requested() const;
  void _internal_set_flushes_requested(uint64_t value);
  public:

  // optional uint64 flushes_succeeded = 13;
  bool has_flushes_succeeded() const;
  private:
  bool _internal_has_flushes_succeeded() const;
  public:
  void clear_flushes_succeeded();
  uint64_t flushes_succeeded() const;
  void set_flushes_succeeded(uint64_t value);
  private:
  uint64_t _internal_flushes_succeeded() const;
  void _internal_set_flushes_succeeded(uint64_t value);
  public:

  // optional uint64 flushes_failed = 14;
  bool has_flushes_failed() const;
  private:
  bool _internal_has_flushes_failed() const;
  public:
  void clear_flushes_failed();
  uint64_t flushes_failed() const;
  void set_flushes_failed(uint64_t value);
  private:
  uint64_t _internal_flushes_failed() const;
  void _internal_set_flushes_failed(uint64_t value);
  public:

  // optional .perfetto.protos.TraceStats.FinalFlushOutcome final_flush_outcome = 15;
  bool has_final_flush_outcome() const;
  private:
  bool _internal_has_final_flush_outcome() const;
  public:
  void clear_final_flush_outcome();
  ::perfetto::protos::TraceStats_FinalFlushOutcome final_flush_outcome() const;
  void set_final_flush_outcome(::perfetto::protos::TraceStats_FinalFlushOutcome value);
  private:
  ::perfetto::protos::TraceStats_FinalFlushOutcome _internal_final_flush_outcome() const;
  void _internal_set_final_flush_outcome(::perfetto::protos::TraceStats_FinalFlushOutcome value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats > buffer_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > chunk_payload_histogram_def_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_WriterStats > writer_stats_;
    ::perfetto::protos::TraceStats_FilterStats* filter_stats_;
    uint64_t producers_seen_;
    uint32_t producers_connected_;
    uint32_t data_sources_registered_;
    uint64_t data_sources_seen_;
    uint32_t tracing_sessions_;
    uint32_t total_buffers_;
    uint64_t chunks_discarded_;
    uint64_t patches_discarded_;
    uint64_t invalid_packets_;
    uint64_t flushes_requested_;
    uint64_t flushes_succeeded_;
    uint64_t flushes_failed_;
    int final_flush_outcome_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceStats_BufferStats

// optional uint64 buffer_size = 12;
inline bool TraceStats_BufferStats::_internal_has_buffer_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_buffer_size() const {
  return _internal_has_buffer_size();
}
inline void TraceStats_BufferStats::clear_buffer_size() {
  _impl_.buffer_size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t TraceStats_BufferStats::_internal_buffer_size() const {
  return _impl_.buffer_size_;
}
inline uint64_t TraceStats_BufferStats::buffer_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.buffer_size)
  return _internal_buffer_size();
}
inline void TraceStats_BufferStats::_internal_set_buffer_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.buffer_size_ = value;
}
inline void TraceStats_BufferStats::set_buffer_size(uint64_t value) {
  _internal_set_buffer_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.buffer_size)
}

// optional uint64 bytes_written = 1;
inline bool TraceStats_BufferStats::_internal_has_bytes_written() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_bytes_written() const {
  return _internal_has_bytes_written();
}
inline void TraceStats_BufferStats::clear_bytes_written() {
  _impl_.bytes_written_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TraceStats_BufferStats::_internal_bytes_written() const {
  return _impl_.bytes_written_;
}
inline uint64_t TraceStats_BufferStats::bytes_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.bytes_written)
  return _internal_bytes_written();
}
inline void TraceStats_BufferStats::_internal_set_bytes_written(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bytes_written_ = value;
}
inline void TraceStats_BufferStats::set_bytes_written(uint64_t value) {
  _internal_set_bytes_written(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.bytes_written)
}

// optional uint64 bytes_overwritten = 13;
inline bool TraceStats_BufferStats::_internal_has_bytes_overwritten() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_bytes_overwritten() const {
  return _internal_has_bytes_overwritten();
}
inline void TraceStats_BufferStats::clear_bytes_overwritten() {
  _impl_.bytes_overwritten_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t TraceStats_BufferStats::_internal_bytes_overwritten() const {
  return _impl_.bytes_overwritten_;
}
inline uint64_t TraceStats_BufferStats::bytes_overwritten() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.bytes_overwritten)
  return _internal_bytes_overwritten();
}
inline void TraceStats_BufferStats::_internal_set_bytes_overwritten(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bytes_overwritten_ = value;
}
inline void TraceStats_BufferStats::set_bytes_overwritten(uint64_t value) {
  _internal_set_bytes_overwritten(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.bytes_overwritten)
}

// optional uint64 bytes_read = 14;
inline bool TraceStats_BufferStats::_internal_has_bytes_read() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_bytes_read() const {
  return _internal_has_bytes_read();
}
inline void TraceStats_BufferStats::clear_bytes_read() {
  _impl_.bytes_read_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t TraceStats_BufferStats::_internal_bytes_read() const {
  return _impl_.bytes_read_;
}
inline uint64_t TraceStats_BufferStats::bytes_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.bytes_read)
  return _internal_bytes_read();
}
inline void TraceStats_BufferStats::_internal_set_bytes_read(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.bytes_read_ = value;
}
inline void TraceStats_BufferStats::set_bytes_read(uint64_t value) {
  _internal_set_bytes_read(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.bytes_read)
}

// optional uint64 padding_bytes_written = 15;
inline bool TraceStats_BufferStats::_internal_has_padding_bytes_written() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_padding_bytes_written() const {
  return _internal_has_padding_bytes_written();
}
inline void TraceStats_BufferStats::clear_padding_bytes_written() {
  _impl_.padding_bytes_written_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint64_t TraceStats_BufferStats::_internal_padding_bytes_written() const {
  return _impl_.padding_bytes_written_;
}
inline uint64_t TraceStats_BufferStats::padding_bytes_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.padding_bytes_written)
  return _internal_padding_bytes_written();
}
inline void TraceStats_BufferStats::_internal_set_padding_bytes_written(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.padding_bytes_written_ = value;
}
inline void TraceStats_BufferStats::set_padding_bytes_written(uint64_t value) {
  _internal_set_padding_bytes_written(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.padding_bytes_written)
}

// optional uint64 padding_bytes_cleared = 16;
inline bool TraceStats_BufferStats::_internal_has_padding_bytes_cleared() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_padding_bytes_cleared() const {
  return _internal_has_padding_bytes_cleared();
}
inline void TraceStats_BufferStats::clear_padding_bytes_cleared() {
  _impl_.padding_bytes_cleared_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint64_t TraceStats_BufferStats::_internal_padding_bytes_cleared() const {
  return _impl_.padding_bytes_cleared_;
}
inline uint64_t TraceStats_BufferStats::padding_bytes_cleared() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.padding_bytes_cleared)
  return _internal_padding_bytes_cleared();
}
inline void TraceStats_BufferStats::_internal_set_padding_bytes_cleared(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.padding_bytes_cleared_ = value;
}
inline void TraceStats_BufferStats::set_padding_bytes_cleared(uint64_t value) {
  _internal_set_padding_bytes_cleared(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.padding_bytes_cleared)
}

// optional uint64 chunks_written = 2;
inline bool TraceStats_BufferStats::_internal_has_chunks_written() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_chunks_written() const {
  return _internal_has_chunks_written();
}
inline void TraceStats_BufferStats::clear_chunks_written() {
  _impl_.chunks_written_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TraceStats_BufferStats::_internal_chunks_written() const {
  return _impl_.chunks_written_;
}
inline uint64_t TraceStats_BufferStats::chunks_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_written)
  return _internal_chunks_written();
}
inline void TraceStats_BufferStats::_internal_set_chunks_written(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chunks_written_ = value;
}
inline void TraceStats_BufferStats::set_chunks_written(uint64_t value) {
  _internal_set_chunks_written(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_written)
}

// optional uint64 chunks_rewritten = 10;
inline bool TraceStats_BufferStats::_internal_has_chunks_rewritten() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_chunks_rewritten() const {
  return _internal_has_chunks_rewritten();
}
inline void TraceStats_BufferStats::clear_chunks_rewritten() {
  _impl_.chunks_rewritten_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t TraceStats_BufferStats::_internal_chunks_rewritten() const {
  return _impl_.chunks_rewritten_;
}
inline uint64_t TraceStats_BufferStats::chunks_rewritten() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_rewritten)
  return _internal_chunks_rewritten();
}
inline void TraceStats_BufferStats::_internal_set_chunks_rewritten(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.chunks_rewritten_ = value;
}
inline void TraceStats_BufferStats::set_chunks_rewritten(uint64_t value) {
  _internal_set_chunks_rewritten(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_rewritten)
}

// optional uint64 chunks_overwritten = 3;
inline bool TraceStats_BufferStats::_internal_has_chunks_overwritten() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_chunks_overwritten() const {
  return _internal_has_chunks_overwritten();
}
inline void TraceStats_BufferStats::clear_chunks_overwritten() {
  _impl_.chunks_overwritten_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t TraceStats_BufferStats::_internal_chunks_overwritten() const {
  return _impl_.chunks_overwritten_;
}
inline uint64_t TraceStats_BufferStats::chunks_overwritten() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_overwritten)
  return _internal_chunks_overwritten();
}
inline void TraceStats_BufferStats::_internal_set_chunks_overwritten(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chunks_overwritten_ = value;
}
inline void TraceStats_BufferStats::set_chunks_overwritten(uint64_t value) {
  _internal_set_chunks_overwritten(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_overwritten)
}

// optional uint64 chunks_discarded = 18;
inline bool TraceStats_BufferStats::_internal_has_chunks_discarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_chunks_discarded() const {
  return _internal_has_chunks_discarded();
}
inline void TraceStats_BufferStats::clear_chunks_discarded() {
  _impl_.chunks_discarded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint64_t TraceStats_BufferStats::_internal_chunks_discarded() const {
  return _impl_.chunks_discarded_;
}
inline uint64_t TraceStats_BufferStats::chunks_discarded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_discarded)
  return _internal_chunks_discarded();
}
inline void TraceStats_BufferStats::_internal_set_chunks_discarded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.chunks_discarded_ = value;
}
inline void TraceStats_BufferStats::set_chunks_discarded(uint64_t value) {
  _internal_set_chunks_discarded(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_discarded)
}

// optional uint64 chunks_read = 17;
inline bool TraceStats_BufferStats::_internal_has_chunks_read() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_chunks_read() const {
  return _internal_has_chunks_read();
}
inline void TraceStats_BufferStats::clear_chunks_read() {
  _impl_.chunks_read_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint64_t TraceStats_BufferStats::_internal_chunks_read() const {
  return _impl_.chunks_read_;
}
inline uint64_t TraceStats_BufferStats::chunks_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_read)
  return _internal_chunks_read();
}
inline void TraceStats_BufferStats::_internal_set_chunks_read(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.chunks_read_ = value;
}
inline void TraceStats_BufferStats::set_chunks_read(uint64_t value) {
  _internal_set_chunks_read(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_read)
}

// optional uint64 chunks_committed_out_of_order = 11;
inline bool TraceStats_BufferStats::_internal_has_chunks_committed_out_of_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_chunks_committed_out_of_order() const {
  return _internal_has_chunks_committed_out_of_order();
}
inline void TraceStats_BufferStats::clear_chunks_committed_out_of_order() {
  _impl_.chunks_committed_out_of_order_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t TraceStats_BufferStats::_internal_chunks_committed_out_of_order() const {
  return _impl_.chunks_committed_out_of_order_;
}
inline uint64_t TraceStats_BufferStats::chunks_committed_out_of_order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.chunks_committed_out_of_order)
  return _internal_chunks_committed_out_of_order();
}
inline void TraceStats_BufferStats::_internal_set_chunks_committed_out_of_order(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.chunks_committed_out_of_order_ = value;
}
inline void TraceStats_BufferStats::set_chunks_committed_out_of_order(uint64_t value) {
  _internal_set_chunks_committed_out_of_order(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.chunks_committed_out_of_order)
}

// optional uint64 write_wrap_count = 4;
inline bool TraceStats_BufferStats::_internal_has_write_wrap_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_write_wrap_count() const {
  return _internal_has_write_wrap_count();
}
inline void TraceStats_BufferStats::clear_write_wrap_count() {
  _impl_.write_wrap_count_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t TraceStats_BufferStats::_internal_write_wrap_count() const {
  return _impl_.write_wrap_count_;
}
inline uint64_t TraceStats_BufferStats::write_wrap_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.write_wrap_count)
  return _internal_write_wrap_count();
}
inline void TraceStats_BufferStats::_internal_set_write_wrap_count(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.write_wrap_count_ = value;
}
inline void TraceStats_BufferStats::set_write_wrap_count(uint64_t value) {
  _internal_set_write_wrap_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.write_wrap_count)
}

// optional uint64 patches_succeeded = 5;
inline bool TraceStats_BufferStats::_internal_has_patches_succeeded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_patches_succeeded() const {
  return _internal_has_patches_succeeded();
}
inline void TraceStats_BufferStats::clear_patches_succeeded() {
  _impl_.patches_succeeded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t TraceStats_BufferStats::_internal_patches_succeeded() const {
  return _impl_.patches_succeeded_;
}
inline uint64_t TraceStats_BufferStats::patches_succeeded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.patches_succeeded)
  return _internal_patches_succeeded();
}
inline void TraceStats_BufferStats::_internal_set_patches_succeeded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.patches_succeeded_ = value;
}
inline void TraceStats_BufferStats::set_patches_succeeded(uint64_t value) {
  _internal_set_patches_succeeded(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.patches_succeeded)
}

// optional uint64 patches_failed = 6;
inline bool TraceStats_BufferStats::_internal_has_patches_failed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_patches_failed() const {
  return _internal_has_patches_failed();
}
inline void TraceStats_BufferStats::clear_patches_failed() {
  _impl_.patches_failed_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t TraceStats_BufferStats::_internal_patches_failed() const {
  return _impl_.patches_failed_;
}
inline uint64_t TraceStats_BufferStats::patches_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.patches_failed)
  return _internal_patches_failed();
}
inline void TraceStats_BufferStats::_internal_set_patches_failed(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.patches_failed_ = value;
}
inline void TraceStats_BufferStats::set_patches_failed(uint64_t value) {
  _internal_set_patches_failed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.patches_failed)
}

// optional uint64 readaheads_succeeded = 7;
inline bool TraceStats_BufferStats::_internal_has_readaheads_succeeded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_readaheads_succeeded() const {
  return _internal_has_readaheads_succeeded();
}
inline void TraceStats_BufferStats::clear_readaheads_succeeded() {
  _impl_.readaheads_succeeded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t TraceStats_BufferStats::_internal_readaheads_succeeded() const {
  return _impl_.readaheads_succeeded_;
}
inline uint64_t TraceStats_BufferStats::readaheads_succeeded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.readaheads_succeeded)
  return _internal_readaheads_succeeded();
}
inline void TraceStats_BufferStats::_internal_set_readaheads_succeeded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.readaheads_succeeded_ = value;
}
inline void TraceStats_BufferStats::set_readaheads_succeeded(uint64_t value) {
  _internal_set_readaheads_succeeded(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.readaheads_succeeded)
}

// optional uint64 readaheads_failed = 8;
inline bool TraceStats_BufferStats::_internal_has_readaheads_failed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_readaheads_failed() const {
  return _internal_has_readaheads_failed();
}
inline void TraceStats_BufferStats::clear_readaheads_failed() {
  _impl_.readaheads_failed_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t TraceStats_BufferStats::_internal_readaheads_failed() const {
  return _impl_.readaheads_failed_;
}
inline uint64_t TraceStats_BufferStats::readaheads_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.readaheads_failed)
  return _internal_readaheads_failed();
}
inline void TraceStats_BufferStats::_internal_set_readaheads_failed(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.readaheads_failed_ = value;
}
inline void TraceStats_BufferStats::set_readaheads_failed(uint64_t value) {
  _internal_set_readaheads_failed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.readaheads_failed)
}

// optional uint64 abi_violations = 9;
inline bool TraceStats_BufferStats::_internal_has_abi_violations() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_abi_violations() const {
  return _internal_has_abi_violations();
}
inline void TraceStats_BufferStats::clear_abi_violations() {
  _impl_.abi_violations_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t TraceStats_BufferStats::_internal_abi_violations() const {
  return _impl_.abi_violations_;
}
inline uint64_t TraceStats_BufferStats::abi_violations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.abi_violations)
  return _internal_abi_violations();
}
inline void TraceStats_BufferStats::_internal_set_abi_violations(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.abi_violations_ = value;
}
inline void TraceStats_BufferStats::set_abi_violations(uint64_t value) {
  _internal_set_abi_violations(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.abi_violations)
}

// optional uint64 trace_writer_packet_loss = 19;
inline bool TraceStats_BufferStats::_internal_has_trace_writer_packet_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TraceStats_BufferStats::has_trace_writer_packet_loss() const {
  return _internal_has_trace_writer_packet_loss();
}
inline void TraceStats_BufferStats::clear_trace_writer_packet_loss() {
  _impl_.trace_writer_packet_loss_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint64_t TraceStats_BufferStats::_internal_trace_writer_packet_loss() const {
  return _impl_.trace_writer_packet_loss_;
}
inline uint64_t TraceStats_BufferStats::trace_writer_packet_loss() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.BufferStats.trace_writer_packet_loss)
  return _internal_trace_writer_packet_loss();
}
inline void TraceStats_BufferStats::_internal_set_trace_writer_packet_loss(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.trace_writer_packet_loss_ = value;
}
inline void TraceStats_BufferStats::set_trace_writer_packet_loss(uint64_t value) {
  _internal_set_trace_writer_packet_loss(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.BufferStats.trace_writer_packet_loss)
}

// -------------------------------------------------------------------

// TraceStats_WriterStats

// optional uint64 sequence_id = 1;
inline bool TraceStats_WriterStats::_internal_has_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TraceStats_WriterStats::has_sequence_id() const {
  return _internal_has_sequence_id();
}
inline void TraceStats_WriterStats::clear_sequence_id() {
  _impl_.sequence_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TraceStats_WriterStats::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline uint64_t TraceStats_WriterStats::sequence_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.WriterStats.sequence_id)
  return _internal_sequence_id();
}
inline void TraceStats_WriterStats::_internal_set_sequence_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sequence_id_ = value;
}
inline void TraceStats_WriterStats::set_sequence_id(uint64_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.WriterStats.sequence_id)
}

// optional uint32 buffer = 4;
inline bool TraceStats_WriterStats::_internal_has_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TraceStats_WriterStats::has_buffer() const {
  return _internal_has_buffer();
}
inline void TraceStats_WriterStats::clear_buffer() {
  _impl_.buffer_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TraceStats_WriterStats::_internal_buffer() const {
  return _impl_.buffer_;
}
inline uint32_t TraceStats_WriterStats::buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.WriterStats.buffer)
  return _internal_buffer();
}
inline void TraceStats_WriterStats::_internal_set_buffer(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.buffer_ = value;
}
inline void TraceStats_WriterStats::set_buffer(uint32_t value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.WriterStats.buffer)
}

// repeated uint64 chunk_payload_histogram_counts = 2 [packed = true];
inline int TraceStats_WriterStats::_internal_chunk_payload_histogram_counts_size() const {
  return _impl_.chunk_payload_histogram_counts_.size();
}
inline int TraceStats_WriterStats::chunk_payload_histogram_counts_size() const {
  return _internal_chunk_payload_histogram_counts_size();
}
inline void TraceStats_WriterStats::clear_chunk_payload_histogram_counts() {
  _impl_.chunk_payload_histogram_counts_.Clear();
}
inline uint64_t TraceStats_WriterStats::_internal_chunk_payload_histogram_counts(int index) const {
  return _impl_.chunk_payload_histogram_counts_.Get(index);
}
inline uint64_t TraceStats_WriterStats::chunk_payload_histogram_counts(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_counts)
  return _internal_chunk_payload_histogram_counts(index);
}
inline void TraceStats_WriterStats::set_chunk_payload_histogram_counts(int index, uint64_t value) {
  _impl_.chunk_payload_histogram_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_counts)
}
inline void TraceStats_WriterStats::_internal_add_chunk_payload_histogram_counts(uint64_t value) {
  _impl_.chunk_payload_histogram_counts_.Add(value);
}
inline void TraceStats_WriterStats::add_chunk_payload_histogram_counts(uint64_t value) {
  _internal_add_chunk_payload_histogram_counts(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TraceStats_WriterStats::_internal_chunk_payload_histogram_counts() const {
  return _impl_.chunk_payload_histogram_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TraceStats_WriterStats::chunk_payload_histogram_counts() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_counts)
  return _internal_chunk_payload_histogram_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TraceStats_WriterStats::_internal_mutable_chunk_payload_histogram_counts() {
  return &_impl_.chunk_payload_histogram_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TraceStats_WriterStats::mutable_chunk_payload_histogram_counts() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_counts)
  return _internal_mutable_chunk_payload_histogram_counts();
}

// repeated int64 chunk_payload_histogram_sum = 3 [packed = true];
inline int TraceStats_WriterStats::_internal_chunk_payload_histogram_sum_size() const {
  return _impl_.chunk_payload_histogram_sum_.size();
}
inline int TraceStats_WriterStats::chunk_payload_histogram_sum_size() const {
  return _internal_chunk_payload_histogram_sum_size();
}
inline void TraceStats_WriterStats::clear_chunk_payload_histogram_sum() {
  _impl_.chunk_payload_histogram_sum_.Clear();
}
inline int64_t TraceStats_WriterStats::_internal_chunk_payload_histogram_sum(int index) const {
  return _impl_.chunk_payload_histogram_sum_.Get(index);
}
inline int64_t TraceStats_WriterStats::chunk_payload_histogram_sum(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_sum)
  return _internal_chunk_payload_histogram_sum(index);
}
inline void TraceStats_WriterStats::set_chunk_payload_histogram_sum(int index, int64_t value) {
  _impl_.chunk_payload_histogram_sum_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_sum)
}
inline void TraceStats_WriterStats::_internal_add_chunk_payload_histogram_sum(int64_t value) {
  _impl_.chunk_payload_histogram_sum_.Add(value);
}
inline void TraceStats_WriterStats::add_chunk_payload_histogram_sum(int64_t value) {
  _internal_add_chunk_payload_histogram_sum(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_sum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TraceStats_WriterStats::_internal_chunk_payload_histogram_sum() const {
  return _impl_.chunk_payload_histogram_sum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TraceStats_WriterStats::chunk_payload_histogram_sum() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_sum)
  return _internal_chunk_payload_histogram_sum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TraceStats_WriterStats::_internal_mutable_chunk_payload_histogram_sum() {
  return &_impl_.chunk_payload_histogram_sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TraceStats_WriterStats::mutable_chunk_payload_histogram_sum() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.WriterStats.chunk_payload_histogram_sum)
  return _internal_mutable_chunk_payload_histogram_sum();
}

// -------------------------------------------------------------------

// TraceStats_FilterStats

// optional uint64 input_packets = 1;
inline bool TraceStats_FilterStats::_internal_has_input_packets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TraceStats_FilterStats::has_input_packets() const {
  return _internal_has_input_packets();
}
inline void TraceStats_FilterStats::clear_input_packets() {
  _impl_.input_packets_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TraceStats_FilterStats::_internal_input_packets() const {
  return _impl_.input_packets_;
}
inline uint64_t TraceStats_FilterStats::input_packets() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.FilterStats.input_packets)
  return _internal_input_packets();
}
inline void TraceStats_FilterStats::_internal_set_input_packets(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_packets_ = value;
}
inline void TraceStats_FilterStats::set_input_packets(uint64_t value) {
  _internal_set_input_packets(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.FilterStats.input_packets)
}

// optional uint64 input_bytes = 2;
inline bool TraceStats_FilterStats::_internal_has_input_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TraceStats_FilterStats::has_input_bytes() const {
  return _internal_has_input_bytes();
}
inline void TraceStats_FilterStats::clear_input_bytes() {
  _impl_.input_bytes_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TraceStats_FilterStats::_internal_input_bytes() const {
  return _impl_.input_bytes_;
}
inline uint64_t TraceStats_FilterStats::input_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.FilterStats.input_bytes)
  return _internal_input_bytes();
}
inline void TraceStats_FilterStats::_internal_set_input_bytes(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.input_bytes_ = value;
}
inline void TraceStats_FilterStats::set_input_bytes(uint64_t value) {
  _internal_set_input_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.FilterStats.input_bytes)
}

// optional uint64 output_bytes = 3;
inline bool TraceStats_FilterStats::_internal_has_output_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TraceStats_FilterStats::has_output_bytes() const {
  return _internal_has_output_bytes();
}
inline void TraceStats_FilterStats::clear_output_bytes() {
  _impl_.output_bytes_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t TraceStats_FilterStats::_internal_output_bytes() const {
  return _impl_.output_bytes_;
}
inline uint64_t TraceStats_FilterStats::output_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.FilterStats.output_bytes)
  return _internal_output_bytes();
}
inline void TraceStats_FilterStats::_internal_set_output_bytes(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.output_bytes_ = value;
}
inline void TraceStats_FilterStats::set_output_bytes(uint64_t value) {
  _internal_set_output_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.FilterStats.output_bytes)
}

// optional uint64 errors = 4;
inline bool TraceStats_FilterStats::_internal_has_errors() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TraceStats_FilterStats::has_errors() const {
  return _internal_has_errors();
}
inline void TraceStats_FilterStats::clear_errors() {
  _impl_.errors_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t TraceStats_FilterStats::_internal_errors() const {
  return _impl_.errors_;
}
inline uint64_t TraceStats_FilterStats::errors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.FilterStats.errors)
  return _internal_errors();
}
inline void TraceStats_FilterStats::_internal_set_errors(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.errors_ = value;
}
inline void TraceStats_FilterStats::set_errors(uint64_t value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.FilterStats.errors)
}

// optional uint64 time_taken_ns = 5;
inline bool TraceStats_FilterStats::_internal_has_time_taken_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TraceStats_FilterStats::has_time_taken_ns() const {
  return _internal_has_time_taken_ns();
}
inline void TraceStats_FilterStats::clear_time_taken_ns() {
  _impl_.time_taken_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t TraceStats_FilterStats::_internal_time_taken_ns() const {
  return _impl_.time_taken_ns_;
}
inline uint64_t TraceStats_FilterStats::time_taken_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.FilterStats.time_taken_ns)
  return _internal_time_taken_ns();
}
inline void TraceStats_FilterStats::_internal_set_time_taken_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.time_taken_ns_ = value;
}
inline void TraceStats_FilterStats::set_time_taken_ns(uint64_t value) {
  _internal_set_time_taken_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.FilterStats.time_taken_ns)
}

// repeated uint64 bytes_discarded_per_buffer = 20;
inline int TraceStats_FilterStats::_internal_bytes_discarded_per_buffer_size() const {
  return _impl_.bytes_discarded_per_buffer_.size();
}
inline int TraceStats_FilterStats::bytes_discarded_per_buffer_size() const {
  return _internal_bytes_discarded_per_buffer_size();
}
inline void TraceStats_FilterStats::clear_bytes_discarded_per_buffer() {
  _impl_.bytes_discarded_per_buffer_.Clear();
}
inline uint64_t TraceStats_FilterStats::_internal_bytes_discarded_per_buffer(int index) const {
  return _impl_.bytes_discarded_per_buffer_.Get(index);
}
inline uint64_t TraceStats_FilterStats::bytes_discarded_per_buffer(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.FilterStats.bytes_discarded_per_buffer)
  return _internal_bytes_discarded_per_buffer(index);
}
inline void TraceStats_FilterStats::set_bytes_discarded_per_buffer(int index, uint64_t value) {
  _impl_.bytes_discarded_per_buffer_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.FilterStats.bytes_discarded_per_buffer)
}
inline void TraceStats_FilterStats::_internal_add_bytes_discarded_per_buffer(uint64_t value) {
  _impl_.bytes_discarded_per_buffer_.Add(value);
}
inline void TraceStats_FilterStats::add_bytes_discarded_per_buffer(uint64_t value) {
  _internal_add_bytes_discarded_per_buffer(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.FilterStats.bytes_discarded_per_buffer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TraceStats_FilterStats::_internal_bytes_discarded_per_buffer() const {
  return _impl_.bytes_discarded_per_buffer_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TraceStats_FilterStats::bytes_discarded_per_buffer() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.FilterStats.bytes_discarded_per_buffer)
  return _internal_bytes_discarded_per_buffer();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TraceStats_FilterStats::_internal_mutable_bytes_discarded_per_buffer() {
  return &_impl_.bytes_discarded_per_buffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TraceStats_FilterStats::mutable_bytes_discarded_per_buffer() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.FilterStats.bytes_discarded_per_buffer)
  return _internal_mutable_bytes_discarded_per_buffer();
}

// -------------------------------------------------------------------

// TraceStats

// repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
inline int TraceStats::_internal_buffer_stats_size() const {
  return _impl_.buffer_stats_.size();
}
inline int TraceStats::buffer_stats_size() const {
  return _internal_buffer_stats_size();
}
inline void TraceStats::clear_buffer_stats() {
  _impl_.buffer_stats_.Clear();
}
inline ::perfetto::protos::TraceStats_BufferStats* TraceStats::mutable_buffer_stats(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceStats.buffer_stats)
  return _impl_.buffer_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >*
TraceStats::mutable_buffer_stats() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.buffer_stats)
  return &_impl_.buffer_stats_;
}
inline const ::perfetto::protos::TraceStats_BufferStats& TraceStats::_internal_buffer_stats(int index) const {
  return _impl_.buffer_stats_.Get(index);
}
inline const ::perfetto::protos::TraceStats_BufferStats& TraceStats::buffer_stats(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.buffer_stats)
  return _internal_buffer_stats(index);
}
inline ::perfetto::protos::TraceStats_BufferStats* TraceStats::_internal_add_buffer_stats() {
  return _impl_.buffer_stats_.Add();
}
inline ::perfetto::protos::TraceStats_BufferStats* TraceStats::add_buffer_stats() {
  ::perfetto::protos::TraceStats_BufferStats* _add = _internal_add_buffer_stats();
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.buffer_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_BufferStats >&
TraceStats::buffer_stats() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.buffer_stats)
  return _impl_.buffer_stats_;
}

// repeated int64 chunk_payload_histogram_def = 17;
inline int TraceStats::_internal_chunk_payload_histogram_def_size() const {
  return _impl_.chunk_payload_histogram_def_.size();
}
inline int TraceStats::chunk_payload_histogram_def_size() const {
  return _internal_chunk_payload_histogram_def_size();
}
inline void TraceStats::clear_chunk_payload_histogram_def() {
  _impl_.chunk_payload_histogram_def_.Clear();
}
inline int64_t TraceStats::_internal_chunk_payload_histogram_def(int index) const {
  return _impl_.chunk_payload_histogram_def_.Get(index);
}
inline int64_t TraceStats::chunk_payload_histogram_def(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.chunk_payload_histogram_def)
  return _internal_chunk_payload_histogram_def(index);
}
inline void TraceStats::set_chunk_payload_histogram_def(int index, int64_t value) {
  _impl_.chunk_payload_histogram_def_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.chunk_payload_histogram_def)
}
inline void TraceStats::_internal_add_chunk_payload_histogram_def(int64_t value) {
  _impl_.chunk_payload_histogram_def_.Add(value);
}
inline void TraceStats::add_chunk_payload_histogram_def(int64_t value) {
  _internal_add_chunk_payload_histogram_def(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.chunk_payload_histogram_def)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TraceStats::_internal_chunk_payload_histogram_def() const {
  return _impl_.chunk_payload_histogram_def_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TraceStats::chunk_payload_histogram_def() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.chunk_payload_histogram_def)
  return _internal_chunk_payload_histogram_def();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TraceStats::_internal_mutable_chunk_payload_histogram_def() {
  return &_impl_.chunk_payload_histogram_def_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TraceStats::mutable_chunk_payload_histogram_def() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.chunk_payload_histogram_def)
  return _internal_mutable_chunk_payload_histogram_def();
}

// repeated .perfetto.protos.TraceStats.WriterStats writer_stats = 18;
inline int TraceStats::_internal_writer_stats_size() const {
  return _impl_.writer_stats_.size();
}
inline int TraceStats::writer_stats_size() const {
  return _internal_writer_stats_size();
}
inline void TraceStats::clear_writer_stats() {
  _impl_.writer_stats_.Clear();
}
inline ::perfetto::protos::TraceStats_WriterStats* TraceStats::mutable_writer_stats(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceStats.writer_stats)
  return _impl_.writer_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_WriterStats >*
TraceStats::mutable_writer_stats() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceStats.writer_stats)
  return &_impl_.writer_stats_;
}
inline const ::perfetto::protos::TraceStats_WriterStats& TraceStats::_internal_writer_stats(int index) const {
  return _impl_.writer_stats_.Get(index);
}
inline const ::perfetto::protos::TraceStats_WriterStats& TraceStats::writer_stats(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.writer_stats)
  return _internal_writer_stats(index);
}
inline ::perfetto::protos::TraceStats_WriterStats* TraceStats::_internal_add_writer_stats() {
  return _impl_.writer_stats_.Add();
}
inline ::perfetto::protos::TraceStats_WriterStats* TraceStats::add_writer_stats() {
  ::perfetto::protos::TraceStats_WriterStats* _add = _internal_add_writer_stats();
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceStats.writer_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceStats_WriterStats >&
TraceStats::writer_stats() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceStats.writer_stats)
  return _impl_.writer_stats_;
}

// optional uint32 producers_connected = 2;
inline bool TraceStats::_internal_has_producers_connected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TraceStats::has_producers_connected() const {
  return _internal_has_producers_connected();
}
inline void TraceStats::clear_producers_connected() {
  _impl_.producers_connected_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TraceStats::_internal_producers_connected() const {
  return _impl_.producers_connected_;
}
inline uint32_t TraceStats::producers_connected() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.producers_connected)
  return _internal_producers_connected();
}
inline void TraceStats::_internal_set_producers_connected(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.producers_connected_ = value;
}
inline void TraceStats::set_producers_connected(uint32_t value) {
  _internal_set_producers_connected(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.producers_connected)
}

// optional uint64 producers_seen = 3;
inline bool TraceStats::_internal_has_producers_seen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TraceStats::has_producers_seen() const {
  return _internal_has_producers_seen();
}
inline void TraceStats::clear_producers_seen() {
  _impl_.producers_seen_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TraceStats::_internal_producers_seen() const {
  return _impl_.producers_seen_;
}
inline uint64_t TraceStats::producers_seen() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.producers_seen)
  return _internal_producers_seen();
}
inline void TraceStats::_internal_set_producers_seen(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.producers_seen_ = value;
}
inline void TraceStats::set_producers_seen(uint64_t value) {
  _internal_set_producers_seen(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.producers_seen)
}

// optional uint32 data_sources_registered = 4;
inline bool TraceStats::_internal_has_data_sources_registered() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TraceStats::has_data_sources_registered() const {
  return _internal_has_data_sources_registered();
}
inline void TraceStats::clear_data_sources_registered() {
  _impl_.data_sources_registered_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t TraceStats::_internal_data_sources_registered() const {
  return _impl_.data_sources_registered_;
}
inline uint32_t TraceStats::data_sources_registered() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.data_sources_registered)
  return _internal_data_sources_registered();
}
inline void TraceStats::_internal_set_data_sources_registered(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_sources_registered_ = value;
}
inline void TraceStats::set_data_sources_registered(uint32_t value) {
  _internal_set_data_sources_registered(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.data_sources_registered)
}

// optional uint64 data_sources_seen = 5;
inline bool TraceStats::_internal_has_data_sources_seen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TraceStats::has_data_sources_seen() const {
  return _internal_has_data_sources_seen();
}
inline void TraceStats::clear_data_sources_seen() {
  _impl_.data_sources_seen_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t TraceStats::_internal_data_sources_seen() const {
  return _impl_.data_sources_seen_;
}
inline uint64_t TraceStats::data_sources_seen() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.data_sources_seen)
  return _internal_data_sources_seen();
}
inline void TraceStats::_internal_set_data_sources_seen(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.data_sources_seen_ = value;
}
inline void TraceStats::set_data_sources_seen(uint64_t value) {
  _internal_set_data_sources_seen(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.data_sources_seen)
}

// optional uint32 tracing_sessions = 6;
inline bool TraceStats::_internal_has_tracing_sessions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TraceStats::has_tracing_sessions() const {
  return _internal_has_tracing_sessions();
}
inline void TraceStats::clear_tracing_sessions() {
  _impl_.tracing_sessions_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t TraceStats::_internal_tracing_sessions() const {
  return _impl_.tracing_sessions_;
}
inline uint32_t TraceStats::tracing_sessions() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.tracing_sessions)
  return _internal_tracing_sessions();
}
inline void TraceStats::_internal_set_tracing_sessions(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tracing_sessions_ = value;
}
inline void TraceStats::set_tracing_sessions(uint32_t value) {
  _internal_set_tracing_sessions(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.tracing_sessions)
}

// optional uint32 total_buffers = 7;
inline bool TraceStats::_internal_has_total_buffers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TraceStats::has_total_buffers() const {
  return _internal_has_total_buffers();
}
inline void TraceStats::clear_total_buffers() {
  _impl_.total_buffers_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t TraceStats::_internal_total_buffers() const {
  return _impl_.total_buffers_;
}
inline uint32_t TraceStats::total_buffers() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.total_buffers)
  return _internal_total_buffers();
}
inline void TraceStats::_internal_set_total_buffers(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.total_buffers_ = value;
}
inline void TraceStats::set_total_buffers(uint32_t value) {
  _internal_set_total_buffers(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.total_buffers)
}

// optional uint64 chunks_discarded = 8;
inline bool TraceStats::_internal_has_chunks_discarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TraceStats::has_chunks_discarded() const {
  return _internal_has_chunks_discarded();
}
inline void TraceStats::clear_chunks_discarded() {
  _impl_.chunks_discarded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t TraceStats::_internal_chunks_discarded() const {
  return _impl_.chunks_discarded_;
}
inline uint64_t TraceStats::chunks_discarded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.chunks_discarded)
  return _internal_chunks_discarded();
}
inline void TraceStats::_internal_set_chunks_discarded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.chunks_discarded_ = value;
}
inline void TraceStats::set_chunks_discarded(uint64_t value) {
  _internal_set_chunks_discarded(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.chunks_discarded)
}

// optional uint64 patches_discarded = 9;
inline bool TraceStats::_internal_has_patches_discarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TraceStats::has_patches_discarded() const {
  return _internal_has_patches_discarded();
}
inline void TraceStats::clear_patches_discarded() {
  _impl_.patches_discarded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t TraceStats::_internal_patches_discarded() const {
  return _impl_.patches_discarded_;
}
inline uint64_t TraceStats::patches_discarded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.patches_discarded)
  return _internal_patches_discarded();
}
inline void TraceStats::_internal_set_patches_discarded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.patches_discarded_ = value;
}
inline void TraceStats::set_patches_discarded(uint64_t value) {
  _internal_set_patches_discarded(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.patches_discarded)
}

// optional uint64 invalid_packets = 10;
inline bool TraceStats::_internal_has_invalid_packets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TraceStats::has_invalid_packets() const {
  return _internal_has_invalid_packets();
}
inline void TraceStats::clear_invalid_packets() {
  _impl_.invalid_packets_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t TraceStats::_internal_invalid_packets() const {
  return _impl_.invalid_packets_;
}
inline uint64_t TraceStats::invalid_packets() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.invalid_packets)
  return _internal_invalid_packets();
}
inline void TraceStats::_internal_set_invalid_packets(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.invalid_packets_ = value;
}
inline void TraceStats::set_invalid_packets(uint64_t value) {
  _internal_set_invalid_packets(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.invalid_packets)
}

// optional .perfetto.protos.TraceStats.FilterStats filter_stats = 11;
inline bool TraceStats::_internal_has_filter_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_stats_ != nullptr);
  return value;
}
inline bool TraceStats::has_filter_stats() const {
  return _internal_has_filter_stats();
}
inline void TraceStats::clear_filter_stats() {
  if (_impl_.filter_stats_ != nullptr) _impl_.filter_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::TraceStats_FilterStats& TraceStats::_internal_filter_stats() const {
  const ::perfetto::protos::TraceStats_FilterStats* p = _impl_.filter_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceStats_FilterStats&>(
      ::perfetto::protos::_TraceStats_FilterStats_default_instance_);
}
inline const ::perfetto::protos::TraceStats_FilterStats& TraceStats::filter_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.filter_stats)
  return _internal_filter_stats();
}
inline void TraceStats::unsafe_arena_set_allocated_filter_stats(
    ::perfetto::protos::TraceStats_FilterStats* filter_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_stats_);
  }
  _impl_.filter_stats_ = filter_stats;
  if (filter_stats) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceStats.filter_stats)
}
inline ::perfetto::protos::TraceStats_FilterStats* TraceStats::release_filter_stats() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TraceStats_FilterStats* temp = _impl_.filter_stats_;
  _impl_.filter_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceStats_FilterStats* TraceStats::unsafe_arena_release_filter_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceStats.filter_stats)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TraceStats_FilterStats* temp = _impl_.filter_stats_;
  _impl_.filter_stats_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceStats_FilterStats* TraceStats::_internal_mutable_filter_stats() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filter_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceStats_FilterStats>(GetArenaForAllocation());
    _impl_.filter_stats_ = p;
  }
  return _impl_.filter_stats_;
}
inline ::perfetto::protos::TraceStats_FilterStats* TraceStats::mutable_filter_stats() {
  ::perfetto::protos::TraceStats_FilterStats* _msg = _internal_mutable_filter_stats();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceStats.filter_stats)
  return _msg;
}
inline void TraceStats::set_allocated_filter_stats(::perfetto::protos::TraceStats_FilterStats* filter_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filter_stats_;
  }
  if (filter_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter_stats);
    if (message_arena != submessage_arena) {
      filter_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filter_stats_ = filter_stats;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceStats.filter_stats)
}

// optional uint64 flushes_requested = 12;
inline bool TraceStats::_internal_has_flushes_requested() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TraceStats::has_flushes_requested() const {
  return _internal_has_flushes_requested();
}
inline void TraceStats::clear_flushes_requested() {
  _impl_.flushes_requested_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t TraceStats::_internal_flushes_requested() const {
  return _impl_.flushes_requested_;
}
inline uint64_t TraceStats::flushes_requested() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.flushes_requested)
  return _internal_flushes_requested();
}
inline void TraceStats::_internal_set_flushes_requested(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.flushes_requested_ = value;
}
inline void TraceStats::set_flushes_requested(uint64_t value) {
  _internal_set_flushes_requested(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.flushes_requested)
}

// optional uint64 flushes_succeeded = 13;
inline bool TraceStats::_internal_has_flushes_succeeded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TraceStats::has_flushes_succeeded() const {
  return _internal_has_flushes_succeeded();
}
inline void TraceStats::clear_flushes_succeeded() {
  _impl_.flushes_succeeded_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t TraceStats::_internal_flushes_succeeded() const {
  return _impl_.flushes_succeeded_;
}
inline uint64_t TraceStats::flushes_succeeded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.flushes_succeeded)
  return _internal_flushes_succeeded();
}
inline void TraceStats::_internal_set_flushes_succeeded(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.flushes_succeeded_ = value;
}
inline void TraceStats::set_flushes_succeeded(uint64_t value) {
  _internal_set_flushes_succeeded(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.flushes_succeeded)
}

// optional uint64 flushes_failed = 14;
inline bool TraceStats::_internal_has_flushes_failed() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TraceStats::has_flushes_failed() const {
  return _internal_has_flushes_failed();
}
inline void TraceStats::clear_flushes_failed() {
  _impl_.flushes_failed_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t TraceStats::_internal_flushes_failed() const {
  return _impl_.flushes_failed_;
}
inline uint64_t TraceStats::flushes_failed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.flushes_failed)
  return _internal_flushes_failed();
}
inline void TraceStats::_internal_set_flushes_failed(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.flushes_failed_ = value;
}
inline void TraceStats::set_flushes_failed(uint64_t value) {
  _internal_set_flushes_failed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.flushes_failed)
}

// optional .perfetto.protos.TraceStats.FinalFlushOutcome final_flush_outcome = 15;
inline bool TraceStats::_internal_has_final_flush_outcome() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TraceStats::has_final_flush_outcome() const {
  return _internal_has_final_flush_outcome();
}
inline void TraceStats::clear_final_flush_outcome() {
  _impl_.final_flush_outcome_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::perfetto::protos::TraceStats_FinalFlushOutcome TraceStats::_internal_final_flush_outcome() const {
  return static_cast< ::perfetto::protos::TraceStats_FinalFlushOutcome >(_impl_.final_flush_outcome_);
}
inline ::perfetto::protos::TraceStats_FinalFlushOutcome TraceStats::final_flush_outcome() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceStats.final_flush_outcome)
  return _internal_final_flush_outcome();
}
inline void TraceStats::_internal_set_final_flush_outcome(::perfetto::protos::TraceStats_FinalFlushOutcome value) {
  assert(::perfetto::protos::TraceStats_FinalFlushOutcome_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.final_flush_outcome_ = value;
}
inline void TraceStats::set_final_flush_outcome(::perfetto::protos::TraceStats_FinalFlushOutcome value) {
  _internal_set_final_flush_outcome(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceStats.final_flush_outcome)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::TraceStats_FinalFlushOutcome> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto
