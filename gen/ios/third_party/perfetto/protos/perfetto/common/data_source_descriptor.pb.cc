// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/data_source_descriptor.proto

#include "protos/perfetto/common/data_source_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR DataSourceDescriptor::DataSourceDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gpu_counter_descriptor_)*/nullptr
  , /*decltype(_impl_.track_event_descriptor_)*/nullptr
  , /*decltype(_impl_.ftrace_descriptor_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.will_notify_on_stop_)*/false
  , /*decltype(_impl_.will_notify_on_start_)*/false
  , /*decltype(_impl_.handles_incremental_state_clear_)*/false
  , /*decltype(_impl_.no_flush_)*/false} {}
struct DataSourceDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataSourceDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataSourceDescriptorDefaultTypeInternal() {}
  union {
    DataSourceDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataSourceDescriptorDefaultTypeInternal _DataSourceDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class DataSourceDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSourceDescriptor>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_will_notify_on_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_will_notify_on_start(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_handles_incremental_state_clear(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_no_flush(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::GpuCounterDescriptor& gpu_counter_descriptor(const DataSourceDescriptor* msg);
  static void set_has_gpu_counter_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::TrackEventDescriptor& track_event_descriptor(const DataSourceDescriptor* msg);
  static void set_has_track_event_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::FtraceDescriptor& ftrace_descriptor(const DataSourceDescriptor* msg);
  static void set_has_ftrace_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::perfetto::protos::GpuCounterDescriptor&
DataSourceDescriptor::_Internal::gpu_counter_descriptor(const DataSourceDescriptor* msg) {
  return *msg->_impl_.gpu_counter_descriptor_;
}
const ::perfetto::protos::TrackEventDescriptor&
DataSourceDescriptor::_Internal::track_event_descriptor(const DataSourceDescriptor* msg) {
  return *msg->_impl_.track_event_descriptor_;
}
const ::perfetto::protos::FtraceDescriptor&
DataSourceDescriptor::_Internal::ftrace_descriptor(const DataSourceDescriptor* msg) {
  return *msg->_impl_.ftrace_descriptor_;
}
void DataSourceDescriptor::clear_gpu_counter_descriptor() {
  if (_impl_.gpu_counter_descriptor_ != nullptr) _impl_.gpu_counter_descriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DataSourceDescriptor::clear_track_event_descriptor() {
  if (_impl_.track_event_descriptor_ != nullptr) _impl_.track_event_descriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DataSourceDescriptor::clear_ftrace_descriptor() {
  if (_impl_.ftrace_descriptor_ != nullptr) _impl_.ftrace_descriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
DataSourceDescriptor::DataSourceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DataSourceDescriptor)
}
DataSourceDescriptor::DataSourceDescriptor(const DataSourceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DataSourceDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.gpu_counter_descriptor_){nullptr}
    , decltype(_impl_.track_event_descriptor_){nullptr}
    , decltype(_impl_.ftrace_descriptor_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.will_notify_on_stop_){}
    , decltype(_impl_.will_notify_on_start_){}
    , decltype(_impl_.handles_incremental_state_clear_){}
    , decltype(_impl_.no_flush_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_gpu_counter_descriptor()) {
    _this->_impl_.gpu_counter_descriptor_ = new ::perfetto::protos::GpuCounterDescriptor(*from._impl_.gpu_counter_descriptor_);
  }
  if (from._internal_has_track_event_descriptor()) {
    _this->_impl_.track_event_descriptor_ = new ::perfetto::protos::TrackEventDescriptor(*from._impl_.track_event_descriptor_);
  }
  if (from._internal_has_ftrace_descriptor()) {
    _this->_impl_.ftrace_descriptor_ = new ::perfetto::protos::FtraceDescriptor(*from._impl_.ftrace_descriptor_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.no_flush_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.no_flush_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DataSourceDescriptor)
}

inline void DataSourceDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.gpu_counter_descriptor_){nullptr}
    , decltype(_impl_.track_event_descriptor_){nullptr}
    , decltype(_impl_.ftrace_descriptor_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.will_notify_on_stop_){false}
    , decltype(_impl_.will_notify_on_start_){false}
    , decltype(_impl_.handles_incremental_state_clear_){false}
    , decltype(_impl_.no_flush_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataSourceDescriptor::~DataSourceDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DataSourceDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataSourceDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.gpu_counter_descriptor_;
  if (this != internal_default_instance()) delete _impl_.track_event_descriptor_;
  if (this != internal_default_instance()) delete _impl_.ftrace_descriptor_;
}

void DataSourceDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataSourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DataSourceDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gpu_counter_descriptor_ != nullptr);
      _impl_.gpu_counter_descriptor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.track_event_descriptor_ != nullptr);
      _impl_.track_event_descriptor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.ftrace_descriptor_ != nullptr);
      _impl_.ftrace_descriptor_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.handles_incremental_state_clear_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.handles_incremental_state_clear_));
  }
  _impl_.no_flush_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DataSourceDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool will_notify_on_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_will_notify_on_stop(&has_bits);
          _impl_.will_notify_on_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool will_notify_on_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_will_notify_on_start(&has_bits);
          _impl_.will_notify_on_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool handles_incremental_state_clear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_handles_incremental_state_clear(&has_bits);
          _impl_.handles_incremental_state_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_counter_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_event_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ftrace_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool no_flush = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_no_flush(&has_bits);
          _impl_.no_flush_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataSourceDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DataSourceDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool will_notify_on_stop = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_will_notify_on_stop(), target);
  }

  // optional bool will_notify_on_start = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_will_notify_on_start(), target);
  }

  // optional bool handles_incremental_state_clear = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_handles_incremental_state_clear(), target);
  }

  // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gpu_counter_descriptor(this),
        _Internal::gpu_counter_descriptor(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::track_event_descriptor(this),
        _Internal::track_event_descriptor(this).GetCachedSize(), target, stream);
  }

  // optional uint64 id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_id(), target);
  }

  // optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ftrace_descriptor(this),
        _Internal::ftrace_descriptor(this).GetCachedSize(), target, stream);
  }

  // optional bool no_flush = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_no_flush(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DataSourceDescriptor)
  return target;
}

size_t DataSourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DataSourceDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .perfetto.protos.GpuCounterDescriptor gpu_counter_descriptor = 5 [lazy = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gpu_counter_descriptor_);
    }

    // optional .perfetto.protos.TrackEventDescriptor track_event_descriptor = 6 [lazy = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.track_event_descriptor_);
    }

    // optional .perfetto.protos.FtraceDescriptor ftrace_descriptor = 8 [lazy = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ftrace_descriptor_);
    }

    // optional uint64 id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional bool will_notify_on_stop = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool will_notify_on_start = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool handles_incremental_state_clear = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool no_flush = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DataSourceDescriptor*>(
      &from));
}

void DataSourceDescriptor::MergeFrom(const DataSourceDescriptor& from) {
  DataSourceDescriptor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DataSourceDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gpu_counter_descriptor()->::perfetto::protos::GpuCounterDescriptor::MergeFrom(
          from._internal_gpu_counter_descriptor());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_track_event_descriptor()->::perfetto::protos::TrackEventDescriptor::MergeFrom(
          from._internal_track_event_descriptor());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_ftrace_descriptor()->::perfetto::protos::FtraceDescriptor::MergeFrom(
          from._internal_ftrace_descriptor());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.will_notify_on_stop_ = from._impl_.will_notify_on_stop_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.will_notify_on_start_ = from._impl_.will_notify_on_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.handles_incremental_state_clear_ = from._impl_.handles_incremental_state_clear_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_no_flush(from._internal_no_flush());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DataSourceDescriptor::CopyFrom(const DataSourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DataSourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceDescriptor::IsInitialized() const {
  return true;
}

void DataSourceDescriptor::InternalSwap(DataSourceDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataSourceDescriptor, _impl_.no_flush_)
      + sizeof(DataSourceDescriptor::_impl_.no_flush_)
      - PROTOBUF_FIELD_OFFSET(DataSourceDescriptor, _impl_.gpu_counter_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.gpu_counter_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.gpu_counter_descriptor_));
}

std::string DataSourceDescriptor::GetTypeName() const {
  return "perfetto.protos.DataSourceDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::DataSourceDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::DataSourceDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DataSourceDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
