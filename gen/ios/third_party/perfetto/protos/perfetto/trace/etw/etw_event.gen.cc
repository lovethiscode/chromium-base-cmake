#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/etw/etw_event.gen.h"
#include "protos/perfetto/trace/etw/etw.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

EtwTraceEvent::EtwTraceEvent() = default;
EtwTraceEvent::~EtwTraceEvent() = default;
EtwTraceEvent::EtwTraceEvent(const EtwTraceEvent&) = default;
EtwTraceEvent& EtwTraceEvent::operator=(const EtwTraceEvent&) = default;
EtwTraceEvent::EtwTraceEvent(EtwTraceEvent&&) noexcept = default;
EtwTraceEvent& EtwTraceEvent::operator=(EtwTraceEvent&&) = default;

bool EtwTraceEvent::operator==(const EtwTraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_, other.cpu_)
   && ::protozero::internal::gen_helpers::EqualsField(c_switch_, other.c_switch_)
   && ::protozero::internal::gen_helpers::EqualsField(ready_thread_, other.ready_thread_);
}

bool EtwTraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 4 /* cpu */:
        field.get(&cpu_);
        break;
      case 2 /* c_switch */:
        (*c_switch_).ParseFromArray(field.data(), field.size());
        break;
      case 3 /* ready_thread */:
        (*ready_thread_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string EtwTraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> EtwTraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void EtwTraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: timestamp
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, timestamp_, msg);
  }

  // Field 4: cpu
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, cpu_, msg);
  }

  // Field 2: c_switch
  if (_has_field_[2]) {
    (*c_switch_).Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: ready_thread
  if (_has_field_[3]) {
    (*ready_thread_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
