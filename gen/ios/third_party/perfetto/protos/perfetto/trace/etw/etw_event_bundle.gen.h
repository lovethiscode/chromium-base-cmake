// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ETW_ETW_EVENT_BUNDLE_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ETW_ETW_EVENT_BUNDLE_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class EtwTraceEventBundle;
class EtwTraceEvent;
class ReadyThreadEtwEvent;
class CSwitchEtwEvent;
enum ReadyThreadEtwEvent_AdjustReason : int;
enum ReadyThreadEtwEvent_TraceFlag : int;
enum CSwitchEtwEvent_OldThreadWaitReason : int;
enum CSwitchEtwEvent_OldThreadWaitMode : int;
enum CSwitchEtwEvent_OldThreadState : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT EtwTraceEventBundle : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCpuFieldNumber = 1,
    kEventFieldNumber = 2,
  };

  EtwTraceEventBundle();
  ~EtwTraceEventBundle() override;
  EtwTraceEventBundle(EtwTraceEventBundle&&) noexcept;
  EtwTraceEventBundle& operator=(EtwTraceEventBundle&&);
  EtwTraceEventBundle(const EtwTraceEventBundle&);
  EtwTraceEventBundle& operator=(const EtwTraceEventBundle&);
  bool operator==(const EtwTraceEventBundle&) const;
  bool operator!=(const EtwTraceEventBundle& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cpu() const { return _has_field_[1]; }
  uint32_t cpu() const { return cpu_; }
  void set_cpu(uint32_t value) { cpu_ = value; _has_field_.set(1); }

  const std::vector<EtwTraceEvent>& event() const { return event_; }
  std::vector<EtwTraceEvent>* mutable_event() { return &event_; }
  int event_size() const;
  void clear_event();
  EtwTraceEvent* add_event();

 private:
  uint32_t cpu_{};
  std::vector<EtwTraceEvent> event_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ETW_ETW_EVENT_BUNDLE_PROTO_CPP_H_
