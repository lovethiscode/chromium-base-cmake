// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/etw/etw_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fetw_2fetw_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fetw_2fetw_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/etw/etw.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fetw_2fetw_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fetw_2fetw_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class EtwTraceEvent;
struct EtwTraceEventDefaultTypeInternal;
extern EtwTraceEventDefaultTypeInternal _EtwTraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::EtwTraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::EtwTraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class EtwTraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.EtwTraceEvent) */ {
 public:
  inline EtwTraceEvent() : EtwTraceEvent(nullptr) {}
  ~EtwTraceEvent() override;
  explicit PROTOBUF_CONSTEXPR EtwTraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EtwTraceEvent(const EtwTraceEvent& from);
  EtwTraceEvent(EtwTraceEvent&& from) noexcept
    : EtwTraceEvent() {
    *this = ::std::move(from);
  }

  inline EtwTraceEvent& operator=(const EtwTraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtwTraceEvent& operator=(EtwTraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EtwTraceEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kCSwitch = 2,
    kReadyThread = 3,
    EVENT_NOT_SET = 0,
  };

  static inline const EtwTraceEvent* internal_default_instance() {
    return reinterpret_cast<const EtwTraceEvent*>(
               &_EtwTraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EtwTraceEvent& a, EtwTraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EtwTraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EtwTraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EtwTraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EtwTraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EtwTraceEvent& from);
  void MergeFrom(const EtwTraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EtwTraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.EtwTraceEvent";
  }
  protected:
  explicit EtwTraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kCpuFieldNumber = 4,
    kCSwitchFieldNumber = 2,
    kReadyThreadFieldNumber = 3,
  };
  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint32 cpu = 4;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  uint32_t cpu() const;
  void set_cpu(uint32_t value);
  private:
  uint32_t _internal_cpu() const;
  void _internal_set_cpu(uint32_t value);
  public:

  // .perfetto.protos.CSwitchEtwEvent c_switch = 2;
  bool has_c_switch() const;
  private:
  bool _internal_has_c_switch() const;
  public:
  void clear_c_switch();
  const ::perfetto::protos::CSwitchEtwEvent& c_switch() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CSwitchEtwEvent* release_c_switch();
  ::perfetto::protos::CSwitchEtwEvent* mutable_c_switch();
  void set_allocated_c_switch(::perfetto::protos::CSwitchEtwEvent* c_switch);
  private:
  const ::perfetto::protos::CSwitchEtwEvent& _internal_c_switch() const;
  ::perfetto::protos::CSwitchEtwEvent* _internal_mutable_c_switch();
  public:
  void unsafe_arena_set_allocated_c_switch(
      ::perfetto::protos::CSwitchEtwEvent* c_switch);
  ::perfetto::protos::CSwitchEtwEvent* unsafe_arena_release_c_switch();

  // .perfetto.protos.ReadyThreadEtwEvent ready_thread = 3;
  bool has_ready_thread() const;
  private:
  bool _internal_has_ready_thread() const;
  public:
  void clear_ready_thread();
  const ::perfetto::protos::ReadyThreadEtwEvent& ready_thread() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ReadyThreadEtwEvent* release_ready_thread();
  ::perfetto::protos::ReadyThreadEtwEvent* mutable_ready_thread();
  void set_allocated_ready_thread(::perfetto::protos::ReadyThreadEtwEvent* ready_thread);
  private:
  const ::perfetto::protos::ReadyThreadEtwEvent& _internal_ready_thread() const;
  ::perfetto::protos::ReadyThreadEtwEvent* _internal_mutable_ready_thread();
  public:
  void unsafe_arena_set_allocated_ready_thread(
      ::perfetto::protos::ReadyThreadEtwEvent* ready_thread);
  ::perfetto::protos::ReadyThreadEtwEvent* unsafe_arena_release_ready_thread();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.EtwTraceEvent)
 private:
  class _Internal;
  void set_has_c_switch();
  void set_has_ready_thread();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t timestamp_;
    uint32_t cpu_;
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::CSwitchEtwEvent* c_switch_;
      ::perfetto::protos::ReadyThreadEtwEvent* ready_thread_;
    } event_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fetw_2fetw_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EtwTraceEvent

// optional uint64 timestamp = 1;
inline bool EtwTraceEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EtwTraceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void EtwTraceEvent::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t EtwTraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t EtwTraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EtwTraceEvent.timestamp)
  return _internal_timestamp();
}
inline void EtwTraceEvent::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void EtwTraceEvent::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EtwTraceEvent.timestamp)
}

// optional uint32 cpu = 4;
inline bool EtwTraceEvent::_internal_has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EtwTraceEvent::has_cpu() const {
  return _internal_has_cpu();
}
inline void EtwTraceEvent::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t EtwTraceEvent::_internal_cpu() const {
  return _impl_.cpu_;
}
inline uint32_t EtwTraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EtwTraceEvent.cpu)
  return _internal_cpu();
}
inline void EtwTraceEvent::_internal_set_cpu(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_ = value;
}
inline void EtwTraceEvent::set_cpu(uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EtwTraceEvent.cpu)
}

// .perfetto.protos.CSwitchEtwEvent c_switch = 2;
inline bool EtwTraceEvent::_internal_has_c_switch() const {
  return event_case() == kCSwitch;
}
inline bool EtwTraceEvent::has_c_switch() const {
  return _internal_has_c_switch();
}
inline void EtwTraceEvent::set_has_c_switch() {
  _impl_._oneof_case_[0] = kCSwitch;
}
inline ::perfetto::protos::CSwitchEtwEvent* EtwTraceEvent::release_c_switch() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EtwTraceEvent.c_switch)
  if (_internal_has_c_switch()) {
    clear_has_event();
    ::perfetto::protos::CSwitchEtwEvent* temp = _impl_.event_.c_switch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.c_switch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CSwitchEtwEvent& EtwTraceEvent::_internal_c_switch() const {
  return _internal_has_c_switch()
      ? *_impl_.event_.c_switch_
      : reinterpret_cast< ::perfetto::protos::CSwitchEtwEvent&>(::perfetto::protos::_CSwitchEtwEvent_default_instance_);
}
inline const ::perfetto::protos::CSwitchEtwEvent& EtwTraceEvent::c_switch() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EtwTraceEvent.c_switch)
  return _internal_c_switch();
}
inline ::perfetto::protos::CSwitchEtwEvent* EtwTraceEvent::unsafe_arena_release_c_switch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.EtwTraceEvent.c_switch)
  if (_internal_has_c_switch()) {
    clear_has_event();
    ::perfetto::protos::CSwitchEtwEvent* temp = _impl_.event_.c_switch_;
    _impl_.event_.c_switch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EtwTraceEvent::unsafe_arena_set_allocated_c_switch(::perfetto::protos::CSwitchEtwEvent* c_switch) {
  clear_event();
  if (c_switch) {
    set_has_c_switch();
    _impl_.event_.c_switch_ = c_switch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.EtwTraceEvent.c_switch)
}
inline ::perfetto::protos::CSwitchEtwEvent* EtwTraceEvent::_internal_mutable_c_switch() {
  if (!_internal_has_c_switch()) {
    clear_event();
    set_has_c_switch();
    _impl_.event_.c_switch_ = CreateMaybeMessage< ::perfetto::protos::CSwitchEtwEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.c_switch_;
}
inline ::perfetto::protos::CSwitchEtwEvent* EtwTraceEvent::mutable_c_switch() {
  ::perfetto::protos::CSwitchEtwEvent* _msg = _internal_mutable_c_switch();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EtwTraceEvent.c_switch)
  return _msg;
}

// .perfetto.protos.ReadyThreadEtwEvent ready_thread = 3;
inline bool EtwTraceEvent::_internal_has_ready_thread() const {
  return event_case() == kReadyThread;
}
inline bool EtwTraceEvent::has_ready_thread() const {
  return _internal_has_ready_thread();
}
inline void EtwTraceEvent::set_has_ready_thread() {
  _impl_._oneof_case_[0] = kReadyThread;
}
inline ::perfetto::protos::ReadyThreadEtwEvent* EtwTraceEvent::release_ready_thread() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EtwTraceEvent.ready_thread)
  if (_internal_has_ready_thread()) {
    clear_has_event();
    ::perfetto::protos::ReadyThreadEtwEvent* temp = _impl_.event_.ready_thread_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ready_thread_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ReadyThreadEtwEvent& EtwTraceEvent::_internal_ready_thread() const {
  return _internal_has_ready_thread()
      ? *_impl_.event_.ready_thread_
      : reinterpret_cast< ::perfetto::protos::ReadyThreadEtwEvent&>(::perfetto::protos::_ReadyThreadEtwEvent_default_instance_);
}
inline const ::perfetto::protos::ReadyThreadEtwEvent& EtwTraceEvent::ready_thread() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EtwTraceEvent.ready_thread)
  return _internal_ready_thread();
}
inline ::perfetto::protos::ReadyThreadEtwEvent* EtwTraceEvent::unsafe_arena_release_ready_thread() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.EtwTraceEvent.ready_thread)
  if (_internal_has_ready_thread()) {
    clear_has_event();
    ::perfetto::protos::ReadyThreadEtwEvent* temp = _impl_.event_.ready_thread_;
    _impl_.event_.ready_thread_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EtwTraceEvent::unsafe_arena_set_allocated_ready_thread(::perfetto::protos::ReadyThreadEtwEvent* ready_thread) {
  clear_event();
  if (ready_thread) {
    set_has_ready_thread();
    _impl_.event_.ready_thread_ = ready_thread;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.EtwTraceEvent.ready_thread)
}
inline ::perfetto::protos::ReadyThreadEtwEvent* EtwTraceEvent::_internal_mutable_ready_thread() {
  if (!_internal_has_ready_thread()) {
    clear_event();
    set_has_ready_thread();
    _impl_.event_.ready_thread_ = CreateMaybeMessage< ::perfetto::protos::ReadyThreadEtwEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ready_thread_;
}
inline ::perfetto::protos::ReadyThreadEtwEvent* EtwTraceEvent::mutable_ready_thread() {
  ::perfetto::protos::ReadyThreadEtwEvent* _msg = _internal_mutable_ready_thread();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EtwTraceEvent.ready_thread)
  return _msg;
}

inline bool EtwTraceEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void EtwTraceEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline EtwTraceEvent::EventCase EtwTraceEvent::event_case() const {
  return EtwTraceEvent::EventCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fetw_2fetw_5fevent_2eproto
