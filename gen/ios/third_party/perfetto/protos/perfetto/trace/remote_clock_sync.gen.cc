#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/remote_clock_sync.gen.h"
#include "protos/perfetto/trace/clock_snapshot.gen.h"
#include "protos/perfetto/common/builtin_clock.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

RemoteClockSync::RemoteClockSync() = default;
RemoteClockSync::~RemoteClockSync() = default;
RemoteClockSync::RemoteClockSync(const RemoteClockSync&) = default;
RemoteClockSync& RemoteClockSync::operator=(const RemoteClockSync&) = default;
RemoteClockSync::RemoteClockSync(RemoteClockSync&&) noexcept = default;
RemoteClockSync& RemoteClockSync::operator=(RemoteClockSync&&) = default;

bool RemoteClockSync::operator==(const RemoteClockSync& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(synced_clocks_, other.synced_clocks_);
}

int RemoteClockSync::synced_clocks_size() const { return static_cast<int>(synced_clocks_.size()); }
void RemoteClockSync::clear_synced_clocks() { synced_clocks_.clear(); }
RemoteClockSync_SyncedClocks* RemoteClockSync::add_synced_clocks() { synced_clocks_.emplace_back(); return &synced_clocks_.back(); }
bool RemoteClockSync::ParseFromArray(const void* raw, size_t size) {
  synced_clocks_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* synced_clocks */:
        synced_clocks_.emplace_back();
        synced_clocks_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string RemoteClockSync::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> RemoteClockSync::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void RemoteClockSync::Serialize(::protozero::Message* msg) const {
  // Field 1: synced_clocks
  for (auto& it : synced_clocks_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


RemoteClockSync_SyncedClocks::RemoteClockSync_SyncedClocks() = default;
RemoteClockSync_SyncedClocks::~RemoteClockSync_SyncedClocks() = default;
RemoteClockSync_SyncedClocks::RemoteClockSync_SyncedClocks(const RemoteClockSync_SyncedClocks&) = default;
RemoteClockSync_SyncedClocks& RemoteClockSync_SyncedClocks::operator=(const RemoteClockSync_SyncedClocks&) = default;
RemoteClockSync_SyncedClocks::RemoteClockSync_SyncedClocks(RemoteClockSync_SyncedClocks&&) noexcept = default;
RemoteClockSync_SyncedClocks& RemoteClockSync_SyncedClocks::operator=(RemoteClockSync_SyncedClocks&&) = default;

bool RemoteClockSync_SyncedClocks::operator==(const RemoteClockSync_SyncedClocks& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(client_clocks_, other.client_clocks_)
   && ::protozero::internal::gen_helpers::EqualsField(host_clocks_, other.host_clocks_);
}

bool RemoteClockSync_SyncedClocks::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 2 /* client_clocks */:
        (*client_clocks_).ParseFromArray(field.data(), field.size());
        break;
      case 3 /* host_clocks */:
        (*host_clocks_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string RemoteClockSync_SyncedClocks::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> RemoteClockSync_SyncedClocks::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void RemoteClockSync_SyncedClocks::Serialize(::protozero::Message* msg) const {
  // Field 2: client_clocks
  if (_has_field_[2]) {
    (*client_clocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: host_clocks
  if (_has_field_[3]) {
    (*host_clocks_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
