#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/trace_packet.gen.h"
#include "protos/perfetto/trace/ui_state.gen.h"
#include "protos/perfetto/trace/test_event.gen.h"
#include "protos/perfetto/trace/track_event/debug_annotation.gen.h"
#include "protos/perfetto/trace/trigger.gen.h"
#include "protos/perfetto/trace/trace_uuid.gen.h"
#include "protos/perfetto/trace/translation/translation_table.gen.h"
#include "protos/perfetto/trace/track_event/track_event.gen.h"
#include "protos/perfetto/trace/track_event/source_location.gen.h"
#include "protos/perfetto/trace/track_event/screenshot.gen.h"
#include "protos/perfetto/trace/track_event/pixel_modem.gen.h"
#include "protos/perfetto/trace/track_event/chrome_window_handle_event_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_user_event.gen.h"
#include "protos/perfetto/trace/track_event/chrome_renderer_scheduler_state.gen.h"
#include "protos/perfetto/trace/track_event/chrome_mojo_event_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_message_pump.gen.h"
#include "protos/perfetto/trace/track_event/chrome_legacy_ipc.gen.h"
#include "protos/perfetto/trace/track_event/chrome_latency_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_keyed_service.gen.h"
#include "protos/perfetto/trace/track_event/chrome_histogram_sample.gen.h"
#include "protos/perfetto/trace/track_event/chrome_frame_reporter.gen.h"
#include "protos/perfetto/trace/track_event/chrome_content_settings_event_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.gen.h"
#include "protos/perfetto/trace/track_event/chrome_application_state_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_active_processes.gen.h"
#include "protos/perfetto/trace/track_event/task_execution.gen.h"
#include "protos/perfetto/trace/track_event/log_message.gen.h"
#include "protos/perfetto/trace/track_event/track_descriptor.gen.h"
#include "protos/perfetto/trace/track_event/counter_descriptor.gen.h"
#include "protos/perfetto/trace/track_event/thread_descriptor.gen.h"
#include "protos/perfetto/trace/track_event/process_descriptor.gen.h"
#include "protos/perfetto/trace/track_event/chrome_thread_descriptor.gen.h"
#include "protos/perfetto/trace/track_event/chrome_process_descriptor.gen.h"
#include "protos/perfetto/trace/track_event/thread_descriptor.gen.h"
#include "protos/perfetto/trace/track_event/range_of_interest.gen.h"
#include "protos/perfetto/trace/track_event/process_descriptor.gen.h"
#include "protos/perfetto/trace/trace_packet_defaults.gen.h"
#include "protos/perfetto/trace/profiling/profile_packet.gen.h"
#include "protos/perfetto/trace/profiling/profile_common.gen.h"
#include "protos/perfetto/common/perf_events.gen.h"
#include "protos/perfetto/trace/chrome/v8.gen.h"
#include "protos/perfetto/trace/system_info/cpu_info.gen.h"
#include "protos/perfetto/trace/system_info.gen.h"
#include "protos/perfetto/trace/sys_stats/sys_stats.gen.h"
#include "protos/perfetto/common/sys_stats_counters.gen.h"
#include "protos/perfetto/trace/remote_clock_sync.gen.h"
#include "protos/perfetto/trace/clock_snapshot.gen.h"
#include "protos/perfetto/common/builtin_clock.gen.h"
#include "protos/perfetto/trace/ps/process_tree.gen.h"
#include "protos/perfetto/trace/ps/process_stats.gen.h"
#include "protos/perfetto/trace/profiling/smaps.gen.h"
#include "protos/perfetto/trace/profiling/profile_packet.gen.h"
#include "protos/perfetto/trace/profiling/profile_common.gen.h"
#include "protos/perfetto/trace/profiling/heap_graph.gen.h"
#include "protos/perfetto/trace/profiling/deobfuscation.gen.h"
#include "protos/perfetto/trace/profiling/deobfuscation.gen.h"
#include "protos/perfetto/trace/statsd/statsd_atom.gen.h"
#include "protos/perfetto/trace/power/power_rails.gen.h"
#include "protos/perfetto/trace/power/battery_counters.gen.h"
#include "protos/perfetto/trace/power/android_entity_state_residency.gen.h"
#include "protos/perfetto/trace/power/android_energy_estimation_breakdown.gen.h"
#include "protos/perfetto/common/android_energy_consumer_descriptor.gen.h"
#include "protos/perfetto/trace/perfetto/tracing_service_event.gen.h"
#include "protos/perfetto/trace/perfetto/perfetto_metatrace.gen.h"
#include "protos/perfetto/trace/memory_graph.gen.h"
#include "protos/perfetto/trace/interned_data/interned_data.gen.h"
#include "protos/perfetto/trace/gpu/gpu_render_stage_event.gen.h"
#include "protos/perfetto/trace/android/network_trace.gen.h"
#include "protos/perfetto/trace/gpu/vulkan_api_event.gen.h"
#include "protos/perfetto/trace/gpu/vulkan_memory_event.gen.h"
#include "protos/perfetto/trace/gpu/gpu_render_stage_event.gen.h"
#include "protos/perfetto/trace/gpu/gpu_log.gen.h"
#include "protos/perfetto/trace/gpu/gpu_counter_event.gen.h"
#include "protos/perfetto/common/gpu_counter_descriptor.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_stats.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace_event.gen.h"
#include "protos/perfetto/trace/ftrace/generic.gen.h"
#include "protos/perfetto/trace/ftrace/workqueue.gen.h"
#include "protos/perfetto/trace/ftrace/vmscan.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_video.gen.h"
#include "protos/perfetto/trace/ftrace/virtio_gpu.gen.h"
#include "protos/perfetto/trace/ftrace/v4l2.gen.h"
#include "protos/perfetto/trace/ftrace/ufs.gen.h"
#include "protos/perfetto/trace/ftrace/trusty.gen.h"
#include "protos/perfetto/trace/ftrace/thermal_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/thermal.gen.h"
#include "protos/perfetto/trace/ftrace/tcp.gen.h"
#include "protos/perfetto/trace/ftrace/task.gen.h"
#include "protos/perfetto/trace/ftrace/systrace.gen.h"
#include "protos/perfetto/trace/ftrace/synthetic.gen.h"
#include "protos/perfetto/trace/ftrace/sync.gen.h"
#include "protos/perfetto/trace/ftrace/sock.gen.h"
#include "protos/perfetto/trace/ftrace/skb.gen.h"
#include "protos/perfetto/trace/ftrace/signal.gen.h"
#include "protos/perfetto/trace/ftrace/sde.gen.h"
#include "protos/perfetto/trace/ftrace/scm.gen.h"
#include "protos/perfetto/trace/ftrace/sched.gen.h"
#include "protos/perfetto/trace/ftrace/samsung.gen.h"
#include "protos/perfetto/trace/ftrace/rpm.gen.h"
#include "protos/perfetto/trace/ftrace/regulator.gen.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.gen.h"
#include "protos/perfetto/trace/ftrace/printk.gen.h"
#include "protos/perfetto/trace/ftrace/power.gen.h"
#include "protos/perfetto/trace/ftrace/perf_trace_counters.gen.h"
#include "protos/perfetto/trace/ftrace/panel.gen.h"
#include "protos/perfetto/trace/ftrace/oom.gen.h"
#include "protos/perfetto/trace/ftrace/net.gen.h"
#include "protos/perfetto/trace/ftrace/mm_event.gen.h"
#include "protos/perfetto/trace/ftrace/mdss.gen.h"
#include "protos/perfetto/trace/ftrace/mali.gen.h"
#include "protos/perfetto/trace/ftrace/lwis.gen.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.gen.h"
#include "protos/perfetto/trace/ftrace/kvm.gen.h"
#include "protos/perfetto/trace/ftrace/kmem.gen.h"
#include "protos/perfetto/trace/ftrace/kgsl.gen.h"
#include "protos/perfetto/trace/ftrace/irq.gen.h"
#include "protos/perfetto/trace/ftrace/ipi.gen.h"
#include "protos/perfetto/trace/ftrace/ion.gen.h"
#include "protos/perfetto/trace/ftrace/i2c.gen.h"
#include "protos/perfetto/trace/ftrace/hyp.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_scheduler.gen.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.gen.h"
#include "protos/perfetto/trace/ftrace/google_irm_trace.gen.h"
#include "protos/perfetto/trace/ftrace/google_icc_trace.gen.h"
#include "protos/perfetto/trace/ftrace/g2d.gen.h"
#include "protos/perfetto/trace/ftrace/ftrace.gen.h"
#include "protos/perfetto/trace/ftrace/filemap.gen.h"
#include "protos/perfetto/trace/ftrace/fence.gen.h"
#include "protos/perfetto/trace/ftrace/fastrpc.gen.h"
#include "protos/perfetto/trace/ftrace/f2fs.gen.h"
#include "protos/perfetto/trace/ftrace/ext4.gen.h"
#include "protos/perfetto/trace/ftrace/drm.gen.h"
#include "protos/perfetto/trace/ftrace/dpu.gen.h"
#include "protos/perfetto/trace/ftrace/dmabuf_heap.gen.h"
#include "protos/perfetto/trace/ftrace/dma_fence.gen.h"
#include "protos/perfetto/trace/ftrace/dcvsh.gen.h"
#include "protos/perfetto/trace/ftrace/cros_ec.gen.h"
#include "protos/perfetto/trace/ftrace/cpuhp.gen.h"
#include "protos/perfetto/trace/ftrace/compaction.gen.h"
#include "protos/perfetto/trace/ftrace/cma.gen.h"
#include "protos/perfetto/trace/ftrace/clk.gen.h"
#include "protos/perfetto/trace/ftrace/cgroup.gen.h"
#include "protos/perfetto/trace/ftrace/block.gen.h"
#include "protos/perfetto/trace/ftrace/binder.gen.h"
#include "protos/perfetto/trace/ftrace/bcl_exynos.gen.h"
#include "protos/perfetto/trace/ftrace/android_fs.gen.h"
#include "protos/perfetto/trace/filesystem/inode_file_map.gen.h"
#include "protos/perfetto/trace/etw/etw_event_bundle.gen.h"
#include "protos/perfetto/trace/etw/etw_event.gen.h"
#include "protos/perfetto/trace/etw/etw.gen.h"
#include "protos/perfetto/trace/clock_snapshot.gen.h"
#include "protos/perfetto/trace/chrome/v8.gen.h"
#include "protos/perfetto/trace/chrome/chrome_trigger.gen.h"
#include "protos/perfetto/trace/chrome/chrome_trace_event.gen.h"
#include "protos/perfetto/trace/chrome/chrome_metadata.gen.h"
#include "protos/perfetto/trace/chrome/chrome_benchmark_metadata.gen.h"
#include "protos/perfetto/trace/android/winscope_extensions.gen.h"
#include "protos/perfetto/trace/android/surfaceflinger_transactions.gen.h"
#include "protos/perfetto/trace/android/graphics/rect.gen.h"
#include "protos/perfetto/trace/android/surfaceflinger_common.gen.h"
#include "protos/perfetto/trace/android/surfaceflinger_layers.gen.h"
#include "protos/perfetto/trace/android/shell_transition.gen.h"
#include "protos/perfetto/trace/android/protolog.gen.h"
#include "protos/perfetto/common/protolog_common.gen.h"
#include "protos/perfetto/trace/android/pixel_modem_events.gen.h"
#include "protos/perfetto/trace/android/packages_list.gen.h"
#include "protos/perfetto/trace/android/network_trace.gen.h"
#include "protos/perfetto/trace/android/initial_display_state.gen.h"
#include "protos/perfetto/trace/android/graphics_frame_event.gen.h"
#include "protos/perfetto/trace/android/gpu_mem_event.gen.h"
#include "protos/perfetto/trace/android/frame_timeline_event.gen.h"
#include "protos/perfetto/trace/android/camera_event.gen.h"
#include "protos/perfetto/trace/android/android_system_property.gen.h"
#include "protos/perfetto/trace/android/android_log.gen.h"
#include "protos/perfetto/common/android_log_constants.gen.h"
#include "protos/perfetto/trace/android/android_game_intervention_list.gen.h"
#include "protos/perfetto/trace/extension_descriptor.gen.h"
#include "protos/perfetto/common/descriptor.gen.h"
#include "protos/perfetto/config/trace_config.gen.h"
#include "protos/perfetto/config/data_source_config.gen.h"
#include "protos/perfetto/config/system_info/system_info.gen.h"
#include "protos/perfetto/config/track_event/track_event_config.gen.h"
#include "protos/perfetto/config/test_config.gen.h"
#include "protos/perfetto/config/sys_stats/sys_stats_config.gen.h"
#include "protos/perfetto/config/profiling/perf_event_config.gen.h"
#include "protos/perfetto/config/profiling/java_hprof_config.gen.h"
#include "protos/perfetto/config/profiling/heapprofd_config.gen.h"
#include "protos/perfetto/config/process_stats/process_stats_config.gen.h"
#include "protos/perfetto/config/statsd/statsd_tracing_config.gen.h"
#include "protos/perfetto/config/statsd/atom_ids.gen.h"
#include "protos/perfetto/config/power/android_power_config.gen.h"
#include "protos/perfetto/config/interceptor_config.gen.h"
#include "protos/perfetto/config/interceptors/console_config.gen.h"
#include "protos/perfetto/config/inode_file/inode_file_config.gen.h"
#include "protos/perfetto/config/gpu/vulkan_memory_config.gen.h"
#include "protos/perfetto/config/gpu/gpu_counter_config.gen.h"
#include "protos/perfetto/config/ftrace/ftrace_config.gen.h"
#include "protos/perfetto/config/etw/etw_config.gen.h"
#include "protos/perfetto/config/chrome/v8_config.gen.h"
#include "protos/perfetto/config/chrome/chrome_config.gen.h"
#include "protos/perfetto/config/android/surfaceflinger_transactions_config.gen.h"
#include "protos/perfetto/config/android/surfaceflinger_layers_config.gen.h"
#include "protos/perfetto/config/android/protolog_config.gen.h"
#include "protos/perfetto/config/android/pixel_modem_config.gen.h"
#include "protos/perfetto/config/android/packages_list_config.gen.h"
#include "protos/perfetto/config/android/network_trace_config.gen.h"
#include "protos/perfetto/config/android/android_sdk_sysprop_guard_config.gen.h"
#include "protos/perfetto/config/android/android_system_property_config.gen.h"
#include "protos/perfetto/config/android/android_polled_state_config.gen.h"
#include "protos/perfetto/config/android/android_log_config.gen.h"
#include "protos/perfetto/config/android/android_input_event_config.gen.h"
#include "protos/perfetto/config/android/android_game_intervention_list_config.gen.h"
#include "protos/perfetto/common/trace_stats.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

TracePacket::TracePacket() = default;
TracePacket::~TracePacket() = default;
TracePacket::TracePacket(const TracePacket&) = default;
TracePacket& TracePacket::operator=(const TracePacket&) = default;
TracePacket::TracePacket(TracePacket&&) noexcept = default;
TracePacket& TracePacket::operator=(TracePacket&&) = default;

bool TracePacket::operator==(const TracePacket& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_clock_id_, other.timestamp_clock_id_)
   && ::protozero::internal::gen_helpers::EqualsField(process_tree_, other.process_tree_)
   && ::protozero::internal::gen_helpers::EqualsField(process_stats_, other.process_stats_)
   && ::protozero::internal::gen_helpers::EqualsField(inode_file_map_, other.inode_file_map_)
   && ::protozero::internal::gen_helpers::EqualsField(chrome_events_, other.chrome_events_)
   && ::protozero::internal::gen_helpers::EqualsField(clock_snapshot_, other.clock_snapshot_)
   && ::protozero::internal::gen_helpers::EqualsField(sys_stats_, other.sys_stats_)
   && ::protozero::internal::gen_helpers::EqualsField(track_event_, other.track_event_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_uuid_, other.trace_uuid_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_config_, other.trace_config_)
   && ::protozero::internal::gen_helpers::EqualsField(ftrace_stats_, other.ftrace_stats_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_stats_, other.trace_stats_)
   && ::protozero::internal::gen_helpers::EqualsField(profile_packet_, other.profile_packet_)
   && ::protozero::internal::gen_helpers::EqualsField(streaming_allocation_, other.streaming_allocation_)
   && ::protozero::internal::gen_helpers::EqualsField(streaming_free_, other.streaming_free_)
   && ::protozero::internal::gen_helpers::EqualsField(battery_, other.battery_)
   && ::protozero::internal::gen_helpers::EqualsField(power_rails_, other.power_rails_)
   && ::protozero::internal::gen_helpers::EqualsField(android_log_, other.android_log_)
   && ::protozero::internal::gen_helpers::EqualsField(system_info_, other.system_info_)
   && ::protozero::internal::gen_helpers::EqualsField(trigger_, other.trigger_)
   && ::protozero::internal::gen_helpers::EqualsField(chrome_trigger_, other.chrome_trigger_)
   && ::protozero::internal::gen_helpers::EqualsField(packages_list_, other.packages_list_)
   && ::protozero::internal::gen_helpers::EqualsField(chrome_benchmark_metadata_, other.chrome_benchmark_metadata_)
   && ::protozero::internal::gen_helpers::EqualsField(perfetto_metatrace_, other.perfetto_metatrace_)
   && ::protozero::internal::gen_helpers::EqualsField(chrome_metadata_, other.chrome_metadata_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_counter_event_, other.gpu_counter_event_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_render_stage_event_, other.gpu_render_stage_event_)
   && ::protozero::internal::gen_helpers::EqualsField(streaming_profile_packet_, other.streaming_profile_packet_)
   && ::protozero::internal::gen_helpers::EqualsField(heap_graph_, other.heap_graph_)
   && ::protozero::internal::gen_helpers::EqualsField(graphics_frame_event_, other.graphics_frame_event_)
   && ::protozero::internal::gen_helpers::EqualsField(vulkan_memory_event_, other.vulkan_memory_event_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_log_, other.gpu_log_)
   && ::protozero::internal::gen_helpers::EqualsField(vulkan_api_event_, other.vulkan_api_event_)
   && ::protozero::internal::gen_helpers::EqualsField(perf_sample_, other.perf_sample_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_info_, other.cpu_info_)
   && ::protozero::internal::gen_helpers::EqualsField(smaps_packet_, other.smaps_packet_)
   && ::protozero::internal::gen_helpers::EqualsField(service_event_, other.service_event_)
   && ::protozero::internal::gen_helpers::EqualsField(initial_display_state_, other.initial_display_state_)
   && ::protozero::internal::gen_helpers::EqualsField(gpu_mem_total_event_, other.gpu_mem_total_event_)
   && ::protozero::internal::gen_helpers::EqualsField(memory_tracker_snapshot_, other.memory_tracker_snapshot_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_timeline_event_, other.frame_timeline_event_)
   && ::protozero::internal::gen_helpers::EqualsField(android_energy_estimation_breakdown_, other.android_energy_estimation_breakdown_)
   && ::protozero::internal::gen_helpers::EqualsField(ui_state_, other.ui_state_)
   && ::protozero::internal::gen_helpers::EqualsField(android_camera_frame_event_, other.android_camera_frame_event_)
   && ::protozero::internal::gen_helpers::EqualsField(android_camera_session_stats_, other.android_camera_session_stats_)
   && ::protozero::internal::gen_helpers::EqualsField(translation_table_, other.translation_table_)
   && ::protozero::internal::gen_helpers::EqualsField(android_game_intervention_list_, other.android_game_intervention_list_)
   && ::protozero::internal::gen_helpers::EqualsField(statsd_atom_, other.statsd_atom_)
   && ::protozero::internal::gen_helpers::EqualsField(android_system_property_, other.android_system_property_)
   && ::protozero::internal::gen_helpers::EqualsField(entity_state_residency_, other.entity_state_residency_)
   && ::protozero::internal::gen_helpers::EqualsField(profiled_frame_symbols_, other.profiled_frame_symbols_)
   && ::protozero::internal::gen_helpers::EqualsField(module_symbols_, other.module_symbols_)
   && ::protozero::internal::gen_helpers::EqualsField(deobfuscation_mapping_, other.deobfuscation_mapping_)
   && ::protozero::internal::gen_helpers::EqualsField(track_descriptor_, other.track_descriptor_)
   && ::protozero::internal::gen_helpers::EqualsField(process_descriptor_, other.process_descriptor_)
   && ::protozero::internal::gen_helpers::EqualsField(thread_descriptor_, other.thread_descriptor_)
   && ::protozero::internal::gen_helpers::EqualsField(ftrace_events_, other.ftrace_events_)
   && ::protozero::internal::gen_helpers::EqualsField(synchronization_marker_, other.synchronization_marker_)
   && ::protozero::internal::gen_helpers::EqualsField(compressed_packets_, other.compressed_packets_)
   && ::protozero::internal::gen_helpers::EqualsField(extension_descriptor_, other.extension_descriptor_)
   && ::protozero::internal::gen_helpers::EqualsField(network_packet_, other.network_packet_)
   && ::protozero::internal::gen_helpers::EqualsField(network_packet_bundle_, other.network_packet_bundle_)
   && ::protozero::internal::gen_helpers::EqualsField(track_event_range_of_interest_, other.track_event_range_of_interest_)
   && ::protozero::internal::gen_helpers::EqualsField(surfaceflinger_layers_snapshot_, other.surfaceflinger_layers_snapshot_)
   && ::protozero::internal::gen_helpers::EqualsField(surfaceflinger_transactions_, other.surfaceflinger_transactions_)
   && ::protozero::internal::gen_helpers::EqualsField(shell_transition_, other.shell_transition_)
   && ::protozero::internal::gen_helpers::EqualsField(shell_handler_mappings_, other.shell_handler_mappings_)
   && ::protozero::internal::gen_helpers::EqualsField(protolog_message_, other.protolog_message_)
   && ::protozero::internal::gen_helpers::EqualsField(protolog_viewer_config_, other.protolog_viewer_config_)
   && ::protozero::internal::gen_helpers::EqualsField(winscope_extensions_, other.winscope_extensions_)
   && ::protozero::internal::gen_helpers::EqualsField(etw_events_, other.etw_events_)
   && ::protozero::internal::gen_helpers::EqualsField(v8_js_code_, other.v8_js_code_)
   && ::protozero::internal::gen_helpers::EqualsField(v8_internal_code_, other.v8_internal_code_)
   && ::protozero::internal::gen_helpers::EqualsField(v8_wasm_code_, other.v8_wasm_code_)
   && ::protozero::internal::gen_helpers::EqualsField(v8_reg_exp_code_, other.v8_reg_exp_code_)
   && ::protozero::internal::gen_helpers::EqualsField(v8_code_move_, other.v8_code_move_)
   && ::protozero::internal::gen_helpers::EqualsField(remote_clock_sync_, other.remote_clock_sync_)
   && ::protozero::internal::gen_helpers::EqualsField(pixel_modem_events_, other.pixel_modem_events_)
   && ::protozero::internal::gen_helpers::EqualsField(pixel_modem_token_database_, other.pixel_modem_token_database_)
   && ::protozero::internal::gen_helpers::EqualsField(for_testing_, other.for_testing_)
   && ::protozero::internal::gen_helpers::EqualsField(trusted_uid_, other.trusted_uid_)
   && ::protozero::internal::gen_helpers::EqualsField(trusted_packet_sequence_id_, other.trusted_packet_sequence_id_)
   && ::protozero::internal::gen_helpers::EqualsField(trusted_pid_, other.trusted_pid_)
   && ::protozero::internal::gen_helpers::EqualsField(interned_data_, other.interned_data_)
   && ::protozero::internal::gen_helpers::EqualsField(sequence_flags_, other.sequence_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(incremental_state_cleared_, other.incremental_state_cleared_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_packet_defaults_, other.trace_packet_defaults_)
   && ::protozero::internal::gen_helpers::EqualsField(previous_packet_dropped_, other.previous_packet_dropped_)
   && ::protozero::internal::gen_helpers::EqualsField(first_packet_on_sequence_, other.first_packet_on_sequence_)
   && ::protozero::internal::gen_helpers::EqualsField(machine_id_, other.machine_id_);
}

bool TracePacket::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 8 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 58 /* timestamp_clock_id */:
        field.get(&timestamp_clock_id_);
        break;
      case 2 /* process_tree */:
        (*process_tree_).ParseFromArray(field.data(), field.size());
        break;
      case 9 /* process_stats */:
        (*process_stats_).ParseFromArray(field.data(), field.size());
        break;
      case 4 /* inode_file_map */:
        (*inode_file_map_).ParseFromArray(field.data(), field.size());
        break;
      case 5 /* chrome_events */:
        (*chrome_events_).ParseFromArray(field.data(), field.size());
        break;
      case 6 /* clock_snapshot */:
        (*clock_snapshot_).ParseFromArray(field.data(), field.size());
        break;
      case 7 /* sys_stats */:
        (*sys_stats_).ParseFromArray(field.data(), field.size());
        break;
      case 11 /* track_event */:
        (*track_event_).ParseFromArray(field.data(), field.size());
        break;
      case 89 /* trace_uuid */:
        (*trace_uuid_).ParseFromArray(field.data(), field.size());
        break;
      case 33 /* trace_config */:
        (*trace_config_).ParseFromArray(field.data(), field.size());
        break;
      case 34 /* ftrace_stats */:
        (*ftrace_stats_).ParseFromArray(field.data(), field.size());
        break;
      case 35 /* trace_stats */:
        (*trace_stats_).ParseFromArray(field.data(), field.size());
        break;
      case 37 /* profile_packet */:
        (*profile_packet_).ParseFromArray(field.data(), field.size());
        break;
      case 74 /* streaming_allocation */:
        (*streaming_allocation_).ParseFromArray(field.data(), field.size());
        break;
      case 75 /* streaming_free */:
        (*streaming_free_).ParseFromArray(field.data(), field.size());
        break;
      case 38 /* battery */:
        (*battery_).ParseFromArray(field.data(), field.size());
        break;
      case 40 /* power_rails */:
        (*power_rails_).ParseFromArray(field.data(), field.size());
        break;
      case 39 /* android_log */:
        (*android_log_).ParseFromArray(field.data(), field.size());
        break;
      case 45 /* system_info */:
        (*system_info_).ParseFromArray(field.data(), field.size());
        break;
      case 46 /* trigger */:
        (*trigger_).ParseFromArray(field.data(), field.size());
        break;
      case 109 /* chrome_trigger */:
        (*chrome_trigger_).ParseFromArray(field.data(), field.size());
        break;
      case 47 /* packages_list */:
        (*packages_list_).ParseFromArray(field.data(), field.size());
        break;
      case 48 /* chrome_benchmark_metadata */:
        (*chrome_benchmark_metadata_).ParseFromArray(field.data(), field.size());
        break;
      case 49 /* perfetto_metatrace */:
        (*perfetto_metatrace_).ParseFromArray(field.data(), field.size());
        break;
      case 51 /* chrome_metadata */:
        (*chrome_metadata_).ParseFromArray(field.data(), field.size());
        break;
      case 52 /* gpu_counter_event */:
        (*gpu_counter_event_).ParseFromArray(field.data(), field.size());
        break;
      case 53 /* gpu_render_stage_event */:
        (*gpu_render_stage_event_).ParseFromArray(field.data(), field.size());
        break;
      case 54 /* streaming_profile_packet */:
        (*streaming_profile_packet_).ParseFromArray(field.data(), field.size());
        break;
      case 56 /* heap_graph */:
        (*heap_graph_).ParseFromArray(field.data(), field.size());
        break;
      case 57 /* graphics_frame_event */:
        (*graphics_frame_event_).ParseFromArray(field.data(), field.size());
        break;
      case 62 /* vulkan_memory_event */:
        (*vulkan_memory_event_).ParseFromArray(field.data(), field.size());
        break;
      case 63 /* gpu_log */:
        (*gpu_log_).ParseFromArray(field.data(), field.size());
        break;
      case 65 /* vulkan_api_event */:
        (*vulkan_api_event_).ParseFromArray(field.data(), field.size());
        break;
      case 66 /* perf_sample */:
        (*perf_sample_).ParseFromArray(field.data(), field.size());
        break;
      case 67 /* cpu_info */:
        (*cpu_info_).ParseFromArray(field.data(), field.size());
        break;
      case 68 /* smaps_packet */:
        (*smaps_packet_).ParseFromArray(field.data(), field.size());
        break;
      case 69 /* service_event */:
        (*service_event_).ParseFromArray(field.data(), field.size());
        break;
      case 70 /* initial_display_state */:
        (*initial_display_state_).ParseFromArray(field.data(), field.size());
        break;
      case 71 /* gpu_mem_total_event */:
        (*gpu_mem_total_event_).ParseFromArray(field.data(), field.size());
        break;
      case 73 /* memory_tracker_snapshot */:
        (*memory_tracker_snapshot_).ParseFromArray(field.data(), field.size());
        break;
      case 76 /* frame_timeline_event */:
        (*frame_timeline_event_).ParseFromArray(field.data(), field.size());
        break;
      case 77 /* android_energy_estimation_breakdown */:
        (*android_energy_estimation_breakdown_).ParseFromArray(field.data(), field.size());
        break;
      case 78 /* ui_state */:
        (*ui_state_).ParseFromArray(field.data(), field.size());
        break;
      case 80 /* android_camera_frame_event */:
        (*android_camera_frame_event_).ParseFromArray(field.data(), field.size());
        break;
      case 81 /* android_camera_session_stats */:
        (*android_camera_session_stats_).ParseFromArray(field.data(), field.size());
        break;
      case 82 /* translation_table */:
        (*translation_table_).ParseFromArray(field.data(), field.size());
        break;
      case 83 /* android_game_intervention_list */:
        (*android_game_intervention_list_).ParseFromArray(field.data(), field.size());
        break;
      case 84 /* statsd_atom */:
        (*statsd_atom_).ParseFromArray(field.data(), field.size());
        break;
      case 86 /* android_system_property */:
        (*android_system_property_).ParseFromArray(field.data(), field.size());
        break;
      case 91 /* entity_state_residency */:
        (*entity_state_residency_).ParseFromArray(field.data(), field.size());
        break;
      case 55 /* profiled_frame_symbols */:
        (*profiled_frame_symbols_).ParseFromArray(field.data(), field.size());
        break;
      case 61 /* module_symbols */:
        (*module_symbols_).ParseFromArray(field.data(), field.size());
        break;
      case 64 /* deobfuscation_mapping */:
        (*deobfuscation_mapping_).ParseFromArray(field.data(), field.size());
        break;
      case 60 /* track_descriptor */:
        (*track_descriptor_).ParseFromArray(field.data(), field.size());
        break;
      case 43 /* process_descriptor */:
        (*process_descriptor_).ParseFromArray(field.data(), field.size());
        break;
      case 44 /* thread_descriptor */:
        (*thread_descriptor_).ParseFromArray(field.data(), field.size());
        break;
      case 1 /* ftrace_events */:
        (*ftrace_events_).ParseFromArray(field.data(), field.size());
        break;
      case 36 /* synchronization_marker */:
        field.get(&synchronization_marker_);
        break;
      case 50 /* compressed_packets */:
        field.get(&compressed_packets_);
        break;
      case 72 /* extension_descriptor */:
        (*extension_descriptor_).ParseFromArray(field.data(), field.size());
        break;
      case 88 /* network_packet */:
        (*network_packet_).ParseFromArray(field.data(), field.size());
        break;
      case 92 /* network_packet_bundle */:
        (*network_packet_bundle_).ParseFromArray(field.data(), field.size());
        break;
      case 90 /* track_event_range_of_interest */:
        (*track_event_range_of_interest_).ParseFromArray(field.data(), field.size());
        break;
      case 93 /* surfaceflinger_layers_snapshot */:
        (*surfaceflinger_layers_snapshot_).ParseFromArray(field.data(), field.size());
        break;
      case 94 /* surfaceflinger_transactions */:
        (*surfaceflinger_transactions_).ParseFromArray(field.data(), field.size());
        break;
      case 96 /* shell_transition */:
        (*shell_transition_).ParseFromArray(field.data(), field.size());
        break;
      case 97 /* shell_handler_mappings */:
        (*shell_handler_mappings_).ParseFromArray(field.data(), field.size());
        break;
      case 104 /* protolog_message */:
        (*protolog_message_).ParseFromArray(field.data(), field.size());
        break;
      case 105 /* protolog_viewer_config */:
        (*protolog_viewer_config_).ParseFromArray(field.data(), field.size());
        break;
      case 112 /* winscope_extensions */:
        (*winscope_extensions_).ParseFromArray(field.data(), field.size());
        break;
      case 95 /* etw_events */:
        (*etw_events_).ParseFromArray(field.data(), field.size());
        break;
      case 99 /* v8_js_code */:
        (*v8_js_code_).ParseFromArray(field.data(), field.size());
        break;
      case 100 /* v8_internal_code */:
        (*v8_internal_code_).ParseFromArray(field.data(), field.size());
        break;
      case 101 /* v8_wasm_code */:
        (*v8_wasm_code_).ParseFromArray(field.data(), field.size());
        break;
      case 102 /* v8_reg_exp_code */:
        (*v8_reg_exp_code_).ParseFromArray(field.data(), field.size());
        break;
      case 103 /* v8_code_move */:
        (*v8_code_move_).ParseFromArray(field.data(), field.size());
        break;
      case 107 /* remote_clock_sync */:
        (*remote_clock_sync_).ParseFromArray(field.data(), field.size());
        break;
      case 110 /* pixel_modem_events */:
        (*pixel_modem_events_).ParseFromArray(field.data(), field.size());
        break;
      case 111 /* pixel_modem_token_database */:
        (*pixel_modem_token_database_).ParseFromArray(field.data(), field.size());
        break;
      case 900 /* for_testing */:
        (*for_testing_).ParseFromArray(field.data(), field.size());
        break;
      case 3 /* trusted_uid */:
        field.get(&trusted_uid_);
        break;
      case 10 /* trusted_packet_sequence_id */:
        field.get(&trusted_packet_sequence_id_);
        break;
      case 79 /* trusted_pid */:
        field.get(&trusted_pid_);
        break;
      case 12 /* interned_data */:
        (*interned_data_).ParseFromArray(field.data(), field.size());
        break;
      case 13 /* sequence_flags */:
        field.get(&sequence_flags_);
        break;
      case 41 /* incremental_state_cleared */:
        field.get(&incremental_state_cleared_);
        break;
      case 59 /* trace_packet_defaults */:
        (*trace_packet_defaults_).ParseFromArray(field.data(), field.size());
        break;
      case 42 /* previous_packet_dropped */:
        field.get(&previous_packet_dropped_);
        break;
      case 87 /* first_packet_on_sequence */:
        field.get(&first_packet_on_sequence_);
        break;
      case 98 /* machine_id */:
        field.get(&machine_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TracePacket::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TracePacket::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TracePacket::Serialize(::protozero::Message* msg) const {
  // Field 8: timestamp
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, timestamp_, msg);
  }

  // Field 58: timestamp_clock_id
  if (_has_field_[58]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(58, timestamp_clock_id_, msg);
  }

  // Field 2: process_tree
  if (_has_field_[2]) {
    (*process_tree_).Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 9: process_stats
  if (_has_field_[9]) {
    (*process_stats_).Serialize(msg->BeginNestedMessage<::protozero::Message>(9));
  }

  // Field 4: inode_file_map
  if (_has_field_[4]) {
    (*inode_file_map_).Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 5: chrome_events
  if (_has_field_[5]) {
    (*chrome_events_).Serialize(msg->BeginNestedMessage<::protozero::Message>(5));
  }

  // Field 6: clock_snapshot
  if (_has_field_[6]) {
    (*clock_snapshot_).Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 7: sys_stats
  if (_has_field_[7]) {
    (*sys_stats_).Serialize(msg->BeginNestedMessage<::protozero::Message>(7));
  }

  // Field 11: track_event
  if (_has_field_[11]) {
    (*track_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 89: trace_uuid
  if (_has_field_[89]) {
    (*trace_uuid_).Serialize(msg->BeginNestedMessage<::protozero::Message>(89));
  }

  // Field 33: trace_config
  if (_has_field_[33]) {
    (*trace_config_).Serialize(msg->BeginNestedMessage<::protozero::Message>(33));
  }

  // Field 34: ftrace_stats
  if (_has_field_[34]) {
    (*ftrace_stats_).Serialize(msg->BeginNestedMessage<::protozero::Message>(34));
  }

  // Field 35: trace_stats
  if (_has_field_[35]) {
    (*trace_stats_).Serialize(msg->BeginNestedMessage<::protozero::Message>(35));
  }

  // Field 37: profile_packet
  if (_has_field_[37]) {
    (*profile_packet_).Serialize(msg->BeginNestedMessage<::protozero::Message>(37));
  }

  // Field 74: streaming_allocation
  if (_has_field_[74]) {
    (*streaming_allocation_).Serialize(msg->BeginNestedMessage<::protozero::Message>(74));
  }

  // Field 75: streaming_free
  if (_has_field_[75]) {
    (*streaming_free_).Serialize(msg->BeginNestedMessage<::protozero::Message>(75));
  }

  // Field 38: battery
  if (_has_field_[38]) {
    (*battery_).Serialize(msg->BeginNestedMessage<::protozero::Message>(38));
  }

  // Field 40: power_rails
  if (_has_field_[40]) {
    (*power_rails_).Serialize(msg->BeginNestedMessage<::protozero::Message>(40));
  }

  // Field 39: android_log
  if (_has_field_[39]) {
    (*android_log_).Serialize(msg->BeginNestedMessage<::protozero::Message>(39));
  }

  // Field 45: system_info
  if (_has_field_[45]) {
    (*system_info_).Serialize(msg->BeginNestedMessage<::protozero::Message>(45));
  }

  // Field 46: trigger
  if (_has_field_[46]) {
    (*trigger_).Serialize(msg->BeginNestedMessage<::protozero::Message>(46));
  }

  // Field 109: chrome_trigger
  if (_has_field_[109]) {
    (*chrome_trigger_).Serialize(msg->BeginNestedMessage<::protozero::Message>(109));
  }

  // Field 47: packages_list
  if (_has_field_[47]) {
    (*packages_list_).Serialize(msg->BeginNestedMessage<::protozero::Message>(47));
  }

  // Field 48: chrome_benchmark_metadata
  if (_has_field_[48]) {
    (*chrome_benchmark_metadata_).Serialize(msg->BeginNestedMessage<::protozero::Message>(48));
  }

  // Field 49: perfetto_metatrace
  if (_has_field_[49]) {
    (*perfetto_metatrace_).Serialize(msg->BeginNestedMessage<::protozero::Message>(49));
  }

  // Field 51: chrome_metadata
  if (_has_field_[51]) {
    (*chrome_metadata_).Serialize(msg->BeginNestedMessage<::protozero::Message>(51));
  }

  // Field 52: gpu_counter_event
  if (_has_field_[52]) {
    (*gpu_counter_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(52));
  }

  // Field 53: gpu_render_stage_event
  if (_has_field_[53]) {
    (*gpu_render_stage_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(53));
  }

  // Field 54: streaming_profile_packet
  if (_has_field_[54]) {
    (*streaming_profile_packet_).Serialize(msg->BeginNestedMessage<::protozero::Message>(54));
  }

  // Field 56: heap_graph
  if (_has_field_[56]) {
    (*heap_graph_).Serialize(msg->BeginNestedMessage<::protozero::Message>(56));
  }

  // Field 57: graphics_frame_event
  if (_has_field_[57]) {
    (*graphics_frame_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(57));
  }

  // Field 62: vulkan_memory_event
  if (_has_field_[62]) {
    (*vulkan_memory_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(62));
  }

  // Field 63: gpu_log
  if (_has_field_[63]) {
    (*gpu_log_).Serialize(msg->BeginNestedMessage<::protozero::Message>(63));
  }

  // Field 65: vulkan_api_event
  if (_has_field_[65]) {
    (*vulkan_api_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(65));
  }

  // Field 66: perf_sample
  if (_has_field_[66]) {
    (*perf_sample_).Serialize(msg->BeginNestedMessage<::protozero::Message>(66));
  }

  // Field 67: cpu_info
  if (_has_field_[67]) {
    (*cpu_info_).Serialize(msg->BeginNestedMessage<::protozero::Message>(67));
  }

  // Field 68: smaps_packet
  if (_has_field_[68]) {
    (*smaps_packet_).Serialize(msg->BeginNestedMessage<::protozero::Message>(68));
  }

  // Field 69: service_event
  if (_has_field_[69]) {
    (*service_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(69));
  }

  // Field 70: initial_display_state
  if (_has_field_[70]) {
    (*initial_display_state_).Serialize(msg->BeginNestedMessage<::protozero::Message>(70));
  }

  // Field 71: gpu_mem_total_event
  if (_has_field_[71]) {
    (*gpu_mem_total_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(71));
  }

  // Field 73: memory_tracker_snapshot
  if (_has_field_[73]) {
    (*memory_tracker_snapshot_).Serialize(msg->BeginNestedMessage<::protozero::Message>(73));
  }

  // Field 76: frame_timeline_event
  if (_has_field_[76]) {
    (*frame_timeline_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(76));
  }

  // Field 77: android_energy_estimation_breakdown
  if (_has_field_[77]) {
    (*android_energy_estimation_breakdown_).Serialize(msg->BeginNestedMessage<::protozero::Message>(77));
  }

  // Field 78: ui_state
  if (_has_field_[78]) {
    (*ui_state_).Serialize(msg->BeginNestedMessage<::protozero::Message>(78));
  }

  // Field 80: android_camera_frame_event
  if (_has_field_[80]) {
    (*android_camera_frame_event_).Serialize(msg->BeginNestedMessage<::protozero::Message>(80));
  }

  // Field 81: android_camera_session_stats
  if (_has_field_[81]) {
    (*android_camera_session_stats_).Serialize(msg->BeginNestedMessage<::protozero::Message>(81));
  }

  // Field 82: translation_table
  if (_has_field_[82]) {
    (*translation_table_).Serialize(msg->BeginNestedMessage<::protozero::Message>(82));
  }

  // Field 83: android_game_intervention_list
  if (_has_field_[83]) {
    (*android_game_intervention_list_).Serialize(msg->BeginNestedMessage<::protozero::Message>(83));
  }

  // Field 84: statsd_atom
  if (_has_field_[84]) {
    (*statsd_atom_).Serialize(msg->BeginNestedMessage<::protozero::Message>(84));
  }

  // Field 86: android_system_property
  if (_has_field_[86]) {
    (*android_system_property_).Serialize(msg->BeginNestedMessage<::protozero::Message>(86));
  }

  // Field 91: entity_state_residency
  if (_has_field_[91]) {
    (*entity_state_residency_).Serialize(msg->BeginNestedMessage<::protozero::Message>(91));
  }

  // Field 55: profiled_frame_symbols
  if (_has_field_[55]) {
    (*profiled_frame_symbols_).Serialize(msg->BeginNestedMessage<::protozero::Message>(55));
  }

  // Field 61: module_symbols
  if (_has_field_[61]) {
    (*module_symbols_).Serialize(msg->BeginNestedMessage<::protozero::Message>(61));
  }

  // Field 64: deobfuscation_mapping
  if (_has_field_[64]) {
    (*deobfuscation_mapping_).Serialize(msg->BeginNestedMessage<::protozero::Message>(64));
  }

  // Field 60: track_descriptor
  if (_has_field_[60]) {
    (*track_descriptor_).Serialize(msg->BeginNestedMessage<::protozero::Message>(60));
  }

  // Field 43: process_descriptor
  if (_has_field_[43]) {
    (*process_descriptor_).Serialize(msg->BeginNestedMessage<::protozero::Message>(43));
  }

  // Field 44: thread_descriptor
  if (_has_field_[44]) {
    (*thread_descriptor_).Serialize(msg->BeginNestedMessage<::protozero::Message>(44));
  }

  // Field 1: ftrace_events
  if (_has_field_[1]) {
    (*ftrace_events_).Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 36: synchronization_marker
  if (_has_field_[36]) {
    ::protozero::internal::gen_helpers::SerializeString(36, synchronization_marker_, msg);
  }

  // Field 50: compressed_packets
  if (_has_field_[50]) {
    ::protozero::internal::gen_helpers::SerializeString(50, compressed_packets_, msg);
  }

  // Field 72: extension_descriptor
  if (_has_field_[72]) {
    (*extension_descriptor_).Serialize(msg->BeginNestedMessage<::protozero::Message>(72));
  }

  // Field 88: network_packet
  if (_has_field_[88]) {
    (*network_packet_).Serialize(msg->BeginNestedMessage<::protozero::Message>(88));
  }

  // Field 92: network_packet_bundle
  if (_has_field_[92]) {
    (*network_packet_bundle_).Serialize(msg->BeginNestedMessage<::protozero::Message>(92));
  }

  // Field 90: track_event_range_of_interest
  if (_has_field_[90]) {
    (*track_event_range_of_interest_).Serialize(msg->BeginNestedMessage<::protozero::Message>(90));
  }

  // Field 93: surfaceflinger_layers_snapshot
  if (_has_field_[93]) {
    (*surfaceflinger_layers_snapshot_).Serialize(msg->BeginNestedMessage<::protozero::Message>(93));
  }

  // Field 94: surfaceflinger_transactions
  if (_has_field_[94]) {
    (*surfaceflinger_transactions_).Serialize(msg->BeginNestedMessage<::protozero::Message>(94));
  }

  // Field 96: shell_transition
  if (_has_field_[96]) {
    (*shell_transition_).Serialize(msg->BeginNestedMessage<::protozero::Message>(96));
  }

  // Field 97: shell_handler_mappings
  if (_has_field_[97]) {
    (*shell_handler_mappings_).Serialize(msg->BeginNestedMessage<::protozero::Message>(97));
  }

  // Field 104: protolog_message
  if (_has_field_[104]) {
    (*protolog_message_).Serialize(msg->BeginNestedMessage<::protozero::Message>(104));
  }

  // Field 105: protolog_viewer_config
  if (_has_field_[105]) {
    (*protolog_viewer_config_).Serialize(msg->BeginNestedMessage<::protozero::Message>(105));
  }

  // Field 112: winscope_extensions
  if (_has_field_[112]) {
    (*winscope_extensions_).Serialize(msg->BeginNestedMessage<::protozero::Message>(112));
  }

  // Field 95: etw_events
  if (_has_field_[95]) {
    (*etw_events_).Serialize(msg->BeginNestedMessage<::protozero::Message>(95));
  }

  // Field 99: v8_js_code
  if (_has_field_[99]) {
    (*v8_js_code_).Serialize(msg->BeginNestedMessage<::protozero::Message>(99));
  }

  // Field 100: v8_internal_code
  if (_has_field_[100]) {
    (*v8_internal_code_).Serialize(msg->BeginNestedMessage<::protozero::Message>(100));
  }

  // Field 101: v8_wasm_code
  if (_has_field_[101]) {
    (*v8_wasm_code_).Serialize(msg->BeginNestedMessage<::protozero::Message>(101));
  }

  // Field 102: v8_reg_exp_code
  if (_has_field_[102]) {
    (*v8_reg_exp_code_).Serialize(msg->BeginNestedMessage<::protozero::Message>(102));
  }

  // Field 103: v8_code_move
  if (_has_field_[103]) {
    (*v8_code_move_).Serialize(msg->BeginNestedMessage<::protozero::Message>(103));
  }

  // Field 107: remote_clock_sync
  if (_has_field_[107]) {
    (*remote_clock_sync_).Serialize(msg->BeginNestedMessage<::protozero::Message>(107));
  }

  // Field 110: pixel_modem_events
  if (_has_field_[110]) {
    (*pixel_modem_events_).Serialize(msg->BeginNestedMessage<::protozero::Message>(110));
  }

  // Field 111: pixel_modem_token_database
  if (_has_field_[111]) {
    (*pixel_modem_token_database_).Serialize(msg->BeginNestedMessage<::protozero::Message>(111));
  }

  // Field 900: for_testing
  if (_has_field_[900]) {
    (*for_testing_).Serialize(msg->BeginNestedMessage<::protozero::Message>(900));
  }

  // Field 3: trusted_uid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, trusted_uid_, msg);
  }

  // Field 10: trusted_packet_sequence_id
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, trusted_packet_sequence_id_, msg);
  }

  // Field 79: trusted_pid
  if (_has_field_[79]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(79, trusted_pid_, msg);
  }

  // Field 12: interned_data
  if (_has_field_[12]) {
    (*interned_data_).Serialize(msg->BeginNestedMessage<::protozero::Message>(12));
  }

  // Field 13: sequence_flags
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, sequence_flags_, msg);
  }

  // Field 41: incremental_state_cleared
  if (_has_field_[41]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(41, incremental_state_cleared_, msg);
  }

  // Field 59: trace_packet_defaults
  if (_has_field_[59]) {
    (*trace_packet_defaults_).Serialize(msg->BeginNestedMessage<::protozero::Message>(59));
  }

  // Field 42: previous_packet_dropped
  if (_has_field_[42]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(42, previous_packet_dropped_, msg);
  }

  // Field 87: first_packet_on_sequence
  if (_has_field_[87]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(87, first_packet_on_sequence_, msg);
  }

  // Field 98: machine_id
  if (_has_field_[98]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(98, machine_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
