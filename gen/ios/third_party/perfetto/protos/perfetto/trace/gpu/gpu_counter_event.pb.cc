// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/gpu_counter_event.proto

#include "protos/perfetto/trace/gpu/gpu_counter_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR GpuCounterEvent_GpuCounter::GpuCounterEvent_GpuCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.counter_id_)*/0u
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GpuCounterEvent_GpuCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterEvent_GpuCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterEvent_GpuCounterDefaultTypeInternal() {}
  union {
    GpuCounterEvent_GpuCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterEvent_GpuCounterDefaultTypeInternal _GpuCounterEvent_GpuCounter_default_instance_;
PROTOBUF_CONSTEXPR GpuCounterEvent::GpuCounterEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.counters_)*/{}
  , /*decltype(_impl_.counter_descriptor_)*/nullptr
  , /*decltype(_impl_.gpu_id_)*/0} {}
struct GpuCounterEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterEventDefaultTypeInternal() {}
  union {
    GpuCounterEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterEventDefaultTypeInternal _GpuCounterEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class GpuCounterEvent_GpuCounter::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterEvent_GpuCounter>()._impl_._has_bits_);
  static void set_has_counter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GpuCounterEvent_GpuCounter::GpuCounterEvent_GpuCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterEvent.GpuCounter)
}
GpuCounterEvent_GpuCounter::GpuCounterEvent_GpuCounter(const GpuCounterEvent_GpuCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpuCounterEvent_GpuCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counter_id_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.counter_id_ = from._impl_.counter_id_;
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterEvent.GpuCounter)
}

inline void GpuCounterEvent_GpuCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counter_id_){0u}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

GpuCounterEvent_GpuCounter::~GpuCounterEvent_GpuCounter() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterEvent.GpuCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterEvent_GpuCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void GpuCounterEvent_GpuCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterEvent_GpuCounter::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void GpuCounterEvent_GpuCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counter_id_ = 0u;
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GpuCounterEvent_GpuCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 counter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_counter_id(&has_bits);
          _impl_.counter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpuCounterEvent_GpuCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 counter_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_counter_id(), target);
  }

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_int_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_value(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterEvent.GpuCounter)
  return target;
}

size_t GpuCounterEvent_GpuCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 counter_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_counter_id());
  }

  switch (value_case()) {
    // int64 int_value = 2;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int_value());
      break;
    }
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterEvent_GpuCounter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpuCounterEvent_GpuCounter*>(
      &from));
}

void GpuCounterEvent_GpuCounter::MergeFrom(const GpuCounterEvent_GpuCounter& from) {
  GpuCounterEvent_GpuCounter* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_counter_id()) {
    _this->_internal_set_counter_id(from._internal_counter_id());
  }
  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpuCounterEvent_GpuCounter::CopyFrom(const GpuCounterEvent_GpuCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterEvent.GpuCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterEvent_GpuCounter::IsInitialized() const {
  return true;
}

void GpuCounterEvent_GpuCounter::InternalSwap(GpuCounterEvent_GpuCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.counter_id_, other->_impl_.counter_id_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string GpuCounterEvent_GpuCounter::GetTypeName() const {
  return "perfetto.protos.GpuCounterEvent.GpuCounter";
}


// ===================================================================

class GpuCounterEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterEvent>()._impl_._has_bits_);
  static const ::perfetto::protos::GpuCounterDescriptor& counter_descriptor(const GpuCounterEvent* msg);
  static void set_has_counter_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::GpuCounterDescriptor&
GpuCounterEvent::_Internal::counter_descriptor(const GpuCounterEvent* msg) {
  return *msg->_impl_.counter_descriptor_;
}
void GpuCounterEvent::clear_counter_descriptor() {
  if (_impl_.counter_descriptor_ != nullptr) _impl_.counter_descriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GpuCounterEvent::GpuCounterEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterEvent)
}
GpuCounterEvent::GpuCounterEvent(const GpuCounterEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpuCounterEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counters_){from._impl_.counters_}
    , decltype(_impl_.counter_descriptor_){nullptr}
    , decltype(_impl_.gpu_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_counter_descriptor()) {
    _this->_impl_.counter_descriptor_ = new ::perfetto::protos::GpuCounterDescriptor(*from._impl_.counter_descriptor_);
  }
  _this->_impl_.gpu_id_ = from._impl_.gpu_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterEvent)
}

inline void GpuCounterEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counters_){arena}
    , decltype(_impl_.counter_descriptor_){nullptr}
    , decltype(_impl_.gpu_id_){0}
  };
}

GpuCounterEvent::~GpuCounterEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counters_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.counter_descriptor_;
}

void GpuCounterEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counters_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.counter_descriptor_ != nullptr);
    _impl_.counter_descriptor_->Clear();
  }
  _impl_.gpu_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GpuCounterEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 gpu_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gpu_id(&has_bits);
          _impl_.gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpuCounterEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::counter_descriptor(this),
        _Internal::counter_descriptor(this).GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counters_size()); i < n; i++) {
    const auto& repfield = this->_internal_counters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 gpu_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gpu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterEvent)
  return target;
}

size_t GpuCounterEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
  total_size += 1UL * this->_internal_counters_size();
  for (const auto& msg : this->_impl_.counters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.counter_descriptor_);
    }

    // optional int32 gpu_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gpu_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuCounterEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpuCounterEvent*>(
      &from));
}

void GpuCounterEvent::MergeFrom(const GpuCounterEvent& from) {
  GpuCounterEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.counters_.MergeFrom(from._impl_.counters_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_counter_descriptor()->::perfetto::protos::GpuCounterDescriptor::MergeFrom(
          from._internal_counter_descriptor());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gpu_id_ = from._impl_.gpu_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpuCounterEvent::CopyFrom(const GpuCounterEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterEvent::IsInitialized() const {
  return true;
}

void GpuCounterEvent::InternalSwap(GpuCounterEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.counters_.InternalSwap(&other->_impl_.counters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuCounterEvent, _impl_.gpu_id_)
      + sizeof(GpuCounterEvent::_impl_.gpu_id_)
      - PROTOBUF_FIELD_OFFSET(GpuCounterEvent, _impl_.counter_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.counter_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.counter_descriptor_));
}

std::string GpuCounterEvent::GetTypeName() const {
  return "perfetto.protos.GpuCounterEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterEvent_GpuCounter*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterEvent_GpuCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterEvent_GpuCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
