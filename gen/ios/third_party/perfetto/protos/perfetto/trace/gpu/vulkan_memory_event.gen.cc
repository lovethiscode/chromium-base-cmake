#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/gpu/vulkan_memory_event.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

VulkanMemoryEvent::VulkanMemoryEvent() = default;
VulkanMemoryEvent::~VulkanMemoryEvent() = default;
VulkanMemoryEvent::VulkanMemoryEvent(const VulkanMemoryEvent&) = default;
VulkanMemoryEvent& VulkanMemoryEvent::operator=(const VulkanMemoryEvent&) = default;
VulkanMemoryEvent::VulkanMemoryEvent(VulkanMemoryEvent&&) noexcept = default;
VulkanMemoryEvent& VulkanMemoryEvent::operator=(VulkanMemoryEvent&&) = default;

bool VulkanMemoryEvent::operator==(const VulkanMemoryEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(source_, other.source_)
   && ::protozero::internal::gen_helpers::EqualsField(operation_, other.operation_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_, other.timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(memory_address_, other.memory_address_)
   && ::protozero::internal::gen_helpers::EqualsField(memory_size_, other.memory_size_)
   && ::protozero::internal::gen_helpers::EqualsField(caller_iid_, other.caller_iid_)
   && ::protozero::internal::gen_helpers::EqualsField(allocation_scope_, other.allocation_scope_)
   && ::protozero::internal::gen_helpers::EqualsField(annotations_, other.annotations_)
   && ::protozero::internal::gen_helpers::EqualsField(device_, other.device_)
   && ::protozero::internal::gen_helpers::EqualsField(device_memory_, other.device_memory_)
   && ::protozero::internal::gen_helpers::EqualsField(memory_type_, other.memory_type_)
   && ::protozero::internal::gen_helpers::EqualsField(heap_, other.heap_)
   && ::protozero::internal::gen_helpers::EqualsField(object_handle_, other.object_handle_);
}

int VulkanMemoryEvent::annotations_size() const { return static_cast<int>(annotations_.size()); }
void VulkanMemoryEvent::clear_annotations() { annotations_.clear(); }
VulkanMemoryEventAnnotation* VulkanMemoryEvent::add_annotations() { annotations_.emplace_back(); return &annotations_.back(); }
bool VulkanMemoryEvent::ParseFromArray(const void* raw, size_t size) {
  annotations_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* source */:
        field.get(&source_);
        break;
      case 2 /* operation */:
        field.get(&operation_);
        break;
      case 3 /* timestamp */:
        field.get(&timestamp_);
        break;
      case 4 /* pid */:
        field.get(&pid_);
        break;
      case 5 /* memory_address */:
        field.get(&memory_address_);
        break;
      case 6 /* memory_size */:
        field.get(&memory_size_);
        break;
      case 7 /* caller_iid */:
        field.get(&caller_iid_);
        break;
      case 8 /* allocation_scope */:
        field.get(&allocation_scope_);
        break;
      case 9 /* annotations */:
        annotations_.emplace_back();
        annotations_.back().ParseFromArray(field.data(), field.size());
        break;
      case 16 /* device */:
        field.get(&device_);
        break;
      case 17 /* device_memory */:
        field.get(&device_memory_);
        break;
      case 18 /* memory_type */:
        field.get(&memory_type_);
        break;
      case 19 /* heap */:
        field.get(&heap_);
        break;
      case 20 /* object_handle */:
        field.get(&object_handle_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string VulkanMemoryEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> VulkanMemoryEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void VulkanMemoryEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: source
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, source_, msg);
  }

  // Field 2: operation
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, operation_, msg);
  }

  // Field 3: timestamp
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, timestamp_, msg);
  }

  // Field 4: pid
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, pid_, msg);
  }

  // Field 5: memory_address
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeFixed(5, memory_address_, msg);
  }

  // Field 6: memory_size
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, memory_size_, msg);
  }

  // Field 7: caller_iid
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, caller_iid_, msg);
  }

  // Field 8: allocation_scope
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, allocation_scope_, msg);
  }

  // Field 9: annotations
  for (auto& it : annotations_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(9));
  }

  // Field 16: device
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeFixed(16, device_, msg);
  }

  // Field 17: device_memory
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeFixed(17, device_memory_, msg);
  }

  // Field 18: memory_type
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(18, memory_type_, msg);
  }

  // Field 19: heap
  if (_has_field_[19]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(19, heap_, msg);
  }

  // Field 20: object_handle
  if (_has_field_[20]) {
    ::protozero::internal::gen_helpers::SerializeFixed(20, object_handle_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation() = default;
VulkanMemoryEventAnnotation::~VulkanMemoryEventAnnotation() = default;
VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(const VulkanMemoryEventAnnotation&) = default;
VulkanMemoryEventAnnotation& VulkanMemoryEventAnnotation::operator=(const VulkanMemoryEventAnnotation&) = default;
VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(VulkanMemoryEventAnnotation&&) noexcept = default;
VulkanMemoryEventAnnotation& VulkanMemoryEventAnnotation::operator=(VulkanMemoryEventAnnotation&&) = default;

bool VulkanMemoryEventAnnotation::operator==(const VulkanMemoryEventAnnotation& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(key_iid_, other.key_iid_)
   && ::protozero::internal::gen_helpers::EqualsField(int_value_, other.int_value_)
   && ::protozero::internal::gen_helpers::EqualsField(double_value_, other.double_value_)
   && ::protozero::internal::gen_helpers::EqualsField(string_iid_, other.string_iid_);
}

bool VulkanMemoryEventAnnotation::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* key_iid */:
        field.get(&key_iid_);
        break;
      case 2 /* int_value */:
        field.get(&int_value_);
        break;
      case 3 /* double_value */:
        field.get(&double_value_);
        break;
      case 4 /* string_iid */:
        field.get(&string_iid_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string VulkanMemoryEventAnnotation::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> VulkanMemoryEventAnnotation::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void VulkanMemoryEventAnnotation::Serialize(::protozero::Message* msg) const {
  // Field 1: key_iid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, key_iid_, msg);
  }

  // Field 2: int_value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, int_value_, msg);
  }

  // Field 3: double_value
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, double_value_, msg);
  }

  // Field 4: string_iid
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, string_iid_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
