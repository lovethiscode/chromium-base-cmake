// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/heap_graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/trace/profiling/deobfuscation.pb.h"
#include "protos/perfetto/trace/profiling/profile_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class HeapGraph;
struct HeapGraphDefaultTypeInternal;
extern HeapGraphDefaultTypeInternal _HeapGraph_default_instance_;
class HeapGraphObject;
struct HeapGraphObjectDefaultTypeInternal;
extern HeapGraphObjectDefaultTypeInternal _HeapGraphObject_default_instance_;
class HeapGraphRoot;
struct HeapGraphRootDefaultTypeInternal;
extern HeapGraphRootDefaultTypeInternal _HeapGraphRoot_default_instance_;
class HeapGraphType;
struct HeapGraphTypeDefaultTypeInternal;
extern HeapGraphTypeDefaultTypeInternal _HeapGraphType_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::HeapGraph* Arena::CreateMaybeMessage<::perfetto::protos::HeapGraph>(Arena*);
template<> ::perfetto::protos::HeapGraphObject* Arena::CreateMaybeMessage<::perfetto::protos::HeapGraphObject>(Arena*);
template<> ::perfetto::protos::HeapGraphRoot* Arena::CreateMaybeMessage<::perfetto::protos::HeapGraphRoot>(Arena*);
template<> ::perfetto::protos::HeapGraphType* Arena::CreateMaybeMessage<::perfetto::protos::HeapGraphType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum HeapGraphRoot_Type : int {
  HeapGraphRoot_Type_ROOT_UNKNOWN = 0,
  HeapGraphRoot_Type_ROOT_JNI_GLOBAL = 1,
  HeapGraphRoot_Type_ROOT_JNI_LOCAL = 2,
  HeapGraphRoot_Type_ROOT_JAVA_FRAME = 3,
  HeapGraphRoot_Type_ROOT_NATIVE_STACK = 4,
  HeapGraphRoot_Type_ROOT_STICKY_CLASS = 5,
  HeapGraphRoot_Type_ROOT_THREAD_BLOCK = 6,
  HeapGraphRoot_Type_ROOT_MONITOR_USED = 7,
  HeapGraphRoot_Type_ROOT_THREAD_OBJECT = 8,
  HeapGraphRoot_Type_ROOT_INTERNED_STRING = 9,
  HeapGraphRoot_Type_ROOT_FINALIZING = 10,
  HeapGraphRoot_Type_ROOT_DEBUGGER = 11,
  HeapGraphRoot_Type_ROOT_REFERENCE_CLEANUP = 12,
  HeapGraphRoot_Type_ROOT_VM_INTERNAL = 13,
  HeapGraphRoot_Type_ROOT_JNI_MONITOR = 14
};
bool HeapGraphRoot_Type_IsValid(int value);
constexpr HeapGraphRoot_Type HeapGraphRoot_Type_Type_MIN = HeapGraphRoot_Type_ROOT_UNKNOWN;
constexpr HeapGraphRoot_Type HeapGraphRoot_Type_Type_MAX = HeapGraphRoot_Type_ROOT_JNI_MONITOR;
constexpr int HeapGraphRoot_Type_Type_ARRAYSIZE = HeapGraphRoot_Type_Type_MAX + 1;

const std::string& HeapGraphRoot_Type_Name(HeapGraphRoot_Type value);
template<typename T>
inline const std::string& HeapGraphRoot_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeapGraphRoot_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeapGraphRoot_Type_Name.");
  return HeapGraphRoot_Type_Name(static_cast<HeapGraphRoot_Type>(enum_t_value));
}
bool HeapGraphRoot_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeapGraphRoot_Type* value);
enum HeapGraphType_Kind : int {
  HeapGraphType_Kind_KIND_UNKNOWN = 0,
  HeapGraphType_Kind_KIND_NORMAL = 1,
  HeapGraphType_Kind_KIND_NOREFERENCES = 2,
  HeapGraphType_Kind_KIND_STRING = 3,
  HeapGraphType_Kind_KIND_ARRAY = 4,
  HeapGraphType_Kind_KIND_CLASS = 5,
  HeapGraphType_Kind_KIND_CLASSLOADER = 6,
  HeapGraphType_Kind_KIND_DEXCACHE = 7,
  HeapGraphType_Kind_KIND_SOFT_REFERENCE = 8,
  HeapGraphType_Kind_KIND_WEAK_REFERENCE = 9,
  HeapGraphType_Kind_KIND_FINALIZER_REFERENCE = 10,
  HeapGraphType_Kind_KIND_PHANTOM_REFERENCE = 11
};
bool HeapGraphType_Kind_IsValid(int value);
constexpr HeapGraphType_Kind HeapGraphType_Kind_Kind_MIN = HeapGraphType_Kind_KIND_UNKNOWN;
constexpr HeapGraphType_Kind HeapGraphType_Kind_Kind_MAX = HeapGraphType_Kind_KIND_PHANTOM_REFERENCE;
constexpr int HeapGraphType_Kind_Kind_ARRAYSIZE = HeapGraphType_Kind_Kind_MAX + 1;

const std::string& HeapGraphType_Kind_Name(HeapGraphType_Kind value);
template<typename T>
inline const std::string& HeapGraphType_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeapGraphType_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeapGraphType_Kind_Name.");
  return HeapGraphType_Kind_Name(static_cast<HeapGraphType_Kind>(enum_t_value));
}
bool HeapGraphType_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeapGraphType_Kind* value);
// ===================================================================

class HeapGraphRoot final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapGraphRoot) */ {
 public:
  inline HeapGraphRoot() : HeapGraphRoot(nullptr) {}
  ~HeapGraphRoot() override;
  explicit PROTOBUF_CONSTEXPR HeapGraphRoot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeapGraphRoot(const HeapGraphRoot& from);
  HeapGraphRoot(HeapGraphRoot&& from) noexcept
    : HeapGraphRoot() {
    *this = ::std::move(from);
  }

  inline HeapGraphRoot& operator=(const HeapGraphRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapGraphRoot& operator=(HeapGraphRoot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HeapGraphRoot& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeapGraphRoot* internal_default_instance() {
    return reinterpret_cast<const HeapGraphRoot*>(
               &_HeapGraphRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeapGraphRoot& a, HeapGraphRoot& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HeapGraphRoot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeapGraphRoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeapGraphRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeapGraphRoot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HeapGraphRoot& from);
  void MergeFrom(const HeapGraphRoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapGraphRoot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.HeapGraphRoot";
  }
  protected:
  explicit HeapGraphRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef HeapGraphRoot_Type Type;
  static constexpr Type ROOT_UNKNOWN =
    HeapGraphRoot_Type_ROOT_UNKNOWN;
  static constexpr Type ROOT_JNI_GLOBAL =
    HeapGraphRoot_Type_ROOT_JNI_GLOBAL;
  static constexpr Type ROOT_JNI_LOCAL =
    HeapGraphRoot_Type_ROOT_JNI_LOCAL;
  static constexpr Type ROOT_JAVA_FRAME =
    HeapGraphRoot_Type_ROOT_JAVA_FRAME;
  static constexpr Type ROOT_NATIVE_STACK =
    HeapGraphRoot_Type_ROOT_NATIVE_STACK;
  static constexpr Type ROOT_STICKY_CLASS =
    HeapGraphRoot_Type_ROOT_STICKY_CLASS;
  static constexpr Type ROOT_THREAD_BLOCK =
    HeapGraphRoot_Type_ROOT_THREAD_BLOCK;
  static constexpr Type ROOT_MONITOR_USED =
    HeapGraphRoot_Type_ROOT_MONITOR_USED;
  static constexpr Type ROOT_THREAD_OBJECT =
    HeapGraphRoot_Type_ROOT_THREAD_OBJECT;
  static constexpr Type ROOT_INTERNED_STRING =
    HeapGraphRoot_Type_ROOT_INTERNED_STRING;
  static constexpr Type ROOT_FINALIZING =
    HeapGraphRoot_Type_ROOT_FINALIZING;
  static constexpr Type ROOT_DEBUGGER =
    HeapGraphRoot_Type_ROOT_DEBUGGER;
  static constexpr Type ROOT_REFERENCE_CLEANUP =
    HeapGraphRoot_Type_ROOT_REFERENCE_CLEANUP;
  static constexpr Type ROOT_VM_INTERNAL =
    HeapGraphRoot_Type_ROOT_VM_INTERNAL;
  static constexpr Type ROOT_JNI_MONITOR =
    HeapGraphRoot_Type_ROOT_JNI_MONITOR;
  static inline bool Type_IsValid(int value) {
    return HeapGraphRoot_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    HeapGraphRoot_Type_Type_MIN;
  static constexpr Type Type_MAX =
    HeapGraphRoot_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    HeapGraphRoot_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return HeapGraphRoot_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return HeapGraphRoot_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 1,
    kRootTypeFieldNumber = 2,
  };
  // repeated uint64 object_ids = 1 [packed = true];
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  uint64_t _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_object_ids() const;
  void _internal_add_object_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_object_ids();
  public:
  uint64_t object_ids(int index) const;
  void set_object_ids(int index, uint64_t value);
  void add_object_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_object_ids();

  // optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
  bool has_root_type() const;
  private:
  bool _internal_has_root_type() const;
  public:
  void clear_root_type();
  ::perfetto::protos::HeapGraphRoot_Type root_type() const;
  void set_root_type(::perfetto::protos::HeapGraphRoot_Type value);
  private:
  ::perfetto::protos::HeapGraphRoot_Type _internal_root_type() const;
  void _internal_set_root_type(::perfetto::protos::HeapGraphRoot_Type value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapGraphRoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > object_ids_;
    mutable std::atomic<int> _object_ids_cached_byte_size_;
    int root_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class HeapGraphType final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapGraphType) */ {
 public:
  inline HeapGraphType() : HeapGraphType(nullptr) {}
  ~HeapGraphType() override;
  explicit PROTOBUF_CONSTEXPR HeapGraphType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeapGraphType(const HeapGraphType& from);
  HeapGraphType(HeapGraphType&& from) noexcept
    : HeapGraphType() {
    *this = ::std::move(from);
  }

  inline HeapGraphType& operator=(const HeapGraphType& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapGraphType& operator=(HeapGraphType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HeapGraphType& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeapGraphType* internal_default_instance() {
    return reinterpret_cast<const HeapGraphType*>(
               &_HeapGraphType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeapGraphType& a, HeapGraphType& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HeapGraphType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeapGraphType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeapGraphType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeapGraphType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HeapGraphType& from);
  void MergeFrom(const HeapGraphType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapGraphType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.HeapGraphType";
  }
  protected:
  explicit HeapGraphType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef HeapGraphType_Kind Kind;
  static constexpr Kind KIND_UNKNOWN =
    HeapGraphType_Kind_KIND_UNKNOWN;
  static constexpr Kind KIND_NORMAL =
    HeapGraphType_Kind_KIND_NORMAL;
  static constexpr Kind KIND_NOREFERENCES =
    HeapGraphType_Kind_KIND_NOREFERENCES;
  static constexpr Kind KIND_STRING =
    HeapGraphType_Kind_KIND_STRING;
  static constexpr Kind KIND_ARRAY =
    HeapGraphType_Kind_KIND_ARRAY;
  static constexpr Kind KIND_CLASS =
    HeapGraphType_Kind_KIND_CLASS;
  static constexpr Kind KIND_CLASSLOADER =
    HeapGraphType_Kind_KIND_CLASSLOADER;
  static constexpr Kind KIND_DEXCACHE =
    HeapGraphType_Kind_KIND_DEXCACHE;
  static constexpr Kind KIND_SOFT_REFERENCE =
    HeapGraphType_Kind_KIND_SOFT_REFERENCE;
  static constexpr Kind KIND_WEAK_REFERENCE =
    HeapGraphType_Kind_KIND_WEAK_REFERENCE;
  static constexpr Kind KIND_FINALIZER_REFERENCE =
    HeapGraphType_Kind_KIND_FINALIZER_REFERENCE;
  static constexpr Kind KIND_PHANTOM_REFERENCE =
    HeapGraphType_Kind_KIND_PHANTOM_REFERENCE;
  static inline bool Kind_IsValid(int value) {
    return HeapGraphType_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    HeapGraphType_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    HeapGraphType_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    HeapGraphType_Kind_Kind_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return HeapGraphType_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return HeapGraphType_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldIdFieldNumber = 6,
    kClassNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kObjectSizeFieldNumber = 4,
    kSuperclassIdFieldNumber = 5,
    kClassloaderIdFieldNumber = 8,
    kKindFieldNumber = 7,
  };
  // repeated uint64 reference_field_id = 6 [packed = true];
  int reference_field_id_size() const;
  private:
  int _internal_reference_field_id_size() const;
  public:
  void clear_reference_field_id();
  private:
  uint64_t _internal_reference_field_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_reference_field_id() const;
  void _internal_add_reference_field_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_reference_field_id();
  public:
  uint64_t reference_field_id(int index) const;
  void set_reference_field_id(int index, uint64_t value);
  void add_reference_field_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      reference_field_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_reference_field_id();

  // optional string class_name = 3;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint64 location_id = 2;
  bool has_location_id() const;
  private:
  bool _internal_has_location_id() const;
  public:
  void clear_location_id();
  uint64_t location_id() const;
  void set_location_id(uint64_t value);
  private:
  uint64_t _internal_location_id() const;
  void _internal_set_location_id(uint64_t value);
  public:

  // optional uint64 object_size = 4;
  bool has_object_size() const;
  private:
  bool _internal_has_object_size() const;
  public:
  void clear_object_size();
  uint64_t object_size() const;
  void set_object_size(uint64_t value);
  private:
  uint64_t _internal_object_size() const;
  void _internal_set_object_size(uint64_t value);
  public:

  // optional uint64 superclass_id = 5;
  bool has_superclass_id() const;
  private:
  bool _internal_has_superclass_id() const;
  public:
  void clear_superclass_id();
  uint64_t superclass_id() const;
  void set_superclass_id(uint64_t value);
  private:
  uint64_t _internal_superclass_id() const;
  void _internal_set_superclass_id(uint64_t value);
  public:

  // optional uint64 classloader_id = 8;
  bool has_classloader_id() const;
  private:
  bool _internal_has_classloader_id() const;
  public:
  void clear_classloader_id();
  uint64_t classloader_id() const;
  void set_classloader_id(uint64_t value);
  private:
  uint64_t _internal_classloader_id() const;
  void _internal_set_classloader_id(uint64_t value);
  public:

  // optional .perfetto.protos.HeapGraphType.Kind kind = 7;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::perfetto::protos::HeapGraphType_Kind kind() const;
  void set_kind(::perfetto::protos::HeapGraphType_Kind value);
  private:
  ::perfetto::protos::HeapGraphType_Kind _internal_kind() const;
  void _internal_set_kind(::perfetto::protos::HeapGraphType_Kind value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapGraphType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > reference_field_id_;
    mutable std::atomic<int> _reference_field_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
    uint64_t id_;
    uint64_t location_id_;
    uint64_t object_size_;
    uint64_t superclass_id_;
    uint64_t classloader_id_;
    int kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class HeapGraphObject final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapGraphObject) */ {
 public:
  inline HeapGraphObject() : HeapGraphObject(nullptr) {}
  ~HeapGraphObject() override;
  explicit PROTOBUF_CONSTEXPR HeapGraphObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeapGraphObject(const HeapGraphObject& from);
  HeapGraphObject(HeapGraphObject&& from) noexcept
    : HeapGraphObject() {
    *this = ::std::move(from);
  }

  inline HeapGraphObject& operator=(const HeapGraphObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapGraphObject& operator=(HeapGraphObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HeapGraphObject& default_instance() {
    return *internal_default_instance();
  }
  enum IdentifierCase {
    kId = 1,
    kIdDelta = 7,
    IDENTIFIER_NOT_SET = 0,
  };

  static inline const HeapGraphObject* internal_default_instance() {
    return reinterpret_cast<const HeapGraphObject*>(
               &_HeapGraphObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeapGraphObject& a, HeapGraphObject& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HeapGraphObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeapGraphObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeapGraphObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeapGraphObject>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HeapGraphObject& from);
  void MergeFrom(const HeapGraphObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapGraphObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.HeapGraphObject";
  }
  protected:
  explicit HeapGraphObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldIdFieldNumber = 4,
    kReferenceObjectIdFieldNumber = 5,
    kTypeIdFieldNumber = 2,
    kSelfSizeFieldNumber = 3,
    kReferenceFieldIdBaseFieldNumber = 6,
    kNativeAllocationRegistrySizeFieldFieldNumber = 8,
    kIdFieldNumber = 1,
    kIdDeltaFieldNumber = 7,
  };
  // repeated uint64 reference_field_id = 4 [packed = true];
  int reference_field_id_size() const;
  private:
  int _internal_reference_field_id_size() const;
  public:
  void clear_reference_field_id();
  private:
  uint64_t _internal_reference_field_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_reference_field_id() const;
  void _internal_add_reference_field_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_reference_field_id();
  public:
  uint64_t reference_field_id(int index) const;
  void set_reference_field_id(int index, uint64_t value);
  void add_reference_field_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      reference_field_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_reference_field_id();

  // repeated uint64 reference_object_id = 5 [packed = true];
  int reference_object_id_size() const;
  private:
  int _internal_reference_object_id_size() const;
  public:
  void clear_reference_object_id();
  private:
  uint64_t _internal_reference_object_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_reference_object_id() const;
  void _internal_add_reference_object_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_reference_object_id();
  public:
  uint64_t reference_object_id(int index) const;
  void set_reference_object_id(int index, uint64_t value);
  void add_reference_object_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      reference_object_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_reference_object_id();

  // optional uint64 type_id = 2;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  uint64_t type_id() const;
  void set_type_id(uint64_t value);
  private:
  uint64_t _internal_type_id() const;
  void _internal_set_type_id(uint64_t value);
  public:

  // optional uint64 self_size = 3;
  bool has_self_size() const;
  private:
  bool _internal_has_self_size() const;
  public:
  void clear_self_size();
  uint64_t self_size() const;
  void set_self_size(uint64_t value);
  private:
  uint64_t _internal_self_size() const;
  void _internal_set_self_size(uint64_t value);
  public:

  // optional uint64 reference_field_id_base = 6;
  bool has_reference_field_id_base() const;
  private:
  bool _internal_has_reference_field_id_base() const;
  public:
  void clear_reference_field_id_base();
  uint64_t reference_field_id_base() const;
  void set_reference_field_id_base(uint64_t value);
  private:
  uint64_t _internal_reference_field_id_base() const;
  void _internal_set_reference_field_id_base(uint64_t value);
  public:

  // optional int64 native_allocation_registry_size_field = 8;
  bool has_native_allocation_registry_size_field() const;
  private:
  bool _internal_has_native_allocation_registry_size_field() const;
  public:
  void clear_native_allocation_registry_size_field();
  int64_t native_allocation_registry_size_field() const;
  void set_native_allocation_registry_size_field(int64_t value);
  private:
  int64_t _internal_native_allocation_registry_size_field() const;
  void _internal_set_native_allocation_registry_size_field(int64_t value);
  public:

  // uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 id_delta = 7;
  bool has_id_delta() const;
  private:
  bool _internal_has_id_delta() const;
  public:
  void clear_id_delta();
  uint64_t id_delta() const;
  void set_id_delta(uint64_t value);
  private:
  uint64_t _internal_id_delta() const;
  void _internal_set_id_delta(uint64_t value);
  public:

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapGraphObject)
 private:
  class _Internal;
  void set_has_id();
  void set_has_id_delta();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > reference_field_id_;
    mutable std::atomic<int> _reference_field_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > reference_object_id_;
    mutable std::atomic<int> _reference_object_id_cached_byte_size_;
    uint64_t type_id_;
    uint64_t self_size_;
    uint64_t reference_field_id_base_;
    int64_t native_allocation_registry_size_field_;
    union IdentifierUnion {
      constexpr IdentifierUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t id_;
      uint64_t id_delta_;
    } identifier_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto;
};
// -------------------------------------------------------------------

class HeapGraph final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapGraph) */ {
 public:
  inline HeapGraph() : HeapGraph(nullptr) {}
  ~HeapGraph() override;
  explicit PROTOBUF_CONSTEXPR HeapGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeapGraph(const HeapGraph& from);
  HeapGraph(HeapGraph&& from) noexcept
    : HeapGraph() {
    *this = ::std::move(from);
  }

  inline HeapGraph& operator=(const HeapGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeapGraph& operator=(HeapGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HeapGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeapGraph* internal_default_instance() {
    return reinterpret_cast<const HeapGraph*>(
               &_HeapGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeapGraph& a, HeapGraph& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HeapGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeapGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeapGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeapGraph>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HeapGraph& from);
  void MergeFrom(const HeapGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.HeapGraph";
  }
  protected:
  explicit HeapGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kFieldNamesFieldNumber = 4,
    kRootsFieldNumber = 7,
    kLocationNamesFieldNumber = 8,
    kTypesFieldNumber = 9,
    kPidFieldNumber = 1,
    kContinuedFieldNumber = 5,
    kIndexFieldNumber = 6,
  };
  // repeated .perfetto.protos.HeapGraphObject objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::perfetto::protos::HeapGraphObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphObject >*
      mutable_objects();
  private:
  const ::perfetto::protos::HeapGraphObject& _internal_objects(int index) const;
  ::perfetto::protos::HeapGraphObject* _internal_add_objects();
  public:
  const ::perfetto::protos::HeapGraphObject& objects(int index) const;
  ::perfetto::protos::HeapGraphObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphObject >&
      objects() const;

  // repeated .perfetto.protos.InternedString field_names = 4;
  int field_names_size() const;
  private:
  int _internal_field_names_size() const;
  public:
  void clear_field_names();
  ::perfetto::protos::InternedString* mutable_field_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
      mutable_field_names();
  private:
  const ::perfetto::protos::InternedString& _internal_field_names(int index) const;
  ::perfetto::protos::InternedString* _internal_add_field_names();
  public:
  const ::perfetto::protos::InternedString& field_names(int index) const;
  ::perfetto::protos::InternedString* add_field_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
      field_names() const;

  // repeated .perfetto.protos.HeapGraphRoot roots = 7;
  int roots_size() const;
  private:
  int _internal_roots_size() const;
  public:
  void clear_roots();
  ::perfetto::protos::HeapGraphRoot* mutable_roots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphRoot >*
      mutable_roots();
  private:
  const ::perfetto::protos::HeapGraphRoot& _internal_roots(int index) const;
  ::perfetto::protos::HeapGraphRoot* _internal_add_roots();
  public:
  const ::perfetto::protos::HeapGraphRoot& roots(int index) const;
  ::perfetto::protos::HeapGraphRoot* add_roots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphRoot >&
      roots() const;

  // repeated .perfetto.protos.InternedString location_names = 8;
  int location_names_size() const;
  private:
  int _internal_location_names_size() const;
  public:
  void clear_location_names();
  ::perfetto::protos::InternedString* mutable_location_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
      mutable_location_names();
  private:
  const ::perfetto::protos::InternedString& _internal_location_names(int index) const;
  ::perfetto::protos::InternedString* _internal_add_location_names();
  public:
  const ::perfetto::protos::InternedString& location_names(int index) const;
  ::perfetto::protos::InternedString* add_location_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
      location_names() const;

  // repeated .perfetto.protos.HeapGraphType types = 9;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  ::perfetto::protos::HeapGraphType* mutable_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphType >*
      mutable_types();
  private:
  const ::perfetto::protos::HeapGraphType& _internal_types(int index) const;
  ::perfetto::protos::HeapGraphType* _internal_add_types();
  public:
  const ::perfetto::protos::HeapGraphType& types(int index) const;
  ::perfetto::protos::HeapGraphType* add_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphType >&
      types() const;

  // optional int32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // optional bool continued = 5;
  bool has_continued() const;
  private:
  bool _internal_has_continued() const;
  public:
  void clear_continued();
  bool continued() const;
  void set_continued(bool value);
  private:
  bool _internal_continued() const;
  void _internal_set_continued(bool value);
  public:

  // optional uint64 index = 6;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphObject > objects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString > field_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphRoot > roots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString > location_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphType > types_;
    int32_t pid_;
    bool continued_;
    uint64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeapGraphRoot

// repeated uint64 object_ids = 1 [packed = true];
inline int HeapGraphRoot::_internal_object_ids_size() const {
  return _impl_.object_ids_.size();
}
inline int HeapGraphRoot::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void HeapGraphRoot::clear_object_ids() {
  _impl_.object_ids_.Clear();
}
inline uint64_t HeapGraphRoot::_internal_object_ids(int index) const {
  return _impl_.object_ids_.Get(index);
}
inline uint64_t HeapGraphRoot::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphRoot.object_ids)
  return _internal_object_ids(index);
}
inline void HeapGraphRoot::set_object_ids(int index, uint64_t value) {
  _impl_.object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphRoot.object_ids)
}
inline void HeapGraphRoot::_internal_add_object_ids(uint64_t value) {
  _impl_.object_ids_.Add(value);
}
inline void HeapGraphRoot::add_object_ids(uint64_t value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraphRoot.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphRoot::_internal_object_ids() const {
  return _impl_.object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphRoot::object_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraphRoot.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphRoot::_internal_mutable_object_ids() {
  return &_impl_.object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphRoot::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraphRoot.object_ids)
  return _internal_mutable_object_ids();
}

// optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
inline bool HeapGraphRoot::_internal_has_root_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeapGraphRoot::has_root_type() const {
  return _internal_has_root_type();
}
inline void HeapGraphRoot::clear_root_type() {
  _impl_.root_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::HeapGraphRoot_Type HeapGraphRoot::_internal_root_type() const {
  return static_cast< ::perfetto::protos::HeapGraphRoot_Type >(_impl_.root_type_);
}
inline ::perfetto::protos::HeapGraphRoot_Type HeapGraphRoot::root_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphRoot.root_type)
  return _internal_root_type();
}
inline void HeapGraphRoot::_internal_set_root_type(::perfetto::protos::HeapGraphRoot_Type value) {
  assert(::perfetto::protos::HeapGraphRoot_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.root_type_ = value;
}
inline void HeapGraphRoot::set_root_type(::perfetto::protos::HeapGraphRoot_Type value) {
  _internal_set_root_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphRoot.root_type)
}

// -------------------------------------------------------------------

// HeapGraphType

// optional uint64 id = 1;
inline bool HeapGraphType::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeapGraphType::has_id() const {
  return _internal_has_id();
}
inline void HeapGraphType::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t HeapGraphType::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t HeapGraphType::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.id)
  return _internal_id();
}
inline void HeapGraphType::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void HeapGraphType::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.id)
}

// optional uint64 location_id = 2;
inline bool HeapGraphType::_internal_has_location_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeapGraphType::has_location_id() const {
  return _internal_has_location_id();
}
inline void HeapGraphType::clear_location_id() {
  _impl_.location_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t HeapGraphType::_internal_location_id() const {
  return _impl_.location_id_;
}
inline uint64_t HeapGraphType::location_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.location_id)
  return _internal_location_id();
}
inline void HeapGraphType::_internal_set_location_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.location_id_ = value;
}
inline void HeapGraphType::set_location_id(uint64_t value) {
  _internal_set_location_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.location_id)
}

// optional string class_name = 3;
inline bool HeapGraphType::_internal_has_class_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeapGraphType::has_class_name() const {
  return _internal_has_class_name();
}
inline void HeapGraphType::clear_class_name() {
  _impl_.class_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeapGraphType::class_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeapGraphType::set_class_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.class_name)
}
inline std::string* HeapGraphType::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapGraphType.class_name)
  return _s;
}
inline const std::string& HeapGraphType::_internal_class_name() const {
  return _impl_.class_name_.Get();
}
inline void HeapGraphType::_internal_set_class_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HeapGraphType::_internal_mutable_class_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HeapGraphType::release_class_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.HeapGraphType.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.class_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.class_name_.IsDefault()) {
    _impl_.class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HeapGraphType::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.class_name_.IsDefault()) {
    _impl_.class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.HeapGraphType.class_name)
}

// optional uint64 object_size = 4;
inline bool HeapGraphType::_internal_has_object_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HeapGraphType::has_object_size() const {
  return _internal_has_object_size();
}
inline void HeapGraphType::clear_object_size() {
  _impl_.object_size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t HeapGraphType::_internal_object_size() const {
  return _impl_.object_size_;
}
inline uint64_t HeapGraphType::object_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.object_size)
  return _internal_object_size();
}
inline void HeapGraphType::_internal_set_object_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.object_size_ = value;
}
inline void HeapGraphType::set_object_size(uint64_t value) {
  _internal_set_object_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.object_size)
}

// optional uint64 superclass_id = 5;
inline bool HeapGraphType::_internal_has_superclass_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HeapGraphType::has_superclass_id() const {
  return _internal_has_superclass_id();
}
inline void HeapGraphType::clear_superclass_id() {
  _impl_.superclass_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t HeapGraphType::_internal_superclass_id() const {
  return _impl_.superclass_id_;
}
inline uint64_t HeapGraphType::superclass_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.superclass_id)
  return _internal_superclass_id();
}
inline void HeapGraphType::_internal_set_superclass_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.superclass_id_ = value;
}
inline void HeapGraphType::set_superclass_id(uint64_t value) {
  _internal_set_superclass_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.superclass_id)
}

// repeated uint64 reference_field_id = 6 [packed = true];
inline int HeapGraphType::_internal_reference_field_id_size() const {
  return _impl_.reference_field_id_.size();
}
inline int HeapGraphType::reference_field_id_size() const {
  return _internal_reference_field_id_size();
}
inline void HeapGraphType::clear_reference_field_id() {
  _impl_.reference_field_id_.Clear();
}
inline uint64_t HeapGraphType::_internal_reference_field_id(int index) const {
  return _impl_.reference_field_id_.Get(index);
}
inline uint64_t HeapGraphType::reference_field_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.reference_field_id)
  return _internal_reference_field_id(index);
}
inline void HeapGraphType::set_reference_field_id(int index, uint64_t value) {
  _impl_.reference_field_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.reference_field_id)
}
inline void HeapGraphType::_internal_add_reference_field_id(uint64_t value) {
  _impl_.reference_field_id_.Add(value);
}
inline void HeapGraphType::add_reference_field_id(uint64_t value) {
  _internal_add_reference_field_id(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraphType.reference_field_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphType::_internal_reference_field_id() const {
  return _impl_.reference_field_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphType::reference_field_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraphType.reference_field_id)
  return _internal_reference_field_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphType::_internal_mutable_reference_field_id() {
  return &_impl_.reference_field_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphType::mutable_reference_field_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraphType.reference_field_id)
  return _internal_mutable_reference_field_id();
}

// optional .perfetto.protos.HeapGraphType.Kind kind = 7;
inline bool HeapGraphType::_internal_has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HeapGraphType::has_kind() const {
  return _internal_has_kind();
}
inline void HeapGraphType::clear_kind() {
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::perfetto::protos::HeapGraphType_Kind HeapGraphType::_internal_kind() const {
  return static_cast< ::perfetto::protos::HeapGraphType_Kind >(_impl_.kind_);
}
inline ::perfetto::protos::HeapGraphType_Kind HeapGraphType::kind() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.kind)
  return _internal_kind();
}
inline void HeapGraphType::_internal_set_kind(::perfetto::protos::HeapGraphType_Kind value) {
  assert(::perfetto::protos::HeapGraphType_Kind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.kind_ = value;
}
inline void HeapGraphType::set_kind(::perfetto::protos::HeapGraphType_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.kind)
}

// optional uint64 classloader_id = 8;
inline bool HeapGraphType::_internal_has_classloader_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HeapGraphType::has_classloader_id() const {
  return _internal_has_classloader_id();
}
inline void HeapGraphType::clear_classloader_id() {
  _impl_.classloader_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t HeapGraphType::_internal_classloader_id() const {
  return _impl_.classloader_id_;
}
inline uint64_t HeapGraphType::classloader_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphType.classloader_id)
  return _internal_classloader_id();
}
inline void HeapGraphType::_internal_set_classloader_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.classloader_id_ = value;
}
inline void HeapGraphType::set_classloader_id(uint64_t value) {
  _internal_set_classloader_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphType.classloader_id)
}

// -------------------------------------------------------------------

// HeapGraphObject

// uint64 id = 1;
inline bool HeapGraphObject::_internal_has_id() const {
  return identifier_case() == kId;
}
inline bool HeapGraphObject::has_id() const {
  return _internal_has_id();
}
inline void HeapGraphObject::set_has_id() {
  _impl_._oneof_case_[0] = kId;
}
inline void HeapGraphObject::clear_id() {
  if (_internal_has_id()) {
    _impl_.identifier_.id_ = uint64_t{0u};
    clear_has_identifier();
  }
}
inline uint64_t HeapGraphObject::_internal_id() const {
  if (_internal_has_id()) {
    return _impl_.identifier_.id_;
  }
  return uint64_t{0u};
}
inline void HeapGraphObject::_internal_set_id(uint64_t value) {
  if (!_internal_has_id()) {
    clear_identifier();
    set_has_id();
  }
  _impl_.identifier_.id_ = value;
}
inline uint64_t HeapGraphObject::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.id)
  return _internal_id();
}
inline void HeapGraphObject::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.id)
}

// uint64 id_delta = 7;
inline bool HeapGraphObject::_internal_has_id_delta() const {
  return identifier_case() == kIdDelta;
}
inline bool HeapGraphObject::has_id_delta() const {
  return _internal_has_id_delta();
}
inline void HeapGraphObject::set_has_id_delta() {
  _impl_._oneof_case_[0] = kIdDelta;
}
inline void HeapGraphObject::clear_id_delta() {
  if (_internal_has_id_delta()) {
    _impl_.identifier_.id_delta_ = uint64_t{0u};
    clear_has_identifier();
  }
}
inline uint64_t HeapGraphObject::_internal_id_delta() const {
  if (_internal_has_id_delta()) {
    return _impl_.identifier_.id_delta_;
  }
  return uint64_t{0u};
}
inline void HeapGraphObject::_internal_set_id_delta(uint64_t value) {
  if (!_internal_has_id_delta()) {
    clear_identifier();
    set_has_id_delta();
  }
  _impl_.identifier_.id_delta_ = value;
}
inline uint64_t HeapGraphObject::id_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.id_delta)
  return _internal_id_delta();
}
inline void HeapGraphObject::set_id_delta(uint64_t value) {
  _internal_set_id_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.id_delta)
}

// optional uint64 type_id = 2;
inline bool HeapGraphObject::_internal_has_type_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeapGraphObject::has_type_id() const {
  return _internal_has_type_id();
}
inline void HeapGraphObject::clear_type_id() {
  _impl_.type_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t HeapGraphObject::_internal_type_id() const {
  return _impl_.type_id_;
}
inline uint64_t HeapGraphObject::type_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.type_id)
  return _internal_type_id();
}
inline void HeapGraphObject::_internal_set_type_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_id_ = value;
}
inline void HeapGraphObject::set_type_id(uint64_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.type_id)
}

// optional uint64 self_size = 3;
inline bool HeapGraphObject::_internal_has_self_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeapGraphObject::has_self_size() const {
  return _internal_has_self_size();
}
inline void HeapGraphObject::clear_self_size() {
  _impl_.self_size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t HeapGraphObject::_internal_self_size() const {
  return _impl_.self_size_;
}
inline uint64_t HeapGraphObject::self_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.self_size)
  return _internal_self_size();
}
inline void HeapGraphObject::_internal_set_self_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.self_size_ = value;
}
inline void HeapGraphObject::set_self_size(uint64_t value) {
  _internal_set_self_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.self_size)
}

// optional uint64 reference_field_id_base = 6;
inline bool HeapGraphObject::_internal_has_reference_field_id_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeapGraphObject::has_reference_field_id_base() const {
  return _internal_has_reference_field_id_base();
}
inline void HeapGraphObject::clear_reference_field_id_base() {
  _impl_.reference_field_id_base_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t HeapGraphObject::_internal_reference_field_id_base() const {
  return _impl_.reference_field_id_base_;
}
inline uint64_t HeapGraphObject::reference_field_id_base() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.reference_field_id_base)
  return _internal_reference_field_id_base();
}
inline void HeapGraphObject::_internal_set_reference_field_id_base(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reference_field_id_base_ = value;
}
inline void HeapGraphObject::set_reference_field_id_base(uint64_t value) {
  _internal_set_reference_field_id_base(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.reference_field_id_base)
}

// repeated uint64 reference_field_id = 4 [packed = true];
inline int HeapGraphObject::_internal_reference_field_id_size() const {
  return _impl_.reference_field_id_.size();
}
inline int HeapGraphObject::reference_field_id_size() const {
  return _internal_reference_field_id_size();
}
inline void HeapGraphObject::clear_reference_field_id() {
  _impl_.reference_field_id_.Clear();
}
inline uint64_t HeapGraphObject::_internal_reference_field_id(int index) const {
  return _impl_.reference_field_id_.Get(index);
}
inline uint64_t HeapGraphObject::reference_field_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.reference_field_id)
  return _internal_reference_field_id(index);
}
inline void HeapGraphObject::set_reference_field_id(int index, uint64_t value) {
  _impl_.reference_field_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.reference_field_id)
}
inline void HeapGraphObject::_internal_add_reference_field_id(uint64_t value) {
  _impl_.reference_field_id_.Add(value);
}
inline void HeapGraphObject::add_reference_field_id(uint64_t value) {
  _internal_add_reference_field_id(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraphObject.reference_field_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphObject::_internal_reference_field_id() const {
  return _impl_.reference_field_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphObject::reference_field_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraphObject.reference_field_id)
  return _internal_reference_field_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphObject::_internal_mutable_reference_field_id() {
  return &_impl_.reference_field_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphObject::mutable_reference_field_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraphObject.reference_field_id)
  return _internal_mutable_reference_field_id();
}

// repeated uint64 reference_object_id = 5 [packed = true];
inline int HeapGraphObject::_internal_reference_object_id_size() const {
  return _impl_.reference_object_id_.size();
}
inline int HeapGraphObject::reference_object_id_size() const {
  return _internal_reference_object_id_size();
}
inline void HeapGraphObject::clear_reference_object_id() {
  _impl_.reference_object_id_.Clear();
}
inline uint64_t HeapGraphObject::_internal_reference_object_id(int index) const {
  return _impl_.reference_object_id_.Get(index);
}
inline uint64_t HeapGraphObject::reference_object_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.reference_object_id)
  return _internal_reference_object_id(index);
}
inline void HeapGraphObject::set_reference_object_id(int index, uint64_t value) {
  _impl_.reference_object_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.reference_object_id)
}
inline void HeapGraphObject::_internal_add_reference_object_id(uint64_t value) {
  _impl_.reference_object_id_.Add(value);
}
inline void HeapGraphObject::add_reference_object_id(uint64_t value) {
  _internal_add_reference_object_id(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraphObject.reference_object_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphObject::_internal_reference_object_id() const {
  return _impl_.reference_object_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeapGraphObject::reference_object_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraphObject.reference_object_id)
  return _internal_reference_object_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphObject::_internal_mutable_reference_object_id() {
  return &_impl_.reference_object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeapGraphObject::mutable_reference_object_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraphObject.reference_object_id)
  return _internal_mutable_reference_object_id();
}

// optional int64 native_allocation_registry_size_field = 8;
inline bool HeapGraphObject::_internal_has_native_allocation_registry_size_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HeapGraphObject::has_native_allocation_registry_size_field() const {
  return _internal_has_native_allocation_registry_size_field();
}
inline void HeapGraphObject::clear_native_allocation_registry_size_field() {
  _impl_.native_allocation_registry_size_field_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t HeapGraphObject::_internal_native_allocation_registry_size_field() const {
  return _impl_.native_allocation_registry_size_field_;
}
inline int64_t HeapGraphObject::native_allocation_registry_size_field() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraphObject.native_allocation_registry_size_field)
  return _internal_native_allocation_registry_size_field();
}
inline void HeapGraphObject::_internal_set_native_allocation_registry_size_field(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.native_allocation_registry_size_field_ = value;
}
inline void HeapGraphObject::set_native_allocation_registry_size_field(int64_t value) {
  _internal_set_native_allocation_registry_size_field(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraphObject.native_allocation_registry_size_field)
}

inline bool HeapGraphObject::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void HeapGraphObject::clear_has_identifier() {
  _impl_._oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline HeapGraphObject::IdentifierCase HeapGraphObject::identifier_case() const {
  return HeapGraphObject::IdentifierCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HeapGraph

// optional int32 pid = 1;
inline bool HeapGraph::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeapGraph::has_pid() const {
  return _internal_has_pid();
}
inline void HeapGraph::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t HeapGraph::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t HeapGraph::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.pid)
  return _internal_pid();
}
inline void HeapGraph::_internal_set_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_ = value;
}
inline void HeapGraph::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraph.pid)
}

// repeated .perfetto.protos.HeapGraphObject objects = 2;
inline int HeapGraph::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int HeapGraph::objects_size() const {
  return _internal_objects_size();
}
inline void HeapGraph::clear_objects() {
  _impl_.objects_.Clear();
}
inline ::perfetto::protos::HeapGraphObject* HeapGraph::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapGraph.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphObject >*
HeapGraph::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraph.objects)
  return &_impl_.objects_;
}
inline const ::perfetto::protos::HeapGraphObject& HeapGraph::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::perfetto::protos::HeapGraphObject& HeapGraph::objects(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.objects)
  return _internal_objects(index);
}
inline ::perfetto::protos::HeapGraphObject* HeapGraph::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::perfetto::protos::HeapGraphObject* HeapGraph::add_objects() {
  ::perfetto::protos::HeapGraphObject* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraph.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphObject >&
HeapGraph::objects() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraph.objects)
  return _impl_.objects_;
}

// repeated .perfetto.protos.HeapGraphRoot roots = 7;
inline int HeapGraph::_internal_roots_size() const {
  return _impl_.roots_.size();
}
inline int HeapGraph::roots_size() const {
  return _internal_roots_size();
}
inline void HeapGraph::clear_roots() {
  _impl_.roots_.Clear();
}
inline ::perfetto::protos::HeapGraphRoot* HeapGraph::mutable_roots(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapGraph.roots)
  return _impl_.roots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphRoot >*
HeapGraph::mutable_roots() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraph.roots)
  return &_impl_.roots_;
}
inline const ::perfetto::protos::HeapGraphRoot& HeapGraph::_internal_roots(int index) const {
  return _impl_.roots_.Get(index);
}
inline const ::perfetto::protos::HeapGraphRoot& HeapGraph::roots(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.roots)
  return _internal_roots(index);
}
inline ::perfetto::protos::HeapGraphRoot* HeapGraph::_internal_add_roots() {
  return _impl_.roots_.Add();
}
inline ::perfetto::protos::HeapGraphRoot* HeapGraph::add_roots() {
  ::perfetto::protos::HeapGraphRoot* _add = _internal_add_roots();
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraph.roots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphRoot >&
HeapGraph::roots() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraph.roots)
  return _impl_.roots_;
}

// repeated .perfetto.protos.HeapGraphType types = 9;
inline int HeapGraph::_internal_types_size() const {
  return _impl_.types_.size();
}
inline int HeapGraph::types_size() const {
  return _internal_types_size();
}
inline void HeapGraph::clear_types() {
  _impl_.types_.Clear();
}
inline ::perfetto::protos::HeapGraphType* HeapGraph::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapGraph.types)
  return _impl_.types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphType >*
HeapGraph::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraph.types)
  return &_impl_.types_;
}
inline const ::perfetto::protos::HeapGraphType& HeapGraph::_internal_types(int index) const {
  return _impl_.types_.Get(index);
}
inline const ::perfetto::protos::HeapGraphType& HeapGraph::types(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.types)
  return _internal_types(index);
}
inline ::perfetto::protos::HeapGraphType* HeapGraph::_internal_add_types() {
  return _impl_.types_.Add();
}
inline ::perfetto::protos::HeapGraphType* HeapGraph::add_types() {
  ::perfetto::protos::HeapGraphType* _add = _internal_add_types();
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraph.types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::HeapGraphType >&
HeapGraph::types() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraph.types)
  return _impl_.types_;
}

// repeated .perfetto.protos.InternedString field_names = 4;
inline int HeapGraph::_internal_field_names_size() const {
  return _impl_.field_names_.size();
}
inline int HeapGraph::field_names_size() const {
  return _internal_field_names_size();
}
inline ::perfetto::protos::InternedString* HeapGraph::mutable_field_names(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapGraph.field_names)
  return _impl_.field_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
HeapGraph::mutable_field_names() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraph.field_names)
  return &_impl_.field_names_;
}
inline const ::perfetto::protos::InternedString& HeapGraph::_internal_field_names(int index) const {
  return _impl_.field_names_.Get(index);
}
inline const ::perfetto::protos::InternedString& HeapGraph::field_names(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.field_names)
  return _internal_field_names(index);
}
inline ::perfetto::protos::InternedString* HeapGraph::_internal_add_field_names() {
  return _impl_.field_names_.Add();
}
inline ::perfetto::protos::InternedString* HeapGraph::add_field_names() {
  ::perfetto::protos::InternedString* _add = _internal_add_field_names();
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraph.field_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
HeapGraph::field_names() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraph.field_names)
  return _impl_.field_names_;
}

// repeated .perfetto.protos.InternedString location_names = 8;
inline int HeapGraph::_internal_location_names_size() const {
  return _impl_.location_names_.size();
}
inline int HeapGraph::location_names_size() const {
  return _internal_location_names_size();
}
inline ::perfetto::protos::InternedString* HeapGraph::mutable_location_names(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapGraph.location_names)
  return _impl_.location_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
HeapGraph::mutable_location_names() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapGraph.location_names)
  return &_impl_.location_names_;
}
inline const ::perfetto::protos::InternedString& HeapGraph::_internal_location_names(int index) const {
  return _impl_.location_names_.Get(index);
}
inline const ::perfetto::protos::InternedString& HeapGraph::location_names(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.location_names)
  return _internal_location_names(index);
}
inline ::perfetto::protos::InternedString* HeapGraph::_internal_add_location_names() {
  return _impl_.location_names_.Add();
}
inline ::perfetto::protos::InternedString* HeapGraph::add_location_names() {
  ::perfetto::protos::InternedString* _add = _internal_add_location_names();
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapGraph.location_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
HeapGraph::location_names() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapGraph.location_names)
  return _impl_.location_names_;
}

// optional bool continued = 5;
inline bool HeapGraph::_internal_has_continued() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeapGraph::has_continued() const {
  return _internal_has_continued();
}
inline void HeapGraph::clear_continued() {
  _impl_.continued_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool HeapGraph::_internal_continued() const {
  return _impl_.continued_;
}
inline bool HeapGraph::continued() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.continued)
  return _internal_continued();
}
inline void HeapGraph::_internal_set_continued(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.continued_ = value;
}
inline void HeapGraph::set_continued(bool value) {
  _internal_set_continued(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraph.continued)
}

// optional uint64 index = 6;
inline bool HeapGraph::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeapGraph::has_index() const {
  return _internal_has_index();
}
inline void HeapGraph::clear_index() {
  _impl_.index_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t HeapGraph::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t HeapGraph::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapGraph.index)
  return _internal_index();
}
inline void HeapGraph::_internal_set_index(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void HeapGraph::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapGraph.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::HeapGraphRoot_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::HeapGraphType_Kind> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto
