#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/profiling/deobfuscation.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

DeobfuscationMapping::DeobfuscationMapping() = default;
DeobfuscationMapping::~DeobfuscationMapping() = default;
DeobfuscationMapping::DeobfuscationMapping(const DeobfuscationMapping&) = default;
DeobfuscationMapping& DeobfuscationMapping::operator=(const DeobfuscationMapping&) = default;
DeobfuscationMapping::DeobfuscationMapping(DeobfuscationMapping&&) noexcept = default;
DeobfuscationMapping& DeobfuscationMapping::operator=(DeobfuscationMapping&&) = default;

bool DeobfuscationMapping::operator==(const DeobfuscationMapping& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(package_name_, other.package_name_)
   && ::protozero::internal::gen_helpers::EqualsField(version_code_, other.version_code_)
   && ::protozero::internal::gen_helpers::EqualsField(obfuscated_classes_, other.obfuscated_classes_);
}

int DeobfuscationMapping::obfuscated_classes_size() const { return static_cast<int>(obfuscated_classes_.size()); }
void DeobfuscationMapping::clear_obfuscated_classes() { obfuscated_classes_.clear(); }
ObfuscatedClass* DeobfuscationMapping::add_obfuscated_classes() { obfuscated_classes_.emplace_back(); return &obfuscated_classes_.back(); }
bool DeobfuscationMapping::ParseFromArray(const void* raw, size_t size) {
  obfuscated_classes_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* package_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &package_name_);
        break;
      case 2 /* version_code */:
        field.get(&version_code_);
        break;
      case 3 /* obfuscated_classes */:
        obfuscated_classes_.emplace_back();
        obfuscated_classes_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DeobfuscationMapping::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DeobfuscationMapping::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DeobfuscationMapping::Serialize(::protozero::Message* msg) const {
  // Field 1: package_name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, package_name_, msg);
  }

  // Field 2: version_code
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, version_code_, msg);
  }

  // Field 3: obfuscated_classes
  for (auto& it : obfuscated_classes_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ObfuscatedClass::ObfuscatedClass() = default;
ObfuscatedClass::~ObfuscatedClass() = default;
ObfuscatedClass::ObfuscatedClass(const ObfuscatedClass&) = default;
ObfuscatedClass& ObfuscatedClass::operator=(const ObfuscatedClass&) = default;
ObfuscatedClass::ObfuscatedClass(ObfuscatedClass&&) noexcept = default;
ObfuscatedClass& ObfuscatedClass::operator=(ObfuscatedClass&&) = default;

bool ObfuscatedClass::operator==(const ObfuscatedClass& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(obfuscated_name_, other.obfuscated_name_)
   && ::protozero::internal::gen_helpers::EqualsField(deobfuscated_name_, other.deobfuscated_name_)
   && ::protozero::internal::gen_helpers::EqualsField(obfuscated_members_, other.obfuscated_members_)
   && ::protozero::internal::gen_helpers::EqualsField(obfuscated_methods_, other.obfuscated_methods_);
}

int ObfuscatedClass::obfuscated_members_size() const { return static_cast<int>(obfuscated_members_.size()); }
void ObfuscatedClass::clear_obfuscated_members() { obfuscated_members_.clear(); }
ObfuscatedMember* ObfuscatedClass::add_obfuscated_members() { obfuscated_members_.emplace_back(); return &obfuscated_members_.back(); }
int ObfuscatedClass::obfuscated_methods_size() const { return static_cast<int>(obfuscated_methods_.size()); }
void ObfuscatedClass::clear_obfuscated_methods() { obfuscated_methods_.clear(); }
ObfuscatedMember* ObfuscatedClass::add_obfuscated_methods() { obfuscated_methods_.emplace_back(); return &obfuscated_methods_.back(); }
bool ObfuscatedClass::ParseFromArray(const void* raw, size_t size) {
  obfuscated_members_.clear();
  obfuscated_methods_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* obfuscated_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &obfuscated_name_);
        break;
      case 2 /* deobfuscated_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &deobfuscated_name_);
        break;
      case 3 /* obfuscated_members */:
        obfuscated_members_.emplace_back();
        obfuscated_members_.back().ParseFromArray(field.data(), field.size());
        break;
      case 4 /* obfuscated_methods */:
        obfuscated_methods_.emplace_back();
        obfuscated_methods_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ObfuscatedClass::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ObfuscatedClass::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ObfuscatedClass::Serialize(::protozero::Message* msg) const {
  // Field 1: obfuscated_name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, obfuscated_name_, msg);
  }

  // Field 2: deobfuscated_name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, deobfuscated_name_, msg);
  }

  // Field 3: obfuscated_members
  for (auto& it : obfuscated_members_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: obfuscated_methods
  for (auto& it : obfuscated_methods_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ObfuscatedMember::ObfuscatedMember() = default;
ObfuscatedMember::~ObfuscatedMember() = default;
ObfuscatedMember::ObfuscatedMember(const ObfuscatedMember&) = default;
ObfuscatedMember& ObfuscatedMember::operator=(const ObfuscatedMember&) = default;
ObfuscatedMember::ObfuscatedMember(ObfuscatedMember&&) noexcept = default;
ObfuscatedMember& ObfuscatedMember::operator=(ObfuscatedMember&&) = default;

bool ObfuscatedMember::operator==(const ObfuscatedMember& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(obfuscated_name_, other.obfuscated_name_)
   && ::protozero::internal::gen_helpers::EqualsField(deobfuscated_name_, other.deobfuscated_name_);
}

bool ObfuscatedMember::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* obfuscated_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &obfuscated_name_);
        break;
      case 2 /* deobfuscated_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &deobfuscated_name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ObfuscatedMember::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ObfuscatedMember::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ObfuscatedMember::Serialize(::protozero::Message* msg) const {
  // Field 1: obfuscated_name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, obfuscated_name_, msg);
  }

  // Field 2: deobfuscated_name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, deobfuscated_name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
