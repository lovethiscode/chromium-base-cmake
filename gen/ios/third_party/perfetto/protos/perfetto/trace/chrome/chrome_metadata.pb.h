// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class BackgroundTracingMetadata;
struct BackgroundTracingMetadataDefaultTypeInternal;
extern BackgroundTracingMetadataDefaultTypeInternal _BackgroundTracingMetadata_default_instance_;
class BackgroundTracingMetadata_TriggerRule;
struct BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal;
extern BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_default_instance_;
class BackgroundTracingMetadata_TriggerRule_HistogramRule;
struct BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal;
extern BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_;
class BackgroundTracingMetadata_TriggerRule_NamedRule;
struct BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal;
extern BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_;
class ChromeMetadataPacket;
struct ChromeMetadataPacketDefaultTypeInternal;
extern ChromeMetadataPacketDefaultTypeInternal _ChromeMetadataPacket_default_instance_;
class ChromeMetadataPacket_FinchHash;
struct ChromeMetadataPacket_FinchHashDefaultTypeInternal;
extern ChromeMetadataPacket_FinchHashDefaultTypeInternal _ChromeMetadataPacket_FinchHash_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::BackgroundTracingMetadata* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata>(Arena*);
template<> ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule>(Arena*);
template<> ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule>(Arena*);
template<> ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* Arena::CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule>(Arena*);
template<> ::perfetto::protos::ChromeMetadataPacket* Arena::CreateMaybeMessage<::perfetto::protos::ChromeMetadataPacket>(Arena*);
template<> ::perfetto::protos::ChromeMetadataPacket_FinchHash* Arena::CreateMaybeMessage<::perfetto::protos::ChromeMetadataPacket_FinchHash>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum BackgroundTracingMetadata_TriggerRule_NamedRule_EventType : int {
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED = 0,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_SESSION_RESTORE = 1,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_NAVIGATION = 2,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_STARTUP = 3,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_REACHED_CODE = 4,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_CONTENT_TRIGGER = 5,
  BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE = 1000
};
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(int value);
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MIN = BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MAX = BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE;
constexpr int BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_ARRAYSIZE = BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MAX + 1;

const std::string& BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value);
template<typename T>
inline const std::string& BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name.");
  return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(static_cast<BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>(enum_t_value));
}
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType* value);
enum BackgroundTracingMetadata_TriggerRule_TriggerType : int {
  BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED = 0,
  BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE = 1,
  BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED = 2
};
bool BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(int value);
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MIN = BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MAX = BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
constexpr int BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_ARRAYSIZE = BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MAX + 1;

const std::string& BackgroundTracingMetadata_TriggerRule_TriggerType_Name(BackgroundTracingMetadata_TriggerRule_TriggerType value);
template<typename T>
inline const std::string& BackgroundTracingMetadata_TriggerRule_TriggerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundTracingMetadata_TriggerRule_TriggerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundTracingMetadata_TriggerRule_TriggerType_Name.");
  return BackgroundTracingMetadata_TriggerRule_TriggerType_Name(static_cast<BackgroundTracingMetadata_TriggerRule_TriggerType>(enum_t_value));
}
bool BackgroundTracingMetadata_TriggerRule_TriggerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundTracingMetadata_TriggerRule_TriggerType* value);
// ===================================================================

class ChromeMetadataPacket_FinchHash final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeMetadataPacket.FinchHash) */ {
 public:
  inline ChromeMetadataPacket_FinchHash() : ChromeMetadataPacket_FinchHash(nullptr) {}
  ~ChromeMetadataPacket_FinchHash() override;
  explicit PROTOBUF_CONSTEXPR ChromeMetadataPacket_FinchHash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeMetadataPacket_FinchHash(const ChromeMetadataPacket_FinchHash& from);
  ChromeMetadataPacket_FinchHash(ChromeMetadataPacket_FinchHash&& from) noexcept
    : ChromeMetadataPacket_FinchHash() {
    *this = ::std::move(from);
  }

  inline ChromeMetadataPacket_FinchHash& operator=(const ChromeMetadataPacket_FinchHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeMetadataPacket_FinchHash& operator=(ChromeMetadataPacket_FinchHash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeMetadataPacket_FinchHash& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeMetadataPacket_FinchHash* internal_default_instance() {
    return reinterpret_cast<const ChromeMetadataPacket_FinchHash*>(
               &_ChromeMetadataPacket_FinchHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeMetadataPacket_FinchHash& a, ChromeMetadataPacket_FinchHash& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeMetadataPacket_FinchHash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeMetadataPacket_FinchHash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeMetadataPacket_FinchHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeMetadataPacket_FinchHash>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeMetadataPacket_FinchHash& from);
  void MergeFrom(const ChromeMetadataPacket_FinchHash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeMetadataPacket_FinchHash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeMetadataPacket.FinchHash";
  }
  protected:
  explicit ChromeMetadataPacket_FinchHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint32 name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  uint32_t name() const;
  void set_name(uint32_t value);
  private:
  uint32_t _internal_name() const;
  void _internal_set_name(uint32_t value);
  public:

  // optional uint32 group = 2;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  uint32_t group() const;
  void set_group(uint32_t value);
  private:
  uint32_t _internal_group() const;
  void _internal_set_group(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeMetadataPacket.FinchHash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t name_;
    uint32_t group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ChromeMetadataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeMetadataPacket) */ {
 public:
  inline ChromeMetadataPacket() : ChromeMetadataPacket(nullptr) {}
  ~ChromeMetadataPacket() override;
  explicit PROTOBUF_CONSTEXPR ChromeMetadataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeMetadataPacket(const ChromeMetadataPacket& from);
  ChromeMetadataPacket(ChromeMetadataPacket&& from) noexcept
    : ChromeMetadataPacket() {
    *this = ::std::move(from);
  }

  inline ChromeMetadataPacket& operator=(const ChromeMetadataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeMetadataPacket& operator=(ChromeMetadataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeMetadataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeMetadataPacket* internal_default_instance() {
    return reinterpret_cast<const ChromeMetadataPacket*>(
               &_ChromeMetadataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeMetadataPacket& a, ChromeMetadataPacket& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeMetadataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeMetadataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeMetadataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeMetadataPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeMetadataPacket& from);
  void MergeFrom(const ChromeMetadataPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeMetadataPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeMetadataPacket";
  }
  protected:
  explicit ChromeMetadataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeMetadataPacket_FinchHash FinchHash;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldTrialHashesFieldNumber = 4,
    kEnabledCategoriesFieldNumber = 3,
    kBackgroundTracingMetadataFieldNumber = 1,
    kChromeVersionCodeFieldNumber = 2,
  };
  // repeated .perfetto.protos.ChromeMetadataPacket.FinchHash field_trial_hashes = 4;
  int field_trial_hashes_size() const;
  private:
  int _internal_field_trial_hashes_size() const;
  public:
  void clear_field_trial_hashes();
  ::perfetto::protos::ChromeMetadataPacket_FinchHash* mutable_field_trial_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadataPacket_FinchHash >*
      mutable_field_trial_hashes();
  private:
  const ::perfetto::protos::ChromeMetadataPacket_FinchHash& _internal_field_trial_hashes(int index) const;
  ::perfetto::protos::ChromeMetadataPacket_FinchHash* _internal_add_field_trial_hashes();
  public:
  const ::perfetto::protos::ChromeMetadataPacket_FinchHash& field_trial_hashes(int index) const;
  ::perfetto::protos::ChromeMetadataPacket_FinchHash* add_field_trial_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadataPacket_FinchHash >&
      field_trial_hashes() const;

  // optional string enabled_categories = 3;
  bool has_enabled_categories() const;
  private:
  bool _internal_has_enabled_categories() const;
  public:
  void clear_enabled_categories();
  const std::string& enabled_categories() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enabled_categories(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enabled_categories();
  PROTOBUF_NODISCARD std::string* release_enabled_categories();
  void set_allocated_enabled_categories(std::string* enabled_categories);
  private:
  const std::string& _internal_enabled_categories() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enabled_categories(const std::string& value);
  std::string* _internal_mutable_enabled_categories();
  public:

  // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
  bool has_background_tracing_metadata() const;
  private:
  bool _internal_has_background_tracing_metadata() const;
  public:
  void clear_background_tracing_metadata();
  const ::perfetto::protos::BackgroundTracingMetadata& background_tracing_metadata() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BackgroundTracingMetadata* release_background_tracing_metadata();
  ::perfetto::protos::BackgroundTracingMetadata* mutable_background_tracing_metadata();
  void set_allocated_background_tracing_metadata(::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata);
  private:
  const ::perfetto::protos::BackgroundTracingMetadata& _internal_background_tracing_metadata() const;
  ::perfetto::protos::BackgroundTracingMetadata* _internal_mutable_background_tracing_metadata();
  public:
  void unsafe_arena_set_allocated_background_tracing_metadata(
      ::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata);
  ::perfetto::protos::BackgroundTracingMetadata* unsafe_arena_release_background_tracing_metadata();

  // optional int32 chrome_version_code = 2;
  bool has_chrome_version_code() const;
  private:
  bool _internal_has_chrome_version_code() const;
  public:
  void clear_chrome_version_code();
  int32_t chrome_version_code() const;
  void set_chrome_version_code(int32_t value);
  private:
  int32_t _internal_chrome_version_code() const;
  void _internal_set_chrome_version_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeMetadataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadataPacket_FinchHash > field_trial_hashes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enabled_categories_;
    ::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata_;
    int32_t chrome_version_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata_TriggerRule_HistogramRule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule) */ {
 public:
  inline BackgroundTracingMetadata_TriggerRule_HistogramRule() : BackgroundTracingMetadata_TriggerRule_HistogramRule(nullptr) {}
  ~BackgroundTracingMetadata_TriggerRule_HistogramRule() override;
  explicit PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_HistogramRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackgroundTracingMetadata_TriggerRule_HistogramRule(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from);
  BackgroundTracingMetadata_TriggerRule_HistogramRule(BackgroundTracingMetadata_TriggerRule_HistogramRule&& from) noexcept
    : BackgroundTracingMetadata_TriggerRule_HistogramRule() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata_TriggerRule_HistogramRule& operator=(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata_TriggerRule_HistogramRule& operator=(BackgroundTracingMetadata_TriggerRule_HistogramRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BackgroundTracingMetadata_TriggerRule_HistogramRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackgroundTracingMetadata_TriggerRule_HistogramRule* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata_TriggerRule_HistogramRule*>(
               &_BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BackgroundTracingMetadata_TriggerRule_HistogramRule& a, BackgroundTracingMetadata_TriggerRule_HistogramRule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackgroundTracingMetadata_TriggerRule_HistogramRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule_HistogramRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from);
  void MergeFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule";
  }
  protected:
  explicit BackgroundTracingMetadata_TriggerRule_HistogramRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramNameHashFieldNumber = 1,
    kHistogramMinTriggerFieldNumber = 2,
    kHistogramMaxTriggerFieldNumber = 3,
  };
  // optional fixed64 histogram_name_hash = 1;
  bool has_histogram_name_hash() const;
  private:
  bool _internal_has_histogram_name_hash() const;
  public:
  void clear_histogram_name_hash();
  uint64_t histogram_name_hash() const;
  void set_histogram_name_hash(uint64_t value);
  private:
  uint64_t _internal_histogram_name_hash() const;
  void _internal_set_histogram_name_hash(uint64_t value);
  public:

  // optional int64 histogram_min_trigger = 2;
  bool has_histogram_min_trigger() const;
  private:
  bool _internal_has_histogram_min_trigger() const;
  public:
  void clear_histogram_min_trigger();
  int64_t histogram_min_trigger() const;
  void set_histogram_min_trigger(int64_t value);
  private:
  int64_t _internal_histogram_min_trigger() const;
  void _internal_set_histogram_min_trigger(int64_t value);
  public:

  // optional int64 histogram_max_trigger = 3;
  bool has_histogram_max_trigger() const;
  private:
  bool _internal_has_histogram_max_trigger() const;
  public:
  void clear_histogram_max_trigger();
  int64_t histogram_max_trigger() const;
  void set_histogram_max_trigger(int64_t value);
  private:
  int64_t _internal_histogram_max_trigger() const;
  void _internal_set_histogram_max_trigger(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t histogram_name_hash_;
    int64_t histogram_min_trigger_;
    int64_t histogram_max_trigger_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata_TriggerRule_NamedRule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule) */ {
 public:
  inline BackgroundTracingMetadata_TriggerRule_NamedRule() : BackgroundTracingMetadata_TriggerRule_NamedRule(nullptr) {}
  ~BackgroundTracingMetadata_TriggerRule_NamedRule() override;
  explicit PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_NamedRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackgroundTracingMetadata_TriggerRule_NamedRule(const BackgroundTracingMetadata_TriggerRule_NamedRule& from);
  BackgroundTracingMetadata_TriggerRule_NamedRule(BackgroundTracingMetadata_TriggerRule_NamedRule&& from) noexcept
    : BackgroundTracingMetadata_TriggerRule_NamedRule() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata_TriggerRule_NamedRule& operator=(const BackgroundTracingMetadata_TriggerRule_NamedRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata_TriggerRule_NamedRule& operator=(BackgroundTracingMetadata_TriggerRule_NamedRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BackgroundTracingMetadata_TriggerRule_NamedRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackgroundTracingMetadata_TriggerRule_NamedRule* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata_TriggerRule_NamedRule*>(
               &_BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BackgroundTracingMetadata_TriggerRule_NamedRule& a, BackgroundTracingMetadata_TriggerRule_NamedRule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BackgroundTracingMetadata_TriggerRule_NamedRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackgroundTracingMetadata_TriggerRule_NamedRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackgroundTracingMetadata_TriggerRule_NamedRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule_NamedRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from);
  void MergeFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata_TriggerRule_NamedRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule";
  }
  protected:
  explicit BackgroundTracingMetadata_TriggerRule_NamedRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundTracingMetadata_TriggerRule_NamedRule_EventType EventType;
  static constexpr EventType UNSPECIFIED =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_UNSPECIFIED;
  static constexpr EventType SESSION_RESTORE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_SESSION_RESTORE;
  static constexpr EventType NAVIGATION =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_NAVIGATION;
  static constexpr EventType STARTUP =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_STARTUP;
  static constexpr EventType REACHED_CODE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_REACHED_CODE;
  static constexpr EventType CONTENT_TRIGGER =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_CONTENT_TRIGGER;
  static constexpr EventType TEST_RULE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_TEST_RULE;
  static inline bool EventType_IsValid(int value) {
    return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_EventType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentTriggerNameHashFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // optional fixed64 content_trigger_name_hash = 2;
  bool has_content_trigger_name_hash() const;
  private:
  bool _internal_has_content_trigger_name_hash() const;
  public:
  void clear_content_trigger_name_hash();
  uint64_t content_trigger_name_hash() const;
  void set_content_trigger_name_hash(uint64_t value);
  private:
  uint64_t _internal_content_trigger_name_hash() const;
  void _internal_set_content_trigger_name_hash(uint64_t value);
  public:

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType event_type() const;
  void set_event_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value);
  private:
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType _internal_event_type() const;
  void _internal_set_event_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t content_trigger_name_hash_;
    int event_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata_TriggerRule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata.TriggerRule) */ {
 public:
  inline BackgroundTracingMetadata_TriggerRule() : BackgroundTracingMetadata_TriggerRule(nullptr) {}
  ~BackgroundTracingMetadata_TriggerRule() override;
  explicit PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackgroundTracingMetadata_TriggerRule(const BackgroundTracingMetadata_TriggerRule& from);
  BackgroundTracingMetadata_TriggerRule(BackgroundTracingMetadata_TriggerRule&& from) noexcept
    : BackgroundTracingMetadata_TriggerRule() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata_TriggerRule& operator=(const BackgroundTracingMetadata_TriggerRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata_TriggerRule& operator=(BackgroundTracingMetadata_TriggerRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BackgroundTracingMetadata_TriggerRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackgroundTracingMetadata_TriggerRule* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata_TriggerRule*>(
               &_BackgroundTracingMetadata_TriggerRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BackgroundTracingMetadata_TriggerRule& a, BackgroundTracingMetadata_TriggerRule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BackgroundTracingMetadata_TriggerRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackgroundTracingMetadata_TriggerRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackgroundTracingMetadata_TriggerRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata_TriggerRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BackgroundTracingMetadata_TriggerRule& from);
  void MergeFrom(const BackgroundTracingMetadata_TriggerRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata_TriggerRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata.TriggerRule";
  }
  protected:
  explicit BackgroundTracingMetadata_TriggerRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundTracingMetadata_TriggerRule_HistogramRule HistogramRule;
  typedef BackgroundTracingMetadata_TriggerRule_NamedRule NamedRule;

  typedef BackgroundTracingMetadata_TriggerRule_TriggerType TriggerType;
  static constexpr TriggerType TRIGGER_UNSPECIFIED =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TRIGGER_UNSPECIFIED;
  static constexpr TriggerType MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE =
    BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE;
  static constexpr TriggerType MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED =
    BackgroundTracingMetadata_TriggerRule_TriggerType_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
  static inline bool TriggerType_IsValid(int value) {
    return BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(value);
  }
  static constexpr TriggerType TriggerType_MIN =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MIN;
  static constexpr TriggerType TriggerType_MAX =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_MAX;
  static constexpr int TriggerType_ARRAYSIZE =
    BackgroundTracingMetadata_TriggerRule_TriggerType_TriggerType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TriggerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TriggerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TriggerType_Name.");
    return BackgroundTracingMetadata_TriggerRule_TriggerType_Name(enum_t_value);
  }
  static inline bool TriggerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TriggerType* value) {
    return BackgroundTracingMetadata_TriggerRule_TriggerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramRuleFieldNumber = 2,
    kNamedRuleFieldNumber = 3,
    kTriggerTypeFieldNumber = 1,
    kNameHashFieldNumber = 4,
  };
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
  bool has_histogram_rule() const;
  private:
  bool _internal_has_histogram_rule() const;
  public:
  void clear_histogram_rule();
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& histogram_rule() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* release_histogram_rule();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* mutable_histogram_rule();
  void set_allocated_histogram_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule);
  private:
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& _internal_histogram_rule() const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* _internal_mutable_histogram_rule();
  public:
  void unsafe_arena_set_allocated_histogram_rule(
      ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule);
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* unsafe_arena_release_histogram_rule();

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
  bool has_named_rule() const;
  private:
  bool _internal_has_named_rule() const;
  public:
  void clear_named_rule();
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& named_rule() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* release_named_rule();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* mutable_named_rule();
  void set_allocated_named_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule);
  private:
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& _internal_named_rule() const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* _internal_mutable_named_rule();
  public:
  void unsafe_arena_set_allocated_named_rule(
      ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule);
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* unsafe_arena_release_named_rule();

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
  bool has_trigger_type() const;
  private:
  bool _internal_has_trigger_type() const;
  public:
  void clear_trigger_type();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType trigger_type() const;
  void set_trigger_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType value);
  private:
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType _internal_trigger_type() const;
  void _internal_set_trigger_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType value);
  public:

  // optional fixed32 name_hash = 4;
  bool has_name_hash() const;
  private:
  bool _internal_has_name_hash() const;
  public:
  void clear_name_hash();
  uint32_t name_hash() const;
  void set_name_hash(uint32_t value);
  private:
  uint32_t _internal_name_hash() const;
  void _internal_set_name_hash(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule_;
    ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule_;
    int trigger_type_;
    uint32_t name_hash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class BackgroundTracingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BackgroundTracingMetadata) */ {
 public:
  inline BackgroundTracingMetadata() : BackgroundTracingMetadata(nullptr) {}
  ~BackgroundTracingMetadata() override;
  explicit PROTOBUF_CONSTEXPR BackgroundTracingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackgroundTracingMetadata(const BackgroundTracingMetadata& from);
  BackgroundTracingMetadata(BackgroundTracingMetadata&& from) noexcept
    : BackgroundTracingMetadata() {
    *this = ::std::move(from);
  }

  inline BackgroundTracingMetadata& operator=(const BackgroundTracingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundTracingMetadata& operator=(BackgroundTracingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BackgroundTracingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackgroundTracingMetadata* internal_default_instance() {
    return reinterpret_cast<const BackgroundTracingMetadata*>(
               &_BackgroundTracingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BackgroundTracingMetadata& a, BackgroundTracingMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BackgroundTracingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackgroundTracingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackgroundTracingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackgroundTracingMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BackgroundTracingMetadata& from);
  void MergeFrom(const BackgroundTracingMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundTracingMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BackgroundTracingMetadata";
  }
  protected:
  explicit BackgroundTracingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BackgroundTracingMetadata_TriggerRule TriggerRule;

  // accessors -------------------------------------------------------

  enum : int {
    kActiveRulesFieldNumber = 2,
    kTriggeredRuleFieldNumber = 1,
    kScenarioNameHashFieldNumber = 3,
  };
  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  int active_rules_size() const;
  private:
  int _internal_active_rules_size() const;
  public:
  void clear_active_rules();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* mutable_active_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >*
      mutable_active_rules();
  private:
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& _internal_active_rules(int index) const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* _internal_add_active_rules();
  public:
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& active_rules(int index) const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* add_active_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >&
      active_rules() const;

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
  bool has_triggered_rule() const;
  private:
  bool _internal_has_triggered_rule() const;
  public:
  void clear_triggered_rule();
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& triggered_rule() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* release_triggered_rule();
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* mutable_triggered_rule();
  void set_allocated_triggered_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule);
  private:
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& _internal_triggered_rule() const;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* _internal_mutable_triggered_rule();
  public:
  void unsafe_arena_set_allocated_triggered_rule(
      ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule);
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* unsafe_arena_release_triggered_rule();

  // optional fixed32 scenario_name_hash = 3;
  bool has_scenario_name_hash() const;
  private:
  bool _internal_has_scenario_name_hash() const;
  public:
  void clear_scenario_name_hash();
  uint32_t scenario_name_hash() const;
  void set_scenario_name_hash(uint32_t value);
  private:
  uint32_t _internal_scenario_name_hash() const;
  void _internal_set_scenario_name_hash(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BackgroundTracingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule > active_rules_;
    ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule_;
    uint32_t scenario_name_hash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeMetadataPacket_FinchHash

// optional uint32 name = 1;
inline bool ChromeMetadataPacket_FinchHash::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeMetadataPacket_FinchHash::has_name() const {
  return _internal_has_name();
}
inline void ChromeMetadataPacket_FinchHash::clear_name() {
  _impl_.name_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ChromeMetadataPacket_FinchHash::_internal_name() const {
  return _impl_.name_;
}
inline uint32_t ChromeMetadataPacket_FinchHash::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.FinchHash.name)
  return _internal_name();
}
inline void ChromeMetadataPacket_FinchHash::_internal_set_name(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_ = value;
}
inline void ChromeMetadataPacket_FinchHash::set_name(uint32_t value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadataPacket.FinchHash.name)
}

// optional uint32 group = 2;
inline bool ChromeMetadataPacket_FinchHash::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeMetadataPacket_FinchHash::has_group() const {
  return _internal_has_group();
}
inline void ChromeMetadataPacket_FinchHash::clear_group() {
  _impl_.group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChromeMetadataPacket_FinchHash::_internal_group() const {
  return _impl_.group_;
}
inline uint32_t ChromeMetadataPacket_FinchHash::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.FinchHash.group)
  return _internal_group();
}
inline void ChromeMetadataPacket_FinchHash::_internal_set_group(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_ = value;
}
inline void ChromeMetadataPacket_FinchHash::set_group(uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadataPacket.FinchHash.group)
}

// -------------------------------------------------------------------

// ChromeMetadataPacket

// optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
inline bool ChromeMetadataPacket::_internal_has_background_tracing_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.background_tracing_metadata_ != nullptr);
  return value;
}
inline bool ChromeMetadataPacket::has_background_tracing_metadata() const {
  return _internal_has_background_tracing_metadata();
}
inline void ChromeMetadataPacket::clear_background_tracing_metadata() {
  if (_impl_.background_tracing_metadata_ != nullptr) _impl_.background_tracing_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata& ChromeMetadataPacket::_internal_background_tracing_metadata() const {
  const ::perfetto::protos::BackgroundTracingMetadata* p = _impl_.background_tracing_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata&>(
      ::perfetto::protos::_BackgroundTracingMetadata_default_instance_);
}
inline const ::perfetto::protos::BackgroundTracingMetadata& ChromeMetadataPacket::background_tracing_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
  return _internal_background_tracing_metadata();
}
inline void ChromeMetadataPacket::unsafe_arena_set_allocated_background_tracing_metadata(
    ::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.background_tracing_metadata_);
  }
  _impl_.background_tracing_metadata_ = background_tracing_metadata;
  if (background_tracing_metadata) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
}
inline ::perfetto::protos::BackgroundTracingMetadata* ChromeMetadataPacket::release_background_tracing_metadata() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::BackgroundTracingMetadata* temp = _impl_.background_tracing_metadata_;
  _impl_.background_tracing_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata* ChromeMetadataPacket::unsafe_arena_release_background_tracing_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::BackgroundTracingMetadata* temp = _impl_.background_tracing_metadata_;
  _impl_.background_tracing_metadata_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata* ChromeMetadataPacket::_internal_mutable_background_tracing_metadata() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.background_tracing_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata>(GetArenaForAllocation());
    _impl_.background_tracing_metadata_ = p;
  }
  return _impl_.background_tracing_metadata_;
}
inline ::perfetto::protos::BackgroundTracingMetadata* ChromeMetadataPacket::mutable_background_tracing_metadata() {
  ::perfetto::protos::BackgroundTracingMetadata* _msg = _internal_mutable_background_tracing_metadata();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
  return _msg;
}
inline void ChromeMetadataPacket::set_allocated_background_tracing_metadata(::perfetto::protos::BackgroundTracingMetadata* background_tracing_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.background_tracing_metadata_;
  }
  if (background_tracing_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(background_tracing_metadata);
    if (message_arena != submessage_arena) {
      background_tracing_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_tracing_metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.background_tracing_metadata_ = background_tracing_metadata;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadataPacket.background_tracing_metadata)
}

// optional int32 chrome_version_code = 2;
inline bool ChromeMetadataPacket::_internal_has_chrome_version_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeMetadataPacket::has_chrome_version_code() const {
  return _internal_has_chrome_version_code();
}
inline void ChromeMetadataPacket::clear_chrome_version_code() {
  _impl_.chrome_version_code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ChromeMetadataPacket::_internal_chrome_version_code() const {
  return _impl_.chrome_version_code_;
}
inline int32_t ChromeMetadataPacket::chrome_version_code() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.chrome_version_code)
  return _internal_chrome_version_code();
}
inline void ChromeMetadataPacket::_internal_set_chrome_version_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chrome_version_code_ = value;
}
inline void ChromeMetadataPacket::set_chrome_version_code(int32_t value) {
  _internal_set_chrome_version_code(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadataPacket.chrome_version_code)
}

// optional string enabled_categories = 3;
inline bool ChromeMetadataPacket::_internal_has_enabled_categories() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeMetadataPacket::has_enabled_categories() const {
  return _internal_has_enabled_categories();
}
inline void ChromeMetadataPacket::clear_enabled_categories() {
  _impl_.enabled_categories_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeMetadataPacket::enabled_categories() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.enabled_categories)
  return _internal_enabled_categories();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeMetadataPacket::set_enabled_categories(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.enabled_categories_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadataPacket.enabled_categories)
}
inline std::string* ChromeMetadataPacket::mutable_enabled_categories() {
  std::string* _s = _internal_mutable_enabled_categories();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadataPacket.enabled_categories)
  return _s;
}
inline const std::string& ChromeMetadataPacket::_internal_enabled_categories() const {
  return _impl_.enabled_categories_.Get();
}
inline void ChromeMetadataPacket::_internal_set_enabled_categories(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_categories_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeMetadataPacket::_internal_mutable_enabled_categories() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.enabled_categories_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeMetadataPacket::release_enabled_categories() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadataPacket.enabled_categories)
  if (!_internal_has_enabled_categories()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.enabled_categories_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enabled_categories_.IsDefault()) {
    _impl_.enabled_categories_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeMetadataPacket::set_allocated_enabled_categories(std::string* enabled_categories) {
  if (enabled_categories != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.enabled_categories_.SetAllocated(enabled_categories, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enabled_categories_.IsDefault()) {
    _impl_.enabled_categories_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadataPacket.enabled_categories)
}

// repeated .perfetto.protos.ChromeMetadataPacket.FinchHash field_trial_hashes = 4;
inline int ChromeMetadataPacket::_internal_field_trial_hashes_size() const {
  return _impl_.field_trial_hashes_.size();
}
inline int ChromeMetadataPacket::field_trial_hashes_size() const {
  return _internal_field_trial_hashes_size();
}
inline void ChromeMetadataPacket::clear_field_trial_hashes() {
  _impl_.field_trial_hashes_.Clear();
}
inline ::perfetto::protos::ChromeMetadataPacket_FinchHash* ChromeMetadataPacket::mutable_field_trial_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadataPacket.field_trial_hashes)
  return _impl_.field_trial_hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadataPacket_FinchHash >*
ChromeMetadataPacket::mutable_field_trial_hashes() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeMetadataPacket.field_trial_hashes)
  return &_impl_.field_trial_hashes_;
}
inline const ::perfetto::protos::ChromeMetadataPacket_FinchHash& ChromeMetadataPacket::_internal_field_trial_hashes(int index) const {
  return _impl_.field_trial_hashes_.Get(index);
}
inline const ::perfetto::protos::ChromeMetadataPacket_FinchHash& ChromeMetadataPacket::field_trial_hashes(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadataPacket.field_trial_hashes)
  return _internal_field_trial_hashes(index);
}
inline ::perfetto::protos::ChromeMetadataPacket_FinchHash* ChromeMetadataPacket::_internal_add_field_trial_hashes() {
  return _impl_.field_trial_hashes_.Add();
}
inline ::perfetto::protos::ChromeMetadataPacket_FinchHash* ChromeMetadataPacket::add_field_trial_hashes() {
  ::perfetto::protos::ChromeMetadataPacket_FinchHash* _add = _internal_add_field_trial_hashes();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeMetadataPacket.field_trial_hashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadataPacket_FinchHash >&
ChromeMetadataPacket::field_trial_hashes() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeMetadataPacket.field_trial_hashes)
  return _impl_.field_trial_hashes_;
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata_TriggerRule_HistogramRule

// optional fixed64 histogram_name_hash = 1;
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_has_histogram_name_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::has_histogram_name_hash() const {
  return _internal_has_histogram_name_hash();
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::clear_histogram_name_hash() {
  _impl_.histogram_name_hash_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_histogram_name_hash() const {
  return _impl_.histogram_name_hash_;
}
inline uint64_t BackgroundTracingMetadata_TriggerRule_HistogramRule::histogram_name_hash() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_name_hash)
  return _internal_histogram_name_hash();
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_set_histogram_name_hash(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.histogram_name_hash_ = value;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::set_histogram_name_hash(uint64_t value) {
  _internal_set_histogram_name_hash(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_name_hash)
}

// optional int64 histogram_min_trigger = 2;
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_has_histogram_min_trigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::has_histogram_min_trigger() const {
  return _internal_has_histogram_min_trigger();
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::clear_histogram_min_trigger() {
  _impl_.histogram_min_trigger_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_histogram_min_trigger() const {
  return _impl_.histogram_min_trigger_;
}
inline int64_t BackgroundTracingMetadata_TriggerRule_HistogramRule::histogram_min_trigger() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_min_trigger)
  return _internal_histogram_min_trigger();
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_set_histogram_min_trigger(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.histogram_min_trigger_ = value;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::set_histogram_min_trigger(int64_t value) {
  _internal_set_histogram_min_trigger(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_min_trigger)
}

// optional int64 histogram_max_trigger = 3;
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_has_histogram_max_trigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule_HistogramRule::has_histogram_max_trigger() const {
  return _internal_has_histogram_max_trigger();
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::clear_histogram_max_trigger() {
  _impl_.histogram_max_trigger_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_histogram_max_trigger() const {
  return _impl_.histogram_max_trigger_;
}
inline int64_t BackgroundTracingMetadata_TriggerRule_HistogramRule::histogram_max_trigger() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_max_trigger)
  return _internal_histogram_max_trigger();
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::_internal_set_histogram_max_trigger(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.histogram_max_trigger_ = value;
}
inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::set_histogram_max_trigger(int64_t value) {
  _internal_set_histogram_max_trigger(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule.histogram_max_trigger)
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata_TriggerRule_NamedRule

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
inline bool BackgroundTracingMetadata_TriggerRule_NamedRule::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule_NamedRule::has_event_type() const {
  return _internal_has_event_type();
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::clear_event_type() {
  _impl_.event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::_internal_event_type() const {
  return static_cast< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType >(_impl_.event_type_);
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::event_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.event_type)
  return _internal_event_type();
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::_internal_set_event_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value) {
  assert(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_type_ = value;
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::set_event_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.event_type)
}

// optional fixed64 content_trigger_name_hash = 2;
inline bool BackgroundTracingMetadata_TriggerRule_NamedRule::_internal_has_content_trigger_name_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule_NamedRule::has_content_trigger_name_hash() const {
  return _internal_has_content_trigger_name_hash();
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::clear_content_trigger_name_hash() {
  _impl_.content_trigger_name_hash_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t BackgroundTracingMetadata_TriggerRule_NamedRule::_internal_content_trigger_name_hash() const {
  return _impl_.content_trigger_name_hash_;
}
inline uint64_t BackgroundTracingMetadata_TriggerRule_NamedRule::content_trigger_name_hash() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.content_trigger_name_hash)
  return _internal_content_trigger_name_hash();
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::_internal_set_content_trigger_name_hash(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_trigger_name_hash_ = value;
}
inline void BackgroundTracingMetadata_TriggerRule_NamedRule::set_content_trigger_name_hash(uint64_t value) {
  _internal_set_content_trigger_name_hash(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.content_trigger_name_hash)
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata_TriggerRule

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
inline bool BackgroundTracingMetadata_TriggerRule::_internal_has_trigger_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule::has_trigger_type() const {
  return _internal_has_trigger_type();
}
inline void BackgroundTracingMetadata_TriggerRule::clear_trigger_type() {
  _impl_.trigger_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::_internal_trigger_type() const {
  return static_cast< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType >(_impl_.trigger_type_);
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::trigger_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.trigger_type)
  return _internal_trigger_type();
}
inline void BackgroundTracingMetadata_TriggerRule::_internal_set_trigger_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType value) {
  assert(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trigger_type_ = value;
}
inline void BackgroundTracingMetadata_TriggerRule::set_trigger_type(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType value) {
  _internal_set_trigger_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.trigger_type)
}

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
inline bool BackgroundTracingMetadata_TriggerRule::_internal_has_histogram_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.histogram_rule_ != nullptr);
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule::has_histogram_rule() const {
  return _internal_has_histogram_rule();
}
inline void BackgroundTracingMetadata_TriggerRule::clear_histogram_rule() {
  if (_impl_.histogram_rule_ != nullptr) _impl_.histogram_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& BackgroundTracingMetadata_TriggerRule::_internal_histogram_rule() const {
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* p = _impl_.histogram_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule&>(
      ::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_);
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& BackgroundTracingMetadata_TriggerRule::histogram_rule() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
  return _internal_histogram_rule();
}
inline void BackgroundTracingMetadata_TriggerRule::unsafe_arena_set_allocated_histogram_rule(
    ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.histogram_rule_);
  }
  _impl_.histogram_rule_ = histogram_rule;
  if (histogram_rule) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* BackgroundTracingMetadata_TriggerRule::release_histogram_rule() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* temp = _impl_.histogram_rule_;
  _impl_.histogram_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* BackgroundTracingMetadata_TriggerRule::unsafe_arena_release_histogram_rule() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* temp = _impl_.histogram_rule_;
  _impl_.histogram_rule_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* BackgroundTracingMetadata_TriggerRule::_internal_mutable_histogram_rule() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.histogram_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule>(GetArenaForAllocation());
    _impl_.histogram_rule_ = p;
  }
  return _impl_.histogram_rule_;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* BackgroundTracingMetadata_TriggerRule::mutable_histogram_rule() {
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* _msg = _internal_mutable_histogram_rule();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
  return _msg;
}
inline void BackgroundTracingMetadata_TriggerRule::set_allocated_histogram_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* histogram_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.histogram_rule_;
  }
  if (histogram_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(histogram_rule);
    if (message_arena != submessage_arena) {
      histogram_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram_rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.histogram_rule_ = histogram_rule;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule)
}

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
inline bool BackgroundTracingMetadata_TriggerRule::_internal_has_named_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.named_rule_ != nullptr);
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule::has_named_rule() const {
  return _internal_has_named_rule();
}
inline void BackgroundTracingMetadata_TriggerRule::clear_named_rule() {
  if (_impl_.named_rule_ != nullptr) _impl_.named_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& BackgroundTracingMetadata_TriggerRule::_internal_named_rule() const {
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* p = _impl_.named_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule&>(
      ::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_);
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& BackgroundTracingMetadata_TriggerRule::named_rule() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
  return _internal_named_rule();
}
inline void BackgroundTracingMetadata_TriggerRule::unsafe_arena_set_allocated_named_rule(
    ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.named_rule_);
  }
  _impl_.named_rule_ = named_rule;
  if (named_rule) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* BackgroundTracingMetadata_TriggerRule::release_named_rule() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* temp = _impl_.named_rule_;
  _impl_.named_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* BackgroundTracingMetadata_TriggerRule::unsafe_arena_release_named_rule() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* temp = _impl_.named_rule_;
  _impl_.named_rule_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* BackgroundTracingMetadata_TriggerRule::_internal_mutable_named_rule() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.named_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule>(GetArenaForAllocation());
    _impl_.named_rule_ = p;
  }
  return _impl_.named_rule_;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* BackgroundTracingMetadata_TriggerRule::mutable_named_rule() {
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* _msg = _internal_mutable_named_rule();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
  return _msg;
}
inline void BackgroundTracingMetadata_TriggerRule::set_allocated_named_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* named_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.named_rule_;
  }
  if (named_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(named_rule);
    if (message_arena != submessage_arena) {
      named_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.named_rule_ = named_rule;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule)
}

// optional fixed32 name_hash = 4;
inline bool BackgroundTracingMetadata_TriggerRule::_internal_has_name_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata_TriggerRule::has_name_hash() const {
  return _internal_has_name_hash();
}
inline void BackgroundTracingMetadata_TriggerRule::clear_name_hash() {
  _impl_.name_hash_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t BackgroundTracingMetadata_TriggerRule::_internal_name_hash() const {
  return _impl_.name_hash_;
}
inline uint32_t BackgroundTracingMetadata_TriggerRule::name_hash() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.TriggerRule.name_hash)
  return _internal_name_hash();
}
inline void BackgroundTracingMetadata_TriggerRule::_internal_set_name_hash(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.name_hash_ = value;
}
inline void BackgroundTracingMetadata_TriggerRule::set_name_hash(uint32_t value) {
  _internal_set_name_hash(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.TriggerRule.name_hash)
}

// -------------------------------------------------------------------

// BackgroundTracingMetadata

// optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
inline bool BackgroundTracingMetadata::_internal_has_triggered_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.triggered_rule_ != nullptr);
  return value;
}
inline bool BackgroundTracingMetadata::has_triggered_rule() const {
  return _internal_has_triggered_rule();
}
inline void BackgroundTracingMetadata::clear_triggered_rule() {
  if (_impl_.triggered_rule_ != nullptr) _impl_.triggered_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& BackgroundTracingMetadata::_internal_triggered_rule() const {
  const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* p = _impl_.triggered_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule&>(
      ::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_default_instance_);
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& BackgroundTracingMetadata::triggered_rule() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
  return _internal_triggered_rule();
}
inline void BackgroundTracingMetadata::unsafe_arena_set_allocated_triggered_rule(
    ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.triggered_rule_);
  }
  _impl_.triggered_rule_ = triggered_rule;
  if (triggered_rule) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::release_triggered_rule() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* temp = _impl_.triggered_rule_;
  _impl_.triggered_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::unsafe_arena_release_triggered_rule() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* temp = _impl_.triggered_rule_;
  _impl_.triggered_rule_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::_internal_mutable_triggered_rule() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.triggered_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BackgroundTracingMetadata_TriggerRule>(GetArenaForAllocation());
    _impl_.triggered_rule_ = p;
  }
  return _impl_.triggered_rule_;
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::mutable_triggered_rule() {
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* _msg = _internal_mutable_triggered_rule();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
  return _msg;
}
inline void BackgroundTracingMetadata::set_allocated_triggered_rule(::perfetto::protos::BackgroundTracingMetadata_TriggerRule* triggered_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.triggered_rule_;
  }
  if (triggered_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(triggered_rule);
    if (message_arena != submessage_arena) {
      triggered_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, triggered_rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.triggered_rule_ = triggered_rule;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BackgroundTracingMetadata.triggered_rule)
}

// repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
inline int BackgroundTracingMetadata::_internal_active_rules_size() const {
  return _impl_.active_rules_.size();
}
inline int BackgroundTracingMetadata::active_rules_size() const {
  return _internal_active_rules_size();
}
inline void BackgroundTracingMetadata::clear_active_rules() {
  _impl_.active_rules_.Clear();
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::mutable_active_rules(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return _impl_.active_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >*
BackgroundTracingMetadata::mutable_active_rules() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return &_impl_.active_rules_;
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& BackgroundTracingMetadata::_internal_active_rules(int index) const {
  return _impl_.active_rules_.Get(index);
}
inline const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& BackgroundTracingMetadata::active_rules(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return _internal_active_rules(index);
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::_internal_add_active_rules() {
  return _impl_.active_rules_.Add();
}
inline ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* BackgroundTracingMetadata::add_active_rules() {
  ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* _add = _internal_add_active_rules();
  // @@protoc_insertion_point(field_add:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >&
BackgroundTracingMetadata::active_rules() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.BackgroundTracingMetadata.active_rules)
  return _impl_.active_rules_;
}

// optional fixed32 scenario_name_hash = 3;
inline bool BackgroundTracingMetadata::_internal_has_scenario_name_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BackgroundTracingMetadata::has_scenario_name_hash() const {
  return _internal_has_scenario_name_hash();
}
inline void BackgroundTracingMetadata::clear_scenario_name_hash() {
  _impl_.scenario_name_hash_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BackgroundTracingMetadata::_internal_scenario_name_hash() const {
  return _impl_.scenario_name_hash_;
}
inline uint32_t BackgroundTracingMetadata::scenario_name_hash() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BackgroundTracingMetadata.scenario_name_hash)
  return _internal_scenario_name_hash();
}
inline void BackgroundTracingMetadata::_internal_set_scenario_name_hash(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scenario_name_hash_ = value;
}
inline void BackgroundTracingMetadata::set_scenario_name_hash(uint32_t value) {
  _internal_set_scenario_name_hash(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BackgroundTracingMetadata.scenario_name_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto
