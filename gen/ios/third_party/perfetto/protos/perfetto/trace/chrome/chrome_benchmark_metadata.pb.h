// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_benchmark_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ChromeBenchmarkMetadata;
struct ChromeBenchmarkMetadataDefaultTypeInternal;
extern ChromeBenchmarkMetadataDefaultTypeInternal _ChromeBenchmarkMetadata_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ChromeBenchmarkMetadata* Arena::CreateMaybeMessage<::perfetto::protos::ChromeBenchmarkMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ChromeBenchmarkMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeBenchmarkMetadata) */ {
 public:
  inline ChromeBenchmarkMetadata() : ChromeBenchmarkMetadata(nullptr) {}
  ~ChromeBenchmarkMetadata() override;
  explicit PROTOBUF_CONSTEXPR ChromeBenchmarkMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeBenchmarkMetadata(const ChromeBenchmarkMetadata& from);
  ChromeBenchmarkMetadata(ChromeBenchmarkMetadata&& from) noexcept
    : ChromeBenchmarkMetadata() {
    *this = ::std::move(from);
  }

  inline ChromeBenchmarkMetadata& operator=(const ChromeBenchmarkMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeBenchmarkMetadata& operator=(ChromeBenchmarkMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeBenchmarkMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeBenchmarkMetadata* internal_default_instance() {
    return reinterpret_cast<const ChromeBenchmarkMetadata*>(
               &_ChromeBenchmarkMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeBenchmarkMetadata& a, ChromeBenchmarkMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeBenchmarkMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeBenchmarkMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeBenchmarkMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeBenchmarkMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeBenchmarkMetadata& from);
  void MergeFrom(const ChromeBenchmarkMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeBenchmarkMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeBenchmarkMetadata";
  }
  protected:
  explicit ChromeBenchmarkMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoryTagsFieldNumber = 7,
    kBenchmarkNameFieldNumber = 3,
    kBenchmarkDescriptionFieldNumber = 4,
    kLabelFieldNumber = 5,
    kStoryNameFieldNumber = 6,
    kBenchmarkStartTimeUsFieldNumber = 1,
    kStoryRunTimeUsFieldNumber = 2,
    kStoryRunIndexFieldNumber = 8,
    kHadFailuresFieldNumber = 9,
  };
  // repeated string story_tags = 7;
  int story_tags_size() const;
  private:
  int _internal_story_tags_size() const;
  public:
  void clear_story_tags();
  const std::string& story_tags(int index) const;
  std::string* mutable_story_tags(int index);
  void set_story_tags(int index, const std::string& value);
  void set_story_tags(int index, std::string&& value);
  void set_story_tags(int index, const char* value);
  void set_story_tags(int index, const char* value, size_t size);
  std::string* add_story_tags();
  void add_story_tags(const std::string& value);
  void add_story_tags(std::string&& value);
  void add_story_tags(const char* value);
  void add_story_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& story_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_story_tags();
  private:
  const std::string& _internal_story_tags(int index) const;
  std::string* _internal_add_story_tags();
  public:

  // optional string benchmark_name = 3;
  bool has_benchmark_name() const;
  private:
  bool _internal_has_benchmark_name() const;
  public:
  void clear_benchmark_name();
  const std::string& benchmark_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_benchmark_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_benchmark_name();
  PROTOBUF_NODISCARD std::string* release_benchmark_name();
  void set_allocated_benchmark_name(std::string* benchmark_name);
  private:
  const std::string& _internal_benchmark_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_benchmark_name(const std::string& value);
  std::string* _internal_mutable_benchmark_name();
  public:

  // optional string benchmark_description = 4;
  bool has_benchmark_description() const;
  private:
  bool _internal_has_benchmark_description() const;
  public:
  void clear_benchmark_description();
  const std::string& benchmark_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_benchmark_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_benchmark_description();
  PROTOBUF_NODISCARD std::string* release_benchmark_description();
  void set_allocated_benchmark_description(std::string* benchmark_description);
  private:
  const std::string& _internal_benchmark_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_benchmark_description(const std::string& value);
  std::string* _internal_mutable_benchmark_description();
  public:

  // optional string label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string story_name = 6;
  bool has_story_name() const;
  private:
  bool _internal_has_story_name() const;
  public:
  void clear_story_name();
  const std::string& story_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_story_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_story_name();
  PROTOBUF_NODISCARD std::string* release_story_name();
  void set_allocated_story_name(std::string* story_name);
  private:
  const std::string& _internal_story_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_story_name(const std::string& value);
  std::string* _internal_mutable_story_name();
  public:

  // optional int64 benchmark_start_time_us = 1;
  bool has_benchmark_start_time_us() const;
  private:
  bool _internal_has_benchmark_start_time_us() const;
  public:
  void clear_benchmark_start_time_us();
  int64_t benchmark_start_time_us() const;
  void set_benchmark_start_time_us(int64_t value);
  private:
  int64_t _internal_benchmark_start_time_us() const;
  void _internal_set_benchmark_start_time_us(int64_t value);
  public:

  // optional int64 story_run_time_us = 2;
  bool has_story_run_time_us() const;
  private:
  bool _internal_has_story_run_time_us() const;
  public:
  void clear_story_run_time_us();
  int64_t story_run_time_us() const;
  void set_story_run_time_us(int64_t value);
  private:
  int64_t _internal_story_run_time_us() const;
  void _internal_set_story_run_time_us(int64_t value);
  public:

  // optional int32 story_run_index = 8;
  bool has_story_run_index() const;
  private:
  bool _internal_has_story_run_index() const;
  public:
  void clear_story_run_index();
  int32_t story_run_index() const;
  void set_story_run_index(int32_t value);
  private:
  int32_t _internal_story_run_index() const;
  void _internal_set_story_run_index(int32_t value);
  public:

  // optional bool had_failures = 9;
  bool has_had_failures() const;
  private:
  bool _internal_has_had_failures() const;
  public:
  void clear_had_failures();
  bool had_failures() const;
  void set_had_failures(bool value);
  private:
  bool _internal_had_failures() const;
  void _internal_set_had_failures(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeBenchmarkMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> story_tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr benchmark_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr benchmark_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr story_name_;
    int64_t benchmark_start_time_us_;
    int64_t story_run_time_us_;
    int32_t story_run_index_;
    bool had_failures_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeBenchmarkMetadata

// optional int64 benchmark_start_time_us = 1;
inline bool ChromeBenchmarkMetadata::_internal_has_benchmark_start_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_benchmark_start_time_us() const {
  return _internal_has_benchmark_start_time_us();
}
inline void ChromeBenchmarkMetadata::clear_benchmark_start_time_us() {
  _impl_.benchmark_start_time_us_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t ChromeBenchmarkMetadata::_internal_benchmark_start_time_us() const {
  return _impl_.benchmark_start_time_us_;
}
inline int64_t ChromeBenchmarkMetadata::benchmark_start_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.benchmark_start_time_us)
  return _internal_benchmark_start_time_us();
}
inline void ChromeBenchmarkMetadata::_internal_set_benchmark_start_time_us(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.benchmark_start_time_us_ = value;
}
inline void ChromeBenchmarkMetadata::set_benchmark_start_time_us(int64_t value) {
  _internal_set_benchmark_start_time_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.benchmark_start_time_us)
}

// optional int64 story_run_time_us = 2;
inline bool ChromeBenchmarkMetadata::_internal_has_story_run_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_story_run_time_us() const {
  return _internal_has_story_run_time_us();
}
inline void ChromeBenchmarkMetadata::clear_story_run_time_us() {
  _impl_.story_run_time_us_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t ChromeBenchmarkMetadata::_internal_story_run_time_us() const {
  return _impl_.story_run_time_us_;
}
inline int64_t ChromeBenchmarkMetadata::story_run_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.story_run_time_us)
  return _internal_story_run_time_us();
}
inline void ChromeBenchmarkMetadata::_internal_set_story_run_time_us(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.story_run_time_us_ = value;
}
inline void ChromeBenchmarkMetadata::set_story_run_time_us(int64_t value) {
  _internal_set_story_run_time_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.story_run_time_us)
}

// optional string benchmark_name = 3;
inline bool ChromeBenchmarkMetadata::_internal_has_benchmark_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_benchmark_name() const {
  return _internal_has_benchmark_name();
}
inline void ChromeBenchmarkMetadata::clear_benchmark_name() {
  _impl_.benchmark_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeBenchmarkMetadata::benchmark_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.benchmark_name)
  return _internal_benchmark_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeBenchmarkMetadata::set_benchmark_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.benchmark_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.benchmark_name)
}
inline std::string* ChromeBenchmarkMetadata::mutable_benchmark_name() {
  std::string* _s = _internal_mutable_benchmark_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeBenchmarkMetadata.benchmark_name)
  return _s;
}
inline const std::string& ChromeBenchmarkMetadata::_internal_benchmark_name() const {
  return _impl_.benchmark_name_.Get();
}
inline void ChromeBenchmarkMetadata::_internal_set_benchmark_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benchmark_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::_internal_mutable_benchmark_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.benchmark_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::release_benchmark_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeBenchmarkMetadata.benchmark_name)
  if (!_internal_has_benchmark_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.benchmark_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.benchmark_name_.IsDefault()) {
    _impl_.benchmark_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeBenchmarkMetadata::set_allocated_benchmark_name(std::string* benchmark_name) {
  if (benchmark_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.benchmark_name_.SetAllocated(benchmark_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.benchmark_name_.IsDefault()) {
    _impl_.benchmark_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeBenchmarkMetadata.benchmark_name)
}

// optional string benchmark_description = 4;
inline bool ChromeBenchmarkMetadata::_internal_has_benchmark_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_benchmark_description() const {
  return _internal_has_benchmark_description();
}
inline void ChromeBenchmarkMetadata::clear_benchmark_description() {
  _impl_.benchmark_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeBenchmarkMetadata::benchmark_description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.benchmark_description)
  return _internal_benchmark_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeBenchmarkMetadata::set_benchmark_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.benchmark_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.benchmark_description)
}
inline std::string* ChromeBenchmarkMetadata::mutable_benchmark_description() {
  std::string* _s = _internal_mutable_benchmark_description();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeBenchmarkMetadata.benchmark_description)
  return _s;
}
inline const std::string& ChromeBenchmarkMetadata::_internal_benchmark_description() const {
  return _impl_.benchmark_description_.Get();
}
inline void ChromeBenchmarkMetadata::_internal_set_benchmark_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.benchmark_description_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::_internal_mutable_benchmark_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.benchmark_description_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::release_benchmark_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeBenchmarkMetadata.benchmark_description)
  if (!_internal_has_benchmark_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.benchmark_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.benchmark_description_.IsDefault()) {
    _impl_.benchmark_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeBenchmarkMetadata::set_allocated_benchmark_description(std::string* benchmark_description) {
  if (benchmark_description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.benchmark_description_.SetAllocated(benchmark_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.benchmark_description_.IsDefault()) {
    _impl_.benchmark_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeBenchmarkMetadata.benchmark_description)
}

// optional string label = 5;
inline bool ChromeBenchmarkMetadata::_internal_has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_label() const {
  return _internal_has_label();
}
inline void ChromeBenchmarkMetadata::clear_label() {
  _impl_.label_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChromeBenchmarkMetadata::label() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeBenchmarkMetadata::set_label(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.label)
}
inline std::string* ChromeBenchmarkMetadata::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeBenchmarkMetadata.label)
  return _s;
}
inline const std::string& ChromeBenchmarkMetadata::_internal_label() const {
  return _impl_.label_.Get();
}
inline void ChromeBenchmarkMetadata::_internal_set_label(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::_internal_mutable_label() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::release_label() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeBenchmarkMetadata.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.label_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeBenchmarkMetadata::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeBenchmarkMetadata.label)
}

// optional string story_name = 6;
inline bool ChromeBenchmarkMetadata::_internal_has_story_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_story_name() const {
  return _internal_has_story_name();
}
inline void ChromeBenchmarkMetadata::clear_story_name() {
  _impl_.story_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ChromeBenchmarkMetadata::story_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.story_name)
  return _internal_story_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeBenchmarkMetadata::set_story_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.story_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.story_name)
}
inline std::string* ChromeBenchmarkMetadata::mutable_story_name() {
  std::string* _s = _internal_mutable_story_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeBenchmarkMetadata.story_name)
  return _s;
}
inline const std::string& ChromeBenchmarkMetadata::_internal_story_name() const {
  return _impl_.story_name_.Get();
}
inline void ChromeBenchmarkMetadata::_internal_set_story_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.story_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::_internal_mutable_story_name() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.story_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeBenchmarkMetadata::release_story_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeBenchmarkMetadata.story_name)
  if (!_internal_has_story_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.story_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.story_name_.IsDefault()) {
    _impl_.story_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeBenchmarkMetadata::set_allocated_story_name(std::string* story_name) {
  if (story_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.story_name_.SetAllocated(story_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.story_name_.IsDefault()) {
    _impl_.story_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeBenchmarkMetadata.story_name)
}

// repeated string story_tags = 7;
inline int ChromeBenchmarkMetadata::_internal_story_tags_size() const {
  return _impl_.story_tags_.size();
}
inline int ChromeBenchmarkMetadata::story_tags_size() const {
  return _internal_story_tags_size();
}
inline void ChromeBenchmarkMetadata::clear_story_tags() {
  _impl_.story_tags_.Clear();
}
inline std::string* ChromeBenchmarkMetadata::add_story_tags() {
  std::string* _s = _internal_add_story_tags();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
  return _s;
}
inline const std::string& ChromeBenchmarkMetadata::_internal_story_tags(int index) const {
  return _impl_.story_tags_.Get(index);
}
inline const std::string& ChromeBenchmarkMetadata::story_tags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
  return _internal_story_tags(index);
}
inline std::string* ChromeBenchmarkMetadata::mutable_story_tags(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
  return _impl_.story_tags_.Mutable(index);
}
inline void ChromeBenchmarkMetadata::set_story_tags(int index, const std::string& value) {
  _impl_.story_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline void ChromeBenchmarkMetadata::set_story_tags(int index, std::string&& value) {
  _impl_.story_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline void ChromeBenchmarkMetadata::set_story_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.story_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline void ChromeBenchmarkMetadata::set_story_tags(int index, const char* value, size_t size) {
  _impl_.story_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline std::string* ChromeBenchmarkMetadata::_internal_add_story_tags() {
  return _impl_.story_tags_.Add();
}
inline void ChromeBenchmarkMetadata::add_story_tags(const std::string& value) {
  _impl_.story_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline void ChromeBenchmarkMetadata::add_story_tags(std::string&& value) {
  _impl_.story_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline void ChromeBenchmarkMetadata::add_story_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.story_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline void ChromeBenchmarkMetadata::add_story_tags(const char* value, size_t size) {
  _impl_.story_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeBenchmarkMetadata::story_tags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
  return _impl_.story_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeBenchmarkMetadata::mutable_story_tags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeBenchmarkMetadata.story_tags)
  return &_impl_.story_tags_;
}

// optional int32 story_run_index = 8;
inline bool ChromeBenchmarkMetadata::_internal_has_story_run_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_story_run_index() const {
  return _internal_has_story_run_index();
}
inline void ChromeBenchmarkMetadata::clear_story_run_index() {
  _impl_.story_run_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ChromeBenchmarkMetadata::_internal_story_run_index() const {
  return _impl_.story_run_index_;
}
inline int32_t ChromeBenchmarkMetadata::story_run_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.story_run_index)
  return _internal_story_run_index();
}
inline void ChromeBenchmarkMetadata::_internal_set_story_run_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.story_run_index_ = value;
}
inline void ChromeBenchmarkMetadata::set_story_run_index(int32_t value) {
  _internal_set_story_run_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.story_run_index)
}

// optional bool had_failures = 9;
inline bool ChromeBenchmarkMetadata::_internal_has_had_failures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChromeBenchmarkMetadata::has_had_failures() const {
  return _internal_has_had_failures();
}
inline void ChromeBenchmarkMetadata::clear_had_failures() {
  _impl_.had_failures_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ChromeBenchmarkMetadata::_internal_had_failures() const {
  return _impl_.had_failures_;
}
inline bool ChromeBenchmarkMetadata::had_failures() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeBenchmarkMetadata.had_failures)
  return _internal_had_failures();
}
inline void ChromeBenchmarkMetadata::_internal_set_had_failures(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.had_failures_ = value;
}
inline void ChromeBenchmarkMetadata::set_had_failures(bool value) {
  _internal_set_had_failures(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeBenchmarkMetadata.had_failures)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto
