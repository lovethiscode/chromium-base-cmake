// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/sys_stats/sys_stats.proto

#include "protos/perfetto/trace/sys_stats/sys_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR SysStats_MeminfoValue::SysStats_MeminfoValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_.key_)*/0} {}
struct SysStats_MeminfoValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_MeminfoValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_MeminfoValueDefaultTypeInternal() {}
  union {
    SysStats_MeminfoValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_MeminfoValueDefaultTypeInternal _SysStats_MeminfoValue_default_instance_;
PROTOBUF_CONSTEXPR SysStats_VmstatValue::SysStats_VmstatValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_.key_)*/0} {}
struct SysStats_VmstatValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_VmstatValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_VmstatValueDefaultTypeInternal() {}
  union {
    SysStats_VmstatValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_VmstatValueDefaultTypeInternal _SysStats_VmstatValue_default_instance_;
PROTOBUF_CONSTEXPR SysStats_CpuTimes::SysStats_CpuTimes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.user_nice_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.system_mode_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.idle_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.io_wait_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.irq_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.softirq_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.cpu_id_)*/0u} {}
struct SysStats_CpuTimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_CpuTimesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_CpuTimesDefaultTypeInternal() {}
  union {
    SysStats_CpuTimes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_CpuTimesDefaultTypeInternal _SysStats_CpuTimes_default_instance_;
PROTOBUF_CONSTEXPR SysStats_InterruptCount::SysStats_InterruptCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_.irq_)*/0} {}
struct SysStats_InterruptCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_InterruptCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_InterruptCountDefaultTypeInternal() {}
  union {
    SysStats_InterruptCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_InterruptCountDefaultTypeInternal _SysStats_InterruptCount_default_instance_;
PROTOBUF_CONSTEXPR SysStats_DevfreqValue::SysStats_DevfreqValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/uint64_t{0u}} {}
struct SysStats_DevfreqValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_DevfreqValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_DevfreqValueDefaultTypeInternal() {}
  union {
    SysStats_DevfreqValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_DevfreqValueDefaultTypeInternal _SysStats_DevfreqValue_default_instance_;
PROTOBUF_CONSTEXPR SysStats_BuddyInfo::SysStats_BuddyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_pages_)*/{}
  , /*decltype(_impl_.node_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.zone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SysStats_BuddyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_BuddyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_BuddyInfoDefaultTypeInternal() {}
  union {
    SysStats_BuddyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_BuddyInfoDefaultTypeInternal _SysStats_BuddyInfo_default_instance_;
PROTOBUF_CONSTEXPR SysStats_DiskStat::SysStats_DiskStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.read_sectors_)*/uint64_t{0u}
  , /*decltype(_impl_.read_time_ms_)*/uint64_t{0u}
  , /*decltype(_impl_.write_sectors_)*/uint64_t{0u}
  , /*decltype(_impl_.write_time_ms_)*/uint64_t{0u}
  , /*decltype(_impl_.discard_sectors_)*/uint64_t{0u}
  , /*decltype(_impl_.discard_time_ms_)*/uint64_t{0u}
  , /*decltype(_impl_.flush_count_)*/uint64_t{0u}
  , /*decltype(_impl_.flush_time_ms_)*/uint64_t{0u}} {}
struct SysStats_DiskStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_DiskStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_DiskStatDefaultTypeInternal() {}
  union {
    SysStats_DiskStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_DiskStatDefaultTypeInternal _SysStats_DiskStat_default_instance_;
PROTOBUF_CONSTEXPR SysStats_PsiSample::SysStats_PsiSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.total_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.resource_)*/0} {}
struct SysStats_PsiSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_PsiSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_PsiSampleDefaultTypeInternal() {}
  union {
    SysStats_PsiSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_PsiSampleDefaultTypeInternal _SysStats_PsiSample_default_instance_;
PROTOBUF_CONSTEXPR SysStats::SysStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meminfo_)*/{}
  , /*decltype(_impl_.vmstat_)*/{}
  , /*decltype(_impl_.cpu_stat_)*/{}
  , /*decltype(_impl_.num_irq_)*/{}
  , /*decltype(_impl_.num_softirq_)*/{}
  , /*decltype(_impl_.devfreq_)*/{}
  , /*decltype(_impl_.cpufreq_khz_)*/{}
  , /*decltype(_impl_.buddy_info_)*/{}
  , /*decltype(_impl_.disk_stat_)*/{}
  , /*decltype(_impl_.psi_)*/{}
  , /*decltype(_impl_.num_forks_)*/uint64_t{0u}
  , /*decltype(_impl_.num_irq_total_)*/uint64_t{0u}
  , /*decltype(_impl_.num_softirq_total_)*/uint64_t{0u}
  , /*decltype(_impl_.collection_end_timestamp_)*/uint64_t{0u}} {}
struct SysStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStatsDefaultTypeInternal() {}
  union {
    SysStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStatsDefaultTypeInternal _SysStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool SysStats_PsiSample_PsiResource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SysStats_PsiSample_PsiResource_strings[7] = {};

static const char SysStats_PsiSample_PsiResource_names[] =
  "PSI_RESOURCE_CPU_FULL"
  "PSI_RESOURCE_CPU_SOME"
  "PSI_RESOURCE_IO_FULL"
  "PSI_RESOURCE_IO_SOME"
  "PSI_RESOURCE_MEMORY_FULL"
  "PSI_RESOURCE_MEMORY_SOME"
  "PSI_RESOURCE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SysStats_PsiSample_PsiResource_entries[] = {
  { {SysStats_PsiSample_PsiResource_names + 0, 21}, 2 },
  { {SysStats_PsiSample_PsiResource_names + 21, 21}, 1 },
  { {SysStats_PsiSample_PsiResource_names + 42, 20}, 4 },
  { {SysStats_PsiSample_PsiResource_names + 62, 20}, 3 },
  { {SysStats_PsiSample_PsiResource_names + 82, 24}, 6 },
  { {SysStats_PsiSample_PsiResource_names + 106, 24}, 5 },
  { {SysStats_PsiSample_PsiResource_names + 130, 24}, 0 },
};

static const int SysStats_PsiSample_PsiResource_entries_by_number[] = {
  6, // 0 -> PSI_RESOURCE_UNSPECIFIED
  1, // 1 -> PSI_RESOURCE_CPU_SOME
  0, // 2 -> PSI_RESOURCE_CPU_FULL
  3, // 3 -> PSI_RESOURCE_IO_SOME
  2, // 4 -> PSI_RESOURCE_IO_FULL
  5, // 5 -> PSI_RESOURCE_MEMORY_SOME
  4, // 6 -> PSI_RESOURCE_MEMORY_FULL
};

const std::string& SysStats_PsiSample_PsiResource_Name(
    SysStats_PsiSample_PsiResource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SysStats_PsiSample_PsiResource_entries,
          SysStats_PsiSample_PsiResource_entries_by_number,
          7, SysStats_PsiSample_PsiResource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SysStats_PsiSample_PsiResource_entries,
      SysStats_PsiSample_PsiResource_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SysStats_PsiSample_PsiResource_strings[idx].get();
}
bool SysStats_PsiSample_PsiResource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysStats_PsiSample_PsiResource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SysStats_PsiSample_PsiResource_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<SysStats_PsiSample_PsiResource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PSI_RESOURCE_UNSPECIFIED;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PSI_RESOURCE_CPU_SOME;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PSI_RESOURCE_CPU_FULL;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PSI_RESOURCE_IO_SOME;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PSI_RESOURCE_IO_FULL;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PSI_RESOURCE_MEMORY_SOME;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PSI_RESOURCE_MEMORY_FULL;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PsiResource_MIN;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample::PsiResource_MAX;
constexpr int SysStats_PsiSample::PsiResource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SysStats_MeminfoValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_MeminfoValue>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_MeminfoValue::SysStats_MeminfoValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.MeminfoValue)
}
SysStats_MeminfoValue::SysStats_MeminfoValue(const SysStats_MeminfoValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_MeminfoValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.key_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.key_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.MeminfoValue)
}

inline void SysStats_MeminfoValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){uint64_t{0u}}
    , decltype(_impl_.key_){0}
  };
}

SysStats_MeminfoValue::~SysStats_MeminfoValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.MeminfoValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_MeminfoValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_MeminfoValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_MeminfoValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.MeminfoValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.key_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_MeminfoValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.MeminfoCounters key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MeminfoCounters_IsValid(val))) {
            _internal_set_key(static_cast<::perfetto::protos::MeminfoCounters>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_MeminfoValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.MeminfoValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.MeminfoCounters key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.MeminfoValue)
  return target;
}

size_t SysStats_MeminfoValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.MeminfoValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

    // optional .perfetto.protos.MeminfoCounters key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_MeminfoValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_MeminfoValue*>(
      &from));
}

void SysStats_MeminfoValue::MergeFrom(const SysStats_MeminfoValue& from) {
  SysStats_MeminfoValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.MeminfoValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_MeminfoValue::CopyFrom(const SysStats_MeminfoValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.MeminfoValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_MeminfoValue::IsInitialized() const {
  return true;
}

void SysStats_MeminfoValue::InternalSwap(SysStats_MeminfoValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_MeminfoValue, _impl_.key_)
      + sizeof(SysStats_MeminfoValue::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(SysStats_MeminfoValue, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

std::string SysStats_MeminfoValue::GetTypeName() const {
  return "perfetto.protos.SysStats.MeminfoValue";
}


// ===================================================================

class SysStats_VmstatValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_VmstatValue>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_VmstatValue::SysStats_VmstatValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.VmstatValue)
}
SysStats_VmstatValue::SysStats_VmstatValue(const SysStats_VmstatValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_VmstatValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.key_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.key_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.VmstatValue)
}

inline void SysStats_VmstatValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){uint64_t{0u}}
    , decltype(_impl_.key_){0}
  };
}

SysStats_VmstatValue::~SysStats_VmstatValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.VmstatValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_VmstatValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_VmstatValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_VmstatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.VmstatValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.key_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_VmstatValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.VmstatCounters key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VmstatCounters_IsValid(val))) {
            _internal_set_key(static_cast<::perfetto::protos::VmstatCounters>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_VmstatValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.VmstatValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.VmstatCounters key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.VmstatValue)
  return target;
}

size_t SysStats_VmstatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.VmstatValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

    // optional .perfetto.protos.VmstatCounters key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_VmstatValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_VmstatValue*>(
      &from));
}

void SysStats_VmstatValue::MergeFrom(const SysStats_VmstatValue& from) {
  SysStats_VmstatValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.VmstatValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_VmstatValue::CopyFrom(const SysStats_VmstatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.VmstatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_VmstatValue::IsInitialized() const {
  return true;
}

void SysStats_VmstatValue::InternalSwap(SysStats_VmstatValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_VmstatValue, _impl_.key_)
      + sizeof(SysStats_VmstatValue::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(SysStats_VmstatValue, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

std::string SysStats_VmstatValue::GetTypeName() const {
  return "perfetto.protos.SysStats.VmstatValue";
}


// ===================================================================

class SysStats_CpuTimes::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_CpuTimes>()._impl_._has_bits_);
  static void set_has_cpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_nice_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_system_mode_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_idle_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_io_wait_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_irq_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_softirq_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SysStats_CpuTimes::SysStats_CpuTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.CpuTimes)
}
SysStats_CpuTimes::SysStats_CpuTimes(const SysStats_CpuTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_CpuTimes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_ns_){}
    , decltype(_impl_.user_nice_ns_){}
    , decltype(_impl_.system_mode_ns_){}
    , decltype(_impl_.idle_ns_){}
    , decltype(_impl_.io_wait_ns_){}
    , decltype(_impl_.irq_ns_){}
    , decltype(_impl_.softirq_ns_){}
    , decltype(_impl_.cpu_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.user_ns_, &from._impl_.user_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpu_id_) -
    reinterpret_cast<char*>(&_impl_.user_ns_)) + sizeof(_impl_.cpu_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.CpuTimes)
}

inline void SysStats_CpuTimes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_ns_){uint64_t{0u}}
    , decltype(_impl_.user_nice_ns_){uint64_t{0u}}
    , decltype(_impl_.system_mode_ns_){uint64_t{0u}}
    , decltype(_impl_.idle_ns_){uint64_t{0u}}
    , decltype(_impl_.io_wait_ns_){uint64_t{0u}}
    , decltype(_impl_.irq_ns_){uint64_t{0u}}
    , decltype(_impl_.softirq_ns_){uint64_t{0u}}
    , decltype(_impl_.cpu_id_){0u}
  };
}

SysStats_CpuTimes::~SysStats_CpuTimes() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.CpuTimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_CpuTimes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_CpuTimes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_CpuTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.CpuTimes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.user_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cpu_id_) -
        reinterpret_cast<char*>(&_impl_.user_ns_)) + sizeof(_impl_.cpu_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_CpuTimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu_id(&has_bits);
          _impl_.cpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 user_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_ns(&has_bits);
          _impl_.user_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 user_nice_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_nice_ns(&has_bits);
          _impl_.user_nice_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 system_mode_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_system_mode_ns(&has_bits);
          _impl_.system_mode_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 idle_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_idle_ns(&has_bits);
          _impl_.idle_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 io_wait_ns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_io_wait_ns(&has_bits);
          _impl_.io_wait_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 irq_ns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_irq_ns(&has_bits);
          _impl_.irq_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 softirq_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_softirq_ns(&has_bits);
          _impl_.softirq_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_CpuTimes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.CpuTimes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cpu_id(), target);
  }

  // optional uint64 user_ns = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_ns(), target);
  }

  // optional uint64 user_nice_ns = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_user_nice_ns(), target);
  }

  // optional uint64 system_mode_ns = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_system_mode_ns(), target);
  }

  // optional uint64 idle_ns = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_idle_ns(), target);
  }

  // optional uint64 io_wait_ns = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_io_wait_ns(), target);
  }

  // optional uint64 irq_ns = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_irq_ns(), target);
  }

  // optional uint64 softirq_ns = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_softirq_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.CpuTimes)
  return target;
}

size_t SysStats_CpuTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.CpuTimes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 user_ns = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_ns());
    }

    // optional uint64 user_nice_ns = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_nice_ns());
    }

    // optional uint64 system_mode_ns = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_system_mode_ns());
    }

    // optional uint64 idle_ns = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_idle_ns());
    }

    // optional uint64 io_wait_ns = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_io_wait_ns());
    }

    // optional uint64 irq_ns = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_irq_ns());
    }

    // optional uint64 softirq_ns = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_softirq_ns());
    }

    // optional uint32 cpu_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_CpuTimes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_CpuTimes*>(
      &from));
}

void SysStats_CpuTimes::MergeFrom(const SysStats_CpuTimes& from) {
  SysStats_CpuTimes* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.CpuTimes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.user_ns_ = from._impl_.user_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.user_nice_ns_ = from._impl_.user_nice_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.system_mode_ns_ = from._impl_.system_mode_ns_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.idle_ns_ = from._impl_.idle_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.io_wait_ns_ = from._impl_.io_wait_ns_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.irq_ns_ = from._impl_.irq_ns_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.softirq_ns_ = from._impl_.softirq_ns_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cpu_id_ = from._impl_.cpu_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_CpuTimes::CopyFrom(const SysStats_CpuTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.CpuTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_CpuTimes::IsInitialized() const {
  return true;
}

void SysStats_CpuTimes::InternalSwap(SysStats_CpuTimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_CpuTimes, _impl_.cpu_id_)
      + sizeof(SysStats_CpuTimes::_impl_.cpu_id_)
      - PROTOBUF_FIELD_OFFSET(SysStats_CpuTimes, _impl_.user_ns_)>(
          reinterpret_cast<char*>(&_impl_.user_ns_),
          reinterpret_cast<char*>(&other->_impl_.user_ns_));
}

std::string SysStats_CpuTimes::GetTypeName() const {
  return "perfetto.protos.SysStats.CpuTimes";
}


// ===================================================================

class SysStats_InterruptCount::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_InterruptCount>()._impl_._has_bits_);
  static void set_has_irq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_InterruptCount::SysStats_InterruptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.InterruptCount)
}
SysStats_InterruptCount::SysStats_InterruptCount(const SysStats_InterruptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_InterruptCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){}
    , decltype(_impl_.irq_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.irq_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.irq_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.InterruptCount)
}

inline void SysStats_InterruptCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){uint64_t{0u}}
    , decltype(_impl_.irq_){0}
  };
}

SysStats_InterruptCount::~SysStats_InterruptCount() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.InterruptCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_InterruptCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_InterruptCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_InterruptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.InterruptCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.irq_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.irq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_InterruptCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 irq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_irq(&has_bits);
          _impl_.irq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_InterruptCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.InterruptCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 irq = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_irq(), target);
  }

  // optional uint64 count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.InterruptCount)
  return target;
}

size_t SysStats_InterruptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.InterruptCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
    }

    // optional int32 irq = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_irq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_InterruptCount::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_InterruptCount*>(
      &from));
}

void SysStats_InterruptCount::MergeFrom(const SysStats_InterruptCount& from) {
  SysStats_InterruptCount* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.InterruptCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.irq_ = from._impl_.irq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_InterruptCount::CopyFrom(const SysStats_InterruptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.InterruptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_InterruptCount::IsInitialized() const {
  return true;
}

void SysStats_InterruptCount::InternalSwap(SysStats_InterruptCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_InterruptCount, _impl_.irq_)
      + sizeof(SysStats_InterruptCount::_impl_.irq_)
      - PROTOBUF_FIELD_OFFSET(SysStats_InterruptCount, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

std::string SysStats_InterruptCount::GetTypeName() const {
  return "perfetto.protos.SysStats.InterruptCount";
}


// ===================================================================

class SysStats_DevfreqValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_DevfreqValue>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SysStats_DevfreqValue::SysStats_DevfreqValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.DevfreqValue)
}
SysStats_DevfreqValue::SysStats_DevfreqValue(const SysStats_DevfreqValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_DevfreqValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.DevfreqValue)
}

inline void SysStats_DevfreqValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){uint64_t{0u}}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SysStats_DevfreqValue::~SysStats_DevfreqValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.DevfreqValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_DevfreqValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void SysStats_DevfreqValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_DevfreqValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.DevfreqValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  _impl_.value_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_DevfreqValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_DevfreqValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.DevfreqValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.DevfreqValue)
  return target;
}

size_t SysStats_DevfreqValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.DevfreqValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_DevfreqValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_DevfreqValue*>(
      &from));
}

void SysStats_DevfreqValue::MergeFrom(const SysStats_DevfreqValue& from) {
  SysStats_DevfreqValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.DevfreqValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_DevfreqValue::CopyFrom(const SysStats_DevfreqValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.DevfreqValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_DevfreqValue::IsInitialized() const {
  return true;
}

void SysStats_DevfreqValue::InternalSwap(SysStats_DevfreqValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

std::string SysStats_DevfreqValue::GetTypeName() const {
  return "perfetto.protos.SysStats.DevfreqValue";
}


// ===================================================================

class SysStats_BuddyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_BuddyInfo>()._impl_._has_bits_);
  static void set_has_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SysStats_BuddyInfo::SysStats_BuddyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.BuddyInfo)
}
SysStats_BuddyInfo::SysStats_BuddyInfo(const SysStats_BuddyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_BuddyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_pages_){from._impl_.order_pages_}
    , decltype(_impl_.node_){}
    , decltype(_impl_.zone_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_node()) {
    _this->_impl_.node_.Set(from._internal_node(), 
      _this->GetArenaForAllocation());
  }
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_zone()) {
    _this->_impl_.zone_.Set(from._internal_zone(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.BuddyInfo)
}

inline void SysStats_BuddyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_pages_){arena}
    , decltype(_impl_.node_){}
    , decltype(_impl_.zone_){}
  };
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SysStats_BuddyInfo::~SysStats_BuddyInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.BuddyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_BuddyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_pages_.~RepeatedField();
  _impl_.node_.Destroy();
  _impl_.zone_.Destroy();
}

void SysStats_BuddyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_BuddyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.BuddyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_pages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.zone_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_BuddyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_zone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 order_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_order_pages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_order_pages(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_BuddyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.BuddyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node(), target);
  }

  // optional string zone = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_zone(), target);
  }

  // repeated uint32 order_pages = 3;
  for (int i = 0, n = this->_internal_order_pages_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_order_pages(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.BuddyInfo)
  return target;
}

size_t SysStats_BuddyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.BuddyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 order_pages = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.order_pages_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_order_pages_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node());
    }

    // optional string zone = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_zone());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_BuddyInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_BuddyInfo*>(
      &from));
}

void SysStats_BuddyInfo::MergeFrom(const SysStats_BuddyInfo& from) {
  SysStats_BuddyInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.BuddyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_pages_.MergeFrom(from._impl_.order_pages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node(from._internal_node());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_zone(from._internal_zone());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_BuddyInfo::CopyFrom(const SysStats_BuddyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.BuddyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_BuddyInfo::IsInitialized() const {
  return true;
}

void SysStats_BuddyInfo::InternalSwap(SysStats_BuddyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.order_pages_.InternalSwap(&other->_impl_.order_pages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_, lhs_arena,
      &other->_impl_.node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.zone_, lhs_arena,
      &other->_impl_.zone_, rhs_arena
  );
}

std::string SysStats_BuddyInfo::GetTypeName() const {
  return "perfetto.protos.SysStats.BuddyInfo";
}


// ===================================================================

class SysStats_DiskStat::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_DiskStat>()._impl_._has_bits_);
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_sectors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_read_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_write_sectors(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_write_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_discard_sectors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_discard_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flush_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flush_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

SysStats_DiskStat::SysStats_DiskStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.DiskStat)
}
SysStats_DiskStat::SysStats_DiskStat(const SysStats_DiskStat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_DiskStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.read_sectors_){}
    , decltype(_impl_.read_time_ms_){}
    , decltype(_impl_.write_sectors_){}
    , decltype(_impl_.write_time_ms_){}
    , decltype(_impl_.discard_sectors_){}
    , decltype(_impl_.discard_time_ms_){}
    , decltype(_impl_.flush_count_){}
    , decltype(_impl_.flush_time_ms_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_name()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.read_sectors_, &from._impl_.read_sectors_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flush_time_ms_) -
    reinterpret_cast<char*>(&_impl_.read_sectors_)) + sizeof(_impl_.flush_time_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.DiskStat)
}

inline void SysStats_DiskStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.read_sectors_){uint64_t{0u}}
    , decltype(_impl_.read_time_ms_){uint64_t{0u}}
    , decltype(_impl_.write_sectors_){uint64_t{0u}}
    , decltype(_impl_.write_time_ms_){uint64_t{0u}}
    , decltype(_impl_.discard_sectors_){uint64_t{0u}}
    , decltype(_impl_.discard_time_ms_){uint64_t{0u}}
    , decltype(_impl_.flush_count_){uint64_t{0u}}
    , decltype(_impl_.flush_time_ms_){uint64_t{0u}}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SysStats_DiskStat::~SysStats_DiskStat() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.DiskStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_DiskStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_name_.Destroy();
}

void SysStats_DiskStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_DiskStat::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.DiskStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.device_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.read_sectors_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flush_count_) -
        reinterpret_cast<char*>(&_impl_.read_sectors_)) + sizeof(_impl_.flush_count_));
  }
  _impl_.flush_time_ms_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_DiskStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string device_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 read_sectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_read_sectors(&has_bits);
          _impl_.read_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 read_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_read_time_ms(&has_bits);
          _impl_.read_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 write_sectors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_write_sectors(&has_bits);
          _impl_.write_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 write_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_write_time_ms(&has_bits);
          _impl_.write_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 discard_sectors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_discard_sectors(&has_bits);
          _impl_.discard_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 discard_time_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_discard_time_ms(&has_bits);
          _impl_.discard_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 flush_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_flush_count(&has_bits);
          _impl_.flush_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 flush_time_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_flush_time_ms(&has_bits);
          _impl_.flush_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_DiskStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.DiskStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string device_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_name(), target);
  }

  // optional uint64 read_sectors = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_read_sectors(), target);
  }

  // optional uint64 read_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_read_time_ms(), target);
  }

  // optional uint64 write_sectors = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_write_sectors(), target);
  }

  // optional uint64 write_time_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_write_time_ms(), target);
  }

  // optional uint64 discard_sectors = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_discard_sectors(), target);
  }

  // optional uint64 discard_time_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_discard_time_ms(), target);
  }

  // optional uint64 flush_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_flush_count(), target);
  }

  // optional uint64 flush_time_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_flush_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.DiskStat)
  return target;
}

size_t SysStats_DiskStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.DiskStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional uint64 read_sectors = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_read_sectors());
    }

    // optional uint64 read_time_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_read_time_ms());
    }

    // optional uint64 write_sectors = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_write_sectors());
    }

    // optional uint64 write_time_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_write_time_ms());
    }

    // optional uint64 discard_sectors = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_discard_sectors());
    }

    // optional uint64 discard_time_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_discard_time_ms());
    }

    // optional uint64 flush_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flush_count());
    }

  }
  // optional uint64 flush_time_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flush_time_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_DiskStat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_DiskStat*>(
      &from));
}

void SysStats_DiskStat::MergeFrom(const SysStats_DiskStat& from) {
  SysStats_DiskStat* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.DiskStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.read_sectors_ = from._impl_.read_sectors_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.read_time_ms_ = from._impl_.read_time_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.write_sectors_ = from._impl_.write_sectors_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.write_time_ms_ = from._impl_.write_time_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.discard_sectors_ = from._impl_.discard_sectors_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.discard_time_ms_ = from._impl_.discard_time_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.flush_count_ = from._impl_.flush_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_flush_time_ms(from._internal_flush_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_DiskStat::CopyFrom(const SysStats_DiskStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.DiskStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_DiskStat::IsInitialized() const {
  return true;
}

void SysStats_DiskStat::InternalSwap(SysStats_DiskStat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_DiskStat, _impl_.flush_time_ms_)
      + sizeof(SysStats_DiskStat::_impl_.flush_time_ms_)
      - PROTOBUF_FIELD_OFFSET(SysStats_DiskStat, _impl_.read_sectors_)>(
          reinterpret_cast<char*>(&_impl_.read_sectors_),
          reinterpret_cast<char*>(&other->_impl_.read_sectors_));
}

std::string SysStats_DiskStat::GetTypeName() const {
  return "perfetto.protos.SysStats.DiskStat";
}


// ===================================================================

class SysStats_PsiSample::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_PsiSample>()._impl_._has_bits_);
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_PsiSample::SysStats_PsiSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.PsiSample)
}
SysStats_PsiSample::SysStats_PsiSample(const SysStats_PsiSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats_PsiSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.total_ns_){}
    , decltype(_impl_.resource_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.total_ns_, &from._impl_.total_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resource_) -
    reinterpret_cast<char*>(&_impl_.total_ns_)) + sizeof(_impl_.resource_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.PsiSample)
}

inline void SysStats_PsiSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.total_ns_){uint64_t{0u}}
    , decltype(_impl_.resource_){0}
  };
}

SysStats_PsiSample::~SysStats_PsiSample() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.PsiSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_PsiSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_PsiSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_PsiSample::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.PsiSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.total_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resource_) -
        reinterpret_cast<char*>(&_impl_.total_ns_)) + sizeof(_impl_.resource_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats_PsiSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.SysStats.PsiSample.PsiResource resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::SysStats_PsiSample_PsiResource_IsValid(val))) {
            _internal_set_resource(static_cast<::perfetto::protos::SysStats_PsiSample_PsiResource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_ns(&has_bits);
          _impl_.total_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats_PsiSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.PsiSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.SysStats.PsiSample.PsiResource resource = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resource(), target);
  }

  // optional uint64 total_ns = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.PsiSample)
  return target;
}

size_t SysStats_PsiSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.PsiSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 total_ns = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_ns());
    }

    // optional .perfetto.protos.SysStats.PsiSample.PsiResource resource = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_resource());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats_PsiSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats_PsiSample*>(
      &from));
}

void SysStats_PsiSample::MergeFrom(const SysStats_PsiSample& from) {
  SysStats_PsiSample* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.PsiSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.total_ns_ = from._impl_.total_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.resource_ = from._impl_.resource_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats_PsiSample::CopyFrom(const SysStats_PsiSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.PsiSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_PsiSample::IsInitialized() const {
  return true;
}

void SysStats_PsiSample::InternalSwap(SysStats_PsiSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_PsiSample, _impl_.resource_)
      + sizeof(SysStats_PsiSample::_impl_.resource_)
      - PROTOBUF_FIELD_OFFSET(SysStats_PsiSample, _impl_.total_ns_)>(
          reinterpret_cast<char*>(&_impl_.total_ns_),
          reinterpret_cast<char*>(&other->_impl_.total_ns_));
}

std::string SysStats_PsiSample::GetTypeName() const {
  return "perfetto.protos.SysStats.PsiSample";
}


// ===================================================================

class SysStats::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats>()._impl_._has_bits_);
  static void set_has_num_forks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_irq_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_softirq_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_collection_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SysStats::SysStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats)
}
SysStats::SysStats(const SysStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SysStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meminfo_){from._impl_.meminfo_}
    , decltype(_impl_.vmstat_){from._impl_.vmstat_}
    , decltype(_impl_.cpu_stat_){from._impl_.cpu_stat_}
    , decltype(_impl_.num_irq_){from._impl_.num_irq_}
    , decltype(_impl_.num_softirq_){from._impl_.num_softirq_}
    , decltype(_impl_.devfreq_){from._impl_.devfreq_}
    , decltype(_impl_.cpufreq_khz_){from._impl_.cpufreq_khz_}
    , decltype(_impl_.buddy_info_){from._impl_.buddy_info_}
    , decltype(_impl_.disk_stat_){from._impl_.disk_stat_}
    , decltype(_impl_.psi_){from._impl_.psi_}
    , decltype(_impl_.num_forks_){}
    , decltype(_impl_.num_irq_total_){}
    , decltype(_impl_.num_softirq_total_){}
    , decltype(_impl_.collection_end_timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.num_forks_, &from._impl_.num_forks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collection_end_timestamp_) -
    reinterpret_cast<char*>(&_impl_.num_forks_)) + sizeof(_impl_.collection_end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats)
}

inline void SysStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meminfo_){arena}
    , decltype(_impl_.vmstat_){arena}
    , decltype(_impl_.cpu_stat_){arena}
    , decltype(_impl_.num_irq_){arena}
    , decltype(_impl_.num_softirq_){arena}
    , decltype(_impl_.devfreq_){arena}
    , decltype(_impl_.cpufreq_khz_){arena}
    , decltype(_impl_.buddy_info_){arena}
    , decltype(_impl_.disk_stat_){arena}
    , decltype(_impl_.psi_){arena}
    , decltype(_impl_.num_forks_){uint64_t{0u}}
    , decltype(_impl_.num_irq_total_){uint64_t{0u}}
    , decltype(_impl_.num_softirq_total_){uint64_t{0u}}
    , decltype(_impl_.collection_end_timestamp_){uint64_t{0u}}
  };
}

SysStats::~SysStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meminfo_.~RepeatedPtrField();
  _impl_.vmstat_.~RepeatedPtrField();
  _impl_.cpu_stat_.~RepeatedPtrField();
  _impl_.num_irq_.~RepeatedPtrField();
  _impl_.num_softirq_.~RepeatedPtrField();
  _impl_.devfreq_.~RepeatedPtrField();
  _impl_.cpufreq_khz_.~RepeatedField();
  _impl_.buddy_info_.~RepeatedPtrField();
  _impl_.disk_stat_.~RepeatedPtrField();
  _impl_.psi_.~RepeatedPtrField();
}

void SysStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meminfo_.Clear();
  _impl_.vmstat_.Clear();
  _impl_.cpu_stat_.Clear();
  _impl_.num_irq_.Clear();
  _impl_.num_softirq_.Clear();
  _impl_.devfreq_.Clear();
  _impl_.cpufreq_khz_.Clear();
  _impl_.buddy_info_.Clear();
  _impl_.disk_stat_.Clear();
  _impl_.psi_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.num_forks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.collection_end_timestamp_) -
        reinterpret_cast<char*>(&_impl_.num_forks_)) + sizeof(_impl_.collection_end_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SysStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meminfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vmstat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 num_forks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_forks(&has_bits);
          _impl_.num_forks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 num_irq_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_irq_total(&has_bits);
          _impl_.num_irq_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_num_irq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 num_softirq_total = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_softirq_total(&has_bits);
          _impl_.num_softirq_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_num_softirq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 collection_end_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_collection_end_timestamp(&has_bits);
          _impl_.collection_end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devfreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cpufreq_khz = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cpufreq_khz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cpufreq_khz(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buddy_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disk_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.SysStats.PsiSample psi = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_psi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_meminfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_meminfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vmstat_size()); i < n; i++) {
    const auto& repfield = this->_internal_vmstat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpu_stat_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpu_stat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 num_forks = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_forks(), target);
  }

  // optional uint64 num_irq_total = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_num_irq_total(), target);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_num_irq_size()); i < n; i++) {
    const auto& repfield = this->_internal_num_irq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 num_softirq_total = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_num_softirq_total(), target);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_num_softirq_size()); i < n; i++) {
    const auto& repfield = this->_internal_num_softirq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 collection_end_timestamp = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_collection_end_timestamp(), target);
  }

  // repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devfreq_size()); i < n; i++) {
    const auto& repfield = this->_internal_devfreq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 cpufreq_khz = 11;
  for (int i = 0, n = this->_internal_cpufreq_khz_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cpufreq_khz(i), target);
  }

  // repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buddy_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_buddy_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_disk_stat_size()); i < n; i++) {
    const auto& repfield = this->_internal_disk_stat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.SysStats.PsiSample psi = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_psi_size()); i < n; i++) {
    const auto& repfield = this->_internal_psi(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats)
  return target;
}

size_t SysStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  total_size += 1UL * this->_internal_meminfo_size();
  for (const auto& msg : this->_impl_.meminfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  total_size += 1UL * this->_internal_vmstat_size();
  for (const auto& msg : this->_impl_.vmstat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  total_size += 1UL * this->_internal_cpu_stat_size();
  for (const auto& msg : this->_impl_.cpu_stat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  total_size += 1UL * this->_internal_num_irq_size();
  for (const auto& msg : this->_impl_.num_irq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  total_size += 1UL * this->_internal_num_softirq_size();
  for (const auto& msg : this->_impl_.num_softirq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
  total_size += 1UL * this->_internal_devfreq_size();
  for (const auto& msg : this->_impl_.devfreq_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 cpufreq_khz = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cpufreq_khz_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cpufreq_khz_size());
    total_size += data_size;
  }

  // repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
  total_size += 1UL * this->_internal_buddy_info_size();
  for (const auto& msg : this->_impl_.buddy_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
  total_size += 1UL * this->_internal_disk_stat_size();
  for (const auto& msg : this->_impl_.disk_stat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.PsiSample psi = 14;
  total_size += 1UL * this->_internal_psi_size();
  for (const auto& msg : this->_impl_.psi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 num_forks = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num_forks());
    }

    // optional uint64 num_irq_total = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num_irq_total());
    }

    // optional uint64 num_softirq_total = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num_softirq_total());
    }

    // optional uint64 collection_end_timestamp = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_collection_end_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SysStats*>(
      &from));
}

void SysStats::MergeFrom(const SysStats& from) {
  SysStats* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.meminfo_.MergeFrom(from._impl_.meminfo_);
  _this->_impl_.vmstat_.MergeFrom(from._impl_.vmstat_);
  _this->_impl_.cpu_stat_.MergeFrom(from._impl_.cpu_stat_);
  _this->_impl_.num_irq_.MergeFrom(from._impl_.num_irq_);
  _this->_impl_.num_softirq_.MergeFrom(from._impl_.num_softirq_);
  _this->_impl_.devfreq_.MergeFrom(from._impl_.devfreq_);
  _this->_impl_.cpufreq_khz_.MergeFrom(from._impl_.cpufreq_khz_);
  _this->_impl_.buddy_info_.MergeFrom(from._impl_.buddy_info_);
  _this->_impl_.disk_stat_.MergeFrom(from._impl_.disk_stat_);
  _this->_impl_.psi_.MergeFrom(from._impl_.psi_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_forks_ = from._impl_.num_forks_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_irq_total_ = from._impl_.num_irq_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_softirq_total_ = from._impl_.num_softirq_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.collection_end_timestamp_ = from._impl_.collection_end_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SysStats::CopyFrom(const SysStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats::IsInitialized() const {
  return true;
}

void SysStats::InternalSwap(SysStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.meminfo_.InternalSwap(&other->_impl_.meminfo_);
  _impl_.vmstat_.InternalSwap(&other->_impl_.vmstat_);
  _impl_.cpu_stat_.InternalSwap(&other->_impl_.cpu_stat_);
  _impl_.num_irq_.InternalSwap(&other->_impl_.num_irq_);
  _impl_.num_softirq_.InternalSwap(&other->_impl_.num_softirq_);
  _impl_.devfreq_.InternalSwap(&other->_impl_.devfreq_);
  _impl_.cpufreq_khz_.InternalSwap(&other->_impl_.cpufreq_khz_);
  _impl_.buddy_info_.InternalSwap(&other->_impl_.buddy_info_);
  _impl_.disk_stat_.InternalSwap(&other->_impl_.disk_stat_);
  _impl_.psi_.InternalSwap(&other->_impl_.psi_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats, _impl_.collection_end_timestamp_)
      + sizeof(SysStats::_impl_.collection_end_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SysStats, _impl_.num_forks_)>(
          reinterpret_cast<char*>(&_impl_.num_forks_),
          reinterpret_cast<char*>(&other->_impl_.num_forks_));
}

std::string SysStats::GetTypeName() const {
  return "perfetto.protos.SysStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_MeminfoValue*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_MeminfoValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_MeminfoValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_VmstatValue*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_VmstatValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_VmstatValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_CpuTimes*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_CpuTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_CpuTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_InterruptCount*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_InterruptCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_InterruptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_DevfreqValue*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_DevfreqValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_DevfreqValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_BuddyInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_BuddyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_BuddyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_DiskStat*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_DiskStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_DiskStat >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_PsiSample*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_PsiSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_PsiSample >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
