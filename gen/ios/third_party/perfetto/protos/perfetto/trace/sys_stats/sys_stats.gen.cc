#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/sys_stats/sys_stats.gen.h"
#include "protos/perfetto/common/sys_stats_counters.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

SysStats::SysStats() = default;
SysStats::~SysStats() = default;
SysStats::SysStats(const SysStats&) = default;
SysStats& SysStats::operator=(const SysStats&) = default;
SysStats::SysStats(SysStats&&) noexcept = default;
SysStats& SysStats::operator=(SysStats&&) = default;

bool SysStats::operator==(const SysStats& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(meminfo_, other.meminfo_)
   && ::protozero::internal::gen_helpers::EqualsField(vmstat_, other.vmstat_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_stat_, other.cpu_stat_)
   && ::protozero::internal::gen_helpers::EqualsField(num_forks_, other.num_forks_)
   && ::protozero::internal::gen_helpers::EqualsField(num_irq_total_, other.num_irq_total_)
   && ::protozero::internal::gen_helpers::EqualsField(num_irq_, other.num_irq_)
   && ::protozero::internal::gen_helpers::EqualsField(num_softirq_total_, other.num_softirq_total_)
   && ::protozero::internal::gen_helpers::EqualsField(num_softirq_, other.num_softirq_)
   && ::protozero::internal::gen_helpers::EqualsField(collection_end_timestamp_, other.collection_end_timestamp_)
   && ::protozero::internal::gen_helpers::EqualsField(devfreq_, other.devfreq_)
   && ::protozero::internal::gen_helpers::EqualsField(cpufreq_khz_, other.cpufreq_khz_)
   && ::protozero::internal::gen_helpers::EqualsField(buddy_info_, other.buddy_info_)
   && ::protozero::internal::gen_helpers::EqualsField(disk_stat_, other.disk_stat_)
   && ::protozero::internal::gen_helpers::EqualsField(psi_, other.psi_);
}

int SysStats::meminfo_size() const { return static_cast<int>(meminfo_.size()); }
void SysStats::clear_meminfo() { meminfo_.clear(); }
SysStats_MeminfoValue* SysStats::add_meminfo() { meminfo_.emplace_back(); return &meminfo_.back(); }
int SysStats::vmstat_size() const { return static_cast<int>(vmstat_.size()); }
void SysStats::clear_vmstat() { vmstat_.clear(); }
SysStats_VmstatValue* SysStats::add_vmstat() { vmstat_.emplace_back(); return &vmstat_.back(); }
int SysStats::cpu_stat_size() const { return static_cast<int>(cpu_stat_.size()); }
void SysStats::clear_cpu_stat() { cpu_stat_.clear(); }
SysStats_CpuTimes* SysStats::add_cpu_stat() { cpu_stat_.emplace_back(); return &cpu_stat_.back(); }
int SysStats::num_irq_size() const { return static_cast<int>(num_irq_.size()); }
void SysStats::clear_num_irq() { num_irq_.clear(); }
SysStats_InterruptCount* SysStats::add_num_irq() { num_irq_.emplace_back(); return &num_irq_.back(); }
int SysStats::num_softirq_size() const { return static_cast<int>(num_softirq_.size()); }
void SysStats::clear_num_softirq() { num_softirq_.clear(); }
SysStats_InterruptCount* SysStats::add_num_softirq() { num_softirq_.emplace_back(); return &num_softirq_.back(); }
int SysStats::devfreq_size() const { return static_cast<int>(devfreq_.size()); }
void SysStats::clear_devfreq() { devfreq_.clear(); }
SysStats_DevfreqValue* SysStats::add_devfreq() { devfreq_.emplace_back(); return &devfreq_.back(); }
int SysStats::buddy_info_size() const { return static_cast<int>(buddy_info_.size()); }
void SysStats::clear_buddy_info() { buddy_info_.clear(); }
SysStats_BuddyInfo* SysStats::add_buddy_info() { buddy_info_.emplace_back(); return &buddy_info_.back(); }
int SysStats::disk_stat_size() const { return static_cast<int>(disk_stat_.size()); }
void SysStats::clear_disk_stat() { disk_stat_.clear(); }
SysStats_DiskStat* SysStats::add_disk_stat() { disk_stat_.emplace_back(); return &disk_stat_.back(); }
int SysStats::psi_size() const { return static_cast<int>(psi_.size()); }
void SysStats::clear_psi() { psi_.clear(); }
SysStats_PsiSample* SysStats::add_psi() { psi_.emplace_back(); return &psi_.back(); }
bool SysStats::ParseFromArray(const void* raw, size_t size) {
  meminfo_.clear();
  vmstat_.clear();
  cpu_stat_.clear();
  num_irq_.clear();
  num_softirq_.clear();
  devfreq_.clear();
  cpufreq_khz_.clear();
  buddy_info_.clear();
  disk_stat_.clear();
  psi_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* meminfo */:
        meminfo_.emplace_back();
        meminfo_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* vmstat */:
        vmstat_.emplace_back();
        vmstat_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* cpu_stat */:
        cpu_stat_.emplace_back();
        cpu_stat_.back().ParseFromArray(field.data(), field.size());
        break;
      case 4 /* num_forks */:
        field.get(&num_forks_);
        break;
      case 5 /* num_irq_total */:
        field.get(&num_irq_total_);
        break;
      case 6 /* num_irq */:
        num_irq_.emplace_back();
        num_irq_.back().ParseFromArray(field.data(), field.size());
        break;
      case 7 /* num_softirq_total */:
        field.get(&num_softirq_total_);
        break;
      case 8 /* num_softirq */:
        num_softirq_.emplace_back();
        num_softirq_.back().ParseFromArray(field.data(), field.size());
        break;
      case 9 /* collection_end_timestamp */:
        field.get(&collection_end_timestamp_);
        break;
      case 10 /* devfreq */:
        devfreq_.emplace_back();
        devfreq_.back().ParseFromArray(field.data(), field.size());
        break;
      case 11 /* cpufreq_khz */:
        cpufreq_khz_.emplace_back();
        field.get(&cpufreq_khz_.back());
        break;
      case 12 /* buddy_info */:
        buddy_info_.emplace_back();
        buddy_info_.back().ParseFromArray(field.data(), field.size());
        break;
      case 13 /* disk_stat */:
        disk_stat_.emplace_back();
        disk_stat_.back().ParseFromArray(field.data(), field.size());
        break;
      case 14 /* psi */:
        psi_.emplace_back();
        psi_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats::Serialize(::protozero::Message* msg) const {
  // Field 1: meminfo
  for (auto& it : meminfo_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: vmstat
  for (auto& it : vmstat_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: cpu_stat
  for (auto& it : cpu_stat_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: num_forks
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, num_forks_, msg);
  }

  // Field 5: num_irq_total
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, num_irq_total_, msg);
  }

  // Field 6: num_irq
  for (auto& it : num_irq_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 7: num_softirq_total
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, num_softirq_total_, msg);
  }

  // Field 8: num_softirq
  for (auto& it : num_softirq_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(8));
  }

  // Field 9: collection_end_timestamp
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, collection_end_timestamp_, msg);
  }

  // Field 10: devfreq
  for (auto& it : devfreq_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(10));
  }

  // Field 11: cpufreq_khz
  for (auto& it : cpufreq_khz_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, it, msg);
  }

  // Field 12: buddy_info
  for (auto& it : buddy_info_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(12));
  }

  // Field 13: disk_stat
  for (auto& it : disk_stat_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(13));
  }

  // Field 14: psi
  for (auto& it : psi_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(14));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_PsiSample::SysStats_PsiSample() = default;
SysStats_PsiSample::~SysStats_PsiSample() = default;
SysStats_PsiSample::SysStats_PsiSample(const SysStats_PsiSample&) = default;
SysStats_PsiSample& SysStats_PsiSample::operator=(const SysStats_PsiSample&) = default;
SysStats_PsiSample::SysStats_PsiSample(SysStats_PsiSample&&) noexcept = default;
SysStats_PsiSample& SysStats_PsiSample::operator=(SysStats_PsiSample&&) = default;

bool SysStats_PsiSample::operator==(const SysStats_PsiSample& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(resource_, other.resource_)
   && ::protozero::internal::gen_helpers::EqualsField(total_ns_, other.total_ns_);
}

bool SysStats_PsiSample::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* resource */:
        field.get(&resource_);
        break;
      case 2 /* total_ns */:
        field.get(&total_ns_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_PsiSample::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_PsiSample::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_PsiSample::Serialize(::protozero::Message* msg) const {
  // Field 1: resource
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, resource_, msg);
  }

  // Field 2: total_ns
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, total_ns_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_DiskStat::SysStats_DiskStat() = default;
SysStats_DiskStat::~SysStats_DiskStat() = default;
SysStats_DiskStat::SysStats_DiskStat(const SysStats_DiskStat&) = default;
SysStats_DiskStat& SysStats_DiskStat::operator=(const SysStats_DiskStat&) = default;
SysStats_DiskStat::SysStats_DiskStat(SysStats_DiskStat&&) noexcept = default;
SysStats_DiskStat& SysStats_DiskStat::operator=(SysStats_DiskStat&&) = default;

bool SysStats_DiskStat::operator==(const SysStats_DiskStat& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(device_name_, other.device_name_)
   && ::protozero::internal::gen_helpers::EqualsField(read_sectors_, other.read_sectors_)
   && ::protozero::internal::gen_helpers::EqualsField(read_time_ms_, other.read_time_ms_)
   && ::protozero::internal::gen_helpers::EqualsField(write_sectors_, other.write_sectors_)
   && ::protozero::internal::gen_helpers::EqualsField(write_time_ms_, other.write_time_ms_)
   && ::protozero::internal::gen_helpers::EqualsField(discard_sectors_, other.discard_sectors_)
   && ::protozero::internal::gen_helpers::EqualsField(discard_time_ms_, other.discard_time_ms_)
   && ::protozero::internal::gen_helpers::EqualsField(flush_count_, other.flush_count_)
   && ::protozero::internal::gen_helpers::EqualsField(flush_time_ms_, other.flush_time_ms_);
}

bool SysStats_DiskStat::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* device_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &device_name_);
        break;
      case 2 /* read_sectors */:
        field.get(&read_sectors_);
        break;
      case 3 /* read_time_ms */:
        field.get(&read_time_ms_);
        break;
      case 4 /* write_sectors */:
        field.get(&write_sectors_);
        break;
      case 5 /* write_time_ms */:
        field.get(&write_time_ms_);
        break;
      case 6 /* discard_sectors */:
        field.get(&discard_sectors_);
        break;
      case 7 /* discard_time_ms */:
        field.get(&discard_time_ms_);
        break;
      case 8 /* flush_count */:
        field.get(&flush_count_);
        break;
      case 9 /* flush_time_ms */:
        field.get(&flush_time_ms_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_DiskStat::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_DiskStat::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_DiskStat::Serialize(::protozero::Message* msg) const {
  // Field 1: device_name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, device_name_, msg);
  }

  // Field 2: read_sectors
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, read_sectors_, msg);
  }

  // Field 3: read_time_ms
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, read_time_ms_, msg);
  }

  // Field 4: write_sectors
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, write_sectors_, msg);
  }

  // Field 5: write_time_ms
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, write_time_ms_, msg);
  }

  // Field 6: discard_sectors
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, discard_sectors_, msg);
  }

  // Field 7: discard_time_ms
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, discard_time_ms_, msg);
  }

  // Field 8: flush_count
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, flush_count_, msg);
  }

  // Field 9: flush_time_ms
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, flush_time_ms_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_BuddyInfo::SysStats_BuddyInfo() = default;
SysStats_BuddyInfo::~SysStats_BuddyInfo() = default;
SysStats_BuddyInfo::SysStats_BuddyInfo(const SysStats_BuddyInfo&) = default;
SysStats_BuddyInfo& SysStats_BuddyInfo::operator=(const SysStats_BuddyInfo&) = default;
SysStats_BuddyInfo::SysStats_BuddyInfo(SysStats_BuddyInfo&&) noexcept = default;
SysStats_BuddyInfo& SysStats_BuddyInfo::operator=(SysStats_BuddyInfo&&) = default;

bool SysStats_BuddyInfo::operator==(const SysStats_BuddyInfo& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(node_, other.node_)
   && ::protozero::internal::gen_helpers::EqualsField(zone_, other.zone_)
   && ::protozero::internal::gen_helpers::EqualsField(order_pages_, other.order_pages_);
}

bool SysStats_BuddyInfo::ParseFromArray(const void* raw, size_t size) {
  order_pages_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* node */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &node_);
        break;
      case 2 /* zone */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &zone_);
        break;
      case 3 /* order_pages */:
        order_pages_.emplace_back();
        field.get(&order_pages_.back());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_BuddyInfo::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_BuddyInfo::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_BuddyInfo::Serialize(::protozero::Message* msg) const {
  // Field 1: node
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, node_, msg);
  }

  // Field 2: zone
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, zone_, msg);
  }

  // Field 3: order_pages
  for (auto& it : order_pages_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, it, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_DevfreqValue::SysStats_DevfreqValue() = default;
SysStats_DevfreqValue::~SysStats_DevfreqValue() = default;
SysStats_DevfreqValue::SysStats_DevfreqValue(const SysStats_DevfreqValue&) = default;
SysStats_DevfreqValue& SysStats_DevfreqValue::operator=(const SysStats_DevfreqValue&) = default;
SysStats_DevfreqValue::SysStats_DevfreqValue(SysStats_DevfreqValue&&) noexcept = default;
SysStats_DevfreqValue& SysStats_DevfreqValue::operator=(SysStats_DevfreqValue&&) = default;

bool SysStats_DevfreqValue::operator==(const SysStats_DevfreqValue& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(key_, other.key_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool SysStats_DevfreqValue::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* key */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &key_);
        break;
      case 2 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_DevfreqValue::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_DevfreqValue::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_DevfreqValue::Serialize(::protozero::Message* msg) const {
  // Field 1: key
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, key_, msg);
  }

  // Field 2: value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_InterruptCount::SysStats_InterruptCount() = default;
SysStats_InterruptCount::~SysStats_InterruptCount() = default;
SysStats_InterruptCount::SysStats_InterruptCount(const SysStats_InterruptCount&) = default;
SysStats_InterruptCount& SysStats_InterruptCount::operator=(const SysStats_InterruptCount&) = default;
SysStats_InterruptCount::SysStats_InterruptCount(SysStats_InterruptCount&&) noexcept = default;
SysStats_InterruptCount& SysStats_InterruptCount::operator=(SysStats_InterruptCount&&) = default;

bool SysStats_InterruptCount::operator==(const SysStats_InterruptCount& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(irq_, other.irq_)
   && ::protozero::internal::gen_helpers::EqualsField(count_, other.count_);
}

bool SysStats_InterruptCount::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* irq */:
        field.get(&irq_);
        break;
      case 2 /* count */:
        field.get(&count_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_InterruptCount::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_InterruptCount::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_InterruptCount::Serialize(::protozero::Message* msg) const {
  // Field 1: irq
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, irq_, msg);
  }

  // Field 2: count
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, count_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_CpuTimes::SysStats_CpuTimes() = default;
SysStats_CpuTimes::~SysStats_CpuTimes() = default;
SysStats_CpuTimes::SysStats_CpuTimes(const SysStats_CpuTimes&) = default;
SysStats_CpuTimes& SysStats_CpuTimes::operator=(const SysStats_CpuTimes&) = default;
SysStats_CpuTimes::SysStats_CpuTimes(SysStats_CpuTimes&&) noexcept = default;
SysStats_CpuTimes& SysStats_CpuTimes::operator=(SysStats_CpuTimes&&) = default;

bool SysStats_CpuTimes::operator==(const SysStats_CpuTimes& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cpu_id_, other.cpu_id_)
   && ::protozero::internal::gen_helpers::EqualsField(user_ns_, other.user_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(user_nice_ns_, other.user_nice_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(system_mode_ns_, other.system_mode_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(idle_ns_, other.idle_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(io_wait_ns_, other.io_wait_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(irq_ns_, other.irq_ns_)
   && ::protozero::internal::gen_helpers::EqualsField(softirq_ns_, other.softirq_ns_);
}

bool SysStats_CpuTimes::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cpu_id */:
        field.get(&cpu_id_);
        break;
      case 2 /* user_ns */:
        field.get(&user_ns_);
        break;
      case 3 /* user_nice_ns */:
        field.get(&user_nice_ns_);
        break;
      case 4 /* system_mode_ns */:
        field.get(&system_mode_ns_);
        break;
      case 5 /* idle_ns */:
        field.get(&idle_ns_);
        break;
      case 6 /* io_wait_ns */:
        field.get(&io_wait_ns_);
        break;
      case 7 /* irq_ns */:
        field.get(&irq_ns_);
        break;
      case 8 /* softirq_ns */:
        field.get(&softirq_ns_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_CpuTimes::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_CpuTimes::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_CpuTimes::Serialize(::protozero::Message* msg) const {
  // Field 1: cpu_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cpu_id_, msg);
  }

  // Field 2: user_ns
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, user_ns_, msg);
  }

  // Field 3: user_nice_ns
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, user_nice_ns_, msg);
  }

  // Field 4: system_mode_ns
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, system_mode_ns_, msg);
  }

  // Field 5: idle_ns
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, idle_ns_, msg);
  }

  // Field 6: io_wait_ns
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, io_wait_ns_, msg);
  }

  // Field 7: irq_ns
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, irq_ns_, msg);
  }

  // Field 8: softirq_ns
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, softirq_ns_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_VmstatValue::SysStats_VmstatValue() = default;
SysStats_VmstatValue::~SysStats_VmstatValue() = default;
SysStats_VmstatValue::SysStats_VmstatValue(const SysStats_VmstatValue&) = default;
SysStats_VmstatValue& SysStats_VmstatValue::operator=(const SysStats_VmstatValue&) = default;
SysStats_VmstatValue::SysStats_VmstatValue(SysStats_VmstatValue&&) noexcept = default;
SysStats_VmstatValue& SysStats_VmstatValue::operator=(SysStats_VmstatValue&&) = default;

bool SysStats_VmstatValue::operator==(const SysStats_VmstatValue& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(key_, other.key_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool SysStats_VmstatValue::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* key */:
        field.get(&key_);
        break;
      case 2 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_VmstatValue::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_VmstatValue::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_VmstatValue::Serialize(::protozero::Message* msg) const {
  // Field 1: key
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, key_, msg);
  }

  // Field 2: value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SysStats_MeminfoValue::SysStats_MeminfoValue() = default;
SysStats_MeminfoValue::~SysStats_MeminfoValue() = default;
SysStats_MeminfoValue::SysStats_MeminfoValue(const SysStats_MeminfoValue&) = default;
SysStats_MeminfoValue& SysStats_MeminfoValue::operator=(const SysStats_MeminfoValue&) = default;
SysStats_MeminfoValue::SysStats_MeminfoValue(SysStats_MeminfoValue&&) noexcept = default;
SysStats_MeminfoValue& SysStats_MeminfoValue::operator=(SysStats_MeminfoValue&&) = default;

bool SysStats_MeminfoValue::operator==(const SysStats_MeminfoValue& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(key_, other.key_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool SysStats_MeminfoValue::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* key */:
        field.get(&key_);
        break;
      case 2 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SysStats_MeminfoValue::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SysStats_MeminfoValue::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SysStats_MeminfoValue::Serialize(::protozero::Message* msg) const {
  // Field 1: key
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, key_, msg);
  }

  // Field 2: value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
