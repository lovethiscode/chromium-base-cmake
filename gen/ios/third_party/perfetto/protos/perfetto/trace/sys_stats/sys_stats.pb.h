// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/sys_stats/sys_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/common/sys_stats_counters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class SysStats;
struct SysStatsDefaultTypeInternal;
extern SysStatsDefaultTypeInternal _SysStats_default_instance_;
class SysStats_BuddyInfo;
struct SysStats_BuddyInfoDefaultTypeInternal;
extern SysStats_BuddyInfoDefaultTypeInternal _SysStats_BuddyInfo_default_instance_;
class SysStats_CpuTimes;
struct SysStats_CpuTimesDefaultTypeInternal;
extern SysStats_CpuTimesDefaultTypeInternal _SysStats_CpuTimes_default_instance_;
class SysStats_DevfreqValue;
struct SysStats_DevfreqValueDefaultTypeInternal;
extern SysStats_DevfreqValueDefaultTypeInternal _SysStats_DevfreqValue_default_instance_;
class SysStats_DiskStat;
struct SysStats_DiskStatDefaultTypeInternal;
extern SysStats_DiskStatDefaultTypeInternal _SysStats_DiskStat_default_instance_;
class SysStats_InterruptCount;
struct SysStats_InterruptCountDefaultTypeInternal;
extern SysStats_InterruptCountDefaultTypeInternal _SysStats_InterruptCount_default_instance_;
class SysStats_MeminfoValue;
struct SysStats_MeminfoValueDefaultTypeInternal;
extern SysStats_MeminfoValueDefaultTypeInternal _SysStats_MeminfoValue_default_instance_;
class SysStats_PsiSample;
struct SysStats_PsiSampleDefaultTypeInternal;
extern SysStats_PsiSampleDefaultTypeInternal _SysStats_PsiSample_default_instance_;
class SysStats_VmstatValue;
struct SysStats_VmstatValueDefaultTypeInternal;
extern SysStats_VmstatValueDefaultTypeInternal _SysStats_VmstatValue_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SysStats* Arena::CreateMaybeMessage<::perfetto::protos::SysStats>(Arena*);
template<> ::perfetto::protos::SysStats_BuddyInfo* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_BuddyInfo>(Arena*);
template<> ::perfetto::protos::SysStats_CpuTimes* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_CpuTimes>(Arena*);
template<> ::perfetto::protos::SysStats_DevfreqValue* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_DevfreqValue>(Arena*);
template<> ::perfetto::protos::SysStats_DiskStat* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_DiskStat>(Arena*);
template<> ::perfetto::protos::SysStats_InterruptCount* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_InterruptCount>(Arena*);
template<> ::perfetto::protos::SysStats_MeminfoValue* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_MeminfoValue>(Arena*);
template<> ::perfetto::protos::SysStats_PsiSample* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_PsiSample>(Arena*);
template<> ::perfetto::protos::SysStats_VmstatValue* Arena::CreateMaybeMessage<::perfetto::protos::SysStats_VmstatValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum SysStats_PsiSample_PsiResource : int {
  SysStats_PsiSample_PsiResource_PSI_RESOURCE_UNSPECIFIED = 0,
  SysStats_PsiSample_PsiResource_PSI_RESOURCE_CPU_SOME = 1,
  SysStats_PsiSample_PsiResource_PSI_RESOURCE_CPU_FULL = 2,
  SysStats_PsiSample_PsiResource_PSI_RESOURCE_IO_SOME = 3,
  SysStats_PsiSample_PsiResource_PSI_RESOURCE_IO_FULL = 4,
  SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_SOME = 5,
  SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_FULL = 6
};
bool SysStats_PsiSample_PsiResource_IsValid(int value);
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample_PsiResource_PsiResource_MIN = SysStats_PsiSample_PsiResource_PSI_RESOURCE_UNSPECIFIED;
constexpr SysStats_PsiSample_PsiResource SysStats_PsiSample_PsiResource_PsiResource_MAX = SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_FULL;
constexpr int SysStats_PsiSample_PsiResource_PsiResource_ARRAYSIZE = SysStats_PsiSample_PsiResource_PsiResource_MAX + 1;

const std::string& SysStats_PsiSample_PsiResource_Name(SysStats_PsiSample_PsiResource value);
template<typename T>
inline const std::string& SysStats_PsiSample_PsiResource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SysStats_PsiSample_PsiResource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SysStats_PsiSample_PsiResource_Name.");
  return SysStats_PsiSample_PsiResource_Name(static_cast<SysStats_PsiSample_PsiResource>(enum_t_value));
}
bool SysStats_PsiSample_PsiResource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysStats_PsiSample_PsiResource* value);
// ===================================================================

class SysStats_MeminfoValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.MeminfoValue) */ {
 public:
  inline SysStats_MeminfoValue() : SysStats_MeminfoValue(nullptr) {}
  ~SysStats_MeminfoValue() override;
  explicit PROTOBUF_CONSTEXPR SysStats_MeminfoValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_MeminfoValue(const SysStats_MeminfoValue& from);
  SysStats_MeminfoValue(SysStats_MeminfoValue&& from) noexcept
    : SysStats_MeminfoValue() {
    *this = ::std::move(from);
  }

  inline SysStats_MeminfoValue& operator=(const SysStats_MeminfoValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_MeminfoValue& operator=(SysStats_MeminfoValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_MeminfoValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_MeminfoValue* internal_default_instance() {
    return reinterpret_cast<const SysStats_MeminfoValue*>(
               &_SysStats_MeminfoValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SysStats_MeminfoValue& a, SysStats_MeminfoValue& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_MeminfoValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_MeminfoValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_MeminfoValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_MeminfoValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_MeminfoValue& from);
  void MergeFrom(const SysStats_MeminfoValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_MeminfoValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.MeminfoValue";
  }
  protected:
  explicit SysStats_MeminfoValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // optional uint64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // optional .perfetto.protos.MeminfoCounters key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::perfetto::protos::MeminfoCounters key() const;
  void set_key(::perfetto::protos::MeminfoCounters value);
  private:
  ::perfetto::protos::MeminfoCounters _internal_key() const;
  void _internal_set_key(::perfetto::protos::MeminfoCounters value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.MeminfoValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t value_;
    int key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_VmstatValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.VmstatValue) */ {
 public:
  inline SysStats_VmstatValue() : SysStats_VmstatValue(nullptr) {}
  ~SysStats_VmstatValue() override;
  explicit PROTOBUF_CONSTEXPR SysStats_VmstatValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_VmstatValue(const SysStats_VmstatValue& from);
  SysStats_VmstatValue(SysStats_VmstatValue&& from) noexcept
    : SysStats_VmstatValue() {
    *this = ::std::move(from);
  }

  inline SysStats_VmstatValue& operator=(const SysStats_VmstatValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_VmstatValue& operator=(SysStats_VmstatValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_VmstatValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_VmstatValue* internal_default_instance() {
    return reinterpret_cast<const SysStats_VmstatValue*>(
               &_SysStats_VmstatValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SysStats_VmstatValue& a, SysStats_VmstatValue& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_VmstatValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_VmstatValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_VmstatValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_VmstatValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_VmstatValue& from);
  void MergeFrom(const SysStats_VmstatValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_VmstatValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.VmstatValue";
  }
  protected:
  explicit SysStats_VmstatValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // optional uint64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // optional .perfetto.protos.VmstatCounters key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::perfetto::protos::VmstatCounters key() const;
  void set_key(::perfetto::protos::VmstatCounters value);
  private:
  ::perfetto::protos::VmstatCounters _internal_key() const;
  void _internal_set_key(::perfetto::protos::VmstatCounters value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.VmstatValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t value_;
    int key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_CpuTimes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.CpuTimes) */ {
 public:
  inline SysStats_CpuTimes() : SysStats_CpuTimes(nullptr) {}
  ~SysStats_CpuTimes() override;
  explicit PROTOBUF_CONSTEXPR SysStats_CpuTimes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_CpuTimes(const SysStats_CpuTimes& from);
  SysStats_CpuTimes(SysStats_CpuTimes&& from) noexcept
    : SysStats_CpuTimes() {
    *this = ::std::move(from);
  }

  inline SysStats_CpuTimes& operator=(const SysStats_CpuTimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_CpuTimes& operator=(SysStats_CpuTimes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_CpuTimes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_CpuTimes* internal_default_instance() {
    return reinterpret_cast<const SysStats_CpuTimes*>(
               &_SysStats_CpuTimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SysStats_CpuTimes& a, SysStats_CpuTimes& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_CpuTimes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_CpuTimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_CpuTimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_CpuTimes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_CpuTimes& from);
  void MergeFrom(const SysStats_CpuTimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_CpuTimes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.CpuTimes";
  }
  protected:
  explicit SysStats_CpuTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNsFieldNumber = 2,
    kUserNiceNsFieldNumber = 3,
    kSystemModeNsFieldNumber = 4,
    kIdleNsFieldNumber = 5,
    kIoWaitNsFieldNumber = 6,
    kIrqNsFieldNumber = 7,
    kSoftirqNsFieldNumber = 8,
    kCpuIdFieldNumber = 1,
  };
  // optional uint64 user_ns = 2;
  bool has_user_ns() const;
  private:
  bool _internal_has_user_ns() const;
  public:
  void clear_user_ns();
  uint64_t user_ns() const;
  void set_user_ns(uint64_t value);
  private:
  uint64_t _internal_user_ns() const;
  void _internal_set_user_ns(uint64_t value);
  public:

  // optional uint64 user_nice_ns = 3;
  bool has_user_nice_ns() const;
  private:
  bool _internal_has_user_nice_ns() const;
  public:
  void clear_user_nice_ns();
  uint64_t user_nice_ns() const;
  void set_user_nice_ns(uint64_t value);
  private:
  uint64_t _internal_user_nice_ns() const;
  void _internal_set_user_nice_ns(uint64_t value);
  public:

  // optional uint64 system_mode_ns = 4;
  bool has_system_mode_ns() const;
  private:
  bool _internal_has_system_mode_ns() const;
  public:
  void clear_system_mode_ns();
  uint64_t system_mode_ns() const;
  void set_system_mode_ns(uint64_t value);
  private:
  uint64_t _internal_system_mode_ns() const;
  void _internal_set_system_mode_ns(uint64_t value);
  public:

  // optional uint64 idle_ns = 5;
  bool has_idle_ns() const;
  private:
  bool _internal_has_idle_ns() const;
  public:
  void clear_idle_ns();
  uint64_t idle_ns() const;
  void set_idle_ns(uint64_t value);
  private:
  uint64_t _internal_idle_ns() const;
  void _internal_set_idle_ns(uint64_t value);
  public:

  // optional uint64 io_wait_ns = 6;
  bool has_io_wait_ns() const;
  private:
  bool _internal_has_io_wait_ns() const;
  public:
  void clear_io_wait_ns();
  uint64_t io_wait_ns() const;
  void set_io_wait_ns(uint64_t value);
  private:
  uint64_t _internal_io_wait_ns() const;
  void _internal_set_io_wait_ns(uint64_t value);
  public:

  // optional uint64 irq_ns = 7;
  bool has_irq_ns() const;
  private:
  bool _internal_has_irq_ns() const;
  public:
  void clear_irq_ns();
  uint64_t irq_ns() const;
  void set_irq_ns(uint64_t value);
  private:
  uint64_t _internal_irq_ns() const;
  void _internal_set_irq_ns(uint64_t value);
  public:

  // optional uint64 softirq_ns = 8;
  bool has_softirq_ns() const;
  private:
  bool _internal_has_softirq_ns() const;
  public:
  void clear_softirq_ns();
  uint64_t softirq_ns() const;
  void set_softirq_ns(uint64_t value);
  private:
  uint64_t _internal_softirq_ns() const;
  void _internal_set_softirq_ns(uint64_t value);
  public:

  // optional uint32 cpu_id = 1;
  bool has_cpu_id() const;
  private:
  bool _internal_has_cpu_id() const;
  public:
  void clear_cpu_id();
  uint32_t cpu_id() const;
  void set_cpu_id(uint32_t value);
  private:
  uint32_t _internal_cpu_id() const;
  void _internal_set_cpu_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.CpuTimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t user_ns_;
    uint64_t user_nice_ns_;
    uint64_t system_mode_ns_;
    uint64_t idle_ns_;
    uint64_t io_wait_ns_;
    uint64_t irq_ns_;
    uint64_t softirq_ns_;
    uint32_t cpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_InterruptCount final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.InterruptCount) */ {
 public:
  inline SysStats_InterruptCount() : SysStats_InterruptCount(nullptr) {}
  ~SysStats_InterruptCount() override;
  explicit PROTOBUF_CONSTEXPR SysStats_InterruptCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_InterruptCount(const SysStats_InterruptCount& from);
  SysStats_InterruptCount(SysStats_InterruptCount&& from) noexcept
    : SysStats_InterruptCount() {
    *this = ::std::move(from);
  }

  inline SysStats_InterruptCount& operator=(const SysStats_InterruptCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_InterruptCount& operator=(SysStats_InterruptCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_InterruptCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_InterruptCount* internal_default_instance() {
    return reinterpret_cast<const SysStats_InterruptCount*>(
               &_SysStats_InterruptCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SysStats_InterruptCount& a, SysStats_InterruptCount& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_InterruptCount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_InterruptCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_InterruptCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_InterruptCount>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_InterruptCount& from);
  void MergeFrom(const SysStats_InterruptCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_InterruptCount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.InterruptCount";
  }
  protected:
  explicit SysStats_InterruptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kIrqFieldNumber = 1,
  };
  // optional uint64 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // optional int32 irq = 1;
  bool has_irq() const;
  private:
  bool _internal_has_irq() const;
  public:
  void clear_irq();
  int32_t irq() const;
  void set_irq(int32_t value);
  private:
  int32_t _internal_irq() const;
  void _internal_set_irq(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.InterruptCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t count_;
    int32_t irq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_DevfreqValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.DevfreqValue) */ {
 public:
  inline SysStats_DevfreqValue() : SysStats_DevfreqValue(nullptr) {}
  ~SysStats_DevfreqValue() override;
  explicit PROTOBUF_CONSTEXPR SysStats_DevfreqValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_DevfreqValue(const SysStats_DevfreqValue& from);
  SysStats_DevfreqValue(SysStats_DevfreqValue&& from) noexcept
    : SysStats_DevfreqValue() {
    *this = ::std::move(from);
  }

  inline SysStats_DevfreqValue& operator=(const SysStats_DevfreqValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_DevfreqValue& operator=(SysStats_DevfreqValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_DevfreqValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_DevfreqValue* internal_default_instance() {
    return reinterpret_cast<const SysStats_DevfreqValue*>(
               &_SysStats_DevfreqValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SysStats_DevfreqValue& a, SysStats_DevfreqValue& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_DevfreqValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_DevfreqValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_DevfreqValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_DevfreqValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_DevfreqValue& from);
  void MergeFrom(const SysStats_DevfreqValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_DevfreqValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.DevfreqValue";
  }
  protected:
  explicit SysStats_DevfreqValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.DevfreqValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint64_t value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_BuddyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.BuddyInfo) */ {
 public:
  inline SysStats_BuddyInfo() : SysStats_BuddyInfo(nullptr) {}
  ~SysStats_BuddyInfo() override;
  explicit PROTOBUF_CONSTEXPR SysStats_BuddyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_BuddyInfo(const SysStats_BuddyInfo& from);
  SysStats_BuddyInfo(SysStats_BuddyInfo&& from) noexcept
    : SysStats_BuddyInfo() {
    *this = ::std::move(from);
  }

  inline SysStats_BuddyInfo& operator=(const SysStats_BuddyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_BuddyInfo& operator=(SysStats_BuddyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_BuddyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_BuddyInfo* internal_default_instance() {
    return reinterpret_cast<const SysStats_BuddyInfo*>(
               &_SysStats_BuddyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SysStats_BuddyInfo& a, SysStats_BuddyInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_BuddyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_BuddyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_BuddyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_BuddyInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_BuddyInfo& from);
  void MergeFrom(const SysStats_BuddyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_BuddyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.BuddyInfo";
  }
  protected:
  explicit SysStats_BuddyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderPagesFieldNumber = 3,
    kNodeFieldNumber = 1,
    kZoneFieldNumber = 2,
  };
  // repeated uint32 order_pages = 3;
  int order_pages_size() const;
  private:
  int _internal_order_pages_size() const;
  public:
  void clear_order_pages();
  private:
  uint32_t _internal_order_pages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_order_pages() const;
  void _internal_add_order_pages(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_order_pages();
  public:
  uint32_t order_pages(int index) const;
  void set_order_pages(int index, uint32_t value);
  void add_order_pages(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      order_pages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_order_pages();

  // optional string node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const std::string& node() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* node);
  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(const std::string& value);
  std::string* _internal_mutable_node();
  public:

  // optional string zone = 2;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.BuddyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > order_pages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_DiskStat final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.DiskStat) */ {
 public:
  inline SysStats_DiskStat() : SysStats_DiskStat(nullptr) {}
  ~SysStats_DiskStat() override;
  explicit PROTOBUF_CONSTEXPR SysStats_DiskStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_DiskStat(const SysStats_DiskStat& from);
  SysStats_DiskStat(SysStats_DiskStat&& from) noexcept
    : SysStats_DiskStat() {
    *this = ::std::move(from);
  }

  inline SysStats_DiskStat& operator=(const SysStats_DiskStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_DiskStat& operator=(SysStats_DiskStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_DiskStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_DiskStat* internal_default_instance() {
    return reinterpret_cast<const SysStats_DiskStat*>(
               &_SysStats_DiskStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SysStats_DiskStat& a, SysStats_DiskStat& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_DiskStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_DiskStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_DiskStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_DiskStat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_DiskStat& from);
  void MergeFrom(const SysStats_DiskStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_DiskStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.DiskStat";
  }
  protected:
  explicit SysStats_DiskStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kReadSectorsFieldNumber = 2,
    kReadTimeMsFieldNumber = 3,
    kWriteSectorsFieldNumber = 4,
    kWriteTimeMsFieldNumber = 5,
    kDiscardSectorsFieldNumber = 6,
    kDiscardTimeMsFieldNumber = 7,
    kFlushCountFieldNumber = 8,
    kFlushTimeMsFieldNumber = 9,
  };
  // optional string device_name = 1;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional uint64 read_sectors = 2;
  bool has_read_sectors() const;
  private:
  bool _internal_has_read_sectors() const;
  public:
  void clear_read_sectors();
  uint64_t read_sectors() const;
  void set_read_sectors(uint64_t value);
  private:
  uint64_t _internal_read_sectors() const;
  void _internal_set_read_sectors(uint64_t value);
  public:

  // optional uint64 read_time_ms = 3;
  bool has_read_time_ms() const;
  private:
  bool _internal_has_read_time_ms() const;
  public:
  void clear_read_time_ms();
  uint64_t read_time_ms() const;
  void set_read_time_ms(uint64_t value);
  private:
  uint64_t _internal_read_time_ms() const;
  void _internal_set_read_time_ms(uint64_t value);
  public:

  // optional uint64 write_sectors = 4;
  bool has_write_sectors() const;
  private:
  bool _internal_has_write_sectors() const;
  public:
  void clear_write_sectors();
  uint64_t write_sectors() const;
  void set_write_sectors(uint64_t value);
  private:
  uint64_t _internal_write_sectors() const;
  void _internal_set_write_sectors(uint64_t value);
  public:

  // optional uint64 write_time_ms = 5;
  bool has_write_time_ms() const;
  private:
  bool _internal_has_write_time_ms() const;
  public:
  void clear_write_time_ms();
  uint64_t write_time_ms() const;
  void set_write_time_ms(uint64_t value);
  private:
  uint64_t _internal_write_time_ms() const;
  void _internal_set_write_time_ms(uint64_t value);
  public:

  // optional uint64 discard_sectors = 6;
  bool has_discard_sectors() const;
  private:
  bool _internal_has_discard_sectors() const;
  public:
  void clear_discard_sectors();
  uint64_t discard_sectors() const;
  void set_discard_sectors(uint64_t value);
  private:
  uint64_t _internal_discard_sectors() const;
  void _internal_set_discard_sectors(uint64_t value);
  public:

  // optional uint64 discard_time_ms = 7;
  bool has_discard_time_ms() const;
  private:
  bool _internal_has_discard_time_ms() const;
  public:
  void clear_discard_time_ms();
  uint64_t discard_time_ms() const;
  void set_discard_time_ms(uint64_t value);
  private:
  uint64_t _internal_discard_time_ms() const;
  void _internal_set_discard_time_ms(uint64_t value);
  public:

  // optional uint64 flush_count = 8;
  bool has_flush_count() const;
  private:
  bool _internal_has_flush_count() const;
  public:
  void clear_flush_count();
  uint64_t flush_count() const;
  void set_flush_count(uint64_t value);
  private:
  uint64_t _internal_flush_count() const;
  void _internal_set_flush_count(uint64_t value);
  public:

  // optional uint64 flush_time_ms = 9;
  bool has_flush_time_ms() const;
  private:
  bool _internal_has_flush_time_ms() const;
  public:
  void clear_flush_time_ms();
  uint64_t flush_time_ms() const;
  void set_flush_time_ms(uint64_t value);
  private:
  uint64_t _internal_flush_time_ms() const;
  void _internal_set_flush_time_ms(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.DiskStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    uint64_t read_sectors_;
    uint64_t read_time_ms_;
    uint64_t write_sectors_;
    uint64_t write_time_ms_;
    uint64_t discard_sectors_;
    uint64_t discard_time_ms_;
    uint64_t flush_count_;
    uint64_t flush_time_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats_PsiSample final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats.PsiSample) */ {
 public:
  inline SysStats_PsiSample() : SysStats_PsiSample(nullptr) {}
  ~SysStats_PsiSample() override;
  explicit PROTOBUF_CONSTEXPR SysStats_PsiSample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats_PsiSample(const SysStats_PsiSample& from);
  SysStats_PsiSample(SysStats_PsiSample&& from) noexcept
    : SysStats_PsiSample() {
    *this = ::std::move(from);
  }

  inline SysStats_PsiSample& operator=(const SysStats_PsiSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats_PsiSample& operator=(SysStats_PsiSample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats_PsiSample& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats_PsiSample* internal_default_instance() {
    return reinterpret_cast<const SysStats_PsiSample*>(
               &_SysStats_PsiSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SysStats_PsiSample& a, SysStats_PsiSample& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats_PsiSample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats_PsiSample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats_PsiSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats_PsiSample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats_PsiSample& from);
  void MergeFrom(const SysStats_PsiSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats_PsiSample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats.PsiSample";
  }
  protected:
  explicit SysStats_PsiSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SysStats_PsiSample_PsiResource PsiResource;
  static constexpr PsiResource PSI_RESOURCE_UNSPECIFIED =
    SysStats_PsiSample_PsiResource_PSI_RESOURCE_UNSPECIFIED;
  static constexpr PsiResource PSI_RESOURCE_CPU_SOME =
    SysStats_PsiSample_PsiResource_PSI_RESOURCE_CPU_SOME;
  static constexpr PsiResource PSI_RESOURCE_CPU_FULL =
    SysStats_PsiSample_PsiResource_PSI_RESOURCE_CPU_FULL;
  static constexpr PsiResource PSI_RESOURCE_IO_SOME =
    SysStats_PsiSample_PsiResource_PSI_RESOURCE_IO_SOME;
  static constexpr PsiResource PSI_RESOURCE_IO_FULL =
    SysStats_PsiSample_PsiResource_PSI_RESOURCE_IO_FULL;
  static constexpr PsiResource PSI_RESOURCE_MEMORY_SOME =
    SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_SOME;
  static constexpr PsiResource PSI_RESOURCE_MEMORY_FULL =
    SysStats_PsiSample_PsiResource_PSI_RESOURCE_MEMORY_FULL;
  static inline bool PsiResource_IsValid(int value) {
    return SysStats_PsiSample_PsiResource_IsValid(value);
  }
  static constexpr PsiResource PsiResource_MIN =
    SysStats_PsiSample_PsiResource_PsiResource_MIN;
  static constexpr PsiResource PsiResource_MAX =
    SysStats_PsiSample_PsiResource_PsiResource_MAX;
  static constexpr int PsiResource_ARRAYSIZE =
    SysStats_PsiSample_PsiResource_PsiResource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PsiResource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PsiResource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PsiResource_Name.");
    return SysStats_PsiSample_PsiResource_Name(enum_t_value);
  }
  static inline bool PsiResource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PsiResource* value) {
    return SysStats_PsiSample_PsiResource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTotalNsFieldNumber = 2,
    kResourceFieldNumber = 1,
  };
  // optional uint64 total_ns = 2;
  bool has_total_ns() const;
  private:
  bool _internal_has_total_ns() const;
  public:
  void clear_total_ns();
  uint64_t total_ns() const;
  void set_total_ns(uint64_t value);
  private:
  uint64_t _internal_total_ns() const;
  void _internal_set_total_ns(uint64_t value);
  public:

  // optional .perfetto.protos.SysStats.PsiSample.PsiResource resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  ::perfetto::protos::SysStats_PsiSample_PsiResource resource() const;
  void set_resource(::perfetto::protos::SysStats_PsiSample_PsiResource value);
  private:
  ::perfetto::protos::SysStats_PsiSample_PsiResource _internal_resource() const;
  void _internal_set_resource(::perfetto::protos::SysStats_PsiSample_PsiResource value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats.PsiSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t total_ns_;
    int resource_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// -------------------------------------------------------------------

class SysStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStats) */ {
 public:
  inline SysStats() : SysStats(nullptr) {}
  ~SysStats() override;
  explicit PROTOBUF_CONSTEXPR SysStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStats(const SysStats& from);
  SysStats(SysStats&& from) noexcept
    : SysStats() {
    *this = ::std::move(from);
  }

  inline SysStats& operator=(const SysStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStats& operator=(SysStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStats* internal_default_instance() {
    return reinterpret_cast<const SysStats*>(
               &_SysStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SysStats& a, SysStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysStats& from);
  void MergeFrom(const SysStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysStats";
  }
  protected:
  explicit SysStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SysStats_MeminfoValue MeminfoValue;
  typedef SysStats_VmstatValue VmstatValue;
  typedef SysStats_CpuTimes CpuTimes;
  typedef SysStats_InterruptCount InterruptCount;
  typedef SysStats_DevfreqValue DevfreqValue;
  typedef SysStats_BuddyInfo BuddyInfo;
  typedef SysStats_DiskStat DiskStat;
  typedef SysStats_PsiSample PsiSample;

  // accessors -------------------------------------------------------

  enum : int {
    kMeminfoFieldNumber = 1,
    kVmstatFieldNumber = 2,
    kCpuStatFieldNumber = 3,
    kNumIrqFieldNumber = 6,
    kNumSoftirqFieldNumber = 8,
    kDevfreqFieldNumber = 10,
    kCpufreqKhzFieldNumber = 11,
    kBuddyInfoFieldNumber = 12,
    kDiskStatFieldNumber = 13,
    kPsiFieldNumber = 14,
    kNumForksFieldNumber = 4,
    kNumIrqTotalFieldNumber = 5,
    kNumSoftirqTotalFieldNumber = 7,
    kCollectionEndTimestampFieldNumber = 9,
  };
  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  int meminfo_size() const;
  private:
  int _internal_meminfo_size() const;
  public:
  void clear_meminfo();
  ::perfetto::protos::SysStats_MeminfoValue* mutable_meminfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >*
      mutable_meminfo();
  private:
  const ::perfetto::protos::SysStats_MeminfoValue& _internal_meminfo(int index) const;
  ::perfetto::protos::SysStats_MeminfoValue* _internal_add_meminfo();
  public:
  const ::perfetto::protos::SysStats_MeminfoValue& meminfo(int index) const;
  ::perfetto::protos::SysStats_MeminfoValue* add_meminfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >&
      meminfo() const;

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  int vmstat_size() const;
  private:
  int _internal_vmstat_size() const;
  public:
  void clear_vmstat();
  ::perfetto::protos::SysStats_VmstatValue* mutable_vmstat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >*
      mutable_vmstat();
  private:
  const ::perfetto::protos::SysStats_VmstatValue& _internal_vmstat(int index) const;
  ::perfetto::protos::SysStats_VmstatValue* _internal_add_vmstat();
  public:
  const ::perfetto::protos::SysStats_VmstatValue& vmstat(int index) const;
  ::perfetto::protos::SysStats_VmstatValue* add_vmstat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >&
      vmstat() const;

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  int cpu_stat_size() const;
  private:
  int _internal_cpu_stat_size() const;
  public:
  void clear_cpu_stat();
  ::perfetto::protos::SysStats_CpuTimes* mutable_cpu_stat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >*
      mutable_cpu_stat();
  private:
  const ::perfetto::protos::SysStats_CpuTimes& _internal_cpu_stat(int index) const;
  ::perfetto::protos::SysStats_CpuTimes* _internal_add_cpu_stat();
  public:
  const ::perfetto::protos::SysStats_CpuTimes& cpu_stat(int index) const;
  ::perfetto::protos::SysStats_CpuTimes* add_cpu_stat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >&
      cpu_stat() const;

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  int num_irq_size() const;
  private:
  int _internal_num_irq_size() const;
  public:
  void clear_num_irq();
  ::perfetto::protos::SysStats_InterruptCount* mutable_num_irq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
      mutable_num_irq();
  private:
  const ::perfetto::protos::SysStats_InterruptCount& _internal_num_irq(int index) const;
  ::perfetto::protos::SysStats_InterruptCount* _internal_add_num_irq();
  public:
  const ::perfetto::protos::SysStats_InterruptCount& num_irq(int index) const;
  ::perfetto::protos::SysStats_InterruptCount* add_num_irq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
      num_irq() const;

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  int num_softirq_size() const;
  private:
  int _internal_num_softirq_size() const;
  public:
  void clear_num_softirq();
  ::perfetto::protos::SysStats_InterruptCount* mutable_num_softirq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
      mutable_num_softirq();
  private:
  const ::perfetto::protos::SysStats_InterruptCount& _internal_num_softirq(int index) const;
  ::perfetto::protos::SysStats_InterruptCount* _internal_add_num_softirq();
  public:
  const ::perfetto::protos::SysStats_InterruptCount& num_softirq(int index) const;
  ::perfetto::protos::SysStats_InterruptCount* add_num_softirq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
      num_softirq() const;

  // repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
  int devfreq_size() const;
  private:
  int _internal_devfreq_size() const;
  public:
  void clear_devfreq();
  ::perfetto::protos::SysStats_DevfreqValue* mutable_devfreq(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DevfreqValue >*
      mutable_devfreq();
  private:
  const ::perfetto::protos::SysStats_DevfreqValue& _internal_devfreq(int index) const;
  ::perfetto::protos::SysStats_DevfreqValue* _internal_add_devfreq();
  public:
  const ::perfetto::protos::SysStats_DevfreqValue& devfreq(int index) const;
  ::perfetto::protos::SysStats_DevfreqValue* add_devfreq();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DevfreqValue >&
      devfreq() const;

  // repeated uint32 cpufreq_khz = 11;
  int cpufreq_khz_size() const;
  private:
  int _internal_cpufreq_khz_size() const;
  public:
  void clear_cpufreq_khz();
  private:
  uint32_t _internal_cpufreq_khz(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cpufreq_khz() const;
  void _internal_add_cpufreq_khz(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cpufreq_khz();
  public:
  uint32_t cpufreq_khz(int index) const;
  void set_cpufreq_khz(int index, uint32_t value);
  void add_cpufreq_khz(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cpufreq_khz() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cpufreq_khz();

  // repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
  int buddy_info_size() const;
  private:
  int _internal_buddy_info_size() const;
  public:
  void clear_buddy_info();
  ::perfetto::protos::SysStats_BuddyInfo* mutable_buddy_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_BuddyInfo >*
      mutable_buddy_info();
  private:
  const ::perfetto::protos::SysStats_BuddyInfo& _internal_buddy_info(int index) const;
  ::perfetto::protos::SysStats_BuddyInfo* _internal_add_buddy_info();
  public:
  const ::perfetto::protos::SysStats_BuddyInfo& buddy_info(int index) const;
  ::perfetto::protos::SysStats_BuddyInfo* add_buddy_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_BuddyInfo >&
      buddy_info() const;

  // repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
  int disk_stat_size() const;
  private:
  int _internal_disk_stat_size() const;
  public:
  void clear_disk_stat();
  ::perfetto::protos::SysStats_DiskStat* mutable_disk_stat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DiskStat >*
      mutable_disk_stat();
  private:
  const ::perfetto::protos::SysStats_DiskStat& _internal_disk_stat(int index) const;
  ::perfetto::protos::SysStats_DiskStat* _internal_add_disk_stat();
  public:
  const ::perfetto::protos::SysStats_DiskStat& disk_stat(int index) const;
  ::perfetto::protos::SysStats_DiskStat* add_disk_stat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DiskStat >&
      disk_stat() const;

  // repeated .perfetto.protos.SysStats.PsiSample psi = 14;
  int psi_size() const;
  private:
  int _internal_psi_size() const;
  public:
  void clear_psi();
  ::perfetto::protos::SysStats_PsiSample* mutable_psi(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_PsiSample >*
      mutable_psi();
  private:
  const ::perfetto::protos::SysStats_PsiSample& _internal_psi(int index) const;
  ::perfetto::protos::SysStats_PsiSample* _internal_add_psi();
  public:
  const ::perfetto::protos::SysStats_PsiSample& psi(int index) const;
  ::perfetto::protos::SysStats_PsiSample* add_psi();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_PsiSample >&
      psi() const;

  // optional uint64 num_forks = 4;
  bool has_num_forks() const;
  private:
  bool _internal_has_num_forks() const;
  public:
  void clear_num_forks();
  uint64_t num_forks() const;
  void set_num_forks(uint64_t value);
  private:
  uint64_t _internal_num_forks() const;
  void _internal_set_num_forks(uint64_t value);
  public:

  // optional uint64 num_irq_total = 5;
  bool has_num_irq_total() const;
  private:
  bool _internal_has_num_irq_total() const;
  public:
  void clear_num_irq_total();
  uint64_t num_irq_total() const;
  void set_num_irq_total(uint64_t value);
  private:
  uint64_t _internal_num_irq_total() const;
  void _internal_set_num_irq_total(uint64_t value);
  public:

  // optional uint64 num_softirq_total = 7;
  bool has_num_softirq_total() const;
  private:
  bool _internal_has_num_softirq_total() const;
  public:
  void clear_num_softirq_total();
  uint64_t num_softirq_total() const;
  void set_num_softirq_total(uint64_t value);
  private:
  uint64_t _internal_num_softirq_total() const;
  void _internal_set_num_softirq_total(uint64_t value);
  public:

  // optional uint64 collection_end_timestamp = 9;
  bool has_collection_end_timestamp() const;
  private:
  bool _internal_has_collection_end_timestamp() const;
  public:
  void clear_collection_end_timestamp();
  uint64_t collection_end_timestamp() const;
  void set_collection_end_timestamp(uint64_t value);
  private:
  uint64_t _internal_collection_end_timestamp() const;
  void _internal_set_collection_end_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue > meminfo_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue > vmstat_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes > cpu_stat_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount > num_irq_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount > num_softirq_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DevfreqValue > devfreq_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cpufreq_khz_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_BuddyInfo > buddy_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DiskStat > disk_stat_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_PsiSample > psi_;
    uint64_t num_forks_;
    uint64_t num_irq_total_;
    uint64_t num_softirq_total_;
    uint64_t collection_end_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SysStats_MeminfoValue

// optional .perfetto.protos.MeminfoCounters key = 1;
inline bool SysStats_MeminfoValue::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_MeminfoValue::has_key() const {
  return _internal_has_key();
}
inline void SysStats_MeminfoValue::clear_key() {
  _impl_.key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::MeminfoCounters SysStats_MeminfoValue::_internal_key() const {
  return static_cast< ::perfetto::protos::MeminfoCounters >(_impl_.key_);
}
inline ::perfetto::protos::MeminfoCounters SysStats_MeminfoValue::key() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.MeminfoValue.key)
  return _internal_key();
}
inline void SysStats_MeminfoValue::_internal_set_key(::perfetto::protos::MeminfoCounters value) {
  assert(::perfetto::protos::MeminfoCounters_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_ = value;
}
inline void SysStats_MeminfoValue::set_key(::perfetto::protos::MeminfoCounters value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.MeminfoValue.key)
}

// optional uint64 value = 2;
inline bool SysStats_MeminfoValue::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_MeminfoValue::has_value() const {
  return _internal_has_value();
}
inline void SysStats_MeminfoValue::clear_value() {
  _impl_.value_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SysStats_MeminfoValue::_internal_value() const {
  return _impl_.value_;
}
inline uint64_t SysStats_MeminfoValue::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.MeminfoValue.value)
  return _internal_value();
}
inline void SysStats_MeminfoValue::_internal_set_value(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}
inline void SysStats_MeminfoValue::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.MeminfoValue.value)
}

// -------------------------------------------------------------------

// SysStats_VmstatValue

// optional .perfetto.protos.VmstatCounters key = 1;
inline bool SysStats_VmstatValue::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_VmstatValue::has_key() const {
  return _internal_has_key();
}
inline void SysStats_VmstatValue::clear_key() {
  _impl_.key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::VmstatCounters SysStats_VmstatValue::_internal_key() const {
  return static_cast< ::perfetto::protos::VmstatCounters >(_impl_.key_);
}
inline ::perfetto::protos::VmstatCounters SysStats_VmstatValue::key() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.VmstatValue.key)
  return _internal_key();
}
inline void SysStats_VmstatValue::_internal_set_key(::perfetto::protos::VmstatCounters value) {
  assert(::perfetto::protos::VmstatCounters_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_ = value;
}
inline void SysStats_VmstatValue::set_key(::perfetto::protos::VmstatCounters value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.VmstatValue.key)
}

// optional uint64 value = 2;
inline bool SysStats_VmstatValue::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_VmstatValue::has_value() const {
  return _internal_has_value();
}
inline void SysStats_VmstatValue::clear_value() {
  _impl_.value_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SysStats_VmstatValue::_internal_value() const {
  return _impl_.value_;
}
inline uint64_t SysStats_VmstatValue::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.VmstatValue.value)
  return _internal_value();
}
inline void SysStats_VmstatValue::_internal_set_value(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}
inline void SysStats_VmstatValue::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.VmstatValue.value)
}

// -------------------------------------------------------------------

// SysStats_CpuTimes

// optional uint32 cpu_id = 1;
inline bool SysStats_CpuTimes::_internal_has_cpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_cpu_id() const {
  return _internal_has_cpu_id();
}
inline void SysStats_CpuTimes::clear_cpu_id() {
  _impl_.cpu_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t SysStats_CpuTimes::_internal_cpu_id() const {
  return _impl_.cpu_id_;
}
inline uint32_t SysStats_CpuTimes::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.cpu_id)
  return _internal_cpu_id();
}
inline void SysStats_CpuTimes::_internal_set_cpu_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.cpu_id_ = value;
}
inline void SysStats_CpuTimes::set_cpu_id(uint32_t value) {
  _internal_set_cpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.cpu_id)
}

// optional uint64 user_ns = 2;
inline bool SysStats_CpuTimes::_internal_has_user_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_user_ns() const {
  return _internal_has_user_ns();
}
inline void SysStats_CpuTimes::clear_user_ns() {
  _impl_.user_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SysStats_CpuTimes::_internal_user_ns() const {
  return _impl_.user_ns_;
}
inline uint64_t SysStats_CpuTimes::user_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.user_ns)
  return _internal_user_ns();
}
inline void SysStats_CpuTimes::_internal_set_user_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_ns_ = value;
}
inline void SysStats_CpuTimes::set_user_ns(uint64_t value) {
  _internal_set_user_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.user_ns)
}

// optional uint64 user_nice_ns = 3;
inline bool SysStats_CpuTimes::_internal_has_user_nice_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_user_nice_ns() const {
  return _internal_has_user_nice_ns();
}
inline void SysStats_CpuTimes::clear_user_nice_ns() {
  _impl_.user_nice_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SysStats_CpuTimes::_internal_user_nice_ns() const {
  return _impl_.user_nice_ns_;
}
inline uint64_t SysStats_CpuTimes::user_nice_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.user_nice_ns)
  return _internal_user_nice_ns();
}
inline void SysStats_CpuTimes::_internal_set_user_nice_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_nice_ns_ = value;
}
inline void SysStats_CpuTimes::set_user_nice_ns(uint64_t value) {
  _internal_set_user_nice_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.user_nice_ns)
}

// optional uint64 system_mode_ns = 4;
inline bool SysStats_CpuTimes::_internal_has_system_mode_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_system_mode_ns() const {
  return _internal_has_system_mode_ns();
}
inline void SysStats_CpuTimes::clear_system_mode_ns() {
  _impl_.system_mode_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t SysStats_CpuTimes::_internal_system_mode_ns() const {
  return _impl_.system_mode_ns_;
}
inline uint64_t SysStats_CpuTimes::system_mode_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.system_mode_ns)
  return _internal_system_mode_ns();
}
inline void SysStats_CpuTimes::_internal_set_system_mode_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.system_mode_ns_ = value;
}
inline void SysStats_CpuTimes::set_system_mode_ns(uint64_t value) {
  _internal_set_system_mode_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.system_mode_ns)
}

// optional uint64 idle_ns = 5;
inline bool SysStats_CpuTimes::_internal_has_idle_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_idle_ns() const {
  return _internal_has_idle_ns();
}
inline void SysStats_CpuTimes::clear_idle_ns() {
  _impl_.idle_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t SysStats_CpuTimes::_internal_idle_ns() const {
  return _impl_.idle_ns_;
}
inline uint64_t SysStats_CpuTimes::idle_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.idle_ns)
  return _internal_idle_ns();
}
inline void SysStats_CpuTimes::_internal_set_idle_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.idle_ns_ = value;
}
inline void SysStats_CpuTimes::set_idle_ns(uint64_t value) {
  _internal_set_idle_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.idle_ns)
}

// optional uint64 io_wait_ns = 6;
inline bool SysStats_CpuTimes::_internal_has_io_wait_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_io_wait_ns() const {
  return _internal_has_io_wait_ns();
}
inline void SysStats_CpuTimes::clear_io_wait_ns() {
  _impl_.io_wait_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t SysStats_CpuTimes::_internal_io_wait_ns() const {
  return _impl_.io_wait_ns_;
}
inline uint64_t SysStats_CpuTimes::io_wait_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.io_wait_ns)
  return _internal_io_wait_ns();
}
inline void SysStats_CpuTimes::_internal_set_io_wait_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.io_wait_ns_ = value;
}
inline void SysStats_CpuTimes::set_io_wait_ns(uint64_t value) {
  _internal_set_io_wait_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.io_wait_ns)
}

// optional uint64 irq_ns = 7;
inline bool SysStats_CpuTimes::_internal_has_irq_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_irq_ns() const {
  return _internal_has_irq_ns();
}
inline void SysStats_CpuTimes::clear_irq_ns() {
  _impl_.irq_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t SysStats_CpuTimes::_internal_irq_ns() const {
  return _impl_.irq_ns_;
}
inline uint64_t SysStats_CpuTimes::irq_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.irq_ns)
  return _internal_irq_ns();
}
inline void SysStats_CpuTimes::_internal_set_irq_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.irq_ns_ = value;
}
inline void SysStats_CpuTimes::set_irq_ns(uint64_t value) {
  _internal_set_irq_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.irq_ns)
}

// optional uint64 softirq_ns = 8;
inline bool SysStats_CpuTimes::_internal_has_softirq_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SysStats_CpuTimes::has_softirq_ns() const {
  return _internal_has_softirq_ns();
}
inline void SysStats_CpuTimes::clear_softirq_ns() {
  _impl_.softirq_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t SysStats_CpuTimes::_internal_softirq_ns() const {
  return _impl_.softirq_ns_;
}
inline uint64_t SysStats_CpuTimes::softirq_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.CpuTimes.softirq_ns)
  return _internal_softirq_ns();
}
inline void SysStats_CpuTimes::_internal_set_softirq_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.softirq_ns_ = value;
}
inline void SysStats_CpuTimes::set_softirq_ns(uint64_t value) {
  _internal_set_softirq_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.CpuTimes.softirq_ns)
}

// -------------------------------------------------------------------

// SysStats_InterruptCount

// optional int32 irq = 1;
inline bool SysStats_InterruptCount::_internal_has_irq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_InterruptCount::has_irq() const {
  return _internal_has_irq();
}
inline void SysStats_InterruptCount::clear_irq() {
  _impl_.irq_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SysStats_InterruptCount::_internal_irq() const {
  return _impl_.irq_;
}
inline int32_t SysStats_InterruptCount::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.InterruptCount.irq)
  return _internal_irq();
}
inline void SysStats_InterruptCount::_internal_set_irq(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.irq_ = value;
}
inline void SysStats_InterruptCount::set_irq(int32_t value) {
  _internal_set_irq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.InterruptCount.irq)
}

// optional uint64 count = 2;
inline bool SysStats_InterruptCount::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_InterruptCount::has_count() const {
  return _internal_has_count();
}
inline void SysStats_InterruptCount::clear_count() {
  _impl_.count_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SysStats_InterruptCount::_internal_count() const {
  return _impl_.count_;
}
inline uint64_t SysStats_InterruptCount::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.InterruptCount.count)
  return _internal_count();
}
inline void SysStats_InterruptCount::_internal_set_count(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.count_ = value;
}
inline void SysStats_InterruptCount::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.InterruptCount.count)
}

// -------------------------------------------------------------------

// SysStats_DevfreqValue

// optional string key = 1;
inline bool SysStats_DevfreqValue::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_DevfreqValue::has_key() const {
  return _internal_has_key();
}
inline void SysStats_DevfreqValue::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SysStats_DevfreqValue::key() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DevfreqValue.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SysStats_DevfreqValue::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DevfreqValue.key)
}
inline std::string* SysStats_DevfreqValue::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.DevfreqValue.key)
  return _s;
}
inline const std::string& SysStats_DevfreqValue::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SysStats_DevfreqValue::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SysStats_DevfreqValue::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SysStats_DevfreqValue::release_key() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SysStats.DevfreqValue.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SysStats_DevfreqValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SysStats.DevfreqValue.key)
}

// optional uint64 value = 2;
inline bool SysStats_DevfreqValue::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_DevfreqValue::has_value() const {
  return _internal_has_value();
}
inline void SysStats_DevfreqValue::clear_value() {
  _impl_.value_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SysStats_DevfreqValue::_internal_value() const {
  return _impl_.value_;
}
inline uint64_t SysStats_DevfreqValue::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DevfreqValue.value)
  return _internal_value();
}
inline void SysStats_DevfreqValue::_internal_set_value(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}
inline void SysStats_DevfreqValue::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DevfreqValue.value)
}

// -------------------------------------------------------------------

// SysStats_BuddyInfo

// optional string node = 1;
inline bool SysStats_BuddyInfo::_internal_has_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_BuddyInfo::has_node() const {
  return _internal_has_node();
}
inline void SysStats_BuddyInfo::clear_node() {
  _impl_.node_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SysStats_BuddyInfo::node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.BuddyInfo.node)
  return _internal_node();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SysStats_BuddyInfo::set_node(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.node_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.BuddyInfo.node)
}
inline std::string* SysStats_BuddyInfo::mutable_node() {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.BuddyInfo.node)
  return _s;
}
inline const std::string& SysStats_BuddyInfo::_internal_node() const {
  return _impl_.node_.Get();
}
inline void SysStats_BuddyInfo::_internal_set_node(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_.Set(value, GetArenaForAllocation());
}
inline std::string* SysStats_BuddyInfo::_internal_mutable_node() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.node_.Mutable(GetArenaForAllocation());
}
inline std::string* SysStats_BuddyInfo::release_node() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SysStats.BuddyInfo.node)
  if (!_internal_has_node()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.node_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SysStats_BuddyInfo::set_allocated_node(std::string* node) {
  if (node != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.node_.SetAllocated(node, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SysStats.BuddyInfo.node)
}

// optional string zone = 2;
inline bool SysStats_BuddyInfo::_internal_has_zone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_BuddyInfo::has_zone() const {
  return _internal_has_zone();
}
inline void SysStats_BuddyInfo::clear_zone() {
  _impl_.zone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SysStats_BuddyInfo::zone() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.BuddyInfo.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SysStats_BuddyInfo::set_zone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.BuddyInfo.zone)
}
inline std::string* SysStats_BuddyInfo::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.BuddyInfo.zone)
  return _s;
}
inline const std::string& SysStats_BuddyInfo::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void SysStats_BuddyInfo::_internal_set_zone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* SysStats_BuddyInfo::_internal_mutable_zone() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.zone_.Mutable(GetArenaForAllocation());
}
inline std::string* SysStats_BuddyInfo::release_zone() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SysStats.BuddyInfo.zone)
  if (!_internal_has_zone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.zone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SysStats_BuddyInfo::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.zone_.SetAllocated(zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SysStats.BuddyInfo.zone)
}

// repeated uint32 order_pages = 3;
inline int SysStats_BuddyInfo::_internal_order_pages_size() const {
  return _impl_.order_pages_.size();
}
inline int SysStats_BuddyInfo::order_pages_size() const {
  return _internal_order_pages_size();
}
inline void SysStats_BuddyInfo::clear_order_pages() {
  _impl_.order_pages_.Clear();
}
inline uint32_t SysStats_BuddyInfo::_internal_order_pages(int index) const {
  return _impl_.order_pages_.Get(index);
}
inline uint32_t SysStats_BuddyInfo::order_pages(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.BuddyInfo.order_pages)
  return _internal_order_pages(index);
}
inline void SysStats_BuddyInfo::set_order_pages(int index, uint32_t value) {
  _impl_.order_pages_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.BuddyInfo.order_pages)
}
inline void SysStats_BuddyInfo::_internal_add_order_pages(uint32_t value) {
  _impl_.order_pages_.Add(value);
}
inline void SysStats_BuddyInfo::add_order_pages(uint32_t value) {
  _internal_add_order_pages(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.BuddyInfo.order_pages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SysStats_BuddyInfo::_internal_order_pages() const {
  return _impl_.order_pages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SysStats_BuddyInfo::order_pages() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.BuddyInfo.order_pages)
  return _internal_order_pages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SysStats_BuddyInfo::_internal_mutable_order_pages() {
  return &_impl_.order_pages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SysStats_BuddyInfo::mutable_order_pages() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.BuddyInfo.order_pages)
  return _internal_mutable_order_pages();
}

// -------------------------------------------------------------------

// SysStats_DiskStat

// optional string device_name = 1;
inline bool SysStats_DiskStat::_internal_has_device_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_device_name() const {
  return _internal_has_device_name();
}
inline void SysStats_DiskStat::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SysStats_DiskStat::device_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SysStats_DiskStat::set_device_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.device_name)
}
inline std::string* SysStats_DiskStat::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.DiskStat.device_name)
  return _s;
}
inline const std::string& SysStats_DiskStat::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void SysStats_DiskStat::_internal_set_device_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SysStats_DiskStat::_internal_mutable_device_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SysStats_DiskStat::release_device_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SysStats.DiskStat.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.device_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SysStats_DiskStat::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SysStats.DiskStat.device_name)
}

// optional uint64 read_sectors = 2;
inline bool SysStats_DiskStat::_internal_has_read_sectors() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_read_sectors() const {
  return _internal_has_read_sectors();
}
inline void SysStats_DiskStat::clear_read_sectors() {
  _impl_.read_sectors_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SysStats_DiskStat::_internal_read_sectors() const {
  return _impl_.read_sectors_;
}
inline uint64_t SysStats_DiskStat::read_sectors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.read_sectors)
  return _internal_read_sectors();
}
inline void SysStats_DiskStat::_internal_set_read_sectors(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.read_sectors_ = value;
}
inline void SysStats_DiskStat::set_read_sectors(uint64_t value) {
  _internal_set_read_sectors(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.read_sectors)
}

// optional uint64 read_time_ms = 3;
inline bool SysStats_DiskStat::_internal_has_read_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_read_time_ms() const {
  return _internal_has_read_time_ms();
}
inline void SysStats_DiskStat::clear_read_time_ms() {
  _impl_.read_time_ms_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t SysStats_DiskStat::_internal_read_time_ms() const {
  return _impl_.read_time_ms_;
}
inline uint64_t SysStats_DiskStat::read_time_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.read_time_ms)
  return _internal_read_time_ms();
}
inline void SysStats_DiskStat::_internal_set_read_time_ms(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.read_time_ms_ = value;
}
inline void SysStats_DiskStat::set_read_time_ms(uint64_t value) {
  _internal_set_read_time_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.read_time_ms)
}

// optional uint64 write_sectors = 4;
inline bool SysStats_DiskStat::_internal_has_write_sectors() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_write_sectors() const {
  return _internal_has_write_sectors();
}
inline void SysStats_DiskStat::clear_write_sectors() {
  _impl_.write_sectors_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t SysStats_DiskStat::_internal_write_sectors() const {
  return _impl_.write_sectors_;
}
inline uint64_t SysStats_DiskStat::write_sectors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.write_sectors)
  return _internal_write_sectors();
}
inline void SysStats_DiskStat::_internal_set_write_sectors(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.write_sectors_ = value;
}
inline void SysStats_DiskStat::set_write_sectors(uint64_t value) {
  _internal_set_write_sectors(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.write_sectors)
}

// optional uint64 write_time_ms = 5;
inline bool SysStats_DiskStat::_internal_has_write_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_write_time_ms() const {
  return _internal_has_write_time_ms();
}
inline void SysStats_DiskStat::clear_write_time_ms() {
  _impl_.write_time_ms_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t SysStats_DiskStat::_internal_write_time_ms() const {
  return _impl_.write_time_ms_;
}
inline uint64_t SysStats_DiskStat::write_time_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.write_time_ms)
  return _internal_write_time_ms();
}
inline void SysStats_DiskStat::_internal_set_write_time_ms(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.write_time_ms_ = value;
}
inline void SysStats_DiskStat::set_write_time_ms(uint64_t value) {
  _internal_set_write_time_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.write_time_ms)
}

// optional uint64 discard_sectors = 6;
inline bool SysStats_DiskStat::_internal_has_discard_sectors() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_discard_sectors() const {
  return _internal_has_discard_sectors();
}
inline void SysStats_DiskStat::clear_discard_sectors() {
  _impl_.discard_sectors_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t SysStats_DiskStat::_internal_discard_sectors() const {
  return _impl_.discard_sectors_;
}
inline uint64_t SysStats_DiskStat::discard_sectors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.discard_sectors)
  return _internal_discard_sectors();
}
inline void SysStats_DiskStat::_internal_set_discard_sectors(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.discard_sectors_ = value;
}
inline void SysStats_DiskStat::set_discard_sectors(uint64_t value) {
  _internal_set_discard_sectors(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.discard_sectors)
}

// optional uint64 discard_time_ms = 7;
inline bool SysStats_DiskStat::_internal_has_discard_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_discard_time_ms() const {
  return _internal_has_discard_time_ms();
}
inline void SysStats_DiskStat::clear_discard_time_ms() {
  _impl_.discard_time_ms_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t SysStats_DiskStat::_internal_discard_time_ms() const {
  return _impl_.discard_time_ms_;
}
inline uint64_t SysStats_DiskStat::discard_time_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.discard_time_ms)
  return _internal_discard_time_ms();
}
inline void SysStats_DiskStat::_internal_set_discard_time_ms(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.discard_time_ms_ = value;
}
inline void SysStats_DiskStat::set_discard_time_ms(uint64_t value) {
  _internal_set_discard_time_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.discard_time_ms)
}

// optional uint64 flush_count = 8;
inline bool SysStats_DiskStat::_internal_has_flush_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_flush_count() const {
  return _internal_has_flush_count();
}
inline void SysStats_DiskStat::clear_flush_count() {
  _impl_.flush_count_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t SysStats_DiskStat::_internal_flush_count() const {
  return _impl_.flush_count_;
}
inline uint64_t SysStats_DiskStat::flush_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.flush_count)
  return _internal_flush_count();
}
inline void SysStats_DiskStat::_internal_set_flush_count(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.flush_count_ = value;
}
inline void SysStats_DiskStat::set_flush_count(uint64_t value) {
  _internal_set_flush_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.flush_count)
}

// optional uint64 flush_time_ms = 9;
inline bool SysStats_DiskStat::_internal_has_flush_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SysStats_DiskStat::has_flush_time_ms() const {
  return _internal_has_flush_time_ms();
}
inline void SysStats_DiskStat::clear_flush_time_ms() {
  _impl_.flush_time_ms_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t SysStats_DiskStat::_internal_flush_time_ms() const {
  return _impl_.flush_time_ms_;
}
inline uint64_t SysStats_DiskStat::flush_time_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.DiskStat.flush_time_ms)
  return _internal_flush_time_ms();
}
inline void SysStats_DiskStat::_internal_set_flush_time_ms(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.flush_time_ms_ = value;
}
inline void SysStats_DiskStat::set_flush_time_ms(uint64_t value) {
  _internal_set_flush_time_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.DiskStat.flush_time_ms)
}

// -------------------------------------------------------------------

// SysStats_PsiSample

// optional .perfetto.protos.SysStats.PsiSample.PsiResource resource = 1;
inline bool SysStats_PsiSample::_internal_has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats_PsiSample::has_resource() const {
  return _internal_has_resource();
}
inline void SysStats_PsiSample::clear_resource() {
  _impl_.resource_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::SysStats_PsiSample_PsiResource SysStats_PsiSample::_internal_resource() const {
  return static_cast< ::perfetto::protos::SysStats_PsiSample_PsiResource >(_impl_.resource_);
}
inline ::perfetto::protos::SysStats_PsiSample_PsiResource SysStats_PsiSample::resource() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.PsiSample.resource)
  return _internal_resource();
}
inline void SysStats_PsiSample::_internal_set_resource(::perfetto::protos::SysStats_PsiSample_PsiResource value) {
  assert(::perfetto::protos::SysStats_PsiSample_PsiResource_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.resource_ = value;
}
inline void SysStats_PsiSample::set_resource(::perfetto::protos::SysStats_PsiSample_PsiResource value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.PsiSample.resource)
}

// optional uint64 total_ns = 2;
inline bool SysStats_PsiSample::_internal_has_total_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats_PsiSample::has_total_ns() const {
  return _internal_has_total_ns();
}
inline void SysStats_PsiSample::clear_total_ns() {
  _impl_.total_ns_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SysStats_PsiSample::_internal_total_ns() const {
  return _impl_.total_ns_;
}
inline uint64_t SysStats_PsiSample::total_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.PsiSample.total_ns)
  return _internal_total_ns();
}
inline void SysStats_PsiSample::_internal_set_total_ns(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.total_ns_ = value;
}
inline void SysStats_PsiSample::set_total_ns(uint64_t value) {
  _internal_set_total_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.PsiSample.total_ns)
}

// -------------------------------------------------------------------

// SysStats

// repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
inline int SysStats::_internal_meminfo_size() const {
  return _impl_.meminfo_.size();
}
inline int SysStats::meminfo_size() const {
  return _internal_meminfo_size();
}
inline void SysStats::clear_meminfo() {
  _impl_.meminfo_.Clear();
}
inline ::perfetto::protos::SysStats_MeminfoValue* SysStats::mutable_meminfo(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.meminfo)
  return _impl_.meminfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >*
SysStats::mutable_meminfo() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.meminfo)
  return &_impl_.meminfo_;
}
inline const ::perfetto::protos::SysStats_MeminfoValue& SysStats::_internal_meminfo(int index) const {
  return _impl_.meminfo_.Get(index);
}
inline const ::perfetto::protos::SysStats_MeminfoValue& SysStats::meminfo(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.meminfo)
  return _internal_meminfo(index);
}
inline ::perfetto::protos::SysStats_MeminfoValue* SysStats::_internal_add_meminfo() {
  return _impl_.meminfo_.Add();
}
inline ::perfetto::protos::SysStats_MeminfoValue* SysStats::add_meminfo() {
  ::perfetto::protos::SysStats_MeminfoValue* _add = _internal_add_meminfo();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.meminfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_MeminfoValue >&
SysStats::meminfo() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.meminfo)
  return _impl_.meminfo_;
}

// repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
inline int SysStats::_internal_vmstat_size() const {
  return _impl_.vmstat_.size();
}
inline int SysStats::vmstat_size() const {
  return _internal_vmstat_size();
}
inline void SysStats::clear_vmstat() {
  _impl_.vmstat_.Clear();
}
inline ::perfetto::protos::SysStats_VmstatValue* SysStats::mutable_vmstat(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.vmstat)
  return _impl_.vmstat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >*
SysStats::mutable_vmstat() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.vmstat)
  return &_impl_.vmstat_;
}
inline const ::perfetto::protos::SysStats_VmstatValue& SysStats::_internal_vmstat(int index) const {
  return _impl_.vmstat_.Get(index);
}
inline const ::perfetto::protos::SysStats_VmstatValue& SysStats::vmstat(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.vmstat)
  return _internal_vmstat(index);
}
inline ::perfetto::protos::SysStats_VmstatValue* SysStats::_internal_add_vmstat() {
  return _impl_.vmstat_.Add();
}
inline ::perfetto::protos::SysStats_VmstatValue* SysStats::add_vmstat() {
  ::perfetto::protos::SysStats_VmstatValue* _add = _internal_add_vmstat();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.vmstat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_VmstatValue >&
SysStats::vmstat() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.vmstat)
  return _impl_.vmstat_;
}

// repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
inline int SysStats::_internal_cpu_stat_size() const {
  return _impl_.cpu_stat_.size();
}
inline int SysStats::cpu_stat_size() const {
  return _internal_cpu_stat_size();
}
inline void SysStats::clear_cpu_stat() {
  _impl_.cpu_stat_.Clear();
}
inline ::perfetto::protos::SysStats_CpuTimes* SysStats::mutable_cpu_stat(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.cpu_stat)
  return _impl_.cpu_stat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >*
SysStats::mutable_cpu_stat() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.cpu_stat)
  return &_impl_.cpu_stat_;
}
inline const ::perfetto::protos::SysStats_CpuTimes& SysStats::_internal_cpu_stat(int index) const {
  return _impl_.cpu_stat_.Get(index);
}
inline const ::perfetto::protos::SysStats_CpuTimes& SysStats::cpu_stat(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.cpu_stat)
  return _internal_cpu_stat(index);
}
inline ::perfetto::protos::SysStats_CpuTimes* SysStats::_internal_add_cpu_stat() {
  return _impl_.cpu_stat_.Add();
}
inline ::perfetto::protos::SysStats_CpuTimes* SysStats::add_cpu_stat() {
  ::perfetto::protos::SysStats_CpuTimes* _add = _internal_add_cpu_stat();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.cpu_stat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_CpuTimes >&
SysStats::cpu_stat() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.cpu_stat)
  return _impl_.cpu_stat_;
}

// optional uint64 num_forks = 4;
inline bool SysStats::_internal_has_num_forks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysStats::has_num_forks() const {
  return _internal_has_num_forks();
}
inline void SysStats::clear_num_forks() {
  _impl_.num_forks_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t SysStats::_internal_num_forks() const {
  return _impl_.num_forks_;
}
inline uint64_t SysStats::num_forks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_forks)
  return _internal_num_forks();
}
inline void SysStats::_internal_set_num_forks(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_forks_ = value;
}
inline void SysStats::set_num_forks(uint64_t value) {
  _internal_set_num_forks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.num_forks)
}

// optional uint64 num_irq_total = 5;
inline bool SysStats::_internal_has_num_irq_total() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysStats::has_num_irq_total() const {
  return _internal_has_num_irq_total();
}
inline void SysStats::clear_num_irq_total() {
  _impl_.num_irq_total_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t SysStats::_internal_num_irq_total() const {
  return _impl_.num_irq_total_;
}
inline uint64_t SysStats::num_irq_total() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_irq_total)
  return _internal_num_irq_total();
}
inline void SysStats::_internal_set_num_irq_total(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_irq_total_ = value;
}
inline void SysStats::set_num_irq_total(uint64_t value) {
  _internal_set_num_irq_total(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.num_irq_total)
}

// repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
inline int SysStats::_internal_num_irq_size() const {
  return _impl_.num_irq_.size();
}
inline int SysStats::num_irq_size() const {
  return _internal_num_irq_size();
}
inline void SysStats::clear_num_irq() {
  _impl_.num_irq_.Clear();
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::mutable_num_irq(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.num_irq)
  return _impl_.num_irq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
SysStats::mutable_num_irq() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.num_irq)
  return &_impl_.num_irq_;
}
inline const ::perfetto::protos::SysStats_InterruptCount& SysStats::_internal_num_irq(int index) const {
  return _impl_.num_irq_.Get(index);
}
inline const ::perfetto::protos::SysStats_InterruptCount& SysStats::num_irq(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_irq)
  return _internal_num_irq(index);
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::_internal_add_num_irq() {
  return _impl_.num_irq_.Add();
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::add_num_irq() {
  ::perfetto::protos::SysStats_InterruptCount* _add = _internal_add_num_irq();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.num_irq)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
SysStats::num_irq() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.num_irq)
  return _impl_.num_irq_;
}

// optional uint64 num_softirq_total = 7;
inline bool SysStats::_internal_has_num_softirq_total() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SysStats::has_num_softirq_total() const {
  return _internal_has_num_softirq_total();
}
inline void SysStats::clear_num_softirq_total() {
  _impl_.num_softirq_total_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t SysStats::_internal_num_softirq_total() const {
  return _impl_.num_softirq_total_;
}
inline uint64_t SysStats::num_softirq_total() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_softirq_total)
  return _internal_num_softirq_total();
}
inline void SysStats::_internal_set_num_softirq_total(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_softirq_total_ = value;
}
inline void SysStats::set_num_softirq_total(uint64_t value) {
  _internal_set_num_softirq_total(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.num_softirq_total)
}

// repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
inline int SysStats::_internal_num_softirq_size() const {
  return _impl_.num_softirq_.size();
}
inline int SysStats::num_softirq_size() const {
  return _internal_num_softirq_size();
}
inline void SysStats::clear_num_softirq() {
  _impl_.num_softirq_.Clear();
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::mutable_num_softirq(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.num_softirq)
  return _impl_.num_softirq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >*
SysStats::mutable_num_softirq() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.num_softirq)
  return &_impl_.num_softirq_;
}
inline const ::perfetto::protos::SysStats_InterruptCount& SysStats::_internal_num_softirq(int index) const {
  return _impl_.num_softirq_.Get(index);
}
inline const ::perfetto::protos::SysStats_InterruptCount& SysStats::num_softirq(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.num_softirq)
  return _internal_num_softirq(index);
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::_internal_add_num_softirq() {
  return _impl_.num_softirq_.Add();
}
inline ::perfetto::protos::SysStats_InterruptCount* SysStats::add_num_softirq() {
  ::perfetto::protos::SysStats_InterruptCount* _add = _internal_add_num_softirq();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.num_softirq)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_InterruptCount >&
SysStats::num_softirq() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.num_softirq)
  return _impl_.num_softirq_;
}

// optional uint64 collection_end_timestamp = 9;
inline bool SysStats::_internal_has_collection_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SysStats::has_collection_end_timestamp() const {
  return _internal_has_collection_end_timestamp();
}
inline void SysStats::clear_collection_end_timestamp() {
  _impl_.collection_end_timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t SysStats::_internal_collection_end_timestamp() const {
  return _impl_.collection_end_timestamp_;
}
inline uint64_t SysStats::collection_end_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.collection_end_timestamp)
  return _internal_collection_end_timestamp();
}
inline void SysStats::_internal_set_collection_end_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.collection_end_timestamp_ = value;
}
inline void SysStats::set_collection_end_timestamp(uint64_t value) {
  _internal_set_collection_end_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.collection_end_timestamp)
}

// repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
inline int SysStats::_internal_devfreq_size() const {
  return _impl_.devfreq_.size();
}
inline int SysStats::devfreq_size() const {
  return _internal_devfreq_size();
}
inline void SysStats::clear_devfreq() {
  _impl_.devfreq_.Clear();
}
inline ::perfetto::protos::SysStats_DevfreqValue* SysStats::mutable_devfreq(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.devfreq)
  return _impl_.devfreq_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DevfreqValue >*
SysStats::mutable_devfreq() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.devfreq)
  return &_impl_.devfreq_;
}
inline const ::perfetto::protos::SysStats_DevfreqValue& SysStats::_internal_devfreq(int index) const {
  return _impl_.devfreq_.Get(index);
}
inline const ::perfetto::protos::SysStats_DevfreqValue& SysStats::devfreq(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.devfreq)
  return _internal_devfreq(index);
}
inline ::perfetto::protos::SysStats_DevfreqValue* SysStats::_internal_add_devfreq() {
  return _impl_.devfreq_.Add();
}
inline ::perfetto::protos::SysStats_DevfreqValue* SysStats::add_devfreq() {
  ::perfetto::protos::SysStats_DevfreqValue* _add = _internal_add_devfreq();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.devfreq)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DevfreqValue >&
SysStats::devfreq() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.devfreq)
  return _impl_.devfreq_;
}

// repeated uint32 cpufreq_khz = 11;
inline int SysStats::_internal_cpufreq_khz_size() const {
  return _impl_.cpufreq_khz_.size();
}
inline int SysStats::cpufreq_khz_size() const {
  return _internal_cpufreq_khz_size();
}
inline void SysStats::clear_cpufreq_khz() {
  _impl_.cpufreq_khz_.Clear();
}
inline uint32_t SysStats::_internal_cpufreq_khz(int index) const {
  return _impl_.cpufreq_khz_.Get(index);
}
inline uint32_t SysStats::cpufreq_khz(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.cpufreq_khz)
  return _internal_cpufreq_khz(index);
}
inline void SysStats::set_cpufreq_khz(int index, uint32_t value) {
  _impl_.cpufreq_khz_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStats.cpufreq_khz)
}
inline void SysStats::_internal_add_cpufreq_khz(uint32_t value) {
  _impl_.cpufreq_khz_.Add(value);
}
inline void SysStats::add_cpufreq_khz(uint32_t value) {
  _internal_add_cpufreq_khz(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.cpufreq_khz)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SysStats::_internal_cpufreq_khz() const {
  return _impl_.cpufreq_khz_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SysStats::cpufreq_khz() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.cpufreq_khz)
  return _internal_cpufreq_khz();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SysStats::_internal_mutable_cpufreq_khz() {
  return &_impl_.cpufreq_khz_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SysStats::mutable_cpufreq_khz() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.cpufreq_khz)
  return _internal_mutable_cpufreq_khz();
}

// repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
inline int SysStats::_internal_buddy_info_size() const {
  return _impl_.buddy_info_.size();
}
inline int SysStats::buddy_info_size() const {
  return _internal_buddy_info_size();
}
inline void SysStats::clear_buddy_info() {
  _impl_.buddy_info_.Clear();
}
inline ::perfetto::protos::SysStats_BuddyInfo* SysStats::mutable_buddy_info(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.buddy_info)
  return _impl_.buddy_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_BuddyInfo >*
SysStats::mutable_buddy_info() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.buddy_info)
  return &_impl_.buddy_info_;
}
inline const ::perfetto::protos::SysStats_BuddyInfo& SysStats::_internal_buddy_info(int index) const {
  return _impl_.buddy_info_.Get(index);
}
inline const ::perfetto::protos::SysStats_BuddyInfo& SysStats::buddy_info(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.buddy_info)
  return _internal_buddy_info(index);
}
inline ::perfetto::protos::SysStats_BuddyInfo* SysStats::_internal_add_buddy_info() {
  return _impl_.buddy_info_.Add();
}
inline ::perfetto::protos::SysStats_BuddyInfo* SysStats::add_buddy_info() {
  ::perfetto::protos::SysStats_BuddyInfo* _add = _internal_add_buddy_info();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.buddy_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_BuddyInfo >&
SysStats::buddy_info() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.buddy_info)
  return _impl_.buddy_info_;
}

// repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
inline int SysStats::_internal_disk_stat_size() const {
  return _impl_.disk_stat_.size();
}
inline int SysStats::disk_stat_size() const {
  return _internal_disk_stat_size();
}
inline void SysStats::clear_disk_stat() {
  _impl_.disk_stat_.Clear();
}
inline ::perfetto::protos::SysStats_DiskStat* SysStats::mutable_disk_stat(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.disk_stat)
  return _impl_.disk_stat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DiskStat >*
SysStats::mutable_disk_stat() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.disk_stat)
  return &_impl_.disk_stat_;
}
inline const ::perfetto::protos::SysStats_DiskStat& SysStats::_internal_disk_stat(int index) const {
  return _impl_.disk_stat_.Get(index);
}
inline const ::perfetto::protos::SysStats_DiskStat& SysStats::disk_stat(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.disk_stat)
  return _internal_disk_stat(index);
}
inline ::perfetto::protos::SysStats_DiskStat* SysStats::_internal_add_disk_stat() {
  return _impl_.disk_stat_.Add();
}
inline ::perfetto::protos::SysStats_DiskStat* SysStats::add_disk_stat() {
  ::perfetto::protos::SysStats_DiskStat* _add = _internal_add_disk_stat();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.disk_stat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_DiskStat >&
SysStats::disk_stat() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.disk_stat)
  return _impl_.disk_stat_;
}

// repeated .perfetto.protos.SysStats.PsiSample psi = 14;
inline int SysStats::_internal_psi_size() const {
  return _impl_.psi_.size();
}
inline int SysStats::psi_size() const {
  return _internal_psi_size();
}
inline void SysStats::clear_psi() {
  _impl_.psi_.Clear();
}
inline ::perfetto::protos::SysStats_PsiSample* SysStats::mutable_psi(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SysStats.psi)
  return _impl_.psi_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_PsiSample >*
SysStats::mutable_psi() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStats.psi)
  return &_impl_.psi_;
}
inline const ::perfetto::protos::SysStats_PsiSample& SysStats::_internal_psi(int index) const {
  return _impl_.psi_.Get(index);
}
inline const ::perfetto::protos::SysStats_PsiSample& SysStats::psi(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStats.psi)
  return _internal_psi(index);
}
inline ::perfetto::protos::SysStats_PsiSample* SysStats::_internal_add_psi() {
  return _impl_.psi_.Add();
}
inline ::perfetto::protos::SysStats_PsiSample* SysStats::add_psi() {
  ::perfetto::protos::SysStats_PsiSample* _add = _internal_add_psi();
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStats.psi)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SysStats_PsiSample >&
SysStats::psi() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStats.psi)
  return _impl_.psi_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::SysStats_PsiSample_PsiResource> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto
