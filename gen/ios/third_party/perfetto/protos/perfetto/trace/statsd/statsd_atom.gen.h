// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_STATSD_STATSD_ATOM_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_STATSD_STATSD_ATOM_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class StatsdAtom;
class Atom;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT StatsdAtom : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kAtomFieldNumber = 1,
    kTimestampNanosFieldNumber = 2,
  };

  StatsdAtom();
  ~StatsdAtom() override;
  StatsdAtom(StatsdAtom&&) noexcept;
  StatsdAtom& operator=(StatsdAtom&&);
  StatsdAtom(const StatsdAtom&);
  StatsdAtom& operator=(const StatsdAtom&);
  bool operator==(const StatsdAtom&) const;
  bool operator!=(const StatsdAtom& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<Atom>& atom() const { return atom_; }
  std::vector<Atom>* mutable_atom() { return &atom_; }
  int atom_size() const;
  void clear_atom();
  Atom* add_atom();

  const std::vector<int64_t>& timestamp_nanos() const { return timestamp_nanos_; }
  std::vector<int64_t>* mutable_timestamp_nanos() { return &timestamp_nanos_; }
  int timestamp_nanos_size() const { return static_cast<int>(timestamp_nanos_.size()); }
  void clear_timestamp_nanos() { timestamp_nanos_.clear(); }
  void add_timestamp_nanos(int64_t value) { timestamp_nanos_.emplace_back(value); }
  int64_t* add_timestamp_nanos() { timestamp_nanos_.emplace_back(); return &timestamp_nanos_.back(); }

 private:
  std::vector<Atom> atom_;
  std::vector<int64_t> timestamp_nanos_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT Atom : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
  };

  Atom();
  ~Atom() override;
  Atom(Atom&&) noexcept;
  Atom& operator=(Atom&&);
  Atom(const Atom&);
  Atom& operator=(const Atom&);
  bool operator==(const Atom&) const;
  bool operator!=(const Atom& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

 private:

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_STATSD_STATSD_ATOM_PROTO_CPP_H_
