// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/power/battery_counters.proto

#include "protos/perfetto/trace/power/battery_counters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR BatteryCounters::BatteryCounters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.charge_counter_uah_)*/int64_t{0}
  , /*decltype(_impl_.current_ua_)*/int64_t{0}
  , /*decltype(_impl_.current_avg_ua_)*/int64_t{0}
  , /*decltype(_impl_.energy_counter_uwh_)*/int64_t{0}
  , /*decltype(_impl_.voltage_uv_)*/int64_t{0}
  , /*decltype(_impl_.capacity_percent_)*/0} {}
struct BatteryCountersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryCountersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryCountersDefaultTypeInternal() {}
  union {
    BatteryCounters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryCountersDefaultTypeInternal _BatteryCounters_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class BatteryCounters::_Internal {
 public:
  using HasBits = decltype(std::declval<BatteryCounters>()._impl_._has_bits_);
  static void set_has_charge_counter_uah(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_capacity_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_current_ua(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_avg_ua(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_energy_counter_uwh(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_voltage_uv(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BatteryCounters::BatteryCounters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BatteryCounters)
}
BatteryCounters::BatteryCounters(const BatteryCounters& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BatteryCounters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.charge_counter_uah_){}
    , decltype(_impl_.current_ua_){}
    , decltype(_impl_.current_avg_ua_){}
    , decltype(_impl_.energy_counter_uwh_){}
    , decltype(_impl_.voltage_uv_){}
    , decltype(_impl_.capacity_percent_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.charge_counter_uah_, &from._impl_.charge_counter_uah_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.capacity_percent_) -
    reinterpret_cast<char*>(&_impl_.charge_counter_uah_)) + sizeof(_impl_.capacity_percent_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BatteryCounters)
}

inline void BatteryCounters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.charge_counter_uah_){int64_t{0}}
    , decltype(_impl_.current_ua_){int64_t{0}}
    , decltype(_impl_.current_avg_ua_){int64_t{0}}
    , decltype(_impl_.energy_counter_uwh_){int64_t{0}}
    , decltype(_impl_.voltage_uv_){int64_t{0}}
    , decltype(_impl_.capacity_percent_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatteryCounters::~BatteryCounters() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BatteryCounters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatteryCounters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void BatteryCounters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatteryCounters::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BatteryCounters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.charge_counter_uah_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.capacity_percent_) -
        reinterpret_cast<char*>(&_impl_.charge_counter_uah_)) + sizeof(_impl_.capacity_percent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BatteryCounters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 charge_counter_uah = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_charge_counter_uah(&has_bits);
          _impl_.charge_counter_uah_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float capacity_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_capacity_percent(&has_bits);
          _impl_.capacity_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 current_ua = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_current_ua(&has_bits);
          _impl_.current_ua_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 current_avg_ua = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_current_avg_ua(&has_bits);
          _impl_.current_avg_ua_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 energy_counter_uwh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_energy_counter_uwh(&has_bits);
          _impl_.energy_counter_uwh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 voltage_uv = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_voltage_uv(&has_bits);
          _impl_.voltage_uv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryCounters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BatteryCounters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 charge_counter_uah = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_charge_counter_uah(), target);
  }

  // optional float capacity_percent = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_capacity_percent(), target);
  }

  // optional int64 current_ua = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_ua(), target);
  }

  // optional int64 current_avg_ua = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_current_avg_ua(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // optional int64 energy_counter_uwh = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_energy_counter_uwh(), target);
  }

  // optional int64 voltage_uv = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_voltage_uv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BatteryCounters)
  return target;
}

size_t BatteryCounters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BatteryCounters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 charge_counter_uah = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_charge_counter_uah());
    }

    // optional int64 current_ua = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_current_ua());
    }

    // optional int64 current_avg_ua = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_current_avg_ua());
    }

    // optional int64 energy_counter_uwh = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_energy_counter_uwh());
    }

    // optional int64 voltage_uv = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_voltage_uv());
    }

    // optional float capacity_percent = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryCounters::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BatteryCounters*>(
      &from));
}

void BatteryCounters::MergeFrom(const BatteryCounters& from) {
  BatteryCounters* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BatteryCounters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.charge_counter_uah_ = from._impl_.charge_counter_uah_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.current_ua_ = from._impl_.current_ua_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.current_avg_ua_ = from._impl_.current_avg_ua_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.energy_counter_uwh_ = from._impl_.energy_counter_uwh_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.voltage_uv_ = from._impl_.voltage_uv_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.capacity_percent_ = from._impl_.capacity_percent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BatteryCounters::CopyFrom(const BatteryCounters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BatteryCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryCounters::IsInitialized() const {
  return true;
}

void BatteryCounters::InternalSwap(BatteryCounters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryCounters, _impl_.capacity_percent_)
      + sizeof(BatteryCounters::_impl_.capacity_percent_)
      - PROTOBUF_FIELD_OFFSET(BatteryCounters, _impl_.charge_counter_uah_)>(
          reinterpret_cast<char*>(&_impl_.charge_counter_uah_),
          reinterpret_cast<char*>(&other->_impl_.charge_counter_uah_));
}

std::string BatteryCounters::GetTypeName() const {
  return "perfetto.protos.BatteryCounters";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::BatteryCounters*
Arena::CreateMaybeMessage< ::perfetto::protos::BatteryCounters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BatteryCounters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
