#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/power/battery_counters.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

BatteryCounters::BatteryCounters() = default;
BatteryCounters::~BatteryCounters() = default;
BatteryCounters::BatteryCounters(const BatteryCounters&) = default;
BatteryCounters& BatteryCounters::operator=(const BatteryCounters&) = default;
BatteryCounters::BatteryCounters(BatteryCounters&&) noexcept = default;
BatteryCounters& BatteryCounters::operator=(BatteryCounters&&) = default;

bool BatteryCounters::operator==(const BatteryCounters& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(charge_counter_uah_, other.charge_counter_uah_)
   && ::protozero::internal::gen_helpers::EqualsField(capacity_percent_, other.capacity_percent_)
   && ::protozero::internal::gen_helpers::EqualsField(current_ua_, other.current_ua_)
   && ::protozero::internal::gen_helpers::EqualsField(current_avg_ua_, other.current_avg_ua_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(energy_counter_uwh_, other.energy_counter_uwh_)
   && ::protozero::internal::gen_helpers::EqualsField(voltage_uv_, other.voltage_uv_);
}

bool BatteryCounters::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* charge_counter_uah */:
        field.get(&charge_counter_uah_);
        break;
      case 2 /* capacity_percent */:
        field.get(&capacity_percent_);
        break;
      case 3 /* current_ua */:
        field.get(&current_ua_);
        break;
      case 4 /* current_avg_ua */:
        field.get(&current_avg_ua_);
        break;
      case 5 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 6 /* energy_counter_uwh */:
        field.get(&energy_counter_uwh_);
        break;
      case 7 /* voltage_uv */:
        field.get(&voltage_uv_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BatteryCounters::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BatteryCounters::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BatteryCounters::Serialize(::protozero::Message* msg) const {
  // Field 1: charge_counter_uah
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, charge_counter_uah_, msg);
  }

  // Field 2: capacity_percent
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, capacity_percent_, msg);
  }

  // Field 3: current_ua
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, current_ua_, msg);
  }

  // Field 4: current_avg_ua
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, current_avg_ua_, msg);
  }

  // Field 5: name
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, name_, msg);
  }

  // Field 6: energy_counter_uwh
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, energy_counter_uwh_, msg);
  }

  // Field 7: voltage_uv
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, voltage_uv_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
