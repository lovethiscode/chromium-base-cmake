// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/power/android_energy_estimation_breakdown.proto

#include "protos/perfetto/trace/power/android_energy_estimation_breakdown.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::AndroidEnergyEstimationBreakdown_EnergyUidBreakdown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.energy_uws_)*/int64_t{0}
  , /*decltype(_impl_.uid_)*/0} {}
struct AndroidEnergyEstimationBreakdown_EnergyUidBreakdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidEnergyEstimationBreakdown_EnergyUidBreakdownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidEnergyEstimationBreakdown_EnergyUidBreakdownDefaultTypeInternal() {}
  union {
    AndroidEnergyEstimationBreakdown_EnergyUidBreakdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidEnergyEstimationBreakdown_EnergyUidBreakdownDefaultTypeInternal _AndroidEnergyEstimationBreakdown_EnergyUidBreakdown_default_instance_;
PROTOBUF_CONSTEXPR AndroidEnergyEstimationBreakdown::AndroidEnergyEstimationBreakdown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.per_uid_breakdown_)*/{}
  , /*decltype(_impl_.energy_consumer_descriptor_)*/nullptr
  , /*decltype(_impl_.energy_uws_)*/int64_t{0}
  , /*decltype(_impl_.energy_consumer_id_)*/0} {}
struct AndroidEnergyEstimationBreakdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidEnergyEstimationBreakdownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidEnergyEstimationBreakdownDefaultTypeInternal() {}
  union {
    AndroidEnergyEstimationBreakdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidEnergyEstimationBreakdownDefaultTypeInternal _AndroidEnergyEstimationBreakdown_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidEnergyEstimationBreakdown_EnergyUidBreakdown>()._impl_._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_energy_uws(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::AndroidEnergyEstimationBreakdown_EnergyUidBreakdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
}
AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::AndroidEnergyEstimationBreakdown_EnergyUidBreakdown(const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.energy_uws_){}
    , decltype(_impl_.uid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.energy_uws_, &from._impl_.energy_uws_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uid_) -
    reinterpret_cast<char*>(&_impl_.energy_uws_)) + sizeof(_impl_.uid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
}

inline void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.energy_uws_){int64_t{0}}
    , decltype(_impl_.uid_){0}
  };
}

AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::~AndroidEnergyEstimationBreakdown_EnergyUidBreakdown() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.energy_uws_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.uid_) -
        reinterpret_cast<char*>(&_impl_.energy_uws_)) + sizeof(_impl_.uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 energy_uws = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_energy_uws(&has_bits);
          _impl_.energy_uws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // optional int64 energy_uws = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_energy_uws(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
  return target;
}

size_t AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 energy_uws = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_energy_uws());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown*>(
      &from));
}

void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::MergeFrom(const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown& from) {
  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.energy_uws_ = from._impl_.energy_uws_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uid_ = from._impl_.uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::CopyFrom(const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::IsInitialized() const {
  return true;
}

void AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::InternalSwap(AndroidEnergyEstimationBreakdown_EnergyUidBreakdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidEnergyEstimationBreakdown_EnergyUidBreakdown, _impl_.uid_)
      + sizeof(AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::_impl_.uid_)
      - PROTOBUF_FIELD_OFFSET(AndroidEnergyEstimationBreakdown_EnergyUidBreakdown, _impl_.energy_uws_)>(
          reinterpret_cast<char*>(&_impl_.energy_uws_),
          reinterpret_cast<char*>(&other->_impl_.energy_uws_));
}

std::string AndroidEnergyEstimationBreakdown_EnergyUidBreakdown::GetTypeName() const {
  return "perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown";
}


// ===================================================================

class AndroidEnergyEstimationBreakdown::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidEnergyEstimationBreakdown>()._impl_._has_bits_);
  static const ::perfetto::protos::AndroidEnergyConsumerDescriptor& energy_consumer_descriptor(const AndroidEnergyEstimationBreakdown* msg);
  static void set_has_energy_consumer_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_energy_consumer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_energy_uws(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::AndroidEnergyConsumerDescriptor&
AndroidEnergyEstimationBreakdown::_Internal::energy_consumer_descriptor(const AndroidEnergyEstimationBreakdown* msg) {
  return *msg->_impl_.energy_consumer_descriptor_;
}
void AndroidEnergyEstimationBreakdown::clear_energy_consumer_descriptor() {
  if (_impl_.energy_consumer_descriptor_ != nullptr) _impl_.energy_consumer_descriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AndroidEnergyEstimationBreakdown::AndroidEnergyEstimationBreakdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidEnergyEstimationBreakdown)
}
AndroidEnergyEstimationBreakdown::AndroidEnergyEstimationBreakdown(const AndroidEnergyEstimationBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AndroidEnergyEstimationBreakdown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_uid_breakdown_){from._impl_.per_uid_breakdown_}
    , decltype(_impl_.energy_consumer_descriptor_){nullptr}
    , decltype(_impl_.energy_uws_){}
    , decltype(_impl_.energy_consumer_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_energy_consumer_descriptor()) {
    _this->_impl_.energy_consumer_descriptor_ = new ::perfetto::protos::AndroidEnergyConsumerDescriptor(*from._impl_.energy_consumer_descriptor_);
  }
  ::memcpy(&_impl_.energy_uws_, &from._impl_.energy_uws_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.energy_consumer_id_) -
    reinterpret_cast<char*>(&_impl_.energy_uws_)) + sizeof(_impl_.energy_consumer_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidEnergyEstimationBreakdown)
}

inline void AndroidEnergyEstimationBreakdown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_uid_breakdown_){arena}
    , decltype(_impl_.energy_consumer_descriptor_){nullptr}
    , decltype(_impl_.energy_uws_){int64_t{0}}
    , decltype(_impl_.energy_consumer_id_){0}
  };
}

AndroidEnergyEstimationBreakdown::~AndroidEnergyEstimationBreakdown() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidEnergyEstimationBreakdown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidEnergyEstimationBreakdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.per_uid_breakdown_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.energy_consumer_descriptor_;
}

void AndroidEnergyEstimationBreakdown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidEnergyEstimationBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidEnergyEstimationBreakdown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.per_uid_breakdown_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.energy_consumer_descriptor_ != nullptr);
    _impl_.energy_consumer_descriptor_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.energy_uws_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.energy_consumer_id_) -
        reinterpret_cast<char*>(&_impl_.energy_uws_)) + sizeof(_impl_.energy_consumer_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AndroidEnergyEstimationBreakdown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.AndroidEnergyConsumerDescriptor energy_consumer_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_energy_consumer_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 energy_consumer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_energy_consumer_id(&has_bits);
          _impl_.energy_consumer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 energy_uws = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_energy_uws(&has_bits);
          _impl_.energy_uws_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown per_uid_breakdown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_uid_breakdown(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AndroidEnergyEstimationBreakdown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidEnergyEstimationBreakdown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.AndroidEnergyConsumerDescriptor energy_consumer_descriptor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::energy_consumer_descriptor(this),
        _Internal::energy_consumer_descriptor(this).GetCachedSize(), target, stream);
  }

  // optional int32 energy_consumer_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_energy_consumer_id(), target);
  }

  // optional int64 energy_uws = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_energy_uws(), target);
  }

  // repeated .perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown per_uid_breakdown = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_per_uid_breakdown_size()); i < n; i++) {
    const auto& repfield = this->_internal_per_uid_breakdown(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidEnergyEstimationBreakdown)
  return target;
}

size_t AndroidEnergyEstimationBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidEnergyEstimationBreakdown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidEnergyEstimationBreakdown.EnergyUidBreakdown per_uid_breakdown = 4;
  total_size += 1UL * this->_internal_per_uid_breakdown_size();
  for (const auto& msg : this->_impl_.per_uid_breakdown_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.AndroidEnergyConsumerDescriptor energy_consumer_descriptor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.energy_consumer_descriptor_);
    }

    // optional int64 energy_uws = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_energy_uws());
    }

    // optional int32 energy_consumer_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_energy_consumer_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidEnergyEstimationBreakdown::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AndroidEnergyEstimationBreakdown*>(
      &from));
}

void AndroidEnergyEstimationBreakdown::MergeFrom(const AndroidEnergyEstimationBreakdown& from) {
  AndroidEnergyEstimationBreakdown* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidEnergyEstimationBreakdown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.per_uid_breakdown_.MergeFrom(from._impl_.per_uid_breakdown_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_energy_consumer_descriptor()->::perfetto::protos::AndroidEnergyConsumerDescriptor::MergeFrom(
          from._internal_energy_consumer_descriptor());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.energy_uws_ = from._impl_.energy_uws_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.energy_consumer_id_ = from._impl_.energy_consumer_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AndroidEnergyEstimationBreakdown::CopyFrom(const AndroidEnergyEstimationBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidEnergyEstimationBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidEnergyEstimationBreakdown::IsInitialized() const {
  return true;
}

void AndroidEnergyEstimationBreakdown::InternalSwap(AndroidEnergyEstimationBreakdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.per_uid_breakdown_.InternalSwap(&other->_impl_.per_uid_breakdown_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidEnergyEstimationBreakdown, _impl_.energy_consumer_id_)
      + sizeof(AndroidEnergyEstimationBreakdown::_impl_.energy_consumer_id_)
      - PROTOBUF_FIELD_OFFSET(AndroidEnergyEstimationBreakdown, _impl_.energy_consumer_descriptor_)>(
          reinterpret_cast<char*>(&_impl_.energy_consumer_descriptor_),
          reinterpret_cast<char*>(&other->_impl_.energy_consumer_descriptor_));
}

std::string AndroidEnergyEstimationBreakdown::GetTypeName() const {
  return "perfetto.protos.AndroidEnergyEstimationBreakdown";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidEnergyEstimationBreakdown_EnergyUidBreakdown*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidEnergyEstimationBreakdown_EnergyUidBreakdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidEnergyEstimationBreakdown_EnergyUidBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidEnergyEstimationBreakdown*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidEnergyEstimationBreakdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidEnergyEstimationBreakdown >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
