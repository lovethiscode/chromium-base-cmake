// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_ANDROID_ENTITY_STATE_RESIDENCY_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_ANDROID_ENTITY_STATE_RESIDENCY_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class EntityStateResidency;
class EntityStateResidency_StateResidency;
class EntityStateResidency_PowerEntityState;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT EntityStateResidency : public ::protozero::CppMessageObj {
 public:
  using PowerEntityState = EntityStateResidency_PowerEntityState;
  using StateResidency = EntityStateResidency_StateResidency;
  enum FieldNumbers {
    kPowerEntityStateFieldNumber = 1,
    kResidencyFieldNumber = 2,
  };

  EntityStateResidency();
  ~EntityStateResidency() override;
  EntityStateResidency(EntityStateResidency&&) noexcept;
  EntityStateResidency& operator=(EntityStateResidency&&);
  EntityStateResidency(const EntityStateResidency&);
  EntityStateResidency& operator=(const EntityStateResidency&);
  bool operator==(const EntityStateResidency&) const;
  bool operator!=(const EntityStateResidency& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<EntityStateResidency_PowerEntityState>& power_entity_state() const { return power_entity_state_; }
  std::vector<EntityStateResidency_PowerEntityState>* mutable_power_entity_state() { return &power_entity_state_; }
  int power_entity_state_size() const;
  void clear_power_entity_state();
  EntityStateResidency_PowerEntityState* add_power_entity_state();

  const std::vector<EntityStateResidency_StateResidency>& residency() const { return residency_; }
  std::vector<EntityStateResidency_StateResidency>* mutable_residency() { return &residency_; }
  int residency_size() const;
  void clear_residency();
  EntityStateResidency_StateResidency* add_residency();

 private:
  std::vector<EntityStateResidency_PowerEntityState> power_entity_state_;
  std::vector<EntityStateResidency_StateResidency> residency_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT EntityStateResidency_StateResidency : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEntityIndexFieldNumber = 1,
    kStateIndexFieldNumber = 2,
    kTotalTimeInStateMsFieldNumber = 3,
    kTotalStateEntryCountFieldNumber = 4,
    kLastEntryTimestampMsFieldNumber = 5,
  };

  EntityStateResidency_StateResidency();
  ~EntityStateResidency_StateResidency() override;
  EntityStateResidency_StateResidency(EntityStateResidency_StateResidency&&) noexcept;
  EntityStateResidency_StateResidency& operator=(EntityStateResidency_StateResidency&&);
  EntityStateResidency_StateResidency(const EntityStateResidency_StateResidency&);
  EntityStateResidency_StateResidency& operator=(const EntityStateResidency_StateResidency&);
  bool operator==(const EntityStateResidency_StateResidency&) const;
  bool operator!=(const EntityStateResidency_StateResidency& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_entity_index() const { return _has_field_[1]; }
  int32_t entity_index() const { return entity_index_; }
  void set_entity_index(int32_t value) { entity_index_ = value; _has_field_.set(1); }

  bool has_state_index() const { return _has_field_[2]; }
  int32_t state_index() const { return state_index_; }
  void set_state_index(int32_t value) { state_index_ = value; _has_field_.set(2); }

  bool has_total_time_in_state_ms() const { return _has_field_[3]; }
  uint64_t total_time_in_state_ms() const { return total_time_in_state_ms_; }
  void set_total_time_in_state_ms(uint64_t value) { total_time_in_state_ms_ = value; _has_field_.set(3); }

  bool has_total_state_entry_count() const { return _has_field_[4]; }
  uint64_t total_state_entry_count() const { return total_state_entry_count_; }
  void set_total_state_entry_count(uint64_t value) { total_state_entry_count_ = value; _has_field_.set(4); }

  bool has_last_entry_timestamp_ms() const { return _has_field_[5]; }
  uint64_t last_entry_timestamp_ms() const { return last_entry_timestamp_ms_; }
  void set_last_entry_timestamp_ms(uint64_t value) { last_entry_timestamp_ms_ = value; _has_field_.set(5); }

 private:
  int32_t entity_index_{};
  int32_t state_index_{};
  uint64_t total_time_in_state_ms_{};
  uint64_t total_state_entry_count_{};
  uint64_t last_entry_timestamp_ms_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT EntityStateResidency_PowerEntityState : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEntityIndexFieldNumber = 1,
    kStateIndexFieldNumber = 2,
    kEntityNameFieldNumber = 3,
    kStateNameFieldNumber = 4,
  };

  EntityStateResidency_PowerEntityState();
  ~EntityStateResidency_PowerEntityState() override;
  EntityStateResidency_PowerEntityState(EntityStateResidency_PowerEntityState&&) noexcept;
  EntityStateResidency_PowerEntityState& operator=(EntityStateResidency_PowerEntityState&&);
  EntityStateResidency_PowerEntityState(const EntityStateResidency_PowerEntityState&);
  EntityStateResidency_PowerEntityState& operator=(const EntityStateResidency_PowerEntityState&);
  bool operator==(const EntityStateResidency_PowerEntityState&) const;
  bool operator!=(const EntityStateResidency_PowerEntityState& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_entity_index() const { return _has_field_[1]; }
  int32_t entity_index() const { return entity_index_; }
  void set_entity_index(int32_t value) { entity_index_ = value; _has_field_.set(1); }

  bool has_state_index() const { return _has_field_[2]; }
  int32_t state_index() const { return state_index_; }
  void set_state_index(int32_t value) { state_index_ = value; _has_field_.set(2); }

  bool has_entity_name() const { return _has_field_[3]; }
  const std::string& entity_name() const { return entity_name_; }
  void set_entity_name(const std::string& value) { entity_name_ = value; _has_field_.set(3); }

  bool has_state_name() const { return _has_field_[4]; }
  const std::string& state_name() const { return state_name_; }
  void set_state_name(const std::string& value) { state_name_ = value; _has_field_.set(4); }

 private:
  int32_t entity_index_{};
  int32_t state_index_{};
  std::string entity_name_{};
  std::string state_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_ANDROID_ENTITY_STATE_RESIDENCY_PROTO_CPP_H_
