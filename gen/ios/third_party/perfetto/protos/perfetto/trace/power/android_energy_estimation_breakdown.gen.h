// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_ANDROID_ENERGY_ESTIMATION_BREAKDOWN_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_ANDROID_ENERGY_ESTIMATION_BREAKDOWN_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class AndroidEnergyEstimationBreakdown;
class AndroidEnergyEstimationBreakdown_EnergyUidBreakdown;
class AndroidEnergyConsumerDescriptor;
class AndroidEnergyConsumer;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT AndroidEnergyEstimationBreakdown : public ::protozero::CppMessageObj {
 public:
  using EnergyUidBreakdown = AndroidEnergyEstimationBreakdown_EnergyUidBreakdown;
  enum FieldNumbers {
    kEnergyConsumerDescriptorFieldNumber = 1,
    kEnergyConsumerIdFieldNumber = 2,
    kEnergyUwsFieldNumber = 3,
    kPerUidBreakdownFieldNumber = 4,
  };

  AndroidEnergyEstimationBreakdown();
  ~AndroidEnergyEstimationBreakdown() override;
  AndroidEnergyEstimationBreakdown(AndroidEnergyEstimationBreakdown&&) noexcept;
  AndroidEnergyEstimationBreakdown& operator=(AndroidEnergyEstimationBreakdown&&);
  AndroidEnergyEstimationBreakdown(const AndroidEnergyEstimationBreakdown&);
  AndroidEnergyEstimationBreakdown& operator=(const AndroidEnergyEstimationBreakdown&);
  bool operator==(const AndroidEnergyEstimationBreakdown&) const;
  bool operator!=(const AndroidEnergyEstimationBreakdown& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_energy_consumer_descriptor() const { return _has_field_[1]; }
  const AndroidEnergyConsumerDescriptor& energy_consumer_descriptor() const { return *energy_consumer_descriptor_; }
  AndroidEnergyConsumerDescriptor* mutable_energy_consumer_descriptor() { _has_field_.set(1); return energy_consumer_descriptor_.get(); }

  bool has_energy_consumer_id() const { return _has_field_[2]; }
  int32_t energy_consumer_id() const { return energy_consumer_id_; }
  void set_energy_consumer_id(int32_t value) { energy_consumer_id_ = value; _has_field_.set(2); }

  bool has_energy_uws() const { return _has_field_[3]; }
  int64_t energy_uws() const { return energy_uws_; }
  void set_energy_uws(int64_t value) { energy_uws_ = value; _has_field_.set(3); }

  const std::vector<AndroidEnergyEstimationBreakdown_EnergyUidBreakdown>& per_uid_breakdown() const { return per_uid_breakdown_; }
  std::vector<AndroidEnergyEstimationBreakdown_EnergyUidBreakdown>* mutable_per_uid_breakdown() { return &per_uid_breakdown_; }
  int per_uid_breakdown_size() const;
  void clear_per_uid_breakdown();
  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown* add_per_uid_breakdown();

 private:
  ::protozero::CopyablePtr<AndroidEnergyConsumerDescriptor> energy_consumer_descriptor_;
  int32_t energy_consumer_id_{};
  int64_t energy_uws_{};
  std::vector<AndroidEnergyEstimationBreakdown_EnergyUidBreakdown> per_uid_breakdown_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidEnergyEstimationBreakdown_EnergyUidBreakdown : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kUidFieldNumber = 1,
    kEnergyUwsFieldNumber = 2,
  };

  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown();
  ~AndroidEnergyEstimationBreakdown_EnergyUidBreakdown() override;
  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown(AndroidEnergyEstimationBreakdown_EnergyUidBreakdown&&) noexcept;
  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown& operator=(AndroidEnergyEstimationBreakdown_EnergyUidBreakdown&&);
  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown(const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown&);
  AndroidEnergyEstimationBreakdown_EnergyUidBreakdown& operator=(const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown&);
  bool operator==(const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown&) const;
  bool operator!=(const AndroidEnergyEstimationBreakdown_EnergyUidBreakdown& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_uid() const { return _has_field_[1]; }
  int32_t uid() const { return uid_; }
  void set_uid(int32_t value) { uid_ = value; _has_field_.set(1); }

  bool has_energy_uws() const { return _has_field_[2]; }
  int64_t energy_uws() const { return energy_uws_; }
  void set_energy_uws(int64_t value) { energy_uws_ = value; _has_field_.set(2); }

 private:
  int32_t uid_{};
  int64_t energy_uws_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_POWER_ANDROID_ENERGY_ESTIMATION_BREAKDOWN_PROTO_CPP_H_
