// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/test_extensions.proto

#include "protos/perfetto/trace/test_extensions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TestExtension::TestExtension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct TestExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtensionDefaultTypeInternal() {}
  union {
    TestExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtensionDefaultTypeInternal _TestExtension_default_instance_;
PROTOBUF_CONSTEXPR TestExtensionChild::TestExtensionChild(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.debug_annotations_)*/{}
  , /*decltype(_impl_.child_field_for_testing_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TestExtensionChildDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtensionChildDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtensionChildDefaultTypeInternal() {}
  union {
    TestExtensionChild _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtensionChildDefaultTypeInternal _TestExtensionChild_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class TestExtension::_Internal {
 public:
};

TestExtension::TestExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TestExtension)
}
TestExtension::TestExtension(const TestExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TestExtension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestExtension)
}

inline void TestExtension::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

TestExtension::~TestExtension() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestExtension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* TestExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TestExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TestExtension)
  return target;
}

size_t TestExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtension::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestExtension*>(
      &from));
}

void TestExtension::MergeFrom(const TestExtension& from) {
  TestExtension* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestExtension)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestExtension::CopyFrom(const TestExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtension::IsInitialized() const {
  return true;
}

void TestExtension::InternalSwap(TestExtension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string TestExtension::GetTypeName() const {
  return "perfetto.protos.TestExtension";
}


// ===================================================================

class TestExtensionChild::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionChild>()._impl_._has_bits_);
  static void set_has_child_field_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void TestExtensionChild::clear_debug_annotations() {
  _impl_.debug_annotations_.Clear();
}
TestExtensionChild::TestExtensionChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TestExtensionChild)
}
TestExtensionChild::TestExtensionChild(const TestExtensionChild& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TestExtensionChild* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_annotations_){from._impl_.debug_annotations_}
    , decltype(_impl_.child_field_for_testing_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.child_field_for_testing_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_field_for_testing_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_child_field_for_testing()) {
    _this->_impl_.child_field_for_testing_.Set(from._internal_child_field_for_testing(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestExtensionChild)
}

inline void TestExtensionChild::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_annotations_){arena}
    , decltype(_impl_.child_field_for_testing_){}
  };
  _impl_.child_field_for_testing_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.child_field_for_testing_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestExtensionChild::~TestExtensionChild() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestExtensionChild)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtensionChild::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debug_annotations_.~RepeatedPtrField();
  _impl_.child_field_for_testing_.Destroy();
}

void TestExtensionChild::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestExtensionChild::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestExtensionChild)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debug_annotations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.child_field_for_testing_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestExtensionChild::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string child_field_for_testing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_child_field_for_testing();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DebugAnnotation debug_annotations = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_debug_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<794>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtensionChild::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TestExtensionChild)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string child_field_for_testing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_child_field_for_testing(), target);
  }

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 99;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(99, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TestExtensionChild)
  return target;
}

size_t TestExtensionChild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestExtensionChild)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 99;
  total_size += 2UL * this->_internal_debug_annotations_size();
  for (const auto& msg : this->_impl_.debug_annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string child_field_for_testing = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_child_field_for_testing());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtensionChild::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestExtensionChild*>(
      &from));
}

void TestExtensionChild::MergeFrom(const TestExtensionChild& from) {
  TestExtensionChild* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestExtensionChild)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.debug_annotations_.MergeFrom(from._impl_.debug_annotations_);
  if (from._internal_has_child_field_for_testing()) {
    _this->_internal_set_child_field_for_testing(from._internal_child_field_for_testing());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestExtensionChild::CopyFrom(const TestExtensionChild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestExtensionChild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionChild::IsInitialized() const {
  return true;
}

void TestExtensionChild::InternalSwap(TestExtensionChild* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.debug_annotations_.InternalSwap(&other->_impl_.debug_annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.child_field_for_testing_, lhs_arena,
      &other->_impl_.child_field_for_testing_, rhs_arena
  );
}

std::string TestExtensionChild::GetTypeName() const {
  return "perfetto.protos.TestExtensionChild";
}

const std::string TestExtension_string_extension_for_testing_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtension::kStringExtensionForTestingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  TestExtension::string_extension_for_testing(kStringExtensionForTestingFieldNumber, TestExtension_string_extension_for_testing_default, nullptr);
const std::string TestExtension_string_extension_for_testing2_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtension::kStringExtensionForTesting2FieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  TestExtension::string_extension_for_testing2(kStringExtensionForTesting2FieldNumber, TestExtension_string_extension_for_testing2_default, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtension::kIntExtensionForTestingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, false>
  TestExtension::int_extension_for_testing(kIntExtensionForTestingFieldNumber, 0, nullptr);
const std::string TestExtension_omitted_extension_for_testing_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtension::kOmittedExtensionForTestingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  TestExtension::omitted_extension_for_testing(kOmittedExtensionForTestingFieldNumber, TestExtension_omitted_extension_for_testing_default, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtension::kNestedMessageExtensionForTestingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::perfetto::protos::TestExtensionChild >, 11, false>
  TestExtension::nested_message_extension_for_testing(kNestedMessageExtensionForTestingFieldNumber, ::perfetto::protos::TestExtensionChild::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtension::kUintExtensionForTestingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  TestExtension::uint_extension_for_testing(kUintExtensionForTestingFieldNumber, 0u, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestExtension*
Arena::CreateMaybeMessage< ::perfetto::protos::TestExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TestExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestExtensionChild*
Arena::CreateMaybeMessage< ::perfetto::protos::TestExtensionChild >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TestExtensionChild >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
