#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/surfaceflinger_transactions.gen.h"
#include "protos/perfetto/trace/android/graphics/rect.gen.h"
#include "protos/perfetto/trace/android/surfaceflinger_common.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

DisplayState::DisplayState() = default;
DisplayState::~DisplayState() = default;
DisplayState::DisplayState(const DisplayState&) = default;
DisplayState& DisplayState::operator=(const DisplayState&) = default;
DisplayState::DisplayState(DisplayState&&) noexcept = default;
DisplayState& DisplayState::operator=(DisplayState&&) = default;

bool DisplayState::operator==(const DisplayState& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(what_, other.what_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_, other.layer_stack_)
   && ::protozero::internal::gen_helpers::EqualsField(orientation_, other.orientation_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_space_rect_, other.layer_stack_space_rect_)
   && ::protozero::internal::gen_helpers::EqualsField(oriented_display_space_rect_, other.oriented_display_space_rect_)
   && ::protozero::internal::gen_helpers::EqualsField(width_, other.width_)
   && ::protozero::internal::gen_helpers::EqualsField(height_, other.height_);
}

bool DisplayState::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* what */:
        field.get(&what_);
        break;
      case 3 /* flags */:
        field.get(&flags_);
        break;
      case 4 /* layer_stack */:
        field.get(&layer_stack_);
        break;
      case 5 /* orientation */:
        field.get(&orientation_);
        break;
      case 6 /* layer_stack_space_rect */:
        (*layer_stack_space_rect_).ParseFromArray(field.data(), field.size());
        break;
      case 7 /* oriented_display_space_rect */:
        (*oriented_display_space_rect_).ParseFromArray(field.data(), field.size());
        break;
      case 8 /* width */:
        field.get(&width_);
        break;
      case 9 /* height */:
        field.get(&height_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DisplayState::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DisplayState::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DisplayState::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: what
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, what_, msg);
  }

  // Field 3: flags
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, flags_, msg);
  }

  // Field 4: layer_stack
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, layer_stack_, msg);
  }

  // Field 5: orientation
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, orientation_, msg);
  }

  // Field 6: layer_stack_space_rect
  if (_has_field_[6]) {
    (*layer_stack_space_rect_).Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 7: oriented_display_space_rect
  if (_has_field_[7]) {
    (*oriented_display_space_rect_).Serialize(msg->BeginNestedMessage<::protozero::Message>(7));
  }

  // Field 8: width
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, width_, msg);
  }

  // Field 9: height
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, height_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerState::LayerState() = default;
LayerState::~LayerState() = default;
LayerState::LayerState(const LayerState&) = default;
LayerState& LayerState::operator=(const LayerState&) = default;
LayerState::LayerState(LayerState&&) noexcept = default;
LayerState& LayerState::operator=(LayerState&&) = default;

bool LayerState::operator==(const LayerState& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_id_, other.layer_id_)
   && ::protozero::internal::gen_helpers::EqualsField(what_, other.what_)
   && ::protozero::internal::gen_helpers::EqualsField(x_, other.x_)
   && ::protozero::internal::gen_helpers::EqualsField(y_, other.y_)
   && ::protozero::internal::gen_helpers::EqualsField(z_, other.z_)
   && ::protozero::internal::gen_helpers::EqualsField(w_, other.w_)
   && ::protozero::internal::gen_helpers::EqualsField(h_, other.h_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_, other.layer_stack_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(mask_, other.mask_)
   && ::protozero::internal::gen_helpers::EqualsField(matrix_, other.matrix_)
   && ::protozero::internal::gen_helpers::EqualsField(corner_radius_, other.corner_radius_)
   && ::protozero::internal::gen_helpers::EqualsField(background_blur_radius_, other.background_blur_radius_)
   && ::protozero::internal::gen_helpers::EqualsField(parent_id_, other.parent_id_)
   && ::protozero::internal::gen_helpers::EqualsField(relative_parent_id_, other.relative_parent_id_)
   && ::protozero::internal::gen_helpers::EqualsField(alpha_, other.alpha_)
   && ::protozero::internal::gen_helpers::EqualsField(color_, other.color_)
   && ::protozero::internal::gen_helpers::EqualsField(transparent_region_, other.transparent_region_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_, other.transform_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_to_display_inverse_, other.transform_to_display_inverse_)
   && ::protozero::internal::gen_helpers::EqualsField(crop_, other.crop_)
   && ::protozero::internal::gen_helpers::EqualsField(buffer_data_, other.buffer_data_)
   && ::protozero::internal::gen_helpers::EqualsField(api_, other.api_)
   && ::protozero::internal::gen_helpers::EqualsField(has_sideband_stream_, other.has_sideband_stream_)
   && ::protozero::internal::gen_helpers::EqualsField(color_transform_, other.color_transform_)
   && ::protozero::internal::gen_helpers::EqualsField(blur_regions_, other.blur_regions_)
   && ::protozero::internal::gen_helpers::EqualsField(window_info_handle_, other.window_info_handle_)
   && ::protozero::internal::gen_helpers::EqualsField(bg_color_alpha_, other.bg_color_alpha_)
   && ::protozero::internal::gen_helpers::EqualsField(bg_color_dataspace_, other.bg_color_dataspace_)
   && ::protozero::internal::gen_helpers::EqualsField(color_space_agnostic_, other.color_space_agnostic_)
   && ::protozero::internal::gen_helpers::EqualsField(shadow_radius_, other.shadow_radius_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_rate_selection_priority_, other.frame_rate_selection_priority_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_rate_, other.frame_rate_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_rate_compatibility_, other.frame_rate_compatibility_)
   && ::protozero::internal::gen_helpers::EqualsField(change_frame_rate_strategy_, other.change_frame_rate_strategy_)
   && ::protozero::internal::gen_helpers::EqualsField(fixed_transform_hint_, other.fixed_transform_hint_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_number_, other.frame_number_)
   && ::protozero::internal::gen_helpers::EqualsField(auto_refresh_, other.auto_refresh_)
   && ::protozero::internal::gen_helpers::EqualsField(is_trusted_overlay_, other.is_trusted_overlay_)
   && ::protozero::internal::gen_helpers::EqualsField(buffer_crop_, other.buffer_crop_)
   && ::protozero::internal::gen_helpers::EqualsField(destination_frame_, other.destination_frame_)
   && ::protozero::internal::gen_helpers::EqualsField(drop_input_mode_, other.drop_input_mode_)
   && ::protozero::internal::gen_helpers::EqualsField(trusted_overlay_, other.trusted_overlay_);
}

int LayerState::blur_regions_size() const { return static_cast<int>(blur_regions_.size()); }
void LayerState::clear_blur_regions() { blur_regions_.clear(); }
BlurRegion* LayerState::add_blur_regions() { blur_regions_.emplace_back(); return &blur_regions_.back(); }
bool LayerState::ParseFromArray(const void* raw, size_t size) {
  blur_regions_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* layer_id */:
        field.get(&layer_id_);
        break;
      case 2 /* what */:
        field.get(&what_);
        break;
      case 3 /* x */:
        field.get(&x_);
        break;
      case 4 /* y */:
        field.get(&y_);
        break;
      case 5 /* z */:
        field.get(&z_);
        break;
      case 6 /* w */:
        field.get(&w_);
        break;
      case 7 /* h */:
        field.get(&h_);
        break;
      case 8 /* layer_stack */:
        field.get(&layer_stack_);
        break;
      case 9 /* flags */:
        field.get(&flags_);
        break;
      case 10 /* mask */:
        field.get(&mask_);
        break;
      case 11 /* matrix */:
        (*matrix_).ParseFromArray(field.data(), field.size());
        break;
      case 12 /* corner_radius */:
        field.get(&corner_radius_);
        break;
      case 13 /* background_blur_radius */:
        field.get(&background_blur_radius_);
        break;
      case 14 /* parent_id */:
        field.get(&parent_id_);
        break;
      case 15 /* relative_parent_id */:
        field.get(&relative_parent_id_);
        break;
      case 16 /* alpha */:
        field.get(&alpha_);
        break;
      case 17 /* color */:
        (*color_).ParseFromArray(field.data(), field.size());
        break;
      case 18 /* transparent_region */:
        (*transparent_region_).ParseFromArray(field.data(), field.size());
        break;
      case 19 /* transform */:
        field.get(&transform_);
        break;
      case 20 /* transform_to_display_inverse */:
        field.get(&transform_to_display_inverse_);
        break;
      case 21 /* crop */:
        (*crop_).ParseFromArray(field.data(), field.size());
        break;
      case 22 /* buffer_data */:
        (*buffer_data_).ParseFromArray(field.data(), field.size());
        break;
      case 23 /* api */:
        field.get(&api_);
        break;
      case 24 /* has_sideband_stream */:
        field.get(&has_sideband_stream_);
        break;
      case 25 /* color_transform */:
        (*color_transform_).ParseFromArray(field.data(), field.size());
        break;
      case 26 /* blur_regions */:
        blur_regions_.emplace_back();
        blur_regions_.back().ParseFromArray(field.data(), field.size());
        break;
      case 27 /* window_info_handle */:
        (*window_info_handle_).ParseFromArray(field.data(), field.size());
        break;
      case 28 /* bg_color_alpha */:
        field.get(&bg_color_alpha_);
        break;
      case 29 /* bg_color_dataspace */:
        field.get(&bg_color_dataspace_);
        break;
      case 30 /* color_space_agnostic */:
        field.get(&color_space_agnostic_);
        break;
      case 31 /* shadow_radius */:
        field.get(&shadow_radius_);
        break;
      case 32 /* frame_rate_selection_priority */:
        field.get(&frame_rate_selection_priority_);
        break;
      case 33 /* frame_rate */:
        field.get(&frame_rate_);
        break;
      case 34 /* frame_rate_compatibility */:
        field.get(&frame_rate_compatibility_);
        break;
      case 35 /* change_frame_rate_strategy */:
        field.get(&change_frame_rate_strategy_);
        break;
      case 36 /* fixed_transform_hint */:
        field.get(&fixed_transform_hint_);
        break;
      case 37 /* frame_number */:
        field.get(&frame_number_);
        break;
      case 38 /* auto_refresh */:
        field.get(&auto_refresh_);
        break;
      case 39 /* is_trusted_overlay */:
        field.get(&is_trusted_overlay_);
        break;
      case 40 /* buffer_crop */:
        (*buffer_crop_).ParseFromArray(field.data(), field.size());
        break;
      case 41 /* destination_frame */:
        (*destination_frame_).ParseFromArray(field.data(), field.size());
        break;
      case 42 /* drop_input_mode */:
        field.get(&drop_input_mode_);
        break;
      case 43 /* trusted_overlay */:
        field.get(&trusted_overlay_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerState::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerState::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerState::Serialize(::protozero::Message* msg) const {
  // Field 1: layer_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, layer_id_, msg);
  }

  // Field 2: what
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, what_, msg);
  }

  // Field 3: x
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, x_, msg);
  }

  // Field 4: y
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeFixed(4, y_, msg);
  }

  // Field 5: z
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, z_, msg);
  }

  // Field 6: w
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, w_, msg);
  }

  // Field 7: h
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, h_, msg);
  }

  // Field 8: layer_stack
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, layer_stack_, msg);
  }

  // Field 9: flags
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, flags_, msg);
  }

  // Field 10: mask
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, mask_, msg);
  }

  // Field 11: matrix
  if (_has_field_[11]) {
    (*matrix_).Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 12: corner_radius
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeFixed(12, corner_radius_, msg);
  }

  // Field 13: background_blur_radius
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, background_blur_radius_, msg);
  }

  // Field 14: parent_id
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, parent_id_, msg);
  }

  // Field 15: relative_parent_id
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, relative_parent_id_, msg);
  }

  // Field 16: alpha
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeFixed(16, alpha_, msg);
  }

  // Field 17: color
  if (_has_field_[17]) {
    (*color_).Serialize(msg->BeginNestedMessage<::protozero::Message>(17));
  }

  // Field 18: transparent_region
  if (_has_field_[18]) {
    (*transparent_region_).Serialize(msg->BeginNestedMessage<::protozero::Message>(18));
  }

  // Field 19: transform
  if (_has_field_[19]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(19, transform_, msg);
  }

  // Field 20: transform_to_display_inverse
  if (_has_field_[20]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(20, transform_to_display_inverse_, msg);
  }

  // Field 21: crop
  if (_has_field_[21]) {
    (*crop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(21));
  }

  // Field 22: buffer_data
  if (_has_field_[22]) {
    (*buffer_data_).Serialize(msg->BeginNestedMessage<::protozero::Message>(22));
  }

  // Field 23: api
  if (_has_field_[23]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(23, api_, msg);
  }

  // Field 24: has_sideband_stream
  if (_has_field_[24]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(24, has_sideband_stream_, msg);
  }

  // Field 25: color_transform
  if (_has_field_[25]) {
    (*color_transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(25));
  }

  // Field 26: blur_regions
  for (auto& it : blur_regions_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(26));
  }

  // Field 27: window_info_handle
  if (_has_field_[27]) {
    (*window_info_handle_).Serialize(msg->BeginNestedMessage<::protozero::Message>(27));
  }

  // Field 28: bg_color_alpha
  if (_has_field_[28]) {
    ::protozero::internal::gen_helpers::SerializeFixed(28, bg_color_alpha_, msg);
  }

  // Field 29: bg_color_dataspace
  if (_has_field_[29]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(29, bg_color_dataspace_, msg);
  }

  // Field 30: color_space_agnostic
  if (_has_field_[30]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(30, color_space_agnostic_, msg);
  }

  // Field 31: shadow_radius
  if (_has_field_[31]) {
    ::protozero::internal::gen_helpers::SerializeFixed(31, shadow_radius_, msg);
  }

  // Field 32: frame_rate_selection_priority
  if (_has_field_[32]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(32, frame_rate_selection_priority_, msg);
  }

  // Field 33: frame_rate
  if (_has_field_[33]) {
    ::protozero::internal::gen_helpers::SerializeFixed(33, frame_rate_, msg);
  }

  // Field 34: frame_rate_compatibility
  if (_has_field_[34]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(34, frame_rate_compatibility_, msg);
  }

  // Field 35: change_frame_rate_strategy
  if (_has_field_[35]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(35, change_frame_rate_strategy_, msg);
  }

  // Field 36: fixed_transform_hint
  if (_has_field_[36]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(36, fixed_transform_hint_, msg);
  }

  // Field 37: frame_number
  if (_has_field_[37]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(37, frame_number_, msg);
  }

  // Field 38: auto_refresh
  if (_has_field_[38]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(38, auto_refresh_, msg);
  }

  // Field 39: is_trusted_overlay
  if (_has_field_[39]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(39, is_trusted_overlay_, msg);
  }

  // Field 40: buffer_crop
  if (_has_field_[40]) {
    (*buffer_crop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(40));
  }

  // Field 41: destination_frame
  if (_has_field_[41]) {
    (*destination_frame_).Serialize(msg->BeginNestedMessage<::protozero::Message>(41));
  }

  // Field 42: drop_input_mode
  if (_has_field_[42]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(42, drop_input_mode_, msg);
  }

  // Field 43: trusted_overlay
  if (_has_field_[43]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(43, trusted_overlay_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerState_WindowInfo::LayerState_WindowInfo() = default;
LayerState_WindowInfo::~LayerState_WindowInfo() = default;
LayerState_WindowInfo::LayerState_WindowInfo(const LayerState_WindowInfo&) = default;
LayerState_WindowInfo& LayerState_WindowInfo::operator=(const LayerState_WindowInfo&) = default;
LayerState_WindowInfo::LayerState_WindowInfo(LayerState_WindowInfo&&) noexcept = default;
LayerState_WindowInfo& LayerState_WindowInfo::operator=(LayerState_WindowInfo&&) = default;

bool LayerState_WindowInfo::operator==(const LayerState_WindowInfo& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(layout_params_flags_, other.layout_params_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(layout_params_type_, other.layout_params_type_)
   && ::protozero::internal::gen_helpers::EqualsField(touchable_region_, other.touchable_region_)
   && ::protozero::internal::gen_helpers::EqualsField(surface_inset_, other.surface_inset_)
   && ::protozero::internal::gen_helpers::EqualsField(focusable_, other.focusable_)
   && ::protozero::internal::gen_helpers::EqualsField(has_wallpaper_, other.has_wallpaper_)
   && ::protozero::internal::gen_helpers::EqualsField(global_scale_factor_, other.global_scale_factor_)
   && ::protozero::internal::gen_helpers::EqualsField(crop_layer_id_, other.crop_layer_id_)
   && ::protozero::internal::gen_helpers::EqualsField(replace_touchable_region_with_crop_, other.replace_touchable_region_with_crop_)
   && ::protozero::internal::gen_helpers::EqualsField(touchable_region_crop_, other.touchable_region_crop_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_, other.transform_)
   && ::protozero::internal::gen_helpers::EqualsField(input_config_, other.input_config_);
}

bool LayerState_WindowInfo::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* layout_params_flags */:
        field.get(&layout_params_flags_);
        break;
      case 2 /* layout_params_type */:
        field.get(&layout_params_type_);
        break;
      case 3 /* touchable_region */:
        (*touchable_region_).ParseFromArray(field.data(), field.size());
        break;
      case 4 /* surface_inset */:
        field.get(&surface_inset_);
        break;
      case 5 /* focusable */:
        field.get(&focusable_);
        break;
      case 6 /* has_wallpaper */:
        field.get(&has_wallpaper_);
        break;
      case 7 /* global_scale_factor */:
        field.get(&global_scale_factor_);
        break;
      case 8 /* crop_layer_id */:
        field.get(&crop_layer_id_);
        break;
      case 9 /* replace_touchable_region_with_crop */:
        field.get(&replace_touchable_region_with_crop_);
        break;
      case 10 /* touchable_region_crop */:
        (*touchable_region_crop_).ParseFromArray(field.data(), field.size());
        break;
      case 11 /* transform */:
        (*transform_).ParseFromArray(field.data(), field.size());
        break;
      case 12 /* input_config */:
        field.get(&input_config_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerState_WindowInfo::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerState_WindowInfo::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerState_WindowInfo::Serialize(::protozero::Message* msg) const {
  // Field 1: layout_params_flags
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, layout_params_flags_, msg);
  }

  // Field 2: layout_params_type
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, layout_params_type_, msg);
  }

  // Field 3: touchable_region
  if (_has_field_[3]) {
    (*touchable_region_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: surface_inset
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, surface_inset_, msg);
  }

  // Field 5: focusable
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(5, focusable_, msg);
  }

  // Field 6: has_wallpaper
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(6, has_wallpaper_, msg);
  }

  // Field 7: global_scale_factor
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeFixed(7, global_scale_factor_, msg);
  }

  // Field 8: crop_layer_id
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, crop_layer_id_, msg);
  }

  // Field 9: replace_touchable_region_with_crop
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(9, replace_touchable_region_with_crop_, msg);
  }

  // Field 10: touchable_region_crop
  if (_has_field_[10]) {
    (*touchable_region_crop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(10));
  }

  // Field 11: transform
  if (_has_field_[11]) {
    (*transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 12: input_config
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, input_config_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


Transform::Transform() = default;
Transform::~Transform() = default;
Transform::Transform(const Transform&) = default;
Transform& Transform::operator=(const Transform&) = default;
Transform::Transform(Transform&&) noexcept = default;
Transform& Transform::operator=(Transform&&) = default;

bool Transform::operator==(const Transform& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dsdx_, other.dsdx_)
   && ::protozero::internal::gen_helpers::EqualsField(dtdx_, other.dtdx_)
   && ::protozero::internal::gen_helpers::EqualsField(dtdy_, other.dtdy_)
   && ::protozero::internal::gen_helpers::EqualsField(dsdy_, other.dsdy_)
   && ::protozero::internal::gen_helpers::EqualsField(tx_, other.tx_)
   && ::protozero::internal::gen_helpers::EqualsField(ty_, other.ty_);
}

bool Transform::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dsdx */:
        field.get(&dsdx_);
        break;
      case 2 /* dtdx */:
        field.get(&dtdx_);
        break;
      case 3 /* dtdy */:
        field.get(&dtdy_);
        break;
      case 4 /* dsdy */:
        field.get(&dsdy_);
        break;
      case 5 /* tx */:
        field.get(&tx_);
        break;
      case 6 /* ty */:
        field.get(&ty_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string Transform::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> Transform::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void Transform::Serialize(::protozero::Message* msg) const {
  // Field 1: dsdx
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, dsdx_, msg);
  }

  // Field 2: dtdx
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, dtdx_, msg);
  }

  // Field 3: dtdy
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, dtdy_, msg);
  }

  // Field 4: dsdy
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeFixed(4, dsdy_, msg);
  }

  // Field 5: tx
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeFixed(5, tx_, msg);
  }

  // Field 6: ty
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeFixed(6, ty_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerState_BufferData::LayerState_BufferData() = default;
LayerState_BufferData::~LayerState_BufferData() = default;
LayerState_BufferData::LayerState_BufferData(const LayerState_BufferData&) = default;
LayerState_BufferData& LayerState_BufferData::operator=(const LayerState_BufferData&) = default;
LayerState_BufferData::LayerState_BufferData(LayerState_BufferData&&) noexcept = default;
LayerState_BufferData& LayerState_BufferData::operator=(LayerState_BufferData&&) = default;

bool LayerState_BufferData::operator==(const LayerState_BufferData& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(buffer_id_, other.buffer_id_)
   && ::protozero::internal::gen_helpers::EqualsField(width_, other.width_)
   && ::protozero::internal::gen_helpers::EqualsField(height_, other.height_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_number_, other.frame_number_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(cached_buffer_id_, other.cached_buffer_id_)
   && ::protozero::internal::gen_helpers::EqualsField(pixel_format_, other.pixel_format_)
   && ::protozero::internal::gen_helpers::EqualsField(usage_, other.usage_);
}

bool LayerState_BufferData::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* buffer_id */:
        field.get(&buffer_id_);
        break;
      case 2 /* width */:
        field.get(&width_);
        break;
      case 3 /* height */:
        field.get(&height_);
        break;
      case 4 /* frame_number */:
        field.get(&frame_number_);
        break;
      case 5 /* flags */:
        field.get(&flags_);
        break;
      case 6 /* cached_buffer_id */:
        field.get(&cached_buffer_id_);
        break;
      case 7 /* pixel_format */:
        field.get(&pixel_format_);
        break;
      case 8 /* usage */:
        field.get(&usage_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerState_BufferData::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerState_BufferData::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerState_BufferData::Serialize(::protozero::Message* msg) const {
  // Field 1: buffer_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, buffer_id_, msg);
  }

  // Field 2: width
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, width_, msg);
  }

  // Field 3: height
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, height_, msg);
  }

  // Field 4: frame_number
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, frame_number_, msg);
  }

  // Field 5: flags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, flags_, msg);
  }

  // Field 6: cached_buffer_id
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, cached_buffer_id_, msg);
  }

  // Field 7: pixel_format
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, pixel_format_, msg);
  }

  // Field 8: usage
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, usage_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerState_Color3::LayerState_Color3() = default;
LayerState_Color3::~LayerState_Color3() = default;
LayerState_Color3::LayerState_Color3(const LayerState_Color3&) = default;
LayerState_Color3& LayerState_Color3::operator=(const LayerState_Color3&) = default;
LayerState_Color3::LayerState_Color3(LayerState_Color3&&) noexcept = default;
LayerState_Color3& LayerState_Color3::operator=(LayerState_Color3&&) = default;

bool LayerState_Color3::operator==(const LayerState_Color3& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(r_, other.r_)
   && ::protozero::internal::gen_helpers::EqualsField(g_, other.g_)
   && ::protozero::internal::gen_helpers::EqualsField(b_, other.b_);
}

bool LayerState_Color3::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* r */:
        field.get(&r_);
        break;
      case 2 /* g */:
        field.get(&g_);
        break;
      case 3 /* b */:
        field.get(&b_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerState_Color3::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerState_Color3::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerState_Color3::Serialize(::protozero::Message* msg) const {
  // Field 1: r
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, r_, msg);
  }

  // Field 2: g
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, g_, msg);
  }

  // Field 3: b
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, b_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerState_Matrix22::LayerState_Matrix22() = default;
LayerState_Matrix22::~LayerState_Matrix22() = default;
LayerState_Matrix22::LayerState_Matrix22(const LayerState_Matrix22&) = default;
LayerState_Matrix22& LayerState_Matrix22::operator=(const LayerState_Matrix22&) = default;
LayerState_Matrix22::LayerState_Matrix22(LayerState_Matrix22&&) noexcept = default;
LayerState_Matrix22& LayerState_Matrix22::operator=(LayerState_Matrix22&&) = default;

bool LayerState_Matrix22::operator==(const LayerState_Matrix22& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dsdx_, other.dsdx_)
   && ::protozero::internal::gen_helpers::EqualsField(dtdx_, other.dtdx_)
   && ::protozero::internal::gen_helpers::EqualsField(dtdy_, other.dtdy_)
   && ::protozero::internal::gen_helpers::EqualsField(dsdy_, other.dsdy_);
}

bool LayerState_Matrix22::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dsdx */:
        field.get(&dsdx_);
        break;
      case 2 /* dtdx */:
        field.get(&dtdx_);
        break;
      case 3 /* dtdy */:
        field.get(&dtdy_);
        break;
      case 4 /* dsdy */:
        field.get(&dsdy_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerState_Matrix22::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerState_Matrix22::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerState_Matrix22::Serialize(::protozero::Message* msg) const {
  // Field 1: dsdx
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, dsdx_, msg);
  }

  // Field 2: dtdx
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, dtdx_, msg);
  }

  // Field 3: dtdy
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, dtdy_, msg);
  }

  // Field 4: dsdy
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeFixed(4, dsdy_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


TransactionState::TransactionState() = default;
TransactionState::~TransactionState() = default;
TransactionState::TransactionState(const TransactionState&) = default;
TransactionState& TransactionState::operator=(const TransactionState&) = default;
TransactionState::TransactionState(TransactionState&&) noexcept = default;
TransactionState& TransactionState::operator=(TransactionState&&) = default;

bool TransactionState::operator==(const TransactionState& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(uid_, other.uid_)
   && ::protozero::internal::gen_helpers::EqualsField(vsync_id_, other.vsync_id_)
   && ::protozero::internal::gen_helpers::EqualsField(input_event_id_, other.input_event_id_)
   && ::protozero::internal::gen_helpers::EqualsField(post_time_, other.post_time_)
   && ::protozero::internal::gen_helpers::EqualsField(transaction_id_, other.transaction_id_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_changes_, other.layer_changes_)
   && ::protozero::internal::gen_helpers::EqualsField(display_changes_, other.display_changes_)
   && ::protozero::internal::gen_helpers::EqualsField(merged_transaction_ids_, other.merged_transaction_ids_);
}

int TransactionState::layer_changes_size() const { return static_cast<int>(layer_changes_.size()); }
void TransactionState::clear_layer_changes() { layer_changes_.clear(); }
LayerState* TransactionState::add_layer_changes() { layer_changes_.emplace_back(); return &layer_changes_.back(); }
int TransactionState::display_changes_size() const { return static_cast<int>(display_changes_.size()); }
void TransactionState::clear_display_changes() { display_changes_.clear(); }
DisplayState* TransactionState::add_display_changes() { display_changes_.emplace_back(); return &display_changes_.back(); }
bool TransactionState::ParseFromArray(const void* raw, size_t size) {
  layer_changes_.clear();
  display_changes_.clear();
  merged_transaction_ids_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* uid */:
        field.get(&uid_);
        break;
      case 3 /* vsync_id */:
        field.get(&vsync_id_);
        break;
      case 4 /* input_event_id */:
        field.get(&input_event_id_);
        break;
      case 5 /* post_time */:
        field.get(&post_time_);
        break;
      case 6 /* transaction_id */:
        field.get(&transaction_id_);
        break;
      case 7 /* layer_changes */:
        layer_changes_.emplace_back();
        layer_changes_.back().ParseFromArray(field.data(), field.size());
        break;
      case 8 /* display_changes */:
        display_changes_.emplace_back();
        display_changes_.back().ParseFromArray(field.data(), field.size());
        break;
      case 9 /* merged_transaction_ids */:
        merged_transaction_ids_.emplace_back();
        field.get(&merged_transaction_ids_.back());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TransactionState::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TransactionState::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TransactionState::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, pid_, msg);
  }

  // Field 2: uid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, uid_, msg);
  }

  // Field 3: vsync_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, vsync_id_, msg);
  }

  // Field 4: input_event_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, input_event_id_, msg);
  }

  // Field 5: post_time
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, post_time_, msg);
  }

  // Field 6: transaction_id
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, transaction_id_, msg);
  }

  // Field 7: layer_changes
  for (auto& it : layer_changes_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(7));
  }

  // Field 8: display_changes
  for (auto& it : display_changes_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(8));
  }

  // Field 9: merged_transaction_ids
  for (auto& it : merged_transaction_ids_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, it, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerCreationArgs::LayerCreationArgs() = default;
LayerCreationArgs::~LayerCreationArgs() = default;
LayerCreationArgs::LayerCreationArgs(const LayerCreationArgs&) = default;
LayerCreationArgs& LayerCreationArgs::operator=(const LayerCreationArgs&) = default;
LayerCreationArgs::LayerCreationArgs(LayerCreationArgs&&) noexcept = default;
LayerCreationArgs& LayerCreationArgs::operator=(LayerCreationArgs&&) = default;

bool LayerCreationArgs::operator==(const LayerCreationArgs& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_id_, other.layer_id_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(parent_id_, other.parent_id_)
   && ::protozero::internal::gen_helpers::EqualsField(mirror_from_id_, other.mirror_from_id_)
   && ::protozero::internal::gen_helpers::EqualsField(add_to_root_, other.add_to_root_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_to_mirror_, other.layer_stack_to_mirror_);
}

bool LayerCreationArgs::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* layer_id */:
        field.get(&layer_id_);
        break;
      case 2 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 3 /* flags */:
        field.get(&flags_);
        break;
      case 4 /* parent_id */:
        field.get(&parent_id_);
        break;
      case 5 /* mirror_from_id */:
        field.get(&mirror_from_id_);
        break;
      case 6 /* add_to_root */:
        field.get(&add_to_root_);
        break;
      case 7 /* layer_stack_to_mirror */:
        field.get(&layer_stack_to_mirror_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerCreationArgs::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerCreationArgs::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerCreationArgs::Serialize(::protozero::Message* msg) const {
  // Field 1: layer_id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, layer_id_, msg);
  }

  // Field 2: name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, name_, msg);
  }

  // Field 3: flags
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, flags_, msg);
  }

  // Field 4: parent_id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, parent_id_, msg);
  }

  // Field 5: mirror_from_id
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, mirror_from_id_, msg);
  }

  // Field 6: add_to_root
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(6, add_to_root_, msg);
  }

  // Field 7: layer_stack_to_mirror
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, layer_stack_to_mirror_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DisplayInfo::DisplayInfo() = default;
DisplayInfo::~DisplayInfo() = default;
DisplayInfo::DisplayInfo(const DisplayInfo&) = default;
DisplayInfo& DisplayInfo::operator=(const DisplayInfo&) = default;
DisplayInfo::DisplayInfo(DisplayInfo&&) noexcept = default;
DisplayInfo& DisplayInfo::operator=(DisplayInfo&&) = default;

bool DisplayInfo::operator==(const DisplayInfo& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_, other.layer_stack_)
   && ::protozero::internal::gen_helpers::EqualsField(display_id_, other.display_id_)
   && ::protozero::internal::gen_helpers::EqualsField(logical_width_, other.logical_width_)
   && ::protozero::internal::gen_helpers::EqualsField(logical_height_, other.logical_height_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_inverse_, other.transform_inverse_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_, other.transform_)
   && ::protozero::internal::gen_helpers::EqualsField(receives_input_, other.receives_input_)
   && ::protozero::internal::gen_helpers::EqualsField(is_secure_, other.is_secure_)
   && ::protozero::internal::gen_helpers::EqualsField(is_primary_, other.is_primary_)
   && ::protozero::internal::gen_helpers::EqualsField(is_virtual_, other.is_virtual_)
   && ::protozero::internal::gen_helpers::EqualsField(rotation_flags_, other.rotation_flags_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_hint_, other.transform_hint_);
}

bool DisplayInfo::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* layer_stack */:
        field.get(&layer_stack_);
        break;
      case 2 /* display_id */:
        field.get(&display_id_);
        break;
      case 3 /* logical_width */:
        field.get(&logical_width_);
        break;
      case 4 /* logical_height */:
        field.get(&logical_height_);
        break;
      case 5 /* transform_inverse */:
        (*transform_inverse_).ParseFromArray(field.data(), field.size());
        break;
      case 6 /* transform */:
        (*transform_).ParseFromArray(field.data(), field.size());
        break;
      case 7 /* receives_input */:
        field.get(&receives_input_);
        break;
      case 8 /* is_secure */:
        field.get(&is_secure_);
        break;
      case 9 /* is_primary */:
        field.get(&is_primary_);
        break;
      case 10 /* is_virtual */:
        field.get(&is_virtual_);
        break;
      case 11 /* rotation_flags */:
        field.get(&rotation_flags_);
        break;
      case 12 /* transform_hint */:
        field.get(&transform_hint_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DisplayInfo::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DisplayInfo::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DisplayInfo::Serialize(::protozero::Message* msg) const {
  // Field 1: layer_stack
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, layer_stack_, msg);
  }

  // Field 2: display_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, display_id_, msg);
  }

  // Field 3: logical_width
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, logical_width_, msg);
  }

  // Field 4: logical_height
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, logical_height_, msg);
  }

  // Field 5: transform_inverse
  if (_has_field_[5]) {
    (*transform_inverse_).Serialize(msg->BeginNestedMessage<::protozero::Message>(5));
  }

  // Field 6: transform
  if (_has_field_[6]) {
    (*transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 7: receives_input
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(7, receives_input_, msg);
  }

  // Field 8: is_secure
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(8, is_secure_, msg);
  }

  // Field 9: is_primary
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(9, is_primary_, msg);
  }

  // Field 10: is_virtual
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(10, is_virtual_, msg);
  }

  // Field 11: rotation_flags
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, rotation_flags_, msg);
  }

  // Field 12: transform_hint
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, transform_hint_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


TransactionTraceEntry::TransactionTraceEntry() = default;
TransactionTraceEntry::~TransactionTraceEntry() = default;
TransactionTraceEntry::TransactionTraceEntry(const TransactionTraceEntry&) = default;
TransactionTraceEntry& TransactionTraceEntry::operator=(const TransactionTraceEntry&) = default;
TransactionTraceEntry::TransactionTraceEntry(TransactionTraceEntry&&) noexcept = default;
TransactionTraceEntry& TransactionTraceEntry::operator=(TransactionTraceEntry&&) = default;

bool TransactionTraceEntry::operator==(const TransactionTraceEntry& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(elapsed_realtime_nanos_, other.elapsed_realtime_nanos_)
   && ::protozero::internal::gen_helpers::EqualsField(vsync_id_, other.vsync_id_)
   && ::protozero::internal::gen_helpers::EqualsField(transactions_, other.transactions_)
   && ::protozero::internal::gen_helpers::EqualsField(added_layers_, other.added_layers_)
   && ::protozero::internal::gen_helpers::EqualsField(destroyed_layers_, other.destroyed_layers_)
   && ::protozero::internal::gen_helpers::EqualsField(added_displays_, other.added_displays_)
   && ::protozero::internal::gen_helpers::EqualsField(removed_displays_, other.removed_displays_)
   && ::protozero::internal::gen_helpers::EqualsField(destroyed_layer_handles_, other.destroyed_layer_handles_)
   && ::protozero::internal::gen_helpers::EqualsField(displays_changed_, other.displays_changed_)
   && ::protozero::internal::gen_helpers::EqualsField(displays_, other.displays_);
}

int TransactionTraceEntry::transactions_size() const { return static_cast<int>(transactions_.size()); }
void TransactionTraceEntry::clear_transactions() { transactions_.clear(); }
TransactionState* TransactionTraceEntry::add_transactions() { transactions_.emplace_back(); return &transactions_.back(); }
int TransactionTraceEntry::added_layers_size() const { return static_cast<int>(added_layers_.size()); }
void TransactionTraceEntry::clear_added_layers() { added_layers_.clear(); }
LayerCreationArgs* TransactionTraceEntry::add_added_layers() { added_layers_.emplace_back(); return &added_layers_.back(); }
int TransactionTraceEntry::added_displays_size() const { return static_cast<int>(added_displays_.size()); }
void TransactionTraceEntry::clear_added_displays() { added_displays_.clear(); }
DisplayState* TransactionTraceEntry::add_added_displays() { added_displays_.emplace_back(); return &added_displays_.back(); }
int TransactionTraceEntry::displays_size() const { return static_cast<int>(displays_.size()); }
void TransactionTraceEntry::clear_displays() { displays_.clear(); }
DisplayInfo* TransactionTraceEntry::add_displays() { displays_.emplace_back(); return &displays_.back(); }
bool TransactionTraceEntry::ParseFromArray(const void* raw, size_t size) {
  transactions_.clear();
  added_layers_.clear();
  destroyed_layers_.clear();
  added_displays_.clear();
  removed_displays_.clear();
  destroyed_layer_handles_.clear();
  displays_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* elapsed_realtime_nanos */:
        field.get(&elapsed_realtime_nanos_);
        break;
      case 2 /* vsync_id */:
        field.get(&vsync_id_);
        break;
      case 3 /* transactions */:
        transactions_.emplace_back();
        transactions_.back().ParseFromArray(field.data(), field.size());
        break;
      case 4 /* added_layers */:
        added_layers_.emplace_back();
        added_layers_.back().ParseFromArray(field.data(), field.size());
        break;
      case 5 /* destroyed_layers */:
        destroyed_layers_.emplace_back();
        field.get(&destroyed_layers_.back());
        break;
      case 6 /* added_displays */:
        added_displays_.emplace_back();
        added_displays_.back().ParseFromArray(field.data(), field.size());
        break;
      case 7 /* removed_displays */:
        removed_displays_.emplace_back();
        field.get(&removed_displays_.back());
        break;
      case 8 /* destroyed_layer_handles */:
        destroyed_layer_handles_.emplace_back();
        field.get(&destroyed_layer_handles_.back());
        break;
      case 9 /* displays_changed */:
        field.get(&displays_changed_);
        break;
      case 10 /* displays */:
        displays_.emplace_back();
        displays_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TransactionTraceEntry::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TransactionTraceEntry::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TransactionTraceEntry::Serialize(::protozero::Message* msg) const {
  // Field 1: elapsed_realtime_nanos
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, elapsed_realtime_nanos_, msg);
  }

  // Field 2: vsync_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, vsync_id_, msg);
  }

  // Field 3: transactions
  for (auto& it : transactions_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: added_layers
  for (auto& it : added_layers_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 5: destroyed_layers
  for (auto& it : destroyed_layers_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, it, msg);
  }

  // Field 6: added_displays
  for (auto& it : added_displays_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 7: removed_displays
  for (auto& it : removed_displays_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, it, msg);
  }

  // Field 8: destroyed_layer_handles
  for (auto& it : destroyed_layer_handles_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, it, msg);
  }

  // Field 9: displays_changed
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(9, displays_changed_, msg);
  }

  // Field 10: displays
  for (auto& it : displays_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(10));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


TransactionTraceFile::TransactionTraceFile() = default;
TransactionTraceFile::~TransactionTraceFile() = default;
TransactionTraceFile::TransactionTraceFile(const TransactionTraceFile&) = default;
TransactionTraceFile& TransactionTraceFile::operator=(const TransactionTraceFile&) = default;
TransactionTraceFile::TransactionTraceFile(TransactionTraceFile&&) noexcept = default;
TransactionTraceFile& TransactionTraceFile::operator=(TransactionTraceFile&&) = default;

bool TransactionTraceFile::operator==(const TransactionTraceFile& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(magic_number_, other.magic_number_)
   && ::protozero::internal::gen_helpers::EqualsField(entry_, other.entry_)
   && ::protozero::internal::gen_helpers::EqualsField(real_to_elapsed_time_offset_nanos_, other.real_to_elapsed_time_offset_nanos_)
   && ::protozero::internal::gen_helpers::EqualsField(version_, other.version_);
}

int TransactionTraceFile::entry_size() const { return static_cast<int>(entry_.size()); }
void TransactionTraceFile::clear_entry() { entry_.clear(); }
TransactionTraceEntry* TransactionTraceFile::add_entry() { entry_.emplace_back(); return &entry_.back(); }
bool TransactionTraceFile::ParseFromArray(const void* raw, size_t size) {
  entry_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* magic_number */:
        field.get(&magic_number_);
        break;
      case 2 /* entry */:
        entry_.emplace_back();
        entry_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* real_to_elapsed_time_offset_nanos */:
        field.get(&real_to_elapsed_time_offset_nanos_);
        break;
      case 4 /* version */:
        field.get(&version_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TransactionTraceFile::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TransactionTraceFile::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TransactionTraceFile::Serialize(::protozero::Message* msg) const {
  // Field 1: magic_number
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, magic_number_, msg);
  }

  // Field 2: entry
  for (auto& it : entry_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: real_to_elapsed_time_offset_nanos
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, real_to_elapsed_time_offset_nanos_, msg);
  }

  // Field 4: version
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, version_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
