// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/graphics_frame_event.proto

#include "protos/perfetto/trace/android/graphics_frame_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_number_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.duration_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.buffer_id_)*/0u} {}
struct GraphicsFrameEvent_BufferEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphicsFrameEvent_BufferEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphicsFrameEvent_BufferEventDefaultTypeInternal() {}
  union {
    GraphicsFrameEvent_BufferEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphicsFrameEvent_BufferEventDefaultTypeInternal _GraphicsFrameEvent_BufferEvent_default_instance_;
PROTOBUF_CONSTEXPR GraphicsFrameEvent::GraphicsFrameEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buffer_event_)*/nullptr} {}
struct GraphicsFrameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphicsFrameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphicsFrameEventDefaultTypeInternal() {}
  union {
    GraphicsFrameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphicsFrameEventDefaultTypeInternal _GraphicsFrameEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool GraphicsFrameEvent_BufferEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GraphicsFrameEvent_BufferEventType_strings[14] = {};

static const char GraphicsFrameEvent_BufferEventType_names[] =
  "ACQUIRE_FENCE"
  "ATTACH"
  "CANCEL"
  "DEQUEUE"
  "DETACH"
  "FALLBACK_COMPOSITION"
  "HWC_COMPOSITION_QUEUED"
  "LATCH"
  "MODIFY"
  "POST"
  "PRESENT_FENCE"
  "QUEUE"
  "RELEASE_FENCE"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GraphicsFrameEvent_BufferEventType_entries[] = {
  { {GraphicsFrameEvent_BufferEventType_names + 0, 13}, 4 },
  { {GraphicsFrameEvent_BufferEventType_names + 13, 6}, 12 },
  { {GraphicsFrameEvent_BufferEventType_names + 19, 6}, 13 },
  { {GraphicsFrameEvent_BufferEventType_names + 25, 7}, 1 },
  { {GraphicsFrameEvent_BufferEventType_names + 32, 6}, 11 },
  { {GraphicsFrameEvent_BufferEventType_names + 38, 20}, 7 },
  { {GraphicsFrameEvent_BufferEventType_names + 58, 22}, 6 },
  { {GraphicsFrameEvent_BufferEventType_names + 80, 5}, 5 },
  { {GraphicsFrameEvent_BufferEventType_names + 85, 6}, 10 },
  { {GraphicsFrameEvent_BufferEventType_names + 91, 4}, 3 },
  { {GraphicsFrameEvent_BufferEventType_names + 95, 13}, 8 },
  { {GraphicsFrameEvent_BufferEventType_names + 108, 5}, 2 },
  { {GraphicsFrameEvent_BufferEventType_names + 113, 13}, 9 },
  { {GraphicsFrameEvent_BufferEventType_names + 126, 11}, 0 },
};

static const int GraphicsFrameEvent_BufferEventType_entries_by_number[] = {
  13, // 0 -> UNSPECIFIED
  3, // 1 -> DEQUEUE
  11, // 2 -> QUEUE
  9, // 3 -> POST
  0, // 4 -> ACQUIRE_FENCE
  7, // 5 -> LATCH
  6, // 6 -> HWC_COMPOSITION_QUEUED
  5, // 7 -> FALLBACK_COMPOSITION
  10, // 8 -> PRESENT_FENCE
  12, // 9 -> RELEASE_FENCE
  8, // 10 -> MODIFY
  4, // 11 -> DETACH
  1, // 12 -> ATTACH
  2, // 13 -> CANCEL
};

const std::string& GraphicsFrameEvent_BufferEventType_Name(
    GraphicsFrameEvent_BufferEventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GraphicsFrameEvent_BufferEventType_entries,
          GraphicsFrameEvent_BufferEventType_entries_by_number,
          14, GraphicsFrameEvent_BufferEventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GraphicsFrameEvent_BufferEventType_entries,
      GraphicsFrameEvent_BufferEventType_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GraphicsFrameEvent_BufferEventType_strings[idx].get();
}
bool GraphicsFrameEvent_BufferEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GraphicsFrameEvent_BufferEventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GraphicsFrameEvent_BufferEventType_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<GraphicsFrameEvent_BufferEventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::UNSPECIFIED;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::DEQUEUE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::QUEUE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::POST;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::ACQUIRE_FENCE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::LATCH;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::HWC_COMPOSITION_QUEUED;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::FALLBACK_COMPOSITION;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::PRESENT_FENCE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::RELEASE_FENCE;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::MODIFY;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::DETACH;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::ATTACH;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::CANCEL;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::BufferEventType_MIN;
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent::BufferEventType_MAX;
constexpr int GraphicsFrameEvent::BufferEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GraphicsFrameEvent_BufferEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphicsFrameEvent_BufferEvent>()._impl_._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buffer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GraphicsFrameEvent.BufferEvent)
}
GraphicsFrameEvent_BufferEvent::GraphicsFrameEvent_BufferEvent(const GraphicsFrameEvent_BufferEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GraphicsFrameEvent_BufferEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_){}
    , decltype(_impl_.frame_number_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.duration_ns_){}
    , decltype(_impl_.buffer_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_layer_name()) {
    _this->_impl_.layer_name_.Set(from._internal_layer_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.frame_number_, &from._impl_.frame_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buffer_id_) -
    reinterpret_cast<char*>(&_impl_.frame_number_)) + sizeof(_impl_.buffer_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GraphicsFrameEvent.BufferEvent)
}

inline void GraphicsFrameEvent_BufferEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_){}
    , decltype(_impl_.frame_number_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.duration_ns_){uint64_t{0u}}
    , decltype(_impl_.buffer_id_){0u}
  };
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphicsFrameEvent_BufferEvent::~GraphicsFrameEvent_BufferEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphicsFrameEvent_BufferEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_name_.Destroy();
}

void GraphicsFrameEvent_BufferEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphicsFrameEvent_BufferEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.layer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.frame_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.buffer_id_) -
        reinterpret_cast<char*>(&_impl_.frame_number_)) + sizeof(_impl_.buffer_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GraphicsFrameEvent_BufferEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          _impl_.frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GraphicsFrameEvent_BufferEventType_IsValid(val))) {
            _internal_set_type(static_cast<::perfetto::protos::GraphicsFrameEvent_BufferEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string layer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_layer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 duration_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_duration_ns(&has_bits);
          _impl_.duration_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 buffer_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_buffer_id(&has_bits);
          _impl_.buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicsFrameEvent_BufferEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 frame_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_number(), target);
  }

  // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional string layer_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_layer_name(), target);
  }

  // optional uint64 duration_ns = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_duration_ns(), target);
  }

  // optional uint32 buffer_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_buffer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  return target;
}

size_t GraphicsFrameEvent_BufferEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string layer_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer_name());
    }

    // optional uint32 frame_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());
    }

    // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint64 duration_ns = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_duration_ns());
    }

    // optional uint32 buffer_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buffer_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphicsFrameEvent_BufferEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GraphicsFrameEvent_BufferEvent*>(
      &from));
}

void GraphicsFrameEvent_BufferEvent::MergeFrom(const GraphicsFrameEvent_BufferEvent& from) {
  GraphicsFrameEvent_BufferEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_layer_name(from._internal_layer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ns_ = from._impl_.duration_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.buffer_id_ = from._impl_.buffer_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GraphicsFrameEvent_BufferEvent::CopyFrom(const GraphicsFrameEvent_BufferEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GraphicsFrameEvent.BufferEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsFrameEvent_BufferEvent::IsInitialized() const {
  return true;
}

void GraphicsFrameEvent_BufferEvent::InternalSwap(GraphicsFrameEvent_BufferEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.layer_name_, lhs_arena,
      &other->_impl_.layer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphicsFrameEvent_BufferEvent, _impl_.buffer_id_)
      + sizeof(GraphicsFrameEvent_BufferEvent::_impl_.buffer_id_)
      - PROTOBUF_FIELD_OFFSET(GraphicsFrameEvent_BufferEvent, _impl_.frame_number_)>(
          reinterpret_cast<char*>(&_impl_.frame_number_),
          reinterpret_cast<char*>(&other->_impl_.frame_number_));
}

std::string GraphicsFrameEvent_BufferEvent::GetTypeName() const {
  return "perfetto.protos.GraphicsFrameEvent.BufferEvent";
}


// ===================================================================

class GraphicsFrameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphicsFrameEvent>()._impl_._has_bits_);
  static const ::perfetto::protos::GraphicsFrameEvent_BufferEvent& buffer_event(const GraphicsFrameEvent* msg);
  static void set_has_buffer_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::GraphicsFrameEvent_BufferEvent&
GraphicsFrameEvent::_Internal::buffer_event(const GraphicsFrameEvent* msg) {
  return *msg->_impl_.buffer_event_;
}
GraphicsFrameEvent::GraphicsFrameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GraphicsFrameEvent)
}
GraphicsFrameEvent::GraphicsFrameEvent(const GraphicsFrameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GraphicsFrameEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffer_event_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_buffer_event()) {
    _this->_impl_.buffer_event_ = new ::perfetto::protos::GraphicsFrameEvent_BufferEvent(*from._impl_.buffer_event_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GraphicsFrameEvent)
}

inline void GraphicsFrameEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffer_event_){nullptr}
  };
}

GraphicsFrameEvent::~GraphicsFrameEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GraphicsFrameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphicsFrameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.buffer_event_;
}

void GraphicsFrameEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphicsFrameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GraphicsFrameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.buffer_event_ != nullptr);
    _impl_.buffer_event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GraphicsFrameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphicsFrameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GraphicsFrameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::buffer_event(this),
        _Internal::buffer_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GraphicsFrameEvent)
  return target;
}

size_t GraphicsFrameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GraphicsFrameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buffer_event_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphicsFrameEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GraphicsFrameEvent*>(
      &from));
}

void GraphicsFrameEvent::MergeFrom(const GraphicsFrameEvent& from) {
  GraphicsFrameEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GraphicsFrameEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_buffer_event()) {
    _this->_internal_mutable_buffer_event()->::perfetto::protos::GraphicsFrameEvent_BufferEvent::MergeFrom(
        from._internal_buffer_event());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GraphicsFrameEvent::CopyFrom(const GraphicsFrameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GraphicsFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicsFrameEvent::IsInitialized() const {
  return true;
}

void GraphicsFrameEvent::InternalSwap(GraphicsFrameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.buffer_event_, other->_impl_.buffer_event_);
}

std::string GraphicsFrameEvent::GetTypeName() const {
  return "perfetto.protos.GraphicsFrameEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GraphicsFrameEvent_BufferEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::GraphicsFrameEvent_BufferEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GraphicsFrameEvent_BufferEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GraphicsFrameEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::GraphicsFrameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GraphicsFrameEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
