// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/surfaceflinger_layers.proto

#include "protos/perfetto/trace/android/surfaceflinger_layers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR LayersTraceFileProto::LayersTraceFileProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_.magic_number_)*/uint64_t{0u}
  , /*decltype(_impl_.real_to_elapsed_time_offset_nanos_)*/uint64_t{0u}} {}
struct LayersTraceFileProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayersTraceFileProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayersTraceFileProtoDefaultTypeInternal() {}
  union {
    LayersTraceFileProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayersTraceFileProtoDefaultTypeInternal _LayersTraceFileProto_default_instance_;
PROTOBUF_CONSTEXPR LayersSnapshotProto::LayersSnapshotProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.displays_)*/{}
  , /*decltype(_impl_.where_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hwc_blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.layers_)*/nullptr
  , /*decltype(_impl_.elapsed_realtime_nanos_)*/int64_t{0}
  , /*decltype(_impl_.excludes_composition_state_)*/false
  , /*decltype(_impl_.missed_entries_)*/0u
  , /*decltype(_impl_.vsync_id_)*/int64_t{0}} {}
struct LayersSnapshotProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayersSnapshotProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayersSnapshotProtoDefaultTypeInternal() {}
  union {
    LayersSnapshotProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayersSnapshotProtoDefaultTypeInternal _LayersSnapshotProto_default_instance_;
PROTOBUF_CONSTEXPR LayersProto::LayersProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LayersProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayersProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayersProtoDefaultTypeInternal() {}
  union {
    LayersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayersProtoDefaultTypeInternal _LayersProto_default_instance_;
PROTOBUF_CONSTEXPR DisplayProto::DisplayProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.layer_stack_space_rect_)*/nullptr
  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.layer_stack_)*/0u
  , /*decltype(_impl_.is_virtual_)*/false
  , /*decltype(_impl_.dpi_x_)*/0
  , /*decltype(_impl_.dpi_y_)*/0} {}
struct DisplayProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisplayProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisplayProtoDefaultTypeInternal() {}
  union {
    DisplayProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisplayProtoDefaultTypeInternal _DisplayProto_default_instance_;
PROTOBUF_CONSTEXPR LayerProto_MetadataEntry_DoNotUse::LayerProto_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LayerProto_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal _LayerProto_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LayerProto::LayerProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_._children_cached_byte_size_)*/{0}
  , /*decltype(_impl_.relatives_)*/{}
  , /*decltype(_impl_._relatives_cached_byte_size_)*/{0}
  , /*decltype(_impl_.barrier_layer_)*/{}
  , /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.blur_regions_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataspace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pixel_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transparent_region_)*/nullptr
  , /*decltype(_impl_.visible_region_)*/nullptr
  , /*decltype(_impl_.damage_region_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.requested_position_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.crop_)*/nullptr
  , /*decltype(_impl_.final_crop_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.requested_color_)*/nullptr
  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.requested_transform_)*/nullptr
  , /*decltype(_impl_.active_buffer_)*/nullptr
  , /*decltype(_impl_.hwc_frame_)*/nullptr
  , /*decltype(_impl_.hwc_crop_)*/nullptr
  , /*decltype(_impl_.buffer_transform_)*/nullptr
  , /*decltype(_impl_.effective_transform_)*/nullptr
  , /*decltype(_impl_.source_bounds_)*/nullptr
  , /*decltype(_impl_.bounds_)*/nullptr
  , /*decltype(_impl_.screen_bounds_)*/nullptr
  , /*decltype(_impl_.input_window_info_)*/nullptr
  , /*decltype(_impl_.corner_radius_crop_)*/nullptr
  , /*decltype(_impl_.color_transform_)*/nullptr
  , /*decltype(_impl_.destination_frame_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.layer_stack_)*/0u
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.is_opaque_)*/false
  , /*decltype(_impl_.invalidate_)*/false
  , /*decltype(_impl_.refresh_pending_)*/false
  , /*decltype(_impl_.is_protected_)*/false
  , /*decltype(_impl_.parent_)*/0
  , /*decltype(_impl_.z_order_relative_of_)*/0
  , /*decltype(_impl_.queued_frames_)*/0
  , /*decltype(_impl_.hwc_transform_)*/0
  , /*decltype(_impl_.window_type_)*/0
  , /*decltype(_impl_.app_id_)*/0
  , /*decltype(_impl_.hwc_composition_type_)*/0
  , /*decltype(_impl_.curr_frame_)*/uint64_t{0u}
  , /*decltype(_impl_.effective_scaling_mode_)*/0
  , /*decltype(_impl_.corner_radius_)*/0
  , /*decltype(_impl_.shadow_radius_)*/0
  , /*decltype(_impl_.background_blur_radius_)*/0
  , /*decltype(_impl_.owner_uid_)*/0u
  , /*decltype(_impl_.is_relative_of_)*/false
  , /*decltype(_impl_.is_trusted_overlay_)*/false
  , /*decltype(_impl_.requested_corner_radius_)*/0
  , /*decltype(_impl_.original_id_)*/0u
  , /*decltype(_impl_.trusted_overlay_)*/0} {}
struct LayerProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayerProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayerProtoDefaultTypeInternal() {}
  union {
    LayerProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayerProtoDefaultTypeInternal _LayerProto_default_instance_;
PROTOBUF_CONSTEXPR PositionProto::PositionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct PositionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionProtoDefaultTypeInternal() {}
  union {
    PositionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionProtoDefaultTypeInternal _PositionProto_default_instance_;
PROTOBUF_CONSTEXPR FloatRectProto::FloatRectProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.top_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_.bottom_)*/0} {}
struct FloatRectProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatRectProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatRectProtoDefaultTypeInternal() {}
  union {
    FloatRectProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatRectProtoDefaultTypeInternal _FloatRectProto_default_instance_;
PROTOBUF_CONSTEXPR ActiveBufferProto::ActiveBufferProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.stride_)*/0u
  , /*decltype(_impl_.format_)*/0
  , /*decltype(_impl_.usage_)*/uint64_t{0u}} {}
struct ActiveBufferProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActiveBufferProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActiveBufferProtoDefaultTypeInternal() {}
  union {
    ActiveBufferProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActiveBufferProtoDefaultTypeInternal _ActiveBufferProto_default_instance_;
PROTOBUF_CONSTEXPR BarrierLayerProto::BarrierLayerProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frame_number_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0} {}
struct BarrierLayerProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarrierLayerProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarrierLayerProtoDefaultTypeInternal() {}
  union {
    BarrierLayerProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarrierLayerProtoDefaultTypeInternal _BarrierLayerProto_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool LayersTraceFileProto_MagicNumber_IsValid(int value) {
  switch (value) {
    case 0:
    case 1162035538:
    case 1414682956:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayersTraceFileProto_MagicNumber_strings[3] = {};

static const char LayersTraceFileProto_MagicNumber_names[] =
  "INVALID"
  "MAGIC_NUMBER_H"
  "MAGIC_NUMBER_L";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayersTraceFileProto_MagicNumber_entries[] = {
  { {LayersTraceFileProto_MagicNumber_names + 0, 7}, 0 },
  { {LayersTraceFileProto_MagicNumber_names + 7, 14}, 1162035538 },
  { {LayersTraceFileProto_MagicNumber_names + 21, 14}, 1414682956 },
};

static const int LayersTraceFileProto_MagicNumber_entries_by_number[] = {
  0, // 0 -> INVALID
  1, // 1162035538 -> MAGIC_NUMBER_H
  2, // 1414682956 -> MAGIC_NUMBER_L
};

const std::string& LayersTraceFileProto_MagicNumber_Name(
    LayersTraceFileProto_MagicNumber value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayersTraceFileProto_MagicNumber_entries,
          LayersTraceFileProto_MagicNumber_entries_by_number,
          3, LayersTraceFileProto_MagicNumber_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayersTraceFileProto_MagicNumber_entries,
      LayersTraceFileProto_MagicNumber_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayersTraceFileProto_MagicNumber_strings[idx].get();
}
bool LayersTraceFileProto_MagicNumber_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayersTraceFileProto_MagicNumber* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayersTraceFileProto_MagicNumber_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LayersTraceFileProto_MagicNumber>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::INVALID;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MAGIC_NUMBER_L;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MAGIC_NUMBER_H;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MagicNumber_MIN;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MagicNumber_MAX;
constexpr int LayersTraceFileProto::MagicNumber_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool HwcCompositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HwcCompositionType_strings[7] = {};

static const char HwcCompositionType_names[] =
  "HWC_TYPE_CLIENT"
  "HWC_TYPE_CURSOR"
  "HWC_TYPE_DEVICE"
  "HWC_TYPE_DISPLAY_DECORATION"
  "HWC_TYPE_SIDEBAND"
  "HWC_TYPE_SOLID_COLOR"
  "HWC_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HwcCompositionType_entries[] = {
  { {HwcCompositionType_names + 0, 15}, 1 },
  { {HwcCompositionType_names + 15, 15}, 4 },
  { {HwcCompositionType_names + 30, 15}, 2 },
  { {HwcCompositionType_names + 45, 27}, 6 },
  { {HwcCompositionType_names + 72, 17}, 5 },
  { {HwcCompositionType_names + 89, 20}, 3 },
  { {HwcCompositionType_names + 109, 20}, 0 },
};

static const int HwcCompositionType_entries_by_number[] = {
  6, // 0 -> HWC_TYPE_UNSPECIFIED
  0, // 1 -> HWC_TYPE_CLIENT
  2, // 2 -> HWC_TYPE_DEVICE
  5, // 3 -> HWC_TYPE_SOLID_COLOR
  1, // 4 -> HWC_TYPE_CURSOR
  4, // 5 -> HWC_TYPE_SIDEBAND
  3, // 6 -> HWC_TYPE_DISPLAY_DECORATION
};

const std::string& HwcCompositionType_Name(
    HwcCompositionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HwcCompositionType_entries,
          HwcCompositionType_entries_by_number,
          7, HwcCompositionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HwcCompositionType_entries,
      HwcCompositionType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HwcCompositionType_strings[idx].get();
}
bool HwcCompositionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HwcCompositionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HwcCompositionType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<HwcCompositionType>(int_value);
  }
  return success;
}

// ===================================================================

class LayersTraceFileProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersTraceFileProto>()._impl_._has_bits_);
  static void set_has_magic_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_real_to_elapsed_time_offset_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LayersTraceFileProto::LayersTraceFileProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayersTraceFileProto)
}
LayersTraceFileProto::LayersTraceFileProto(const LayersTraceFileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LayersTraceFileProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entry_){from._impl_.entry_}
    , decltype(_impl_.magic_number_){}
    , decltype(_impl_.real_to_elapsed_time_offset_nanos_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.magic_number_, &from._impl_.magic_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.real_to_elapsed_time_offset_nanos_) -
    reinterpret_cast<char*>(&_impl_.magic_number_)) + sizeof(_impl_.real_to_elapsed_time_offset_nanos_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayersTraceFileProto)
}

inline void LayersTraceFileProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entry_){arena}
    , decltype(_impl_.magic_number_){uint64_t{0u}}
    , decltype(_impl_.real_to_elapsed_time_offset_nanos_){uint64_t{0u}}
  };
}

LayersTraceFileProto::~LayersTraceFileProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayersTraceFileProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayersTraceFileProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void LayersTraceFileProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayersTraceFileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayersTraceFileProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.magic_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.real_to_elapsed_time_offset_nanos_) -
        reinterpret_cast<char*>(&_impl_.magic_number_)) + sizeof(_impl_.real_to_elapsed_time_offset_nanos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayersTraceFileProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 magic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_magic_number(&has_bits);
          _impl_.magic_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.LayersSnapshotProto entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_real_to_elapsed_time_offset_nanos(&has_bits);
          _impl_.real_to_elapsed_time_offset_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayersTraceFileProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayersTraceFileProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 magic_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_magic_number(), target);
  }

  // repeated .perfetto.protos.LayersSnapshotProto entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_real_to_elapsed_time_offset_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayersTraceFileProto)
  return target;
}

size_t LayersTraceFileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayersTraceFileProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.LayersSnapshotProto entry = 2;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 magic_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersTraceFileProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayersTraceFileProto*>(
      &from));
}

void LayersTraceFileProto::MergeFrom(const LayersTraceFileProto& from) {
  LayersTraceFileProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayersTraceFileProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.magic_number_ = from._impl_.magic_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.real_to_elapsed_time_offset_nanos_ = from._impl_.real_to_elapsed_time_offset_nanos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayersTraceFileProto::CopyFrom(const LayersTraceFileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayersTraceFileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersTraceFileProto::IsInitialized() const {
  return true;
}

void LayersTraceFileProto::InternalSwap(LayersTraceFileProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayersTraceFileProto, _impl_.real_to_elapsed_time_offset_nanos_)
      + sizeof(LayersTraceFileProto::_impl_.real_to_elapsed_time_offset_nanos_)
      - PROTOBUF_FIELD_OFFSET(LayersTraceFileProto, _impl_.magic_number_)>(
          reinterpret_cast<char*>(&_impl_.magic_number_),
          reinterpret_cast<char*>(&other->_impl_.magic_number_));
}

std::string LayersTraceFileProto::GetTypeName() const {
  return "perfetto.protos.LayersTraceFileProto";
}


// ===================================================================

class LayersSnapshotProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersSnapshotProto>()._impl_._has_bits_);
  static void set_has_elapsed_realtime_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_where(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::LayersProto& layers(const LayersSnapshotProto* msg);
  static void set_has_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hwc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_excludes_composition_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_missed_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vsync_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::perfetto::protos::LayersProto&
LayersSnapshotProto::_Internal::layers(const LayersSnapshotProto* msg) {
  return *msg->_impl_.layers_;
}
LayersSnapshotProto::LayersSnapshotProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayersSnapshotProto)
}
LayersSnapshotProto::LayersSnapshotProto(const LayersSnapshotProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LayersSnapshotProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displays_){from._impl_.displays_}
    , decltype(_impl_.where_){}
    , decltype(_impl_.hwc_blob_){}
    , decltype(_impl_.layers_){nullptr}
    , decltype(_impl_.elapsed_realtime_nanos_){}
    , decltype(_impl_.excludes_composition_state_){}
    , decltype(_impl_.missed_entries_){}
    , decltype(_impl_.vsync_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.where_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.where_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_where()) {
    _this->_impl_.where_.Set(from._internal_where(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hwc_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwc_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hwc_blob()) {
    _this->_impl_.hwc_blob_.Set(from._internal_hwc_blob(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_layers()) {
    _this->_impl_.layers_ = new ::perfetto::protos::LayersProto(*from._impl_.layers_);
  }
  ::memcpy(&_impl_.elapsed_realtime_nanos_, &from._impl_.elapsed_realtime_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vsync_id_) -
    reinterpret_cast<char*>(&_impl_.elapsed_realtime_nanos_)) + sizeof(_impl_.vsync_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayersSnapshotProto)
}

inline void LayersSnapshotProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.displays_){arena}
    , decltype(_impl_.where_){}
    , decltype(_impl_.hwc_blob_){}
    , decltype(_impl_.layers_){nullptr}
    , decltype(_impl_.elapsed_realtime_nanos_){int64_t{0}}
    , decltype(_impl_.excludes_composition_state_){false}
    , decltype(_impl_.missed_entries_){0u}
    , decltype(_impl_.vsync_id_){int64_t{0}}
  };
  _impl_.where_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.where_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hwc_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hwc_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LayersSnapshotProto::~LayersSnapshotProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayersSnapshotProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayersSnapshotProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displays_.~RepeatedPtrField();
  _impl_.where_.Destroy();
  _impl_.hwc_blob_.Destroy();
  if (this != internal_default_instance()) delete _impl_.layers_;
}

void LayersSnapshotProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayersSnapshotProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayersSnapshotProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.displays_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.where_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hwc_blob_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.layers_ != nullptr);
      _impl_.layers_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.elapsed_realtime_nanos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vsync_id_) -
        reinterpret_cast<char*>(&_impl_.elapsed_realtime_nanos_)) + sizeof(_impl_.vsync_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayersSnapshotProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sfixed64 elapsed_realtime_nanos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_elapsed_realtime_nanos(&has_bits);
          _impl_.elapsed_realtime_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string where = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_where();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.LayersProto layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_layers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hwc_blob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hwc_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool excludes_composition_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_excludes_composition_state(&has_bits);
          _impl_.excludes_composition_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 missed_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_missed_entries(&has_bits);
          _impl_.missed_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.DisplayProto displays = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_displays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 vsync_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_vsync_id(&has_bits);
          _impl_.vsync_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayersSnapshotProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayersSnapshotProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional sfixed64 elapsed_realtime_nanos = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(1, this->_internal_elapsed_realtime_nanos(), target);
  }

  // optional string where = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_where(), target);
  }

  // optional .perfetto.protos.LayersProto layers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::layers(this),
        _Internal::layers(this).GetCachedSize(), target, stream);
  }

  // optional string hwc_blob = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hwc_blob(), target);
  }

  // optional bool excludes_composition_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_excludes_composition_state(), target);
  }

  // optional uint32 missed_entries = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_missed_entries(), target);
  }

  // repeated .perfetto.protos.DisplayProto displays = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_displays_size()); i < n; i++) {
    const auto& repfield = this->_internal_displays(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 vsync_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_vsync_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayersSnapshotProto)
  return target;
}

size_t LayersSnapshotProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayersSnapshotProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.DisplayProto displays = 7;
  total_size += 1UL * this->_internal_displays_size();
  for (const auto& msg : this->_impl_.displays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string where = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_where());
    }

    // optional string hwc_blob = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hwc_blob());
    }

    // optional .perfetto.protos.LayersProto layers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layers_);
    }

    // optional sfixed64 elapsed_realtime_nanos = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool excludes_composition_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 missed_entries = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_missed_entries());
    }

    // optional int64 vsync_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vsync_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersSnapshotProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayersSnapshotProto*>(
      &from));
}

void LayersSnapshotProto::MergeFrom(const LayersSnapshotProto& from) {
  LayersSnapshotProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayersSnapshotProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.displays_.MergeFrom(from._impl_.displays_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_where(from._internal_where());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hwc_blob(from._internal_hwc_blob());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_layers()->::perfetto::protos::LayersProto::MergeFrom(
          from._internal_layers());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.elapsed_realtime_nanos_ = from._impl_.elapsed_realtime_nanos_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.excludes_composition_state_ = from._impl_.excludes_composition_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.missed_entries_ = from._impl_.missed_entries_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.vsync_id_ = from._impl_.vsync_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayersSnapshotProto::CopyFrom(const LayersSnapshotProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayersSnapshotProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersSnapshotProto::IsInitialized() const {
  return true;
}

void LayersSnapshotProto::InternalSwap(LayersSnapshotProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.displays_.InternalSwap(&other->_impl_.displays_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.where_, lhs_arena,
      &other->_impl_.where_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hwc_blob_, lhs_arena,
      &other->_impl_.hwc_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayersSnapshotProto, _impl_.vsync_id_)
      + sizeof(LayersSnapshotProto::_impl_.vsync_id_)
      - PROTOBUF_FIELD_OFFSET(LayersSnapshotProto, _impl_.layers_)>(
          reinterpret_cast<char*>(&_impl_.layers_),
          reinterpret_cast<char*>(&other->_impl_.layers_));
}

std::string LayersSnapshotProto::GetTypeName() const {
  return "perfetto.protos.LayersSnapshotProto";
}


// ===================================================================

class LayersProto::_Internal {
 public:
};

LayersProto::LayersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayersProto)
}
LayersProto::LayersProto(const LayersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LayersProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){from._impl_.layers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayersProto)
}

inline void LayersProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LayersProto::~LayersProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayersProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layers_.~RepeatedPtrField();
}

void LayersProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayersProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayersProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.LayerProto layers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayersProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayersProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.LayerProto layers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayersProto)
  return target;
}

size_t LayersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayersProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.LayerProto layers = 1;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_impl_.layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayersProto*>(
      &from));
}

void LayersProto::MergeFrom(const LayersProto& from) {
  LayersProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayersProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layers_.MergeFrom(from._impl_.layers_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayersProto::CopyFrom(const LayersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersProto::IsInitialized() const {
  return true;
}

void LayersProto::InternalSwap(LayersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
}

std::string LayersProto::GetTypeName() const {
  return "perfetto.protos.LayersProto";
}


// ===================================================================

class DisplayProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayProto>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layer_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::SizeProto& size(const DisplayProto* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::RectProto& layer_stack_space_rect(const DisplayProto* msg);
  static void set_has_layer_stack_space_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::TransformProto& transform(const DisplayProto* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_virtual(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dpi_x(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dpi_y(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::perfetto::protos::SizeProto&
DisplayProto::_Internal::size(const DisplayProto* msg) {
  return *msg->_impl_.size_;
}
const ::perfetto::protos::RectProto&
DisplayProto::_Internal::layer_stack_space_rect(const DisplayProto* msg) {
  return *msg->_impl_.layer_stack_space_rect_;
}
const ::perfetto::protos::TransformProto&
DisplayProto::_Internal::transform(const DisplayProto* msg) {
  return *msg->_impl_.transform_;
}
void DisplayProto::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DisplayProto::clear_layer_stack_space_rect() {
  if (_impl_.layer_stack_space_rect_ != nullptr) _impl_.layer_stack_space_rect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DisplayProto::clear_transform() {
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
DisplayProto::DisplayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DisplayProto)
}
DisplayProto::DisplayProto(const DisplayProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DisplayProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.layer_stack_space_rect_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.layer_stack_){}
    , decltype(_impl_.is_virtual_){}
    , decltype(_impl_.dpi_x_){}
    , decltype(_impl_.dpi_y_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::perfetto::protos::SizeProto(*from._impl_.size_);
  }
  if (from._internal_has_layer_stack_space_rect()) {
    _this->_impl_.layer_stack_space_rect_ = new ::perfetto::protos::RectProto(*from._impl_.layer_stack_space_rect_);
  }
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::perfetto::protos::TransformProto(*from._impl_.transform_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dpi_y_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.dpi_y_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DisplayProto)
}

inline void DisplayProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.layer_stack_space_rect_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.layer_stack_){0u}
    , decltype(_impl_.is_virtual_){false}
    , decltype(_impl_.dpi_x_){0}
    , decltype(_impl_.dpi_y_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisplayProto::~DisplayProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DisplayProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisplayProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.layer_stack_space_rect_;
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void DisplayProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisplayProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DisplayProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.layer_stack_space_rect_ != nullptr);
      _impl_.layer_stack_space_rect_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dpi_x_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.dpi_x_));
  }
  _impl_.dpi_y_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisplayProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 layer_stack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_layer_stack(&has_bits);
          _impl_.layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.SizeProto size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto layer_stack_space_rect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_stack_space_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TransformProto transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_virtual = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_virtual(&has_bits);
          _impl_.is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double dpi_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_dpi_x(&has_bits);
          _impl_.dpi_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dpi_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_dpi_y(&has_bits);
          _impl_.dpi_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisplayProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DisplayProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 layer_stack = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_layer_stack(), target);
  }

  // optional .perfetto.protos.SizeProto size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RectProto layer_stack_space_rect = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::layer_stack_space_rect(this),
        _Internal::layer_stack_space_rect(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TransformProto transform = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // optional bool is_virtual = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_virtual(), target);
  }

  // optional double dpi_x = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_dpi_x(), target);
  }

  // optional double dpi_y = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_dpi_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DisplayProto)
  return target;
}

size_t DisplayProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DisplayProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .perfetto.protos.SizeProto size = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.size_);
    }

    // optional .perfetto.protos.RectProto layer_stack_space_rect = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layer_stack_space_rect_);
    }

    // optional .perfetto.protos.TransformProto transform = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transform_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 layer_stack = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_stack());
    }

    // optional bool is_virtual = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double dpi_x = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double dpi_y = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisplayProto*>(
      &from));
}

void DisplayProto::MergeFrom(const DisplayProto& from) {
  DisplayProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DisplayProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_size()->::perfetto::protos::SizeProto::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_layer_stack_space_rect()->::perfetto::protos::RectProto::MergeFrom(
          from._internal_layer_stack_space_rect());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_transform()->::perfetto::protos::TransformProto::MergeFrom(
          from._internal_transform());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.layer_stack_ = from._impl_.layer_stack_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_virtual_ = from._impl_.is_virtual_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.dpi_x_ = from._impl_.dpi_x_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_dpi_y(from._internal_dpi_y());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisplayProto::CopyFrom(const DisplayProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DisplayProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayProto::IsInitialized() const {
  return true;
}

void DisplayProto::InternalSwap(DisplayProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayProto, _impl_.dpi_y_)
      + sizeof(DisplayProto::_impl_.dpi_y_)
      - PROTOBUF_FIELD_OFFSET(DisplayProto, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

std::string DisplayProto::GetTypeName() const {
  return "perfetto.protos.DisplayProto";
}


// ===================================================================

LayerProto_MetadataEntry_DoNotUse::LayerProto_MetadataEntry_DoNotUse() {}
LayerProto_MetadataEntry_DoNotUse::LayerProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LayerProto_MetadataEntry_DoNotUse::MergeFrom(const LayerProto_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class LayerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerProto>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::RegionProto& transparent_region(const LayerProto* msg);
  static void set_has_transparent_region(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::RegionProto& visible_region(const LayerProto* msg);
  static void set_has_visible_region(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::RegionProto& damage_region(const LayerProto* msg);
  static void set_has_damage_region(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_layer_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::perfetto::protos::PositionProto& position(const LayerProto* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::PositionProto& requested_position(const LayerProto* msg);
  static void set_has_requested_position(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::SizeProto& size(const LayerProto* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::RectProto& crop(const LayerProto* msg);
  static void set_has_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::RectProto& final_crop(const LayerProto* msg);
  static void set_has_final_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_opaque(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_invalidate(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_dataspace(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pixel_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ColorProto& color(const LayerProto* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::perfetto::protos::ColorProto& requested_color(const LayerProto* msg);
  static void set_has_requested_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::perfetto::protos::TransformProto& transform(const LayerProto* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::perfetto::protos::TransformProto& requested_transform(const LayerProto* msg);
  static void set_has_requested_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_z_order_relative_of(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::perfetto::protos::ActiveBufferProto& active_buffer(const LayerProto* msg);
  static void set_has_active_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_queued_frames(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_refresh_pending(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::perfetto::protos::RectProto& hwc_frame(const LayerProto* msg);
  static void set_has_hwc_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::perfetto::protos::FloatRectProto& hwc_crop(const LayerProto* msg);
  static void set_has_hwc_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_hwc_transform(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_window_type(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_hwc_composition_type(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_is_protected(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_curr_frame(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::perfetto::protos::TransformProto& buffer_transform(const LayerProto* msg);
  static void set_has_buffer_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_effective_scaling_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_corner_radius(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::perfetto::protos::TransformProto& effective_transform(const LayerProto* msg);
  static void set_has_effective_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::perfetto::protos::FloatRectProto& source_bounds(const LayerProto* msg);
  static void set_has_source_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::perfetto::protos::FloatRectProto& bounds(const LayerProto* msg);
  static void set_has_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::perfetto::protos::FloatRectProto& screen_bounds(const LayerProto* msg);
  static void set_has_screen_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::perfetto::protos::InputWindowInfoProto& input_window_info(const LayerProto* msg);
  static void set_has_input_window_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::perfetto::protos::FloatRectProto& corner_radius_crop(const LayerProto* msg);
  static void set_has_corner_radius_crop(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_shadow_radius(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::perfetto::protos::ColorTransformProto& color_transform(const LayerProto* msg);
  static void set_has_color_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_relative_of(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_background_blur_radius(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_is_trusted_overlay(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_requested_corner_radius(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::perfetto::protos::RectProto& destination_frame(const LayerProto* msg);
  static void set_has_destination_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_trusted_overlay(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
};

const ::perfetto::protos::RegionProto&
LayerProto::_Internal::transparent_region(const LayerProto* msg) {
  return *msg->_impl_.transparent_region_;
}
const ::perfetto::protos::RegionProto&
LayerProto::_Internal::visible_region(const LayerProto* msg) {
  return *msg->_impl_.visible_region_;
}
const ::perfetto::protos::RegionProto&
LayerProto::_Internal::damage_region(const LayerProto* msg) {
  return *msg->_impl_.damage_region_;
}
const ::perfetto::protos::PositionProto&
LayerProto::_Internal::position(const LayerProto* msg) {
  return *msg->_impl_.position_;
}
const ::perfetto::protos::PositionProto&
LayerProto::_Internal::requested_position(const LayerProto* msg) {
  return *msg->_impl_.requested_position_;
}
const ::perfetto::protos::SizeProto&
LayerProto::_Internal::size(const LayerProto* msg) {
  return *msg->_impl_.size_;
}
const ::perfetto::protos::RectProto&
LayerProto::_Internal::crop(const LayerProto* msg) {
  return *msg->_impl_.crop_;
}
const ::perfetto::protos::RectProto&
LayerProto::_Internal::final_crop(const LayerProto* msg) {
  return *msg->_impl_.final_crop_;
}
const ::perfetto::protos::ColorProto&
LayerProto::_Internal::color(const LayerProto* msg) {
  return *msg->_impl_.color_;
}
const ::perfetto::protos::ColorProto&
LayerProto::_Internal::requested_color(const LayerProto* msg) {
  return *msg->_impl_.requested_color_;
}
const ::perfetto::protos::TransformProto&
LayerProto::_Internal::transform(const LayerProto* msg) {
  return *msg->_impl_.transform_;
}
const ::perfetto::protos::TransformProto&
LayerProto::_Internal::requested_transform(const LayerProto* msg) {
  return *msg->_impl_.requested_transform_;
}
const ::perfetto::protos::ActiveBufferProto&
LayerProto::_Internal::active_buffer(const LayerProto* msg) {
  return *msg->_impl_.active_buffer_;
}
const ::perfetto::protos::RectProto&
LayerProto::_Internal::hwc_frame(const LayerProto* msg) {
  return *msg->_impl_.hwc_frame_;
}
const ::perfetto::protos::FloatRectProto&
LayerProto::_Internal::hwc_crop(const LayerProto* msg) {
  return *msg->_impl_.hwc_crop_;
}
const ::perfetto::protos::TransformProto&
LayerProto::_Internal::buffer_transform(const LayerProto* msg) {
  return *msg->_impl_.buffer_transform_;
}
const ::perfetto::protos::TransformProto&
LayerProto::_Internal::effective_transform(const LayerProto* msg) {
  return *msg->_impl_.effective_transform_;
}
const ::perfetto::protos::FloatRectProto&
LayerProto::_Internal::source_bounds(const LayerProto* msg) {
  return *msg->_impl_.source_bounds_;
}
const ::perfetto::protos::FloatRectProto&
LayerProto::_Internal::bounds(const LayerProto* msg) {
  return *msg->_impl_.bounds_;
}
const ::perfetto::protos::FloatRectProto&
LayerProto::_Internal::screen_bounds(const LayerProto* msg) {
  return *msg->_impl_.screen_bounds_;
}
const ::perfetto::protos::InputWindowInfoProto&
LayerProto::_Internal::input_window_info(const LayerProto* msg) {
  return *msg->_impl_.input_window_info_;
}
const ::perfetto::protos::FloatRectProto&
LayerProto::_Internal::corner_radius_crop(const LayerProto* msg) {
  return *msg->_impl_.corner_radius_crop_;
}
const ::perfetto::protos::ColorTransformProto&
LayerProto::_Internal::color_transform(const LayerProto* msg) {
  return *msg->_impl_.color_transform_;
}
const ::perfetto::protos::RectProto&
LayerProto::_Internal::destination_frame(const LayerProto* msg) {
  return *msg->_impl_.destination_frame_;
}
void LayerProto::clear_transparent_region() {
  if (_impl_.transparent_region_ != nullptr) _impl_.transparent_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void LayerProto::clear_visible_region() {
  if (_impl_.visible_region_ != nullptr) _impl_.visible_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void LayerProto::clear_damage_region() {
  if (_impl_.damage_region_ != nullptr) _impl_.damage_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void LayerProto::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void LayerProto::clear_crop() {
  if (_impl_.crop_ != nullptr) _impl_.crop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void LayerProto::clear_final_crop() {
  if (_impl_.final_crop_ != nullptr) _impl_.final_crop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void LayerProto::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void LayerProto::clear_requested_color() {
  if (_impl_.requested_color_ != nullptr) _impl_.requested_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void LayerProto::clear_transform() {
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void LayerProto::clear_requested_transform() {
  if (_impl_.requested_transform_ != nullptr) _impl_.requested_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void LayerProto::clear_hwc_frame() {
  if (_impl_.hwc_frame_ != nullptr) _impl_.hwc_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void LayerProto::clear_buffer_transform() {
  if (_impl_.buffer_transform_ != nullptr) _impl_.buffer_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void LayerProto::clear_effective_transform() {
  if (_impl_.effective_transform_ != nullptr) _impl_.effective_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void LayerProto::clear_input_window_info() {
  if (_impl_.input_window_info_ != nullptr) _impl_.input_window_info_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void LayerProto::clear_color_transform() {
  if (_impl_.color_transform_ != nullptr) _impl_.color_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
void LayerProto::clear_blur_regions() {
  _impl_.blur_regions_.Clear();
}
void LayerProto::clear_destination_frame() {
  if (_impl_.destination_frame_ != nullptr) _impl_.destination_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
LayerProto::LayerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.LayerProto)
}
LayerProto::LayerProto(const LayerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LayerProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){from._impl_.children_}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.relatives_){from._impl_.relatives_}
    , /*decltype(_impl_._relatives_cached_byte_size_)*/{0}
    , decltype(_impl_.barrier_layer_){from._impl_.barrier_layer_}
    , /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.blur_regions_){from._impl_.blur_regions_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.dataspace_){}
    , decltype(_impl_.pixel_format_){}
    , decltype(_impl_.transparent_region_){nullptr}
    , decltype(_impl_.visible_region_){nullptr}
    , decltype(_impl_.damage_region_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.requested_position_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.crop_){nullptr}
    , decltype(_impl_.final_crop_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.requested_color_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.requested_transform_){nullptr}
    , decltype(_impl_.active_buffer_){nullptr}
    , decltype(_impl_.hwc_frame_){nullptr}
    , decltype(_impl_.hwc_crop_){nullptr}
    , decltype(_impl_.buffer_transform_){nullptr}
    , decltype(_impl_.effective_transform_){nullptr}
    , decltype(_impl_.source_bounds_){nullptr}
    , decltype(_impl_.bounds_){nullptr}
    , decltype(_impl_.screen_bounds_){nullptr}
    , decltype(_impl_.input_window_info_){nullptr}
    , decltype(_impl_.corner_radius_crop_){nullptr}
    , decltype(_impl_.color_transform_){nullptr}
    , decltype(_impl_.destination_frame_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.layer_stack_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.is_opaque_){}
    , decltype(_impl_.invalidate_){}
    , decltype(_impl_.refresh_pending_){}
    , decltype(_impl_.is_protected_){}
    , decltype(_impl_.parent_){}
    , decltype(_impl_.z_order_relative_of_){}
    , decltype(_impl_.queued_frames_){}
    , decltype(_impl_.hwc_transform_){}
    , decltype(_impl_.window_type_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.hwc_composition_type_){}
    , decltype(_impl_.curr_frame_){}
    , decltype(_impl_.effective_scaling_mode_){}
    , decltype(_impl_.corner_radius_){}
    , decltype(_impl_.shadow_radius_){}
    , decltype(_impl_.background_blur_radius_){}
    , decltype(_impl_.owner_uid_){}
    , decltype(_impl_.is_relative_of_){}
    , decltype(_impl_.is_trusted_overlay_){}
    , decltype(_impl_.requested_corner_radius_){}
    , decltype(_impl_.original_id_){}
    , decltype(_impl_.trusted_overlay_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dataspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataspace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dataspace()) {
    _this->_impl_.dataspace_.Set(from._internal_dataspace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pixel_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pixel_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pixel_format()) {
    _this->_impl_.pixel_format_.Set(from._internal_pixel_format(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_transparent_region()) {
    _this->_impl_.transparent_region_ = new ::perfetto::protos::RegionProto(*from._impl_.transparent_region_);
  }
  if (from._internal_has_visible_region()) {
    _this->_impl_.visible_region_ = new ::perfetto::protos::RegionProto(*from._impl_.visible_region_);
  }
  if (from._internal_has_damage_region()) {
    _this->_impl_.damage_region_ = new ::perfetto::protos::RegionProto(*from._impl_.damage_region_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::perfetto::protos::PositionProto(*from._impl_.position_);
  }
  if (from._internal_has_requested_position()) {
    _this->_impl_.requested_position_ = new ::perfetto::protos::PositionProto(*from._impl_.requested_position_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::perfetto::protos::SizeProto(*from._impl_.size_);
  }
  if (from._internal_has_crop()) {
    _this->_impl_.crop_ = new ::perfetto::protos::RectProto(*from._impl_.crop_);
  }
  if (from._internal_has_final_crop()) {
    _this->_impl_.final_crop_ = new ::perfetto::protos::RectProto(*from._impl_.final_crop_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::perfetto::protos::ColorProto(*from._impl_.color_);
  }
  if (from._internal_has_requested_color()) {
    _this->_impl_.requested_color_ = new ::perfetto::protos::ColorProto(*from._impl_.requested_color_);
  }
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::perfetto::protos::TransformProto(*from._impl_.transform_);
  }
  if (from._internal_has_requested_transform()) {
    _this->_impl_.requested_transform_ = new ::perfetto::protos::TransformProto(*from._impl_.requested_transform_);
  }
  if (from._internal_has_active_buffer()) {
    _this->_impl_.active_buffer_ = new ::perfetto::protos::ActiveBufferProto(*from._impl_.active_buffer_);
  }
  if (from._internal_has_hwc_frame()) {
    _this->_impl_.hwc_frame_ = new ::perfetto::protos::RectProto(*from._impl_.hwc_frame_);
  }
  if (from._internal_has_hwc_crop()) {
    _this->_impl_.hwc_crop_ = new ::perfetto::protos::FloatRectProto(*from._impl_.hwc_crop_);
  }
  if (from._internal_has_buffer_transform()) {
    _this->_impl_.buffer_transform_ = new ::perfetto::protos::TransformProto(*from._impl_.buffer_transform_);
  }
  if (from._internal_has_effective_transform()) {
    _this->_impl_.effective_transform_ = new ::perfetto::protos::TransformProto(*from._impl_.effective_transform_);
  }
  if (from._internal_has_source_bounds()) {
    _this->_impl_.source_bounds_ = new ::perfetto::protos::FloatRectProto(*from._impl_.source_bounds_);
  }
  if (from._internal_has_bounds()) {
    _this->_impl_.bounds_ = new ::perfetto::protos::FloatRectProto(*from._impl_.bounds_);
  }
  if (from._internal_has_screen_bounds()) {
    _this->_impl_.screen_bounds_ = new ::perfetto::protos::FloatRectProto(*from._impl_.screen_bounds_);
  }
  if (from._internal_has_input_window_info()) {
    _this->_impl_.input_window_info_ = new ::perfetto::protos::InputWindowInfoProto(*from._impl_.input_window_info_);
  }
  if (from._internal_has_corner_radius_crop()) {
    _this->_impl_.corner_radius_crop_ = new ::perfetto::protos::FloatRectProto(*from._impl_.corner_radius_crop_);
  }
  if (from._internal_has_color_transform()) {
    _this->_impl_.color_transform_ = new ::perfetto::protos::ColorTransformProto(*from._impl_.color_transform_);
  }
  if (from._internal_has_destination_frame()) {
    _this->_impl_.destination_frame_ = new ::perfetto::protos::RectProto(*from._impl_.destination_frame_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trusted_overlay_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.trusted_overlay_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.LayerProto)
}

inline void LayerProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){arena}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.relatives_){arena}
    , /*decltype(_impl_._relatives_cached_byte_size_)*/{0}
    , decltype(_impl_.barrier_layer_){arena}
    , /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.blur_regions_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.dataspace_){}
    , decltype(_impl_.pixel_format_){}
    , decltype(_impl_.transparent_region_){nullptr}
    , decltype(_impl_.visible_region_){nullptr}
    , decltype(_impl_.damage_region_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.requested_position_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.crop_){nullptr}
    , decltype(_impl_.final_crop_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.requested_color_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.requested_transform_){nullptr}
    , decltype(_impl_.active_buffer_){nullptr}
    , decltype(_impl_.hwc_frame_){nullptr}
    , decltype(_impl_.hwc_crop_){nullptr}
    , decltype(_impl_.buffer_transform_){nullptr}
    , decltype(_impl_.effective_transform_){nullptr}
    , decltype(_impl_.source_bounds_){nullptr}
    , decltype(_impl_.bounds_){nullptr}
    , decltype(_impl_.screen_bounds_){nullptr}
    , decltype(_impl_.input_window_info_){nullptr}
    , decltype(_impl_.corner_radius_crop_){nullptr}
    , decltype(_impl_.color_transform_){nullptr}
    , decltype(_impl_.destination_frame_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.layer_stack_){0u}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.is_opaque_){false}
    , decltype(_impl_.invalidate_){false}
    , decltype(_impl_.refresh_pending_){false}
    , decltype(_impl_.is_protected_){false}
    , decltype(_impl_.parent_){0}
    , decltype(_impl_.z_order_relative_of_){0}
    , decltype(_impl_.queued_frames_){0}
    , decltype(_impl_.hwc_transform_){0}
    , decltype(_impl_.window_type_){0}
    , decltype(_impl_.app_id_){0}
    , decltype(_impl_.hwc_composition_type_){0}
    , decltype(_impl_.curr_frame_){uint64_t{0u}}
    , decltype(_impl_.effective_scaling_mode_){0}
    , decltype(_impl_.corner_radius_){0}
    , decltype(_impl_.shadow_radius_){0}
    , decltype(_impl_.background_blur_radius_){0}
    , decltype(_impl_.owner_uid_){0u}
    , decltype(_impl_.is_relative_of_){false}
    , decltype(_impl_.is_trusted_overlay_){false}
    , decltype(_impl_.requested_corner_radius_){0}
    , decltype(_impl_.original_id_){0u}
    , decltype(_impl_.trusted_overlay_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataspace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pixel_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pixel_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LayerProto::~LayerProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.LayerProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayerProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedField();
  _impl_.relatives_.~RepeatedField();
  _impl_.barrier_layer_.~RepeatedPtrField();
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapFieldLite();
  _impl_.blur_regions_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.dataspace_.Destroy();
  _impl_.pixel_format_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transparent_region_;
  if (this != internal_default_instance()) delete _impl_.visible_region_;
  if (this != internal_default_instance()) delete _impl_.damage_region_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.requested_position_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.crop_;
  if (this != internal_default_instance()) delete _impl_.final_crop_;
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.requested_color_;
  if (this != internal_default_instance()) delete _impl_.transform_;
  if (this != internal_default_instance()) delete _impl_.requested_transform_;
  if (this != internal_default_instance()) delete _impl_.active_buffer_;
  if (this != internal_default_instance()) delete _impl_.hwc_frame_;
  if (this != internal_default_instance()) delete _impl_.hwc_crop_;
  if (this != internal_default_instance()) delete _impl_.buffer_transform_;
  if (this != internal_default_instance()) delete _impl_.effective_transform_;
  if (this != internal_default_instance()) delete _impl_.source_bounds_;
  if (this != internal_default_instance()) delete _impl_.bounds_;
  if (this != internal_default_instance()) delete _impl_.screen_bounds_;
  if (this != internal_default_instance()) delete _impl_.input_window_info_;
  if (this != internal_default_instance()) delete _impl_.corner_radius_crop_;
  if (this != internal_default_instance()) delete _impl_.color_transform_;
  if (this != internal_default_instance()) delete _impl_.destination_frame_;
}

void LayerProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.LayerProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.relatives_.Clear();
  _impl_.barrier_layer_.Clear();
  _impl_.metadata_.Clear();
  _impl_.blur_regions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.dataspace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pixel_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.transparent_region_ != nullptr);
      _impl_.transparent_region_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.visible_region_ != nullptr);
      _impl_.visible_region_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.damage_region_ != nullptr);
      _impl_.damage_region_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.requested_position_ != nullptr);
      _impl_.requested_position_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.crop_ != nullptr);
      _impl_.crop_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.final_crop_ != nullptr);
      _impl_.final_crop_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.requested_color_ != nullptr);
      _impl_.requested_color_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.requested_transform_ != nullptr);
      _impl_.requested_transform_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.active_buffer_ != nullptr);
      _impl_.active_buffer_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.hwc_frame_ != nullptr);
      _impl_.hwc_frame_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.hwc_crop_ != nullptr);
      _impl_.hwc_crop_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.buffer_transform_ != nullptr);
      _impl_.buffer_transform_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.effective_transform_ != nullptr);
      _impl_.effective_transform_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.source_bounds_ != nullptr);
      _impl_.source_bounds_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.bounds_ != nullptr);
      _impl_.bounds_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.screen_bounds_ != nullptr);
      _impl_.screen_bounds_->Clear();
    }
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.input_window_info_ != nullptr);
      _impl_.input_window_info_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.corner_radius_crop_ != nullptr);
      _impl_.corner_radius_crop_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.color_transform_ != nullptr);
      _impl_.color_transform_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.destination_frame_ != nullptr);
      _impl_.destination_frame_->Clear();
    }
  }
  if (cached_has_bits & 0xf0000000u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.is_opaque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hwc_transform_) -
        reinterpret_cast<char*>(&_impl_.is_opaque_)) + sizeof(_impl_.hwc_transform_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.window_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.background_blur_radius_) -
        reinterpret_cast<char*>(&_impl_.window_type_)) + sizeof(_impl_.background_blur_radius_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.owner_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.trusted_overlay_) -
        reinterpret_cast<char*>(&_impl_.owner_uid_)) + sizeof(_impl_.trusted_overlay_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LayerProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&_impl_._has_bits_);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 children = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 relatives = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_relatives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_relatives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegionProto transparent_region = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transparent_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegionProto visible_region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_visible_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RegionProto damage_region = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_damage_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 layer_stack = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_layer_stack(&_impl_._has_bits_);
          _impl_.layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_z(&_impl_._has_bits_);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PositionProto position = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.PositionProto requested_position = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_requested_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.SizeProto size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto crop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto final_crop = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_opaque = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_opaque(&_impl_._has_bits_);
          _impl_.is_opaque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool invalidate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_invalidate(&_impl_._has_bits_);
          _impl_.invalidate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dataspace = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_dataspace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pixel_format = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_pixel_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ColorProto color = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ColorProto requested_color = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_requested_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_flags(&_impl_._has_bits_);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TransformProto transform = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TransformProto requested_transform = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_requested_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 parent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_parent(&_impl_._has_bits_);
          _impl_.parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 z_order_relative_of = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_z_order_relative_of(&_impl_._has_bits_);
          _impl_.z_order_relative_of_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ActiveBufferProto active_buffer = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_buffer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 queued_frames = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_queued_frames(&_impl_._has_bits_);
          _impl_.queued_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool refresh_pending = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_refresh_pending(&_impl_._has_bits_);
          _impl_.refresh_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto hwc_frame = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_hwc_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FloatRectProto hwc_crop = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_hwc_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hwc_transform = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_hwc_transform(&_impl_._has_bits_);
          _impl_.hwc_transform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 window_type = 33 [deprecated = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_window_type(&_impl_._has_bits_);
          _impl_.window_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 app_id = 34 [deprecated = true];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&_impl_._has_bits_);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.HwcCompositionType hwc_composition_type = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::HwcCompositionType_IsValid(val))) {
            _internal_set_hwc_composition_type(static_cast<::perfetto::protos::HwcCompositionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(35, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_protected = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_protected(&_impl_._has_bits_);
          _impl_.is_protected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 curr_frame = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_curr_frame(&_impl_._has_bits_);
          _impl_.curr_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.BarrierLayerProto barrier_layer = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_barrier_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TransformProto buffer_transform = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffer_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 effective_scaling_mode = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_effective_scaling_mode(&_impl_._has_bits_);
          _impl_.effective_scaling_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float corner_radius = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_corner_radius(&_impl_._has_bits_);
          _impl_.corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> metadata = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TransformProto effective_transform = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_effective_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FloatRectProto source_bounds = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_bounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FloatRectProto bounds = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FloatRectProto screen_bounds = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen_bounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.InputWindowInfoProto input_window_info = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_window_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.FloatRectProto corner_radius_crop = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_corner_radius_crop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float shadow_radius = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_shadow_radius(&_impl_._has_bits_);
          _impl_.shadow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.ColorTransformProto color_transform = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_relative_of = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_is_relative_of(&_impl_._has_bits_);
          _impl_.is_relative_of_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 background_blur_radius = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_background_blur_radius(&_impl_._has_bits_);
          _impl_.background_blur_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_uid = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_owner_uid(&_impl_._has_bits_);
          _impl_.owner_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.BlurRegion blur_regions = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_blur_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trusted_overlay = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_is_trusted_overlay(&_impl_._has_bits_);
          _impl_.is_trusted_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float requested_corner_radius = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_requested_corner_radius(&_impl_._has_bits_);
          _impl_.requested_corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.RectProto destination_frame = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 original_id = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_original_id(&_impl_._has_bits_);
          _impl_.original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.TrustedOverlay trusted_overlay = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrustedOverlay_IsValid(val))) {
            _internal_set_trusted_overlay(static_cast<::perfetto::protos::TrustedOverlay>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(59, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayerProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.LayerProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated int32 children = 3 [packed = true];
  {
    int byte_size = _impl_._children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_children(), byte_size, target);
    }
  }

  // repeated int32 relatives = 4 [packed = true];
  {
    int byte_size = _impl_._relatives_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_relatives(), byte_size, target);
    }
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // optional .perfetto.protos.RegionProto transparent_region = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transparent_region(this),
        _Internal::transparent_region(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RegionProto visible_region = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::visible_region(this),
        _Internal::visible_region(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RegionProto damage_region = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::damage_region(this),
        _Internal::damage_region(this).GetCachedSize(), target, stream);
  }

  // optional uint32 layer_stack = 9;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_layer_stack(), target);
  }

  // optional int32 z = 10;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_z(), target);
  }

  // optional .perfetto.protos.PositionProto position = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.PositionProto requested_position = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::requested_position(this),
        _Internal::requested_position(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.SizeProto size = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RectProto crop = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::crop(this),
        _Internal::crop(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.RectProto final_crop = 15 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::final_crop(this),
        _Internal::final_crop(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_opaque = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_opaque(), target);
  }

  // optional bool invalidate = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_invalidate(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string dataspace = 18;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_dataspace(), target);
  }

  // optional string pixel_format = 19;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_pixel_format(), target);
  }

  // optional .perfetto.protos.ColorProto color = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ColorProto requested_color = 21;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::requested_color(this),
        _Internal::requested_color(this).GetCachedSize(), target, stream);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_flags(), target);
  }

  // optional .perfetto.protos.TransformProto transform = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TransformProto requested_transform = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::requested_transform(this),
        _Internal::requested_transform(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 parent = 25;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_parent(), target);
  }

  // optional int32 z_order_relative_of = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_z_order_relative_of(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ActiveBufferProto active_buffer = 27;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::active_buffer(this),
        _Internal::active_buffer(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 queued_frames = 28;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_queued_frames(), target);
  }

  // optional bool refresh_pending = 29;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_refresh_pending(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.RectProto hwc_frame = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::hwc_frame(this),
        _Internal::hwc_frame(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.FloatRectProto hwc_crop = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::hwc_crop(this),
        _Internal::hwc_crop(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 hwc_transform = 32;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_hwc_transform(), target);
  }

  // optional int32 window_type = 33 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_window_type(), target);
  }

  // optional int32 app_id = 34 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_app_id(), target);
  }

  // optional .perfetto.protos.HwcCompositionType hwc_composition_type = 35;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      35, this->_internal_hwc_composition_type(), target);
  }

  // optional bool is_protected = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_is_protected(), target);
  }

  // optional uint64 curr_frame = 37;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(37, this->_internal_curr_frame(), target);
  }

  // repeated .perfetto.protos.BarrierLayerProto barrier_layer = 38;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_barrier_layer_size()); i < n; i++) {
    const auto& repfield = this->_internal_barrier_layer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TransformProto buffer_transform = 39;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::buffer_transform(this),
        _Internal::buffer_transform(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 effective_scaling_mode = 40;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_effective_scaling_mode(), target);
  }

  // optional float corner_radius = 41;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_corner_radius(), target);
  }

  // map<int32, string> metadata = 42;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = LayerProto_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(42, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(42, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TransformProto effective_transform = 43;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::effective_transform(this),
        _Internal::effective_transform(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.FloatRectProto source_bounds = 44;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::source_bounds(this),
        _Internal::source_bounds(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.FloatRectProto bounds = 45;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::bounds(this),
        _Internal::bounds(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.FloatRectProto screen_bounds = 46;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::screen_bounds(this),
        _Internal::screen_bounds(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.InputWindowInfoProto input_window_info = 47;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::input_window_info(this),
        _Internal::input_window_info(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.FloatRectProto corner_radius_crop = 48;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::corner_radius_crop(this),
        _Internal::corner_radius_crop(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float shadow_radius = 49;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(49, this->_internal_shadow_radius(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ColorTransformProto color_transform = 50;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::color_transform(this),
        _Internal::color_transform(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_relative_of = 51;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_is_relative_of(), target);
  }

  // optional int32 background_blur_radius = 52;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(52, this->_internal_background_blur_radius(), target);
  }

  // optional uint32 owner_uid = 53;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_owner_uid(), target);
  }

  // repeated .perfetto.protos.BlurRegion blur_regions = 54;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blur_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_blur_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(54, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_trusted_overlay = 55;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(55, this->_internal_is_trusted_overlay(), target);
  }

  // optional float requested_corner_radius = 56;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(56, this->_internal_requested_corner_radius(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.RectProto destination_frame = 57;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::destination_frame(this),
        _Internal::destination_frame(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 original_id = 58;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_original_id(), target);
  }

  // optional .perfetto.protos.TrustedOverlay trusted_overlay = 59;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      59, this->_internal_trusted_overlay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.LayerProto)
  return target;
}

size_t LayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.LayerProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 children = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.children_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 relatives = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.relatives_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._relatives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .perfetto.protos.BarrierLayerProto barrier_layer = 38;
  total_size += 2UL * this->_internal_barrier_layer_size();
  for (const auto& msg : this->_impl_.barrier_layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, string> metadata = 42;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += LayerProto_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .perfetto.protos.BlurRegion blur_regions = 54;
  total_size += 2UL * this->_internal_blur_regions_size();
  for (const auto& msg : this->_impl_.blur_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string dataspace = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dataspace());
    }

    // optional string pixel_format = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pixel_format());
    }

    // optional .perfetto.protos.RegionProto transparent_region = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transparent_region_);
    }

    // optional .perfetto.protos.RegionProto visible_region = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.visible_region_);
    }

    // optional .perfetto.protos.RegionProto damage_region = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.damage_region_);
    }

    // optional .perfetto.protos.PositionProto position = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.PositionProto requested_position = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requested_position_);
    }

    // optional .perfetto.protos.SizeProto size = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.size_);
    }

    // optional .perfetto.protos.RectProto crop = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.crop_);
    }

    // optional .perfetto.protos.RectProto final_crop = 15 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.final_crop_);
    }

    // optional .perfetto.protos.ColorProto color = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional .perfetto.protos.ColorProto requested_color = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requested_color_);
    }

    // optional .perfetto.protos.TransformProto transform = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transform_);
    }

    // optional .perfetto.protos.TransformProto requested_transform = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.requested_transform_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .perfetto.protos.ActiveBufferProto active_buffer = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.active_buffer_);
    }

    // optional .perfetto.protos.RectProto hwc_frame = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hwc_frame_);
    }

    // optional .perfetto.protos.FloatRectProto hwc_crop = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hwc_crop_);
    }

    // optional .perfetto.protos.TransformProto buffer_transform = 39;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buffer_transform_);
    }

    // optional .perfetto.protos.TransformProto effective_transform = 43;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.effective_transform_);
    }

    // optional .perfetto.protos.FloatRectProto source_bounds = 44;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_bounds_);
    }

    // optional .perfetto.protos.FloatRectProto bounds = 45;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bounds_);
    }

    // optional .perfetto.protos.FloatRectProto screen_bounds = 46;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.screen_bounds_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .perfetto.protos.InputWindowInfoProto input_window_info = 47;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_window_info_);
    }

    // optional .perfetto.protos.FloatRectProto corner_radius_crop = 48;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.corner_radius_crop_);
    }

    // optional .perfetto.protos.ColorTransformProto color_transform = 50;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_transform_);
    }

    // optional .perfetto.protos.RectProto destination_frame = 57;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.destination_frame_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x10000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional uint32 layer_stack = 9;
    if (cached_has_bits & 0x20000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_layer_stack());
    }

    // optional int32 z = 10;
    if (cached_has_bits & 0x40000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
    }

    // optional uint32 flags = 22;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool is_opaque = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool invalidate = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool refresh_pending = 29;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool is_protected = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional int32 parent = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_parent());
    }

    // optional int32 z_order_relative_of = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_z_order_relative_of());
    }

    // optional int32 queued_frames = 28;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_queued_frames());
    }

    // optional int32 hwc_transform = 32;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_hwc_transform());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 window_type = 33 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_window_type());
    }

    // optional int32 app_id = 34 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_app_id());
    }

    // optional .perfetto.protos.HwcCompositionType hwc_composition_type = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_hwc_composition_type());
    }

    // optional uint64 curr_frame = 37;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_curr_frame());
    }

    // optional int32 effective_scaling_mode = 40;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_effective_scaling_mode());
    }

    // optional float corner_radius = 41;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float shadow_radius = 49;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional int32 background_blur_radius = 52;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_background_blur_radius());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional uint32 owner_uid = 53;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_owner_uid());
    }

    // optional bool is_relative_of = 51;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool is_trusted_overlay = 55;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional float requested_corner_radius = 56;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional uint32 original_id = 58;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_original_id());
    }

    // optional .perfetto.protos.TrustedOverlay trusted_overlay = 59;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_trusted_overlay());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LayerProto*>(
      &from));
}

void LayerProto::MergeFrom(const LayerProto& from) {
  LayerProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.LayerProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  _this->_impl_.relatives_.MergeFrom(from._impl_.relatives_);
  _this->_impl_.barrier_layer_.MergeFrom(from._impl_.barrier_layer_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _this->_impl_.blur_regions_.MergeFrom(from._impl_.blur_regions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_dataspace(from._internal_dataspace());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_pixel_format(from._internal_pixel_format());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_transparent_region()->::perfetto::protos::RegionProto::MergeFrom(
          from._internal_transparent_region());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_visible_region()->::perfetto::protos::RegionProto::MergeFrom(
          from._internal_visible_region());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_damage_region()->::perfetto::protos::RegionProto::MergeFrom(
          from._internal_damage_region());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_position()->::perfetto::protos::PositionProto::MergeFrom(
          from._internal_position());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_requested_position()->::perfetto::protos::PositionProto::MergeFrom(
          from._internal_requested_position());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_size()->::perfetto::protos::SizeProto::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_crop()->::perfetto::protos::RectProto::MergeFrom(
          from._internal_crop());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_final_crop()->::perfetto::protos::RectProto::MergeFrom(
          from._internal_final_crop());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_color()->::perfetto::protos::ColorProto::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_requested_color()->::perfetto::protos::ColorProto::MergeFrom(
          from._internal_requested_color());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_transform()->::perfetto::protos::TransformProto::MergeFrom(
          from._internal_transform());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_requested_transform()->::perfetto::protos::TransformProto::MergeFrom(
          from._internal_requested_transform());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_active_buffer()->::perfetto::protos::ActiveBufferProto::MergeFrom(
          from._internal_active_buffer());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_hwc_frame()->::perfetto::protos::RectProto::MergeFrom(
          from._internal_hwc_frame());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_hwc_crop()->::perfetto::protos::FloatRectProto::MergeFrom(
          from._internal_hwc_crop());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_buffer_transform()->::perfetto::protos::TransformProto::MergeFrom(
          from._internal_buffer_transform());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_effective_transform()->::perfetto::protos::TransformProto::MergeFrom(
          from._internal_effective_transform());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_source_bounds()->::perfetto::protos::FloatRectProto::MergeFrom(
          from._internal_source_bounds());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_bounds()->::perfetto::protos::FloatRectProto::MergeFrom(
          from._internal_bounds());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_screen_bounds()->::perfetto::protos::FloatRectProto::MergeFrom(
          from._internal_screen_bounds());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_input_window_info()->::perfetto::protos::InputWindowInfoProto::MergeFrom(
          from._internal_input_window_info());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_corner_radius_crop()->::perfetto::protos::FloatRectProto::MergeFrom(
          from._internal_corner_radius_crop());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_color_transform()->::perfetto::protos::ColorTransformProto::MergeFrom(
          from._internal_color_transform());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_destination_frame()->::perfetto::protos::RectProto::MergeFrom(
          from._internal_destination_frame());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.layer_stack_ = from._impl_.layer_stack_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.is_opaque_ = from._impl_.is_opaque_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.invalidate_ = from._impl_.invalidate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.refresh_pending_ = from._impl_.refresh_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_protected_ = from._impl_.is_protected_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.parent_ = from._impl_.parent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.z_order_relative_of_ = from._impl_.z_order_relative_of_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.queued_frames_ = from._impl_.queued_frames_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.hwc_transform_ = from._impl_.hwc_transform_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.window_type_ = from._impl_.window_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.hwc_composition_type_ = from._impl_.hwc_composition_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.curr_frame_ = from._impl_.curr_frame_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.effective_scaling_mode_ = from._impl_.effective_scaling_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.corner_radius_ = from._impl_.corner_radius_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.shadow_radius_ = from._impl_.shadow_radius_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.background_blur_radius_ = from._impl_.background_blur_radius_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.owner_uid_ = from._impl_.owner_uid_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.is_relative_of_ = from._impl_.is_relative_of_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.is_trusted_overlay_ = from._impl_.is_trusted_overlay_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.requested_corner_radius_ = from._impl_.requested_corner_radius_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.original_id_ = from._impl_.original_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.trusted_overlay_ = from._impl_.trusted_overlay_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LayerProto::CopyFrom(const LayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.LayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerProto::IsInitialized() const {
  return true;
}

void LayerProto::InternalSwap(LayerProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  _impl_.relatives_.InternalSwap(&other->_impl_.relatives_);
  _impl_.barrier_layer_.InternalSwap(&other->_impl_.barrier_layer_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  _impl_.blur_regions_.InternalSwap(&other->_impl_.blur_regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataspace_, lhs_arena,
      &other->_impl_.dataspace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pixel_format_, lhs_arena,
      &other->_impl_.pixel_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayerProto, _impl_.trusted_overlay_)
      + sizeof(LayerProto::_impl_.trusted_overlay_)
      - PROTOBUF_FIELD_OFFSET(LayerProto, _impl_.transparent_region_)>(
          reinterpret_cast<char*>(&_impl_.transparent_region_),
          reinterpret_cast<char*>(&other->_impl_.transparent_region_));
}

std::string LayerProto::GetTypeName() const {
  return "perfetto.protos.LayerProto";
}


// ===================================================================

class PositionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionProto>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PositionProto::PositionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PositionProto)
}
PositionProto::PositionProto(const PositionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PositionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PositionProto)
}

inline void PositionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

PositionProto::~PositionProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PositionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PositionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PositionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PositionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PositionProto)
  return target;
}

size_t PositionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PositionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PositionProto*>(
      &from));
}

void PositionProto::MergeFrom(const PositionProto& from) {
  PositionProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PositionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PositionProto::CopyFrom(const PositionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PositionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionProto::IsInitialized() const {
  return true;
}

void PositionProto::InternalSwap(PositionProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionProto, _impl_.y_)
      + sizeof(PositionProto::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PositionProto, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string PositionProto::GetTypeName() const {
  return "perfetto.protos.PositionProto";
}


// ===================================================================

class FloatRectProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatRectProto>()._impl_._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FloatRectProto::FloatRectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FloatRectProto)
}
FloatRectProto::FloatRectProto(const FloatRectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FloatRectProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_){}
    , decltype(_impl_.top_){}
    , decltype(_impl_.right_){}
    , decltype(_impl_.bottom_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.left_, &from._impl_.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bottom_) -
    reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.bottom_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FloatRectProto)
}

inline void FloatRectProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.top_){0}
    , decltype(_impl_.right_){0}
    , decltype(_impl_.bottom_){0}
  };
}

FloatRectProto::~FloatRectProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FloatRectProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatRectProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatRectProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatRectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FloatRectProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_) -
        reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.bottom_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FloatRectProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_left(&has_bits);
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_top(&has_bits);
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_right(&has_bits);
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_bottom(&has_bits);
          _impl_.bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatRectProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FloatRectProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_left(), target);
  }

  // optional float top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_top(), target);
  }

  // optional float right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_right(), target);
  }

  // optional float bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FloatRectProto)
  return target;
}

size_t FloatRectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FloatRectProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float bottom = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatRectProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FloatRectProto*>(
      &from));
}

void FloatRectProto::MergeFrom(const FloatRectProto& from) {
  FloatRectProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FloatRectProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.left_ = from._impl_.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.top_ = from._impl_.top_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.right_ = from._impl_.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bottom_ = from._impl_.bottom_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FloatRectProto::CopyFrom(const FloatRectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FloatRectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatRectProto::IsInitialized() const {
  return true;
}

void FloatRectProto::InternalSwap(FloatRectProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatRectProto, _impl_.bottom_)
      + sizeof(FloatRectProto::_impl_.bottom_)
      - PROTOBUF_FIELD_OFFSET(FloatRectProto, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

std::string FloatRectProto::GetTypeName() const {
  return "perfetto.protos.FloatRectProto";
}


// ===================================================================

class ActiveBufferProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveBufferProto>()._impl_._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ActiveBufferProto::ActiveBufferProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ActiveBufferProto)
}
ActiveBufferProto::ActiveBufferProto(const ActiveBufferProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ActiveBufferProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.stride_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.usage_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usage_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.usage_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ActiveBufferProto)
}

inline void ActiveBufferProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.stride_){0u}
    , decltype(_impl_.format_){0}
    , decltype(_impl_.usage_){uint64_t{0u}}
  };
}

ActiveBufferProto::~ActiveBufferProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ActiveBufferProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActiveBufferProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActiveBufferProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActiveBufferProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ActiveBufferProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.usage_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.usage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ActiveBufferProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stride(&has_bits);
          _impl_.stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_format(&has_bits);
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_usage(&has_bits);
          _impl_.usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActiveBufferProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ActiveBufferProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // optional uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // optional uint32 stride = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stride(), target);
  }

  // optional int32 format = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_format(), target);
  }

  // optional uint64 usage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_usage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ActiveBufferProto)
  return target;
}

size_t ActiveBufferProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ActiveBufferProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 stride = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stride());
    }

    // optional int32 format = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_format());
    }

    // optional uint64 usage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_usage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveBufferProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ActiveBufferProto*>(
      &from));
}

void ActiveBufferProto::MergeFrom(const ActiveBufferProto& from) {
  ActiveBufferProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ActiveBufferProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stride_ = from._impl_.stride_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.format_ = from._impl_.format_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.usage_ = from._impl_.usage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ActiveBufferProto::CopyFrom(const ActiveBufferProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ActiveBufferProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveBufferProto::IsInitialized() const {
  return true;
}

void ActiveBufferProto::InternalSwap(ActiveBufferProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActiveBufferProto, _impl_.usage_)
      + sizeof(ActiveBufferProto::_impl_.usage_)
      - PROTOBUF_FIELD_OFFSET(ActiveBufferProto, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

std::string ActiveBufferProto::GetTypeName() const {
  return "perfetto.protos.ActiveBufferProto";
}


// ===================================================================

class BarrierLayerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BarrierLayerProto>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BarrierLayerProto::BarrierLayerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BarrierLayerProto)
}
BarrierLayerProto::BarrierLayerProto(const BarrierLayerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BarrierLayerProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_number_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.frame_number_, &from._impl_.frame_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.frame_number_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BarrierLayerProto)
}

inline void BarrierLayerProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_number_){uint64_t{0u}}
    , decltype(_impl_.id_){0}
  };
}

BarrierLayerProto::~BarrierLayerProto() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BarrierLayerProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BarrierLayerProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BarrierLayerProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BarrierLayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BarrierLayerProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.frame_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.frame_number_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BarrierLayerProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frame_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_number(&has_bits);
          _impl_.frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BarrierLayerProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BarrierLayerProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 frame_number = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frame_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BarrierLayerProto)
  return target;
}

size_t BarrierLayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BarrierLayerProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 frame_number = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frame_number());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrierLayerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BarrierLayerProto*>(
      &from));
}

void BarrierLayerProto::MergeFrom(const BarrierLayerProto& from) {
  BarrierLayerProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BarrierLayerProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BarrierLayerProto::CopyFrom(const BarrierLayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BarrierLayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierLayerProto::IsInitialized() const {
  return true;
}

void BarrierLayerProto::InternalSwap(BarrierLayerProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BarrierLayerProto, _impl_.id_)
      + sizeof(BarrierLayerProto::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(BarrierLayerProto, _impl_.frame_number_)>(
          reinterpret_cast<char*>(&_impl_.frame_number_),
          reinterpret_cast<char*>(&other->_impl_.frame_number_));
}

std::string BarrierLayerProto::GetTypeName() const {
  return "perfetto.protos.BarrierLayerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayersTraceFileProto*
Arena::CreateMaybeMessage< ::perfetto::protos::LayersTraceFileProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayersTraceFileProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayersSnapshotProto*
Arena::CreateMaybeMessage< ::perfetto::protos::LayersSnapshotProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayersSnapshotProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayersProto*
Arena::CreateMaybeMessage< ::perfetto::protos::LayersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DisplayProto*
Arena::CreateMaybeMessage< ::perfetto::protos::DisplayProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DisplayProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerProto_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerProto_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerProto_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::LayerProto*
Arena::CreateMaybeMessage< ::perfetto::protos::LayerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::LayerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PositionProto*
Arena::CreateMaybeMessage< ::perfetto::protos::PositionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PositionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FloatRectProto*
Arena::CreateMaybeMessage< ::perfetto::protos::FloatRectProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FloatRectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ActiveBufferProto*
Arena::CreateMaybeMessage< ::perfetto::protos::ActiveBufferProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ActiveBufferProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BarrierLayerProto*
Arena::CreateMaybeMessage< ::perfetto::protos::BarrierLayerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BarrierLayerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
