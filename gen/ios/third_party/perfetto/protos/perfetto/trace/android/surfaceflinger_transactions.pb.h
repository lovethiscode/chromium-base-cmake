// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/surfaceflinger_transactions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/trace/android/surfaceflinger_common.pb.h"
#include "protos/perfetto/trace/android/graphics/rect.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class DisplayInfo;
struct DisplayInfoDefaultTypeInternal;
extern DisplayInfoDefaultTypeInternal _DisplayInfo_default_instance_;
class DisplayState;
struct DisplayStateDefaultTypeInternal;
extern DisplayStateDefaultTypeInternal _DisplayState_default_instance_;
class LayerCreationArgs;
struct LayerCreationArgsDefaultTypeInternal;
extern LayerCreationArgsDefaultTypeInternal _LayerCreationArgs_default_instance_;
class LayerState;
struct LayerStateDefaultTypeInternal;
extern LayerStateDefaultTypeInternal _LayerState_default_instance_;
class LayerState_BufferData;
struct LayerState_BufferDataDefaultTypeInternal;
extern LayerState_BufferDataDefaultTypeInternal _LayerState_BufferData_default_instance_;
class LayerState_Color3;
struct LayerState_Color3DefaultTypeInternal;
extern LayerState_Color3DefaultTypeInternal _LayerState_Color3_default_instance_;
class LayerState_Matrix22;
struct LayerState_Matrix22DefaultTypeInternal;
extern LayerState_Matrix22DefaultTypeInternal _LayerState_Matrix22_default_instance_;
class LayerState_WindowInfo;
struct LayerState_WindowInfoDefaultTypeInternal;
extern LayerState_WindowInfoDefaultTypeInternal _LayerState_WindowInfo_default_instance_;
class TransactionState;
struct TransactionStateDefaultTypeInternal;
extern TransactionStateDefaultTypeInternal _TransactionState_default_instance_;
class TransactionTraceEntry;
struct TransactionTraceEntryDefaultTypeInternal;
extern TransactionTraceEntryDefaultTypeInternal _TransactionTraceEntry_default_instance_;
class TransactionTraceFile;
struct TransactionTraceFileDefaultTypeInternal;
extern TransactionTraceFileDefaultTypeInternal _TransactionTraceFile_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::DisplayInfo* Arena::CreateMaybeMessage<::perfetto::protos::DisplayInfo>(Arena*);
template<> ::perfetto::protos::DisplayState* Arena::CreateMaybeMessage<::perfetto::protos::DisplayState>(Arena*);
template<> ::perfetto::protos::LayerCreationArgs* Arena::CreateMaybeMessage<::perfetto::protos::LayerCreationArgs>(Arena*);
template<> ::perfetto::protos::LayerState* Arena::CreateMaybeMessage<::perfetto::protos::LayerState>(Arena*);
template<> ::perfetto::protos::LayerState_BufferData* Arena::CreateMaybeMessage<::perfetto::protos::LayerState_BufferData>(Arena*);
template<> ::perfetto::protos::LayerState_Color3* Arena::CreateMaybeMessage<::perfetto::protos::LayerState_Color3>(Arena*);
template<> ::perfetto::protos::LayerState_Matrix22* Arena::CreateMaybeMessage<::perfetto::protos::LayerState_Matrix22>(Arena*);
template<> ::perfetto::protos::LayerState_WindowInfo* Arena::CreateMaybeMessage<::perfetto::protos::LayerState_WindowInfo>(Arena*);
template<> ::perfetto::protos::TransactionState* Arena::CreateMaybeMessage<::perfetto::protos::TransactionState>(Arena*);
template<> ::perfetto::protos::TransactionTraceEntry* Arena::CreateMaybeMessage<::perfetto::protos::TransactionTraceEntry>(Arena*);
template<> ::perfetto::protos::TransactionTraceFile* Arena::CreateMaybeMessage<::perfetto::protos::TransactionTraceFile>(Arena*);
template<> ::perfetto::protos::Transform* Arena::CreateMaybeMessage<::perfetto::protos::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum TransactionTraceFile_MagicNumber : int {
  TransactionTraceFile_MagicNumber_INVALID = 0,
  TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L = 1415073364,
  TransactionTraceFile_MagicNumber_MAGIC_NUMBER_H = 1162035538
};
bool TransactionTraceFile_MagicNumber_IsValid(int value);
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile_MagicNumber_MagicNumber_MIN = TransactionTraceFile_MagicNumber_INVALID;
constexpr TransactionTraceFile_MagicNumber TransactionTraceFile_MagicNumber_MagicNumber_MAX = TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L;
constexpr int TransactionTraceFile_MagicNumber_MagicNumber_ARRAYSIZE = TransactionTraceFile_MagicNumber_MagicNumber_MAX + 1;

const std::string& TransactionTraceFile_MagicNumber_Name(TransactionTraceFile_MagicNumber value);
template<typename T>
inline const std::string& TransactionTraceFile_MagicNumber_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionTraceFile_MagicNumber>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionTraceFile_MagicNumber_Name.");
  return TransactionTraceFile_MagicNumber_Name(static_cast<TransactionTraceFile_MagicNumber>(enum_t_value));
}
bool TransactionTraceFile_MagicNumber_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionTraceFile_MagicNumber* value);
enum LayerState_BufferData_BufferDataChange : int {
  LayerState_BufferData_BufferDataChange_BufferDataChangeNone = 0,
  LayerState_BufferData_BufferDataChange_fenceChanged = 1,
  LayerState_BufferData_BufferDataChange_frameNumberChanged = 2,
  LayerState_BufferData_BufferDataChange_cachedBufferChanged = 4
};
bool LayerState_BufferData_BufferDataChange_IsValid(int value);
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData_BufferDataChange_BufferDataChange_MIN = LayerState_BufferData_BufferDataChange_BufferDataChangeNone;
constexpr LayerState_BufferData_BufferDataChange LayerState_BufferData_BufferDataChange_BufferDataChange_MAX = LayerState_BufferData_BufferDataChange_cachedBufferChanged;
constexpr int LayerState_BufferData_BufferDataChange_BufferDataChange_ARRAYSIZE = LayerState_BufferData_BufferDataChange_BufferDataChange_MAX + 1;

const std::string& LayerState_BufferData_BufferDataChange_Name(LayerState_BufferData_BufferDataChange value);
template<typename T>
inline const std::string& LayerState_BufferData_BufferDataChange_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerState_BufferData_BufferDataChange>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerState_BufferData_BufferDataChange_Name.");
  return LayerState_BufferData_BufferDataChange_Name(static_cast<LayerState_BufferData_BufferDataChange>(enum_t_value));
}
bool LayerState_BufferData_BufferDataChange_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_BufferData_BufferDataChange* value);
enum LayerState_BufferData_PixelFormat : int {
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_UNKNOWN = 0,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM = -4,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSLUCENT = -3,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSPARENT = -2,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_OPAQUE = -1,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_8888 = 1,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBX_8888 = 2,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_888 = 3,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_565 = 4,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_BGRA_8888 = 5,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_5551 = 6,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_4444 = 7,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_FP16 = 22,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_1010102 = 43,
  LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8 = 56
};
bool LayerState_BufferData_PixelFormat_IsValid(int value);
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData_PixelFormat_PixelFormat_MIN = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM;
constexpr LayerState_BufferData_PixelFormat LayerState_BufferData_PixelFormat_PixelFormat_MAX = LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8;
constexpr int LayerState_BufferData_PixelFormat_PixelFormat_ARRAYSIZE = LayerState_BufferData_PixelFormat_PixelFormat_MAX + 1;

const std::string& LayerState_BufferData_PixelFormat_Name(LayerState_BufferData_PixelFormat value);
template<typename T>
inline const std::string& LayerState_BufferData_PixelFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerState_BufferData_PixelFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerState_BufferData_PixelFormat_Name.");
  return LayerState_BufferData_PixelFormat_Name(static_cast<LayerState_BufferData_PixelFormat>(enum_t_value));
}
bool LayerState_BufferData_PixelFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_BufferData_PixelFormat* value);
enum LayerState_ChangesLsb : int {
  LayerState_ChangesLsb_eChangesLsbNone = 0,
  LayerState_ChangesLsb_ePositionChanged = 1,
  LayerState_ChangesLsb_eLayerChanged = 2,
  LayerState_ChangesLsb_eAlphaChanged = 8,
  LayerState_ChangesLsb_eMatrixChanged = 16,
  LayerState_ChangesLsb_eTransparentRegionChanged = 32,
  LayerState_ChangesLsb_eFlagsChanged = 64,
  LayerState_ChangesLsb_eLayerStackChanged = 128,
  LayerState_ChangesLsb_eReleaseBufferListenerChanged = 1024,
  LayerState_ChangesLsb_eShadowRadiusChanged = 2048,
  LayerState_ChangesLsb_eBufferCropChanged = 8192,
  LayerState_ChangesLsb_eRelativeLayerChanged = 16384,
  LayerState_ChangesLsb_eReparent = 32768,
  LayerState_ChangesLsb_eColorChanged = 65536,
  LayerState_ChangesLsb_eBufferTransformChanged = 262144,
  LayerState_ChangesLsb_eTransformToDisplayInverseChanged = 524288,
  LayerState_ChangesLsb_eCropChanged = 1048576,
  LayerState_ChangesLsb_eBufferChanged = 2097152,
  LayerState_ChangesLsb_eAcquireFenceChanged = 4194304,
  LayerState_ChangesLsb_eDataspaceChanged = 8388608,
  LayerState_ChangesLsb_eHdrMetadataChanged = 16777216,
  LayerState_ChangesLsb_eSurfaceDamageRegionChanged = 33554432,
  LayerState_ChangesLsb_eApiChanged = 67108864,
  LayerState_ChangesLsb_eSidebandStreamChanged = 134217728,
  LayerState_ChangesLsb_eColorTransformChanged = 268435456,
  LayerState_ChangesLsb_eHasListenerCallbacksChanged = 536870912,
  LayerState_ChangesLsb_eInputInfoChanged = 1073741824,
  LayerState_ChangesLsb_eCornerRadiusChanged = -2147483647 - 1
};
bool LayerState_ChangesLsb_IsValid(int value);
constexpr LayerState_ChangesLsb LayerState_ChangesLsb_ChangesLsb_MIN = LayerState_ChangesLsb_eCornerRadiusChanged;
constexpr LayerState_ChangesLsb LayerState_ChangesLsb_ChangesLsb_MAX = LayerState_ChangesLsb_eInputInfoChanged;
constexpr int LayerState_ChangesLsb_ChangesLsb_ARRAYSIZE = LayerState_ChangesLsb_ChangesLsb_MAX + 1;

const std::string& LayerState_ChangesLsb_Name(LayerState_ChangesLsb value);
template<typename T>
inline const std::string& LayerState_ChangesLsb_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerState_ChangesLsb>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerState_ChangesLsb_Name.");
  return LayerState_ChangesLsb_Name(static_cast<LayerState_ChangesLsb>(enum_t_value));
}
bool LayerState_ChangesLsb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_ChangesLsb* value);
enum LayerState_ChangesMsb : int {
  LayerState_ChangesMsb_eChangesMsbNone = 0,
  LayerState_ChangesMsb_eDestinationFrameChanged = 1,
  LayerState_ChangesMsb_eCachedBufferChanged = 2,
  LayerState_ChangesMsb_eBackgroundColorChanged = 4,
  LayerState_ChangesMsb_eMetadataChanged = 8,
  LayerState_ChangesMsb_eColorSpaceAgnosticChanged = 16,
  LayerState_ChangesMsb_eFrameRateSelectionPriority = 32,
  LayerState_ChangesMsb_eFrameRateChanged = 64,
  LayerState_ChangesMsb_eBackgroundBlurRadiusChanged = 128,
  LayerState_ChangesMsb_eProducerDisconnect = 256,
  LayerState_ChangesMsb_eFixedTransformHintChanged = 512,
  LayerState_ChangesMsb_eFrameNumberChanged = 1024,
  LayerState_ChangesMsb_eBlurRegionsChanged = 2048,
  LayerState_ChangesMsb_eAutoRefreshChanged = 4096,
  LayerState_ChangesMsb_eStretchChanged = 8192,
  LayerState_ChangesMsb_eTrustedOverlayChanged = 16384,
  LayerState_ChangesMsb_eDropInputModeChanged = 32768
};
bool LayerState_ChangesMsb_IsValid(int value);
constexpr LayerState_ChangesMsb LayerState_ChangesMsb_ChangesMsb_MIN = LayerState_ChangesMsb_eChangesMsbNone;
constexpr LayerState_ChangesMsb LayerState_ChangesMsb_ChangesMsb_MAX = LayerState_ChangesMsb_eDropInputModeChanged;
constexpr int LayerState_ChangesMsb_ChangesMsb_ARRAYSIZE = LayerState_ChangesMsb_ChangesMsb_MAX + 1;

const std::string& LayerState_ChangesMsb_Name(LayerState_ChangesMsb value);
template<typename T>
inline const std::string& LayerState_ChangesMsb_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerState_ChangesMsb>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerState_ChangesMsb_Name.");
  return LayerState_ChangesMsb_Name(static_cast<LayerState_ChangesMsb>(enum_t_value));
}
bool LayerState_ChangesMsb_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_ChangesMsb* value);
enum LayerState_Flags : int {
  LayerState_Flags_eFlagsNone = 0,
  LayerState_Flags_eLayerHidden = 1,
  LayerState_Flags_eLayerOpaque = 2,
  LayerState_Flags_eLayerSkipScreenshot = 64,
  LayerState_Flags_eLayerSecure = 128,
  LayerState_Flags_eEnableBackpressure = 256,
  LayerState_Flags_eLayerIsDisplayDecoration = 512
};
bool LayerState_Flags_IsValid(int value);
constexpr LayerState_Flags LayerState_Flags_Flags_MIN = LayerState_Flags_eFlagsNone;
constexpr LayerState_Flags LayerState_Flags_Flags_MAX = LayerState_Flags_eLayerIsDisplayDecoration;
constexpr int LayerState_Flags_Flags_ARRAYSIZE = LayerState_Flags_Flags_MAX + 1;

const std::string& LayerState_Flags_Name(LayerState_Flags value);
template<typename T>
inline const std::string& LayerState_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerState_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerState_Flags_Name.");
  return LayerState_Flags_Name(static_cast<LayerState_Flags>(enum_t_value));
}
bool LayerState_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_Flags* value);
enum LayerState_DropInputMode : int {
  LayerState_DropInputMode_NONE = 0,
  LayerState_DropInputMode_ALL = 1,
  LayerState_DropInputMode_OBSCURED = 2
};
bool LayerState_DropInputMode_IsValid(int value);
constexpr LayerState_DropInputMode LayerState_DropInputMode_DropInputMode_MIN = LayerState_DropInputMode_NONE;
constexpr LayerState_DropInputMode LayerState_DropInputMode_DropInputMode_MAX = LayerState_DropInputMode_OBSCURED;
constexpr int LayerState_DropInputMode_DropInputMode_ARRAYSIZE = LayerState_DropInputMode_DropInputMode_MAX + 1;

const std::string& LayerState_DropInputMode_Name(LayerState_DropInputMode value);
template<typename T>
inline const std::string& LayerState_DropInputMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayerState_DropInputMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayerState_DropInputMode_Name.");
  return LayerState_DropInputMode_Name(static_cast<LayerState_DropInputMode>(enum_t_value));
}
bool LayerState_DropInputMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LayerState_DropInputMode* value);
enum DisplayState_Changes : int {
  DisplayState_Changes_eChangesNone = 0,
  DisplayState_Changes_eSurfaceChanged = 1,
  DisplayState_Changes_eLayerStackChanged = 2,
  DisplayState_Changes_eDisplayProjectionChanged = 4,
  DisplayState_Changes_eDisplaySizeChanged = 8,
  DisplayState_Changes_eFlagsChanged = 16
};
bool DisplayState_Changes_IsValid(int value);
constexpr DisplayState_Changes DisplayState_Changes_Changes_MIN = DisplayState_Changes_eChangesNone;
constexpr DisplayState_Changes DisplayState_Changes_Changes_MAX = DisplayState_Changes_eFlagsChanged;
constexpr int DisplayState_Changes_Changes_ARRAYSIZE = DisplayState_Changes_Changes_MAX + 1;

const std::string& DisplayState_Changes_Name(DisplayState_Changes value);
template<typename T>
inline const std::string& DisplayState_Changes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisplayState_Changes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisplayState_Changes_Name.");
  return DisplayState_Changes_Name(static_cast<DisplayState_Changes>(enum_t_value));
}
bool DisplayState_Changes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DisplayState_Changes* value);
// ===================================================================

class TransactionTraceFile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TransactionTraceFile) */ {
 public:
  inline TransactionTraceFile() : TransactionTraceFile(nullptr) {}
  ~TransactionTraceFile() override;
  explicit PROTOBUF_CONSTEXPR TransactionTraceFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionTraceFile(const TransactionTraceFile& from);
  TransactionTraceFile(TransactionTraceFile&& from) noexcept
    : TransactionTraceFile() {
    *this = ::std::move(from);
  }

  inline TransactionTraceFile& operator=(const TransactionTraceFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionTraceFile& operator=(TransactionTraceFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TransactionTraceFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionTraceFile* internal_default_instance() {
    return reinterpret_cast<const TransactionTraceFile*>(
               &_TransactionTraceFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionTraceFile& a, TransactionTraceFile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TransactionTraceFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionTraceFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionTraceFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionTraceFile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransactionTraceFile& from);
  void MergeFrom(const TransactionTraceFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionTraceFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TransactionTraceFile";
  }
  protected:
  explicit TransactionTraceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TransactionTraceFile_MagicNumber MagicNumber;
  static constexpr MagicNumber INVALID =
    TransactionTraceFile_MagicNumber_INVALID;
  static constexpr MagicNumber MAGIC_NUMBER_L =
    TransactionTraceFile_MagicNumber_MAGIC_NUMBER_L;
  static constexpr MagicNumber MAGIC_NUMBER_H =
    TransactionTraceFile_MagicNumber_MAGIC_NUMBER_H;
  static inline bool MagicNumber_IsValid(int value) {
    return TransactionTraceFile_MagicNumber_IsValid(value);
  }
  static constexpr MagicNumber MagicNumber_MIN =
    TransactionTraceFile_MagicNumber_MagicNumber_MIN;
  static constexpr MagicNumber MagicNumber_MAX =
    TransactionTraceFile_MagicNumber_MagicNumber_MAX;
  static constexpr int MagicNumber_ARRAYSIZE =
    TransactionTraceFile_MagicNumber_MagicNumber_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MagicNumber_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MagicNumber>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MagicNumber_Name.");
    return TransactionTraceFile_MagicNumber_Name(enum_t_value);
  }
  static inline bool MagicNumber_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MagicNumber* value) {
    return TransactionTraceFile_MagicNumber_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kMagicNumberFieldNumber = 1,
    kRealToElapsedTimeOffsetNanosFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // repeated .perfetto.protos.TransactionTraceEntry entry = 2;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::perfetto::protos::TransactionTraceEntry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionTraceEntry >*
      mutable_entry();
  private:
  const ::perfetto::protos::TransactionTraceEntry& _internal_entry(int index) const;
  ::perfetto::protos::TransactionTraceEntry* _internal_add_entry();
  public:
  const ::perfetto::protos::TransactionTraceEntry& entry(int index) const;
  ::perfetto::protos::TransactionTraceEntry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionTraceEntry >&
      entry() const;

  // optional fixed64 magic_number = 1;
  bool has_magic_number() const;
  private:
  bool _internal_has_magic_number() const;
  public:
  void clear_magic_number();
  uint64_t magic_number() const;
  void set_magic_number(uint64_t value);
  private:
  uint64_t _internal_magic_number() const;
  void _internal_set_magic_number(uint64_t value);
  public:

  // optional fixed64 real_to_elapsed_time_offset_nanos = 3;
  bool has_real_to_elapsed_time_offset_nanos() const;
  private:
  bool _internal_has_real_to_elapsed_time_offset_nanos() const;
  public:
  void clear_real_to_elapsed_time_offset_nanos();
  uint64_t real_to_elapsed_time_offset_nanos() const;
  void set_real_to_elapsed_time_offset_nanos(uint64_t value);
  private:
  uint64_t _internal_real_to_elapsed_time_offset_nanos() const;
  void _internal_set_real_to_elapsed_time_offset_nanos(uint64_t value);
  public:

  // optional uint32 version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TransactionTraceFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionTraceEntry > entry_;
    uint64_t magic_number_;
    uint64_t real_to_elapsed_time_offset_nanos_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class TransactionTraceEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TransactionTraceEntry) */ {
 public:
  inline TransactionTraceEntry() : TransactionTraceEntry(nullptr) {}
  ~TransactionTraceEntry() override;
  explicit PROTOBUF_CONSTEXPR TransactionTraceEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionTraceEntry(const TransactionTraceEntry& from);
  TransactionTraceEntry(TransactionTraceEntry&& from) noexcept
    : TransactionTraceEntry() {
    *this = ::std::move(from);
  }

  inline TransactionTraceEntry& operator=(const TransactionTraceEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionTraceEntry& operator=(TransactionTraceEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TransactionTraceEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionTraceEntry* internal_default_instance() {
    return reinterpret_cast<const TransactionTraceEntry*>(
               &_TransactionTraceEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionTraceEntry& a, TransactionTraceEntry& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TransactionTraceEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionTraceEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionTraceEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionTraceEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransactionTraceEntry& from);
  void MergeFrom(const TransactionTraceEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionTraceEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TransactionTraceEntry";
  }
  protected:
  explicit TransactionTraceEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
    kAddedLayersFieldNumber = 4,
    kDestroyedLayersFieldNumber = 5,
    kAddedDisplaysFieldNumber = 6,
    kRemovedDisplaysFieldNumber = 7,
    kDestroyedLayerHandlesFieldNumber = 8,
    kDisplaysFieldNumber = 10,
    kElapsedRealtimeNanosFieldNumber = 1,
    kVsyncIdFieldNumber = 2,
    kDisplaysChangedFieldNumber = 9,
  };
  // repeated .perfetto.protos.TransactionState transactions = 3;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::perfetto::protos::TransactionState* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionState >*
      mutable_transactions();
  private:
  const ::perfetto::protos::TransactionState& _internal_transactions(int index) const;
  ::perfetto::protos::TransactionState* _internal_add_transactions();
  public:
  const ::perfetto::protos::TransactionState& transactions(int index) const;
  ::perfetto::protos::TransactionState* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionState >&
      transactions() const;

  // repeated .perfetto.protos.LayerCreationArgs added_layers = 4;
  int added_layers_size() const;
  private:
  int _internal_added_layers_size() const;
  public:
  void clear_added_layers();
  ::perfetto::protos::LayerCreationArgs* mutable_added_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerCreationArgs >*
      mutable_added_layers();
  private:
  const ::perfetto::protos::LayerCreationArgs& _internal_added_layers(int index) const;
  ::perfetto::protos::LayerCreationArgs* _internal_add_added_layers();
  public:
  const ::perfetto::protos::LayerCreationArgs& added_layers(int index) const;
  ::perfetto::protos::LayerCreationArgs* add_added_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerCreationArgs >&
      added_layers() const;

  // repeated uint32 destroyed_layers = 5;
  int destroyed_layers_size() const;
  private:
  int _internal_destroyed_layers_size() const;
  public:
  void clear_destroyed_layers();
  private:
  uint32_t _internal_destroyed_layers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_destroyed_layers() const;
  void _internal_add_destroyed_layers(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_destroyed_layers();
  public:
  uint32_t destroyed_layers(int index) const;
  void set_destroyed_layers(int index, uint32_t value);
  void add_destroyed_layers(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      destroyed_layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_destroyed_layers();

  // repeated .perfetto.protos.DisplayState added_displays = 6;
  int added_displays_size() const;
  private:
  int _internal_added_displays_size() const;
  public:
  void clear_added_displays();
  ::perfetto::protos::DisplayState* mutable_added_displays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >*
      mutable_added_displays();
  private:
  const ::perfetto::protos::DisplayState& _internal_added_displays(int index) const;
  ::perfetto::protos::DisplayState* _internal_add_added_displays();
  public:
  const ::perfetto::protos::DisplayState& added_displays(int index) const;
  ::perfetto::protos::DisplayState* add_added_displays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >&
      added_displays() const;

  // repeated int32 removed_displays = 7;
  int removed_displays_size() const;
  private:
  int _internal_removed_displays_size() const;
  public:
  void clear_removed_displays();
  private:
  int32_t _internal_removed_displays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_removed_displays() const;
  void _internal_add_removed_displays(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_removed_displays();
  public:
  int32_t removed_displays(int index) const;
  void set_removed_displays(int index, int32_t value);
  void add_removed_displays(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      removed_displays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_removed_displays();

  // repeated uint32 destroyed_layer_handles = 8;
  int destroyed_layer_handles_size() const;
  private:
  int _internal_destroyed_layer_handles_size() const;
  public:
  void clear_destroyed_layer_handles();
  private:
  uint32_t _internal_destroyed_layer_handles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_destroyed_layer_handles() const;
  void _internal_add_destroyed_layer_handles(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_destroyed_layer_handles();
  public:
  uint32_t destroyed_layer_handles(int index) const;
  void set_destroyed_layer_handles(int index, uint32_t value);
  void add_destroyed_layer_handles(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      destroyed_layer_handles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_destroyed_layer_handles();

  // repeated .perfetto.protos.DisplayInfo displays = 10;
  int displays_size() const;
  private:
  int _internal_displays_size() const;
  public:
  void clear_displays();
  ::perfetto::protos::DisplayInfo* mutable_displays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayInfo >*
      mutable_displays();
  private:
  const ::perfetto::protos::DisplayInfo& _internal_displays(int index) const;
  ::perfetto::protos::DisplayInfo* _internal_add_displays();
  public:
  const ::perfetto::protos::DisplayInfo& displays(int index) const;
  ::perfetto::protos::DisplayInfo* add_displays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayInfo >&
      displays() const;

  // optional int64 elapsed_realtime_nanos = 1;
  bool has_elapsed_realtime_nanos() const;
  private:
  bool _internal_has_elapsed_realtime_nanos() const;
  public:
  void clear_elapsed_realtime_nanos();
  int64_t elapsed_realtime_nanos() const;
  void set_elapsed_realtime_nanos(int64_t value);
  private:
  int64_t _internal_elapsed_realtime_nanos() const;
  void _internal_set_elapsed_realtime_nanos(int64_t value);
  public:

  // optional int64 vsync_id = 2;
  bool has_vsync_id() const;
  private:
  bool _internal_has_vsync_id() const;
  public:
  void clear_vsync_id();
  int64_t vsync_id() const;
  void set_vsync_id(int64_t value);
  private:
  int64_t _internal_vsync_id() const;
  void _internal_set_vsync_id(int64_t value);
  public:

  // optional bool displays_changed = 9;
  bool has_displays_changed() const;
  private:
  bool _internal_has_displays_changed() const;
  public:
  void clear_displays_changed();
  bool displays_changed() const;
  void set_displays_changed(bool value);
  private:
  bool _internal_displays_changed() const;
  void _internal_set_displays_changed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TransactionTraceEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionState > transactions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerCreationArgs > added_layers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > destroyed_layers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState > added_displays_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > removed_displays_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > destroyed_layer_handles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayInfo > displays_;
    int64_t elapsed_realtime_nanos_;
    int64_t vsync_id_;
    bool displays_changed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class DisplayInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DisplayInfo) */ {
 public:
  inline DisplayInfo() : DisplayInfo(nullptr) {}
  ~DisplayInfo() override;
  explicit PROTOBUF_CONSTEXPR DisplayInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplayInfo(const DisplayInfo& from);
  DisplayInfo(DisplayInfo&& from) noexcept
    : DisplayInfo() {
    *this = ::std::move(from);
  }

  inline DisplayInfo& operator=(const DisplayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayInfo& operator=(DisplayInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisplayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplayInfo* internal_default_instance() {
    return reinterpret_cast<const DisplayInfo*>(
               &_DisplayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DisplayInfo& a, DisplayInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DisplayInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisplayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisplayInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisplayInfo& from);
  void MergeFrom(const DisplayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DisplayInfo";
  }
  protected:
  explicit DisplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformInverseFieldNumber = 5,
    kTransformFieldNumber = 6,
    kLayerStackFieldNumber = 1,
    kDisplayIdFieldNumber = 2,
    kLogicalWidthFieldNumber = 3,
    kLogicalHeightFieldNumber = 4,
    kReceivesInputFieldNumber = 7,
    kIsSecureFieldNumber = 8,
    kIsPrimaryFieldNumber = 9,
    kIsVirtualFieldNumber = 10,
    kRotationFlagsFieldNumber = 11,
    kTransformHintFieldNumber = 12,
  };
  // optional .perfetto.protos.Transform transform_inverse = 5;
  bool has_transform_inverse() const;
  private:
  bool _internal_has_transform_inverse() const;
  public:
  void clear_transform_inverse();
  const ::perfetto::protos::Transform& transform_inverse() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Transform* release_transform_inverse();
  ::perfetto::protos::Transform* mutable_transform_inverse();
  void set_allocated_transform_inverse(::perfetto::protos::Transform* transform_inverse);
  private:
  const ::perfetto::protos::Transform& _internal_transform_inverse() const;
  ::perfetto::protos::Transform* _internal_mutable_transform_inverse();
  public:
  void unsafe_arena_set_allocated_transform_inverse(
      ::perfetto::protos::Transform* transform_inverse);
  ::perfetto::protos::Transform* unsafe_arena_release_transform_inverse();

  // optional .perfetto.protos.Transform transform = 6;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::perfetto::protos::Transform& transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Transform* release_transform();
  ::perfetto::protos::Transform* mutable_transform();
  void set_allocated_transform(::perfetto::protos::Transform* transform);
  private:
  const ::perfetto::protos::Transform& _internal_transform() const;
  ::perfetto::protos::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::perfetto::protos::Transform* transform);
  ::perfetto::protos::Transform* unsafe_arena_release_transform();

  // optional uint32 layer_stack = 1;
  bool has_layer_stack() const;
  private:
  bool _internal_has_layer_stack() const;
  public:
  void clear_layer_stack();
  uint32_t layer_stack() const;
  void set_layer_stack(uint32_t value);
  private:
  uint32_t _internal_layer_stack() const;
  void _internal_set_layer_stack(uint32_t value);
  public:

  // optional int32 display_id = 2;
  bool has_display_id() const;
  private:
  bool _internal_has_display_id() const;
  public:
  void clear_display_id();
  int32_t display_id() const;
  void set_display_id(int32_t value);
  private:
  int32_t _internal_display_id() const;
  void _internal_set_display_id(int32_t value);
  public:

  // optional int32 logical_width = 3;
  bool has_logical_width() const;
  private:
  bool _internal_has_logical_width() const;
  public:
  void clear_logical_width();
  int32_t logical_width() const;
  void set_logical_width(int32_t value);
  private:
  int32_t _internal_logical_width() const;
  void _internal_set_logical_width(int32_t value);
  public:

  // optional int32 logical_height = 4;
  bool has_logical_height() const;
  private:
  bool _internal_has_logical_height() const;
  public:
  void clear_logical_height();
  int32_t logical_height() const;
  void set_logical_height(int32_t value);
  private:
  int32_t _internal_logical_height() const;
  void _internal_set_logical_height(int32_t value);
  public:

  // optional bool receives_input = 7;
  bool has_receives_input() const;
  private:
  bool _internal_has_receives_input() const;
  public:
  void clear_receives_input();
  bool receives_input() const;
  void set_receives_input(bool value);
  private:
  bool _internal_receives_input() const;
  void _internal_set_receives_input(bool value);
  public:

  // optional bool is_secure = 8;
  bool has_is_secure() const;
  private:
  bool _internal_has_is_secure() const;
  public:
  void clear_is_secure();
  bool is_secure() const;
  void set_is_secure(bool value);
  private:
  bool _internal_is_secure() const;
  void _internal_set_is_secure(bool value);
  public:

  // optional bool is_primary = 9;
  bool has_is_primary() const;
  private:
  bool _internal_has_is_primary() const;
  public:
  void clear_is_primary();
  bool is_primary() const;
  void set_is_primary(bool value);
  private:
  bool _internal_is_primary() const;
  void _internal_set_is_primary(bool value);
  public:

  // optional bool is_virtual = 10;
  bool has_is_virtual() const;
  private:
  bool _internal_has_is_virtual() const;
  public:
  void clear_is_virtual();
  bool is_virtual() const;
  void set_is_virtual(bool value);
  private:
  bool _internal_is_virtual() const;
  void _internal_set_is_virtual(bool value);
  public:

  // optional int32 rotation_flags = 11;
  bool has_rotation_flags() const;
  private:
  bool _internal_has_rotation_flags() const;
  public:
  void clear_rotation_flags();
  int32_t rotation_flags() const;
  void set_rotation_flags(int32_t value);
  private:
  int32_t _internal_rotation_flags() const;
  void _internal_set_rotation_flags(int32_t value);
  public:

  // optional int32 transform_hint = 12;
  bool has_transform_hint() const;
  private:
  bool _internal_has_transform_hint() const;
  public:
  void clear_transform_hint();
  int32_t transform_hint() const;
  void set_transform_hint(int32_t value);
  private:
  int32_t _internal_transform_hint() const;
  void _internal_set_transform_hint(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.DisplayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::Transform* transform_inverse_;
    ::perfetto::protos::Transform* transform_;
    uint32_t layer_stack_;
    int32_t display_id_;
    int32_t logical_width_;
    int32_t logical_height_;
    bool receives_input_;
    bool is_secure_;
    bool is_primary_;
    bool is_virtual_;
    int32_t rotation_flags_;
    int32_t transform_hint_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class LayerCreationArgs final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayerCreationArgs) */ {
 public:
  inline LayerCreationArgs() : LayerCreationArgs(nullptr) {}
  ~LayerCreationArgs() override;
  explicit PROTOBUF_CONSTEXPR LayerCreationArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerCreationArgs(const LayerCreationArgs& from);
  LayerCreationArgs(LayerCreationArgs&& from) noexcept
    : LayerCreationArgs() {
    *this = ::std::move(from);
  }

  inline LayerCreationArgs& operator=(const LayerCreationArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerCreationArgs& operator=(LayerCreationArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerCreationArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerCreationArgs* internal_default_instance() {
    return reinterpret_cast<const LayerCreationArgs*>(
               &_LayerCreationArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LayerCreationArgs& a, LayerCreationArgs& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerCreationArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerCreationArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerCreationArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerCreationArgs>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerCreationArgs& from);
  void MergeFrom(const LayerCreationArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerCreationArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayerCreationArgs";
  }
  protected:
  explicit LayerCreationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLayerIdFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kParentIdFieldNumber = 4,
    kMirrorFromIdFieldNumber = 5,
    kAddToRootFieldNumber = 6,
    kLayerStackToMirrorFieldNumber = 7,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 layer_id = 1;
  bool has_layer_id() const;
  private:
  bool _internal_has_layer_id() const;
  public:
  void clear_layer_id();
  uint32_t layer_id() const;
  void set_layer_id(uint32_t value);
  private:
  uint32_t _internal_layer_id() const;
  void _internal_set_layer_id(uint32_t value);
  public:

  // optional uint32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 parent_id = 4;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  uint32_t parent_id() const;
  void set_parent_id(uint32_t value);
  private:
  uint32_t _internal_parent_id() const;
  void _internal_set_parent_id(uint32_t value);
  public:

  // optional uint32 mirror_from_id = 5;
  bool has_mirror_from_id() const;
  private:
  bool _internal_has_mirror_from_id() const;
  public:
  void clear_mirror_from_id();
  uint32_t mirror_from_id() const;
  void set_mirror_from_id(uint32_t value);
  private:
  uint32_t _internal_mirror_from_id() const;
  void _internal_set_mirror_from_id(uint32_t value);
  public:

  // optional bool add_to_root = 6;
  bool has_add_to_root() const;
  private:
  bool _internal_has_add_to_root() const;
  public:
  void clear_add_to_root();
  bool add_to_root() const;
  void set_add_to_root(bool value);
  private:
  bool _internal_add_to_root() const;
  void _internal_set_add_to_root(bool value);
  public:

  // optional uint32 layer_stack_to_mirror = 7;
  bool has_layer_stack_to_mirror() const;
  private:
  bool _internal_has_layer_stack_to_mirror() const;
  public:
  void clear_layer_stack_to_mirror();
  uint32_t layer_stack_to_mirror() const;
  void set_layer_stack_to_mirror(uint32_t value);
  private:
  uint32_t _internal_layer_stack_to_mirror() const;
  void _internal_set_layer_stack_to_mirror(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayerCreationArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t layer_id_;
    uint32_t flags_;
    uint32_t parent_id_;
    uint32_t mirror_from_id_;
    bool add_to_root_;
    uint32_t layer_stack_to_mirror_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit PROTOBUF_CONSTEXPR Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDtdyFieldNumber = 3,
    kDsdyFieldNumber = 4,
    kTxFieldNumber = 5,
    kTyFieldNumber = 6,
  };
  // optional float dsdx = 1;
  bool has_dsdx() const;
  private:
  bool _internal_has_dsdx() const;
  public:
  void clear_dsdx();
  float dsdx() const;
  void set_dsdx(float value);
  private:
  float _internal_dsdx() const;
  void _internal_set_dsdx(float value);
  public:

  // optional float dtdx = 2;
  bool has_dtdx() const;
  private:
  bool _internal_has_dtdx() const;
  public:
  void clear_dtdx();
  float dtdx() const;
  void set_dtdx(float value);
  private:
  float _internal_dtdx() const;
  void _internal_set_dtdx(float value);
  public:

  // optional float dtdy = 3;
  bool has_dtdy() const;
  private:
  bool _internal_has_dtdy() const;
  public:
  void clear_dtdy();
  float dtdy() const;
  void set_dtdy(float value);
  private:
  float _internal_dtdy() const;
  void _internal_set_dtdy(float value);
  public:

  // optional float dsdy = 4;
  bool has_dsdy() const;
  private:
  bool _internal_has_dsdy() const;
  public:
  void clear_dsdy();
  float dsdy() const;
  void set_dsdy(float value);
  private:
  float _internal_dsdy() const;
  void _internal_set_dsdy(float value);
  public:

  // optional float tx = 5;
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  float tx() const;
  void set_tx(float value);
  private:
  float _internal_tx() const;
  void _internal_set_tx(float value);
  public:

  // optional float ty = 6;
  bool has_ty() const;
  private:
  bool _internal_has_ty() const;
  public:
  void clear_ty();
  float ty() const;
  void set_ty(float value);
  private:
  float _internal_ty() const;
  void _internal_set_ty(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float dsdx_;
    float dtdx_;
    float dtdy_;
    float dsdy_;
    float tx_;
    float ty_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class TransactionState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TransactionState) */ {
 public:
  inline TransactionState() : TransactionState(nullptr) {}
  ~TransactionState() override;
  explicit PROTOBUF_CONSTEXPR TransactionState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionState(const TransactionState& from);
  TransactionState(TransactionState&& from) noexcept
    : TransactionState() {
    *this = ::std::move(from);
  }

  inline TransactionState& operator=(const TransactionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionState& operator=(TransactionState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TransactionState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionState* internal_default_instance() {
    return reinterpret_cast<const TransactionState*>(
               &_TransactionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransactionState& a, TransactionState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TransactionState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransactionState& from);
  void MergeFrom(const TransactionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TransactionState";
  }
  protected:
  explicit TransactionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerChangesFieldNumber = 7,
    kDisplayChangesFieldNumber = 8,
    kMergedTransactionIdsFieldNumber = 9,
    kPidFieldNumber = 1,
    kUidFieldNumber = 2,
    kVsyncIdFieldNumber = 3,
    kPostTimeFieldNumber = 5,
    kTransactionIdFieldNumber = 6,
    kInputEventIdFieldNumber = 4,
  };
  // repeated .perfetto.protos.LayerState layer_changes = 7;
  int layer_changes_size() const;
  private:
  int _internal_layer_changes_size() const;
  public:
  void clear_layer_changes();
  ::perfetto::protos::LayerState* mutable_layer_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerState >*
      mutable_layer_changes();
  private:
  const ::perfetto::protos::LayerState& _internal_layer_changes(int index) const;
  ::perfetto::protos::LayerState* _internal_add_layer_changes();
  public:
  const ::perfetto::protos::LayerState& layer_changes(int index) const;
  ::perfetto::protos::LayerState* add_layer_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerState >&
      layer_changes() const;

  // repeated .perfetto.protos.DisplayState display_changes = 8;
  int display_changes_size() const;
  private:
  int _internal_display_changes_size() const;
  public:
  void clear_display_changes();
  ::perfetto::protos::DisplayState* mutable_display_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >*
      mutable_display_changes();
  private:
  const ::perfetto::protos::DisplayState& _internal_display_changes(int index) const;
  ::perfetto::protos::DisplayState* _internal_add_display_changes();
  public:
  const ::perfetto::protos::DisplayState& display_changes(int index) const;
  ::perfetto::protos::DisplayState* add_display_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >&
      display_changes() const;

  // repeated uint64 merged_transaction_ids = 9;
  int merged_transaction_ids_size() const;
  private:
  int _internal_merged_transaction_ids_size() const;
  public:
  void clear_merged_transaction_ids();
  private:
  uint64_t _internal_merged_transaction_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_merged_transaction_ids() const;
  void _internal_add_merged_transaction_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_merged_transaction_ids();
  public:
  uint64_t merged_transaction_ids(int index) const;
  void set_merged_transaction_ids(int index, uint64_t value);
  void add_merged_transaction_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      merged_transaction_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_merged_transaction_ids();

  // optional int32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // optional int32 uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // optional int64 vsync_id = 3;
  bool has_vsync_id() const;
  private:
  bool _internal_has_vsync_id() const;
  public:
  void clear_vsync_id();
  int64_t vsync_id() const;
  void set_vsync_id(int64_t value);
  private:
  int64_t _internal_vsync_id() const;
  void _internal_set_vsync_id(int64_t value);
  public:

  // optional int64 post_time = 5;
  bool has_post_time() const;
  private:
  bool _internal_has_post_time() const;
  public:
  void clear_post_time();
  int64_t post_time() const;
  void set_post_time(int64_t value);
  private:
  int64_t _internal_post_time() const;
  void _internal_set_post_time(int64_t value);
  public:

  // optional uint64 transaction_id = 6;
  bool has_transaction_id() const;
  private:
  bool _internal_has_transaction_id() const;
  public:
  void clear_transaction_id();
  uint64_t transaction_id() const;
  void set_transaction_id(uint64_t value);
  private:
  uint64_t _internal_transaction_id() const;
  void _internal_set_transaction_id(uint64_t value);
  public:

  // optional int32 input_event_id = 4;
  bool has_input_event_id() const;
  private:
  bool _internal_has_input_event_id() const;
  public:
  void clear_input_event_id();
  int32_t input_event_id() const;
  void set_input_event_id(int32_t value);
  private:
  int32_t _internal_input_event_id() const;
  void _internal_set_input_event_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TransactionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerState > layer_changes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState > display_changes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > merged_transaction_ids_;
    int32_t pid_;
    int32_t uid_;
    int64_t vsync_id_;
    int64_t post_time_;
    uint64_t transaction_id_;
    int32_t input_event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class LayerState_Matrix22 final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayerState.Matrix22) */ {
 public:
  inline LayerState_Matrix22() : LayerState_Matrix22(nullptr) {}
  ~LayerState_Matrix22() override;
  explicit PROTOBUF_CONSTEXPR LayerState_Matrix22(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerState_Matrix22(const LayerState_Matrix22& from);
  LayerState_Matrix22(LayerState_Matrix22&& from) noexcept
    : LayerState_Matrix22() {
    *this = ::std::move(from);
  }

  inline LayerState_Matrix22& operator=(const LayerState_Matrix22& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerState_Matrix22& operator=(LayerState_Matrix22&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerState_Matrix22& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerState_Matrix22* internal_default_instance() {
    return reinterpret_cast<const LayerState_Matrix22*>(
               &_LayerState_Matrix22_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LayerState_Matrix22& a, LayerState_Matrix22& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerState_Matrix22* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerState_Matrix22* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerState_Matrix22* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerState_Matrix22>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerState_Matrix22& from);
  void MergeFrom(const LayerState_Matrix22& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerState_Matrix22* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayerState.Matrix22";
  }
  protected:
  explicit LayerState_Matrix22(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDtdyFieldNumber = 3,
    kDsdyFieldNumber = 4,
  };
  // optional float dsdx = 1;
  bool has_dsdx() const;
  private:
  bool _internal_has_dsdx() const;
  public:
  void clear_dsdx();
  float dsdx() const;
  void set_dsdx(float value);
  private:
  float _internal_dsdx() const;
  void _internal_set_dsdx(float value);
  public:

  // optional float dtdx = 2;
  bool has_dtdx() const;
  private:
  bool _internal_has_dtdx() const;
  public:
  void clear_dtdx();
  float dtdx() const;
  void set_dtdx(float value);
  private:
  float _internal_dtdx() const;
  void _internal_set_dtdx(float value);
  public:

  // optional float dtdy = 3;
  bool has_dtdy() const;
  private:
  bool _internal_has_dtdy() const;
  public:
  void clear_dtdy();
  float dtdy() const;
  void set_dtdy(float value);
  private:
  float _internal_dtdy() const;
  void _internal_set_dtdy(float value);
  public:

  // optional float dsdy = 4;
  bool has_dsdy() const;
  private:
  bool _internal_has_dsdy() const;
  public:
  void clear_dsdy();
  float dsdy() const;
  void set_dsdy(float value);
  private:
  float _internal_dsdy() const;
  void _internal_set_dsdy(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayerState.Matrix22)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float dsdx_;
    float dtdx_;
    float dtdy_;
    float dsdy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class LayerState_Color3 final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayerState.Color3) */ {
 public:
  inline LayerState_Color3() : LayerState_Color3(nullptr) {}
  ~LayerState_Color3() override;
  explicit PROTOBUF_CONSTEXPR LayerState_Color3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerState_Color3(const LayerState_Color3& from);
  LayerState_Color3(LayerState_Color3&& from) noexcept
    : LayerState_Color3() {
    *this = ::std::move(from);
  }

  inline LayerState_Color3& operator=(const LayerState_Color3& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerState_Color3& operator=(LayerState_Color3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerState_Color3& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerState_Color3* internal_default_instance() {
    return reinterpret_cast<const LayerState_Color3*>(
               &_LayerState_Color3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LayerState_Color3& a, LayerState_Color3& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerState_Color3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerState_Color3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerState_Color3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerState_Color3>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerState_Color3& from);
  void MergeFrom(const LayerState_Color3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerState_Color3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayerState.Color3";
  }
  protected:
  explicit LayerState_Color3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // optional float r = 1;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // optional float g = 2;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // optional float b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayerState.Color3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float r_;
    float g_;
    float b_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class LayerState_BufferData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayerState.BufferData) */ {
 public:
  inline LayerState_BufferData() : LayerState_BufferData(nullptr) {}
  ~LayerState_BufferData() override;
  explicit PROTOBUF_CONSTEXPR LayerState_BufferData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerState_BufferData(const LayerState_BufferData& from);
  LayerState_BufferData(LayerState_BufferData&& from) noexcept
    : LayerState_BufferData() {
    *this = ::std::move(from);
  }

  inline LayerState_BufferData& operator=(const LayerState_BufferData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerState_BufferData& operator=(LayerState_BufferData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerState_BufferData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerState_BufferData* internal_default_instance() {
    return reinterpret_cast<const LayerState_BufferData*>(
               &_LayerState_BufferData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LayerState_BufferData& a, LayerState_BufferData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerState_BufferData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerState_BufferData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerState_BufferData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerState_BufferData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerState_BufferData& from);
  void MergeFrom(const LayerState_BufferData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerState_BufferData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayerState.BufferData";
  }
  protected:
  explicit LayerState_BufferData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LayerState_BufferData_BufferDataChange BufferDataChange;
  static constexpr BufferDataChange BufferDataChangeNone =
    LayerState_BufferData_BufferDataChange_BufferDataChangeNone;
  static constexpr BufferDataChange fenceChanged =
    LayerState_BufferData_BufferDataChange_fenceChanged;
  static constexpr BufferDataChange frameNumberChanged =
    LayerState_BufferData_BufferDataChange_frameNumberChanged;
  static constexpr BufferDataChange cachedBufferChanged =
    LayerState_BufferData_BufferDataChange_cachedBufferChanged;
  static inline bool BufferDataChange_IsValid(int value) {
    return LayerState_BufferData_BufferDataChange_IsValid(value);
  }
  static constexpr BufferDataChange BufferDataChange_MIN =
    LayerState_BufferData_BufferDataChange_BufferDataChange_MIN;
  static constexpr BufferDataChange BufferDataChange_MAX =
    LayerState_BufferData_BufferDataChange_BufferDataChange_MAX;
  static constexpr int BufferDataChange_ARRAYSIZE =
    LayerState_BufferData_BufferDataChange_BufferDataChange_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BufferDataChange_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BufferDataChange>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BufferDataChange_Name.");
    return LayerState_BufferData_BufferDataChange_Name(enum_t_value);
  }
  static inline bool BufferDataChange_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BufferDataChange* value) {
    return LayerState_BufferData_BufferDataChange_Parse(name, value);
  }

  typedef LayerState_BufferData_PixelFormat PixelFormat;
  static constexpr PixelFormat PIXEL_FORMAT_UNKNOWN =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_UNKNOWN;
  static constexpr PixelFormat PIXEL_FORMAT_CUSTOM =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_CUSTOM;
  static constexpr PixelFormat PIXEL_FORMAT_TRANSLUCENT =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSLUCENT;
  static constexpr PixelFormat PIXEL_FORMAT_TRANSPARENT =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_TRANSPARENT;
  static constexpr PixelFormat PIXEL_FORMAT_OPAQUE =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_OPAQUE;
  static constexpr PixelFormat PIXEL_FORMAT_RGBA_8888 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_8888;
  static constexpr PixelFormat PIXEL_FORMAT_RGBX_8888 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBX_8888;
  static constexpr PixelFormat PIXEL_FORMAT_RGB_888 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_888;
  static constexpr PixelFormat PIXEL_FORMAT_RGB_565 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGB_565;
  static constexpr PixelFormat PIXEL_FORMAT_BGRA_8888 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_BGRA_8888;
  static constexpr PixelFormat PIXEL_FORMAT_RGBA_5551 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_5551;
  static constexpr PixelFormat PIXEL_FORMAT_RGBA_4444 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_4444;
  static constexpr PixelFormat PIXEL_FORMAT_RGBA_FP16 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_FP16;
  static constexpr PixelFormat PIXEL_FORMAT_RGBA_1010102 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_RGBA_1010102;
  static constexpr PixelFormat PIXEL_FORMAT_R_8 =
    LayerState_BufferData_PixelFormat_PIXEL_FORMAT_R_8;
  static inline bool PixelFormat_IsValid(int value) {
    return LayerState_BufferData_PixelFormat_IsValid(value);
  }
  static constexpr PixelFormat PixelFormat_MIN =
    LayerState_BufferData_PixelFormat_PixelFormat_MIN;
  static constexpr PixelFormat PixelFormat_MAX =
    LayerState_BufferData_PixelFormat_PixelFormat_MAX;
  static constexpr int PixelFormat_ARRAYSIZE =
    LayerState_BufferData_PixelFormat_PixelFormat_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PixelFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PixelFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PixelFormat_Name.");
    return LayerState_BufferData_PixelFormat_Name(enum_t_value);
  }
  static inline bool PixelFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PixelFormat* value) {
    return LayerState_BufferData_PixelFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBufferIdFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFrameNumberFieldNumber = 4,
    kCachedBufferIdFieldNumber = 6,
    kFlagsFieldNumber = 5,
    kPixelFormatFieldNumber = 7,
    kUsageFieldNumber = 8,
  };
  // optional uint64 buffer_id = 1;
  bool has_buffer_id() const;
  private:
  bool _internal_has_buffer_id() const;
  public:
  void clear_buffer_id();
  uint64_t buffer_id() const;
  void set_buffer_id(uint64_t value);
  private:
  uint64_t _internal_buffer_id() const;
  void _internal_set_buffer_id(uint64_t value);
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint64 frame_number = 4;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  uint64_t frame_number() const;
  void set_frame_number(uint64_t value);
  private:
  uint64_t _internal_frame_number() const;
  void _internal_set_frame_number(uint64_t value);
  public:

  // optional uint64 cached_buffer_id = 6;
  bool has_cached_buffer_id() const;
  private:
  bool _internal_has_cached_buffer_id() const;
  public:
  void clear_cached_buffer_id();
  uint64_t cached_buffer_id() const;
  void set_cached_buffer_id(uint64_t value);
  private:
  uint64_t _internal_cached_buffer_id() const;
  void _internal_set_cached_buffer_id(uint64_t value);
  public:

  // optional uint32 flags = 5;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional .perfetto.protos.LayerState.BufferData.PixelFormat pixel_format = 7;
  bool has_pixel_format() const;
  private:
  bool _internal_has_pixel_format() const;
  public:
  void clear_pixel_format();
  ::perfetto::protos::LayerState_BufferData_PixelFormat pixel_format() const;
  void set_pixel_format(::perfetto::protos::LayerState_BufferData_PixelFormat value);
  private:
  ::perfetto::protos::LayerState_BufferData_PixelFormat _internal_pixel_format() const;
  void _internal_set_pixel_format(::perfetto::protos::LayerState_BufferData_PixelFormat value);
  public:

  // optional uint64 usage = 8;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  uint64_t usage() const;
  void set_usage(uint64_t value);
  private:
  uint64_t _internal_usage() const;
  void _internal_set_usage(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayerState.BufferData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t buffer_id_;
    uint32_t width_;
    uint32_t height_;
    uint64_t frame_number_;
    uint64_t cached_buffer_id_;
    uint32_t flags_;
    int pixel_format_;
    uint64_t usage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class LayerState_WindowInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayerState.WindowInfo) */ {
 public:
  inline LayerState_WindowInfo() : LayerState_WindowInfo(nullptr) {}
  ~LayerState_WindowInfo() override;
  explicit PROTOBUF_CONSTEXPR LayerState_WindowInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerState_WindowInfo(const LayerState_WindowInfo& from);
  LayerState_WindowInfo(LayerState_WindowInfo&& from) noexcept
    : LayerState_WindowInfo() {
    *this = ::std::move(from);
  }

  inline LayerState_WindowInfo& operator=(const LayerState_WindowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerState_WindowInfo& operator=(LayerState_WindowInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerState_WindowInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerState_WindowInfo* internal_default_instance() {
    return reinterpret_cast<const LayerState_WindowInfo*>(
               &_LayerState_WindowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LayerState_WindowInfo& a, LayerState_WindowInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerState_WindowInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerState_WindowInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerState_WindowInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerState_WindowInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerState_WindowInfo& from);
  void MergeFrom(const LayerState_WindowInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerState_WindowInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayerState.WindowInfo";
  }
  protected:
  explicit LayerState_WindowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTouchableRegionFieldNumber = 3,
    kTouchableRegionCropFieldNumber = 10,
    kTransformFieldNumber = 11,
    kLayoutParamsFlagsFieldNumber = 1,
    kLayoutParamsTypeFieldNumber = 2,
    kSurfaceInsetFieldNumber = 4,
    kFocusableFieldNumber = 5,
    kHasWallpaperFieldNumber = 6,
    kReplaceTouchableRegionWithCropFieldNumber = 9,
    kGlobalScaleFactorFieldNumber = 7,
    kCropLayerIdFieldNumber = 8,
    kInputConfigFieldNumber = 12,
  };
  // optional .perfetto.protos.RegionProto touchable_region = 3;
  bool has_touchable_region() const;
  private:
  bool _internal_has_touchable_region() const;
  public:
  void clear_touchable_region();
  const ::perfetto::protos::RegionProto& touchable_region() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegionProto* release_touchable_region();
  ::perfetto::protos::RegionProto* mutable_touchable_region();
  void set_allocated_touchable_region(::perfetto::protos::RegionProto* touchable_region);
  private:
  const ::perfetto::protos::RegionProto& _internal_touchable_region() const;
  ::perfetto::protos::RegionProto* _internal_mutable_touchable_region();
  public:
  void unsafe_arena_set_allocated_touchable_region(
      ::perfetto::protos::RegionProto* touchable_region);
  ::perfetto::protos::RegionProto* unsafe_arena_release_touchable_region();

  // optional .perfetto.protos.RectProto touchable_region_crop = 10;
  bool has_touchable_region_crop() const;
  private:
  bool _internal_has_touchable_region_crop() const;
  public:
  void clear_touchable_region_crop();
  const ::perfetto::protos::RectProto& touchable_region_crop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_touchable_region_crop();
  ::perfetto::protos::RectProto* mutable_touchable_region_crop();
  void set_allocated_touchable_region_crop(::perfetto::protos::RectProto* touchable_region_crop);
  private:
  const ::perfetto::protos::RectProto& _internal_touchable_region_crop() const;
  ::perfetto::protos::RectProto* _internal_mutable_touchable_region_crop();
  public:
  void unsafe_arena_set_allocated_touchable_region_crop(
      ::perfetto::protos::RectProto* touchable_region_crop);
  ::perfetto::protos::RectProto* unsafe_arena_release_touchable_region_crop();

  // optional .perfetto.protos.Transform transform = 11;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::perfetto::protos::Transform& transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Transform* release_transform();
  ::perfetto::protos::Transform* mutable_transform();
  void set_allocated_transform(::perfetto::protos::Transform* transform);
  private:
  const ::perfetto::protos::Transform& _internal_transform() const;
  ::perfetto::protos::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::perfetto::protos::Transform* transform);
  ::perfetto::protos::Transform* unsafe_arena_release_transform();

  // optional uint32 layout_params_flags = 1;
  bool has_layout_params_flags() const;
  private:
  bool _internal_has_layout_params_flags() const;
  public:
  void clear_layout_params_flags();
  uint32_t layout_params_flags() const;
  void set_layout_params_flags(uint32_t value);
  private:
  uint32_t _internal_layout_params_flags() const;
  void _internal_set_layout_params_flags(uint32_t value);
  public:

  // optional int32 layout_params_type = 2;
  bool has_layout_params_type() const;
  private:
  bool _internal_has_layout_params_type() const;
  public:
  void clear_layout_params_type();
  int32_t layout_params_type() const;
  void set_layout_params_type(int32_t value);
  private:
  int32_t _internal_layout_params_type() const;
  void _internal_set_layout_params_type(int32_t value);
  public:

  // optional int32 surface_inset = 4;
  bool has_surface_inset() const;
  private:
  bool _internal_has_surface_inset() const;
  public:
  void clear_surface_inset();
  int32_t surface_inset() const;
  void set_surface_inset(int32_t value);
  private:
  int32_t _internal_surface_inset() const;
  void _internal_set_surface_inset(int32_t value);
  public:

  // optional bool focusable = 5;
  bool has_focusable() const;
  private:
  bool _internal_has_focusable() const;
  public:
  void clear_focusable();
  bool focusable() const;
  void set_focusable(bool value);
  private:
  bool _internal_focusable() const;
  void _internal_set_focusable(bool value);
  public:

  // optional bool has_wallpaper = 6;
  bool has_has_wallpaper() const;
  private:
  bool _internal_has_has_wallpaper() const;
  public:
  void clear_has_wallpaper();
  bool has_wallpaper() const;
  void set_has_wallpaper(bool value);
  private:
  bool _internal_has_wallpaper() const;
  void _internal_set_has_wallpaper(bool value);
  public:

  // optional bool replace_touchable_region_with_crop = 9;
  bool has_replace_touchable_region_with_crop() const;
  private:
  bool _internal_has_replace_touchable_region_with_crop() const;
  public:
  void clear_replace_touchable_region_with_crop();
  bool replace_touchable_region_with_crop() const;
  void set_replace_touchable_region_with_crop(bool value);
  private:
  bool _internal_replace_touchable_region_with_crop() const;
  void _internal_set_replace_touchable_region_with_crop(bool value);
  public:

  // optional float global_scale_factor = 7;
  bool has_global_scale_factor() const;
  private:
  bool _internal_has_global_scale_factor() const;
  public:
  void clear_global_scale_factor();
  float global_scale_factor() const;
  void set_global_scale_factor(float value);
  private:
  float _internal_global_scale_factor() const;
  void _internal_set_global_scale_factor(float value);
  public:

  // optional uint32 crop_layer_id = 8;
  bool has_crop_layer_id() const;
  private:
  bool _internal_has_crop_layer_id() const;
  public:
  void clear_crop_layer_id();
  uint32_t crop_layer_id() const;
  void set_crop_layer_id(uint32_t value);
  private:
  uint32_t _internal_crop_layer_id() const;
  void _internal_set_crop_layer_id(uint32_t value);
  public:

  // optional uint32 input_config = 12;
  bool has_input_config() const;
  private:
  bool _internal_has_input_config() const;
  public:
  void clear_input_config();
  uint32_t input_config() const;
  void set_input_config(uint32_t value);
  private:
  uint32_t _internal_input_config() const;
  void _internal_set_input_config(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayerState.WindowInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::RegionProto* touchable_region_;
    ::perfetto::protos::RectProto* touchable_region_crop_;
    ::perfetto::protos::Transform* transform_;
    uint32_t layout_params_flags_;
    int32_t layout_params_type_;
    int32_t surface_inset_;
    bool focusable_;
    bool has_wallpaper_;
    bool replace_touchable_region_with_crop_;
    float global_scale_factor_;
    uint32_t crop_layer_id_;
    uint32_t input_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class LayerState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.LayerState) */ {
 public:
  inline LayerState() : LayerState(nullptr) {}
  ~LayerState() override;
  explicit PROTOBUF_CONSTEXPR LayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerState(const LayerState& from);
  LayerState(LayerState&& from) noexcept
    : LayerState() {
    *this = ::std::move(from);
  }

  inline LayerState& operator=(const LayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerState& operator=(LayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerState* internal_default_instance() {
    return reinterpret_cast<const LayerState*>(
               &_LayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LayerState& a, LayerState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LayerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LayerState& from);
  void MergeFrom(const LayerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.LayerState";
  }
  protected:
  explicit LayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LayerState_Matrix22 Matrix22;
  typedef LayerState_Color3 Color3;
  typedef LayerState_BufferData BufferData;
  typedef LayerState_WindowInfo WindowInfo;

  typedef LayerState_ChangesLsb ChangesLsb;
  static constexpr ChangesLsb eChangesLsbNone =
    LayerState_ChangesLsb_eChangesLsbNone;
  static constexpr ChangesLsb ePositionChanged =
    LayerState_ChangesLsb_ePositionChanged;
  static constexpr ChangesLsb eLayerChanged =
    LayerState_ChangesLsb_eLayerChanged;
  static constexpr ChangesLsb eAlphaChanged =
    LayerState_ChangesLsb_eAlphaChanged;
  static constexpr ChangesLsb eMatrixChanged =
    LayerState_ChangesLsb_eMatrixChanged;
  static constexpr ChangesLsb eTransparentRegionChanged =
    LayerState_ChangesLsb_eTransparentRegionChanged;
  static constexpr ChangesLsb eFlagsChanged =
    LayerState_ChangesLsb_eFlagsChanged;
  static constexpr ChangesLsb eLayerStackChanged =
    LayerState_ChangesLsb_eLayerStackChanged;
  static constexpr ChangesLsb eReleaseBufferListenerChanged =
    LayerState_ChangesLsb_eReleaseBufferListenerChanged;
  static constexpr ChangesLsb eShadowRadiusChanged =
    LayerState_ChangesLsb_eShadowRadiusChanged;
  static constexpr ChangesLsb eBufferCropChanged =
    LayerState_ChangesLsb_eBufferCropChanged;
  static constexpr ChangesLsb eRelativeLayerChanged =
    LayerState_ChangesLsb_eRelativeLayerChanged;
  static constexpr ChangesLsb eReparent =
    LayerState_ChangesLsb_eReparent;
  static constexpr ChangesLsb eColorChanged =
    LayerState_ChangesLsb_eColorChanged;
  static constexpr ChangesLsb eBufferTransformChanged =
    LayerState_ChangesLsb_eBufferTransformChanged;
  static constexpr ChangesLsb eTransformToDisplayInverseChanged =
    LayerState_ChangesLsb_eTransformToDisplayInverseChanged;
  static constexpr ChangesLsb eCropChanged =
    LayerState_ChangesLsb_eCropChanged;
  static constexpr ChangesLsb eBufferChanged =
    LayerState_ChangesLsb_eBufferChanged;
  static constexpr ChangesLsb eAcquireFenceChanged =
    LayerState_ChangesLsb_eAcquireFenceChanged;
  static constexpr ChangesLsb eDataspaceChanged =
    LayerState_ChangesLsb_eDataspaceChanged;
  static constexpr ChangesLsb eHdrMetadataChanged =
    LayerState_ChangesLsb_eHdrMetadataChanged;
  static constexpr ChangesLsb eSurfaceDamageRegionChanged =
    LayerState_ChangesLsb_eSurfaceDamageRegionChanged;
  static constexpr ChangesLsb eApiChanged =
    LayerState_ChangesLsb_eApiChanged;
  static constexpr ChangesLsb eSidebandStreamChanged =
    LayerState_ChangesLsb_eSidebandStreamChanged;
  static constexpr ChangesLsb eColorTransformChanged =
    LayerState_ChangesLsb_eColorTransformChanged;
  static constexpr ChangesLsb eHasListenerCallbacksChanged =
    LayerState_ChangesLsb_eHasListenerCallbacksChanged;
  static constexpr ChangesLsb eInputInfoChanged =
    LayerState_ChangesLsb_eInputInfoChanged;
  static constexpr ChangesLsb eCornerRadiusChanged =
    LayerState_ChangesLsb_eCornerRadiusChanged;
  static inline bool ChangesLsb_IsValid(int value) {
    return LayerState_ChangesLsb_IsValid(value);
  }
  static constexpr ChangesLsb ChangesLsb_MIN =
    LayerState_ChangesLsb_ChangesLsb_MIN;
  static constexpr ChangesLsb ChangesLsb_MAX =
    LayerState_ChangesLsb_ChangesLsb_MAX;
  static constexpr int ChangesLsb_ARRAYSIZE =
    LayerState_ChangesLsb_ChangesLsb_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ChangesLsb_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChangesLsb>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChangesLsb_Name.");
    return LayerState_ChangesLsb_Name(enum_t_value);
  }
  static inline bool ChangesLsb_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChangesLsb* value) {
    return LayerState_ChangesLsb_Parse(name, value);
  }

  typedef LayerState_ChangesMsb ChangesMsb;
  static constexpr ChangesMsb eChangesMsbNone =
    LayerState_ChangesMsb_eChangesMsbNone;
  static constexpr ChangesMsb eDestinationFrameChanged =
    LayerState_ChangesMsb_eDestinationFrameChanged;
  static constexpr ChangesMsb eCachedBufferChanged =
    LayerState_ChangesMsb_eCachedBufferChanged;
  static constexpr ChangesMsb eBackgroundColorChanged =
    LayerState_ChangesMsb_eBackgroundColorChanged;
  static constexpr ChangesMsb eMetadataChanged =
    LayerState_ChangesMsb_eMetadataChanged;
  static constexpr ChangesMsb eColorSpaceAgnosticChanged =
    LayerState_ChangesMsb_eColorSpaceAgnosticChanged;
  static constexpr ChangesMsb eFrameRateSelectionPriority =
    LayerState_ChangesMsb_eFrameRateSelectionPriority;
  static constexpr ChangesMsb eFrameRateChanged =
    LayerState_ChangesMsb_eFrameRateChanged;
  static constexpr ChangesMsb eBackgroundBlurRadiusChanged =
    LayerState_ChangesMsb_eBackgroundBlurRadiusChanged;
  static constexpr ChangesMsb eProducerDisconnect =
    LayerState_ChangesMsb_eProducerDisconnect;
  static constexpr ChangesMsb eFixedTransformHintChanged =
    LayerState_ChangesMsb_eFixedTransformHintChanged;
  static constexpr ChangesMsb eFrameNumberChanged =
    LayerState_ChangesMsb_eFrameNumberChanged;
  static constexpr ChangesMsb eBlurRegionsChanged =
    LayerState_ChangesMsb_eBlurRegionsChanged;
  static constexpr ChangesMsb eAutoRefreshChanged =
    LayerState_ChangesMsb_eAutoRefreshChanged;
  static constexpr ChangesMsb eStretchChanged =
    LayerState_ChangesMsb_eStretchChanged;
  static constexpr ChangesMsb eTrustedOverlayChanged =
    LayerState_ChangesMsb_eTrustedOverlayChanged;
  static constexpr ChangesMsb eDropInputModeChanged =
    LayerState_ChangesMsb_eDropInputModeChanged;
  static inline bool ChangesMsb_IsValid(int value) {
    return LayerState_ChangesMsb_IsValid(value);
  }
  static constexpr ChangesMsb ChangesMsb_MIN =
    LayerState_ChangesMsb_ChangesMsb_MIN;
  static constexpr ChangesMsb ChangesMsb_MAX =
    LayerState_ChangesMsb_ChangesMsb_MAX;
  static constexpr int ChangesMsb_ARRAYSIZE =
    LayerState_ChangesMsb_ChangesMsb_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ChangesMsb_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChangesMsb>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChangesMsb_Name.");
    return LayerState_ChangesMsb_Name(enum_t_value);
  }
  static inline bool ChangesMsb_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChangesMsb* value) {
    return LayerState_ChangesMsb_Parse(name, value);
  }

  typedef LayerState_Flags Flags;
  static constexpr Flags eFlagsNone =
    LayerState_Flags_eFlagsNone;
  static constexpr Flags eLayerHidden =
    LayerState_Flags_eLayerHidden;
  static constexpr Flags eLayerOpaque =
    LayerState_Flags_eLayerOpaque;
  static constexpr Flags eLayerSkipScreenshot =
    LayerState_Flags_eLayerSkipScreenshot;
  static constexpr Flags eLayerSecure =
    LayerState_Flags_eLayerSecure;
  static constexpr Flags eEnableBackpressure =
    LayerState_Flags_eEnableBackpressure;
  static constexpr Flags eLayerIsDisplayDecoration =
    LayerState_Flags_eLayerIsDisplayDecoration;
  static inline bool Flags_IsValid(int value) {
    return LayerState_Flags_IsValid(value);
  }
  static constexpr Flags Flags_MIN =
    LayerState_Flags_Flags_MIN;
  static constexpr Flags Flags_MAX =
    LayerState_Flags_Flags_MAX;
  static constexpr int Flags_ARRAYSIZE =
    LayerState_Flags_Flags_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flags_Name.");
    return LayerState_Flags_Name(enum_t_value);
  }
  static inline bool Flags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flags* value) {
    return LayerState_Flags_Parse(name, value);
  }

  typedef LayerState_DropInputMode DropInputMode;
  static constexpr DropInputMode NONE =
    LayerState_DropInputMode_NONE;
  static constexpr DropInputMode ALL =
    LayerState_DropInputMode_ALL;
  static constexpr DropInputMode OBSCURED =
    LayerState_DropInputMode_OBSCURED;
  static inline bool DropInputMode_IsValid(int value) {
    return LayerState_DropInputMode_IsValid(value);
  }
  static constexpr DropInputMode DropInputMode_MIN =
    LayerState_DropInputMode_DropInputMode_MIN;
  static constexpr DropInputMode DropInputMode_MAX =
    LayerState_DropInputMode_DropInputMode_MAX;
  static constexpr int DropInputMode_ARRAYSIZE =
    LayerState_DropInputMode_DropInputMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DropInputMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DropInputMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DropInputMode_Name.");
    return LayerState_DropInputMode_Name(enum_t_value);
  }
  static inline bool DropInputMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DropInputMode* value) {
    return LayerState_DropInputMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBlurRegionsFieldNumber = 26,
    kMatrixFieldNumber = 11,
    kColorFieldNumber = 17,
    kTransparentRegionFieldNumber = 18,
    kCropFieldNumber = 21,
    kBufferDataFieldNumber = 22,
    kColorTransformFieldNumber = 25,
    kWindowInfoHandleFieldNumber = 27,
    kBufferCropFieldNumber = 40,
    kDestinationFrameFieldNumber = 41,
    kWhatFieldNumber = 2,
    kLayerIdFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kWFieldNumber = 6,
    kHFieldNumber = 7,
    kLayerStackFieldNumber = 8,
    kFlagsFieldNumber = 9,
    kMaskFieldNumber = 10,
    kCornerRadiusFieldNumber = 12,
    kBackgroundBlurRadiusFieldNumber = 13,
    kParentIdFieldNumber = 14,
    kRelativeParentIdFieldNumber = 15,
    kAlphaFieldNumber = 16,
    kTransformFieldNumber = 19,
    kApiFieldNumber = 23,
    kBgColorAlphaFieldNumber = 28,
    kTransformToDisplayInverseFieldNumber = 20,
    kHasSidebandStreamFieldNumber = 24,
    kColorSpaceAgnosticFieldNumber = 30,
    kAutoRefreshFieldNumber = 38,
    kBgColorDataspaceFieldNumber = 29,
    kShadowRadiusFieldNumber = 31,
    kFrameRateSelectionPriorityFieldNumber = 32,
    kFrameRateFieldNumber = 33,
    kFrameRateCompatibilityFieldNumber = 34,
    kChangeFrameRateStrategyFieldNumber = 35,
    kFrameNumberFieldNumber = 37,
    kFixedTransformHintFieldNumber = 36,
    kIsTrustedOverlayFieldNumber = 39,
    kDropInputModeFieldNumber = 42,
    kTrustedOverlayFieldNumber = 43,
  };
  // repeated .perfetto.protos.BlurRegion blur_regions = 26;
  int blur_regions_size() const;
  private:
  int _internal_blur_regions_size() const;
  public:
  void clear_blur_regions();
  ::perfetto::protos::BlurRegion* mutable_blur_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >*
      mutable_blur_regions();
  private:
  const ::perfetto::protos::BlurRegion& _internal_blur_regions(int index) const;
  ::perfetto::protos::BlurRegion* _internal_add_blur_regions();
  public:
  const ::perfetto::protos::BlurRegion& blur_regions(int index) const;
  ::perfetto::protos::BlurRegion* add_blur_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >&
      blur_regions() const;

  // optional .perfetto.protos.LayerState.Matrix22 matrix = 11;
  bool has_matrix() const;
  private:
  bool _internal_has_matrix() const;
  public:
  void clear_matrix();
  const ::perfetto::protos::LayerState_Matrix22& matrix() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LayerState_Matrix22* release_matrix();
  ::perfetto::protos::LayerState_Matrix22* mutable_matrix();
  void set_allocated_matrix(::perfetto::protos::LayerState_Matrix22* matrix);
  private:
  const ::perfetto::protos::LayerState_Matrix22& _internal_matrix() const;
  ::perfetto::protos::LayerState_Matrix22* _internal_mutable_matrix();
  public:
  void unsafe_arena_set_allocated_matrix(
      ::perfetto::protos::LayerState_Matrix22* matrix);
  ::perfetto::protos::LayerState_Matrix22* unsafe_arena_release_matrix();

  // optional .perfetto.protos.LayerState.Color3 color = 17;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::perfetto::protos::LayerState_Color3& color() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LayerState_Color3* release_color();
  ::perfetto::protos::LayerState_Color3* mutable_color();
  void set_allocated_color(::perfetto::protos::LayerState_Color3* color);
  private:
  const ::perfetto::protos::LayerState_Color3& _internal_color() const;
  ::perfetto::protos::LayerState_Color3* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::perfetto::protos::LayerState_Color3* color);
  ::perfetto::protos::LayerState_Color3* unsafe_arena_release_color();

  // optional .perfetto.protos.RegionProto transparent_region = 18;
  bool has_transparent_region() const;
  private:
  bool _internal_has_transparent_region() const;
  public:
  void clear_transparent_region();
  const ::perfetto::protos::RegionProto& transparent_region() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegionProto* release_transparent_region();
  ::perfetto::protos::RegionProto* mutable_transparent_region();
  void set_allocated_transparent_region(::perfetto::protos::RegionProto* transparent_region);
  private:
  const ::perfetto::protos::RegionProto& _internal_transparent_region() const;
  ::perfetto::protos::RegionProto* _internal_mutable_transparent_region();
  public:
  void unsafe_arena_set_allocated_transparent_region(
      ::perfetto::protos::RegionProto* transparent_region);
  ::perfetto::protos::RegionProto* unsafe_arena_release_transparent_region();

  // optional .perfetto.protos.RectProto crop = 21;
  bool has_crop() const;
  private:
  bool _internal_has_crop() const;
  public:
  void clear_crop();
  const ::perfetto::protos::RectProto& crop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_crop();
  ::perfetto::protos::RectProto* mutable_crop();
  void set_allocated_crop(::perfetto::protos::RectProto* crop);
  private:
  const ::perfetto::protos::RectProto& _internal_crop() const;
  ::perfetto::protos::RectProto* _internal_mutable_crop();
  public:
  void unsafe_arena_set_allocated_crop(
      ::perfetto::protos::RectProto* crop);
  ::perfetto::protos::RectProto* unsafe_arena_release_crop();

  // optional .perfetto.protos.LayerState.BufferData buffer_data = 22;
  bool has_buffer_data() const;
  private:
  bool _internal_has_buffer_data() const;
  public:
  void clear_buffer_data();
  const ::perfetto::protos::LayerState_BufferData& buffer_data() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LayerState_BufferData* release_buffer_data();
  ::perfetto::protos::LayerState_BufferData* mutable_buffer_data();
  void set_allocated_buffer_data(::perfetto::protos::LayerState_BufferData* buffer_data);
  private:
  const ::perfetto::protos::LayerState_BufferData& _internal_buffer_data() const;
  ::perfetto::protos::LayerState_BufferData* _internal_mutable_buffer_data();
  public:
  void unsafe_arena_set_allocated_buffer_data(
      ::perfetto::protos::LayerState_BufferData* buffer_data);
  ::perfetto::protos::LayerState_BufferData* unsafe_arena_release_buffer_data();

  // optional .perfetto.protos.ColorTransformProto color_transform = 25;
  bool has_color_transform() const;
  private:
  bool _internal_has_color_transform() const;
  public:
  void clear_color_transform();
  const ::perfetto::protos::ColorTransformProto& color_transform() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ColorTransformProto* release_color_transform();
  ::perfetto::protos::ColorTransformProto* mutable_color_transform();
  void set_allocated_color_transform(::perfetto::protos::ColorTransformProto* color_transform);
  private:
  const ::perfetto::protos::ColorTransformProto& _internal_color_transform() const;
  ::perfetto::protos::ColorTransformProto* _internal_mutable_color_transform();
  public:
  void unsafe_arena_set_allocated_color_transform(
      ::perfetto::protos::ColorTransformProto* color_transform);
  ::perfetto::protos::ColorTransformProto* unsafe_arena_release_color_transform();

  // optional .perfetto.protos.LayerState.WindowInfo window_info_handle = 27;
  bool has_window_info_handle() const;
  private:
  bool _internal_has_window_info_handle() const;
  public:
  void clear_window_info_handle();
  const ::perfetto::protos::LayerState_WindowInfo& window_info_handle() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LayerState_WindowInfo* release_window_info_handle();
  ::perfetto::protos::LayerState_WindowInfo* mutable_window_info_handle();
  void set_allocated_window_info_handle(::perfetto::protos::LayerState_WindowInfo* window_info_handle);
  private:
  const ::perfetto::protos::LayerState_WindowInfo& _internal_window_info_handle() const;
  ::perfetto::protos::LayerState_WindowInfo* _internal_mutable_window_info_handle();
  public:
  void unsafe_arena_set_allocated_window_info_handle(
      ::perfetto::protos::LayerState_WindowInfo* window_info_handle);
  ::perfetto::protos::LayerState_WindowInfo* unsafe_arena_release_window_info_handle();

  // optional .perfetto.protos.RectProto buffer_crop = 40;
  bool has_buffer_crop() const;
  private:
  bool _internal_has_buffer_crop() const;
  public:
  void clear_buffer_crop();
  const ::perfetto::protos::RectProto& buffer_crop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_buffer_crop();
  ::perfetto::protos::RectProto* mutable_buffer_crop();
  void set_allocated_buffer_crop(::perfetto::protos::RectProto* buffer_crop);
  private:
  const ::perfetto::protos::RectProto& _internal_buffer_crop() const;
  ::perfetto::protos::RectProto* _internal_mutable_buffer_crop();
  public:
  void unsafe_arena_set_allocated_buffer_crop(
      ::perfetto::protos::RectProto* buffer_crop);
  ::perfetto::protos::RectProto* unsafe_arena_release_buffer_crop();

  // optional .perfetto.protos.RectProto destination_frame = 41;
  bool has_destination_frame() const;
  private:
  bool _internal_has_destination_frame() const;
  public:
  void clear_destination_frame();
  const ::perfetto::protos::RectProto& destination_frame() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_destination_frame();
  ::perfetto::protos::RectProto* mutable_destination_frame();
  void set_allocated_destination_frame(::perfetto::protos::RectProto* destination_frame);
  private:
  const ::perfetto::protos::RectProto& _internal_destination_frame() const;
  ::perfetto::protos::RectProto* _internal_mutable_destination_frame();
  public:
  void unsafe_arena_set_allocated_destination_frame(
      ::perfetto::protos::RectProto* destination_frame);
  ::perfetto::protos::RectProto* unsafe_arena_release_destination_frame();

  // optional uint64 what = 2;
  bool has_what() const;
  private:
  bool _internal_has_what() const;
  public:
  void clear_what();
  uint64_t what() const;
  void set_what(uint64_t value);
  private:
  uint64_t _internal_what() const;
  void _internal_set_what(uint64_t value);
  public:

  // optional uint32 layer_id = 1;
  bool has_layer_id() const;
  private:
  bool _internal_has_layer_id() const;
  public:
  void clear_layer_id();
  uint32_t layer_id() const;
  void set_layer_id(uint32_t value);
  private:
  uint32_t _internal_layer_id() const;
  void _internal_set_layer_id(uint32_t value);
  public:

  // optional float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional int32 z = 5;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // optional uint32 w = 6;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  uint32_t w() const;
  void set_w(uint32_t value);
  private:
  uint32_t _internal_w() const;
  void _internal_set_w(uint32_t value);
  public:

  // optional uint32 h = 7;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  uint32_t h() const;
  void set_h(uint32_t value);
  private:
  uint32_t _internal_h() const;
  void _internal_set_h(uint32_t value);
  public:

  // optional uint32 layer_stack = 8;
  bool has_layer_stack() const;
  private:
  bool _internal_has_layer_stack() const;
  public:
  void clear_layer_stack();
  uint32_t layer_stack() const;
  void set_layer_stack(uint32_t value);
  private:
  uint32_t _internal_layer_stack() const;
  void _internal_set_layer_stack(uint32_t value);
  public:

  // optional uint32 flags = 9;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 mask = 10;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  uint32_t mask() const;
  void set_mask(uint32_t value);
  private:
  uint32_t _internal_mask() const;
  void _internal_set_mask(uint32_t value);
  public:

  // optional float corner_radius = 12;
  bool has_corner_radius() const;
  private:
  bool _internal_has_corner_radius() const;
  public:
  void clear_corner_radius();
  float corner_radius() const;
  void set_corner_radius(float value);
  private:
  float _internal_corner_radius() const;
  void _internal_set_corner_radius(float value);
  public:

  // optional uint32 background_blur_radius = 13;
  bool has_background_blur_radius() const;
  private:
  bool _internal_has_background_blur_radius() const;
  public:
  void clear_background_blur_radius();
  uint32_t background_blur_radius() const;
  void set_background_blur_radius(uint32_t value);
  private:
  uint32_t _internal_background_blur_radius() const;
  void _internal_set_background_blur_radius(uint32_t value);
  public:

  // optional uint32 parent_id = 14;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  uint32_t parent_id() const;
  void set_parent_id(uint32_t value);
  private:
  uint32_t _internal_parent_id() const;
  void _internal_set_parent_id(uint32_t value);
  public:

  // optional uint32 relative_parent_id = 15;
  bool has_relative_parent_id() const;
  private:
  bool _internal_has_relative_parent_id() const;
  public:
  void clear_relative_parent_id();
  uint32_t relative_parent_id() const;
  void set_relative_parent_id(uint32_t value);
  private:
  uint32_t _internal_relative_parent_id() const;
  void _internal_set_relative_parent_id(uint32_t value);
  public:

  // optional float alpha = 16;
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional uint32 transform = 19;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  uint32_t transform() const;
  void set_transform(uint32_t value);
  private:
  uint32_t _internal_transform() const;
  void _internal_set_transform(uint32_t value);
  public:

  // optional int32 api = 23;
  bool has_api() const;
  private:
  bool _internal_has_api() const;
  public:
  void clear_api();
  int32_t api() const;
  void set_api(int32_t value);
  private:
  int32_t _internal_api() const;
  void _internal_set_api(int32_t value);
  public:

  // optional float bg_color_alpha = 28;
  bool has_bg_color_alpha() const;
  private:
  bool _internal_has_bg_color_alpha() const;
  public:
  void clear_bg_color_alpha();
  float bg_color_alpha() const;
  void set_bg_color_alpha(float value);
  private:
  float _internal_bg_color_alpha() const;
  void _internal_set_bg_color_alpha(float value);
  public:

  // optional bool transform_to_display_inverse = 20;
  bool has_transform_to_display_inverse() const;
  private:
  bool _internal_has_transform_to_display_inverse() const;
  public:
  void clear_transform_to_display_inverse();
  bool transform_to_display_inverse() const;
  void set_transform_to_display_inverse(bool value);
  private:
  bool _internal_transform_to_display_inverse() const;
  void _internal_set_transform_to_display_inverse(bool value);
  public:

  // optional bool has_sideband_stream = 24;
  bool has_has_sideband_stream() const;
  private:
  bool _internal_has_has_sideband_stream() const;
  public:
  void clear_has_sideband_stream();
  bool has_sideband_stream() const;
  void set_has_sideband_stream(bool value);
  private:
  bool _internal_has_sideband_stream() const;
  void _internal_set_has_sideband_stream(bool value);
  public:

  // optional bool color_space_agnostic = 30;
  bool has_color_space_agnostic() const;
  private:
  bool _internal_has_color_space_agnostic() const;
  public:
  void clear_color_space_agnostic();
  bool color_space_agnostic() const;
  void set_color_space_agnostic(bool value);
  private:
  bool _internal_color_space_agnostic() const;
  void _internal_set_color_space_agnostic(bool value);
  public:

  // optional bool auto_refresh = 38;
  bool has_auto_refresh() const;
  private:
  bool _internal_has_auto_refresh() const;
  public:
  void clear_auto_refresh();
  bool auto_refresh() const;
  void set_auto_refresh(bool value);
  private:
  bool _internal_auto_refresh() const;
  void _internal_set_auto_refresh(bool value);
  public:

  // optional int32 bg_color_dataspace = 29;
  bool has_bg_color_dataspace() const;
  private:
  bool _internal_has_bg_color_dataspace() const;
  public:
  void clear_bg_color_dataspace();
  int32_t bg_color_dataspace() const;
  void set_bg_color_dataspace(int32_t value);
  private:
  int32_t _internal_bg_color_dataspace() const;
  void _internal_set_bg_color_dataspace(int32_t value);
  public:

  // optional float shadow_radius = 31;
  bool has_shadow_radius() const;
  private:
  bool _internal_has_shadow_radius() const;
  public:
  void clear_shadow_radius();
  float shadow_radius() const;
  void set_shadow_radius(float value);
  private:
  float _internal_shadow_radius() const;
  void _internal_set_shadow_radius(float value);
  public:

  // optional int32 frame_rate_selection_priority = 32;
  bool has_frame_rate_selection_priority() const;
  private:
  bool _internal_has_frame_rate_selection_priority() const;
  public:
  void clear_frame_rate_selection_priority();
  int32_t frame_rate_selection_priority() const;
  void set_frame_rate_selection_priority(int32_t value);
  private:
  int32_t _internal_frame_rate_selection_priority() const;
  void _internal_set_frame_rate_selection_priority(int32_t value);
  public:

  // optional float frame_rate = 33;
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  float frame_rate() const;
  void set_frame_rate(float value);
  private:
  float _internal_frame_rate() const;
  void _internal_set_frame_rate(float value);
  public:

  // optional int32 frame_rate_compatibility = 34;
  bool has_frame_rate_compatibility() const;
  private:
  bool _internal_has_frame_rate_compatibility() const;
  public:
  void clear_frame_rate_compatibility();
  int32_t frame_rate_compatibility() const;
  void set_frame_rate_compatibility(int32_t value);
  private:
  int32_t _internal_frame_rate_compatibility() const;
  void _internal_set_frame_rate_compatibility(int32_t value);
  public:

  // optional int32 change_frame_rate_strategy = 35;
  bool has_change_frame_rate_strategy() const;
  private:
  bool _internal_has_change_frame_rate_strategy() const;
  public:
  void clear_change_frame_rate_strategy();
  int32_t change_frame_rate_strategy() const;
  void set_change_frame_rate_strategy(int32_t value);
  private:
  int32_t _internal_change_frame_rate_strategy() const;
  void _internal_set_change_frame_rate_strategy(int32_t value);
  public:

  // optional uint64 frame_number = 37;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  uint64_t frame_number() const;
  void set_frame_number(uint64_t value);
  private:
  uint64_t _internal_frame_number() const;
  void _internal_set_frame_number(uint64_t value);
  public:

  // optional uint32 fixed_transform_hint = 36;
  bool has_fixed_transform_hint() const;
  private:
  bool _internal_has_fixed_transform_hint() const;
  public:
  void clear_fixed_transform_hint();
  uint32_t fixed_transform_hint() const;
  void set_fixed_transform_hint(uint32_t value);
  private:
  uint32_t _internal_fixed_transform_hint() const;
  void _internal_set_fixed_transform_hint(uint32_t value);
  public:

  // optional bool is_trusted_overlay = 39;
  bool has_is_trusted_overlay() const;
  private:
  bool _internal_has_is_trusted_overlay() const;
  public:
  void clear_is_trusted_overlay();
  bool is_trusted_overlay() const;
  void set_is_trusted_overlay(bool value);
  private:
  bool _internal_is_trusted_overlay() const;
  void _internal_set_is_trusted_overlay(bool value);
  public:

  // optional .perfetto.protos.LayerState.DropInputMode drop_input_mode = 42;
  bool has_drop_input_mode() const;
  private:
  bool _internal_has_drop_input_mode() const;
  public:
  void clear_drop_input_mode();
  ::perfetto::protos::LayerState_DropInputMode drop_input_mode() const;
  void set_drop_input_mode(::perfetto::protos::LayerState_DropInputMode value);
  private:
  ::perfetto::protos::LayerState_DropInputMode _internal_drop_input_mode() const;
  void _internal_set_drop_input_mode(::perfetto::protos::LayerState_DropInputMode value);
  public:

  // optional .perfetto.protos.TrustedOverlay trusted_overlay = 43;
  bool has_trusted_overlay() const;
  private:
  bool _internal_has_trusted_overlay() const;
  public:
  void clear_trusted_overlay();
  ::perfetto::protos::TrustedOverlay trusted_overlay() const;
  void set_trusted_overlay(::perfetto::protos::TrustedOverlay value);
  private:
  ::perfetto::protos::TrustedOverlay _internal_trusted_overlay() const;
  void _internal_set_trusted_overlay(::perfetto::protos::TrustedOverlay value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.LayerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion > blur_regions_;
    ::perfetto::protos::LayerState_Matrix22* matrix_;
    ::perfetto::protos::LayerState_Color3* color_;
    ::perfetto::protos::RegionProto* transparent_region_;
    ::perfetto::protos::RectProto* crop_;
    ::perfetto::protos::LayerState_BufferData* buffer_data_;
    ::perfetto::protos::ColorTransformProto* color_transform_;
    ::perfetto::protos::LayerState_WindowInfo* window_info_handle_;
    ::perfetto::protos::RectProto* buffer_crop_;
    ::perfetto::protos::RectProto* destination_frame_;
    uint64_t what_;
    uint32_t layer_id_;
    float x_;
    float y_;
    int32_t z_;
    uint32_t w_;
    uint32_t h_;
    uint32_t layer_stack_;
    uint32_t flags_;
    uint32_t mask_;
    float corner_radius_;
    uint32_t background_blur_radius_;
    uint32_t parent_id_;
    uint32_t relative_parent_id_;
    float alpha_;
    uint32_t transform_;
    int32_t api_;
    float bg_color_alpha_;
    bool transform_to_display_inverse_;
    bool has_sideband_stream_;
    bool color_space_agnostic_;
    bool auto_refresh_;
    int32_t bg_color_dataspace_;
    float shadow_radius_;
    int32_t frame_rate_selection_priority_;
    float frame_rate_;
    int32_t frame_rate_compatibility_;
    int32_t change_frame_rate_strategy_;
    uint64_t frame_number_;
    uint32_t fixed_transform_hint_;
    bool is_trusted_overlay_;
    int drop_input_mode_;
    int trusted_overlay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// -------------------------------------------------------------------

class DisplayState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.DisplayState) */ {
 public:
  inline DisplayState() : DisplayState(nullptr) {}
  ~DisplayState() override;
  explicit PROTOBUF_CONSTEXPR DisplayState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplayState(const DisplayState& from);
  DisplayState(DisplayState&& from) noexcept
    : DisplayState() {
    *this = ::std::move(from);
  }

  inline DisplayState& operator=(const DisplayState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayState& operator=(DisplayState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisplayState& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplayState* internal_default_instance() {
    return reinterpret_cast<const DisplayState*>(
               &_DisplayState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DisplayState& a, DisplayState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DisplayState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisplayState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisplayState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisplayState& from);
  void MergeFrom(const DisplayState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.DisplayState";
  }
  protected:
  explicit DisplayState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DisplayState_Changes Changes;
  static constexpr Changes eChangesNone =
    DisplayState_Changes_eChangesNone;
  static constexpr Changes eSurfaceChanged =
    DisplayState_Changes_eSurfaceChanged;
  static constexpr Changes eLayerStackChanged =
    DisplayState_Changes_eLayerStackChanged;
  static constexpr Changes eDisplayProjectionChanged =
    DisplayState_Changes_eDisplayProjectionChanged;
  static constexpr Changes eDisplaySizeChanged =
    DisplayState_Changes_eDisplaySizeChanged;
  static constexpr Changes eFlagsChanged =
    DisplayState_Changes_eFlagsChanged;
  static inline bool Changes_IsValid(int value) {
    return DisplayState_Changes_IsValid(value);
  }
  static constexpr Changes Changes_MIN =
    DisplayState_Changes_Changes_MIN;
  static constexpr Changes Changes_MAX =
    DisplayState_Changes_Changes_MAX;
  static constexpr int Changes_ARRAYSIZE =
    DisplayState_Changes_Changes_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Changes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Changes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Changes_Name.");
    return DisplayState_Changes_Name(enum_t_value);
  }
  static inline bool Changes_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Changes* value) {
    return DisplayState_Changes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLayerStackSpaceRectFieldNumber = 6,
    kOrientedDisplaySpaceRectFieldNumber = 7,
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kLayerStackFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
  };
  // optional .perfetto.protos.RectProto layer_stack_space_rect = 6;
  bool has_layer_stack_space_rect() const;
  private:
  bool _internal_has_layer_stack_space_rect() const;
  public:
  void clear_layer_stack_space_rect();
  const ::perfetto::protos::RectProto& layer_stack_space_rect() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_layer_stack_space_rect();
  ::perfetto::protos::RectProto* mutable_layer_stack_space_rect();
  void set_allocated_layer_stack_space_rect(::perfetto::protos::RectProto* layer_stack_space_rect);
  private:
  const ::perfetto::protos::RectProto& _internal_layer_stack_space_rect() const;
  ::perfetto::protos::RectProto* _internal_mutable_layer_stack_space_rect();
  public:
  void unsafe_arena_set_allocated_layer_stack_space_rect(
      ::perfetto::protos::RectProto* layer_stack_space_rect);
  ::perfetto::protos::RectProto* unsafe_arena_release_layer_stack_space_rect();

  // optional .perfetto.protos.RectProto oriented_display_space_rect = 7;
  bool has_oriented_display_space_rect() const;
  private:
  bool _internal_has_oriented_display_space_rect() const;
  public:
  void clear_oriented_display_space_rect();
  const ::perfetto::protos::RectProto& oriented_display_space_rect() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RectProto* release_oriented_display_space_rect();
  ::perfetto::protos::RectProto* mutable_oriented_display_space_rect();
  void set_allocated_oriented_display_space_rect(::perfetto::protos::RectProto* oriented_display_space_rect);
  private:
  const ::perfetto::protos::RectProto& _internal_oriented_display_space_rect() const;
  ::perfetto::protos::RectProto* _internal_mutable_oriented_display_space_rect();
  public:
  void unsafe_arena_set_allocated_oriented_display_space_rect(
      ::perfetto::protos::RectProto* oriented_display_space_rect);
  ::perfetto::protos::RectProto* unsafe_arena_release_oriented_display_space_rect();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional uint32 what = 2;
  bool has_what() const;
  private:
  bool _internal_has_what() const;
  public:
  void clear_what();
  uint32_t what() const;
  void set_what(uint32_t value);
  private:
  uint32_t _internal_what() const;
  void _internal_set_what(uint32_t value);
  public:

  // optional uint32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 layer_stack = 4;
  bool has_layer_stack() const;
  private:
  bool _internal_has_layer_stack() const;
  public:
  void clear_layer_stack();
  uint32_t layer_stack() const;
  void set_layer_stack(uint32_t value);
  private:
  uint32_t _internal_layer_stack() const;
  void _internal_set_layer_stack(uint32_t value);
  public:

  // optional uint32 orientation = 5;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  uint32_t orientation() const;
  void set_orientation(uint32_t value);
  private:
  uint32_t _internal_orientation() const;
  void _internal_set_orientation(uint32_t value);
  public:

  // optional uint32 width = 8;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 9;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.DisplayState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::RectProto* layer_stack_space_rect_;
    ::perfetto::protos::RectProto* oriented_display_space_rect_;
    int32_t id_;
    uint32_t what_;
    uint32_t flags_;
    uint32_t layer_stack_;
    uint32_t orientation_;
    uint32_t width_;
    uint32_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionTraceFile

// optional fixed64 magic_number = 1;
inline bool TransactionTraceFile::_internal_has_magic_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransactionTraceFile::has_magic_number() const {
  return _internal_has_magic_number();
}
inline void TransactionTraceFile::clear_magic_number() {
  _impl_.magic_number_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TransactionTraceFile::_internal_magic_number() const {
  return _impl_.magic_number_;
}
inline uint64_t TransactionTraceFile::magic_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceFile.magic_number)
  return _internal_magic_number();
}
inline void TransactionTraceFile::_internal_set_magic_number(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.magic_number_ = value;
}
inline void TransactionTraceFile::set_magic_number(uint64_t value) {
  _internal_set_magic_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceFile.magic_number)
}

// repeated .perfetto.protos.TransactionTraceEntry entry = 2;
inline int TransactionTraceFile::_internal_entry_size() const {
  return _impl_.entry_.size();
}
inline int TransactionTraceFile::entry_size() const {
  return _internal_entry_size();
}
inline void TransactionTraceFile::clear_entry() {
  _impl_.entry_.Clear();
}
inline ::perfetto::protos::TransactionTraceEntry* TransactionTraceFile::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TransactionTraceFile.entry)
  return _impl_.entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionTraceEntry >*
TransactionTraceFile::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceFile.entry)
  return &_impl_.entry_;
}
inline const ::perfetto::protos::TransactionTraceEntry& TransactionTraceFile::_internal_entry(int index) const {
  return _impl_.entry_.Get(index);
}
inline const ::perfetto::protos::TransactionTraceEntry& TransactionTraceFile::entry(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceFile.entry)
  return _internal_entry(index);
}
inline ::perfetto::protos::TransactionTraceEntry* TransactionTraceFile::_internal_add_entry() {
  return _impl_.entry_.Add();
}
inline ::perfetto::protos::TransactionTraceEntry* TransactionTraceFile::add_entry() {
  ::perfetto::protos::TransactionTraceEntry* _add = _internal_add_entry();
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceFile.entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionTraceEntry >&
TransactionTraceFile::entry() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceFile.entry)
  return _impl_.entry_;
}

// optional fixed64 real_to_elapsed_time_offset_nanos = 3;
inline bool TransactionTraceFile::_internal_has_real_to_elapsed_time_offset_nanos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransactionTraceFile::has_real_to_elapsed_time_offset_nanos() const {
  return _internal_has_real_to_elapsed_time_offset_nanos();
}
inline void TransactionTraceFile::clear_real_to_elapsed_time_offset_nanos() {
  _impl_.real_to_elapsed_time_offset_nanos_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TransactionTraceFile::_internal_real_to_elapsed_time_offset_nanos() const {
  return _impl_.real_to_elapsed_time_offset_nanos_;
}
inline uint64_t TransactionTraceFile::real_to_elapsed_time_offset_nanos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceFile.real_to_elapsed_time_offset_nanos)
  return _internal_real_to_elapsed_time_offset_nanos();
}
inline void TransactionTraceFile::_internal_set_real_to_elapsed_time_offset_nanos(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.real_to_elapsed_time_offset_nanos_ = value;
}
inline void TransactionTraceFile::set_real_to_elapsed_time_offset_nanos(uint64_t value) {
  _internal_set_real_to_elapsed_time_offset_nanos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceFile.real_to_elapsed_time_offset_nanos)
}

// optional uint32 version = 4;
inline bool TransactionTraceFile::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransactionTraceFile::has_version() const {
  return _internal_has_version();
}
inline void TransactionTraceFile::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TransactionTraceFile::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t TransactionTraceFile::version() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceFile.version)
  return _internal_version();
}
inline void TransactionTraceFile::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version_ = value;
}
inline void TransactionTraceFile::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceFile.version)
}

// -------------------------------------------------------------------

// TransactionTraceEntry

// optional int64 elapsed_realtime_nanos = 1;
inline bool TransactionTraceEntry::_internal_has_elapsed_realtime_nanos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransactionTraceEntry::has_elapsed_realtime_nanos() const {
  return _internal_has_elapsed_realtime_nanos();
}
inline void TransactionTraceEntry::clear_elapsed_realtime_nanos() {
  _impl_.elapsed_realtime_nanos_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t TransactionTraceEntry::_internal_elapsed_realtime_nanos() const {
  return _impl_.elapsed_realtime_nanos_;
}
inline int64_t TransactionTraceEntry::elapsed_realtime_nanos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.elapsed_realtime_nanos)
  return _internal_elapsed_realtime_nanos();
}
inline void TransactionTraceEntry::_internal_set_elapsed_realtime_nanos(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.elapsed_realtime_nanos_ = value;
}
inline void TransactionTraceEntry::set_elapsed_realtime_nanos(int64_t value) {
  _internal_set_elapsed_realtime_nanos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceEntry.elapsed_realtime_nanos)
}

// optional int64 vsync_id = 2;
inline bool TransactionTraceEntry::_internal_has_vsync_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransactionTraceEntry::has_vsync_id() const {
  return _internal_has_vsync_id();
}
inline void TransactionTraceEntry::clear_vsync_id() {
  _impl_.vsync_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t TransactionTraceEntry::_internal_vsync_id() const {
  return _impl_.vsync_id_;
}
inline int64_t TransactionTraceEntry::vsync_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.vsync_id)
  return _internal_vsync_id();
}
inline void TransactionTraceEntry::_internal_set_vsync_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vsync_id_ = value;
}
inline void TransactionTraceEntry::set_vsync_id(int64_t value) {
  _internal_set_vsync_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceEntry.vsync_id)
}

// repeated .perfetto.protos.TransactionState transactions = 3;
inline int TransactionTraceEntry::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int TransactionTraceEntry::transactions_size() const {
  return _internal_transactions_size();
}
inline void TransactionTraceEntry::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline ::perfetto::protos::TransactionState* TransactionTraceEntry::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TransactionTraceEntry.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionState >*
TransactionTraceEntry::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceEntry.transactions)
  return &_impl_.transactions_;
}
inline const ::perfetto::protos::TransactionState& TransactionTraceEntry::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::perfetto::protos::TransactionState& TransactionTraceEntry::transactions(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.transactions)
  return _internal_transactions(index);
}
inline ::perfetto::protos::TransactionState* TransactionTraceEntry::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::perfetto::protos::TransactionState* TransactionTraceEntry::add_transactions() {
  ::perfetto::protos::TransactionState* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceEntry.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TransactionState >&
TransactionTraceEntry::transactions() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceEntry.transactions)
  return _impl_.transactions_;
}

// repeated .perfetto.protos.LayerCreationArgs added_layers = 4;
inline int TransactionTraceEntry::_internal_added_layers_size() const {
  return _impl_.added_layers_.size();
}
inline int TransactionTraceEntry::added_layers_size() const {
  return _internal_added_layers_size();
}
inline void TransactionTraceEntry::clear_added_layers() {
  _impl_.added_layers_.Clear();
}
inline ::perfetto::protos::LayerCreationArgs* TransactionTraceEntry::mutable_added_layers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TransactionTraceEntry.added_layers)
  return _impl_.added_layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerCreationArgs >*
TransactionTraceEntry::mutable_added_layers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceEntry.added_layers)
  return &_impl_.added_layers_;
}
inline const ::perfetto::protos::LayerCreationArgs& TransactionTraceEntry::_internal_added_layers(int index) const {
  return _impl_.added_layers_.Get(index);
}
inline const ::perfetto::protos::LayerCreationArgs& TransactionTraceEntry::added_layers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.added_layers)
  return _internal_added_layers(index);
}
inline ::perfetto::protos::LayerCreationArgs* TransactionTraceEntry::_internal_add_added_layers() {
  return _impl_.added_layers_.Add();
}
inline ::perfetto::protos::LayerCreationArgs* TransactionTraceEntry::add_added_layers() {
  ::perfetto::protos::LayerCreationArgs* _add = _internal_add_added_layers();
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceEntry.added_layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerCreationArgs >&
TransactionTraceEntry::added_layers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceEntry.added_layers)
  return _impl_.added_layers_;
}

// repeated uint32 destroyed_layers = 5;
inline int TransactionTraceEntry::_internal_destroyed_layers_size() const {
  return _impl_.destroyed_layers_.size();
}
inline int TransactionTraceEntry::destroyed_layers_size() const {
  return _internal_destroyed_layers_size();
}
inline void TransactionTraceEntry::clear_destroyed_layers() {
  _impl_.destroyed_layers_.Clear();
}
inline uint32_t TransactionTraceEntry::_internal_destroyed_layers(int index) const {
  return _impl_.destroyed_layers_.Get(index);
}
inline uint32_t TransactionTraceEntry::destroyed_layers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.destroyed_layers)
  return _internal_destroyed_layers(index);
}
inline void TransactionTraceEntry::set_destroyed_layers(int index, uint32_t value) {
  _impl_.destroyed_layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceEntry.destroyed_layers)
}
inline void TransactionTraceEntry::_internal_add_destroyed_layers(uint32_t value) {
  _impl_.destroyed_layers_.Add(value);
}
inline void TransactionTraceEntry::add_destroyed_layers(uint32_t value) {
  _internal_add_destroyed_layers(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceEntry.destroyed_layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TransactionTraceEntry::_internal_destroyed_layers() const {
  return _impl_.destroyed_layers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TransactionTraceEntry::destroyed_layers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceEntry.destroyed_layers)
  return _internal_destroyed_layers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TransactionTraceEntry::_internal_mutable_destroyed_layers() {
  return &_impl_.destroyed_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TransactionTraceEntry::mutable_destroyed_layers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceEntry.destroyed_layers)
  return _internal_mutable_destroyed_layers();
}

// repeated .perfetto.protos.DisplayState added_displays = 6;
inline int TransactionTraceEntry::_internal_added_displays_size() const {
  return _impl_.added_displays_.size();
}
inline int TransactionTraceEntry::added_displays_size() const {
  return _internal_added_displays_size();
}
inline void TransactionTraceEntry::clear_added_displays() {
  _impl_.added_displays_.Clear();
}
inline ::perfetto::protos::DisplayState* TransactionTraceEntry::mutable_added_displays(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TransactionTraceEntry.added_displays)
  return _impl_.added_displays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >*
TransactionTraceEntry::mutable_added_displays() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceEntry.added_displays)
  return &_impl_.added_displays_;
}
inline const ::perfetto::protos::DisplayState& TransactionTraceEntry::_internal_added_displays(int index) const {
  return _impl_.added_displays_.Get(index);
}
inline const ::perfetto::protos::DisplayState& TransactionTraceEntry::added_displays(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.added_displays)
  return _internal_added_displays(index);
}
inline ::perfetto::protos::DisplayState* TransactionTraceEntry::_internal_add_added_displays() {
  return _impl_.added_displays_.Add();
}
inline ::perfetto::protos::DisplayState* TransactionTraceEntry::add_added_displays() {
  ::perfetto::protos::DisplayState* _add = _internal_add_added_displays();
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceEntry.added_displays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >&
TransactionTraceEntry::added_displays() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceEntry.added_displays)
  return _impl_.added_displays_;
}

// repeated int32 removed_displays = 7;
inline int TransactionTraceEntry::_internal_removed_displays_size() const {
  return _impl_.removed_displays_.size();
}
inline int TransactionTraceEntry::removed_displays_size() const {
  return _internal_removed_displays_size();
}
inline void TransactionTraceEntry::clear_removed_displays() {
  _impl_.removed_displays_.Clear();
}
inline int32_t TransactionTraceEntry::_internal_removed_displays(int index) const {
  return _impl_.removed_displays_.Get(index);
}
inline int32_t TransactionTraceEntry::removed_displays(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.removed_displays)
  return _internal_removed_displays(index);
}
inline void TransactionTraceEntry::set_removed_displays(int index, int32_t value) {
  _impl_.removed_displays_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceEntry.removed_displays)
}
inline void TransactionTraceEntry::_internal_add_removed_displays(int32_t value) {
  _impl_.removed_displays_.Add(value);
}
inline void TransactionTraceEntry::add_removed_displays(int32_t value) {
  _internal_add_removed_displays(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceEntry.removed_displays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TransactionTraceEntry::_internal_removed_displays() const {
  return _impl_.removed_displays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TransactionTraceEntry::removed_displays() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceEntry.removed_displays)
  return _internal_removed_displays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TransactionTraceEntry::_internal_mutable_removed_displays() {
  return &_impl_.removed_displays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TransactionTraceEntry::mutable_removed_displays() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceEntry.removed_displays)
  return _internal_mutable_removed_displays();
}

// repeated uint32 destroyed_layer_handles = 8;
inline int TransactionTraceEntry::_internal_destroyed_layer_handles_size() const {
  return _impl_.destroyed_layer_handles_.size();
}
inline int TransactionTraceEntry::destroyed_layer_handles_size() const {
  return _internal_destroyed_layer_handles_size();
}
inline void TransactionTraceEntry::clear_destroyed_layer_handles() {
  _impl_.destroyed_layer_handles_.Clear();
}
inline uint32_t TransactionTraceEntry::_internal_destroyed_layer_handles(int index) const {
  return _impl_.destroyed_layer_handles_.Get(index);
}
inline uint32_t TransactionTraceEntry::destroyed_layer_handles(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.destroyed_layer_handles)
  return _internal_destroyed_layer_handles(index);
}
inline void TransactionTraceEntry::set_destroyed_layer_handles(int index, uint32_t value) {
  _impl_.destroyed_layer_handles_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceEntry.destroyed_layer_handles)
}
inline void TransactionTraceEntry::_internal_add_destroyed_layer_handles(uint32_t value) {
  _impl_.destroyed_layer_handles_.Add(value);
}
inline void TransactionTraceEntry::add_destroyed_layer_handles(uint32_t value) {
  _internal_add_destroyed_layer_handles(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceEntry.destroyed_layer_handles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TransactionTraceEntry::_internal_destroyed_layer_handles() const {
  return _impl_.destroyed_layer_handles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TransactionTraceEntry::destroyed_layer_handles() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceEntry.destroyed_layer_handles)
  return _internal_destroyed_layer_handles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TransactionTraceEntry::_internal_mutable_destroyed_layer_handles() {
  return &_impl_.destroyed_layer_handles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TransactionTraceEntry::mutable_destroyed_layer_handles() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceEntry.destroyed_layer_handles)
  return _internal_mutable_destroyed_layer_handles();
}

// optional bool displays_changed = 9;
inline bool TransactionTraceEntry::_internal_has_displays_changed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransactionTraceEntry::has_displays_changed() const {
  return _internal_has_displays_changed();
}
inline void TransactionTraceEntry::clear_displays_changed() {
  _impl_.displays_changed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TransactionTraceEntry::_internal_displays_changed() const {
  return _impl_.displays_changed_;
}
inline bool TransactionTraceEntry::displays_changed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.displays_changed)
  return _internal_displays_changed();
}
inline void TransactionTraceEntry::_internal_set_displays_changed(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.displays_changed_ = value;
}
inline void TransactionTraceEntry::set_displays_changed(bool value) {
  _internal_set_displays_changed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionTraceEntry.displays_changed)
}

// repeated .perfetto.protos.DisplayInfo displays = 10;
inline int TransactionTraceEntry::_internal_displays_size() const {
  return _impl_.displays_.size();
}
inline int TransactionTraceEntry::displays_size() const {
  return _internal_displays_size();
}
inline void TransactionTraceEntry::clear_displays() {
  _impl_.displays_.Clear();
}
inline ::perfetto::protos::DisplayInfo* TransactionTraceEntry::mutable_displays(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TransactionTraceEntry.displays)
  return _impl_.displays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayInfo >*
TransactionTraceEntry::mutable_displays() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionTraceEntry.displays)
  return &_impl_.displays_;
}
inline const ::perfetto::protos::DisplayInfo& TransactionTraceEntry::_internal_displays(int index) const {
  return _impl_.displays_.Get(index);
}
inline const ::perfetto::protos::DisplayInfo& TransactionTraceEntry::displays(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionTraceEntry.displays)
  return _internal_displays(index);
}
inline ::perfetto::protos::DisplayInfo* TransactionTraceEntry::_internal_add_displays() {
  return _impl_.displays_.Add();
}
inline ::perfetto::protos::DisplayInfo* TransactionTraceEntry::add_displays() {
  ::perfetto::protos::DisplayInfo* _add = _internal_add_displays();
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionTraceEntry.displays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayInfo >&
TransactionTraceEntry::displays() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionTraceEntry.displays)
  return _impl_.displays_;
}

// -------------------------------------------------------------------

// DisplayInfo

// optional uint32 layer_stack = 1;
inline bool DisplayInfo::_internal_has_layer_stack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DisplayInfo::has_layer_stack() const {
  return _internal_has_layer_stack();
}
inline void DisplayInfo::clear_layer_stack() {
  _impl_.layer_stack_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DisplayInfo::_internal_layer_stack() const {
  return _impl_.layer_stack_;
}
inline uint32_t DisplayInfo::layer_stack() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.layer_stack)
  return _internal_layer_stack();
}
inline void DisplayInfo::_internal_set_layer_stack(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.layer_stack_ = value;
}
inline void DisplayInfo::set_layer_stack(uint32_t value) {
  _internal_set_layer_stack(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.layer_stack)
}

// optional int32 display_id = 2;
inline bool DisplayInfo::_internal_has_display_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DisplayInfo::has_display_id() const {
  return _internal_has_display_id();
}
inline void DisplayInfo::clear_display_id() {
  _impl_.display_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DisplayInfo::_internal_display_id() const {
  return _impl_.display_id_;
}
inline int32_t DisplayInfo::display_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.display_id)
  return _internal_display_id();
}
inline void DisplayInfo::_internal_set_display_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.display_id_ = value;
}
inline void DisplayInfo::set_display_id(int32_t value) {
  _internal_set_display_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.display_id)
}

// optional int32 logical_width = 3;
inline bool DisplayInfo::_internal_has_logical_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DisplayInfo::has_logical_width() const {
  return _internal_has_logical_width();
}
inline void DisplayInfo::clear_logical_width() {
  _impl_.logical_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DisplayInfo::_internal_logical_width() const {
  return _impl_.logical_width_;
}
inline int32_t DisplayInfo::logical_width() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.logical_width)
  return _internal_logical_width();
}
inline void DisplayInfo::_internal_set_logical_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.logical_width_ = value;
}
inline void DisplayInfo::set_logical_width(int32_t value) {
  _internal_set_logical_width(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.logical_width)
}

// optional int32 logical_height = 4;
inline bool DisplayInfo::_internal_has_logical_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DisplayInfo::has_logical_height() const {
  return _internal_has_logical_height();
}
inline void DisplayInfo::clear_logical_height() {
  _impl_.logical_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DisplayInfo::_internal_logical_height() const {
  return _impl_.logical_height_;
}
inline int32_t DisplayInfo::logical_height() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.logical_height)
  return _internal_logical_height();
}
inline void DisplayInfo::_internal_set_logical_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.logical_height_ = value;
}
inline void DisplayInfo::set_logical_height(int32_t value) {
  _internal_set_logical_height(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.logical_height)
}

// optional .perfetto.protos.Transform transform_inverse = 5;
inline bool DisplayInfo::_internal_has_transform_inverse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_inverse_ != nullptr);
  return value;
}
inline bool DisplayInfo::has_transform_inverse() const {
  return _internal_has_transform_inverse();
}
inline void DisplayInfo::clear_transform_inverse() {
  if (_impl_.transform_inverse_ != nullptr) _impl_.transform_inverse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::Transform& DisplayInfo::_internal_transform_inverse() const {
  const ::perfetto::protos::Transform* p = _impl_.transform_inverse_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::Transform&>(
      ::perfetto::protos::_Transform_default_instance_);
}
inline const ::perfetto::protos::Transform& DisplayInfo::transform_inverse() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.transform_inverse)
  return _internal_transform_inverse();
}
inline void DisplayInfo::unsafe_arena_set_allocated_transform_inverse(
    ::perfetto::protos::Transform* transform_inverse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_inverse_);
  }
  _impl_.transform_inverse_ = transform_inverse;
  if (transform_inverse) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DisplayInfo.transform_inverse)
}
inline ::perfetto::protos::Transform* DisplayInfo::release_transform_inverse() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::Transform* temp = _impl_.transform_inverse_;
  _impl_.transform_inverse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::Transform* DisplayInfo::unsafe_arena_release_transform_inverse() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayInfo.transform_inverse)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::Transform* temp = _impl_.transform_inverse_;
  _impl_.transform_inverse_ = nullptr;
  return temp;
}
inline ::perfetto::protos::Transform* DisplayInfo::_internal_mutable_transform_inverse() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_inverse_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::Transform>(GetArenaForAllocation());
    _impl_.transform_inverse_ = p;
  }
  return _impl_.transform_inverse_;
}
inline ::perfetto::protos::Transform* DisplayInfo::mutable_transform_inverse() {
  ::perfetto::protos::Transform* _msg = _internal_mutable_transform_inverse();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayInfo.transform_inverse)
  return _msg;
}
inline void DisplayInfo::set_allocated_transform_inverse(::perfetto::protos::Transform* transform_inverse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_inverse_;
  }
  if (transform_inverse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform_inverse);
    if (message_arena != submessage_arena) {
      transform_inverse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform_inverse, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transform_inverse_ = transform_inverse;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayInfo.transform_inverse)
}

// optional .perfetto.protos.Transform transform = 6;
inline bool DisplayInfo::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline bool DisplayInfo::has_transform() const {
  return _internal_has_transform();
}
inline void DisplayInfo::clear_transform() {
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::Transform& DisplayInfo::_internal_transform() const {
  const ::perfetto::protos::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::Transform&>(
      ::perfetto::protos::_Transform_default_instance_);
}
inline const ::perfetto::protos::Transform& DisplayInfo::transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.transform)
  return _internal_transform();
}
inline void DisplayInfo::unsafe_arena_set_allocated_transform(
    ::perfetto::protos::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DisplayInfo.transform)
}
inline ::perfetto::protos::Transform* DisplayInfo::release_transform() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::Transform* DisplayInfo::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayInfo.transform)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::Transform* DisplayInfo::_internal_mutable_transform() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::Transform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::perfetto::protos::Transform* DisplayInfo::mutable_transform() {
  ::perfetto::protos::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayInfo.transform)
  return _msg;
}
inline void DisplayInfo::set_allocated_transform(::perfetto::protos::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayInfo.transform)
}

// optional bool receives_input = 7;
inline bool DisplayInfo::_internal_has_receives_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DisplayInfo::has_receives_input() const {
  return _internal_has_receives_input();
}
inline void DisplayInfo::clear_receives_input() {
  _impl_.receives_input_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DisplayInfo::_internal_receives_input() const {
  return _impl_.receives_input_;
}
inline bool DisplayInfo::receives_input() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.receives_input)
  return _internal_receives_input();
}
inline void DisplayInfo::_internal_set_receives_input(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.receives_input_ = value;
}
inline void DisplayInfo::set_receives_input(bool value) {
  _internal_set_receives_input(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.receives_input)
}

// optional bool is_secure = 8;
inline bool DisplayInfo::_internal_has_is_secure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DisplayInfo::has_is_secure() const {
  return _internal_has_is_secure();
}
inline void DisplayInfo::clear_is_secure() {
  _impl_.is_secure_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool DisplayInfo::_internal_is_secure() const {
  return _impl_.is_secure_;
}
inline bool DisplayInfo::is_secure() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.is_secure)
  return _internal_is_secure();
}
inline void DisplayInfo::_internal_set_is_secure(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_secure_ = value;
}
inline void DisplayInfo::set_is_secure(bool value) {
  _internal_set_is_secure(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.is_secure)
}

// optional bool is_primary = 9;
inline bool DisplayInfo::_internal_has_is_primary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DisplayInfo::has_is_primary() const {
  return _internal_has_is_primary();
}
inline void DisplayInfo::clear_is_primary() {
  _impl_.is_primary_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool DisplayInfo::_internal_is_primary() const {
  return _impl_.is_primary_;
}
inline bool DisplayInfo::is_primary() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.is_primary)
  return _internal_is_primary();
}
inline void DisplayInfo::_internal_set_is_primary(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.is_primary_ = value;
}
inline void DisplayInfo::set_is_primary(bool value) {
  _internal_set_is_primary(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.is_primary)
}

// optional bool is_virtual = 10;
inline bool DisplayInfo::_internal_has_is_virtual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DisplayInfo::has_is_virtual() const {
  return _internal_has_is_virtual();
}
inline void DisplayInfo::clear_is_virtual() {
  _impl_.is_virtual_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool DisplayInfo::_internal_is_virtual() const {
  return _impl_.is_virtual_;
}
inline bool DisplayInfo::is_virtual() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.is_virtual)
  return _internal_is_virtual();
}
inline void DisplayInfo::_internal_set_is_virtual(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_virtual_ = value;
}
inline void DisplayInfo::set_is_virtual(bool value) {
  _internal_set_is_virtual(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.is_virtual)
}

// optional int32 rotation_flags = 11;
inline bool DisplayInfo::_internal_has_rotation_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DisplayInfo::has_rotation_flags() const {
  return _internal_has_rotation_flags();
}
inline void DisplayInfo::clear_rotation_flags() {
  _impl_.rotation_flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t DisplayInfo::_internal_rotation_flags() const {
  return _impl_.rotation_flags_;
}
inline int32_t DisplayInfo::rotation_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.rotation_flags)
  return _internal_rotation_flags();
}
inline void DisplayInfo::_internal_set_rotation_flags(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.rotation_flags_ = value;
}
inline void DisplayInfo::set_rotation_flags(int32_t value) {
  _internal_set_rotation_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.rotation_flags)
}

// optional int32 transform_hint = 12;
inline bool DisplayInfo::_internal_has_transform_hint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DisplayInfo::has_transform_hint() const {
  return _internal_has_transform_hint();
}
inline void DisplayInfo::clear_transform_hint() {
  _impl_.transform_hint_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t DisplayInfo::_internal_transform_hint() const {
  return _impl_.transform_hint_;
}
inline int32_t DisplayInfo::transform_hint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayInfo.transform_hint)
  return _internal_transform_hint();
}
inline void DisplayInfo::_internal_set_transform_hint(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.transform_hint_ = value;
}
inline void DisplayInfo::set_transform_hint(int32_t value) {
  _internal_set_transform_hint(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayInfo.transform_hint)
}

// -------------------------------------------------------------------

// LayerCreationArgs

// optional uint32 layer_id = 1;
inline bool LayerCreationArgs::_internal_has_layer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerCreationArgs::has_layer_id() const {
  return _internal_has_layer_id();
}
inline void LayerCreationArgs::clear_layer_id() {
  _impl_.layer_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LayerCreationArgs::_internal_layer_id() const {
  return _impl_.layer_id_;
}
inline uint32_t LayerCreationArgs::layer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerCreationArgs.layer_id)
  return _internal_layer_id();
}
inline void LayerCreationArgs::_internal_set_layer_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.layer_id_ = value;
}
inline void LayerCreationArgs::set_layer_id(uint32_t value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerCreationArgs.layer_id)
}

// optional string name = 2;
inline bool LayerCreationArgs::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerCreationArgs::has_name() const {
  return _internal_has_name();
}
inline void LayerCreationArgs::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerCreationArgs::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerCreationArgs.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerCreationArgs::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerCreationArgs.name)
}
inline std::string* LayerCreationArgs::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerCreationArgs.name)
  return _s;
}
inline const std::string& LayerCreationArgs::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LayerCreationArgs::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerCreationArgs::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerCreationArgs::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerCreationArgs.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerCreationArgs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerCreationArgs.name)
}

// optional uint32 flags = 3;
inline bool LayerCreationArgs::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayerCreationArgs::has_flags() const {
  return _internal_has_flags();
}
inline void LayerCreationArgs::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LayerCreationArgs::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t LayerCreationArgs::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerCreationArgs.flags)
  return _internal_flags();
}
inline void LayerCreationArgs::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.flags_ = value;
}
inline void LayerCreationArgs::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerCreationArgs.flags)
}

// optional uint32 parent_id = 4;
inline bool LayerCreationArgs::_internal_has_parent_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayerCreationArgs::has_parent_id() const {
  return _internal_has_parent_id();
}
inline void LayerCreationArgs::clear_parent_id() {
  _impl_.parent_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LayerCreationArgs::_internal_parent_id() const {
  return _impl_.parent_id_;
}
inline uint32_t LayerCreationArgs::parent_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerCreationArgs.parent_id)
  return _internal_parent_id();
}
inline void LayerCreationArgs::_internal_set_parent_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.parent_id_ = value;
}
inline void LayerCreationArgs::set_parent_id(uint32_t value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerCreationArgs.parent_id)
}

// optional uint32 mirror_from_id = 5;
inline bool LayerCreationArgs::_internal_has_mirror_from_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LayerCreationArgs::has_mirror_from_id() const {
  return _internal_has_mirror_from_id();
}
inline void LayerCreationArgs::clear_mirror_from_id() {
  _impl_.mirror_from_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t LayerCreationArgs::_internal_mirror_from_id() const {
  return _impl_.mirror_from_id_;
}
inline uint32_t LayerCreationArgs::mirror_from_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerCreationArgs.mirror_from_id)
  return _internal_mirror_from_id();
}
inline void LayerCreationArgs::_internal_set_mirror_from_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mirror_from_id_ = value;
}
inline void LayerCreationArgs::set_mirror_from_id(uint32_t value) {
  _internal_set_mirror_from_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerCreationArgs.mirror_from_id)
}

// optional bool add_to_root = 6;
inline bool LayerCreationArgs::_internal_has_add_to_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LayerCreationArgs::has_add_to_root() const {
  return _internal_has_add_to_root();
}
inline void LayerCreationArgs::clear_add_to_root() {
  _impl_.add_to_root_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool LayerCreationArgs::_internal_add_to_root() const {
  return _impl_.add_to_root_;
}
inline bool LayerCreationArgs::add_to_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerCreationArgs.add_to_root)
  return _internal_add_to_root();
}
inline void LayerCreationArgs::_internal_set_add_to_root(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.add_to_root_ = value;
}
inline void LayerCreationArgs::set_add_to_root(bool value) {
  _internal_set_add_to_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerCreationArgs.add_to_root)
}

// optional uint32 layer_stack_to_mirror = 7;
inline bool LayerCreationArgs::_internal_has_layer_stack_to_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LayerCreationArgs::has_layer_stack_to_mirror() const {
  return _internal_has_layer_stack_to_mirror();
}
inline void LayerCreationArgs::clear_layer_stack_to_mirror() {
  _impl_.layer_stack_to_mirror_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t LayerCreationArgs::_internal_layer_stack_to_mirror() const {
  return _impl_.layer_stack_to_mirror_;
}
inline uint32_t LayerCreationArgs::layer_stack_to_mirror() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerCreationArgs.layer_stack_to_mirror)
  return _internal_layer_stack_to_mirror();
}
inline void LayerCreationArgs::_internal_set_layer_stack_to_mirror(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.layer_stack_to_mirror_ = value;
}
inline void LayerCreationArgs::set_layer_stack_to_mirror(uint32_t value) {
  _internal_set_layer_stack_to_mirror(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerCreationArgs.layer_stack_to_mirror)
}

// -------------------------------------------------------------------

// Transform

// optional float dsdx = 1;
inline bool Transform::_internal_has_dsdx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transform::has_dsdx() const {
  return _internal_has_dsdx();
}
inline void Transform::clear_dsdx() {
  _impl_.dsdx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Transform::_internal_dsdx() const {
  return _impl_.dsdx_;
}
inline float Transform::dsdx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Transform.dsdx)
  return _internal_dsdx();
}
inline void Transform::_internal_set_dsdx(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dsdx_ = value;
}
inline void Transform::set_dsdx(float value) {
  _internal_set_dsdx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Transform.dsdx)
}

// optional float dtdx = 2;
inline bool Transform::_internal_has_dtdx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transform::has_dtdx() const {
  return _internal_has_dtdx();
}
inline void Transform::clear_dtdx() {
  _impl_.dtdx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Transform::_internal_dtdx() const {
  return _impl_.dtdx_;
}
inline float Transform::dtdx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Transform.dtdx)
  return _internal_dtdx();
}
inline void Transform::_internal_set_dtdx(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dtdx_ = value;
}
inline void Transform::set_dtdx(float value) {
  _internal_set_dtdx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Transform.dtdx)
}

// optional float dtdy = 3;
inline bool Transform::_internal_has_dtdy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transform::has_dtdy() const {
  return _internal_has_dtdy();
}
inline void Transform::clear_dtdy() {
  _impl_.dtdy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Transform::_internal_dtdy() const {
  return _impl_.dtdy_;
}
inline float Transform::dtdy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Transform.dtdy)
  return _internal_dtdy();
}
inline void Transform::_internal_set_dtdy(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dtdy_ = value;
}
inline void Transform::set_dtdy(float value) {
  _internal_set_dtdy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Transform.dtdy)
}

// optional float dsdy = 4;
inline bool Transform::_internal_has_dsdy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Transform::has_dsdy() const {
  return _internal_has_dsdy();
}
inline void Transform::clear_dsdy() {
  _impl_.dsdy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Transform::_internal_dsdy() const {
  return _impl_.dsdy_;
}
inline float Transform::dsdy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Transform.dsdy)
  return _internal_dsdy();
}
inline void Transform::_internal_set_dsdy(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dsdy_ = value;
}
inline void Transform::set_dsdy(float value) {
  _internal_set_dsdy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Transform.dsdy)
}

// optional float tx = 5;
inline bool Transform::_internal_has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Transform::has_tx() const {
  return _internal_has_tx();
}
inline void Transform::clear_tx() {
  _impl_.tx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Transform::_internal_tx() const {
  return _impl_.tx_;
}
inline float Transform::tx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Transform.tx)
  return _internal_tx();
}
inline void Transform::_internal_set_tx(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tx_ = value;
}
inline void Transform::set_tx(float value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Transform.tx)
}

// optional float ty = 6;
inline bool Transform::_internal_has_ty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Transform::has_ty() const {
  return _internal_has_ty();
}
inline void Transform::clear_ty() {
  _impl_.ty_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Transform::_internal_ty() const {
  return _impl_.ty_;
}
inline float Transform::ty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Transform.ty)
  return _internal_ty();
}
inline void Transform::_internal_set_ty(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ty_ = value;
}
inline void Transform::set_ty(float value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Transform.ty)
}

// -------------------------------------------------------------------

// TransactionState

// optional int32 pid = 1;
inline bool TransactionState::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransactionState::has_pid() const {
  return _internal_has_pid();
}
inline void TransactionState::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TransactionState::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t TransactionState::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.pid)
  return _internal_pid();
}
inline void TransactionState::_internal_set_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_ = value;
}
inline void TransactionState::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionState.pid)
}

// optional int32 uid = 2;
inline bool TransactionState::_internal_has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransactionState::has_uid() const {
  return _internal_has_uid();
}
inline void TransactionState::clear_uid() {
  _impl_.uid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TransactionState::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t TransactionState::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.uid)
  return _internal_uid();
}
inline void TransactionState::_internal_set_uid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uid_ = value;
}
inline void TransactionState::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionState.uid)
}

// optional int64 vsync_id = 3;
inline bool TransactionState::_internal_has_vsync_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransactionState::has_vsync_id() const {
  return _internal_has_vsync_id();
}
inline void TransactionState::clear_vsync_id() {
  _impl_.vsync_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t TransactionState::_internal_vsync_id() const {
  return _impl_.vsync_id_;
}
inline int64_t TransactionState::vsync_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.vsync_id)
  return _internal_vsync_id();
}
inline void TransactionState::_internal_set_vsync_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vsync_id_ = value;
}
inline void TransactionState::set_vsync_id(int64_t value) {
  _internal_set_vsync_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionState.vsync_id)
}

// optional int32 input_event_id = 4;
inline bool TransactionState::_internal_has_input_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransactionState::has_input_event_id() const {
  return _internal_has_input_event_id();
}
inline void TransactionState::clear_input_event_id() {
  _impl_.input_event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t TransactionState::_internal_input_event_id() const {
  return _impl_.input_event_id_;
}
inline int32_t TransactionState::input_event_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.input_event_id)
  return _internal_input_event_id();
}
inline void TransactionState::_internal_set_input_event_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.input_event_id_ = value;
}
inline void TransactionState::set_input_event_id(int32_t value) {
  _internal_set_input_event_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionState.input_event_id)
}

// optional int64 post_time = 5;
inline bool TransactionState::_internal_has_post_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransactionState::has_post_time() const {
  return _internal_has_post_time();
}
inline void TransactionState::clear_post_time() {
  _impl_.post_time_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t TransactionState::_internal_post_time() const {
  return _impl_.post_time_;
}
inline int64_t TransactionState::post_time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.post_time)
  return _internal_post_time();
}
inline void TransactionState::_internal_set_post_time(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.post_time_ = value;
}
inline void TransactionState::set_post_time(int64_t value) {
  _internal_set_post_time(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionState.post_time)
}

// optional uint64 transaction_id = 6;
inline bool TransactionState::_internal_has_transaction_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransactionState::has_transaction_id() const {
  return _internal_has_transaction_id();
}
inline void TransactionState::clear_transaction_id() {
  _impl_.transaction_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t TransactionState::_internal_transaction_id() const {
  return _impl_.transaction_id_;
}
inline uint64_t TransactionState::transaction_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.transaction_id)
  return _internal_transaction_id();
}
inline void TransactionState::_internal_set_transaction_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.transaction_id_ = value;
}
inline void TransactionState::set_transaction_id(uint64_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionState.transaction_id)
}

// repeated .perfetto.protos.LayerState layer_changes = 7;
inline int TransactionState::_internal_layer_changes_size() const {
  return _impl_.layer_changes_.size();
}
inline int TransactionState::layer_changes_size() const {
  return _internal_layer_changes_size();
}
inline void TransactionState::clear_layer_changes() {
  _impl_.layer_changes_.Clear();
}
inline ::perfetto::protos::LayerState* TransactionState::mutable_layer_changes(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TransactionState.layer_changes)
  return _impl_.layer_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerState >*
TransactionState::mutable_layer_changes() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionState.layer_changes)
  return &_impl_.layer_changes_;
}
inline const ::perfetto::protos::LayerState& TransactionState::_internal_layer_changes(int index) const {
  return _impl_.layer_changes_.Get(index);
}
inline const ::perfetto::protos::LayerState& TransactionState::layer_changes(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.layer_changes)
  return _internal_layer_changes(index);
}
inline ::perfetto::protos::LayerState* TransactionState::_internal_add_layer_changes() {
  return _impl_.layer_changes_.Add();
}
inline ::perfetto::protos::LayerState* TransactionState::add_layer_changes() {
  ::perfetto::protos::LayerState* _add = _internal_add_layer_changes();
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionState.layer_changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::LayerState >&
TransactionState::layer_changes() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionState.layer_changes)
  return _impl_.layer_changes_;
}

// repeated .perfetto.protos.DisplayState display_changes = 8;
inline int TransactionState::_internal_display_changes_size() const {
  return _impl_.display_changes_.size();
}
inline int TransactionState::display_changes_size() const {
  return _internal_display_changes_size();
}
inline void TransactionState::clear_display_changes() {
  _impl_.display_changes_.Clear();
}
inline ::perfetto::protos::DisplayState* TransactionState::mutable_display_changes(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TransactionState.display_changes)
  return _impl_.display_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >*
TransactionState::mutable_display_changes() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionState.display_changes)
  return &_impl_.display_changes_;
}
inline const ::perfetto::protos::DisplayState& TransactionState::_internal_display_changes(int index) const {
  return _impl_.display_changes_.Get(index);
}
inline const ::perfetto::protos::DisplayState& TransactionState::display_changes(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.display_changes)
  return _internal_display_changes(index);
}
inline ::perfetto::protos::DisplayState* TransactionState::_internal_add_display_changes() {
  return _impl_.display_changes_.Add();
}
inline ::perfetto::protos::DisplayState* TransactionState::add_display_changes() {
  ::perfetto::protos::DisplayState* _add = _internal_add_display_changes();
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionState.display_changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DisplayState >&
TransactionState::display_changes() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionState.display_changes)
  return _impl_.display_changes_;
}

// repeated uint64 merged_transaction_ids = 9;
inline int TransactionState::_internal_merged_transaction_ids_size() const {
  return _impl_.merged_transaction_ids_.size();
}
inline int TransactionState::merged_transaction_ids_size() const {
  return _internal_merged_transaction_ids_size();
}
inline void TransactionState::clear_merged_transaction_ids() {
  _impl_.merged_transaction_ids_.Clear();
}
inline uint64_t TransactionState::_internal_merged_transaction_ids(int index) const {
  return _impl_.merged_transaction_ids_.Get(index);
}
inline uint64_t TransactionState::merged_transaction_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TransactionState.merged_transaction_ids)
  return _internal_merged_transaction_ids(index);
}
inline void TransactionState::set_merged_transaction_ids(int index, uint64_t value) {
  _impl_.merged_transaction_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TransactionState.merged_transaction_ids)
}
inline void TransactionState::_internal_add_merged_transaction_ids(uint64_t value) {
  _impl_.merged_transaction_ids_.Add(value);
}
inline void TransactionState::add_merged_transaction_ids(uint64_t value) {
  _internal_add_merged_transaction_ids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TransactionState.merged_transaction_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TransactionState::_internal_merged_transaction_ids() const {
  return _impl_.merged_transaction_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TransactionState::merged_transaction_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TransactionState.merged_transaction_ids)
  return _internal_merged_transaction_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TransactionState::_internal_mutable_merged_transaction_ids() {
  return &_impl_.merged_transaction_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TransactionState::mutable_merged_transaction_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TransactionState.merged_transaction_ids)
  return _internal_mutable_merged_transaction_ids();
}

// -------------------------------------------------------------------

// LayerState_Matrix22

// optional float dsdx = 1;
inline bool LayerState_Matrix22::_internal_has_dsdx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerState_Matrix22::has_dsdx() const {
  return _internal_has_dsdx();
}
inline void LayerState_Matrix22::clear_dsdx() {
  _impl_.dsdx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float LayerState_Matrix22::_internal_dsdx() const {
  return _impl_.dsdx_;
}
inline float LayerState_Matrix22::dsdx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.Matrix22.dsdx)
  return _internal_dsdx();
}
inline void LayerState_Matrix22::_internal_set_dsdx(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dsdx_ = value;
}
inline void LayerState_Matrix22::set_dsdx(float value) {
  _internal_set_dsdx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.Matrix22.dsdx)
}

// optional float dtdx = 2;
inline bool LayerState_Matrix22::_internal_has_dtdx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerState_Matrix22::has_dtdx() const {
  return _internal_has_dtdx();
}
inline void LayerState_Matrix22::clear_dtdx() {
  _impl_.dtdx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float LayerState_Matrix22::_internal_dtdx() const {
  return _impl_.dtdx_;
}
inline float LayerState_Matrix22::dtdx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.Matrix22.dtdx)
  return _internal_dtdx();
}
inline void LayerState_Matrix22::_internal_set_dtdx(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dtdx_ = value;
}
inline void LayerState_Matrix22::set_dtdx(float value) {
  _internal_set_dtdx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.Matrix22.dtdx)
}

// optional float dtdy = 3;
inline bool LayerState_Matrix22::_internal_has_dtdy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayerState_Matrix22::has_dtdy() const {
  return _internal_has_dtdy();
}
inline void LayerState_Matrix22::clear_dtdy() {
  _impl_.dtdy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float LayerState_Matrix22::_internal_dtdy() const {
  return _impl_.dtdy_;
}
inline float LayerState_Matrix22::dtdy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.Matrix22.dtdy)
  return _internal_dtdy();
}
inline void LayerState_Matrix22::_internal_set_dtdy(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dtdy_ = value;
}
inline void LayerState_Matrix22::set_dtdy(float value) {
  _internal_set_dtdy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.Matrix22.dtdy)
}

// optional float dsdy = 4;
inline bool LayerState_Matrix22::_internal_has_dsdy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayerState_Matrix22::has_dsdy() const {
  return _internal_has_dsdy();
}
inline void LayerState_Matrix22::clear_dsdy() {
  _impl_.dsdy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float LayerState_Matrix22::_internal_dsdy() const {
  return _impl_.dsdy_;
}
inline float LayerState_Matrix22::dsdy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.Matrix22.dsdy)
  return _internal_dsdy();
}
inline void LayerState_Matrix22::_internal_set_dsdy(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dsdy_ = value;
}
inline void LayerState_Matrix22::set_dsdy(float value) {
  _internal_set_dsdy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.Matrix22.dsdy)
}

// -------------------------------------------------------------------

// LayerState_Color3

// optional float r = 1;
inline bool LayerState_Color3::_internal_has_r() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerState_Color3::has_r() const {
  return _internal_has_r();
}
inline void LayerState_Color3::clear_r() {
  _impl_.r_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float LayerState_Color3::_internal_r() const {
  return _impl_.r_;
}
inline float LayerState_Color3::r() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.Color3.r)
  return _internal_r();
}
inline void LayerState_Color3::_internal_set_r(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.r_ = value;
}
inline void LayerState_Color3::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.Color3.r)
}

// optional float g = 2;
inline bool LayerState_Color3::_internal_has_g() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerState_Color3::has_g() const {
  return _internal_has_g();
}
inline void LayerState_Color3::clear_g() {
  _impl_.g_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float LayerState_Color3::_internal_g() const {
  return _impl_.g_;
}
inline float LayerState_Color3::g() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.Color3.g)
  return _internal_g();
}
inline void LayerState_Color3::_internal_set_g(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.g_ = value;
}
inline void LayerState_Color3::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.Color3.g)
}

// optional float b = 3;
inline bool LayerState_Color3::_internal_has_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayerState_Color3::has_b() const {
  return _internal_has_b();
}
inline void LayerState_Color3::clear_b() {
  _impl_.b_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float LayerState_Color3::_internal_b() const {
  return _impl_.b_;
}
inline float LayerState_Color3::b() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.Color3.b)
  return _internal_b();
}
inline void LayerState_Color3::_internal_set_b(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.b_ = value;
}
inline void LayerState_Color3::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.Color3.b)
}

// -------------------------------------------------------------------

// LayerState_BufferData

// optional uint64 buffer_id = 1;
inline bool LayerState_BufferData::_internal_has_buffer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_buffer_id() const {
  return _internal_has_buffer_id();
}
inline void LayerState_BufferData::clear_buffer_id() {
  _impl_.buffer_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t LayerState_BufferData::_internal_buffer_id() const {
  return _impl_.buffer_id_;
}
inline uint64_t LayerState_BufferData::buffer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.buffer_id)
  return _internal_buffer_id();
}
inline void LayerState_BufferData::_internal_set_buffer_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.buffer_id_ = value;
}
inline void LayerState_BufferData::set_buffer_id(uint64_t value) {
  _internal_set_buffer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.buffer_id)
}

// optional uint32 width = 2;
inline bool LayerState_BufferData::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_width() const {
  return _internal_has_width();
}
inline void LayerState_BufferData::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LayerState_BufferData::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t LayerState_BufferData::width() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.width)
  return _internal_width();
}
inline void LayerState_BufferData::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.width_ = value;
}
inline void LayerState_BufferData::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.width)
}

// optional uint32 height = 3;
inline bool LayerState_BufferData::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_height() const {
  return _internal_has_height();
}
inline void LayerState_BufferData::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LayerState_BufferData::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t LayerState_BufferData::height() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.height)
  return _internal_height();
}
inline void LayerState_BufferData::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_ = value;
}
inline void LayerState_BufferData::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.height)
}

// optional uint64 frame_number = 4;
inline bool LayerState_BufferData::_internal_has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void LayerState_BufferData::clear_frame_number() {
  _impl_.frame_number_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t LayerState_BufferData::_internal_frame_number() const {
  return _impl_.frame_number_;
}
inline uint64_t LayerState_BufferData::frame_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.frame_number)
  return _internal_frame_number();
}
inline void LayerState_BufferData::_internal_set_frame_number(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.frame_number_ = value;
}
inline void LayerState_BufferData::set_frame_number(uint64_t value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.frame_number)
}

// optional uint32 flags = 5;
inline bool LayerState_BufferData::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_flags() const {
  return _internal_has_flags();
}
inline void LayerState_BufferData::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t LayerState_BufferData::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t LayerState_BufferData::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.flags)
  return _internal_flags();
}
inline void LayerState_BufferData::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.flags_ = value;
}
inline void LayerState_BufferData::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.flags)
}

// optional uint64 cached_buffer_id = 6;
inline bool LayerState_BufferData::_internal_has_cached_buffer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_cached_buffer_id() const {
  return _internal_has_cached_buffer_id();
}
inline void LayerState_BufferData::clear_cached_buffer_id() {
  _impl_.cached_buffer_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t LayerState_BufferData::_internal_cached_buffer_id() const {
  return _impl_.cached_buffer_id_;
}
inline uint64_t LayerState_BufferData::cached_buffer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.cached_buffer_id)
  return _internal_cached_buffer_id();
}
inline void LayerState_BufferData::_internal_set_cached_buffer_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cached_buffer_id_ = value;
}
inline void LayerState_BufferData::set_cached_buffer_id(uint64_t value) {
  _internal_set_cached_buffer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.cached_buffer_id)
}

// optional .perfetto.protos.LayerState.BufferData.PixelFormat pixel_format = 7;
inline bool LayerState_BufferData::_internal_has_pixel_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_pixel_format() const {
  return _internal_has_pixel_format();
}
inline void LayerState_BufferData::clear_pixel_format() {
  _impl_.pixel_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::perfetto::protos::LayerState_BufferData_PixelFormat LayerState_BufferData::_internal_pixel_format() const {
  return static_cast< ::perfetto::protos::LayerState_BufferData_PixelFormat >(_impl_.pixel_format_);
}
inline ::perfetto::protos::LayerState_BufferData_PixelFormat LayerState_BufferData::pixel_format() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.pixel_format)
  return _internal_pixel_format();
}
inline void LayerState_BufferData::_internal_set_pixel_format(::perfetto::protos::LayerState_BufferData_PixelFormat value) {
  assert(::perfetto::protos::LayerState_BufferData_PixelFormat_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pixel_format_ = value;
}
inline void LayerState_BufferData::set_pixel_format(::perfetto::protos::LayerState_BufferData_PixelFormat value) {
  _internal_set_pixel_format(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.pixel_format)
}

// optional uint64 usage = 8;
inline bool LayerState_BufferData::_internal_has_usage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LayerState_BufferData::has_usage() const {
  return _internal_has_usage();
}
inline void LayerState_BufferData::clear_usage() {
  _impl_.usage_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t LayerState_BufferData::_internal_usage() const {
  return _impl_.usage_;
}
inline uint64_t LayerState_BufferData::usage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.BufferData.usage)
  return _internal_usage();
}
inline void LayerState_BufferData::_internal_set_usage(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.usage_ = value;
}
inline void LayerState_BufferData::set_usage(uint64_t value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.BufferData.usage)
}

// -------------------------------------------------------------------

// LayerState_WindowInfo

// optional uint32 layout_params_flags = 1;
inline bool LayerState_WindowInfo::_internal_has_layout_params_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_layout_params_flags() const {
  return _internal_has_layout_params_flags();
}
inline void LayerState_WindowInfo::clear_layout_params_flags() {
  _impl_.layout_params_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LayerState_WindowInfo::_internal_layout_params_flags() const {
  return _impl_.layout_params_flags_;
}
inline uint32_t LayerState_WindowInfo::layout_params_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.layout_params_flags)
  return _internal_layout_params_flags();
}
inline void LayerState_WindowInfo::_internal_set_layout_params_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.layout_params_flags_ = value;
}
inline void LayerState_WindowInfo::set_layout_params_flags(uint32_t value) {
  _internal_set_layout_params_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.layout_params_flags)
}

// optional int32 layout_params_type = 2;
inline bool LayerState_WindowInfo::_internal_has_layout_params_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_layout_params_type() const {
  return _internal_has_layout_params_type();
}
inline void LayerState_WindowInfo::clear_layout_params_type() {
  _impl_.layout_params_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t LayerState_WindowInfo::_internal_layout_params_type() const {
  return _impl_.layout_params_type_;
}
inline int32_t LayerState_WindowInfo::layout_params_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.layout_params_type)
  return _internal_layout_params_type();
}
inline void LayerState_WindowInfo::_internal_set_layout_params_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.layout_params_type_ = value;
}
inline void LayerState_WindowInfo::set_layout_params_type(int32_t value) {
  _internal_set_layout_params_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.layout_params_type)
}

// optional .perfetto.protos.RegionProto touchable_region = 3;
inline bool LayerState_WindowInfo::_internal_has_touchable_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.touchable_region_ != nullptr);
  return value;
}
inline bool LayerState_WindowInfo::has_touchable_region() const {
  return _internal_has_touchable_region();
}
inline const ::perfetto::protos::RegionProto& LayerState_WindowInfo::_internal_touchable_region() const {
  const ::perfetto::protos::RegionProto* p = _impl_.touchable_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RegionProto&>(
      ::perfetto::protos::_RegionProto_default_instance_);
}
inline const ::perfetto::protos::RegionProto& LayerState_WindowInfo::touchable_region() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.touchable_region)
  return _internal_touchable_region();
}
inline void LayerState_WindowInfo::unsafe_arena_set_allocated_touchable_region(
    ::perfetto::protos::RegionProto* touchable_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touchable_region_);
  }
  _impl_.touchable_region_ = touchable_region;
  if (touchable_region) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.WindowInfo.touchable_region)
}
inline ::perfetto::protos::RegionProto* LayerState_WindowInfo::release_touchable_region() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::RegionProto* temp = _impl_.touchable_region_;
  _impl_.touchable_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerState_WindowInfo::unsafe_arena_release_touchable_region() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.WindowInfo.touchable_region)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::RegionProto* temp = _impl_.touchable_region_;
  _impl_.touchable_region_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerState_WindowInfo::_internal_mutable_touchable_region() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.touchable_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RegionProto>(GetArenaForAllocation());
    _impl_.touchable_region_ = p;
  }
  return _impl_.touchable_region_;
}
inline ::perfetto::protos::RegionProto* LayerState_WindowInfo::mutable_touchable_region() {
  ::perfetto::protos::RegionProto* _msg = _internal_mutable_touchable_region();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.WindowInfo.touchable_region)
  return _msg;
}
inline void LayerState_WindowInfo::set_allocated_touchable_region(::perfetto::protos::RegionProto* touchable_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touchable_region_);
  }
  if (touchable_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touchable_region));
    if (message_arena != submessage_arena) {
      touchable_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchable_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.touchable_region_ = touchable_region;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.WindowInfo.touchable_region)
}

// optional int32 surface_inset = 4;
inline bool LayerState_WindowInfo::_internal_has_surface_inset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_surface_inset() const {
  return _internal_has_surface_inset();
}
inline void LayerState_WindowInfo::clear_surface_inset() {
  _impl_.surface_inset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t LayerState_WindowInfo::_internal_surface_inset() const {
  return _impl_.surface_inset_;
}
inline int32_t LayerState_WindowInfo::surface_inset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.surface_inset)
  return _internal_surface_inset();
}
inline void LayerState_WindowInfo::_internal_set_surface_inset(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.surface_inset_ = value;
}
inline void LayerState_WindowInfo::set_surface_inset(int32_t value) {
  _internal_set_surface_inset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.surface_inset)
}

// optional bool focusable = 5;
inline bool LayerState_WindowInfo::_internal_has_focusable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_focusable() const {
  return _internal_has_focusable();
}
inline void LayerState_WindowInfo::clear_focusable() {
  _impl_.focusable_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool LayerState_WindowInfo::_internal_focusable() const {
  return _impl_.focusable_;
}
inline bool LayerState_WindowInfo::focusable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.focusable)
  return _internal_focusable();
}
inline void LayerState_WindowInfo::_internal_set_focusable(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.focusable_ = value;
}
inline void LayerState_WindowInfo::set_focusable(bool value) {
  _internal_set_focusable(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.focusable)
}

// optional bool has_wallpaper = 6;
inline bool LayerState_WindowInfo::_internal_has_has_wallpaper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_has_wallpaper() const {
  return _internal_has_has_wallpaper();
}
inline void LayerState_WindowInfo::clear_has_wallpaper() {
  _impl_.has_wallpaper_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool LayerState_WindowInfo::_internal_has_wallpaper() const {
  return _impl_.has_wallpaper_;
}
inline bool LayerState_WindowInfo::has_wallpaper() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.has_wallpaper)
  return _internal_has_wallpaper();
}
inline void LayerState_WindowInfo::_internal_set_has_wallpaper(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.has_wallpaper_ = value;
}
inline void LayerState_WindowInfo::set_has_wallpaper(bool value) {
  _internal_set_has_wallpaper(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.has_wallpaper)
}

// optional float global_scale_factor = 7;
inline bool LayerState_WindowInfo::_internal_has_global_scale_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_global_scale_factor() const {
  return _internal_has_global_scale_factor();
}
inline void LayerState_WindowInfo::clear_global_scale_factor() {
  _impl_.global_scale_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float LayerState_WindowInfo::_internal_global_scale_factor() const {
  return _impl_.global_scale_factor_;
}
inline float LayerState_WindowInfo::global_scale_factor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.global_scale_factor)
  return _internal_global_scale_factor();
}
inline void LayerState_WindowInfo::_internal_set_global_scale_factor(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.global_scale_factor_ = value;
}
inline void LayerState_WindowInfo::set_global_scale_factor(float value) {
  _internal_set_global_scale_factor(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.global_scale_factor)
}

// optional uint32 crop_layer_id = 8;
inline bool LayerState_WindowInfo::_internal_has_crop_layer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_crop_layer_id() const {
  return _internal_has_crop_layer_id();
}
inline void LayerState_WindowInfo::clear_crop_layer_id() {
  _impl_.crop_layer_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t LayerState_WindowInfo::_internal_crop_layer_id() const {
  return _impl_.crop_layer_id_;
}
inline uint32_t LayerState_WindowInfo::crop_layer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.crop_layer_id)
  return _internal_crop_layer_id();
}
inline void LayerState_WindowInfo::_internal_set_crop_layer_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.crop_layer_id_ = value;
}
inline void LayerState_WindowInfo::set_crop_layer_id(uint32_t value) {
  _internal_set_crop_layer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.crop_layer_id)
}

// optional bool replace_touchable_region_with_crop = 9;
inline bool LayerState_WindowInfo::_internal_has_replace_touchable_region_with_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_replace_touchable_region_with_crop() const {
  return _internal_has_replace_touchable_region_with_crop();
}
inline void LayerState_WindowInfo::clear_replace_touchable_region_with_crop() {
  _impl_.replace_touchable_region_with_crop_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool LayerState_WindowInfo::_internal_replace_touchable_region_with_crop() const {
  return _impl_.replace_touchable_region_with_crop_;
}
inline bool LayerState_WindowInfo::replace_touchable_region_with_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.replace_touchable_region_with_crop)
  return _internal_replace_touchable_region_with_crop();
}
inline void LayerState_WindowInfo::_internal_set_replace_touchable_region_with_crop(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.replace_touchable_region_with_crop_ = value;
}
inline void LayerState_WindowInfo::set_replace_touchable_region_with_crop(bool value) {
  _internal_set_replace_touchable_region_with_crop(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.replace_touchable_region_with_crop)
}

// optional .perfetto.protos.RectProto touchable_region_crop = 10;
inline bool LayerState_WindowInfo::_internal_has_touchable_region_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.touchable_region_crop_ != nullptr);
  return value;
}
inline bool LayerState_WindowInfo::has_touchable_region_crop() const {
  return _internal_has_touchable_region_crop();
}
inline const ::perfetto::protos::RectProto& LayerState_WindowInfo::_internal_touchable_region_crop() const {
  const ::perfetto::protos::RectProto* p = _impl_.touchable_region_crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerState_WindowInfo::touchable_region_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.touchable_region_crop)
  return _internal_touchable_region_crop();
}
inline void LayerState_WindowInfo::unsafe_arena_set_allocated_touchable_region_crop(
    ::perfetto::protos::RectProto* touchable_region_crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touchable_region_crop_);
  }
  _impl_.touchable_region_crop_ = touchable_region_crop;
  if (touchable_region_crop) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.WindowInfo.touchable_region_crop)
}
inline ::perfetto::protos::RectProto* LayerState_WindowInfo::release_touchable_region_crop() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::RectProto* temp = _impl_.touchable_region_crop_;
  _impl_.touchable_region_crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState_WindowInfo::unsafe_arena_release_touchable_region_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.WindowInfo.touchable_region_crop)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::RectProto* temp = _impl_.touchable_region_crop_;
  _impl_.touchable_region_crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState_WindowInfo::_internal_mutable_touchable_region_crop() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.touchable_region_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.touchable_region_crop_ = p;
  }
  return _impl_.touchable_region_crop_;
}
inline ::perfetto::protos::RectProto* LayerState_WindowInfo::mutable_touchable_region_crop() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_touchable_region_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.WindowInfo.touchable_region_crop)
  return _msg;
}
inline void LayerState_WindowInfo::set_allocated_touchable_region_crop(::perfetto::protos::RectProto* touchable_region_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touchable_region_crop_);
  }
  if (touchable_region_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touchable_region_crop));
    if (message_arena != submessage_arena) {
      touchable_region_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchable_region_crop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.touchable_region_crop_ = touchable_region_crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.WindowInfo.touchable_region_crop)
}

// optional .perfetto.protos.Transform transform = 11;
inline bool LayerState_WindowInfo::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline bool LayerState_WindowInfo::has_transform() const {
  return _internal_has_transform();
}
inline void LayerState_WindowInfo::clear_transform() {
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::Transform& LayerState_WindowInfo::_internal_transform() const {
  const ::perfetto::protos::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::Transform&>(
      ::perfetto::protos::_Transform_default_instance_);
}
inline const ::perfetto::protos::Transform& LayerState_WindowInfo::transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.transform)
  return _internal_transform();
}
inline void LayerState_WindowInfo::unsafe_arena_set_allocated_transform(
    ::perfetto::protos::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.WindowInfo.transform)
}
inline ::perfetto::protos::Transform* LayerState_WindowInfo::release_transform() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::Transform* LayerState_WindowInfo::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.WindowInfo.transform)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::Transform* LayerState_WindowInfo::_internal_mutable_transform() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::Transform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::perfetto::protos::Transform* LayerState_WindowInfo::mutable_transform() {
  ::perfetto::protos::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.WindowInfo.transform)
  return _msg;
}
inline void LayerState_WindowInfo::set_allocated_transform(::perfetto::protos::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.WindowInfo.transform)
}

// optional uint32 input_config = 12;
inline bool LayerState_WindowInfo::_internal_has_input_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LayerState_WindowInfo::has_input_config() const {
  return _internal_has_input_config();
}
inline void LayerState_WindowInfo::clear_input_config() {
  _impl_.input_config_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t LayerState_WindowInfo::_internal_input_config() const {
  return _impl_.input_config_;
}
inline uint32_t LayerState_WindowInfo::input_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.WindowInfo.input_config)
  return _internal_input_config();
}
inline void LayerState_WindowInfo::_internal_set_input_config(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.input_config_ = value;
}
inline void LayerState_WindowInfo::set_input_config(uint32_t value) {
  _internal_set_input_config(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.WindowInfo.input_config)
}

// -------------------------------------------------------------------

// LayerState

// optional uint32 layer_id = 1;
inline bool LayerState::_internal_has_layer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LayerState::has_layer_id() const {
  return _internal_has_layer_id();
}
inline void LayerState::clear_layer_id() {
  _impl_.layer_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t LayerState::_internal_layer_id() const {
  return _impl_.layer_id_;
}
inline uint32_t LayerState::layer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.layer_id)
  return _internal_layer_id();
}
inline void LayerState::_internal_set_layer_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.layer_id_ = value;
}
inline void LayerState::set_layer_id(uint32_t value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.layer_id)
}

// optional uint64 what = 2;
inline bool LayerState::_internal_has_what() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LayerState::has_what() const {
  return _internal_has_what();
}
inline void LayerState::clear_what() {
  _impl_.what_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t LayerState::_internal_what() const {
  return _impl_.what_;
}
inline uint64_t LayerState::what() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.what)
  return _internal_what();
}
inline void LayerState::_internal_set_what(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.what_ = value;
}
inline void LayerState::set_what(uint64_t value) {
  _internal_set_what(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.what)
}

// optional float x = 3;
inline bool LayerState::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LayerState::has_x() const {
  return _internal_has_x();
}
inline void LayerState::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float LayerState::_internal_x() const {
  return _impl_.x_;
}
inline float LayerState::x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.x)
  return _internal_x();
}
inline void LayerState::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.x_ = value;
}
inline void LayerState::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.x)
}

// optional float y = 4;
inline bool LayerState::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LayerState::has_y() const {
  return _internal_has_y();
}
inline void LayerState::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float LayerState::_internal_y() const {
  return _impl_.y_;
}
inline float LayerState::y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.y)
  return _internal_y();
}
inline void LayerState::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.y_ = value;
}
inline void LayerState::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.y)
}

// optional int32 z = 5;
inline bool LayerState::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LayerState::has_z() const {
  return _internal_has_z();
}
inline void LayerState::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t LayerState::_internal_z() const {
  return _impl_.z_;
}
inline int32_t LayerState::z() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.z)
  return _internal_z();
}
inline void LayerState::_internal_set_z(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.z_ = value;
}
inline void LayerState::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.z)
}

// optional uint32 w = 6;
inline bool LayerState::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LayerState::has_w() const {
  return _internal_has_w();
}
inline void LayerState::clear_w() {
  _impl_.w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t LayerState::_internal_w() const {
  return _impl_.w_;
}
inline uint32_t LayerState::w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.w)
  return _internal_w();
}
inline void LayerState::_internal_set_w(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.w_ = value;
}
inline void LayerState::set_w(uint32_t value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.w)
}

// optional uint32 h = 7;
inline bool LayerState::_internal_has_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LayerState::has_h() const {
  return _internal_has_h();
}
inline void LayerState::clear_h() {
  _impl_.h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t LayerState::_internal_h() const {
  return _impl_.h_;
}
inline uint32_t LayerState::h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.h)
  return _internal_h();
}
inline void LayerState::_internal_set_h(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.h_ = value;
}
inline void LayerState::set_h(uint32_t value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.h)
}

// optional uint32 layer_stack = 8;
inline bool LayerState::_internal_has_layer_stack() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LayerState::has_layer_stack() const {
  return _internal_has_layer_stack();
}
inline void LayerState::clear_layer_stack() {
  _impl_.layer_stack_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t LayerState::_internal_layer_stack() const {
  return _impl_.layer_stack_;
}
inline uint32_t LayerState::layer_stack() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.layer_stack)
  return _internal_layer_stack();
}
inline void LayerState::_internal_set_layer_stack(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.layer_stack_ = value;
}
inline void LayerState::set_layer_stack(uint32_t value) {
  _internal_set_layer_stack(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.layer_stack)
}

// optional uint32 flags = 9;
inline bool LayerState::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LayerState::has_flags() const {
  return _internal_has_flags();
}
inline void LayerState::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t LayerState::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t LayerState::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.flags)
  return _internal_flags();
}
inline void LayerState::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.flags_ = value;
}
inline void LayerState::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.flags)
}

// optional uint32 mask = 10;
inline bool LayerState::_internal_has_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LayerState::has_mask() const {
  return _internal_has_mask();
}
inline void LayerState::clear_mask() {
  _impl_.mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t LayerState::_internal_mask() const {
  return _impl_.mask_;
}
inline uint32_t LayerState::mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.mask)
  return _internal_mask();
}
inline void LayerState::_internal_set_mask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.mask_ = value;
}
inline void LayerState::set_mask(uint32_t value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.mask)
}

// optional .perfetto.protos.LayerState.Matrix22 matrix = 11;
inline bool LayerState::_internal_has_matrix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.matrix_ != nullptr);
  return value;
}
inline bool LayerState::has_matrix() const {
  return _internal_has_matrix();
}
inline void LayerState::clear_matrix() {
  if (_impl_.matrix_ != nullptr) _impl_.matrix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::LayerState_Matrix22& LayerState::_internal_matrix() const {
  const ::perfetto::protos::LayerState_Matrix22* p = _impl_.matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::LayerState_Matrix22&>(
      ::perfetto::protos::_LayerState_Matrix22_default_instance_);
}
inline const ::perfetto::protos::LayerState_Matrix22& LayerState::matrix() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.matrix)
  return _internal_matrix();
}
inline void LayerState::unsafe_arena_set_allocated_matrix(
    ::perfetto::protos::LayerState_Matrix22* matrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrix_);
  }
  _impl_.matrix_ = matrix;
  if (matrix) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.matrix)
}
inline ::perfetto::protos::LayerState_Matrix22* LayerState::release_matrix() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::LayerState_Matrix22* temp = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::LayerState_Matrix22* LayerState::unsafe_arena_release_matrix() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.matrix)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::LayerState_Matrix22* temp = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
  return temp;
}
inline ::perfetto::protos::LayerState_Matrix22* LayerState::_internal_mutable_matrix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::LayerState_Matrix22>(GetArenaForAllocation());
    _impl_.matrix_ = p;
  }
  return _impl_.matrix_;
}
inline ::perfetto::protos::LayerState_Matrix22* LayerState::mutable_matrix() {
  ::perfetto::protos::LayerState_Matrix22* _msg = _internal_mutable_matrix();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.matrix)
  return _msg;
}
inline void LayerState::set_allocated_matrix(::perfetto::protos::LayerState_Matrix22* matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.matrix_;
  }
  if (matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(matrix);
    if (message_arena != submessage_arena) {
      matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrix, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.matrix_ = matrix;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.matrix)
}

// optional float corner_radius = 12;
inline bool LayerState::_internal_has_corner_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LayerState::has_corner_radius() const {
  return _internal_has_corner_radius();
}
inline void LayerState::clear_corner_radius() {
  _impl_.corner_radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float LayerState::_internal_corner_radius() const {
  return _impl_.corner_radius_;
}
inline float LayerState::corner_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.corner_radius)
  return _internal_corner_radius();
}
inline void LayerState::_internal_set_corner_radius(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.corner_radius_ = value;
}
inline void LayerState::set_corner_radius(float value) {
  _internal_set_corner_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.corner_radius)
}

// optional uint32 background_blur_radius = 13;
inline bool LayerState::_internal_has_background_blur_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool LayerState::has_background_blur_radius() const {
  return _internal_has_background_blur_radius();
}
inline void LayerState::clear_background_blur_radius() {
  _impl_.background_blur_radius_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t LayerState::_internal_background_blur_radius() const {
  return _impl_.background_blur_radius_;
}
inline uint32_t LayerState::background_blur_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.background_blur_radius)
  return _internal_background_blur_radius();
}
inline void LayerState::_internal_set_background_blur_radius(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.background_blur_radius_ = value;
}
inline void LayerState::set_background_blur_radius(uint32_t value) {
  _internal_set_background_blur_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.background_blur_radius)
}

// optional uint32 parent_id = 14;
inline bool LayerState::_internal_has_parent_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool LayerState::has_parent_id() const {
  return _internal_has_parent_id();
}
inline void LayerState::clear_parent_id() {
  _impl_.parent_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t LayerState::_internal_parent_id() const {
  return _impl_.parent_id_;
}
inline uint32_t LayerState::parent_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.parent_id)
  return _internal_parent_id();
}
inline void LayerState::_internal_set_parent_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.parent_id_ = value;
}
inline void LayerState::set_parent_id(uint32_t value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.parent_id)
}

// optional uint32 relative_parent_id = 15;
inline bool LayerState::_internal_has_relative_parent_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool LayerState::has_relative_parent_id() const {
  return _internal_has_relative_parent_id();
}
inline void LayerState::clear_relative_parent_id() {
  _impl_.relative_parent_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t LayerState::_internal_relative_parent_id() const {
  return _impl_.relative_parent_id_;
}
inline uint32_t LayerState::relative_parent_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.relative_parent_id)
  return _internal_relative_parent_id();
}
inline void LayerState::_internal_set_relative_parent_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.relative_parent_id_ = value;
}
inline void LayerState::set_relative_parent_id(uint32_t value) {
  _internal_set_relative_parent_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.relative_parent_id)
}

// optional float alpha = 16;
inline bool LayerState::_internal_has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool LayerState::has_alpha() const {
  return _internal_has_alpha();
}
inline void LayerState::clear_alpha() {
  _impl_.alpha_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float LayerState::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float LayerState::alpha() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.alpha)
  return _internal_alpha();
}
inline void LayerState::_internal_set_alpha(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.alpha_ = value;
}
inline void LayerState::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.alpha)
}

// optional .perfetto.protos.LayerState.Color3 color = 17;
inline bool LayerState::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_ != nullptr);
  return value;
}
inline bool LayerState::has_color() const {
  return _internal_has_color();
}
inline void LayerState::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::LayerState_Color3& LayerState::_internal_color() const {
  const ::perfetto::protos::LayerState_Color3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::LayerState_Color3&>(
      ::perfetto::protos::_LayerState_Color3_default_instance_);
}
inline const ::perfetto::protos::LayerState_Color3& LayerState::color() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.color)
  return _internal_color();
}
inline void LayerState::unsafe_arena_set_allocated_color(
    ::perfetto::protos::LayerState_Color3* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = color;
  if (color) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.color)
}
inline ::perfetto::protos::LayerState_Color3* LayerState::release_color() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::LayerState_Color3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::LayerState_Color3* LayerState::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.color)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::LayerState_Color3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::perfetto::protos::LayerState_Color3* LayerState::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::LayerState_Color3>(GetArenaForAllocation());
    _impl_.color_ = p;
  }
  return _impl_.color_;
}
inline ::perfetto::protos::LayerState_Color3* LayerState::mutable_color() {
  ::perfetto::protos::LayerState_Color3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.color)
  return _msg;
}
inline void LayerState::set_allocated_color(::perfetto::protos::LayerState_Color3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.color_ = color;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.color)
}

// optional .perfetto.protos.RegionProto transparent_region = 18;
inline bool LayerState::_internal_has_transparent_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transparent_region_ != nullptr);
  return value;
}
inline bool LayerState::has_transparent_region() const {
  return _internal_has_transparent_region();
}
inline const ::perfetto::protos::RegionProto& LayerState::_internal_transparent_region() const {
  const ::perfetto::protos::RegionProto* p = _impl_.transparent_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RegionProto&>(
      ::perfetto::protos::_RegionProto_default_instance_);
}
inline const ::perfetto::protos::RegionProto& LayerState::transparent_region() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.transparent_region)
  return _internal_transparent_region();
}
inline void LayerState::unsafe_arena_set_allocated_transparent_region(
    ::perfetto::protos::RegionProto* transparent_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transparent_region_);
  }
  _impl_.transparent_region_ = transparent_region;
  if (transparent_region) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.transparent_region)
}
inline ::perfetto::protos::RegionProto* LayerState::release_transparent_region() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::RegionProto* temp = _impl_.transparent_region_;
  _impl_.transparent_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerState::unsafe_arena_release_transparent_region() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.transparent_region)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::RegionProto* temp = _impl_.transparent_region_;
  _impl_.transparent_region_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RegionProto* LayerState::_internal_mutable_transparent_region() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.transparent_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RegionProto>(GetArenaForAllocation());
    _impl_.transparent_region_ = p;
  }
  return _impl_.transparent_region_;
}
inline ::perfetto::protos::RegionProto* LayerState::mutable_transparent_region() {
  ::perfetto::protos::RegionProto* _msg = _internal_mutable_transparent_region();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.transparent_region)
  return _msg;
}
inline void LayerState::set_allocated_transparent_region(::perfetto::protos::RegionProto* transparent_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transparent_region_);
  }
  if (transparent_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transparent_region));
    if (message_arena != submessage_arena) {
      transparent_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transparent_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.transparent_region_ = transparent_region;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.transparent_region)
}

// optional uint32 transform = 19;
inline bool LayerState::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool LayerState::has_transform() const {
  return _internal_has_transform();
}
inline void LayerState::clear_transform() {
  _impl_.transform_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t LayerState::_internal_transform() const {
  return _impl_.transform_;
}
inline uint32_t LayerState::transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.transform)
  return _internal_transform();
}
inline void LayerState::_internal_set_transform(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.transform_ = value;
}
inline void LayerState::set_transform(uint32_t value) {
  _internal_set_transform(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.transform)
}

// optional bool transform_to_display_inverse = 20;
inline bool LayerState::_internal_has_transform_to_display_inverse() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool LayerState::has_transform_to_display_inverse() const {
  return _internal_has_transform_to_display_inverse();
}
inline void LayerState::clear_transform_to_display_inverse() {
  _impl_.transform_to_display_inverse_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool LayerState::_internal_transform_to_display_inverse() const {
  return _impl_.transform_to_display_inverse_;
}
inline bool LayerState::transform_to_display_inverse() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.transform_to_display_inverse)
  return _internal_transform_to_display_inverse();
}
inline void LayerState::_internal_set_transform_to_display_inverse(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.transform_to_display_inverse_ = value;
}
inline void LayerState::set_transform_to_display_inverse(bool value) {
  _internal_set_transform_to_display_inverse(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.transform_to_display_inverse)
}

// optional .perfetto.protos.RectProto crop = 21;
inline bool LayerState::_internal_has_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crop_ != nullptr);
  return value;
}
inline bool LayerState::has_crop() const {
  return _internal_has_crop();
}
inline const ::perfetto::protos::RectProto& LayerState::_internal_crop() const {
  const ::perfetto::protos::RectProto* p = _impl_.crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerState::crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.crop)
  return _internal_crop();
}
inline void LayerState::unsafe_arena_set_allocated_crop(
    ::perfetto::protos::RectProto* crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crop_);
  }
  _impl_.crop_ = crop;
  if (crop) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.crop)
}
inline ::perfetto::protos::RectProto* LayerState::release_crop() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::RectProto* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState::unsafe_arena_release_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.crop)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::RectProto* temp = _impl_.crop_;
  _impl_.crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState::_internal_mutable_crop() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.crop_ = p;
  }
  return _impl_.crop_;
}
inline ::perfetto::protos::RectProto* LayerState::mutable_crop() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.crop)
  return _msg;
}
inline void LayerState::set_allocated_crop(::perfetto::protos::RectProto* crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crop_);
  }
  if (crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crop));
    if (message_arena != submessage_arena) {
      crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.crop_ = crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.crop)
}

// optional .perfetto.protos.LayerState.BufferData buffer_data = 22;
inline bool LayerState::_internal_has_buffer_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_data_ != nullptr);
  return value;
}
inline bool LayerState::has_buffer_data() const {
  return _internal_has_buffer_data();
}
inline void LayerState::clear_buffer_data() {
  if (_impl_.buffer_data_ != nullptr) _impl_.buffer_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::perfetto::protos::LayerState_BufferData& LayerState::_internal_buffer_data() const {
  const ::perfetto::protos::LayerState_BufferData* p = _impl_.buffer_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::LayerState_BufferData&>(
      ::perfetto::protos::_LayerState_BufferData_default_instance_);
}
inline const ::perfetto::protos::LayerState_BufferData& LayerState::buffer_data() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.buffer_data)
  return _internal_buffer_data();
}
inline void LayerState::unsafe_arena_set_allocated_buffer_data(
    ::perfetto::protos::LayerState_BufferData* buffer_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_data_);
  }
  _impl_.buffer_data_ = buffer_data;
  if (buffer_data) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.buffer_data)
}
inline ::perfetto::protos::LayerState_BufferData* LayerState::release_buffer_data() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::LayerState_BufferData* temp = _impl_.buffer_data_;
  _impl_.buffer_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::LayerState_BufferData* LayerState::unsafe_arena_release_buffer_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.buffer_data)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::LayerState_BufferData* temp = _impl_.buffer_data_;
  _impl_.buffer_data_ = nullptr;
  return temp;
}
inline ::perfetto::protos::LayerState_BufferData* LayerState::_internal_mutable_buffer_data() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.buffer_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::LayerState_BufferData>(GetArenaForAllocation());
    _impl_.buffer_data_ = p;
  }
  return _impl_.buffer_data_;
}
inline ::perfetto::protos::LayerState_BufferData* LayerState::mutable_buffer_data() {
  ::perfetto::protos::LayerState_BufferData* _msg = _internal_mutable_buffer_data();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.buffer_data)
  return _msg;
}
inline void LayerState::set_allocated_buffer_data(::perfetto::protos::LayerState_BufferData* buffer_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buffer_data_;
  }
  if (buffer_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buffer_data);
    if (message_arena != submessage_arena) {
      buffer_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.buffer_data_ = buffer_data;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.buffer_data)
}

// optional int32 api = 23;
inline bool LayerState::_internal_has_api() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool LayerState::has_api() const {
  return _internal_has_api();
}
inline void LayerState::clear_api() {
  _impl_.api_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline int32_t LayerState::_internal_api() const {
  return _impl_.api_;
}
inline int32_t LayerState::api() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.api)
  return _internal_api();
}
inline void LayerState::_internal_set_api(int32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.api_ = value;
}
inline void LayerState::set_api(int32_t value) {
  _internal_set_api(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.api)
}

// optional bool has_sideband_stream = 24;
inline bool LayerState::_internal_has_has_sideband_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool LayerState::has_has_sideband_stream() const {
  return _internal_has_has_sideband_stream();
}
inline void LayerState::clear_has_sideband_stream() {
  _impl_.has_sideband_stream_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool LayerState::_internal_has_sideband_stream() const {
  return _impl_.has_sideband_stream_;
}
inline bool LayerState::has_sideband_stream() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.has_sideband_stream)
  return _internal_has_sideband_stream();
}
inline void LayerState::_internal_set_has_sideband_stream(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.has_sideband_stream_ = value;
}
inline void LayerState::set_has_sideband_stream(bool value) {
  _internal_set_has_sideband_stream(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.has_sideband_stream)
}

// optional .perfetto.protos.ColorTransformProto color_transform = 25;
inline bool LayerState::_internal_has_color_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_transform_ != nullptr);
  return value;
}
inline bool LayerState::has_color_transform() const {
  return _internal_has_color_transform();
}
inline const ::perfetto::protos::ColorTransformProto& LayerState::_internal_color_transform() const {
  const ::perfetto::protos::ColorTransformProto* p = _impl_.color_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ColorTransformProto&>(
      ::perfetto::protos::_ColorTransformProto_default_instance_);
}
inline const ::perfetto::protos::ColorTransformProto& LayerState::color_transform() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.color_transform)
  return _internal_color_transform();
}
inline void LayerState::unsafe_arena_set_allocated_color_transform(
    ::perfetto::protos::ColorTransformProto* color_transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_transform_);
  }
  _impl_.color_transform_ = color_transform;
  if (color_transform) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.color_transform)
}
inline ::perfetto::protos::ColorTransformProto* LayerState::release_color_transform() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ColorTransformProto* temp = _impl_.color_transform_;
  _impl_.color_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ColorTransformProto* LayerState::unsafe_arena_release_color_transform() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.color_transform)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ColorTransformProto* temp = _impl_.color_transform_;
  _impl_.color_transform_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ColorTransformProto* LayerState::_internal_mutable_color_transform() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.color_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ColorTransformProto>(GetArenaForAllocation());
    _impl_.color_transform_ = p;
  }
  return _impl_.color_transform_;
}
inline ::perfetto::protos::ColorTransformProto* LayerState::mutable_color_transform() {
  ::perfetto::protos::ColorTransformProto* _msg = _internal_mutable_color_transform();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.color_transform)
  return _msg;
}
inline void LayerState::set_allocated_color_transform(::perfetto::protos::ColorTransformProto* color_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_transform_);
  }
  if (color_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_transform));
    if (message_arena != submessage_arena) {
      color_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.color_transform_ = color_transform;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.color_transform)
}

// repeated .perfetto.protos.BlurRegion blur_regions = 26;
inline int LayerState::_internal_blur_regions_size() const {
  return _impl_.blur_regions_.size();
}
inline int LayerState::blur_regions_size() const {
  return _internal_blur_regions_size();
}
inline ::perfetto::protos::BlurRegion* LayerState::mutable_blur_regions(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.blur_regions)
  return _impl_.blur_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >*
LayerState::mutable_blur_regions() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.LayerState.blur_regions)
  return &_impl_.blur_regions_;
}
inline const ::perfetto::protos::BlurRegion& LayerState::_internal_blur_regions(int index) const {
  return _impl_.blur_regions_.Get(index);
}
inline const ::perfetto::protos::BlurRegion& LayerState::blur_regions(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.blur_regions)
  return _internal_blur_regions(index);
}
inline ::perfetto::protos::BlurRegion* LayerState::_internal_add_blur_regions() {
  return _impl_.blur_regions_.Add();
}
inline ::perfetto::protos::BlurRegion* LayerState::add_blur_regions() {
  ::perfetto::protos::BlurRegion* _add = _internal_add_blur_regions();
  // @@protoc_insertion_point(field_add:perfetto.protos.LayerState.blur_regions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::BlurRegion >&
LayerState::blur_regions() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.LayerState.blur_regions)
  return _impl_.blur_regions_;
}

// optional .perfetto.protos.LayerState.WindowInfo window_info_handle = 27;
inline bool LayerState::_internal_has_window_info_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_info_handle_ != nullptr);
  return value;
}
inline bool LayerState::has_window_info_handle() const {
  return _internal_has_window_info_handle();
}
inline void LayerState::clear_window_info_handle() {
  if (_impl_.window_info_handle_ != nullptr) _impl_.window_info_handle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::perfetto::protos::LayerState_WindowInfo& LayerState::_internal_window_info_handle() const {
  const ::perfetto::protos::LayerState_WindowInfo* p = _impl_.window_info_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::LayerState_WindowInfo&>(
      ::perfetto::protos::_LayerState_WindowInfo_default_instance_);
}
inline const ::perfetto::protos::LayerState_WindowInfo& LayerState::window_info_handle() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.window_info_handle)
  return _internal_window_info_handle();
}
inline void LayerState::unsafe_arena_set_allocated_window_info_handle(
    ::perfetto::protos::LayerState_WindowInfo* window_info_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_info_handle_);
  }
  _impl_.window_info_handle_ = window_info_handle;
  if (window_info_handle) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.window_info_handle)
}
inline ::perfetto::protos::LayerState_WindowInfo* LayerState::release_window_info_handle() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::LayerState_WindowInfo* temp = _impl_.window_info_handle_;
  _impl_.window_info_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::LayerState_WindowInfo* LayerState::unsafe_arena_release_window_info_handle() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.window_info_handle)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::LayerState_WindowInfo* temp = _impl_.window_info_handle_;
  _impl_.window_info_handle_ = nullptr;
  return temp;
}
inline ::perfetto::protos::LayerState_WindowInfo* LayerState::_internal_mutable_window_info_handle() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.window_info_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::LayerState_WindowInfo>(GetArenaForAllocation());
    _impl_.window_info_handle_ = p;
  }
  return _impl_.window_info_handle_;
}
inline ::perfetto::protos::LayerState_WindowInfo* LayerState::mutable_window_info_handle() {
  ::perfetto::protos::LayerState_WindowInfo* _msg = _internal_mutable_window_info_handle();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.window_info_handle)
  return _msg;
}
inline void LayerState::set_allocated_window_info_handle(::perfetto::protos::LayerState_WindowInfo* window_info_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_info_handle_;
  }
  if (window_info_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window_info_handle);
    if (message_arena != submessage_arena) {
      window_info_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_info_handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.window_info_handle_ = window_info_handle;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.window_info_handle)
}

// optional float bg_color_alpha = 28;
inline bool LayerState::_internal_has_bg_color_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool LayerState::has_bg_color_alpha() const {
  return _internal_has_bg_color_alpha();
}
inline void LayerState::clear_bg_color_alpha() {
  _impl_.bg_color_alpha_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float LayerState::_internal_bg_color_alpha() const {
  return _impl_.bg_color_alpha_;
}
inline float LayerState::bg_color_alpha() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.bg_color_alpha)
  return _internal_bg_color_alpha();
}
inline void LayerState::_internal_set_bg_color_alpha(float value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.bg_color_alpha_ = value;
}
inline void LayerState::set_bg_color_alpha(float value) {
  _internal_set_bg_color_alpha(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.bg_color_alpha)
}

// optional int32 bg_color_dataspace = 29;
inline bool LayerState::_internal_has_bg_color_dataspace() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool LayerState::has_bg_color_dataspace() const {
  return _internal_has_bg_color_dataspace();
}
inline void LayerState::clear_bg_color_dataspace() {
  _impl_.bg_color_dataspace_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline int32_t LayerState::_internal_bg_color_dataspace() const {
  return _impl_.bg_color_dataspace_;
}
inline int32_t LayerState::bg_color_dataspace() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.bg_color_dataspace)
  return _internal_bg_color_dataspace();
}
inline void LayerState::_internal_set_bg_color_dataspace(int32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.bg_color_dataspace_ = value;
}
inline void LayerState::set_bg_color_dataspace(int32_t value) {
  _internal_set_bg_color_dataspace(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.bg_color_dataspace)
}

// optional bool color_space_agnostic = 30;
inline bool LayerState::_internal_has_color_space_agnostic() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool LayerState::has_color_space_agnostic() const {
  return _internal_has_color_space_agnostic();
}
inline void LayerState::clear_color_space_agnostic() {
  _impl_.color_space_agnostic_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool LayerState::_internal_color_space_agnostic() const {
  return _impl_.color_space_agnostic_;
}
inline bool LayerState::color_space_agnostic() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.color_space_agnostic)
  return _internal_color_space_agnostic();
}
inline void LayerState::_internal_set_color_space_agnostic(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.color_space_agnostic_ = value;
}
inline void LayerState::set_color_space_agnostic(bool value) {
  _internal_set_color_space_agnostic(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.color_space_agnostic)
}

// optional float shadow_radius = 31;
inline bool LayerState::_internal_has_shadow_radius() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool LayerState::has_shadow_radius() const {
  return _internal_has_shadow_radius();
}
inline void LayerState::clear_shadow_radius() {
  _impl_.shadow_radius_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float LayerState::_internal_shadow_radius() const {
  return _impl_.shadow_radius_;
}
inline float LayerState::shadow_radius() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.shadow_radius)
  return _internal_shadow_radius();
}
inline void LayerState::_internal_set_shadow_radius(float value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.shadow_radius_ = value;
}
inline void LayerState::set_shadow_radius(float value) {
  _internal_set_shadow_radius(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.shadow_radius)
}

// optional int32 frame_rate_selection_priority = 32;
inline bool LayerState::_internal_has_frame_rate_selection_priority() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool LayerState::has_frame_rate_selection_priority() const {
  return _internal_has_frame_rate_selection_priority();
}
inline void LayerState::clear_frame_rate_selection_priority() {
  _impl_.frame_rate_selection_priority_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline int32_t LayerState::_internal_frame_rate_selection_priority() const {
  return _impl_.frame_rate_selection_priority_;
}
inline int32_t LayerState::frame_rate_selection_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.frame_rate_selection_priority)
  return _internal_frame_rate_selection_priority();
}
inline void LayerState::_internal_set_frame_rate_selection_priority(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.frame_rate_selection_priority_ = value;
}
inline void LayerState::set_frame_rate_selection_priority(int32_t value) {
  _internal_set_frame_rate_selection_priority(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.frame_rate_selection_priority)
}

// optional float frame_rate = 33;
inline bool LayerState::_internal_has_frame_rate() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool LayerState::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void LayerState::clear_frame_rate() {
  _impl_.frame_rate_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline float LayerState::_internal_frame_rate() const {
  return _impl_.frame_rate_;
}
inline float LayerState::frame_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.frame_rate)
  return _internal_frame_rate();
}
inline void LayerState::_internal_set_frame_rate(float value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.frame_rate_ = value;
}
inline void LayerState::set_frame_rate(float value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.frame_rate)
}

// optional int32 frame_rate_compatibility = 34;
inline bool LayerState::_internal_has_frame_rate_compatibility() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool LayerState::has_frame_rate_compatibility() const {
  return _internal_has_frame_rate_compatibility();
}
inline void LayerState::clear_frame_rate_compatibility() {
  _impl_.frame_rate_compatibility_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline int32_t LayerState::_internal_frame_rate_compatibility() const {
  return _impl_.frame_rate_compatibility_;
}
inline int32_t LayerState::frame_rate_compatibility() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.frame_rate_compatibility)
  return _internal_frame_rate_compatibility();
}
inline void LayerState::_internal_set_frame_rate_compatibility(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.frame_rate_compatibility_ = value;
}
inline void LayerState::set_frame_rate_compatibility(int32_t value) {
  _internal_set_frame_rate_compatibility(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.frame_rate_compatibility)
}

// optional int32 change_frame_rate_strategy = 35;
inline bool LayerState::_internal_has_change_frame_rate_strategy() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool LayerState::has_change_frame_rate_strategy() const {
  return _internal_has_change_frame_rate_strategy();
}
inline void LayerState::clear_change_frame_rate_strategy() {
  _impl_.change_frame_rate_strategy_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline int32_t LayerState::_internal_change_frame_rate_strategy() const {
  return _impl_.change_frame_rate_strategy_;
}
inline int32_t LayerState::change_frame_rate_strategy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.change_frame_rate_strategy)
  return _internal_change_frame_rate_strategy();
}
inline void LayerState::_internal_set_change_frame_rate_strategy(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.change_frame_rate_strategy_ = value;
}
inline void LayerState::set_change_frame_rate_strategy(int32_t value) {
  _internal_set_change_frame_rate_strategy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.change_frame_rate_strategy)
}

// optional uint32 fixed_transform_hint = 36;
inline bool LayerState::_internal_has_fixed_transform_hint() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool LayerState::has_fixed_transform_hint() const {
  return _internal_has_fixed_transform_hint();
}
inline void LayerState::clear_fixed_transform_hint() {
  _impl_.fixed_transform_hint_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t LayerState::_internal_fixed_transform_hint() const {
  return _impl_.fixed_transform_hint_;
}
inline uint32_t LayerState::fixed_transform_hint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.fixed_transform_hint)
  return _internal_fixed_transform_hint();
}
inline void LayerState::_internal_set_fixed_transform_hint(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.fixed_transform_hint_ = value;
}
inline void LayerState::set_fixed_transform_hint(uint32_t value) {
  _internal_set_fixed_transform_hint(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.fixed_transform_hint)
}

// optional uint64 frame_number = 37;
inline bool LayerState::_internal_has_frame_number() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool LayerState::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void LayerState::clear_frame_number() {
  _impl_.frame_number_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint64_t LayerState::_internal_frame_number() const {
  return _impl_.frame_number_;
}
inline uint64_t LayerState::frame_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.frame_number)
  return _internal_frame_number();
}
inline void LayerState::_internal_set_frame_number(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.frame_number_ = value;
}
inline void LayerState::set_frame_number(uint64_t value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.frame_number)
}

// optional bool auto_refresh = 38;
inline bool LayerState::_internal_has_auto_refresh() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool LayerState::has_auto_refresh() const {
  return _internal_has_auto_refresh();
}
inline void LayerState::clear_auto_refresh() {
  _impl_.auto_refresh_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool LayerState::_internal_auto_refresh() const {
  return _impl_.auto_refresh_;
}
inline bool LayerState::auto_refresh() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.auto_refresh)
  return _internal_auto_refresh();
}
inline void LayerState::_internal_set_auto_refresh(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.auto_refresh_ = value;
}
inline void LayerState::set_auto_refresh(bool value) {
  _internal_set_auto_refresh(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.auto_refresh)
}

// optional bool is_trusted_overlay = 39;
inline bool LayerState::_internal_has_is_trusted_overlay() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool LayerState::has_is_trusted_overlay() const {
  return _internal_has_is_trusted_overlay();
}
inline void LayerState::clear_is_trusted_overlay() {
  _impl_.is_trusted_overlay_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool LayerState::_internal_is_trusted_overlay() const {
  return _impl_.is_trusted_overlay_;
}
inline bool LayerState::is_trusted_overlay() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.is_trusted_overlay)
  return _internal_is_trusted_overlay();
}
inline void LayerState::_internal_set_is_trusted_overlay(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.is_trusted_overlay_ = value;
}
inline void LayerState::set_is_trusted_overlay(bool value) {
  _internal_set_is_trusted_overlay(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.is_trusted_overlay)
}

// optional .perfetto.protos.RectProto buffer_crop = 40;
inline bool LayerState::_internal_has_buffer_crop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_crop_ != nullptr);
  return value;
}
inline bool LayerState::has_buffer_crop() const {
  return _internal_has_buffer_crop();
}
inline const ::perfetto::protos::RectProto& LayerState::_internal_buffer_crop() const {
  const ::perfetto::protos::RectProto* p = _impl_.buffer_crop_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerState::buffer_crop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.buffer_crop)
  return _internal_buffer_crop();
}
inline void LayerState::unsafe_arena_set_allocated_buffer_crop(
    ::perfetto::protos::RectProto* buffer_crop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_crop_);
  }
  _impl_.buffer_crop_ = buffer_crop;
  if (buffer_crop) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.buffer_crop)
}
inline ::perfetto::protos::RectProto* LayerState::release_buffer_crop() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::RectProto* temp = _impl_.buffer_crop_;
  _impl_.buffer_crop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState::unsafe_arena_release_buffer_crop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.buffer_crop)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::RectProto* temp = _impl_.buffer_crop_;
  _impl_.buffer_crop_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState::_internal_mutable_buffer_crop() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.buffer_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.buffer_crop_ = p;
  }
  return _impl_.buffer_crop_;
}
inline ::perfetto::protos::RectProto* LayerState::mutable_buffer_crop() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_buffer_crop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.buffer_crop)
  return _msg;
}
inline void LayerState::set_allocated_buffer_crop(::perfetto::protos::RectProto* buffer_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_crop_);
  }
  if (buffer_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffer_crop));
    if (message_arena != submessage_arena) {
      buffer_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_crop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.buffer_crop_ = buffer_crop;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.buffer_crop)
}

// optional .perfetto.protos.RectProto destination_frame = 41;
inline bool LayerState::_internal_has_destination_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destination_frame_ != nullptr);
  return value;
}
inline bool LayerState::has_destination_frame() const {
  return _internal_has_destination_frame();
}
inline const ::perfetto::protos::RectProto& LayerState::_internal_destination_frame() const {
  const ::perfetto::protos::RectProto* p = _impl_.destination_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& LayerState::destination_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.destination_frame)
  return _internal_destination_frame();
}
inline void LayerState::unsafe_arena_set_allocated_destination_frame(
    ::perfetto::protos::RectProto* destination_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_frame_);
  }
  _impl_.destination_frame_ = destination_frame;
  if (destination_frame) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.LayerState.destination_frame)
}
inline ::perfetto::protos::RectProto* LayerState::release_destination_frame() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::RectProto* temp = _impl_.destination_frame_;
  _impl_.destination_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState::unsafe_arena_release_destination_frame() {
  // @@protoc_insertion_point(field_release:perfetto.protos.LayerState.destination_frame)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::RectProto* temp = _impl_.destination_frame_;
  _impl_.destination_frame_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* LayerState::_internal_mutable_destination_frame() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.destination_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.destination_frame_ = p;
  }
  return _impl_.destination_frame_;
}
inline ::perfetto::protos::RectProto* LayerState::mutable_destination_frame() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_destination_frame();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.LayerState.destination_frame)
  return _msg;
}
inline void LayerState::set_allocated_destination_frame(::perfetto::protos::RectProto* destination_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_frame_);
  }
  if (destination_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_frame));
    if (message_arena != submessage_arena) {
      destination_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.destination_frame_ = destination_frame;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.LayerState.destination_frame)
}

// optional .perfetto.protos.LayerState.DropInputMode drop_input_mode = 42;
inline bool LayerState::_internal_has_drop_input_mode() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool LayerState::has_drop_input_mode() const {
  return _internal_has_drop_input_mode();
}
inline void LayerState::clear_drop_input_mode() {
  _impl_.drop_input_mode_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::perfetto::protos::LayerState_DropInputMode LayerState::_internal_drop_input_mode() const {
  return static_cast< ::perfetto::protos::LayerState_DropInputMode >(_impl_.drop_input_mode_);
}
inline ::perfetto::protos::LayerState_DropInputMode LayerState::drop_input_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.drop_input_mode)
  return _internal_drop_input_mode();
}
inline void LayerState::_internal_set_drop_input_mode(::perfetto::protos::LayerState_DropInputMode value) {
  assert(::perfetto::protos::LayerState_DropInputMode_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.drop_input_mode_ = value;
}
inline void LayerState::set_drop_input_mode(::perfetto::protos::LayerState_DropInputMode value) {
  _internal_set_drop_input_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.drop_input_mode)
}

// optional .perfetto.protos.TrustedOverlay trusted_overlay = 43;
inline bool LayerState::_internal_has_trusted_overlay() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool LayerState::has_trusted_overlay() const {
  return _internal_has_trusted_overlay();
}
inline void LayerState::clear_trusted_overlay() {
  _impl_.trusted_overlay_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::perfetto::protos::TrustedOverlay LayerState::_internal_trusted_overlay() const {
  return static_cast< ::perfetto::protos::TrustedOverlay >(_impl_.trusted_overlay_);
}
inline ::perfetto::protos::TrustedOverlay LayerState::trusted_overlay() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.LayerState.trusted_overlay)
  return _internal_trusted_overlay();
}
inline void LayerState::_internal_set_trusted_overlay(::perfetto::protos::TrustedOverlay value) {
  assert(::perfetto::protos::TrustedOverlay_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.trusted_overlay_ = value;
}
inline void LayerState::set_trusted_overlay(::perfetto::protos::TrustedOverlay value) {
  _internal_set_trusted_overlay(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.LayerState.trusted_overlay)
}

// -------------------------------------------------------------------

// DisplayState

// optional int32 id = 1;
inline bool DisplayState::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DisplayState::has_id() const {
  return _internal_has_id();
}
inline void DisplayState::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DisplayState::_internal_id() const {
  return _impl_.id_;
}
inline int32_t DisplayState::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.id)
  return _internal_id();
}
inline void DisplayState::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void DisplayState::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayState.id)
}

// optional uint32 what = 2;
inline bool DisplayState::_internal_has_what() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DisplayState::has_what() const {
  return _internal_has_what();
}
inline void DisplayState::clear_what() {
  _impl_.what_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t DisplayState::_internal_what() const {
  return _impl_.what_;
}
inline uint32_t DisplayState::what() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.what)
  return _internal_what();
}
inline void DisplayState::_internal_set_what(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.what_ = value;
}
inline void DisplayState::set_what(uint32_t value) {
  _internal_set_what(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayState.what)
}

// optional uint32 flags = 3;
inline bool DisplayState::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DisplayState::has_flags() const {
  return _internal_has_flags();
}
inline void DisplayState::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t DisplayState::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t DisplayState::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.flags)
  return _internal_flags();
}
inline void DisplayState::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}
inline void DisplayState::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayState.flags)
}

// optional uint32 layer_stack = 4;
inline bool DisplayState::_internal_has_layer_stack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DisplayState::has_layer_stack() const {
  return _internal_has_layer_stack();
}
inline void DisplayState::clear_layer_stack() {
  _impl_.layer_stack_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DisplayState::_internal_layer_stack() const {
  return _impl_.layer_stack_;
}
inline uint32_t DisplayState::layer_stack() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.layer_stack)
  return _internal_layer_stack();
}
inline void DisplayState::_internal_set_layer_stack(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.layer_stack_ = value;
}
inline void DisplayState::set_layer_stack(uint32_t value) {
  _internal_set_layer_stack(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayState.layer_stack)
}

// optional uint32 orientation = 5;
inline bool DisplayState::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DisplayState::has_orientation() const {
  return _internal_has_orientation();
}
inline void DisplayState::clear_orientation() {
  _impl_.orientation_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t DisplayState::_internal_orientation() const {
  return _impl_.orientation_;
}
inline uint32_t DisplayState::orientation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.orientation)
  return _internal_orientation();
}
inline void DisplayState::_internal_set_orientation(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.orientation_ = value;
}
inline void DisplayState::set_orientation(uint32_t value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayState.orientation)
}

// optional .perfetto.protos.RectProto layer_stack_space_rect = 6;
inline bool DisplayState::_internal_has_layer_stack_space_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.layer_stack_space_rect_ != nullptr);
  return value;
}
inline bool DisplayState::has_layer_stack_space_rect() const {
  return _internal_has_layer_stack_space_rect();
}
inline const ::perfetto::protos::RectProto& DisplayState::_internal_layer_stack_space_rect() const {
  const ::perfetto::protos::RectProto* p = _impl_.layer_stack_space_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& DisplayState::layer_stack_space_rect() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.layer_stack_space_rect)
  return _internal_layer_stack_space_rect();
}
inline void DisplayState::unsafe_arena_set_allocated_layer_stack_space_rect(
    ::perfetto::protos::RectProto* layer_stack_space_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer_stack_space_rect_);
  }
  _impl_.layer_stack_space_rect_ = layer_stack_space_rect;
  if (layer_stack_space_rect) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DisplayState.layer_stack_space_rect)
}
inline ::perfetto::protos::RectProto* DisplayState::release_layer_stack_space_rect() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::RectProto* temp = _impl_.layer_stack_space_rect_;
  _impl_.layer_stack_space_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* DisplayState::unsafe_arena_release_layer_stack_space_rect() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayState.layer_stack_space_rect)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::RectProto* temp = _impl_.layer_stack_space_rect_;
  _impl_.layer_stack_space_rect_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* DisplayState::_internal_mutable_layer_stack_space_rect() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.layer_stack_space_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.layer_stack_space_rect_ = p;
  }
  return _impl_.layer_stack_space_rect_;
}
inline ::perfetto::protos::RectProto* DisplayState::mutable_layer_stack_space_rect() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_layer_stack_space_rect();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayState.layer_stack_space_rect)
  return _msg;
}
inline void DisplayState::set_allocated_layer_stack_space_rect(::perfetto::protos::RectProto* layer_stack_space_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layer_stack_space_rect_);
  }
  if (layer_stack_space_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_stack_space_rect));
    if (message_arena != submessage_arena) {
      layer_stack_space_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_stack_space_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.layer_stack_space_rect_ = layer_stack_space_rect;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayState.layer_stack_space_rect)
}

// optional .perfetto.protos.RectProto oriented_display_space_rect = 7;
inline bool DisplayState::_internal_has_oriented_display_space_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oriented_display_space_rect_ != nullptr);
  return value;
}
inline bool DisplayState::has_oriented_display_space_rect() const {
  return _internal_has_oriented_display_space_rect();
}
inline const ::perfetto::protos::RectProto& DisplayState::_internal_oriented_display_space_rect() const {
  const ::perfetto::protos::RectProto* p = _impl_.oriented_display_space_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::RectProto&>(
      ::perfetto::protos::_RectProto_default_instance_);
}
inline const ::perfetto::protos::RectProto& DisplayState::oriented_display_space_rect() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.oriented_display_space_rect)
  return _internal_oriented_display_space_rect();
}
inline void DisplayState::unsafe_arena_set_allocated_oriented_display_space_rect(
    ::perfetto::protos::RectProto* oriented_display_space_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oriented_display_space_rect_);
  }
  _impl_.oriented_display_space_rect_ = oriented_display_space_rect;
  if (oriented_display_space_rect) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DisplayState.oriented_display_space_rect)
}
inline ::perfetto::protos::RectProto* DisplayState::release_oriented_display_space_rect() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::RectProto* temp = _impl_.oriented_display_space_rect_;
  _impl_.oriented_display_space_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::RectProto* DisplayState::unsafe_arena_release_oriented_display_space_rect() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DisplayState.oriented_display_space_rect)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::RectProto* temp = _impl_.oriented_display_space_rect_;
  _impl_.oriented_display_space_rect_ = nullptr;
  return temp;
}
inline ::perfetto::protos::RectProto* DisplayState::_internal_mutable_oriented_display_space_rect() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.oriented_display_space_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::RectProto>(GetArenaForAllocation());
    _impl_.oriented_display_space_rect_ = p;
  }
  return _impl_.oriented_display_space_rect_;
}
inline ::perfetto::protos::RectProto* DisplayState::mutable_oriented_display_space_rect() {
  ::perfetto::protos::RectProto* _msg = _internal_mutable_oriented_display_space_rect();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DisplayState.oriented_display_space_rect)
  return _msg;
}
inline void DisplayState::set_allocated_oriented_display_space_rect(::perfetto::protos::RectProto* oriented_display_space_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oriented_display_space_rect_);
  }
  if (oriented_display_space_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oriented_display_space_rect));
    if (message_arena != submessage_arena) {
      oriented_display_space_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oriented_display_space_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.oriented_display_space_rect_ = oriented_display_space_rect;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DisplayState.oriented_display_space_rect)
}

// optional uint32 width = 8;
inline bool DisplayState::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DisplayState::has_width() const {
  return _internal_has_width();
}
inline void DisplayState::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t DisplayState::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t DisplayState::width() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.width)
  return _internal_width();
}
inline void DisplayState::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.width_ = value;
}
inline void DisplayState::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayState.width)
}

// optional uint32 height = 9;
inline bool DisplayState::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DisplayState::has_height() const {
  return _internal_has_height();
}
inline void DisplayState::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t DisplayState::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t DisplayState::height() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DisplayState.height)
  return _internal_height();
}
inline void DisplayState::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.height_ = value;
}
inline void DisplayState::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DisplayState.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::TransactionTraceFile_MagicNumber> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::LayerState_BufferData_BufferDataChange> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::LayerState_BufferData_PixelFormat> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::LayerState_ChangesLsb> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::LayerState_ChangesMsb> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::LayerState_Flags> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::LayerState_DropInputMode> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::DisplayState_Changes> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fsurfaceflinger_5ftransactions_2eproto
