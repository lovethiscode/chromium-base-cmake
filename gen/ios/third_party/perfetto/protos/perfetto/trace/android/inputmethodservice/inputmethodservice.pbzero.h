// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_INPUTMETHODSERVICE_INPUTMETHODSERVICE_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_INPUTMETHODSERVICE_INPUTMETHODSERVICE_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class EditorInfoProto;
class InputConnectionCallProto;
class InputMethodServiceProto_InsetsProto;
class SoftInputWindowProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class InputMethodServiceProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/28, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InputMethodServiceProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InputMethodServiceProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InputMethodServiceProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_soft_input_window() const { return at<1>().valid(); }
  ::protozero::ConstBytes soft_input_window() const { return at<1>().as_bytes(); }
  bool has_views_created() const { return at<2>().valid(); }
  bool views_created() const { return at<2>().as_bool(); }
  bool has_decor_view_visible() const { return at<3>().valid(); }
  bool decor_view_visible() const { return at<3>().as_bool(); }
  bool has_decor_view_was_visible() const { return at<4>().valid(); }
  bool decor_view_was_visible() const { return at<4>().as_bool(); }
  bool has_window_visible() const { return at<5>().valid(); }
  bool window_visible() const { return at<5>().as_bool(); }
  bool has_in_show_window() const { return at<6>().valid(); }
  bool in_show_window() const { return at<6>().as_bool(); }
  bool has_configuration() const { return at<7>().valid(); }
  ::protozero::ConstChars configuration() const { return at<7>().as_string(); }
  bool has_token() const { return at<8>().valid(); }
  ::protozero::ConstChars token() const { return at<8>().as_string(); }
  bool has_input_binding() const { return at<9>().valid(); }
  ::protozero::ConstChars input_binding() const { return at<9>().as_string(); }
  bool has_input_started() const { return at<10>().valid(); }
  bool input_started() const { return at<10>().as_bool(); }
  bool has_input_view_started() const { return at<11>().valid(); }
  bool input_view_started() const { return at<11>().as_bool(); }
  bool has_candidates_view_started() const { return at<12>().valid(); }
  bool candidates_view_started() const { return at<12>().as_bool(); }
  bool has_input_editor_info() const { return at<13>().valid(); }
  ::protozero::ConstBytes input_editor_info() const { return at<13>().as_bytes(); }
  bool has_show_input_requested() const { return at<14>().valid(); }
  bool show_input_requested() const { return at<14>().as_bool(); }
  bool has_last_show_input_requested() const { return at<15>().valid(); }
  bool last_show_input_requested() const { return at<15>().as_bool(); }
  bool has_show_input_flags() const { return at<18>().valid(); }
  int32_t show_input_flags() const { return at<18>().as_int32(); }
  bool has_candidates_visibility() const { return at<19>().valid(); }
  int32_t candidates_visibility() const { return at<19>().as_int32(); }
  bool has_fullscreen_applied() const { return at<20>().valid(); }
  bool fullscreen_applied() const { return at<20>().as_bool(); }
  bool has_is_fullscreen() const { return at<21>().valid(); }
  bool is_fullscreen() const { return at<21>().as_bool(); }
  bool has_extract_view_hidden() const { return at<22>().valid(); }
  bool extract_view_hidden() const { return at<22>().as_bool(); }
  bool has_extracted_token() const { return at<23>().valid(); }
  int32_t extracted_token() const { return at<23>().as_int32(); }
  bool has_is_input_view_shown() const { return at<24>().valid(); }
  bool is_input_view_shown() const { return at<24>().as_bool(); }
  bool has_status_icon() const { return at<25>().valid(); }
  int32_t status_icon() const { return at<25>().as_int32(); }
  bool has_last_computed_insets() const { return at<26>().valid(); }
  ::protozero::ConstBytes last_computed_insets() const { return at<26>().as_bytes(); }
  bool has_settings_observer() const { return at<27>().valid(); }
  ::protozero::ConstChars settings_observer() const { return at<27>().as_string(); }
  bool has_input_connection_call() const { return at<28>().valid(); }
  ::protozero::ConstBytes input_connection_call() const { return at<28>().as_bytes(); }
};

class InputMethodServiceProto : public ::protozero::Message {
 public:
  using Decoder = InputMethodServiceProto_Decoder;
  enum : int32_t {
    kSoftInputWindowFieldNumber = 1,
    kViewsCreatedFieldNumber = 2,
    kDecorViewVisibleFieldNumber = 3,
    kDecorViewWasVisibleFieldNumber = 4,
    kWindowVisibleFieldNumber = 5,
    kInShowWindowFieldNumber = 6,
    kConfigurationFieldNumber = 7,
    kTokenFieldNumber = 8,
    kInputBindingFieldNumber = 9,
    kInputStartedFieldNumber = 10,
    kInputViewStartedFieldNumber = 11,
    kCandidatesViewStartedFieldNumber = 12,
    kInputEditorInfoFieldNumber = 13,
    kShowInputRequestedFieldNumber = 14,
    kLastShowInputRequestedFieldNumber = 15,
    kShowInputFlagsFieldNumber = 18,
    kCandidatesVisibilityFieldNumber = 19,
    kFullscreenAppliedFieldNumber = 20,
    kIsFullscreenFieldNumber = 21,
    kExtractViewHiddenFieldNumber = 22,
    kExtractedTokenFieldNumber = 23,
    kIsInputViewShownFieldNumber = 24,
    kStatusIconFieldNumber = 25,
    kLastComputedInsetsFieldNumber = 26,
    kSettingsObserverFieldNumber = 27,
    kInputConnectionCallFieldNumber = 28,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InputMethodServiceProto"; }

  using InsetsProto = ::perfetto::protos::pbzero::InputMethodServiceProto_InsetsProto;

  using FieldMetadata_SoftInputWindow =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SoftInputWindowProto,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_SoftInputWindow kSoftInputWindow{};
  template <typename T = SoftInputWindowProto> T* set_soft_input_window() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_ViewsCreated =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_ViewsCreated kViewsCreated{};
  void set_views_created(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ViewsCreated::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DecorViewVisible =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_DecorViewVisible kDecorViewVisible{};
  void set_decor_view_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DecorViewVisible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DecorViewWasVisible =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_DecorViewWasVisible kDecorViewWasVisible{};
  void set_decor_view_was_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DecorViewWasVisible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WindowVisible =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_WindowVisible kWindowVisible{};
  void set_window_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_WindowVisible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InShowWindow =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_InShowWindow kInShowWindow{};
  void set_in_show_window(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_InShowWindow::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Configuration =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_Configuration kConfiguration{};
  void set_configuration(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Configuration::kFieldId, data, size);
  }
  void set_configuration(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Configuration::kFieldId, chars.data, chars.size);
  }
  void set_configuration(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Configuration::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Token =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_Token kToken{};
  void set_token(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Token::kFieldId, data, size);
  }
  void set_token(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Token::kFieldId, chars.data, chars.size);
  }
  void set_token(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Token::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputBinding =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_InputBinding kInputBinding{};
  void set_input_binding(const char* data, size_t size) {
    AppendBytes(FieldMetadata_InputBinding::kFieldId, data, size);
  }
  void set_input_binding(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_InputBinding::kFieldId, chars.data, chars.size);
  }
  void set_input_binding(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_InputBinding::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputStarted =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_InputStarted kInputStarted{};
  void set_input_started(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_InputStarted::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputViewStarted =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_InputViewStarted kInputViewStarted{};
  void set_input_view_started(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_InputViewStarted::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CandidatesViewStarted =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_CandidatesViewStarted kCandidatesViewStarted{};
  void set_candidates_view_started(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_CandidatesViewStarted::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputEditorInfo =
    ::protozero::proto_utils::FieldMetadata<
      13,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      EditorInfoProto,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_InputEditorInfo kInputEditorInfo{};
  template <typename T = EditorInfoProto> T* set_input_editor_info() {
    return BeginNestedMessage<T>(13);
  }


  using FieldMetadata_ShowInputRequested =
    ::protozero::proto_utils::FieldMetadata<
      14,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_ShowInputRequested kShowInputRequested{};
  void set_show_input_requested(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ShowInputRequested::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastShowInputRequested =
    ::protozero::proto_utils::FieldMetadata<
      15,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_LastShowInputRequested kLastShowInputRequested{};
  void set_last_show_input_requested(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_LastShowInputRequested::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ShowInputFlags =
    ::protozero::proto_utils::FieldMetadata<
      18,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_ShowInputFlags kShowInputFlags{};
  void set_show_input_flags(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ShowInputFlags::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CandidatesVisibility =
    ::protozero::proto_utils::FieldMetadata<
      19,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_CandidatesVisibility kCandidatesVisibility{};
  void set_candidates_visibility(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CandidatesVisibility::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FullscreenApplied =
    ::protozero::proto_utils::FieldMetadata<
      20,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_FullscreenApplied kFullscreenApplied{};
  void set_fullscreen_applied(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_FullscreenApplied::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsFullscreen =
    ::protozero::proto_utils::FieldMetadata<
      21,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_IsFullscreen kIsFullscreen{};
  void set_is_fullscreen(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsFullscreen::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ExtractViewHidden =
    ::protozero::proto_utils::FieldMetadata<
      22,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_ExtractViewHidden kExtractViewHidden{};
  void set_extract_view_hidden(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ExtractViewHidden::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ExtractedToken =
    ::protozero::proto_utils::FieldMetadata<
      23,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_ExtractedToken kExtractedToken{};
  void set_extracted_token(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ExtractedToken::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsInputViewShown =
    ::protozero::proto_utils::FieldMetadata<
      24,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_IsInputViewShown kIsInputViewShown{};
  void set_is_input_view_shown(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsInputViewShown::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_StatusIcon =
    ::protozero::proto_utils::FieldMetadata<
      25,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_StatusIcon kStatusIcon{};
  void set_status_icon(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_StatusIcon::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastComputedInsets =
    ::protozero::proto_utils::FieldMetadata<
      26,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputMethodServiceProto_InsetsProto,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_LastComputedInsets kLastComputedInsets{};
  template <typename T = InputMethodServiceProto_InsetsProto> T* set_last_computed_insets() {
    return BeginNestedMessage<T>(26);
  }


  using FieldMetadata_SettingsObserver =
    ::protozero::proto_utils::FieldMetadata<
      27,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_SettingsObserver kSettingsObserver{};
  void set_settings_observer(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SettingsObserver::kFieldId, data, size);
  }
  void set_settings_observer(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SettingsObserver::kFieldId, chars.data, chars.size);
  }
  void set_settings_observer(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SettingsObserver::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputConnectionCall =
    ::protozero::proto_utils::FieldMetadata<
      28,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputConnectionCallProto,
      InputMethodServiceProto>;

  static constexpr FieldMetadata_InputConnectionCall kInputConnectionCall{};
  template <typename T = InputConnectionCallProto> T* set_input_connection_call() {
    return BeginNestedMessage<T>(28);
  }

};

class InputMethodServiceProto_InsetsProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InputMethodServiceProto_InsetsProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InputMethodServiceProto_InsetsProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InputMethodServiceProto_InsetsProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_content_top_insets() const { return at<1>().valid(); }
  int32_t content_top_insets() const { return at<1>().as_int32(); }
  bool has_visible_top_insets() const { return at<2>().valid(); }
  int32_t visible_top_insets() const { return at<2>().as_int32(); }
  bool has_touchable_insets() const { return at<3>().valid(); }
  int32_t touchable_insets() const { return at<3>().as_int32(); }
  bool has_touchable_region() const { return at<4>().valid(); }
  ::protozero::ConstChars touchable_region() const { return at<4>().as_string(); }
};

class InputMethodServiceProto_InsetsProto : public ::protozero::Message {
 public:
  using Decoder = InputMethodServiceProto_InsetsProto_Decoder;
  enum : int32_t {
    kContentTopInsetsFieldNumber = 1,
    kVisibleTopInsetsFieldNumber = 2,
    kTouchableInsetsFieldNumber = 3,
    kTouchableRegionFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InputMethodServiceProto.InsetsProto"; }


  using FieldMetadata_ContentTopInsets =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodServiceProto_InsetsProto>;

  static constexpr FieldMetadata_ContentTopInsets kContentTopInsets{};
  void set_content_top_insets(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ContentTopInsets::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VisibleTopInsets =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodServiceProto_InsetsProto>;

  static constexpr FieldMetadata_VisibleTopInsets kVisibleTopInsets{};
  void set_visible_top_insets(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_VisibleTopInsets::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TouchableInsets =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodServiceProto_InsetsProto>;

  static constexpr FieldMetadata_TouchableInsets kTouchableInsets{};
  void set_touchable_insets(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TouchableInsets::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TouchableRegion =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodServiceProto_InsetsProto>;

  static constexpr FieldMetadata_TouchableRegion kTouchableRegion{};
  void set_touchable_region(const char* data, size_t size) {
    AppendBytes(FieldMetadata_TouchableRegion::kFieldId, data, size);
  }
  void set_touchable_region(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_TouchableRegion::kFieldId, chars.data, chars.size);
  }
  void set_touchable_region(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_TouchableRegion::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
