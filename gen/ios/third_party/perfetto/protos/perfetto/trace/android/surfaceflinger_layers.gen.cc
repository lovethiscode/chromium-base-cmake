#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/surfaceflinger_layers.gen.h"
#include "protos/perfetto/trace/android/graphics/rect.gen.h"
#include "protos/perfetto/trace/android/surfaceflinger_common.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

BarrierLayerProto::BarrierLayerProto() = default;
BarrierLayerProto::~BarrierLayerProto() = default;
BarrierLayerProto::BarrierLayerProto(const BarrierLayerProto&) = default;
BarrierLayerProto& BarrierLayerProto::operator=(const BarrierLayerProto&) = default;
BarrierLayerProto::BarrierLayerProto(BarrierLayerProto&&) noexcept = default;
BarrierLayerProto& BarrierLayerProto::operator=(BarrierLayerProto&&) = default;

bool BarrierLayerProto::operator==(const BarrierLayerProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(frame_number_, other.frame_number_);
}

bool BarrierLayerProto::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* frame_number */:
        field.get(&frame_number_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BarrierLayerProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BarrierLayerProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BarrierLayerProto::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: frame_number
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, frame_number_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ActiveBufferProto::ActiveBufferProto() = default;
ActiveBufferProto::~ActiveBufferProto() = default;
ActiveBufferProto::ActiveBufferProto(const ActiveBufferProto&) = default;
ActiveBufferProto& ActiveBufferProto::operator=(const ActiveBufferProto&) = default;
ActiveBufferProto::ActiveBufferProto(ActiveBufferProto&&) noexcept = default;
ActiveBufferProto& ActiveBufferProto::operator=(ActiveBufferProto&&) = default;

bool ActiveBufferProto::operator==(const ActiveBufferProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(width_, other.width_)
   && ::protozero::internal::gen_helpers::EqualsField(height_, other.height_)
   && ::protozero::internal::gen_helpers::EqualsField(stride_, other.stride_)
   && ::protozero::internal::gen_helpers::EqualsField(format_, other.format_)
   && ::protozero::internal::gen_helpers::EqualsField(usage_, other.usage_);
}

bool ActiveBufferProto::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* width */:
        field.get(&width_);
        break;
      case 2 /* height */:
        field.get(&height_);
        break;
      case 3 /* stride */:
        field.get(&stride_);
        break;
      case 4 /* format */:
        field.get(&format_);
        break;
      case 5 /* usage */:
        field.get(&usage_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ActiveBufferProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ActiveBufferProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ActiveBufferProto::Serialize(::protozero::Message* msg) const {
  // Field 1: width
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, width_, msg);
  }

  // Field 2: height
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, height_, msg);
  }

  // Field 3: stride
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, stride_, msg);
  }

  // Field 4: format
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, format_, msg);
  }

  // Field 5: usage
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, usage_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FloatRectProto::FloatRectProto() = default;
FloatRectProto::~FloatRectProto() = default;
FloatRectProto::FloatRectProto(const FloatRectProto&) = default;
FloatRectProto& FloatRectProto::operator=(const FloatRectProto&) = default;
FloatRectProto::FloatRectProto(FloatRectProto&&) noexcept = default;
FloatRectProto& FloatRectProto::operator=(FloatRectProto&&) = default;

bool FloatRectProto::operator==(const FloatRectProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(left_, other.left_)
   && ::protozero::internal::gen_helpers::EqualsField(top_, other.top_)
   && ::protozero::internal::gen_helpers::EqualsField(right_, other.right_)
   && ::protozero::internal::gen_helpers::EqualsField(bottom_, other.bottom_);
}

bool FloatRectProto::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* left */:
        field.get(&left_);
        break;
      case 2 /* top */:
        field.get(&top_);
        break;
      case 3 /* right */:
        field.get(&right_);
        break;
      case 4 /* bottom */:
        field.get(&bottom_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FloatRectProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FloatRectProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FloatRectProto::Serialize(::protozero::Message* msg) const {
  // Field 1: left
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, left_, msg);
  }

  // Field 2: top
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, top_, msg);
  }

  // Field 3: right
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, right_, msg);
  }

  // Field 4: bottom
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeFixed(4, bottom_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


PositionProto::PositionProto() = default;
PositionProto::~PositionProto() = default;
PositionProto::PositionProto(const PositionProto&) = default;
PositionProto& PositionProto::operator=(const PositionProto&) = default;
PositionProto::PositionProto(PositionProto&&) noexcept = default;
PositionProto& PositionProto::operator=(PositionProto&&) = default;

bool PositionProto::operator==(const PositionProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(x_, other.x_)
   && ::protozero::internal::gen_helpers::EqualsField(y_, other.y_);
}

bool PositionProto::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* x */:
        field.get(&x_);
        break;
      case 2 /* y */:
        field.get(&y_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PositionProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PositionProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PositionProto::Serialize(::protozero::Message* msg) const {
  // Field 1: x
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, x_, msg);
  }

  // Field 2: y
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeFixed(2, y_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerProto::LayerProto() = default;
LayerProto::~LayerProto() = default;
LayerProto::LayerProto(const LayerProto&) = default;
LayerProto& LayerProto::operator=(const LayerProto&) = default;
LayerProto::LayerProto(LayerProto&&) noexcept = default;
LayerProto& LayerProto::operator=(LayerProto&&) = default;

bool LayerProto::operator==(const LayerProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(children_, other.children_)
   && ::protozero::internal::gen_helpers::EqualsField(relatives_, other.relatives_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(transparent_region_, other.transparent_region_)
   && ::protozero::internal::gen_helpers::EqualsField(visible_region_, other.visible_region_)
   && ::protozero::internal::gen_helpers::EqualsField(damage_region_, other.damage_region_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_, other.layer_stack_)
   && ::protozero::internal::gen_helpers::EqualsField(z_, other.z_)
   && ::protozero::internal::gen_helpers::EqualsField(position_, other.position_)
   && ::protozero::internal::gen_helpers::EqualsField(requested_position_, other.requested_position_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(crop_, other.crop_)
   && ::protozero::internal::gen_helpers::EqualsField(final_crop_, other.final_crop_)
   && ::protozero::internal::gen_helpers::EqualsField(is_opaque_, other.is_opaque_)
   && ::protozero::internal::gen_helpers::EqualsField(invalidate_, other.invalidate_)
   && ::protozero::internal::gen_helpers::EqualsField(dataspace_, other.dataspace_)
   && ::protozero::internal::gen_helpers::EqualsField(pixel_format_, other.pixel_format_)
   && ::protozero::internal::gen_helpers::EqualsField(color_, other.color_)
   && ::protozero::internal::gen_helpers::EqualsField(requested_color_, other.requested_color_)
   && ::protozero::internal::gen_helpers::EqualsField(flags_, other.flags_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_, other.transform_)
   && ::protozero::internal::gen_helpers::EqualsField(requested_transform_, other.requested_transform_)
   && ::protozero::internal::gen_helpers::EqualsField(parent_, other.parent_)
   && ::protozero::internal::gen_helpers::EqualsField(z_order_relative_of_, other.z_order_relative_of_)
   && ::protozero::internal::gen_helpers::EqualsField(active_buffer_, other.active_buffer_)
   && ::protozero::internal::gen_helpers::EqualsField(queued_frames_, other.queued_frames_)
   && ::protozero::internal::gen_helpers::EqualsField(refresh_pending_, other.refresh_pending_)
   && ::protozero::internal::gen_helpers::EqualsField(hwc_frame_, other.hwc_frame_)
   && ::protozero::internal::gen_helpers::EqualsField(hwc_crop_, other.hwc_crop_)
   && ::protozero::internal::gen_helpers::EqualsField(hwc_transform_, other.hwc_transform_)
   && ::protozero::internal::gen_helpers::EqualsField(window_type_, other.window_type_)
   && ::protozero::internal::gen_helpers::EqualsField(app_id_, other.app_id_)
   && ::protozero::internal::gen_helpers::EqualsField(hwc_composition_type_, other.hwc_composition_type_)
   && ::protozero::internal::gen_helpers::EqualsField(is_protected_, other.is_protected_)
   && ::protozero::internal::gen_helpers::EqualsField(curr_frame_, other.curr_frame_)
   && ::protozero::internal::gen_helpers::EqualsField(barrier_layer_, other.barrier_layer_)
   && ::protozero::internal::gen_helpers::EqualsField(buffer_transform_, other.buffer_transform_)
   && ::protozero::internal::gen_helpers::EqualsField(effective_scaling_mode_, other.effective_scaling_mode_)
   && ::protozero::internal::gen_helpers::EqualsField(corner_radius_, other.corner_radius_)
   && ::protozero::internal::gen_helpers::EqualsField(metadata_, other.metadata_)
   && ::protozero::internal::gen_helpers::EqualsField(effective_transform_, other.effective_transform_)
   && ::protozero::internal::gen_helpers::EqualsField(source_bounds_, other.source_bounds_)
   && ::protozero::internal::gen_helpers::EqualsField(bounds_, other.bounds_)
   && ::protozero::internal::gen_helpers::EqualsField(screen_bounds_, other.screen_bounds_)
   && ::protozero::internal::gen_helpers::EqualsField(input_window_info_, other.input_window_info_)
   && ::protozero::internal::gen_helpers::EqualsField(corner_radius_crop_, other.corner_radius_crop_)
   && ::protozero::internal::gen_helpers::EqualsField(shadow_radius_, other.shadow_radius_)
   && ::protozero::internal::gen_helpers::EqualsField(color_transform_, other.color_transform_)
   && ::protozero::internal::gen_helpers::EqualsField(is_relative_of_, other.is_relative_of_)
   && ::protozero::internal::gen_helpers::EqualsField(background_blur_radius_, other.background_blur_radius_)
   && ::protozero::internal::gen_helpers::EqualsField(owner_uid_, other.owner_uid_)
   && ::protozero::internal::gen_helpers::EqualsField(blur_regions_, other.blur_regions_)
   && ::protozero::internal::gen_helpers::EqualsField(is_trusted_overlay_, other.is_trusted_overlay_)
   && ::protozero::internal::gen_helpers::EqualsField(requested_corner_radius_, other.requested_corner_radius_)
   && ::protozero::internal::gen_helpers::EqualsField(destination_frame_, other.destination_frame_)
   && ::protozero::internal::gen_helpers::EqualsField(original_id_, other.original_id_)
   && ::protozero::internal::gen_helpers::EqualsField(trusted_overlay_, other.trusted_overlay_);
}

int LayerProto::barrier_layer_size() const { return static_cast<int>(barrier_layer_.size()); }
void LayerProto::clear_barrier_layer() { barrier_layer_.clear(); }
BarrierLayerProto* LayerProto::add_barrier_layer() { barrier_layer_.emplace_back(); return &barrier_layer_.back(); }
int LayerProto::metadata_size() const { return static_cast<int>(metadata_.size()); }
void LayerProto::clear_metadata() { metadata_.clear(); }
LayerProto_MetadataEntry* LayerProto::add_metadata() { metadata_.emplace_back(); return &metadata_.back(); }
int LayerProto::blur_regions_size() const { return static_cast<int>(blur_regions_.size()); }
void LayerProto::clear_blur_regions() { blur_regions_.clear(); }
BlurRegion* LayerProto::add_blur_regions() { blur_regions_.emplace_back(); return &blur_regions_.back(); }
bool LayerProto::ParseFromArray(const void* raw, size_t size) {
  children_.clear();
  relatives_.clear();
  barrier_layer_.clear();
  metadata_.clear();
  blur_regions_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 3 /* children */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t>(field, &children_)) {
          packed_error = true;}
        break;
      case 4 /* relatives */:
        if (!::protozero::internal::gen_helpers::DeserializePackedRepeated<::protozero::proto_utils::ProtoWireType::kVarInt, int32_t>(field, &relatives_)) {
          packed_error = true;}
        break;
      case 5 /* type */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &type_);
        break;
      case 6 /* transparent_region */:
        (*transparent_region_).ParseFromArray(field.data(), field.size());
        break;
      case 7 /* visible_region */:
        (*visible_region_).ParseFromArray(field.data(), field.size());
        break;
      case 8 /* damage_region */:
        (*damage_region_).ParseFromArray(field.data(), field.size());
        break;
      case 9 /* layer_stack */:
        field.get(&layer_stack_);
        break;
      case 10 /* z */:
        field.get(&z_);
        break;
      case 11 /* position */:
        (*position_).ParseFromArray(field.data(), field.size());
        break;
      case 12 /* requested_position */:
        (*requested_position_).ParseFromArray(field.data(), field.size());
        break;
      case 13 /* size */:
        (*size_).ParseFromArray(field.data(), field.size());
        break;
      case 14 /* crop */:
        (*crop_).ParseFromArray(field.data(), field.size());
        break;
      case 15 /* final_crop */:
        (*final_crop_).ParseFromArray(field.data(), field.size());
        break;
      case 16 /* is_opaque */:
        field.get(&is_opaque_);
        break;
      case 17 /* invalidate */:
        field.get(&invalidate_);
        break;
      case 18 /* dataspace */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &dataspace_);
        break;
      case 19 /* pixel_format */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &pixel_format_);
        break;
      case 20 /* color */:
        (*color_).ParseFromArray(field.data(), field.size());
        break;
      case 21 /* requested_color */:
        (*requested_color_).ParseFromArray(field.data(), field.size());
        break;
      case 22 /* flags */:
        field.get(&flags_);
        break;
      case 23 /* transform */:
        (*transform_).ParseFromArray(field.data(), field.size());
        break;
      case 24 /* requested_transform */:
        (*requested_transform_).ParseFromArray(field.data(), field.size());
        break;
      case 25 /* parent */:
        field.get(&parent_);
        break;
      case 26 /* z_order_relative_of */:
        field.get(&z_order_relative_of_);
        break;
      case 27 /* active_buffer */:
        (*active_buffer_).ParseFromArray(field.data(), field.size());
        break;
      case 28 /* queued_frames */:
        field.get(&queued_frames_);
        break;
      case 29 /* refresh_pending */:
        field.get(&refresh_pending_);
        break;
      case 30 /* hwc_frame */:
        (*hwc_frame_).ParseFromArray(field.data(), field.size());
        break;
      case 31 /* hwc_crop */:
        (*hwc_crop_).ParseFromArray(field.data(), field.size());
        break;
      case 32 /* hwc_transform */:
        field.get(&hwc_transform_);
        break;
      case 33 /* window_type */:
        field.get(&window_type_);
        break;
      case 34 /* app_id */:
        field.get(&app_id_);
        break;
      case 35 /* hwc_composition_type */:
        field.get(&hwc_composition_type_);
        break;
      case 36 /* is_protected */:
        field.get(&is_protected_);
        break;
      case 37 /* curr_frame */:
        field.get(&curr_frame_);
        break;
      case 38 /* barrier_layer */:
        barrier_layer_.emplace_back();
        barrier_layer_.back().ParseFromArray(field.data(), field.size());
        break;
      case 39 /* buffer_transform */:
        (*buffer_transform_).ParseFromArray(field.data(), field.size());
        break;
      case 40 /* effective_scaling_mode */:
        field.get(&effective_scaling_mode_);
        break;
      case 41 /* corner_radius */:
        field.get(&corner_radius_);
        break;
      case 42 /* metadata */:
        metadata_.emplace_back();
        metadata_.back().ParseFromArray(field.data(), field.size());
        break;
      case 43 /* effective_transform */:
        (*effective_transform_).ParseFromArray(field.data(), field.size());
        break;
      case 44 /* source_bounds */:
        (*source_bounds_).ParseFromArray(field.data(), field.size());
        break;
      case 45 /* bounds */:
        (*bounds_).ParseFromArray(field.data(), field.size());
        break;
      case 46 /* screen_bounds */:
        (*screen_bounds_).ParseFromArray(field.data(), field.size());
        break;
      case 47 /* input_window_info */:
        (*input_window_info_).ParseFromArray(field.data(), field.size());
        break;
      case 48 /* corner_radius_crop */:
        (*corner_radius_crop_).ParseFromArray(field.data(), field.size());
        break;
      case 49 /* shadow_radius */:
        field.get(&shadow_radius_);
        break;
      case 50 /* color_transform */:
        (*color_transform_).ParseFromArray(field.data(), field.size());
        break;
      case 51 /* is_relative_of */:
        field.get(&is_relative_of_);
        break;
      case 52 /* background_blur_radius */:
        field.get(&background_blur_radius_);
        break;
      case 53 /* owner_uid */:
        field.get(&owner_uid_);
        break;
      case 54 /* blur_regions */:
        blur_regions_.emplace_back();
        blur_regions_.back().ParseFromArray(field.data(), field.size());
        break;
      case 55 /* is_trusted_overlay */:
        field.get(&is_trusted_overlay_);
        break;
      case 56 /* requested_corner_radius */:
        field.get(&requested_corner_radius_);
        break;
      case 57 /* destination_frame */:
        (*destination_frame_).ParseFromArray(field.data(), field.size());
        break;
      case 58 /* original_id */:
        field.get(&original_id_);
        break;
      case 59 /* trusted_overlay */:
        field.get(&trusted_overlay_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerProto::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, name_, msg);
  }

  // Field 3: children
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : children_)
      pack.Append(it);
    msg->AppendBytes(3, pack.data(), pack.size());
  }

  // Field 4: relatives
  {
    ::protozero::PackedVarInt pack;
    for (auto& it : relatives_)
      pack.Append(it);
    msg->AppendBytes(4, pack.data(), pack.size());
  }

  // Field 5: type
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, type_, msg);
  }

  // Field 6: transparent_region
  if (_has_field_[6]) {
    (*transparent_region_).Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 7: visible_region
  if (_has_field_[7]) {
    (*visible_region_).Serialize(msg->BeginNestedMessage<::protozero::Message>(7));
  }

  // Field 8: damage_region
  if (_has_field_[8]) {
    (*damage_region_).Serialize(msg->BeginNestedMessage<::protozero::Message>(8));
  }

  // Field 9: layer_stack
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, layer_stack_, msg);
  }

  // Field 10: z
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, z_, msg);
  }

  // Field 11: position
  if (_has_field_[11]) {
    (*position_).Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 12: requested_position
  if (_has_field_[12]) {
    (*requested_position_).Serialize(msg->BeginNestedMessage<::protozero::Message>(12));
  }

  // Field 13: size
  if (_has_field_[13]) {
    (*size_).Serialize(msg->BeginNestedMessage<::protozero::Message>(13));
  }

  // Field 14: crop
  if (_has_field_[14]) {
    (*crop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(14));
  }

  // Field 15: final_crop
  if (_has_field_[15]) {
    (*final_crop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(15));
  }

  // Field 16: is_opaque
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(16, is_opaque_, msg);
  }

  // Field 17: invalidate
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(17, invalidate_, msg);
  }

  // Field 18: dataspace
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeString(18, dataspace_, msg);
  }

  // Field 19: pixel_format
  if (_has_field_[19]) {
    ::protozero::internal::gen_helpers::SerializeString(19, pixel_format_, msg);
  }

  // Field 20: color
  if (_has_field_[20]) {
    (*color_).Serialize(msg->BeginNestedMessage<::protozero::Message>(20));
  }

  // Field 21: requested_color
  if (_has_field_[21]) {
    (*requested_color_).Serialize(msg->BeginNestedMessage<::protozero::Message>(21));
  }

  // Field 22: flags
  if (_has_field_[22]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(22, flags_, msg);
  }

  // Field 23: transform
  if (_has_field_[23]) {
    (*transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(23));
  }

  // Field 24: requested_transform
  if (_has_field_[24]) {
    (*requested_transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(24));
  }

  // Field 25: parent
  if (_has_field_[25]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(25, parent_, msg);
  }

  // Field 26: z_order_relative_of
  if (_has_field_[26]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(26, z_order_relative_of_, msg);
  }

  // Field 27: active_buffer
  if (_has_field_[27]) {
    (*active_buffer_).Serialize(msg->BeginNestedMessage<::protozero::Message>(27));
  }

  // Field 28: queued_frames
  if (_has_field_[28]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(28, queued_frames_, msg);
  }

  // Field 29: refresh_pending
  if (_has_field_[29]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(29, refresh_pending_, msg);
  }

  // Field 30: hwc_frame
  if (_has_field_[30]) {
    (*hwc_frame_).Serialize(msg->BeginNestedMessage<::protozero::Message>(30));
  }

  // Field 31: hwc_crop
  if (_has_field_[31]) {
    (*hwc_crop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(31));
  }

  // Field 32: hwc_transform
  if (_has_field_[32]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(32, hwc_transform_, msg);
  }

  // Field 33: window_type
  if (_has_field_[33]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(33, window_type_, msg);
  }

  // Field 34: app_id
  if (_has_field_[34]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(34, app_id_, msg);
  }

  // Field 35: hwc_composition_type
  if (_has_field_[35]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(35, hwc_composition_type_, msg);
  }

  // Field 36: is_protected
  if (_has_field_[36]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(36, is_protected_, msg);
  }

  // Field 37: curr_frame
  if (_has_field_[37]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(37, curr_frame_, msg);
  }

  // Field 38: barrier_layer
  for (auto& it : barrier_layer_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(38));
  }

  // Field 39: buffer_transform
  if (_has_field_[39]) {
    (*buffer_transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(39));
  }

  // Field 40: effective_scaling_mode
  if (_has_field_[40]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(40, effective_scaling_mode_, msg);
  }

  // Field 41: corner_radius
  if (_has_field_[41]) {
    ::protozero::internal::gen_helpers::SerializeFixed(41, corner_radius_, msg);
  }

  // Field 42: metadata
  for (auto& it : metadata_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(42));
  }

  // Field 43: effective_transform
  if (_has_field_[43]) {
    (*effective_transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(43));
  }

  // Field 44: source_bounds
  if (_has_field_[44]) {
    (*source_bounds_).Serialize(msg->BeginNestedMessage<::protozero::Message>(44));
  }

  // Field 45: bounds
  if (_has_field_[45]) {
    (*bounds_).Serialize(msg->BeginNestedMessage<::protozero::Message>(45));
  }

  // Field 46: screen_bounds
  if (_has_field_[46]) {
    (*screen_bounds_).Serialize(msg->BeginNestedMessage<::protozero::Message>(46));
  }

  // Field 47: input_window_info
  if (_has_field_[47]) {
    (*input_window_info_).Serialize(msg->BeginNestedMessage<::protozero::Message>(47));
  }

  // Field 48: corner_radius_crop
  if (_has_field_[48]) {
    (*corner_radius_crop_).Serialize(msg->BeginNestedMessage<::protozero::Message>(48));
  }

  // Field 49: shadow_radius
  if (_has_field_[49]) {
    ::protozero::internal::gen_helpers::SerializeFixed(49, shadow_radius_, msg);
  }

  // Field 50: color_transform
  if (_has_field_[50]) {
    (*color_transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(50));
  }

  // Field 51: is_relative_of
  if (_has_field_[51]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(51, is_relative_of_, msg);
  }

  // Field 52: background_blur_radius
  if (_has_field_[52]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(52, background_blur_radius_, msg);
  }

  // Field 53: owner_uid
  if (_has_field_[53]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(53, owner_uid_, msg);
  }

  // Field 54: blur_regions
  for (auto& it : blur_regions_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(54));
  }

  // Field 55: is_trusted_overlay
  if (_has_field_[55]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(55, is_trusted_overlay_, msg);
  }

  // Field 56: requested_corner_radius
  if (_has_field_[56]) {
    ::protozero::internal::gen_helpers::SerializeFixed(56, requested_corner_radius_, msg);
  }

  // Field 57: destination_frame
  if (_has_field_[57]) {
    (*destination_frame_).Serialize(msg->BeginNestedMessage<::protozero::Message>(57));
  }

  // Field 58: original_id
  if (_has_field_[58]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(58, original_id_, msg);
  }

  // Field 59: trusted_overlay
  if (_has_field_[59]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(59, trusted_overlay_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayerProto_MetadataEntry::LayerProto_MetadataEntry() = default;
LayerProto_MetadataEntry::~LayerProto_MetadataEntry() = default;
LayerProto_MetadataEntry::LayerProto_MetadataEntry(const LayerProto_MetadataEntry&) = default;
LayerProto_MetadataEntry& LayerProto_MetadataEntry::operator=(const LayerProto_MetadataEntry&) = default;
LayerProto_MetadataEntry::LayerProto_MetadataEntry(LayerProto_MetadataEntry&&) noexcept = default;
LayerProto_MetadataEntry& LayerProto_MetadataEntry::operator=(LayerProto_MetadataEntry&&) = default;

bool LayerProto_MetadataEntry::operator==(const LayerProto_MetadataEntry& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(key_, other.key_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool LayerProto_MetadataEntry::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* key */:
        field.get(&key_);
        break;
      case 2 /* value */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayerProto_MetadataEntry::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayerProto_MetadataEntry::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayerProto_MetadataEntry::Serialize(::protozero::Message* msg) const {
  // Field 1: key
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, key_, msg);
  }

  // Field 2: value
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DisplayProto::DisplayProto() = default;
DisplayProto::~DisplayProto() = default;
DisplayProto::DisplayProto(const DisplayProto&) = default;
DisplayProto& DisplayProto::operator=(const DisplayProto&) = default;
DisplayProto::DisplayProto(DisplayProto&&) noexcept = default;
DisplayProto& DisplayProto::operator=(DisplayProto&&) = default;

bool DisplayProto::operator==(const DisplayProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_, other.layer_stack_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(layer_stack_space_rect_, other.layer_stack_space_rect_)
   && ::protozero::internal::gen_helpers::EqualsField(transform_, other.transform_)
   && ::protozero::internal::gen_helpers::EqualsField(is_virtual_, other.is_virtual_)
   && ::protozero::internal::gen_helpers::EqualsField(dpi_x_, other.dpi_x_)
   && ::protozero::internal::gen_helpers::EqualsField(dpi_y_, other.dpi_y_);
}

bool DisplayProto::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* id */:
        field.get(&id_);
        break;
      case 2 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 3 /* layer_stack */:
        field.get(&layer_stack_);
        break;
      case 4 /* size */:
        (*size_).ParseFromArray(field.data(), field.size());
        break;
      case 5 /* layer_stack_space_rect */:
        (*layer_stack_space_rect_).ParseFromArray(field.data(), field.size());
        break;
      case 6 /* transform */:
        (*transform_).ParseFromArray(field.data(), field.size());
        break;
      case 7 /* is_virtual */:
        field.get(&is_virtual_);
        break;
      case 8 /* dpi_x */:
        field.get(&dpi_x_);
        break;
      case 9 /* dpi_y */:
        field.get(&dpi_y_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DisplayProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DisplayProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DisplayProto::Serialize(::protozero::Message* msg) const {
  // Field 1: id
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, id_, msg);
  }

  // Field 2: name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, name_, msg);
  }

  // Field 3: layer_stack
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, layer_stack_, msg);
  }

  // Field 4: size
  if (_has_field_[4]) {
    (*size_).Serialize(msg->BeginNestedMessage<::protozero::Message>(4));
  }

  // Field 5: layer_stack_space_rect
  if (_has_field_[5]) {
    (*layer_stack_space_rect_).Serialize(msg->BeginNestedMessage<::protozero::Message>(5));
  }

  // Field 6: transform
  if (_has_field_[6]) {
    (*transform_).Serialize(msg->BeginNestedMessage<::protozero::Message>(6));
  }

  // Field 7: is_virtual
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(7, is_virtual_, msg);
  }

  // Field 8: dpi_x
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeFixed(8, dpi_x_, msg);
  }

  // Field 9: dpi_y
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeFixed(9, dpi_y_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayersProto::LayersProto() = default;
LayersProto::~LayersProto() = default;
LayersProto::LayersProto(const LayersProto&) = default;
LayersProto& LayersProto::operator=(const LayersProto&) = default;
LayersProto::LayersProto(LayersProto&&) noexcept = default;
LayersProto& LayersProto::operator=(LayersProto&&) = default;

bool LayersProto::operator==(const LayersProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(layers_, other.layers_);
}

int LayersProto::layers_size() const { return static_cast<int>(layers_.size()); }
void LayersProto::clear_layers() { layers_.clear(); }
LayerProto* LayersProto::add_layers() { layers_.emplace_back(); return &layers_.back(); }
bool LayersProto::ParseFromArray(const void* raw, size_t size) {
  layers_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* layers */:
        layers_.emplace_back();
        layers_.back().ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayersProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayersProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayersProto::Serialize(::protozero::Message* msg) const {
  // Field 1: layers
  for (auto& it : layers_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayersSnapshotProto::LayersSnapshotProto() = default;
LayersSnapshotProto::~LayersSnapshotProto() = default;
LayersSnapshotProto::LayersSnapshotProto(const LayersSnapshotProto&) = default;
LayersSnapshotProto& LayersSnapshotProto::operator=(const LayersSnapshotProto&) = default;
LayersSnapshotProto::LayersSnapshotProto(LayersSnapshotProto&&) noexcept = default;
LayersSnapshotProto& LayersSnapshotProto::operator=(LayersSnapshotProto&&) = default;

bool LayersSnapshotProto::operator==(const LayersSnapshotProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(elapsed_realtime_nanos_, other.elapsed_realtime_nanos_)
   && ::protozero::internal::gen_helpers::EqualsField(where_, other.where_)
   && ::protozero::internal::gen_helpers::EqualsField(layers_, other.layers_)
   && ::protozero::internal::gen_helpers::EqualsField(hwc_blob_, other.hwc_blob_)
   && ::protozero::internal::gen_helpers::EqualsField(excludes_composition_state_, other.excludes_composition_state_)
   && ::protozero::internal::gen_helpers::EqualsField(missed_entries_, other.missed_entries_)
   && ::protozero::internal::gen_helpers::EqualsField(displays_, other.displays_)
   && ::protozero::internal::gen_helpers::EqualsField(vsync_id_, other.vsync_id_);
}

int LayersSnapshotProto::displays_size() const { return static_cast<int>(displays_.size()); }
void LayersSnapshotProto::clear_displays() { displays_.clear(); }
DisplayProto* LayersSnapshotProto::add_displays() { displays_.emplace_back(); return &displays_.back(); }
bool LayersSnapshotProto::ParseFromArray(const void* raw, size_t size) {
  displays_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* elapsed_realtime_nanos */:
        field.get(&elapsed_realtime_nanos_);
        break;
      case 2 /* where */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &where_);
        break;
      case 3 /* layers */:
        (*layers_).ParseFromArray(field.data(), field.size());
        break;
      case 4 /* hwc_blob */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &hwc_blob_);
        break;
      case 5 /* excludes_composition_state */:
        field.get(&excludes_composition_state_);
        break;
      case 6 /* missed_entries */:
        field.get(&missed_entries_);
        break;
      case 7 /* displays */:
        displays_.emplace_back();
        displays_.back().ParseFromArray(field.data(), field.size());
        break;
      case 8 /* vsync_id */:
        field.get(&vsync_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayersSnapshotProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayersSnapshotProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayersSnapshotProto::Serialize(::protozero::Message* msg) const {
  // Field 1: elapsed_realtime_nanos
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, elapsed_realtime_nanos_, msg);
  }

  // Field 2: where
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, where_, msg);
  }

  // Field 3: layers
  if (_has_field_[3]) {
    (*layers_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  // Field 4: hwc_blob
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, hwc_blob_, msg);
  }

  // Field 5: excludes_composition_state
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(5, excludes_composition_state_, msg);
  }

  // Field 6: missed_entries
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, missed_entries_, msg);
  }

  // Field 7: displays
  for (auto& it : displays_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(7));
  }

  // Field 8: vsync_id
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, vsync_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


LayersTraceFileProto::LayersTraceFileProto() = default;
LayersTraceFileProto::~LayersTraceFileProto() = default;
LayersTraceFileProto::LayersTraceFileProto(const LayersTraceFileProto&) = default;
LayersTraceFileProto& LayersTraceFileProto::operator=(const LayersTraceFileProto&) = default;
LayersTraceFileProto::LayersTraceFileProto(LayersTraceFileProto&&) noexcept = default;
LayersTraceFileProto& LayersTraceFileProto::operator=(LayersTraceFileProto&&) = default;

bool LayersTraceFileProto::operator==(const LayersTraceFileProto& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(magic_number_, other.magic_number_)
   && ::protozero::internal::gen_helpers::EqualsField(entry_, other.entry_)
   && ::protozero::internal::gen_helpers::EqualsField(real_to_elapsed_time_offset_nanos_, other.real_to_elapsed_time_offset_nanos_);
}

int LayersTraceFileProto::entry_size() const { return static_cast<int>(entry_.size()); }
void LayersTraceFileProto::clear_entry() { entry_.clear(); }
LayersSnapshotProto* LayersTraceFileProto::add_entry() { entry_.emplace_back(); return &entry_.back(); }
bool LayersTraceFileProto::ParseFromArray(const void* raw, size_t size) {
  entry_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* magic_number */:
        field.get(&magic_number_);
        break;
      case 2 /* entry */:
        entry_.emplace_back();
        entry_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* real_to_elapsed_time_offset_nanos */:
        field.get(&real_to_elapsed_time_offset_nanos_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LayersTraceFileProto::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LayersTraceFileProto::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LayersTraceFileProto::Serialize(::protozero::Message* msg) const {
  // Field 1: magic_number
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeFixed(1, magic_number_, msg);
  }

  // Field 2: entry
  for (auto& it : entry_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: real_to_elapsed_time_offset_nanos
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeFixed(3, real_to_elapsed_time_offset_nanos_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
