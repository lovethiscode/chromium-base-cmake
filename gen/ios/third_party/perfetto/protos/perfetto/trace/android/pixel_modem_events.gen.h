// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PIXEL_MODEM_EVENTS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PIXEL_MODEM_EVENTS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class PixelModemTokenDatabase;
class PixelModemEvents;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT PixelModemTokenDatabase : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDatabaseFieldNumber = 1,
  };

  PixelModemTokenDatabase();
  ~PixelModemTokenDatabase() override;
  PixelModemTokenDatabase(PixelModemTokenDatabase&&) noexcept;
  PixelModemTokenDatabase& operator=(PixelModemTokenDatabase&&);
  PixelModemTokenDatabase(const PixelModemTokenDatabase&);
  PixelModemTokenDatabase& operator=(const PixelModemTokenDatabase&);
  bool operator==(const PixelModemTokenDatabase&) const;
  bool operator!=(const PixelModemTokenDatabase& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_database() const { return _has_field_[1]; }
  const std::string& database() const { return database_; }
  void set_database(const std::string& value) { database_ = value; _has_field_.set(1); }
  void set_database(const void* p, size_t s) { database_.assign(reinterpret_cast<const char*>(p), s); _has_field_.set(1); }

 private:
  std::string database_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT PixelModemEvents : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEventsFieldNumber = 1,
    kEventTimeNanosFieldNumber = 2,
  };

  PixelModemEvents();
  ~PixelModemEvents() override;
  PixelModemEvents(PixelModemEvents&&) noexcept;
  PixelModemEvents& operator=(PixelModemEvents&&);
  PixelModemEvents(const PixelModemEvents&);
  PixelModemEvents& operator=(const PixelModemEvents&);
  bool operator==(const PixelModemEvents&) const;
  bool operator!=(const PixelModemEvents& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<std::string>& events() const { return events_; }
  std::vector<std::string>* mutable_events() { return &events_; }
  int events_size() const { return static_cast<int>(events_.size()); }
  void clear_events() { events_.clear(); }
  void add_events(std::string value) { events_.emplace_back(value); }
  std::string* add_events() { events_.emplace_back(); return &events_.back(); }

  const std::vector<uint64_t>& event_time_nanos() const { return event_time_nanos_; }
  std::vector<uint64_t>* mutable_event_time_nanos() { return &event_time_nanos_; }
  int event_time_nanos_size() const { return static_cast<int>(event_time_nanos_.size()); }
  void clear_event_time_nanos() { event_time_nanos_.clear(); }
  void add_event_time_nanos(uint64_t value) { event_time_nanos_.emplace_back(value); }
  uint64_t* add_event_time_nanos() { event_time_nanos_.emplace_back(); return &event_time_nanos_.back(); }

 private:
  std::vector<std::string> events_;
  std::vector<uint64_t> event_time_nanos_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PIXEL_MODEM_EVENTS_PROTO_CPP_H_
