#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/packages_list.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

PackagesList::PackagesList() = default;
PackagesList::~PackagesList() = default;
PackagesList::PackagesList(const PackagesList&) = default;
PackagesList& PackagesList::operator=(const PackagesList&) = default;
PackagesList::PackagesList(PackagesList&&) noexcept = default;
PackagesList& PackagesList::operator=(PackagesList&&) = default;

bool PackagesList::operator==(const PackagesList& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(packages_, other.packages_)
   && ::protozero::internal::gen_helpers::EqualsField(parse_error_, other.parse_error_)
   && ::protozero::internal::gen_helpers::EqualsField(read_error_, other.read_error_);
}

int PackagesList::packages_size() const { return static_cast<int>(packages_.size()); }
void PackagesList::clear_packages() { packages_.clear(); }
PackagesList_PackageInfo* PackagesList::add_packages() { packages_.emplace_back(); return &packages_.back(); }
bool PackagesList::ParseFromArray(const void* raw, size_t size) {
  packages_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* packages */:
        packages_.emplace_back();
        packages_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* parse_error */:
        field.get(&parse_error_);
        break;
      case 3 /* read_error */:
        field.get(&read_error_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PackagesList::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PackagesList::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PackagesList::Serialize(::protozero::Message* msg) const {
  // Field 1: packages
  for (auto& it : packages_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: parse_error
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(2, parse_error_, msg);
  }

  // Field 3: read_error
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(3, read_error_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


PackagesList_PackageInfo::PackagesList_PackageInfo() = default;
PackagesList_PackageInfo::~PackagesList_PackageInfo() = default;
PackagesList_PackageInfo::PackagesList_PackageInfo(const PackagesList_PackageInfo&) = default;
PackagesList_PackageInfo& PackagesList_PackageInfo::operator=(const PackagesList_PackageInfo&) = default;
PackagesList_PackageInfo::PackagesList_PackageInfo(PackagesList_PackageInfo&&) noexcept = default;
PackagesList_PackageInfo& PackagesList_PackageInfo::operator=(PackagesList_PackageInfo&&) = default;

bool PackagesList_PackageInfo::operator==(const PackagesList_PackageInfo& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(uid_, other.uid_)
   && ::protozero::internal::gen_helpers::EqualsField(debuggable_, other.debuggable_)
   && ::protozero::internal::gen_helpers::EqualsField(profileable_from_shell_, other.profileable_from_shell_)
   && ::protozero::internal::gen_helpers::EqualsField(version_code_, other.version_code_);
}

bool PackagesList_PackageInfo::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* uid */:
        field.get(&uid_);
        break;
      case 3 /* debuggable */:
        field.get(&debuggable_);
        break;
      case 4 /* profileable_from_shell */:
        field.get(&profileable_from_shell_);
        break;
      case 5 /* version_code */:
        field.get(&version_code_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PackagesList_PackageInfo::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PackagesList_PackageInfo::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PackagesList_PackageInfo::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: uid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, uid_, msg);
  }

  // Field 3: debuggable
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(3, debuggable_, msg);
  }

  // Field 4: profileable_from_shell
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(4, profileable_from_shell_, msg);
  }

  // Field 5: version_code
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, version_code_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
