// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_SYSTEM_PROPERTY_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_SYSTEM_PROPERTY_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class AndroidSystemProperty;
class AndroidSystemProperty_PropertyValue;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT AndroidSystemProperty : public ::protozero::CppMessageObj {
 public:
  using PropertyValue = AndroidSystemProperty_PropertyValue;
  enum FieldNumbers {
    kValuesFieldNumber = 1,
  };

  AndroidSystemProperty();
  ~AndroidSystemProperty() override;
  AndroidSystemProperty(AndroidSystemProperty&&) noexcept;
  AndroidSystemProperty& operator=(AndroidSystemProperty&&);
  AndroidSystemProperty(const AndroidSystemProperty&);
  AndroidSystemProperty& operator=(const AndroidSystemProperty&);
  bool operator==(const AndroidSystemProperty&) const;
  bool operator!=(const AndroidSystemProperty& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<AndroidSystemProperty_PropertyValue>& values() const { return values_; }
  std::vector<AndroidSystemProperty_PropertyValue>* mutable_values() { return &values_; }
  int values_size() const;
  void clear_values();
  AndroidSystemProperty_PropertyValue* add_values();

 private:
  std::vector<AndroidSystemProperty_PropertyValue> values_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidSystemProperty_PropertyValue : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  AndroidSystemProperty_PropertyValue();
  ~AndroidSystemProperty_PropertyValue() override;
  AndroidSystemProperty_PropertyValue(AndroidSystemProperty_PropertyValue&&) noexcept;
  AndroidSystemProperty_PropertyValue& operator=(AndroidSystemProperty_PropertyValue&&);
  AndroidSystemProperty_PropertyValue(const AndroidSystemProperty_PropertyValue&);
  AndroidSystemProperty_PropertyValue& operator=(const AndroidSystemProperty_PropertyValue&);
  bool operator==(const AndroidSystemProperty_PropertyValue&) const;
  bool operator!=(const AndroidSystemProperty_PropertyValue& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_name() const { return _has_field_[1]; }
  const std::string& name() const { return name_; }
  void set_name(const std::string& value) { name_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  std::string name_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_SYSTEM_PROPERTY_PROTO_CPP_H_
