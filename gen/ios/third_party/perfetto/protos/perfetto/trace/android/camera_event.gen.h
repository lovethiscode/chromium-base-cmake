// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_CAMERA_EVENT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_CAMERA_EVENT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class AndroidCameraSessionStats;
class AndroidCameraSessionStats_CameraGraph;
class AndroidCameraSessionStats_CameraGraph_CameraEdge;
class AndroidCameraSessionStats_CameraGraph_CameraNode;
class AndroidCameraFrameEvent;
class AndroidCameraFrameEvent_CameraNodeProcessingDetails;
enum AndroidCameraFrameEvent_CaptureResultStatus : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {
enum AndroidCameraFrameEvent_CaptureResultStatus : int {
  AndroidCameraFrameEvent_CaptureResultStatus_STATUS_UNSPECIFIED = 0,
  AndroidCameraFrameEvent_CaptureResultStatus_STATUS_OK = 1,
  AndroidCameraFrameEvent_CaptureResultStatus_STATUS_EARLY_METADATA_ERROR = 2,
  AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FINAL_METADATA_ERROR = 3,
  AndroidCameraFrameEvent_CaptureResultStatus_STATUS_BUFFER_ERROR = 4,
  AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FLUSH_ERROR = 5,
};

class PERFETTO_EXPORT_COMPONENT AndroidCameraSessionStats : public ::protozero::CppMessageObj {
 public:
  using CameraGraph = AndroidCameraSessionStats_CameraGraph;
  enum FieldNumbers {
    kSessionIdFieldNumber = 1,
    kGraphFieldNumber = 2,
  };

  AndroidCameraSessionStats();
  ~AndroidCameraSessionStats() override;
  AndroidCameraSessionStats(AndroidCameraSessionStats&&) noexcept;
  AndroidCameraSessionStats& operator=(AndroidCameraSessionStats&&);
  AndroidCameraSessionStats(const AndroidCameraSessionStats&);
  AndroidCameraSessionStats& operator=(const AndroidCameraSessionStats&);
  bool operator==(const AndroidCameraSessionStats&) const;
  bool operator!=(const AndroidCameraSessionStats& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_session_id() const { return _has_field_[1]; }
  uint64_t session_id() const { return session_id_; }
  void set_session_id(uint64_t value) { session_id_ = value; _has_field_.set(1); }

  bool has_graph() const { return _has_field_[2]; }
  const AndroidCameraSessionStats_CameraGraph& graph() const { return *graph_; }
  AndroidCameraSessionStats_CameraGraph* mutable_graph() { _has_field_.set(2); return graph_.get(); }

 private:
  uint64_t session_id_{};
  ::protozero::CopyablePtr<AndroidCameraSessionStats_CameraGraph> graph_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidCameraSessionStats_CameraGraph : public ::protozero::CppMessageObj {
 public:
  using CameraNode = AndroidCameraSessionStats_CameraGraph_CameraNode;
  using CameraEdge = AndroidCameraSessionStats_CameraGraph_CameraEdge;
  enum FieldNumbers {
    kNodesFieldNumber = 1,
    kEdgesFieldNumber = 2,
  };

  AndroidCameraSessionStats_CameraGraph();
  ~AndroidCameraSessionStats_CameraGraph() override;
  AndroidCameraSessionStats_CameraGraph(AndroidCameraSessionStats_CameraGraph&&) noexcept;
  AndroidCameraSessionStats_CameraGraph& operator=(AndroidCameraSessionStats_CameraGraph&&);
  AndroidCameraSessionStats_CameraGraph(const AndroidCameraSessionStats_CameraGraph&);
  AndroidCameraSessionStats_CameraGraph& operator=(const AndroidCameraSessionStats_CameraGraph&);
  bool operator==(const AndroidCameraSessionStats_CameraGraph&) const;
  bool operator!=(const AndroidCameraSessionStats_CameraGraph& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<AndroidCameraSessionStats_CameraGraph_CameraNode>& nodes() const { return nodes_; }
  std::vector<AndroidCameraSessionStats_CameraGraph_CameraNode>* mutable_nodes() { return &nodes_; }
  int nodes_size() const;
  void clear_nodes();
  AndroidCameraSessionStats_CameraGraph_CameraNode* add_nodes();

  const std::vector<AndroidCameraSessionStats_CameraGraph_CameraEdge>& edges() const { return edges_; }
  std::vector<AndroidCameraSessionStats_CameraGraph_CameraEdge>* mutable_edges() { return &edges_; }
  int edges_size() const;
  void clear_edges();
  AndroidCameraSessionStats_CameraGraph_CameraEdge* add_edges();

 private:
  std::vector<AndroidCameraSessionStats_CameraGraph_CameraNode> nodes_;
  std::vector<AndroidCameraSessionStats_CameraGraph_CameraEdge> edges_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidCameraSessionStats_CameraGraph_CameraEdge : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kOutputNodeIdFieldNumber = 1,
    kOutputIdFieldNumber = 2,
    kInputNodeIdFieldNumber = 3,
    kInputIdFieldNumber = 4,
    kVendorDataVersionFieldNumber = 5,
    kVendorDataFieldNumber = 6,
  };

  AndroidCameraSessionStats_CameraGraph_CameraEdge();
  ~AndroidCameraSessionStats_CameraGraph_CameraEdge() override;
  AndroidCameraSessionStats_CameraGraph_CameraEdge(AndroidCameraSessionStats_CameraGraph_CameraEdge&&) noexcept;
  AndroidCameraSessionStats_CameraGraph_CameraEdge& operator=(AndroidCameraSessionStats_CameraGraph_CameraEdge&&);
  AndroidCameraSessionStats_CameraGraph_CameraEdge(const AndroidCameraSessionStats_CameraGraph_CameraEdge&);
  AndroidCameraSessionStats_CameraGraph_CameraEdge& operator=(const AndroidCameraSessionStats_CameraGraph_CameraEdge&);
  bool operator==(const AndroidCameraSessionStats_CameraGraph_CameraEdge&) const;
  bool operator!=(const AndroidCameraSessionStats_CameraGraph_CameraEdge& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_output_node_id() const { return _has_field_[1]; }
  int64_t output_node_id() const { return output_node_id_; }
  void set_output_node_id(int64_t value) { output_node_id_ = value; _has_field_.set(1); }

  bool has_output_id() const { return _has_field_[2]; }
  int64_t output_id() const { return output_id_; }
  void set_output_id(int64_t value) { output_id_ = value; _has_field_.set(2); }

  bool has_input_node_id() const { return _has_field_[3]; }
  int64_t input_node_id() const { return input_node_id_; }
  void set_input_node_id(int64_t value) { input_node_id_ = value; _has_field_.set(3); }

  bool has_input_id() const { return _has_field_[4]; }
  int64_t input_id() const { return input_id_; }
  void set_input_id(int64_t value) { input_id_ = value; _has_field_.set(4); }

  bool has_vendor_data_version() const { return _has_field_[5]; }
  int32_t vendor_data_version() const { return vendor_data_version_; }
  void set_vendor_data_version(int32_t value) { vendor_data_version_ = value; _has_field_.set(5); }

  bool has_vendor_data() const { return _has_field_[6]; }
  const std::string& vendor_data() const { return vendor_data_; }
  void set_vendor_data(const std::string& value) { vendor_data_ = value; _has_field_.set(6); }
  void set_vendor_data(const void* p, size_t s) { vendor_data_.assign(reinterpret_cast<const char*>(p), s); _has_field_.set(6); }

 private:
  int64_t output_node_id_{};
  int64_t output_id_{};
  int64_t input_node_id_{};
  int64_t input_id_{};
  int32_t vendor_data_version_{};
  std::string vendor_data_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidCameraSessionStats_CameraGraph_CameraNode : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNodeIdFieldNumber = 1,
    kInputIdsFieldNumber = 2,
    kOutputIdsFieldNumber = 3,
    kVendorDataVersionFieldNumber = 4,
    kVendorDataFieldNumber = 5,
  };

  AndroidCameraSessionStats_CameraGraph_CameraNode();
  ~AndroidCameraSessionStats_CameraGraph_CameraNode() override;
  AndroidCameraSessionStats_CameraGraph_CameraNode(AndroidCameraSessionStats_CameraGraph_CameraNode&&) noexcept;
  AndroidCameraSessionStats_CameraGraph_CameraNode& operator=(AndroidCameraSessionStats_CameraGraph_CameraNode&&);
  AndroidCameraSessionStats_CameraGraph_CameraNode(const AndroidCameraSessionStats_CameraGraph_CameraNode&);
  AndroidCameraSessionStats_CameraGraph_CameraNode& operator=(const AndroidCameraSessionStats_CameraGraph_CameraNode&);
  bool operator==(const AndroidCameraSessionStats_CameraGraph_CameraNode&) const;
  bool operator!=(const AndroidCameraSessionStats_CameraGraph_CameraNode& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_node_id() const { return _has_field_[1]; }
  int64_t node_id() const { return node_id_; }
  void set_node_id(int64_t value) { node_id_ = value; _has_field_.set(1); }

  const std::vector<int64_t>& input_ids() const { return input_ids_; }
  std::vector<int64_t>* mutable_input_ids() { return &input_ids_; }
  int input_ids_size() const { return static_cast<int>(input_ids_.size()); }
  void clear_input_ids() { input_ids_.clear(); }
  void add_input_ids(int64_t value) { input_ids_.emplace_back(value); }
  int64_t* add_input_ids() { input_ids_.emplace_back(); return &input_ids_.back(); }

  const std::vector<int64_t>& output_ids() const { return output_ids_; }
  std::vector<int64_t>* mutable_output_ids() { return &output_ids_; }
  int output_ids_size() const { return static_cast<int>(output_ids_.size()); }
  void clear_output_ids() { output_ids_.clear(); }
  void add_output_ids(int64_t value) { output_ids_.emplace_back(value); }
  int64_t* add_output_ids() { output_ids_.emplace_back(); return &output_ids_.back(); }

  bool has_vendor_data_version() const { return _has_field_[4]; }
  int32_t vendor_data_version() const { return vendor_data_version_; }
  void set_vendor_data_version(int32_t value) { vendor_data_version_ = value; _has_field_.set(4); }

  bool has_vendor_data() const { return _has_field_[5]; }
  const std::string& vendor_data() const { return vendor_data_; }
  void set_vendor_data(const std::string& value) { vendor_data_ = value; _has_field_.set(5); }
  void set_vendor_data(const void* p, size_t s) { vendor_data_.assign(reinterpret_cast<const char*>(p), s); _has_field_.set(5); }

 private:
  int64_t node_id_{};
  std::vector<int64_t> input_ids_;
  std::vector<int64_t> output_ids_;
  int32_t vendor_data_version_{};
  std::string vendor_data_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidCameraFrameEvent : public ::protozero::CppMessageObj {
 public:
  using CameraNodeProcessingDetails = AndroidCameraFrameEvent_CameraNodeProcessingDetails;
  using CaptureResultStatus = AndroidCameraFrameEvent_CaptureResultStatus;
  static constexpr auto STATUS_UNSPECIFIED = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_UNSPECIFIED;
  static constexpr auto STATUS_OK = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_OK;
  static constexpr auto STATUS_EARLY_METADATA_ERROR = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_EARLY_METADATA_ERROR;
  static constexpr auto STATUS_FINAL_METADATA_ERROR = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FINAL_METADATA_ERROR;
  static constexpr auto STATUS_BUFFER_ERROR = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_BUFFER_ERROR;
  static constexpr auto STATUS_FLUSH_ERROR = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FLUSH_ERROR;
  static constexpr auto CaptureResultStatus_MIN = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_UNSPECIFIED;
  static constexpr auto CaptureResultStatus_MAX = AndroidCameraFrameEvent_CaptureResultStatus_STATUS_FLUSH_ERROR;
  enum FieldNumbers {
    kSessionIdFieldNumber = 1,
    kCameraIdFieldNumber = 2,
    kFrameNumberFieldNumber = 3,
    kRequestIdFieldNumber = 4,
    kRequestReceivedNsFieldNumber = 5,
    kRequestProcessingStartedNsFieldNumber = 6,
    kStartOfExposureNsFieldNumber = 7,
    kStartOfFrameNsFieldNumber = 8,
    kResponsesAllSentNsFieldNumber = 9,
    kCaptureResultStatusFieldNumber = 10,
    kSkippedSensorFramesFieldNumber = 11,
    kCaptureIntentFieldNumber = 12,
    kNumStreamsFieldNumber = 13,
    kNodeProcessingDetailsFieldNumber = 14,
    kVendorDataVersionFieldNumber = 15,
    kVendorDataFieldNumber = 16,
  };

  AndroidCameraFrameEvent();
  ~AndroidCameraFrameEvent() override;
  AndroidCameraFrameEvent(AndroidCameraFrameEvent&&) noexcept;
  AndroidCameraFrameEvent& operator=(AndroidCameraFrameEvent&&);
  AndroidCameraFrameEvent(const AndroidCameraFrameEvent&);
  AndroidCameraFrameEvent& operator=(const AndroidCameraFrameEvent&);
  bool operator==(const AndroidCameraFrameEvent&) const;
  bool operator!=(const AndroidCameraFrameEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_session_id() const { return _has_field_[1]; }
  uint64_t session_id() const { return session_id_; }
  void set_session_id(uint64_t value) { session_id_ = value; _has_field_.set(1); }

  bool has_camera_id() const { return _has_field_[2]; }
  uint32_t camera_id() const { return camera_id_; }
  void set_camera_id(uint32_t value) { camera_id_ = value; _has_field_.set(2); }

  bool has_frame_number() const { return _has_field_[3]; }
  int64_t frame_number() const { return frame_number_; }
  void set_frame_number(int64_t value) { frame_number_ = value; _has_field_.set(3); }

  bool has_request_id() const { return _has_field_[4]; }
  int64_t request_id() const { return request_id_; }
  void set_request_id(int64_t value) { request_id_ = value; _has_field_.set(4); }

  bool has_request_received_ns() const { return _has_field_[5]; }
  int64_t request_received_ns() const { return request_received_ns_; }
  void set_request_received_ns(int64_t value) { request_received_ns_ = value; _has_field_.set(5); }

  bool has_request_processing_started_ns() const { return _has_field_[6]; }
  int64_t request_processing_started_ns() const { return request_processing_started_ns_; }
  void set_request_processing_started_ns(int64_t value) { request_processing_started_ns_ = value; _has_field_.set(6); }

  bool has_start_of_exposure_ns() const { return _has_field_[7]; }
  int64_t start_of_exposure_ns() const { return start_of_exposure_ns_; }
  void set_start_of_exposure_ns(int64_t value) { start_of_exposure_ns_ = value; _has_field_.set(7); }

  bool has_start_of_frame_ns() const { return _has_field_[8]; }
  int64_t start_of_frame_ns() const { return start_of_frame_ns_; }
  void set_start_of_frame_ns(int64_t value) { start_of_frame_ns_ = value; _has_field_.set(8); }

  bool has_responses_all_sent_ns() const { return _has_field_[9]; }
  int64_t responses_all_sent_ns() const { return responses_all_sent_ns_; }
  void set_responses_all_sent_ns(int64_t value) { responses_all_sent_ns_ = value; _has_field_.set(9); }

  bool has_capture_result_status() const { return _has_field_[10]; }
  AndroidCameraFrameEvent_CaptureResultStatus capture_result_status() const { return capture_result_status_; }
  void set_capture_result_status(AndroidCameraFrameEvent_CaptureResultStatus value) { capture_result_status_ = value; _has_field_.set(10); }

  bool has_skipped_sensor_frames() const { return _has_field_[11]; }
  int32_t skipped_sensor_frames() const { return skipped_sensor_frames_; }
  void set_skipped_sensor_frames(int32_t value) { skipped_sensor_frames_ = value; _has_field_.set(11); }

  bool has_capture_intent() const { return _has_field_[12]; }
  int32_t capture_intent() const { return capture_intent_; }
  void set_capture_intent(int32_t value) { capture_intent_ = value; _has_field_.set(12); }

  bool has_num_streams() const { return _has_field_[13]; }
  int32_t num_streams() const { return num_streams_; }
  void set_num_streams(int32_t value) { num_streams_ = value; _has_field_.set(13); }

  const std::vector<AndroidCameraFrameEvent_CameraNodeProcessingDetails>& node_processing_details() const { return node_processing_details_; }
  std::vector<AndroidCameraFrameEvent_CameraNodeProcessingDetails>* mutable_node_processing_details() { return &node_processing_details_; }
  int node_processing_details_size() const;
  void clear_node_processing_details();
  AndroidCameraFrameEvent_CameraNodeProcessingDetails* add_node_processing_details();

  bool has_vendor_data_version() const { return _has_field_[15]; }
  int32_t vendor_data_version() const { return vendor_data_version_; }
  void set_vendor_data_version(int32_t value) { vendor_data_version_ = value; _has_field_.set(15); }

  bool has_vendor_data() const { return _has_field_[16]; }
  const std::string& vendor_data() const { return vendor_data_; }
  void set_vendor_data(const std::string& value) { vendor_data_ = value; _has_field_.set(16); }
  void set_vendor_data(const void* p, size_t s) { vendor_data_.assign(reinterpret_cast<const char*>(p), s); _has_field_.set(16); }

 private:
  uint64_t session_id_{};
  uint32_t camera_id_{};
  int64_t frame_number_{};
  int64_t request_id_{};
  int64_t request_received_ns_{};
  int64_t request_processing_started_ns_{};
  int64_t start_of_exposure_ns_{};
  int64_t start_of_frame_ns_{};
  int64_t responses_all_sent_ns_{};
  AndroidCameraFrameEvent_CaptureResultStatus capture_result_status_{};
  int32_t skipped_sensor_frames_{};
  int32_t capture_intent_{};
  int32_t num_streams_{};
  std::vector<AndroidCameraFrameEvent_CameraNodeProcessingDetails> node_processing_details_;
  int32_t vendor_data_version_{};
  std::string vendor_data_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<17> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT AndroidCameraFrameEvent_CameraNodeProcessingDetails : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kNodeIdFieldNumber = 1,
    kStartProcessingNsFieldNumber = 2,
    kEndProcessingNsFieldNumber = 3,
    kSchedulingLatencyNsFieldNumber = 4,
  };

  AndroidCameraFrameEvent_CameraNodeProcessingDetails();
  ~AndroidCameraFrameEvent_CameraNodeProcessingDetails() override;
  AndroidCameraFrameEvent_CameraNodeProcessingDetails(AndroidCameraFrameEvent_CameraNodeProcessingDetails&&) noexcept;
  AndroidCameraFrameEvent_CameraNodeProcessingDetails& operator=(AndroidCameraFrameEvent_CameraNodeProcessingDetails&&);
  AndroidCameraFrameEvent_CameraNodeProcessingDetails(const AndroidCameraFrameEvent_CameraNodeProcessingDetails&);
  AndroidCameraFrameEvent_CameraNodeProcessingDetails& operator=(const AndroidCameraFrameEvent_CameraNodeProcessingDetails&);
  bool operator==(const AndroidCameraFrameEvent_CameraNodeProcessingDetails&) const;
  bool operator!=(const AndroidCameraFrameEvent_CameraNodeProcessingDetails& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_node_id() const { return _has_field_[1]; }
  int64_t node_id() const { return node_id_; }
  void set_node_id(int64_t value) { node_id_ = value; _has_field_.set(1); }

  bool has_start_processing_ns() const { return _has_field_[2]; }
  int64_t start_processing_ns() const { return start_processing_ns_; }
  void set_start_processing_ns(int64_t value) { start_processing_ns_ = value; _has_field_.set(2); }

  bool has_end_processing_ns() const { return _has_field_[3]; }
  int64_t end_processing_ns() const { return end_processing_ns_; }
  void set_end_processing_ns(int64_t value) { end_processing_ns_ = value; _has_field_.set(3); }

  bool has_scheduling_latency_ns() const { return _has_field_[4]; }
  int64_t scheduling_latency_ns() const { return scheduling_latency_ns_; }
  void set_scheduling_latency_ns(int64_t value) { scheduling_latency_ns_ = value; _has_field_.set(4); }

 private:
  int64_t node_id_{};
  int64_t start_processing_ns_{};
  int64_t end_processing_ns_{};
  int64_t scheduling_latency_ns_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_CAMERA_EVENT_PROTO_CPP_H_
