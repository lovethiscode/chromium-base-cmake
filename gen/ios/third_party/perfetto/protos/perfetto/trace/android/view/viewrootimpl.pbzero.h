// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_VIEWROOTIMPL_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_VIEWROOTIMPL_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class DisplayCutoutProto;
class RectProto;
class WindowLayoutParamsProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class ViewRootImplProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/17, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ViewRootImplProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ViewRootImplProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ViewRootImplProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_view() const { return at<1>().valid(); }
  ::protozero::ConstChars view() const { return at<1>().as_string(); }
  bool has_display_id() const { return at<2>().valid(); }
  int32_t display_id() const { return at<2>().as_int32(); }
  bool has_app_visible() const { return at<3>().valid(); }
  bool app_visible() const { return at<3>().as_bool(); }
  bool has_width() const { return at<4>().valid(); }
  int32_t width() const { return at<4>().as_int32(); }
  bool has_height() const { return at<5>().valid(); }
  int32_t height() const { return at<5>().as_int32(); }
  bool has_is_animating() const { return at<6>().valid(); }
  bool is_animating() const { return at<6>().as_bool(); }
  bool has_visible_rect() const { return at<7>().valid(); }
  ::protozero::ConstBytes visible_rect() const { return at<7>().as_bytes(); }
  bool has_is_drawing() const { return at<8>().valid(); }
  bool is_drawing() const { return at<8>().as_bool(); }
  bool has_added() const { return at<9>().valid(); }
  bool added() const { return at<9>().as_bool(); }
  bool has_win_frame() const { return at<10>().valid(); }
  ::protozero::ConstBytes win_frame() const { return at<10>().as_bytes(); }
  bool has_pending_display_cutout() const { return at<11>().valid(); }
  ::protozero::ConstBytes pending_display_cutout() const { return at<11>().as_bytes(); }
  bool has_last_window_insets() const { return at<12>().valid(); }
  ::protozero::ConstChars last_window_insets() const { return at<12>().as_string(); }
  bool has_soft_input_mode() const { return at<13>().valid(); }
  ::protozero::ConstChars soft_input_mode() const { return at<13>().as_string(); }
  bool has_scroll_y() const { return at<14>().valid(); }
  int32_t scroll_y() const { return at<14>().as_int32(); }
  bool has_cur_scroll_y() const { return at<15>().valid(); }
  int32_t cur_scroll_y() const { return at<15>().as_int32(); }
  bool has_removed() const { return at<16>().valid(); }
  bool removed() const { return at<16>().as_bool(); }
  bool has_window_attributes() const { return at<17>().valid(); }
  ::protozero::ConstBytes window_attributes() const { return at<17>().as_bytes(); }
};

class ViewRootImplProto : public ::protozero::Message {
 public:
  using Decoder = ViewRootImplProto_Decoder;
  enum : int32_t {
    kViewFieldNumber = 1,
    kDisplayIdFieldNumber = 2,
    kAppVisibleFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kIsAnimatingFieldNumber = 6,
    kVisibleRectFieldNumber = 7,
    kIsDrawingFieldNumber = 8,
    kAddedFieldNumber = 9,
    kWinFrameFieldNumber = 10,
    kPendingDisplayCutoutFieldNumber = 11,
    kLastWindowInsetsFieldNumber = 12,
    kSoftInputModeFieldNumber = 13,
    kScrollYFieldNumber = 14,
    kCurScrollYFieldNumber = 15,
    kRemovedFieldNumber = 16,
    kWindowAttributesFieldNumber = 17,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ViewRootImplProto"; }


  using FieldMetadata_View =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ViewRootImplProto>;

  static constexpr FieldMetadata_View kView{};
  void set_view(const char* data, size_t size) {
    AppendBytes(FieldMetadata_View::kFieldId, data, size);
  }
  void set_view(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_View::kFieldId, chars.data, chars.size);
  }
  void set_view(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_View::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DisplayId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ViewRootImplProto>;

  static constexpr FieldMetadata_DisplayId kDisplayId{};
  void set_display_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DisplayId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AppVisible =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ViewRootImplProto>;

  static constexpr FieldMetadata_AppVisible kAppVisible{};
  void set_app_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_AppVisible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Width =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ViewRootImplProto>;

  static constexpr FieldMetadata_Width kWidth{};
  void set_width(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Width::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Height =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ViewRootImplProto>;

  static constexpr FieldMetadata_Height kHeight{};
  void set_height(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Height::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsAnimating =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ViewRootImplProto>;

  static constexpr FieldMetadata_IsAnimating kIsAnimating{};
  void set_is_animating(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsAnimating::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VisibleRect =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      ViewRootImplProto>;

  static constexpr FieldMetadata_VisibleRect kVisibleRect{};
  template <typename T = RectProto> T* set_visible_rect() {
    return BeginNestedMessage<T>(7);
  }


  using FieldMetadata_IsDrawing =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ViewRootImplProto>;

  static constexpr FieldMetadata_IsDrawing kIsDrawing{};
  void set_is_drawing(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsDrawing::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Added =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ViewRootImplProto>;

  static constexpr FieldMetadata_Added kAdded{};
  void set_added(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_Added::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WinFrame =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      ViewRootImplProto>;

  static constexpr FieldMetadata_WinFrame kWinFrame{};
  template <typename T = RectProto> T* set_win_frame() {
    return BeginNestedMessage<T>(10);
  }


  using FieldMetadata_PendingDisplayCutout =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DisplayCutoutProto,
      ViewRootImplProto>;

  static constexpr FieldMetadata_PendingDisplayCutout kPendingDisplayCutout{};
  template <typename T = DisplayCutoutProto> T* set_pending_display_cutout() {
    return BeginNestedMessage<T>(11);
  }


  using FieldMetadata_LastWindowInsets =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ViewRootImplProto>;

  static constexpr FieldMetadata_LastWindowInsets kLastWindowInsets{};
  void set_last_window_insets(const char* data, size_t size) {
    AppendBytes(FieldMetadata_LastWindowInsets::kFieldId, data, size);
  }
  void set_last_window_insets(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_LastWindowInsets::kFieldId, chars.data, chars.size);
  }
  void set_last_window_insets(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_LastWindowInsets::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SoftInputMode =
    ::protozero::proto_utils::FieldMetadata<
      13,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ViewRootImplProto>;

  static constexpr FieldMetadata_SoftInputMode kSoftInputMode{};
  void set_soft_input_mode(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SoftInputMode::kFieldId, data, size);
  }
  void set_soft_input_mode(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SoftInputMode::kFieldId, chars.data, chars.size);
  }
  void set_soft_input_mode(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SoftInputMode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ScrollY =
    ::protozero::proto_utils::FieldMetadata<
      14,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ViewRootImplProto>;

  static constexpr FieldMetadata_ScrollY kScrollY{};
  void set_scroll_y(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ScrollY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CurScrollY =
    ::protozero::proto_utils::FieldMetadata<
      15,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ViewRootImplProto>;

  static constexpr FieldMetadata_CurScrollY kCurScrollY{};
  void set_cur_scroll_y(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CurScrollY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Removed =
    ::protozero::proto_utils::FieldMetadata<
      16,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ViewRootImplProto>;

  static constexpr FieldMetadata_Removed kRemoved{};
  void set_removed(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_Removed::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WindowAttributes =
    ::protozero::proto_utils::FieldMetadata<
      17,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      WindowLayoutParamsProto,
      ViewRootImplProto>;

  static constexpr FieldMetadata_WindowAttributes kWindowAttributes{};
  template <typename T = WindowLayoutParamsProto> T* set_window_attributes() {
    return BeginNestedMessage<T>(17);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
