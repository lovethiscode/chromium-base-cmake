// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_INPUTMETHODEDITOR_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_INPUTMETHODEDITOR_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class EditorInfoProto;
class ImeFocusControllerProto;
class ImeInsetsSourceConsumerProto;
class InputConnectionCallProto;
class InputConnectionProto;
class InputMethodClientsTraceProto_ClientSideProto;
class InputMethodManagerProto;
class InputMethodManagerServiceProto;
class InputMethodServiceProto;
class InsetsControllerProto;
class ViewRootImplProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class InputMethodManagerServiceTraceProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InputMethodManagerServiceTraceProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InputMethodManagerServiceTraceProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InputMethodManagerServiceTraceProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_elapsed_realtime_nanos() const { return at<1>().valid(); }
  uint64_t elapsed_realtime_nanos() const { return at<1>().as_uint64(); }
  bool has_where() const { return at<2>().valid(); }
  ::protozero::ConstChars where() const { return at<2>().as_string(); }
  bool has_input_method_manager_service() const { return at<3>().valid(); }
  ::protozero::ConstBytes input_method_manager_service() const { return at<3>().as_bytes(); }
};

class InputMethodManagerServiceTraceProto : public ::protozero::Message {
 public:
  using Decoder = InputMethodManagerServiceTraceProto_Decoder;
  enum : int32_t {
    kElapsedRealtimeNanosFieldNumber = 1,
    kWhereFieldNumber = 2,
    kInputMethodManagerServiceFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InputMethodManagerServiceTraceProto"; }


  using FieldMetadata_ElapsedRealtimeNanos =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      InputMethodManagerServiceTraceProto>;

  static constexpr FieldMetadata_ElapsedRealtimeNanos kElapsedRealtimeNanos{};
  void set_elapsed_realtime_nanos(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ElapsedRealtimeNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Where =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodManagerServiceTraceProto>;

  static constexpr FieldMetadata_Where kWhere{};
  void set_where(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Where::kFieldId, data, size);
  }
  void set_where(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Where::kFieldId, chars.data, chars.size);
  }
  void set_where(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Where::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputMethodManagerService =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputMethodManagerServiceProto,
      InputMethodManagerServiceTraceProto>;

  static constexpr FieldMetadata_InputMethodManagerService kInputMethodManagerService{};
  template <typename T = InputMethodManagerServiceProto> T* set_input_method_manager_service() {
    return BeginNestedMessage<T>(3);
  }

};

class InputMethodServiceTraceProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InputMethodServiceTraceProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InputMethodServiceTraceProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InputMethodServiceTraceProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_elapsed_realtime_nanos() const { return at<1>().valid(); }
  uint64_t elapsed_realtime_nanos() const { return at<1>().as_uint64(); }
  bool has_where() const { return at<2>().valid(); }
  ::protozero::ConstChars where() const { return at<2>().as_string(); }
  bool has_input_method_service() const { return at<3>().valid(); }
  ::protozero::ConstBytes input_method_service() const { return at<3>().as_bytes(); }
};

class InputMethodServiceTraceProto : public ::protozero::Message {
 public:
  using Decoder = InputMethodServiceTraceProto_Decoder;
  enum : int32_t {
    kElapsedRealtimeNanosFieldNumber = 1,
    kWhereFieldNumber = 2,
    kInputMethodServiceFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InputMethodServiceTraceProto"; }


  using FieldMetadata_ElapsedRealtimeNanos =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      InputMethodServiceTraceProto>;

  static constexpr FieldMetadata_ElapsedRealtimeNanos kElapsedRealtimeNanos{};
  void set_elapsed_realtime_nanos(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ElapsedRealtimeNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Where =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodServiceTraceProto>;

  static constexpr FieldMetadata_Where kWhere{};
  void set_where(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Where::kFieldId, data, size);
  }
  void set_where(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Where::kFieldId, chars.data, chars.size);
  }
  void set_where(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Where::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputMethodService =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputMethodServiceProto,
      InputMethodServiceTraceProto>;

  static constexpr FieldMetadata_InputMethodService kInputMethodService{};
  template <typename T = InputMethodServiceProto> T* set_input_method_service() {
    return BeginNestedMessage<T>(3);
  }

};

class InputMethodClientsTraceProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InputMethodClientsTraceProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InputMethodClientsTraceProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InputMethodClientsTraceProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_elapsed_realtime_nanos() const { return at<1>().valid(); }
  uint64_t elapsed_realtime_nanos() const { return at<1>().as_uint64(); }
  bool has_where() const { return at<2>().valid(); }
  ::protozero::ConstChars where() const { return at<2>().as_string(); }
  bool has_client() const { return at<3>().valid(); }
  ::protozero::ConstBytes client() const { return at<3>().as_bytes(); }
};

class InputMethodClientsTraceProto : public ::protozero::Message {
 public:
  using Decoder = InputMethodClientsTraceProto_Decoder;
  enum : int32_t {
    kElapsedRealtimeNanosFieldNumber = 1,
    kWhereFieldNumber = 2,
    kClientFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InputMethodClientsTraceProto"; }

  using ClientSideProto = ::perfetto::protos::pbzero::InputMethodClientsTraceProto_ClientSideProto;

  using FieldMetadata_ElapsedRealtimeNanos =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      InputMethodClientsTraceProto>;

  static constexpr FieldMetadata_ElapsedRealtimeNanos kElapsedRealtimeNanos{};
  void set_elapsed_realtime_nanos(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ElapsedRealtimeNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Where =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InputMethodClientsTraceProto>;

  static constexpr FieldMetadata_Where kWhere{};
  void set_where(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Where::kFieldId, data, size);
  }
  void set_where(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Where::kFieldId, chars.data, chars.size);
  }
  void set_where(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Where::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Client =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputMethodClientsTraceProto_ClientSideProto,
      InputMethodClientsTraceProto>;

  static constexpr FieldMetadata_Client kClient{};
  template <typename T = InputMethodClientsTraceProto_ClientSideProto> T* set_client() {
    return BeginNestedMessage<T>(3);
  }

};

class InputMethodClientsTraceProto_ClientSideProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/9, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InputMethodClientsTraceProto_ClientSideProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InputMethodClientsTraceProto_ClientSideProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InputMethodClientsTraceProto_ClientSideProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_display_id() const { return at<1>().valid(); }
  int32_t display_id() const { return at<1>().as_int32(); }
  bool has_input_method_manager() const { return at<2>().valid(); }
  ::protozero::ConstBytes input_method_manager() const { return at<2>().as_bytes(); }
  bool has_view_root_impl() const { return at<3>().valid(); }
  ::protozero::ConstBytes view_root_impl() const { return at<3>().as_bytes(); }
  bool has_insets_controller() const { return at<4>().valid(); }
  ::protozero::ConstBytes insets_controller() const { return at<4>().as_bytes(); }
  bool has_ime_insets_source_consumer() const { return at<5>().valid(); }
  ::protozero::ConstBytes ime_insets_source_consumer() const { return at<5>().as_bytes(); }
  bool has_editor_info() const { return at<6>().valid(); }
  ::protozero::ConstBytes editor_info() const { return at<6>().as_bytes(); }
  bool has_ime_focus_controller() const { return at<7>().valid(); }
  ::protozero::ConstBytes ime_focus_controller() const { return at<7>().as_bytes(); }
  bool has_input_connection() const { return at<8>().valid(); }
  ::protozero::ConstBytes input_connection() const { return at<8>().as_bytes(); }
  bool has_input_connection_call() const { return at<9>().valid(); }
  ::protozero::ConstBytes input_connection_call() const { return at<9>().as_bytes(); }
};

class InputMethodClientsTraceProto_ClientSideProto : public ::protozero::Message {
 public:
  using Decoder = InputMethodClientsTraceProto_ClientSideProto_Decoder;
  enum : int32_t {
    kDisplayIdFieldNumber = 1,
    kInputMethodManagerFieldNumber = 2,
    kViewRootImplFieldNumber = 3,
    kInsetsControllerFieldNumber = 4,
    kImeInsetsSourceConsumerFieldNumber = 5,
    kEditorInfoFieldNumber = 6,
    kImeFocusControllerFieldNumber = 7,
    kInputConnectionFieldNumber = 8,
    kInputConnectionCallFieldNumber = 9,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InputMethodClientsTraceProto.ClientSideProto"; }


  using FieldMetadata_DisplayId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_DisplayId kDisplayId{};
  void set_display_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DisplayId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputMethodManager =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputMethodManagerProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_InputMethodManager kInputMethodManager{};
  template <typename T = InputMethodManagerProto> T* set_input_method_manager() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_ViewRootImpl =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ViewRootImplProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_ViewRootImpl kViewRootImpl{};
  template <typename T = ViewRootImplProto> T* set_view_root_impl() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_InsetsController =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InsetsControllerProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_InsetsController kInsetsController{};
  template <typename T = InsetsControllerProto> T* set_insets_controller() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_ImeInsetsSourceConsumer =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ImeInsetsSourceConsumerProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_ImeInsetsSourceConsumer kImeInsetsSourceConsumer{};
  template <typename T = ImeInsetsSourceConsumerProto> T* set_ime_insets_source_consumer() {
    return BeginNestedMessage<T>(5);
  }


  using FieldMetadata_EditorInfo =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      EditorInfoProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_EditorInfo kEditorInfo{};
  template <typename T = EditorInfoProto> T* set_editor_info() {
    return BeginNestedMessage<T>(6);
  }


  using FieldMetadata_ImeFocusController =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ImeFocusControllerProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_ImeFocusController kImeFocusController{};
  template <typename T = ImeFocusControllerProto> T* set_ime_focus_controller() {
    return BeginNestedMessage<T>(7);
  }


  using FieldMetadata_InputConnection =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputConnectionProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_InputConnection kInputConnection{};
  template <typename T = InputConnectionProto> T* set_input_connection() {
    return BeginNestedMessage<T>(8);
  }


  using FieldMetadata_InputConnectionCall =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      InputConnectionCallProto,
      InputMethodClientsTraceProto_ClientSideProto>;

  static constexpr FieldMetadata_InputConnectionCall kInputConnectionCall{};
  template <typename T = InputConnectionCallProto> T* set_input_connection_call() {
    return BeginNestedMessage<T>(9);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
