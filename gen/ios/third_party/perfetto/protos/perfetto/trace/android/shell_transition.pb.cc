// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/shell_transition.proto

#include "protos/perfetto/trace/android/shell_transition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ShellTransition_Target::ShellTransition_Target(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.layer_id_)*/0
  , /*decltype(_impl_.window_id_)*/0
  , /*decltype(_impl_.flags_)*/0} {}
struct ShellTransition_TargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellTransition_TargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellTransition_TargetDefaultTypeInternal() {}
  union {
    ShellTransition_Target _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellTransition_TargetDefaultTypeInternal _ShellTransition_Target_default_instance_;
PROTOBUF_CONSTEXPR ShellTransition::ShellTransition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_.create_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.send_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.dispatch_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.merge_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.merge_request_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.handler_)*/0
  , /*decltype(_impl_.shell_abort_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.wm_abort_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.finish_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.start_transaction_id_)*/uint64_t{0u}
  , /*decltype(_impl_.finish_transaction_id_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.merge_target_)*/0
  , /*decltype(_impl_.starting_window_remove_time_ns_)*/int64_t{0}
  , /*decltype(_impl_.flags_)*/0} {}
struct ShellTransitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellTransitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellTransitionDefaultTypeInternal() {}
  union {
    ShellTransition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellTransitionDefaultTypeInternal _ShellTransition_default_instance_;
PROTOBUF_CONSTEXPR ShellHandlerMappings::ShellHandlerMappings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapping_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShellHandlerMappingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellHandlerMappingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellHandlerMappingsDefaultTypeInternal() {}
  union {
    ShellHandlerMappings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellHandlerMappingsDefaultTypeInternal _ShellHandlerMappings_default_instance_;
PROTOBUF_CONSTEXPR ShellHandlerMapping::ShellHandlerMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0} {}
struct ShellHandlerMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellHandlerMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellHandlerMappingDefaultTypeInternal() {}
  union {
    ShellHandlerMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellHandlerMappingDefaultTypeInternal _ShellHandlerMapping_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class ShellTransition_Target::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellTransition_Target>()._impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_window_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ShellTransition_Target::ShellTransition_Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ShellTransition.Target)
}
ShellTransition_Target::ShellTransition_Target(const ShellTransition_Target& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShellTransition_Target* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.layer_id_){}
    , decltype(_impl_.window_id_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ShellTransition.Target)
}

inline void ShellTransition_Target::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.layer_id_){0}
    , decltype(_impl_.window_id_){0}
    , decltype(_impl_.flags_){0}
  };
}

ShellTransition_Target::~ShellTransition_Target() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ShellTransition.Target)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShellTransition_Target::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShellTransition_Target::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShellTransition_Target::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ShellTransition.Target)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShellTransition_Target::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mode(&has_bits);
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 layer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_layer_id(&has_bits);
          _impl_.layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 window_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_window_id(&has_bits);
          _impl_.window_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShellTransition_Target::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ShellTransition.Target)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // optional int32 layer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_layer_id(), target);
  }

  // optional int32 window_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_window_id(), target);
  }

  // optional int32 flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ShellTransition.Target)
  return target;
}

size_t ShellTransition_Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ShellTransition.Target)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
    }

    // optional int32 layer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layer_id());
    }

    // optional int32 window_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_window_id());
    }

    // optional int32 flags = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellTransition_Target::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShellTransition_Target*>(
      &from));
}

void ShellTransition_Target::MergeFrom(const ShellTransition_Target& from) {
  ShellTransition_Target* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ShellTransition.Target)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.layer_id_ = from._impl_.layer_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.window_id_ = from._impl_.window_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShellTransition_Target::CopyFrom(const ShellTransition_Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ShellTransition.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellTransition_Target::IsInitialized() const {
  return true;
}

void ShellTransition_Target::InternalSwap(ShellTransition_Target* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellTransition_Target, _impl_.flags_)
      + sizeof(ShellTransition_Target::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(ShellTransition_Target, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

std::string ShellTransition_Target::GetTypeName() const {
  return "perfetto.protos.ShellTransition.Target";
}


// ===================================================================

class ShellTransition::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellTransition>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_create_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_send_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dispatch_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_merge_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_merge_request_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shell_abort_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wm_abort_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_finish_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_start_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_finish_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_handler(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_merge_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_starting_window_remove_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

ShellTransition::ShellTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ShellTransition)
}
ShellTransition::ShellTransition(const ShellTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShellTransition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targets_){from._impl_.targets_}
    , decltype(_impl_.create_time_ns_){}
    , decltype(_impl_.send_time_ns_){}
    , decltype(_impl_.dispatch_time_ns_){}
    , decltype(_impl_.merge_time_ns_){}
    , decltype(_impl_.merge_request_time_ns_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.handler_){}
    , decltype(_impl_.shell_abort_time_ns_){}
    , decltype(_impl_.wm_abort_time_ns_){}
    , decltype(_impl_.finish_time_ns_){}
    , decltype(_impl_.start_transaction_id_){}
    , decltype(_impl_.finish_transaction_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.merge_target_){}
    , decltype(_impl_.starting_window_remove_time_ns_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.create_time_ns_, &from._impl_.create_time_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.create_time_ns_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ShellTransition)
}

inline void ShellTransition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targets_){arena}
    , decltype(_impl_.create_time_ns_){int64_t{0}}
    , decltype(_impl_.send_time_ns_){int64_t{0}}
    , decltype(_impl_.dispatch_time_ns_){int64_t{0}}
    , decltype(_impl_.merge_time_ns_){int64_t{0}}
    , decltype(_impl_.merge_request_time_ns_){int64_t{0}}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.handler_){0}
    , decltype(_impl_.shell_abort_time_ns_){int64_t{0}}
    , decltype(_impl_.wm_abort_time_ns_){int64_t{0}}
    , decltype(_impl_.finish_time_ns_){int64_t{0}}
    , decltype(_impl_.start_transaction_id_){uint64_t{0u}}
    , decltype(_impl_.finish_transaction_id_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.merge_target_){0}
    , decltype(_impl_.starting_window_remove_time_ns_){int64_t{0}}
    , decltype(_impl_.flags_){0}
  };
}

ShellTransition::~ShellTransition() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ShellTransition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShellTransition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_.~RepeatedPtrField();
}

void ShellTransition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShellTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ShellTransition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.create_time_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shell_abort_time_ns_) -
        reinterpret_cast<char*>(&_impl_.create_time_ns_)) + sizeof(_impl_.shell_abort_time_ns_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.wm_abort_time_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.wm_abort_time_ns_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShellTransition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 create_time_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_create_time_ns(&has_bits);
          _impl_.create_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 send_time_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_send_time_ns(&has_bits);
          _impl_.send_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 dispatch_time_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dispatch_time_ns(&has_bits);
          _impl_.dispatch_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 merge_time_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_merge_time_ns(&has_bits);
          _impl_.merge_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 merge_request_time_ns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_merge_request_time_ns(&has_bits);
          _impl_.merge_request_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 shell_abort_time_ns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_shell_abort_time_ns(&has_bits);
          _impl_.shell_abort_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 wm_abort_time_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_wm_abort_time_ns(&has_bits);
          _impl_.wm_abort_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 finish_time_ns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_finish_time_ns(&has_bits);
          _impl_.finish_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 start_transaction_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_start_transaction_id(&has_bits);
          _impl_.start_transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 finish_transaction_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_finish_transaction_id(&has_bits);
          _impl_.finish_transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 handler = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_handler(&has_bits);
          _impl_.handler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ShellTransition.Target targets = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 merge_target = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_merge_target(&has_bits);
          _impl_.merge_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flags = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 starting_window_remove_time_ns = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_starting_window_remove_time_ns(&has_bits);
          _impl_.starting_window_remove_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShellTransition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ShellTransition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional int64 create_time_ns = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_create_time_ns(), target);
  }

  // optional int64 send_time_ns = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_send_time_ns(), target);
  }

  // optional int64 dispatch_time_ns = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_dispatch_time_ns(), target);
  }

  // optional int64 merge_time_ns = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_merge_time_ns(), target);
  }

  // optional int64 merge_request_time_ns = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_merge_request_time_ns(), target);
  }

  // optional int64 shell_abort_time_ns = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_shell_abort_time_ns(), target);
  }

  // optional int64 wm_abort_time_ns = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_wm_abort_time_ns(), target);
  }

  // optional int64 finish_time_ns = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_finish_time_ns(), target);
  }

  // optional uint64 start_transaction_id = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_start_transaction_id(), target);
  }

  // optional uint64 finish_transaction_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_finish_transaction_id(), target);
  }

  // optional int32 handler = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_handler(), target);
  }

  // optional int32 type = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_type(), target);
  }

  // repeated .perfetto.protos.ShellTransition.Target targets = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 merge_target = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_merge_target(), target);
  }

  // optional int32 flags = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_flags(), target);
  }

  // optional int64 starting_window_remove_time_ns = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_starting_window_remove_time_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ShellTransition)
  return target;
}

size_t ShellTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ShellTransition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ShellTransition.Target targets = 14;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_impl_.targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 create_time_ns = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time_ns());
    }

    // optional int64 send_time_ns = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_send_time_ns());
    }

    // optional int64 dispatch_time_ns = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dispatch_time_ns());
    }

    // optional int64 merge_time_ns = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_merge_time_ns());
    }

    // optional int64 merge_request_time_ns = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_merge_request_time_ns());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 handler = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handler());
    }

    // optional int64 shell_abort_time_ns = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shell_abort_time_ns());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 wm_abort_time_ns = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_wm_abort_time_ns());
    }

    // optional int64 finish_time_ns = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_finish_time_ns());
    }

    // optional uint64 start_transaction_id = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_transaction_id());
    }

    // optional uint64 finish_transaction_id = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_finish_transaction_id());
    }

    // optional int32 type = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 merge_target = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_merge_target());
    }

    // optional int64 starting_window_remove_time_ns = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_starting_window_remove_time_ns());
    }

    // optional int32 flags = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellTransition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShellTransition*>(
      &from));
}

void ShellTransition::MergeFrom(const ShellTransition& from) {
  ShellTransition* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ShellTransition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targets_.MergeFrom(from._impl_.targets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.create_time_ns_ = from._impl_.create_time_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.send_time_ns_ = from._impl_.send_time_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dispatch_time_ns_ = from._impl_.dispatch_time_ns_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.merge_time_ns_ = from._impl_.merge_time_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.merge_request_time_ns_ = from._impl_.merge_request_time_ns_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.handler_ = from._impl_.handler_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.shell_abort_time_ns_ = from._impl_.shell_abort_time_ns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.wm_abort_time_ns_ = from._impl_.wm_abort_time_ns_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.finish_time_ns_ = from._impl_.finish_time_ns_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.start_transaction_id_ = from._impl_.start_transaction_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.finish_transaction_id_ = from._impl_.finish_transaction_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.merge_target_ = from._impl_.merge_target_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.starting_window_remove_time_ns_ = from._impl_.starting_window_remove_time_ns_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShellTransition::CopyFrom(const ShellTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ShellTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellTransition::IsInitialized() const {
  return true;
}

void ShellTransition::InternalSwap(ShellTransition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShellTransition, _impl_.flags_)
      + sizeof(ShellTransition::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(ShellTransition, _impl_.create_time_ns_)>(
          reinterpret_cast<char*>(&_impl_.create_time_ns_),
          reinterpret_cast<char*>(&other->_impl_.create_time_ns_));
}

std::string ShellTransition::GetTypeName() const {
  return "perfetto.protos.ShellTransition";
}


// ===================================================================

class ShellHandlerMappings::_Internal {
 public:
};

ShellHandlerMappings::ShellHandlerMappings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ShellHandlerMappings)
}
ShellHandlerMappings::ShellHandlerMappings(const ShellHandlerMappings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShellHandlerMappings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapping_){from._impl_.mapping_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ShellHandlerMappings)
}

inline void ShellHandlerMappings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapping_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShellHandlerMappings::~ShellHandlerMappings() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ShellHandlerMappings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShellHandlerMappings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapping_.~RepeatedPtrField();
}

void ShellHandlerMappings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShellHandlerMappings::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ShellHandlerMappings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapping_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShellHandlerMappings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ShellHandlerMapping mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShellHandlerMappings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ShellHandlerMappings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ShellHandlerMapping mapping = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_mapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ShellHandlerMappings)
  return target;
}

size_t ShellHandlerMappings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ShellHandlerMappings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ShellHandlerMapping mapping = 1;
  total_size += 1UL * this->_internal_mapping_size();
  for (const auto& msg : this->_impl_.mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellHandlerMappings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShellHandlerMappings*>(
      &from));
}

void ShellHandlerMappings::MergeFrom(const ShellHandlerMappings& from) {
  ShellHandlerMappings* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ShellHandlerMappings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mapping_.MergeFrom(from._impl_.mapping_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShellHandlerMappings::CopyFrom(const ShellHandlerMappings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ShellHandlerMappings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellHandlerMappings::IsInitialized() const {
  return true;
}

void ShellHandlerMappings::InternalSwap(ShellHandlerMappings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mapping_.InternalSwap(&other->_impl_.mapping_);
}

std::string ShellHandlerMappings::GetTypeName() const {
  return "perfetto.protos.ShellHandlerMappings";
}


// ===================================================================

class ShellHandlerMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellHandlerMapping>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShellHandlerMapping::ShellHandlerMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ShellHandlerMapping)
}
ShellHandlerMapping::ShellHandlerMapping(const ShellHandlerMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShellHandlerMapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ShellHandlerMapping)
}

inline void ShellHandlerMapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShellHandlerMapping::~ShellHandlerMapping() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ShellHandlerMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShellHandlerMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ShellHandlerMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShellHandlerMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ShellHandlerMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShellHandlerMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShellHandlerMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ShellHandlerMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ShellHandlerMapping)
  return target;
}

size_t ShellHandlerMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ShellHandlerMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellHandlerMapping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShellHandlerMapping*>(
      &from));
}

void ShellHandlerMapping::MergeFrom(const ShellHandlerMapping& from) {
  ShellHandlerMapping* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ShellHandlerMapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShellHandlerMapping::CopyFrom(const ShellHandlerMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ShellHandlerMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellHandlerMapping::IsInitialized() const {
  return true;
}

void ShellHandlerMapping::InternalSwap(ShellHandlerMapping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

std::string ShellHandlerMapping::GetTypeName() const {
  return "perfetto.protos.ShellHandlerMapping";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ShellTransition_Target*
Arena::CreateMaybeMessage< ::perfetto::protos::ShellTransition_Target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ShellTransition_Target >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ShellTransition*
Arena::CreateMaybeMessage< ::perfetto::protos::ShellTransition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ShellTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ShellHandlerMappings*
Arena::CreateMaybeMessage< ::perfetto::protos::ShellHandlerMappings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ShellHandlerMappings >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ShellHandlerMapping*
Arena::CreateMaybeMessage< ::perfetto::protos::ShellHandlerMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ShellHandlerMapping >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
