#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/android/pixel_modem_events.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

PixelModemTokenDatabase::PixelModemTokenDatabase() = default;
PixelModemTokenDatabase::~PixelModemTokenDatabase() = default;
PixelModemTokenDatabase::PixelModemTokenDatabase(const PixelModemTokenDatabase&) = default;
PixelModemTokenDatabase& PixelModemTokenDatabase::operator=(const PixelModemTokenDatabase&) = default;
PixelModemTokenDatabase::PixelModemTokenDatabase(PixelModemTokenDatabase&&) noexcept = default;
PixelModemTokenDatabase& PixelModemTokenDatabase::operator=(PixelModemTokenDatabase&&) = default;

bool PixelModemTokenDatabase::operator==(const PixelModemTokenDatabase& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(database_, other.database_);
}

bool PixelModemTokenDatabase::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* database */:
        field.get(&database_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PixelModemTokenDatabase::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PixelModemTokenDatabase::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PixelModemTokenDatabase::Serialize(::protozero::Message* msg) const {
  // Field 1: database
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, database_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


PixelModemEvents::PixelModemEvents() = default;
PixelModemEvents::~PixelModemEvents() = default;
PixelModemEvents::PixelModemEvents(const PixelModemEvents&) = default;
PixelModemEvents& PixelModemEvents::operator=(const PixelModemEvents&) = default;
PixelModemEvents::PixelModemEvents(PixelModemEvents&&) noexcept = default;
PixelModemEvents& PixelModemEvents::operator=(PixelModemEvents&&) = default;

bool PixelModemEvents::operator==(const PixelModemEvents& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(events_, other.events_)
   && ::protozero::internal::gen_helpers::EqualsField(event_time_nanos_, other.event_time_nanos_);
}

bool PixelModemEvents::ParseFromArray(const void* raw, size_t size) {
  events_.clear();
  event_time_nanos_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* events */:
        events_.emplace_back();
        field.get(&events_.back());
        break;
      case 2 /* event_time_nanos */:
        event_time_nanos_.emplace_back();
        field.get(&event_time_nanos_.back());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string PixelModemEvents::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> PixelModemEvents::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void PixelModemEvents::Serialize(::protozero::Message* msg) const {
  // Field 1: events
  for (auto& it : events_) {
    ::protozero::internal::gen_helpers::SerializeString(1, it, msg);
  }

  // Field 2: event_time_nanos
  for (auto& it : event_time_nanos_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, it, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
