// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/shell_transition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ShellHandlerMapping;
struct ShellHandlerMappingDefaultTypeInternal;
extern ShellHandlerMappingDefaultTypeInternal _ShellHandlerMapping_default_instance_;
class ShellHandlerMappings;
struct ShellHandlerMappingsDefaultTypeInternal;
extern ShellHandlerMappingsDefaultTypeInternal _ShellHandlerMappings_default_instance_;
class ShellTransition;
struct ShellTransitionDefaultTypeInternal;
extern ShellTransitionDefaultTypeInternal _ShellTransition_default_instance_;
class ShellTransition_Target;
struct ShellTransition_TargetDefaultTypeInternal;
extern ShellTransition_TargetDefaultTypeInternal _ShellTransition_Target_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ShellHandlerMapping* Arena::CreateMaybeMessage<::perfetto::protos::ShellHandlerMapping>(Arena*);
template<> ::perfetto::protos::ShellHandlerMappings* Arena::CreateMaybeMessage<::perfetto::protos::ShellHandlerMappings>(Arena*);
template<> ::perfetto::protos::ShellTransition* Arena::CreateMaybeMessage<::perfetto::protos::ShellTransition>(Arena*);
template<> ::perfetto::protos::ShellTransition_Target* Arena::CreateMaybeMessage<::perfetto::protos::ShellTransition_Target>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ShellTransition_Target final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ShellTransition.Target) */ {
 public:
  inline ShellTransition_Target() : ShellTransition_Target(nullptr) {}
  ~ShellTransition_Target() override;
  explicit PROTOBUF_CONSTEXPR ShellTransition_Target(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShellTransition_Target(const ShellTransition_Target& from);
  ShellTransition_Target(ShellTransition_Target&& from) noexcept
    : ShellTransition_Target() {
    *this = ::std::move(from);
  }

  inline ShellTransition_Target& operator=(const ShellTransition_Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellTransition_Target& operator=(ShellTransition_Target&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShellTransition_Target& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShellTransition_Target* internal_default_instance() {
    return reinterpret_cast<const ShellTransition_Target*>(
               &_ShellTransition_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShellTransition_Target& a, ShellTransition_Target& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShellTransition_Target* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShellTransition_Target* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShellTransition_Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShellTransition_Target>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShellTransition_Target& from);
  void MergeFrom(const ShellTransition_Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShellTransition_Target* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ShellTransition.Target";
  }
  protected:
  explicit ShellTransition_Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kLayerIdFieldNumber = 2,
    kWindowIdFieldNumber = 3,
    kFlagsFieldNumber = 4,
  };
  // optional int32 mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // optional int32 layer_id = 2;
  bool has_layer_id() const;
  private:
  bool _internal_has_layer_id() const;
  public:
  void clear_layer_id();
  int32_t layer_id() const;
  void set_layer_id(int32_t value);
  private:
  int32_t _internal_layer_id() const;
  void _internal_set_layer_id(int32_t value);
  public:

  // optional int32 window_id = 3;
  bool has_window_id() const;
  private:
  bool _internal_has_window_id() const;
  public:
  void clear_window_id();
  int32_t window_id() const;
  void set_window_id(int32_t value);
  private:
  int32_t _internal_window_id() const;
  void _internal_set_window_id(int32_t value);
  public:

  // optional int32 flags = 4;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  int32_t flags() const;
  void set_flags(int32_t value);
  private:
  int32_t _internal_flags() const;
  void _internal_set_flags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ShellTransition.Target)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t mode_;
    int32_t layer_id_;
    int32_t window_id_;
    int32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto;
};
// -------------------------------------------------------------------

class ShellTransition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ShellTransition) */ {
 public:
  inline ShellTransition() : ShellTransition(nullptr) {}
  ~ShellTransition() override;
  explicit PROTOBUF_CONSTEXPR ShellTransition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShellTransition(const ShellTransition& from);
  ShellTransition(ShellTransition&& from) noexcept
    : ShellTransition() {
    *this = ::std::move(from);
  }

  inline ShellTransition& operator=(const ShellTransition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellTransition& operator=(ShellTransition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShellTransition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShellTransition* internal_default_instance() {
    return reinterpret_cast<const ShellTransition*>(
               &_ShellTransition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShellTransition& a, ShellTransition& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShellTransition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShellTransition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShellTransition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShellTransition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShellTransition& from);
  void MergeFrom(const ShellTransition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShellTransition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ShellTransition";
  }
  protected:
  explicit ShellTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ShellTransition_Target Target;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 14,
    kCreateTimeNsFieldNumber = 2,
    kSendTimeNsFieldNumber = 3,
    kDispatchTimeNsFieldNumber = 4,
    kMergeTimeNsFieldNumber = 5,
    kMergeRequestTimeNsFieldNumber = 6,
    kIdFieldNumber = 1,
    kHandlerFieldNumber = 12,
    kShellAbortTimeNsFieldNumber = 7,
    kWmAbortTimeNsFieldNumber = 8,
    kFinishTimeNsFieldNumber = 9,
    kStartTransactionIdFieldNumber = 10,
    kFinishTransactionIdFieldNumber = 11,
    kTypeFieldNumber = 13,
    kMergeTargetFieldNumber = 15,
    kStartingWindowRemoveTimeNsFieldNumber = 17,
    kFlagsFieldNumber = 16,
  };
  // repeated .perfetto.protos.ShellTransition.Target targets = 14;
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  ::perfetto::protos::ShellTransition_Target* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellTransition_Target >*
      mutable_targets();
  private:
  const ::perfetto::protos::ShellTransition_Target& _internal_targets(int index) const;
  ::perfetto::protos::ShellTransition_Target* _internal_add_targets();
  public:
  const ::perfetto::protos::ShellTransition_Target& targets(int index) const;
  ::perfetto::protos::ShellTransition_Target* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellTransition_Target >&
      targets() const;

  // optional int64 create_time_ns = 2;
  bool has_create_time_ns() const;
  private:
  bool _internal_has_create_time_ns() const;
  public:
  void clear_create_time_ns();
  int64_t create_time_ns() const;
  void set_create_time_ns(int64_t value);
  private:
  int64_t _internal_create_time_ns() const;
  void _internal_set_create_time_ns(int64_t value);
  public:

  // optional int64 send_time_ns = 3;
  bool has_send_time_ns() const;
  private:
  bool _internal_has_send_time_ns() const;
  public:
  void clear_send_time_ns();
  int64_t send_time_ns() const;
  void set_send_time_ns(int64_t value);
  private:
  int64_t _internal_send_time_ns() const;
  void _internal_set_send_time_ns(int64_t value);
  public:

  // optional int64 dispatch_time_ns = 4;
  bool has_dispatch_time_ns() const;
  private:
  bool _internal_has_dispatch_time_ns() const;
  public:
  void clear_dispatch_time_ns();
  int64_t dispatch_time_ns() const;
  void set_dispatch_time_ns(int64_t value);
  private:
  int64_t _internal_dispatch_time_ns() const;
  void _internal_set_dispatch_time_ns(int64_t value);
  public:

  // optional int64 merge_time_ns = 5;
  bool has_merge_time_ns() const;
  private:
  bool _internal_has_merge_time_ns() const;
  public:
  void clear_merge_time_ns();
  int64_t merge_time_ns() const;
  void set_merge_time_ns(int64_t value);
  private:
  int64_t _internal_merge_time_ns() const;
  void _internal_set_merge_time_ns(int64_t value);
  public:

  // optional int64 merge_request_time_ns = 6;
  bool has_merge_request_time_ns() const;
  private:
  bool _internal_has_merge_request_time_ns() const;
  public:
  void clear_merge_request_time_ns();
  int64_t merge_request_time_ns() const;
  void set_merge_request_time_ns(int64_t value);
  private:
  int64_t _internal_merge_request_time_ns() const;
  void _internal_set_merge_request_time_ns(int64_t value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 handler = 12;
  bool has_handler() const;
  private:
  bool _internal_has_handler() const;
  public:
  void clear_handler();
  int32_t handler() const;
  void set_handler(int32_t value);
  private:
  int32_t _internal_handler() const;
  void _internal_set_handler(int32_t value);
  public:

  // optional int64 shell_abort_time_ns = 7;
  bool has_shell_abort_time_ns() const;
  private:
  bool _internal_has_shell_abort_time_ns() const;
  public:
  void clear_shell_abort_time_ns();
  int64_t shell_abort_time_ns() const;
  void set_shell_abort_time_ns(int64_t value);
  private:
  int64_t _internal_shell_abort_time_ns() const;
  void _internal_set_shell_abort_time_ns(int64_t value);
  public:

  // optional int64 wm_abort_time_ns = 8;
  bool has_wm_abort_time_ns() const;
  private:
  bool _internal_has_wm_abort_time_ns() const;
  public:
  void clear_wm_abort_time_ns();
  int64_t wm_abort_time_ns() const;
  void set_wm_abort_time_ns(int64_t value);
  private:
  int64_t _internal_wm_abort_time_ns() const;
  void _internal_set_wm_abort_time_ns(int64_t value);
  public:

  // optional int64 finish_time_ns = 9;
  bool has_finish_time_ns() const;
  private:
  bool _internal_has_finish_time_ns() const;
  public:
  void clear_finish_time_ns();
  int64_t finish_time_ns() const;
  void set_finish_time_ns(int64_t value);
  private:
  int64_t _internal_finish_time_ns() const;
  void _internal_set_finish_time_ns(int64_t value);
  public:

  // optional uint64 start_transaction_id = 10;
  bool has_start_transaction_id() const;
  private:
  bool _internal_has_start_transaction_id() const;
  public:
  void clear_start_transaction_id();
  uint64_t start_transaction_id() const;
  void set_start_transaction_id(uint64_t value);
  private:
  uint64_t _internal_start_transaction_id() const;
  void _internal_set_start_transaction_id(uint64_t value);
  public:

  // optional uint64 finish_transaction_id = 11;
  bool has_finish_transaction_id() const;
  private:
  bool _internal_has_finish_transaction_id() const;
  public:
  void clear_finish_transaction_id();
  uint64_t finish_transaction_id() const;
  void set_finish_transaction_id(uint64_t value);
  private:
  uint64_t _internal_finish_transaction_id() const;
  void _internal_set_finish_transaction_id(uint64_t value);
  public:

  // optional int32 type = 13;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional int32 merge_target = 15;
  bool has_merge_target() const;
  private:
  bool _internal_has_merge_target() const;
  public:
  void clear_merge_target();
  int32_t merge_target() const;
  void set_merge_target(int32_t value);
  private:
  int32_t _internal_merge_target() const;
  void _internal_set_merge_target(int32_t value);
  public:

  // optional int64 starting_window_remove_time_ns = 17;
  bool has_starting_window_remove_time_ns() const;
  private:
  bool _internal_has_starting_window_remove_time_ns() const;
  public:
  void clear_starting_window_remove_time_ns();
  int64_t starting_window_remove_time_ns() const;
  void set_starting_window_remove_time_ns(int64_t value);
  private:
  int64_t _internal_starting_window_remove_time_ns() const;
  void _internal_set_starting_window_remove_time_ns(int64_t value);
  public:

  // optional int32 flags = 16;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  int32_t flags() const;
  void set_flags(int32_t value);
  private:
  int32_t _internal_flags() const;
  void _internal_set_flags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ShellTransition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellTransition_Target > targets_;
    int64_t create_time_ns_;
    int64_t send_time_ns_;
    int64_t dispatch_time_ns_;
    int64_t merge_time_ns_;
    int64_t merge_request_time_ns_;
    int32_t id_;
    int32_t handler_;
    int64_t shell_abort_time_ns_;
    int64_t wm_abort_time_ns_;
    int64_t finish_time_ns_;
    uint64_t start_transaction_id_;
    uint64_t finish_transaction_id_;
    int32_t type_;
    int32_t merge_target_;
    int64_t starting_window_remove_time_ns_;
    int32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto;
};
// -------------------------------------------------------------------

class ShellHandlerMappings final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ShellHandlerMappings) */ {
 public:
  inline ShellHandlerMappings() : ShellHandlerMappings(nullptr) {}
  ~ShellHandlerMappings() override;
  explicit PROTOBUF_CONSTEXPR ShellHandlerMappings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShellHandlerMappings(const ShellHandlerMappings& from);
  ShellHandlerMappings(ShellHandlerMappings&& from) noexcept
    : ShellHandlerMappings() {
    *this = ::std::move(from);
  }

  inline ShellHandlerMappings& operator=(const ShellHandlerMappings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellHandlerMappings& operator=(ShellHandlerMappings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShellHandlerMappings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShellHandlerMappings* internal_default_instance() {
    return reinterpret_cast<const ShellHandlerMappings*>(
               &_ShellHandlerMappings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShellHandlerMappings& a, ShellHandlerMappings& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShellHandlerMappings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShellHandlerMappings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShellHandlerMappings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShellHandlerMappings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShellHandlerMappings& from);
  void MergeFrom(const ShellHandlerMappings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShellHandlerMappings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ShellHandlerMappings";
  }
  protected:
  explicit ShellHandlerMappings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 1,
  };
  // repeated .perfetto.protos.ShellHandlerMapping mapping = 1;
  int mapping_size() const;
  private:
  int _internal_mapping_size() const;
  public:
  void clear_mapping();
  ::perfetto::protos::ShellHandlerMapping* mutable_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellHandlerMapping >*
      mutable_mapping();
  private:
  const ::perfetto::protos::ShellHandlerMapping& _internal_mapping(int index) const;
  ::perfetto::protos::ShellHandlerMapping* _internal_add_mapping();
  public:
  const ::perfetto::protos::ShellHandlerMapping& mapping(int index) const;
  ::perfetto::protos::ShellHandlerMapping* add_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellHandlerMapping >&
      mapping() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.ShellHandlerMappings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellHandlerMapping > mapping_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto;
};
// -------------------------------------------------------------------

class ShellHandlerMapping final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ShellHandlerMapping) */ {
 public:
  inline ShellHandlerMapping() : ShellHandlerMapping(nullptr) {}
  ~ShellHandlerMapping() override;
  explicit PROTOBUF_CONSTEXPR ShellHandlerMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShellHandlerMapping(const ShellHandlerMapping& from);
  ShellHandlerMapping(ShellHandlerMapping&& from) noexcept
    : ShellHandlerMapping() {
    *this = ::std::move(from);
  }

  inline ShellHandlerMapping& operator=(const ShellHandlerMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellHandlerMapping& operator=(ShellHandlerMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShellHandlerMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShellHandlerMapping* internal_default_instance() {
    return reinterpret_cast<const ShellHandlerMapping*>(
               &_ShellHandlerMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShellHandlerMapping& a, ShellHandlerMapping& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ShellHandlerMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShellHandlerMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShellHandlerMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShellHandlerMapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShellHandlerMapping& from);
  void MergeFrom(const ShellHandlerMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShellHandlerMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ShellHandlerMapping";
  }
  protected:
  explicit ShellHandlerMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ShellHandlerMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShellTransition_Target

// optional int32 mode = 1;
inline bool ShellTransition_Target::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShellTransition_Target::has_mode() const {
  return _internal_has_mode();
}
inline void ShellTransition_Target::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ShellTransition_Target::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t ShellTransition_Target::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.Target.mode)
  return _internal_mode();
}
inline void ShellTransition_Target::_internal_set_mode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}
inline void ShellTransition_Target::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.Target.mode)
}

// optional int32 layer_id = 2;
inline bool ShellTransition_Target::_internal_has_layer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShellTransition_Target::has_layer_id() const {
  return _internal_has_layer_id();
}
inline void ShellTransition_Target::clear_layer_id() {
  _impl_.layer_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ShellTransition_Target::_internal_layer_id() const {
  return _impl_.layer_id_;
}
inline int32_t ShellTransition_Target::layer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.Target.layer_id)
  return _internal_layer_id();
}
inline void ShellTransition_Target::_internal_set_layer_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.layer_id_ = value;
}
inline void ShellTransition_Target::set_layer_id(int32_t value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.Target.layer_id)
}

// optional int32 window_id = 3;
inline bool ShellTransition_Target::_internal_has_window_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShellTransition_Target::has_window_id() const {
  return _internal_has_window_id();
}
inline void ShellTransition_Target::clear_window_id() {
  _impl_.window_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ShellTransition_Target::_internal_window_id() const {
  return _impl_.window_id_;
}
inline int32_t ShellTransition_Target::window_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.Target.window_id)
  return _internal_window_id();
}
inline void ShellTransition_Target::_internal_set_window_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.window_id_ = value;
}
inline void ShellTransition_Target::set_window_id(int32_t value) {
  _internal_set_window_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.Target.window_id)
}

// optional int32 flags = 4;
inline bool ShellTransition_Target::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShellTransition_Target::has_flags() const {
  return _internal_has_flags();
}
inline void ShellTransition_Target::clear_flags() {
  _impl_.flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ShellTransition_Target::_internal_flags() const {
  return _impl_.flags_;
}
inline int32_t ShellTransition_Target::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.Target.flags)
  return _internal_flags();
}
inline void ShellTransition_Target::_internal_set_flags(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flags_ = value;
}
inline void ShellTransition_Target::set_flags(int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.Target.flags)
}

// -------------------------------------------------------------------

// ShellTransition

// optional int32 id = 1;
inline bool ShellTransition::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShellTransition::has_id() const {
  return _internal_has_id();
}
inline void ShellTransition::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ShellTransition::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ShellTransition::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.id)
  return _internal_id();
}
inline void ShellTransition::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.id_ = value;
}
inline void ShellTransition::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.id)
}

// optional int64 create_time_ns = 2;
inline bool ShellTransition::_internal_has_create_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShellTransition::has_create_time_ns() const {
  return _internal_has_create_time_ns();
}
inline void ShellTransition::clear_create_time_ns() {
  _impl_.create_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t ShellTransition::_internal_create_time_ns() const {
  return _impl_.create_time_ns_;
}
inline int64_t ShellTransition::create_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.create_time_ns)
  return _internal_create_time_ns();
}
inline void ShellTransition::_internal_set_create_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.create_time_ns_ = value;
}
inline void ShellTransition::set_create_time_ns(int64_t value) {
  _internal_set_create_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.create_time_ns)
}

// optional int64 send_time_ns = 3;
inline bool ShellTransition::_internal_has_send_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShellTransition::has_send_time_ns() const {
  return _internal_has_send_time_ns();
}
inline void ShellTransition::clear_send_time_ns() {
  _impl_.send_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t ShellTransition::_internal_send_time_ns() const {
  return _impl_.send_time_ns_;
}
inline int64_t ShellTransition::send_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.send_time_ns)
  return _internal_send_time_ns();
}
inline void ShellTransition::_internal_set_send_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.send_time_ns_ = value;
}
inline void ShellTransition::set_send_time_ns(int64_t value) {
  _internal_set_send_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.send_time_ns)
}

// optional int64 dispatch_time_ns = 4;
inline bool ShellTransition::_internal_has_dispatch_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShellTransition::has_dispatch_time_ns() const {
  return _internal_has_dispatch_time_ns();
}
inline void ShellTransition::clear_dispatch_time_ns() {
  _impl_.dispatch_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ShellTransition::_internal_dispatch_time_ns() const {
  return _impl_.dispatch_time_ns_;
}
inline int64_t ShellTransition::dispatch_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.dispatch_time_ns)
  return _internal_dispatch_time_ns();
}
inline void ShellTransition::_internal_set_dispatch_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dispatch_time_ns_ = value;
}
inline void ShellTransition::set_dispatch_time_ns(int64_t value) {
  _internal_set_dispatch_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.dispatch_time_ns)
}

// optional int64 merge_time_ns = 5;
inline bool ShellTransition::_internal_has_merge_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShellTransition::has_merge_time_ns() const {
  return _internal_has_merge_time_ns();
}
inline void ShellTransition::clear_merge_time_ns() {
  _impl_.merge_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ShellTransition::_internal_merge_time_ns() const {
  return _impl_.merge_time_ns_;
}
inline int64_t ShellTransition::merge_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.merge_time_ns)
  return _internal_merge_time_ns();
}
inline void ShellTransition::_internal_set_merge_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.merge_time_ns_ = value;
}
inline void ShellTransition::set_merge_time_ns(int64_t value) {
  _internal_set_merge_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.merge_time_ns)
}

// optional int64 merge_request_time_ns = 6;
inline bool ShellTransition::_internal_has_merge_request_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShellTransition::has_merge_request_time_ns() const {
  return _internal_has_merge_request_time_ns();
}
inline void ShellTransition::clear_merge_request_time_ns() {
  _impl_.merge_request_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t ShellTransition::_internal_merge_request_time_ns() const {
  return _impl_.merge_request_time_ns_;
}
inline int64_t ShellTransition::merge_request_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.merge_request_time_ns)
  return _internal_merge_request_time_ns();
}
inline void ShellTransition::_internal_set_merge_request_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.merge_request_time_ns_ = value;
}
inline void ShellTransition::set_merge_request_time_ns(int64_t value) {
  _internal_set_merge_request_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.merge_request_time_ns)
}

// optional int64 shell_abort_time_ns = 7;
inline bool ShellTransition::_internal_has_shell_abort_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ShellTransition::has_shell_abort_time_ns() const {
  return _internal_has_shell_abort_time_ns();
}
inline void ShellTransition::clear_shell_abort_time_ns() {
  _impl_.shell_abort_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t ShellTransition::_internal_shell_abort_time_ns() const {
  return _impl_.shell_abort_time_ns_;
}
inline int64_t ShellTransition::shell_abort_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.shell_abort_time_ns)
  return _internal_shell_abort_time_ns();
}
inline void ShellTransition::_internal_set_shell_abort_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.shell_abort_time_ns_ = value;
}
inline void ShellTransition::set_shell_abort_time_ns(int64_t value) {
  _internal_set_shell_abort_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.shell_abort_time_ns)
}

// optional int64 wm_abort_time_ns = 8;
inline bool ShellTransition::_internal_has_wm_abort_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ShellTransition::has_wm_abort_time_ns() const {
  return _internal_has_wm_abort_time_ns();
}
inline void ShellTransition::clear_wm_abort_time_ns() {
  _impl_.wm_abort_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t ShellTransition::_internal_wm_abort_time_ns() const {
  return _impl_.wm_abort_time_ns_;
}
inline int64_t ShellTransition::wm_abort_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.wm_abort_time_ns)
  return _internal_wm_abort_time_ns();
}
inline void ShellTransition::_internal_set_wm_abort_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.wm_abort_time_ns_ = value;
}
inline void ShellTransition::set_wm_abort_time_ns(int64_t value) {
  _internal_set_wm_abort_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.wm_abort_time_ns)
}

// optional int64 finish_time_ns = 9;
inline bool ShellTransition::_internal_has_finish_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ShellTransition::has_finish_time_ns() const {
  return _internal_has_finish_time_ns();
}
inline void ShellTransition::clear_finish_time_ns() {
  _impl_.finish_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t ShellTransition::_internal_finish_time_ns() const {
  return _impl_.finish_time_ns_;
}
inline int64_t ShellTransition::finish_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.finish_time_ns)
  return _internal_finish_time_ns();
}
inline void ShellTransition::_internal_set_finish_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.finish_time_ns_ = value;
}
inline void ShellTransition::set_finish_time_ns(int64_t value) {
  _internal_set_finish_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.finish_time_ns)
}

// optional uint64 start_transaction_id = 10;
inline bool ShellTransition::_internal_has_start_transaction_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ShellTransition::has_start_transaction_id() const {
  return _internal_has_start_transaction_id();
}
inline void ShellTransition::clear_start_transaction_id() {
  _impl_.start_transaction_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t ShellTransition::_internal_start_transaction_id() const {
  return _impl_.start_transaction_id_;
}
inline uint64_t ShellTransition::start_transaction_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.start_transaction_id)
  return _internal_start_transaction_id();
}
inline void ShellTransition::_internal_set_start_transaction_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.start_transaction_id_ = value;
}
inline void ShellTransition::set_start_transaction_id(uint64_t value) {
  _internal_set_start_transaction_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.start_transaction_id)
}

// optional uint64 finish_transaction_id = 11;
inline bool ShellTransition::_internal_has_finish_transaction_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ShellTransition::has_finish_transaction_id() const {
  return _internal_has_finish_transaction_id();
}
inline void ShellTransition::clear_finish_transaction_id() {
  _impl_.finish_transaction_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t ShellTransition::_internal_finish_transaction_id() const {
  return _impl_.finish_transaction_id_;
}
inline uint64_t ShellTransition::finish_transaction_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.finish_transaction_id)
  return _internal_finish_transaction_id();
}
inline void ShellTransition::_internal_set_finish_transaction_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.finish_transaction_id_ = value;
}
inline void ShellTransition::set_finish_transaction_id(uint64_t value) {
  _internal_set_finish_transaction_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.finish_transaction_id)
}

// optional int32 handler = 12;
inline bool ShellTransition::_internal_has_handler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShellTransition::has_handler() const {
  return _internal_has_handler();
}
inline void ShellTransition::clear_handler() {
  _impl_.handler_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ShellTransition::_internal_handler() const {
  return _impl_.handler_;
}
inline int32_t ShellTransition::handler() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.handler)
  return _internal_handler();
}
inline void ShellTransition::_internal_set_handler(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.handler_ = value;
}
inline void ShellTransition::set_handler(int32_t value) {
  _internal_set_handler(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.handler)
}

// optional int32 type = 13;
inline bool ShellTransition::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ShellTransition::has_type() const {
  return _internal_has_type();
}
inline void ShellTransition::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t ShellTransition::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ShellTransition::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.type)
  return _internal_type();
}
inline void ShellTransition::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.type_ = value;
}
inline void ShellTransition::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.type)
}

// repeated .perfetto.protos.ShellTransition.Target targets = 14;
inline int ShellTransition::_internal_targets_size() const {
  return _impl_.targets_.size();
}
inline int ShellTransition::targets_size() const {
  return _internal_targets_size();
}
inline void ShellTransition::clear_targets() {
  _impl_.targets_.Clear();
}
inline ::perfetto::protos::ShellTransition_Target* ShellTransition::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ShellTransition.targets)
  return _impl_.targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellTransition_Target >*
ShellTransition::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ShellTransition.targets)
  return &_impl_.targets_;
}
inline const ::perfetto::protos::ShellTransition_Target& ShellTransition::_internal_targets(int index) const {
  return _impl_.targets_.Get(index);
}
inline const ::perfetto::protos::ShellTransition_Target& ShellTransition::targets(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.targets)
  return _internal_targets(index);
}
inline ::perfetto::protos::ShellTransition_Target* ShellTransition::_internal_add_targets() {
  return _impl_.targets_.Add();
}
inline ::perfetto::protos::ShellTransition_Target* ShellTransition::add_targets() {
  ::perfetto::protos::ShellTransition_Target* _add = _internal_add_targets();
  // @@protoc_insertion_point(field_add:perfetto.protos.ShellTransition.targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellTransition_Target >&
ShellTransition::targets() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ShellTransition.targets)
  return _impl_.targets_;
}

// optional int32 merge_target = 15;
inline bool ShellTransition::_internal_has_merge_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ShellTransition::has_merge_target() const {
  return _internal_has_merge_target();
}
inline void ShellTransition::clear_merge_target() {
  _impl_.merge_target_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t ShellTransition::_internal_merge_target() const {
  return _impl_.merge_target_;
}
inline int32_t ShellTransition::merge_target() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.merge_target)
  return _internal_merge_target();
}
inline void ShellTransition::_internal_set_merge_target(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.merge_target_ = value;
}
inline void ShellTransition::set_merge_target(int32_t value) {
  _internal_set_merge_target(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.merge_target)
}

// optional int32 flags = 16;
inline bool ShellTransition::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ShellTransition::has_flags() const {
  return _internal_has_flags();
}
inline void ShellTransition::clear_flags() {
  _impl_.flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t ShellTransition::_internal_flags() const {
  return _impl_.flags_;
}
inline int32_t ShellTransition::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.flags)
  return _internal_flags();
}
inline void ShellTransition::_internal_set_flags(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.flags_ = value;
}
inline void ShellTransition::set_flags(int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.flags)
}

// optional int64 starting_window_remove_time_ns = 17;
inline bool ShellTransition::_internal_has_starting_window_remove_time_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ShellTransition::has_starting_window_remove_time_ns() const {
  return _internal_has_starting_window_remove_time_ns();
}
inline void ShellTransition::clear_starting_window_remove_time_ns() {
  _impl_.starting_window_remove_time_ns_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int64_t ShellTransition::_internal_starting_window_remove_time_ns() const {
  return _impl_.starting_window_remove_time_ns_;
}
inline int64_t ShellTransition::starting_window_remove_time_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellTransition.starting_window_remove_time_ns)
  return _internal_starting_window_remove_time_ns();
}
inline void ShellTransition::_internal_set_starting_window_remove_time_ns(int64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.starting_window_remove_time_ns_ = value;
}
inline void ShellTransition::set_starting_window_remove_time_ns(int64_t value) {
  _internal_set_starting_window_remove_time_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellTransition.starting_window_remove_time_ns)
}

// -------------------------------------------------------------------

// ShellHandlerMappings

// repeated .perfetto.protos.ShellHandlerMapping mapping = 1;
inline int ShellHandlerMappings::_internal_mapping_size() const {
  return _impl_.mapping_.size();
}
inline int ShellHandlerMappings::mapping_size() const {
  return _internal_mapping_size();
}
inline void ShellHandlerMappings::clear_mapping() {
  _impl_.mapping_.Clear();
}
inline ::perfetto::protos::ShellHandlerMapping* ShellHandlerMappings::mutable_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ShellHandlerMappings.mapping)
  return _impl_.mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellHandlerMapping >*
ShellHandlerMappings::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ShellHandlerMappings.mapping)
  return &_impl_.mapping_;
}
inline const ::perfetto::protos::ShellHandlerMapping& ShellHandlerMappings::_internal_mapping(int index) const {
  return _impl_.mapping_.Get(index);
}
inline const ::perfetto::protos::ShellHandlerMapping& ShellHandlerMappings::mapping(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellHandlerMappings.mapping)
  return _internal_mapping(index);
}
inline ::perfetto::protos::ShellHandlerMapping* ShellHandlerMappings::_internal_add_mapping() {
  return _impl_.mapping_.Add();
}
inline ::perfetto::protos::ShellHandlerMapping* ShellHandlerMappings::add_mapping() {
  ::perfetto::protos::ShellHandlerMapping* _add = _internal_add_mapping();
  // @@protoc_insertion_point(field_add:perfetto.protos.ShellHandlerMappings.mapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ShellHandlerMapping >&
ShellHandlerMappings::mapping() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ShellHandlerMappings.mapping)
  return _impl_.mapping_;
}

// -------------------------------------------------------------------

// ShellHandlerMapping

// optional int32 id = 1;
inline bool ShellHandlerMapping::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShellHandlerMapping::has_id() const {
  return _internal_has_id();
}
inline void ShellHandlerMapping::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ShellHandlerMapping::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ShellHandlerMapping::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellHandlerMapping.id)
  return _internal_id();
}
inline void ShellHandlerMapping::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void ShellHandlerMapping::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellHandlerMapping.id)
}

// optional string name = 2;
inline bool ShellHandlerMapping::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShellHandlerMapping::has_name() const {
  return _internal_has_name();
}
inline void ShellHandlerMapping::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShellHandlerMapping::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ShellHandlerMapping.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShellHandlerMapping::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ShellHandlerMapping.name)
}
inline std::string* ShellHandlerMapping::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ShellHandlerMapping.name)
  return _s;
}
inline const std::string& ShellHandlerMapping::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ShellHandlerMapping::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShellHandlerMapping::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShellHandlerMapping::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ShellHandlerMapping.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShellHandlerMapping::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ShellHandlerMapping.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fshell_5ftransition_2eproto
