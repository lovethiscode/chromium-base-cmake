// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INSETSSOURCECONTROL_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_VIEW_INSETSSOURCECONTROL_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class PointProto;
class SurfaceControlProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class InsetsSourceControlProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  InsetsSourceControlProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit InsetsSourceControlProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit InsetsSourceControlProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_type() const { return at<1>().valid(); }
  ::protozero::ConstChars type() const { return at<1>().as_string(); }
  bool has_position() const { return at<2>().valid(); }
  ::protozero::ConstBytes position() const { return at<2>().as_bytes(); }
  bool has_leash() const { return at<3>().valid(); }
  ::protozero::ConstBytes leash() const { return at<3>().as_bytes(); }
  bool has_type_number() const { return at<4>().valid(); }
  int32_t type_number() const { return at<4>().as_int32(); }
};

class InsetsSourceControlProto : public ::protozero::Message {
 public:
  using Decoder = InsetsSourceControlProto_Decoder;
  enum : int32_t {
    kTypeFieldNumber = 1,
    kPositionFieldNumber = 2,
    kLeashFieldNumber = 3,
    kTypeNumberFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.InsetsSourceControlProto"; }


  using FieldMetadata_Type =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      InsetsSourceControlProto>;

  static constexpr FieldMetadata_Type kType{};
  void set_type(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Type::kFieldId, data, size);
  }
  void set_type(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Type::kFieldId, chars.data, chars.size);
  }
  void set_type(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Type::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Position =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      PointProto,
      InsetsSourceControlProto>;

  static constexpr FieldMetadata_Position kPosition{};
  template <typename T = PointProto> T* set_position() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_Leash =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SurfaceControlProto,
      InsetsSourceControlProto>;

  static constexpr FieldMetadata_Leash kLeash{};
  template <typename T = SurfaceControlProto> T* set_leash() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_TypeNumber =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      InsetsSourceControlProto>;

  static constexpr FieldMetadata_TypeNumber kTypeNumber{};
  void set_type_number(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TypeNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
