// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GRAPHICS_RECT_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GRAPHICS_RECT_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class RectProto;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT RectProto : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };

  RectProto();
  ~RectProto() override;
  RectProto(RectProto&&) noexcept;
  RectProto& operator=(RectProto&&);
  RectProto(const RectProto&);
  RectProto& operator=(const RectProto&);
  bool operator==(const RectProto&) const;
  bool operator!=(const RectProto& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_left() const { return _has_field_[1]; }
  int32_t left() const { return left_; }
  void set_left(int32_t value) { left_ = value; _has_field_.set(1); }

  bool has_top() const { return _has_field_[2]; }
  int32_t top() const { return top_; }
  void set_top(int32_t value) { top_ = value; _has_field_.set(2); }

  bool has_right() const { return _has_field_[3]; }
  int32_t right() const { return right_; }
  void set_right(int32_t value) { right_ = value; _has_field_.set(3); }

  bool has_bottom() const { return _has_field_[4]; }
  int32_t bottom() const { return bottom_; }
  void set_bottom(int32_t value) { bottom_ = value; _has_field_.set(4); }

 private:
  int32_t left_{};
  int32_t top_{};
  int32_t right_{};
  int32_t bottom_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_GRAPHICS_RECT_PROTO_CPP_H_
