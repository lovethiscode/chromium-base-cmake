// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/memory_graph.proto

#include "protos/perfetto/trace/memory_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_uint64_)*/uint64_t{0u}
  , /*decltype(_impl_.units_)*/0} {}
struct MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal() {}
  union {
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntryDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_default_instance_;
PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.absolute_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.size_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.weak_)*/false} {}
struct MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal() {}
  union {
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryTrackerSnapshot_ProcessSnapshot_MemoryNodeDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_default_instance_;
PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_id_)*/uint64_t{0u}
  , /*decltype(_impl_.target_id_)*/uint64_t{0u}
  , /*decltype(_impl_.importance_)*/0u
  , /*decltype(_impl_.overridable_)*/false} {}
struct MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal() {}
  union {
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdgeDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge_default_instance_;
PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshot::MemoryTrackerSnapshot_ProcessSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allocator_dumps_)*/{}
  , /*decltype(_impl_.memory_edges_)*/{}
  , /*decltype(_impl_.pid_)*/0} {}
struct MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal() {}
  union {
    MemoryTrackerSnapshot_ProcessSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryTrackerSnapshot_ProcessSnapshotDefaultTypeInternal _MemoryTrackerSnapshot_ProcessSnapshot_default_instance_;
PROTOBUF_CONSTEXPR MemoryTrackerSnapshot::MemoryTrackerSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.process_memory_dumps_)*/{}
  , /*decltype(_impl_.global_dump_id_)*/uint64_t{0u}
  , /*decltype(_impl_.level_of_detail_)*/0} {}
struct MemoryTrackerSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryTrackerSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryTrackerSnapshotDefaultTypeInternal() {}
  union {
    MemoryTrackerSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryTrackerSnapshotDefaultTypeInternal _MemoryTrackerSnapshot_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_strings[3] = {};

static const char MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names[] =
  "BYTES"
  "COUNT"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries[] = {
  { {MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names + 0, 5}, 1 },
  { {MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names + 5, 5}, 2 },
  { {MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_names + 10, 11}, 0 },
};

static const int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries_by_number[] = {
  2, // 0 -> UNSPECIFIED
  0, // 1 -> BYTES
  1, // 2 -> COUNT
};

const std::string& MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Name(
    MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries,
          MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries_by_number,
          3, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries,
      MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_strings[idx].get();
}
bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::UNSPECIFIED;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::BYTES;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::COUNT;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Units_MIN;
constexpr MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Units_MAX;
constexpr int MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Units_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool MemoryTrackerSnapshot_LevelOfDetail_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MemoryTrackerSnapshot_LevelOfDetail_strings[3] = {};

static const char MemoryTrackerSnapshot_LevelOfDetail_names[] =
  "DETAIL_BACKGROUND"
  "DETAIL_FULL"
  "DETAIL_LIGHT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MemoryTrackerSnapshot_LevelOfDetail_entries[] = {
  { {MemoryTrackerSnapshot_LevelOfDetail_names + 0, 17}, 2 },
  { {MemoryTrackerSnapshot_LevelOfDetail_names + 17, 11}, 0 },
  { {MemoryTrackerSnapshot_LevelOfDetail_names + 28, 12}, 1 },
};

static const int MemoryTrackerSnapshot_LevelOfDetail_entries_by_number[] = {
  1, // 0 -> DETAIL_FULL
  2, // 1 -> DETAIL_LIGHT
  0, // 2 -> DETAIL_BACKGROUND
};

const std::string& MemoryTrackerSnapshot_LevelOfDetail_Name(
    MemoryTrackerSnapshot_LevelOfDetail value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MemoryTrackerSnapshot_LevelOfDetail_entries,
          MemoryTrackerSnapshot_LevelOfDetail_entries_by_number,
          3, MemoryTrackerSnapshot_LevelOfDetail_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MemoryTrackerSnapshot_LevelOfDetail_entries,
      MemoryTrackerSnapshot_LevelOfDetail_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MemoryTrackerSnapshot_LevelOfDetail_strings[idx].get();
}
bool MemoryTrackerSnapshot_LevelOfDetail_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MemoryTrackerSnapshot_LevelOfDetail* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MemoryTrackerSnapshot_LevelOfDetail_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MemoryTrackerSnapshot_LevelOfDetail>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::DETAIL_FULL;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::DETAIL_LIGHT;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::DETAIL_BACKGROUND;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::LevelOfDetail_MIN;
constexpr MemoryTrackerSnapshot_LevelOfDetail MemoryTrackerSnapshot::LevelOfDetail_MAX;
constexpr int MemoryTrackerSnapshot::LevelOfDetail_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
}
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_string_){}
    , decltype(_impl_.value_uint64_){}
    , decltype(_impl_.units_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_string()) {
    _this->_impl_.value_string_.Set(from._internal_value_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_uint64_, &from._impl_.value_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.units_) -
    reinterpret_cast<char*>(&_impl_.value_uint64_)) + sizeof(_impl_.units_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
}

inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_string_){}
    , decltype(_impl_.value_uint64_){uint64_t{0u}}
    , decltype(_impl_.units_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_string_.Destroy();
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.value_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.units_) -
        reinterpret_cast<char*>(&_impl_.value_uint64_)) + sizeof(_impl_.units_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_IsValid(val))) {
            _internal_set_units(static_cast<::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value_uint64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value_uint64(&has_bits);
          _impl_.value_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_units(), target);
  }

  // optional uint64 value_uint64 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value_uint64(), target);
  }

  // optional string value_string = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  return target;
}

size_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value_string = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_string());
    }

    // optional uint64 value_uint64 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value_uint64());
    }

    // optional .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units units = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_units());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from) {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value_string(from._internal_value_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_uint64_ = from._impl_.value_uint64_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.units_ = from._impl_.units_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_string_, lhs_arena,
      &other->_impl_.value_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry, _impl_.units_)
      + sizeof(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::_impl_.units_)
      - PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry, _impl_.value_uint64_)>(
          reinterpret_cast<char*>(&_impl_.value_uint64_),
          reinterpret_cast<char*>(&other->_impl_.value_uint64_));
}

std::string MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry";
}


// ===================================================================

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_absolute_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weak(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
}
MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.absolute_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.size_bytes_){}
    , decltype(_impl_.weak_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.absolute_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.absolute_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_absolute_name()) {
    _this->_impl_.absolute_name_.Set(from._internal_absolute_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weak_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.weak_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
}

inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.absolute_name_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.size_bytes_){uint64_t{0u}}
    , decltype(_impl_.weak_){false}
  };
  _impl_.absolute_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.absolute_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::~MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.absolute_name_.Destroy();
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.absolute_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.weak_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.weak_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string absolute_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_absolute_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool weak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_weak(&has_bits);
          _impl_.weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 size_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_size_bytes(&has_bits);
          _impl_.size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string absolute_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_absolute_name(), target);
  }

  // optional bool weak = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_weak(), target);
  }

  // optional uint64 size_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_size_bytes(), target);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  return target;
}

size_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string absolute_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_absolute_name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint64 size_bytes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size_bytes());
    }

    // optional bool weak = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from) {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_absolute_name(from._internal_absolute_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.size_bytes_ = from._impl_.size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.weak_ = from._impl_.weak_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.absolute_name_, lhs_arena,
      &other->_impl_.absolute_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode, _impl_.weak_)
      + sizeof(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::_impl_.weak_)
      - PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

std::string MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode";
}


// ===================================================================

class MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge>()._impl_._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_importance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_overridable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
}
MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.importance_){}
    , decltype(_impl_.overridable_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.source_id_, &from._impl_.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.overridable_) -
    reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.overridable_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
}

inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_id_){uint64_t{0u}}
    , decltype(_impl_.target_id_){uint64_t{0u}}
    , decltype(_impl_.importance_){0u}
    , decltype(_impl_.overridable_){false}
  };
}

MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::~MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.overridable_) -
        reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.overridable_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          _impl_.source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_id(&has_bits);
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 importance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_importance(&has_bits);
          _impl_.importance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool overridable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_overridable(&has_bits);
          _impl_.overridable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_source_id(), target);
  }

  // optional uint64 target_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  // optional uint32 importance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_importance(), target);
  }

  // optional bool overridable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_overridable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  return target;
}

size_t MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_id());
    }

    // optional uint64 target_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_id());
    }

    // optional uint32 importance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_importance());
    }

    // optional bool overridable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from) {
  MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_id_ = from._impl_.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_id_ = from._impl_.target_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.importance_ = from._impl_.importance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.overridable_ = from._impl_.overridable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge, _impl_.overridable_)
      + sizeof(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::_impl_.overridable_)
      - PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

std::string MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge";
}


// ===================================================================

class MemoryTrackerSnapshot_ProcessSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot_ProcessSnapshot>()._impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MemoryTrackerSnapshot_ProcessSnapshot::MemoryTrackerSnapshot_ProcessSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
}
MemoryTrackerSnapshot_ProcessSnapshot::MemoryTrackerSnapshot_ProcessSnapshot(const MemoryTrackerSnapshot_ProcessSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemoryTrackerSnapshot_ProcessSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allocator_dumps_){from._impl_.allocator_dumps_}
    , decltype(_impl_.memory_edges_){from._impl_.memory_edges_}
    , decltype(_impl_.pid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
}

inline void MemoryTrackerSnapshot_ProcessSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allocator_dumps_){arena}
    , decltype(_impl_.memory_edges_){arena}
    , decltype(_impl_.pid_){0}
  };
}

MemoryTrackerSnapshot_ProcessSnapshot::~MemoryTrackerSnapshot_ProcessSnapshot() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryTrackerSnapshot_ProcessSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allocator_dumps_.~RepeatedPtrField();
  _impl_.memory_edges_.~RepeatedPtrField();
}

void MemoryTrackerSnapshot_ProcessSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryTrackerSnapshot_ProcessSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allocator_dumps_.Clear();
  _impl_.memory_edges_.Clear();
  _impl_.pid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryTrackerSnapshot_ProcessSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allocator_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memory_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryTrackerSnapshot_ProcessSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allocator_dumps_size()); i < n; i++) {
    const auto& repfield = this->_internal_allocator_dumps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_memory_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_memory_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  return target;
}

size_t MemoryTrackerSnapshot_ProcessSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode allocator_dumps = 2;
  total_size += 1UL * this->_internal_allocator_dumps_size();
  for (const auto& msg : this->_impl_.allocator_dumps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge memory_edges = 3;
  total_size += 1UL * this->_internal_memory_edges_size();
  for (const auto& msg : this->_impl_.memory_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 pid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot_ProcessSnapshot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryTrackerSnapshot_ProcessSnapshot*>(
      &from));
}

void MemoryTrackerSnapshot_ProcessSnapshot::MergeFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from) {
  MemoryTrackerSnapshot_ProcessSnapshot* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allocator_dumps_.MergeFrom(from._impl_.allocator_dumps_);
  _this->_impl_.memory_edges_.MergeFrom(from._impl_.memory_edges_);
  if (from._internal_has_pid()) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryTrackerSnapshot_ProcessSnapshot::CopyFrom(const MemoryTrackerSnapshot_ProcessSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot_ProcessSnapshot::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot_ProcessSnapshot::InternalSwap(MemoryTrackerSnapshot_ProcessSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allocator_dumps_.InternalSwap(&other->_impl_.allocator_dumps_);
  _impl_.memory_edges_.InternalSwap(&other->_impl_.memory_edges_);
  swap(_impl_.pid_, other->_impl_.pid_);
}

std::string MemoryTrackerSnapshot_ProcessSnapshot::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot";
}


// ===================================================================

class MemoryTrackerSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryTrackerSnapshot>()._impl_._has_bits_);
  static void set_has_global_dump_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level_of_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MemoryTrackerSnapshot::MemoryTrackerSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MemoryTrackerSnapshot)
}
MemoryTrackerSnapshot::MemoryTrackerSnapshot(const MemoryTrackerSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemoryTrackerSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_memory_dumps_){from._impl_.process_memory_dumps_}
    , decltype(_impl_.global_dump_id_){}
    , decltype(_impl_.level_of_detail_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.global_dump_id_, &from._impl_.global_dump_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_of_detail_) -
    reinterpret_cast<char*>(&_impl_.global_dump_id_)) + sizeof(_impl_.level_of_detail_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MemoryTrackerSnapshot)
}

inline void MemoryTrackerSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_memory_dumps_){arena}
    , decltype(_impl_.global_dump_id_){uint64_t{0u}}
    , decltype(_impl_.level_of_detail_){0}
  };
}

MemoryTrackerSnapshot::~MemoryTrackerSnapshot() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MemoryTrackerSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryTrackerSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_memory_dumps_.~RepeatedPtrField();
}

void MemoryTrackerSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryTrackerSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MemoryTrackerSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_memory_dumps_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.global_dump_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.level_of_detail_) -
        reinterpret_cast<char*>(&_impl_.global_dump_id_)) + sizeof(_impl_.level_of_detail_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryTrackerSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 global_dump_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_global_dump_id(&has_bits);
          _impl_.global_dump_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail_IsValid(val))) {
            _internal_set_level_of_detail(static_cast<::perfetto::protos::MemoryTrackerSnapshot_LevelOfDetail>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_process_memory_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryTrackerSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MemoryTrackerSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 global_dump_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_global_dump_id(), target);
  }

  // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level_of_detail(), target);
  }

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_process_memory_dumps_size()); i < n; i++) {
    const auto& repfield = this->_internal_process_memory_dumps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MemoryTrackerSnapshot)
  return target;
}

size_t MemoryTrackerSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MemoryTrackerSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot process_memory_dumps = 3;
  total_size += 1UL * this->_internal_process_memory_dumps_size();
  for (const auto& msg : this->_impl_.process_memory_dumps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 global_dump_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_global_dump_id());
    }

    // optional .perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail level_of_detail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_level_of_detail());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryTrackerSnapshot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryTrackerSnapshot*>(
      &from));
}

void MemoryTrackerSnapshot::MergeFrom(const MemoryTrackerSnapshot& from) {
  MemoryTrackerSnapshot* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MemoryTrackerSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.process_memory_dumps_.MergeFrom(from._impl_.process_memory_dumps_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.global_dump_id_ = from._impl_.global_dump_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.level_of_detail_ = from._impl_.level_of_detail_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryTrackerSnapshot::CopyFrom(const MemoryTrackerSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MemoryTrackerSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTrackerSnapshot::IsInitialized() const {
  return true;
}

void MemoryTrackerSnapshot::InternalSwap(MemoryTrackerSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.process_memory_dumps_.InternalSwap(&other->_impl_.process_memory_dumps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot, _impl_.level_of_detail_)
      + sizeof(MemoryTrackerSnapshot::_impl_.level_of_detail_)
      - PROTOBUF_FIELD_OFFSET(MemoryTrackerSnapshot, _impl_.global_dump_id_)>(
          reinterpret_cast<char*>(&_impl_.global_dump_id_),
          reinterpret_cast<char*>(&other->_impl_.global_dump_id_));
}

std::string MemoryTrackerSnapshot::GetTypeName() const {
  return "perfetto.protos.MemoryTrackerSnapshot";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry*
Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode*
Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge*
Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot*
Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MemoryTrackerSnapshot_ProcessSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MemoryTrackerSnapshot*
Arena::CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MemoryTrackerSnapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
