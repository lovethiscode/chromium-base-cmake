#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ps/process_tree.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ProcessTree::ProcessTree() = default;
ProcessTree::~ProcessTree() = default;
ProcessTree::ProcessTree(const ProcessTree&) = default;
ProcessTree& ProcessTree::operator=(const ProcessTree&) = default;
ProcessTree::ProcessTree(ProcessTree&&) noexcept = default;
ProcessTree& ProcessTree::operator=(ProcessTree&&) = default;

bool ProcessTree::operator==(const ProcessTree& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(processes_, other.processes_)
   && ::protozero::internal::gen_helpers::EqualsField(threads_, other.threads_)
   && ::protozero::internal::gen_helpers::EqualsField(collection_end_timestamp_, other.collection_end_timestamp_);
}

int ProcessTree::processes_size() const { return static_cast<int>(processes_.size()); }
void ProcessTree::clear_processes() { processes_.clear(); }
ProcessTree_Process* ProcessTree::add_processes() { processes_.emplace_back(); return &processes_.back(); }
int ProcessTree::threads_size() const { return static_cast<int>(threads_.size()); }
void ProcessTree::clear_threads() { threads_.clear(); }
ProcessTree_Thread* ProcessTree::add_threads() { threads_.emplace_back(); return &threads_.back(); }
bool ProcessTree::ParseFromArray(const void* raw, size_t size) {
  processes_.clear();
  threads_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* processes */:
        processes_.emplace_back();
        processes_.back().ParseFromArray(field.data(), field.size());
        break;
      case 2 /* threads */:
        threads_.emplace_back();
        threads_.back().ParseFromArray(field.data(), field.size());
        break;
      case 3 /* collection_end_timestamp */:
        field.get(&collection_end_timestamp_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessTree::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessTree::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessTree::Serialize(::protozero::Message* msg) const {
  // Field 1: processes
  for (auto& it : processes_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(1));
  }

  // Field 2: threads
  for (auto& it : threads_) {
    it.Serialize(msg->BeginNestedMessage<::protozero::Message>(2));
  }

  // Field 3: collection_end_timestamp
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, collection_end_timestamp_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ProcessTree_Thread::ProcessTree_Thread() = default;
ProcessTree_Thread::~ProcessTree_Thread() = default;
ProcessTree_Thread::ProcessTree_Thread(const ProcessTree_Thread&) = default;
ProcessTree_Thread& ProcessTree_Thread::operator=(const ProcessTree_Thread&) = default;
ProcessTree_Thread::ProcessTree_Thread(ProcessTree_Thread&&) noexcept = default;
ProcessTree_Thread& ProcessTree_Thread::operator=(ProcessTree_Thread&&) = default;

bool ProcessTree_Thread::operator==(const ProcessTree_Thread& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(tid_, other.tid_)
   && ::protozero::internal::gen_helpers::EqualsField(tgid_, other.tgid_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(nstid_, other.nstid_);
}

bool ProcessTree_Thread::ParseFromArray(const void* raw, size_t size) {
  nstid_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* tid */:
        field.get(&tid_);
        break;
      case 3 /* tgid */:
        field.get(&tgid_);
        break;
      case 2 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 4 /* nstid */:
        nstid_.emplace_back();
        field.get(&nstid_.back());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessTree_Thread::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessTree_Thread::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessTree_Thread::Serialize(::protozero::Message* msg) const {
  // Field 1: tid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, tid_, msg);
  }

  // Field 3: tgid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, tgid_, msg);
  }

  // Field 2: name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, name_, msg);
  }

  // Field 4: nstid
  for (auto& it : nstid_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, it, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ProcessTree_Process::ProcessTree_Process() = default;
ProcessTree_Process::~ProcessTree_Process() = default;
ProcessTree_Process::ProcessTree_Process(const ProcessTree_Process&) = default;
ProcessTree_Process& ProcessTree_Process::operator=(const ProcessTree_Process&) = default;
ProcessTree_Process::ProcessTree_Process(ProcessTree_Process&&) noexcept = default;
ProcessTree_Process& ProcessTree_Process::operator=(ProcessTree_Process&&) = default;

bool ProcessTree_Process::operator==(const ProcessTree_Process& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(ppid_, other.ppid_)
   && ::protozero::internal::gen_helpers::EqualsField(cmdline_, other.cmdline_)
   && ::protozero::internal::gen_helpers::EqualsField(uid_, other.uid_)
   && ::protozero::internal::gen_helpers::EqualsField(nspid_, other.nspid_)
   && ::protozero::internal::gen_helpers::EqualsField(process_start_from_boot_, other.process_start_from_boot_);
}

bool ProcessTree_Process::ParseFromArray(const void* raw, size_t size) {
  cmdline_.clear();
  nspid_.clear();
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* ppid */:
        field.get(&ppid_);
        break;
      case 3 /* cmdline */:
        cmdline_.emplace_back();
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmdline_.back());
        break;
      case 5 /* uid */:
        field.get(&uid_);
        break;
      case 6 /* nspid */:
        nspid_.emplace_back();
        field.get(&nspid_.back());
        break;
      case 7 /* process_start_from_boot */:
        field.get(&process_start_from_boot_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ProcessTree_Process::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ProcessTree_Process::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ProcessTree_Process::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, pid_, msg);
  }

  // Field 2: ppid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ppid_, msg);
  }

  // Field 3: cmdline
  for (auto& it : cmdline_) {
    ::protozero::internal::gen_helpers::SerializeString(3, it, msg);
  }

  // Field 5: uid
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, uid_, msg);
  }

  // Field 6: nspid
  for (auto& it : nspid_) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, it, msg);
  }

  // Field 7: process_start_from_boot
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, process_start_from_boot_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
