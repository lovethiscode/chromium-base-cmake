// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_stats.proto

#include "protos/perfetto/trace/ps/process_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ProcessStats_Thread::ProcessStats_Thread(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tid_)*/0} {}
struct ProcessStats_ThreadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStats_ThreadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStats_ThreadDefaultTypeInternal() {}
  union {
    ProcessStats_Thread _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStats_ThreadDefaultTypeInternal _ProcessStats_Thread_default_instance_;
PROTOBUF_CONSTEXPR ProcessStats_FDInfo::ProcessStats_FDInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fd_)*/uint64_t{0u}} {}
struct ProcessStats_FDInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStats_FDInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStats_FDInfoDefaultTypeInternal() {}
  union {
    ProcessStats_FDInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStats_FDInfoDefaultTypeInternal _ProcessStats_FDInfo_default_instance_;
PROTOBUF_CONSTEXPR ProcessStats_Process::ProcessStats_Process(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threads_)*/{}
  , /*decltype(_impl_.fds_)*/{}
  , /*decltype(_impl_.vm_size_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.vm_rss_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.rss_anon_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.rss_file_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.rss_shmem_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.is_peak_rss_resettable_)*/false
  , /*decltype(_impl_.vm_swap_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.vm_locked_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.vm_hwm_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.oom_score_adj_)*/int64_t{0}
  , /*decltype(_impl_.chrome_private_footprint_kb_)*/0u
  , /*decltype(_impl_.chrome_peak_resident_set_kb_)*/0u
  , /*decltype(_impl_.smr_rss_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.smr_pss_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.smr_pss_anon_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.smr_pss_file_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.smr_pss_shmem_kb_)*/uint64_t{0u}
  , /*decltype(_impl_.runtime_user_mode_)*/uint64_t{0u}
  , /*decltype(_impl_.runtime_kernel_mode_)*/uint64_t{0u}
  , /*decltype(_impl_.smr_swap_pss_kb_)*/uint64_t{0u}} {}
struct ProcessStats_ProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStats_ProcessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStats_ProcessDefaultTypeInternal() {}
  union {
    ProcessStats_Process _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStats_ProcessDefaultTypeInternal _ProcessStats_Process_default_instance_;
PROTOBUF_CONSTEXPR ProcessStats::ProcessStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.processes_)*/{}
  , /*decltype(_impl_.collection_end_timestamp_)*/uint64_t{0u}} {}
struct ProcessStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStatsDefaultTypeInternal() {}
  union {
    ProcessStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStatsDefaultTypeInternal _ProcessStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class ProcessStats_Thread::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats_Thread>()._impl_._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessStats_Thread::ProcessStats_Thread(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats.Thread)
}
ProcessStats_Thread::ProcessStats_Thread(const ProcessStats_Thread& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProcessStats_Thread* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.tid_ = from._impl_.tid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats.Thread)
}

inline void ProcessStats_Thread::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tid_){0}
  };
}

ProcessStats_Thread::~ProcessStats_Thread() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats.Thread)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats_Thread::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessStats_Thread::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats_Thread::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats.Thread)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProcessStats_Thread::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessStats_Thread::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats.Thread)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats.Thread)
  return target;
}

size_t ProcessStats_Thread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats.Thread)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 tid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessStats_Thread::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProcessStats_Thread*>(
      &from));
}

void ProcessStats_Thread::MergeFrom(const ProcessStats_Thread& from) {
  ProcessStats_Thread* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats.Thread)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tid()) {
    _this->_internal_set_tid(from._internal_tid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProcessStats_Thread::CopyFrom(const ProcessStats_Thread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats.Thread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats_Thread::IsInitialized() const {
  return true;
}

void ProcessStats_Thread::InternalSwap(ProcessStats_Thread* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tid_, other->_impl_.tid_);
}

std::string ProcessStats_Thread::GetTypeName() const {
  return "perfetto.protos.ProcessStats.Thread";
}


// ===================================================================

class ProcessStats_FDInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats_FDInfo>()._impl_._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessStats_FDInfo::ProcessStats_FDInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats.FDInfo)
}
ProcessStats_FDInfo::ProcessStats_FDInfo(const ProcessStats_FDInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProcessStats_FDInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}
    , decltype(_impl_.fd_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.fd_ = from._impl_.fd_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats.FDInfo)
}

inline void ProcessStats_FDInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}
    , decltype(_impl_.fd_){uint64_t{0u}}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessStats_FDInfo::~ProcessStats_FDInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats.FDInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats_FDInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void ProcessStats_FDInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats_FDInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats.FDInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_.ClearNonDefaultToEmpty();
  }
  _impl_.fd_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProcessStats_FDInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fd(&has_bits);
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessStats_FDInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats.FDInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 fd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fd(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats.FDInfo)
  return target;
}

size_t ProcessStats_FDInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats.FDInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional uint64 fd = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessStats_FDInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProcessStats_FDInfo*>(
      &from));
}

void ProcessStats_FDInfo::MergeFrom(const ProcessStats_FDInfo& from) {
  ProcessStats_FDInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats.FDInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fd_ = from._impl_.fd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProcessStats_FDInfo::CopyFrom(const ProcessStats_FDInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats.FDInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats_FDInfo::IsInitialized() const {
  return true;
}

void ProcessStats_FDInfo::InternalSwap(ProcessStats_FDInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.fd_, other->_impl_.fd_);
}

std::string ProcessStats_FDInfo::GetTypeName() const {
  return "perfetto.protos.ProcessStats.FDInfo";
}


// ===================================================================

class ProcessStats_Process::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats_Process>()._impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vm_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vm_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rss_anon_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rss_file_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rss_shmem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vm_swap_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vm_locked_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vm_hwm_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_oom_score_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_peak_rss_resettable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chrome_private_footprint_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chrome_peak_resident_set_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_smr_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_smr_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_smr_pss_anon_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_smr_pss_file_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_smr_pss_shmem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_smr_swap_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_runtime_user_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_runtime_kernel_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

ProcessStats_Process::ProcessStats_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats.Process)
}
ProcessStats_Process::ProcessStats_Process(const ProcessStats_Process& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProcessStats_Process* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){from._impl_.threads_}
    , decltype(_impl_.fds_){from._impl_.fds_}
    , decltype(_impl_.vm_size_kb_){}
    , decltype(_impl_.vm_rss_kb_){}
    , decltype(_impl_.rss_anon_kb_){}
    , decltype(_impl_.rss_file_kb_){}
    , decltype(_impl_.rss_shmem_kb_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.is_peak_rss_resettable_){}
    , decltype(_impl_.vm_swap_kb_){}
    , decltype(_impl_.vm_locked_kb_){}
    , decltype(_impl_.vm_hwm_kb_){}
    , decltype(_impl_.oom_score_adj_){}
    , decltype(_impl_.chrome_private_footprint_kb_){}
    , decltype(_impl_.chrome_peak_resident_set_kb_){}
    , decltype(_impl_.smr_rss_kb_){}
    , decltype(_impl_.smr_pss_kb_){}
    , decltype(_impl_.smr_pss_anon_kb_){}
    , decltype(_impl_.smr_pss_file_kb_){}
    , decltype(_impl_.smr_pss_shmem_kb_){}
    , decltype(_impl_.runtime_user_mode_){}
    , decltype(_impl_.runtime_kernel_mode_){}
    , decltype(_impl_.smr_swap_pss_kb_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.vm_size_kb_, &from._impl_.vm_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.smr_swap_pss_kb_) -
    reinterpret_cast<char*>(&_impl_.vm_size_kb_)) + sizeof(_impl_.smr_swap_pss_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats.Process)
}

inline void ProcessStats_Process::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){arena}
    , decltype(_impl_.fds_){arena}
    , decltype(_impl_.vm_size_kb_){uint64_t{0u}}
    , decltype(_impl_.vm_rss_kb_){uint64_t{0u}}
    , decltype(_impl_.rss_anon_kb_){uint64_t{0u}}
    , decltype(_impl_.rss_file_kb_){uint64_t{0u}}
    , decltype(_impl_.rss_shmem_kb_){uint64_t{0u}}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.is_peak_rss_resettable_){false}
    , decltype(_impl_.vm_swap_kb_){uint64_t{0u}}
    , decltype(_impl_.vm_locked_kb_){uint64_t{0u}}
    , decltype(_impl_.vm_hwm_kb_){uint64_t{0u}}
    , decltype(_impl_.oom_score_adj_){int64_t{0}}
    , decltype(_impl_.chrome_private_footprint_kb_){0u}
    , decltype(_impl_.chrome_peak_resident_set_kb_){0u}
    , decltype(_impl_.smr_rss_kb_){uint64_t{0u}}
    , decltype(_impl_.smr_pss_kb_){uint64_t{0u}}
    , decltype(_impl_.smr_pss_anon_kb_){uint64_t{0u}}
    , decltype(_impl_.smr_pss_file_kb_){uint64_t{0u}}
    , decltype(_impl_.smr_pss_shmem_kb_){uint64_t{0u}}
    , decltype(_impl_.runtime_user_mode_){uint64_t{0u}}
    , decltype(_impl_.runtime_kernel_mode_){uint64_t{0u}}
    , decltype(_impl_.smr_swap_pss_kb_){uint64_t{0u}}
  };
}

ProcessStats_Process::~ProcessStats_Process() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats.Process)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats_Process::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threads_.~RepeatedPtrField();
  _impl_.fds_.~RepeatedPtrField();
}

void ProcessStats_Process::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats.Process)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threads_.Clear();
  _impl_.fds_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vm_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vm_swap_kb_) -
        reinterpret_cast<char*>(&_impl_.vm_size_kb_)) + sizeof(_impl_.vm_swap_kb_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.vm_locked_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.smr_pss_anon_kb_) -
        reinterpret_cast<char*>(&_impl_.vm_locked_kb_)) + sizeof(_impl_.smr_pss_anon_kb_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.smr_pss_file_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.smr_swap_pss_kb_) -
        reinterpret_cast<char*>(&_impl_.smr_pss_file_kb_)) + sizeof(_impl_.smr_swap_pss_kb_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProcessStats_Process::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vm_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vm_size_kb(&has_bits);
          _impl_.vm_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vm_rss_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vm_rss_kb(&has_bits);
          _impl_.vm_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rss_anon_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rss_anon_kb(&has_bits);
          _impl_.rss_anon_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rss_file_kb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rss_file_kb(&has_bits);
          _impl_.rss_file_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rss_shmem_kb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rss_shmem_kb(&has_bits);
          _impl_.rss_shmem_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vm_swap_kb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_vm_swap_kb(&has_bits);
          _impl_.vm_swap_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vm_locked_kb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_vm_locked_kb(&has_bits);
          _impl_.vm_locked_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 vm_hwm_kb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_vm_hwm_kb(&has_bits);
          _impl_.vm_hwm_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 oom_score_adj = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_oom_score_adj(&has_bits);
          _impl_.oom_score_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_peak_rss_resettable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_peak_rss_resettable(&has_bits);
          _impl_.is_peak_rss_resettable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chrome_private_footprint_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_chrome_private_footprint_kb(&has_bits);
          _impl_.chrome_private_footprint_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chrome_peak_resident_set_kb = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_chrome_peak_resident_set_kb(&has_bits);
          _impl_.chrome_peak_resident_set_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 smr_rss_kb = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_smr_rss_kb(&has_bits);
          _impl_.smr_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 smr_pss_kb = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_smr_pss_kb(&has_bits);
          _impl_.smr_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 smr_pss_anon_kb = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_smr_pss_anon_kb(&has_bits);
          _impl_.smr_pss_anon_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 smr_pss_file_kb = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_smr_pss_file_kb(&has_bits);
          _impl_.smr_pss_file_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 smr_pss_shmem_kb = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_smr_pss_shmem_kb(&has_bits);
          _impl_.smr_pss_shmem_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 runtime_user_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_runtime_user_mode(&has_bits);
          _impl_.runtime_user_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 runtime_kernel_mode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_runtime_kernel_mode(&has_bits);
          _impl_.runtime_kernel_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 smr_swap_pss_kb = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_smr_swap_pss_kb(&has_bits);
          _impl_.smr_swap_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessStats_Process::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats.Process)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // optional uint64 vm_size_kb = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_vm_size_kb(), target);
  }

  // optional uint64 vm_rss_kb = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_vm_rss_kb(), target);
  }

  // optional uint64 rss_anon_kb = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rss_anon_kb(), target);
  }

  // optional uint64 rss_file_kb = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rss_file_kb(), target);
  }

  // optional uint64 rss_shmem_kb = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_rss_shmem_kb(), target);
  }

  // optional uint64 vm_swap_kb = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_vm_swap_kb(), target);
  }

  // optional uint64 vm_locked_kb = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_vm_locked_kb(), target);
  }

  // optional uint64 vm_hwm_kb = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_vm_hwm_kb(), target);
  }

  // optional int64 oom_score_adj = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_oom_score_adj(), target);
  }

  // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threads_size()); i < n; i++) {
    const auto& repfield = this->_internal_threads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_peak_rss_resettable = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_peak_rss_resettable(), target);
  }

  // optional uint32 chrome_private_footprint_kb = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_chrome_private_footprint_kb(), target);
  }

  // optional uint32 chrome_peak_resident_set_kb = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_chrome_peak_resident_set_kb(), target);
  }

  // repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fds_size()); i < n; i++) {
    const auto& repfield = this->_internal_fds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 smr_rss_kb = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_smr_rss_kb(), target);
  }

  // optional uint64 smr_pss_kb = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_smr_pss_kb(), target);
  }

  // optional uint64 smr_pss_anon_kb = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_smr_pss_anon_kb(), target);
  }

  // optional uint64 smr_pss_file_kb = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_smr_pss_file_kb(), target);
  }

  // optional uint64 smr_pss_shmem_kb = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_smr_pss_shmem_kb(), target);
  }

  // optional uint64 runtime_user_mode = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_runtime_user_mode(), target);
  }

  // optional uint64 runtime_kernel_mode = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_runtime_kernel_mode(), target);
  }

  // optional uint64 smr_swap_pss_kb = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_smr_swap_pss_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats.Process)
  return target;
}

size_t ProcessStats_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats.Process)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
  total_size += 1UL * this->_internal_threads_size();
  for (const auto& msg : this->_impl_.threads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
  total_size += 1UL * this->_internal_fds_size();
  for (const auto& msg : this->_impl_.fds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 vm_size_kb = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vm_size_kb());
    }

    // optional uint64 vm_rss_kb = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vm_rss_kb());
    }

    // optional uint64 rss_anon_kb = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rss_anon_kb());
    }

    // optional uint64 rss_file_kb = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rss_file_kb());
    }

    // optional uint64 rss_shmem_kb = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rss_shmem_kb());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional bool is_peak_rss_resettable = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 vm_swap_kb = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vm_swap_kb());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 vm_locked_kb = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vm_locked_kb());
    }

    // optional uint64 vm_hwm_kb = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vm_hwm_kb());
    }

    // optional int64 oom_score_adj = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oom_score_adj());
    }

    // optional uint32 chrome_private_footprint_kb = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chrome_private_footprint_kb());
    }

    // optional uint32 chrome_peak_resident_set_kb = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chrome_peak_resident_set_kb());
    }

    // optional uint64 smr_rss_kb = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_smr_rss_kb());
    }

    // optional uint64 smr_pss_kb = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_smr_pss_kb());
    }

    // optional uint64 smr_pss_anon_kb = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_smr_pss_anon_kb());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint64 smr_pss_file_kb = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_smr_pss_file_kb());
    }

    // optional uint64 smr_pss_shmem_kb = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_smr_pss_shmem_kb());
    }

    // optional uint64 runtime_user_mode = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_runtime_user_mode());
    }

    // optional uint64 runtime_kernel_mode = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_runtime_kernel_mode());
    }

    // optional uint64 smr_swap_pss_kb = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_smr_swap_pss_kb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessStats_Process::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProcessStats_Process*>(
      &from));
}

void ProcessStats_Process::MergeFrom(const ProcessStats_Process& from) {
  ProcessStats_Process* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats.Process)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.threads_.MergeFrom(from._impl_.threads_);
  _this->_impl_.fds_.MergeFrom(from._impl_.fds_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.vm_size_kb_ = from._impl_.vm_size_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vm_rss_kb_ = from._impl_.vm_rss_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rss_anon_kb_ = from._impl_.rss_anon_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rss_file_kb_ = from._impl_.rss_file_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rss_shmem_kb_ = from._impl_.rss_shmem_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_peak_rss_resettable_ = from._impl_.is_peak_rss_resettable_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.vm_swap_kb_ = from._impl_.vm_swap_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.vm_locked_kb_ = from._impl_.vm_locked_kb_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.vm_hwm_kb_ = from._impl_.vm_hwm_kb_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.oom_score_adj_ = from._impl_.oom_score_adj_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.chrome_private_footprint_kb_ = from._impl_.chrome_private_footprint_kb_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.chrome_peak_resident_set_kb_ = from._impl_.chrome_peak_resident_set_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.smr_rss_kb_ = from._impl_.smr_rss_kb_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.smr_pss_kb_ = from._impl_.smr_pss_kb_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.smr_pss_anon_kb_ = from._impl_.smr_pss_anon_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.smr_pss_file_kb_ = from._impl_.smr_pss_file_kb_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.smr_pss_shmem_kb_ = from._impl_.smr_pss_shmem_kb_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.runtime_user_mode_ = from._impl_.runtime_user_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.runtime_kernel_mode_ = from._impl_.runtime_kernel_mode_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.smr_swap_pss_kb_ = from._impl_.smr_swap_pss_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProcessStats_Process::CopyFrom(const ProcessStats_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats_Process::IsInitialized() const {
  return true;
}

void ProcessStats_Process::InternalSwap(ProcessStats_Process* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.threads_.InternalSwap(&other->_impl_.threads_);
  _impl_.fds_.InternalSwap(&other->_impl_.fds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessStats_Process, _impl_.smr_swap_pss_kb_)
      + sizeof(ProcessStats_Process::_impl_.smr_swap_pss_kb_)
      - PROTOBUF_FIELD_OFFSET(ProcessStats_Process, _impl_.vm_size_kb_)>(
          reinterpret_cast<char*>(&_impl_.vm_size_kb_),
          reinterpret_cast<char*>(&other->_impl_.vm_size_kb_));
}

std::string ProcessStats_Process::GetTypeName() const {
  return "perfetto.protos.ProcessStats.Process";
}


// ===================================================================

class ProcessStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats>()._impl_._has_bits_);
  static void set_has_collection_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessStats::ProcessStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats)
}
ProcessStats::ProcessStats(const ProcessStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProcessStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.processes_){from._impl_.processes_}
    , decltype(_impl_.collection_end_timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.collection_end_timestamp_ = from._impl_.collection_end_timestamp_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats)
}

inline void ProcessStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.processes_){arena}
    , decltype(_impl_.collection_end_timestamp_){uint64_t{0u}}
  };
}

ProcessStats::~ProcessStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processes_.~RepeatedPtrField();
}

void ProcessStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processes_.Clear();
  _impl_.collection_end_timestamp_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProcessStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProcessStats.Process processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 collection_end_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_collection_end_timestamp(&has_bits);
          _impl_.collection_end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStats.Process processes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_processes_size()); i < n; i++) {
    const auto& repfield = this->_internal_processes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 collection_end_timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_collection_end_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats)
  return target;
}

size_t ProcessStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStats.Process processes = 1;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->_impl_.processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 collection_end_timestamp = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_collection_end_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProcessStats*>(
      &from));
}

void ProcessStats::MergeFrom(const ProcessStats& from) {
  ProcessStats* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.processes_.MergeFrom(from._impl_.processes_);
  if (from._internal_has_collection_end_timestamp()) {
    _this->_internal_set_collection_end_timestamp(from._internal_collection_end_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProcessStats::CopyFrom(const ProcessStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats::IsInitialized() const {
  return true;
}

void ProcessStats::InternalSwap(ProcessStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.processes_.InternalSwap(&other->_impl_.processes_);
  swap(_impl_.collection_end_timestamp_, other->_impl_.collection_end_timestamp_);
}

std::string ProcessStats::GetTypeName() const {
  return "perfetto.protos.ProcessStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats_Thread*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats_Thread >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats_Thread >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats_FDInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats_FDInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats_FDInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats_Process*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats_Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
