// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class ProcessStats;
struct ProcessStatsDefaultTypeInternal;
extern ProcessStatsDefaultTypeInternal _ProcessStats_default_instance_;
class ProcessStats_FDInfo;
struct ProcessStats_FDInfoDefaultTypeInternal;
extern ProcessStats_FDInfoDefaultTypeInternal _ProcessStats_FDInfo_default_instance_;
class ProcessStats_Process;
struct ProcessStats_ProcessDefaultTypeInternal;
extern ProcessStats_ProcessDefaultTypeInternal _ProcessStats_Process_default_instance_;
class ProcessStats_Thread;
struct ProcessStats_ThreadDefaultTypeInternal;
extern ProcessStats_ThreadDefaultTypeInternal _ProcessStats_Thread_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ProcessStats* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStats>(Arena*);
template<> ::perfetto::protos::ProcessStats_FDInfo* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStats_FDInfo>(Arena*);
template<> ::perfetto::protos::ProcessStats_Process* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStats_Process>(Arena*);
template<> ::perfetto::protos::ProcessStats_Thread* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStats_Thread>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ProcessStats_Thread final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStats.Thread) */ {
 public:
  inline ProcessStats_Thread() : ProcessStats_Thread(nullptr) {}
  ~ProcessStats_Thread() override;
  explicit PROTOBUF_CONSTEXPR ProcessStats_Thread(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStats_Thread(const ProcessStats_Thread& from);
  ProcessStats_Thread(ProcessStats_Thread&& from) noexcept
    : ProcessStats_Thread() {
    *this = ::std::move(from);
  }

  inline ProcessStats_Thread& operator=(const ProcessStats_Thread& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStats_Thread& operator=(ProcessStats_Thread&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProcessStats_Thread& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStats_Thread* internal_default_instance() {
    return reinterpret_cast<const ProcessStats_Thread*>(
               &_ProcessStats_Thread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessStats_Thread& a, ProcessStats_Thread& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProcessStats_Thread* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStats_Thread* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStats_Thread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStats_Thread>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProcessStats_Thread& from);
  void MergeFrom(const ProcessStats_Thread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStats_Thread* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStats.Thread";
  }
  protected:
  explicit ProcessStats_Thread(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
  };
  // optional int32 tid = 1;
  bool has_tid() const;
  private:
  bool _internal_has_tid() const;
  public:
  void clear_tid();
  int32_t tid() const;
  void set_tid(int32_t value);
  private:
  int32_t _internal_tid() const;
  void _internal_set_tid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStats.Thread)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t tid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ProcessStats_FDInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStats.FDInfo) */ {
 public:
  inline ProcessStats_FDInfo() : ProcessStats_FDInfo(nullptr) {}
  ~ProcessStats_FDInfo() override;
  explicit PROTOBUF_CONSTEXPR ProcessStats_FDInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStats_FDInfo(const ProcessStats_FDInfo& from);
  ProcessStats_FDInfo(ProcessStats_FDInfo&& from) noexcept
    : ProcessStats_FDInfo() {
    *this = ::std::move(from);
  }

  inline ProcessStats_FDInfo& operator=(const ProcessStats_FDInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStats_FDInfo& operator=(ProcessStats_FDInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProcessStats_FDInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStats_FDInfo* internal_default_instance() {
    return reinterpret_cast<const ProcessStats_FDInfo*>(
               &_ProcessStats_FDInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessStats_FDInfo& a, ProcessStats_FDInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProcessStats_FDInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStats_FDInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStats_FDInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStats_FDInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProcessStats_FDInfo& from);
  void MergeFrom(const ProcessStats_FDInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStats_FDInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStats.FDInfo";
  }
  protected:
  explicit ProcessStats_FDInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kFdFieldNumber = 1,
  };
  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional uint64 fd = 1;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  uint64_t fd() const;
  void set_fd(uint64_t value);
  private:
  uint64_t _internal_fd() const;
  void _internal_set_fd(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStats.FDInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    uint64_t fd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ProcessStats_Process final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStats.Process) */ {
 public:
  inline ProcessStats_Process() : ProcessStats_Process(nullptr) {}
  ~ProcessStats_Process() override;
  explicit PROTOBUF_CONSTEXPR ProcessStats_Process(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStats_Process(const ProcessStats_Process& from);
  ProcessStats_Process(ProcessStats_Process&& from) noexcept
    : ProcessStats_Process() {
    *this = ::std::move(from);
  }

  inline ProcessStats_Process& operator=(const ProcessStats_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStats_Process& operator=(ProcessStats_Process&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProcessStats_Process& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStats_Process* internal_default_instance() {
    return reinterpret_cast<const ProcessStats_Process*>(
               &_ProcessStats_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessStats_Process& a, ProcessStats_Process& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProcessStats_Process* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStats_Process* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStats_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStats_Process>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProcessStats_Process& from);
  void MergeFrom(const ProcessStats_Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStats_Process* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStats.Process";
  }
  protected:
  explicit ProcessStats_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadsFieldNumber = 11,
    kFdsFieldNumber = 15,
    kVmSizeKbFieldNumber = 2,
    kVmRssKbFieldNumber = 3,
    kRssAnonKbFieldNumber = 4,
    kRssFileKbFieldNumber = 5,
    kRssShmemKbFieldNumber = 6,
    kPidFieldNumber = 1,
    kIsPeakRssResettableFieldNumber = 12,
    kVmSwapKbFieldNumber = 7,
    kVmLockedKbFieldNumber = 8,
    kVmHwmKbFieldNumber = 9,
    kOomScoreAdjFieldNumber = 10,
    kChromePrivateFootprintKbFieldNumber = 13,
    kChromePeakResidentSetKbFieldNumber = 14,
    kSmrRssKbFieldNumber = 16,
    kSmrPssKbFieldNumber = 17,
    kSmrPssAnonKbFieldNumber = 18,
    kSmrPssFileKbFieldNumber = 19,
    kSmrPssShmemKbFieldNumber = 20,
    kRuntimeUserModeFieldNumber = 21,
    kRuntimeKernelModeFieldNumber = 22,
    kSmrSwapPssKbFieldNumber = 23,
  };
  // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
  int threads_size() const;
  private:
  int _internal_threads_size() const;
  public:
  void clear_threads();
  ::perfetto::protos::ProcessStats_Thread* mutable_threads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >*
      mutable_threads();
  private:
  const ::perfetto::protos::ProcessStats_Thread& _internal_threads(int index) const;
  ::perfetto::protos::ProcessStats_Thread* _internal_add_threads();
  public:
  const ::perfetto::protos::ProcessStats_Thread& threads(int index) const;
  ::perfetto::protos::ProcessStats_Thread* add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >&
      threads() const;

  // repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
  int fds_size() const;
  private:
  int _internal_fds_size() const;
  public:
  void clear_fds();
  ::perfetto::protos::ProcessStats_FDInfo* mutable_fds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_FDInfo >*
      mutable_fds();
  private:
  const ::perfetto::protos::ProcessStats_FDInfo& _internal_fds(int index) const;
  ::perfetto::protos::ProcessStats_FDInfo* _internal_add_fds();
  public:
  const ::perfetto::protos::ProcessStats_FDInfo& fds(int index) const;
  ::perfetto::protos::ProcessStats_FDInfo* add_fds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_FDInfo >&
      fds() const;

  // optional uint64 vm_size_kb = 2;
  bool has_vm_size_kb() const;
  private:
  bool _internal_has_vm_size_kb() const;
  public:
  void clear_vm_size_kb();
  uint64_t vm_size_kb() const;
  void set_vm_size_kb(uint64_t value);
  private:
  uint64_t _internal_vm_size_kb() const;
  void _internal_set_vm_size_kb(uint64_t value);
  public:

  // optional uint64 vm_rss_kb = 3;
  bool has_vm_rss_kb() const;
  private:
  bool _internal_has_vm_rss_kb() const;
  public:
  void clear_vm_rss_kb();
  uint64_t vm_rss_kb() const;
  void set_vm_rss_kb(uint64_t value);
  private:
  uint64_t _internal_vm_rss_kb() const;
  void _internal_set_vm_rss_kb(uint64_t value);
  public:

  // optional uint64 rss_anon_kb = 4;
  bool has_rss_anon_kb() const;
  private:
  bool _internal_has_rss_anon_kb() const;
  public:
  void clear_rss_anon_kb();
  uint64_t rss_anon_kb() const;
  void set_rss_anon_kb(uint64_t value);
  private:
  uint64_t _internal_rss_anon_kb() const;
  void _internal_set_rss_anon_kb(uint64_t value);
  public:

  // optional uint64 rss_file_kb = 5;
  bool has_rss_file_kb() const;
  private:
  bool _internal_has_rss_file_kb() const;
  public:
  void clear_rss_file_kb();
  uint64_t rss_file_kb() const;
  void set_rss_file_kb(uint64_t value);
  private:
  uint64_t _internal_rss_file_kb() const;
  void _internal_set_rss_file_kb(uint64_t value);
  public:

  // optional uint64 rss_shmem_kb = 6;
  bool has_rss_shmem_kb() const;
  private:
  bool _internal_has_rss_shmem_kb() const;
  public:
  void clear_rss_shmem_kb();
  uint64_t rss_shmem_kb() const;
  void set_rss_shmem_kb(uint64_t value);
  private:
  uint64_t _internal_rss_shmem_kb() const;
  void _internal_set_rss_shmem_kb(uint64_t value);
  public:

  // optional int32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // optional bool is_peak_rss_resettable = 12;
  bool has_is_peak_rss_resettable() const;
  private:
  bool _internal_has_is_peak_rss_resettable() const;
  public:
  void clear_is_peak_rss_resettable();
  bool is_peak_rss_resettable() const;
  void set_is_peak_rss_resettable(bool value);
  private:
  bool _internal_is_peak_rss_resettable() const;
  void _internal_set_is_peak_rss_resettable(bool value);
  public:

  // optional uint64 vm_swap_kb = 7;
  bool has_vm_swap_kb() const;
  private:
  bool _internal_has_vm_swap_kb() const;
  public:
  void clear_vm_swap_kb();
  uint64_t vm_swap_kb() const;
  void set_vm_swap_kb(uint64_t value);
  private:
  uint64_t _internal_vm_swap_kb() const;
  void _internal_set_vm_swap_kb(uint64_t value);
  public:

  // optional uint64 vm_locked_kb = 8;
  bool has_vm_locked_kb() const;
  private:
  bool _internal_has_vm_locked_kb() const;
  public:
  void clear_vm_locked_kb();
  uint64_t vm_locked_kb() const;
  void set_vm_locked_kb(uint64_t value);
  private:
  uint64_t _internal_vm_locked_kb() const;
  void _internal_set_vm_locked_kb(uint64_t value);
  public:

  // optional uint64 vm_hwm_kb = 9;
  bool has_vm_hwm_kb() const;
  private:
  bool _internal_has_vm_hwm_kb() const;
  public:
  void clear_vm_hwm_kb();
  uint64_t vm_hwm_kb() const;
  void set_vm_hwm_kb(uint64_t value);
  private:
  uint64_t _internal_vm_hwm_kb() const;
  void _internal_set_vm_hwm_kb(uint64_t value);
  public:

  // optional int64 oom_score_adj = 10;
  bool has_oom_score_adj() const;
  private:
  bool _internal_has_oom_score_adj() const;
  public:
  void clear_oom_score_adj();
  int64_t oom_score_adj() const;
  void set_oom_score_adj(int64_t value);
  private:
  int64_t _internal_oom_score_adj() const;
  void _internal_set_oom_score_adj(int64_t value);
  public:

  // optional uint32 chrome_private_footprint_kb = 13;
  bool has_chrome_private_footprint_kb() const;
  private:
  bool _internal_has_chrome_private_footprint_kb() const;
  public:
  void clear_chrome_private_footprint_kb();
  uint32_t chrome_private_footprint_kb() const;
  void set_chrome_private_footprint_kb(uint32_t value);
  private:
  uint32_t _internal_chrome_private_footprint_kb() const;
  void _internal_set_chrome_private_footprint_kb(uint32_t value);
  public:

  // optional uint32 chrome_peak_resident_set_kb = 14;
  bool has_chrome_peak_resident_set_kb() const;
  private:
  bool _internal_has_chrome_peak_resident_set_kb() const;
  public:
  void clear_chrome_peak_resident_set_kb();
  uint32_t chrome_peak_resident_set_kb() const;
  void set_chrome_peak_resident_set_kb(uint32_t value);
  private:
  uint32_t _internal_chrome_peak_resident_set_kb() const;
  void _internal_set_chrome_peak_resident_set_kb(uint32_t value);
  public:

  // optional uint64 smr_rss_kb = 16;
  bool has_smr_rss_kb() const;
  private:
  bool _internal_has_smr_rss_kb() const;
  public:
  void clear_smr_rss_kb();
  uint64_t smr_rss_kb() const;
  void set_smr_rss_kb(uint64_t value);
  private:
  uint64_t _internal_smr_rss_kb() const;
  void _internal_set_smr_rss_kb(uint64_t value);
  public:

  // optional uint64 smr_pss_kb = 17;
  bool has_smr_pss_kb() const;
  private:
  bool _internal_has_smr_pss_kb() const;
  public:
  void clear_smr_pss_kb();
  uint64_t smr_pss_kb() const;
  void set_smr_pss_kb(uint64_t value);
  private:
  uint64_t _internal_smr_pss_kb() const;
  void _internal_set_smr_pss_kb(uint64_t value);
  public:

  // optional uint64 smr_pss_anon_kb = 18;
  bool has_smr_pss_anon_kb() const;
  private:
  bool _internal_has_smr_pss_anon_kb() const;
  public:
  void clear_smr_pss_anon_kb();
  uint64_t smr_pss_anon_kb() const;
  void set_smr_pss_anon_kb(uint64_t value);
  private:
  uint64_t _internal_smr_pss_anon_kb() const;
  void _internal_set_smr_pss_anon_kb(uint64_t value);
  public:

  // optional uint64 smr_pss_file_kb = 19;
  bool has_smr_pss_file_kb() const;
  private:
  bool _internal_has_smr_pss_file_kb() const;
  public:
  void clear_smr_pss_file_kb();
  uint64_t smr_pss_file_kb() const;
  void set_smr_pss_file_kb(uint64_t value);
  private:
  uint64_t _internal_smr_pss_file_kb() const;
  void _internal_set_smr_pss_file_kb(uint64_t value);
  public:

  // optional uint64 smr_pss_shmem_kb = 20;
  bool has_smr_pss_shmem_kb() const;
  private:
  bool _internal_has_smr_pss_shmem_kb() const;
  public:
  void clear_smr_pss_shmem_kb();
  uint64_t smr_pss_shmem_kb() const;
  void set_smr_pss_shmem_kb(uint64_t value);
  private:
  uint64_t _internal_smr_pss_shmem_kb() const;
  void _internal_set_smr_pss_shmem_kb(uint64_t value);
  public:

  // optional uint64 runtime_user_mode = 21;
  bool has_runtime_user_mode() const;
  private:
  bool _internal_has_runtime_user_mode() const;
  public:
  void clear_runtime_user_mode();
  uint64_t runtime_user_mode() const;
  void set_runtime_user_mode(uint64_t value);
  private:
  uint64_t _internal_runtime_user_mode() const;
  void _internal_set_runtime_user_mode(uint64_t value);
  public:

  // optional uint64 runtime_kernel_mode = 22;
  bool has_runtime_kernel_mode() const;
  private:
  bool _internal_has_runtime_kernel_mode() const;
  public:
  void clear_runtime_kernel_mode();
  uint64_t runtime_kernel_mode() const;
  void set_runtime_kernel_mode(uint64_t value);
  private:
  uint64_t _internal_runtime_kernel_mode() const;
  void _internal_set_runtime_kernel_mode(uint64_t value);
  public:

  // optional uint64 smr_swap_pss_kb = 23;
  bool has_smr_swap_pss_kb() const;
  private:
  bool _internal_has_smr_swap_pss_kb() const;
  public:
  void clear_smr_swap_pss_kb();
  uint64_t smr_swap_pss_kb() const;
  void set_smr_swap_pss_kb(uint64_t value);
  private:
  uint64_t _internal_smr_swap_pss_kb() const;
  void _internal_set_smr_swap_pss_kb(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStats.Process)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread > threads_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_FDInfo > fds_;
    uint64_t vm_size_kb_;
    uint64_t vm_rss_kb_;
    uint64_t rss_anon_kb_;
    uint64_t rss_file_kb_;
    uint64_t rss_shmem_kb_;
    int32_t pid_;
    bool is_peak_rss_resettable_;
    uint64_t vm_swap_kb_;
    uint64_t vm_locked_kb_;
    uint64_t vm_hwm_kb_;
    int64_t oom_score_adj_;
    uint32_t chrome_private_footprint_kb_;
    uint32_t chrome_peak_resident_set_kb_;
    uint64_t smr_rss_kb_;
    uint64_t smr_pss_kb_;
    uint64_t smr_pss_anon_kb_;
    uint64_t smr_pss_file_kb_;
    uint64_t smr_pss_shmem_kb_;
    uint64_t runtime_user_mode_;
    uint64_t runtime_kernel_mode_;
    uint64_t smr_swap_pss_kb_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
};
// -------------------------------------------------------------------

class ProcessStats final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStats) */ {
 public:
  inline ProcessStats() : ProcessStats(nullptr) {}
  ~ProcessStats() override;
  explicit PROTOBUF_CONSTEXPR ProcessStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStats(const ProcessStats& from);
  ProcessStats(ProcessStats&& from) noexcept
    : ProcessStats() {
    *this = ::std::move(from);
  }

  inline ProcessStats& operator=(const ProcessStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStats& operator=(ProcessStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProcessStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStats* internal_default_instance() {
    return reinterpret_cast<const ProcessStats*>(
               &_ProcessStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessStats& a, ProcessStats& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProcessStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProcessStats& from);
  void MergeFrom(const ProcessStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ProcessStats";
  }
  protected:
  explicit ProcessStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProcessStats_Thread Thread;
  typedef ProcessStats_FDInfo FDInfo;
  typedef ProcessStats_Process Process;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
    kCollectionEndTimestampFieldNumber = 2,
  };
  // repeated .perfetto.protos.ProcessStats.Process processes = 1;
  int processes_size() const;
  private:
  int _internal_processes_size() const;
  public:
  void clear_processes();
  ::perfetto::protos::ProcessStats_Process* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >*
      mutable_processes();
  private:
  const ::perfetto::protos::ProcessStats_Process& _internal_processes(int index) const;
  ::perfetto::protos::ProcessStats_Process* _internal_add_processes();
  public:
  const ::perfetto::protos::ProcessStats_Process& processes(int index) const;
  ::perfetto::protos::ProcessStats_Process* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >&
      processes() const;

  // optional uint64 collection_end_timestamp = 2;
  bool has_collection_end_timestamp() const;
  private:
  bool _internal_has_collection_end_timestamp() const;
  public:
  void clear_collection_end_timestamp();
  uint64_t collection_end_timestamp() const;
  void set_collection_end_timestamp(uint64_t value);
  private:
  uint64_t _internal_collection_end_timestamp() const;
  void _internal_set_collection_end_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process > processes_;
    uint64_t collection_end_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessStats_Thread

// optional int32 tid = 1;
inline bool ProcessStats_Thread::_internal_has_tid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessStats_Thread::has_tid() const {
  return _internal_has_tid();
}
inline void ProcessStats_Thread::clear_tid() {
  _impl_.tid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ProcessStats_Thread::_internal_tid() const {
  return _impl_.tid_;
}
inline int32_t ProcessStats_Thread::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Thread.tid)
  return _internal_tid();
}
inline void ProcessStats_Thread::_internal_set_tid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tid_ = value;
}
inline void ProcessStats_Thread::set_tid(int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Thread.tid)
}

// -------------------------------------------------------------------

// ProcessStats_FDInfo

// optional uint64 fd = 1;
inline bool ProcessStats_FDInfo::_internal_has_fd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProcessStats_FDInfo::has_fd() const {
  return _internal_has_fd();
}
inline void ProcessStats_FDInfo::clear_fd() {
  _impl_.fd_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ProcessStats_FDInfo::_internal_fd() const {
  return _impl_.fd_;
}
inline uint64_t ProcessStats_FDInfo::fd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.FDInfo.fd)
  return _internal_fd();
}
inline void ProcessStats_FDInfo::_internal_set_fd(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fd_ = value;
}
inline void ProcessStats_FDInfo::set_fd(uint64_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.FDInfo.fd)
}

// optional string path = 2;
inline bool ProcessStats_FDInfo::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessStats_FDInfo::has_path() const {
  return _internal_has_path();
}
inline void ProcessStats_FDInfo::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessStats_FDInfo::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.FDInfo.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessStats_FDInfo::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.FDInfo.path)
}
inline std::string* ProcessStats_FDInfo::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessStats.FDInfo.path)
  return _s;
}
inline const std::string& ProcessStats_FDInfo::_internal_path() const {
  return _impl_.path_.Get();
}
inline void ProcessStats_FDInfo::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessStats_FDInfo::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessStats_FDInfo::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProcessStats.FDInfo.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProcessStats_FDInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProcessStats.FDInfo.path)
}

// -------------------------------------------------------------------

// ProcessStats_Process

// optional int32 pid = 1;
inline bool ProcessStats_Process::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_pid() const {
  return _internal_has_pid();
}
inline void ProcessStats_Process::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ProcessStats_Process::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t ProcessStats_Process::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.pid)
  return _internal_pid();
}
inline void ProcessStats_Process::_internal_set_pid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pid_ = value;
}
inline void ProcessStats_Process::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.pid)
}

// repeated .perfetto.protos.ProcessStats.Thread threads = 11;
inline int ProcessStats_Process::_internal_threads_size() const {
  return _impl_.threads_.size();
}
inline int ProcessStats_Process::threads_size() const {
  return _internal_threads_size();
}
inline void ProcessStats_Process::clear_threads() {
  _impl_.threads_.Clear();
}
inline ::perfetto::protos::ProcessStats_Thread* ProcessStats_Process::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessStats.Process.threads)
  return _impl_.threads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >*
ProcessStats_Process::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStats.Process.threads)
  return &_impl_.threads_;
}
inline const ::perfetto::protos::ProcessStats_Thread& ProcessStats_Process::_internal_threads(int index) const {
  return _impl_.threads_.Get(index);
}
inline const ::perfetto::protos::ProcessStats_Thread& ProcessStats_Process::threads(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.threads)
  return _internal_threads(index);
}
inline ::perfetto::protos::ProcessStats_Thread* ProcessStats_Process::_internal_add_threads() {
  return _impl_.threads_.Add();
}
inline ::perfetto::protos::ProcessStats_Thread* ProcessStats_Process::add_threads() {
  ::perfetto::protos::ProcessStats_Thread* _add = _internal_add_threads();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStats.Process.threads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Thread >&
ProcessStats_Process::threads() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStats.Process.threads)
  return _impl_.threads_;
}

// optional uint64 vm_size_kb = 2;
inline bool ProcessStats_Process::_internal_has_vm_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_vm_size_kb() const {
  return _internal_has_vm_size_kb();
}
inline void ProcessStats_Process::clear_vm_size_kb() {
  _impl_.vm_size_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ProcessStats_Process::_internal_vm_size_kb() const {
  return _impl_.vm_size_kb_;
}
inline uint64_t ProcessStats_Process::vm_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_size_kb)
  return _internal_vm_size_kb();
}
inline void ProcessStats_Process::_internal_set_vm_size_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vm_size_kb_ = value;
}
inline void ProcessStats_Process::set_vm_size_kb(uint64_t value) {
  _internal_set_vm_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_size_kb)
}

// optional uint64 vm_rss_kb = 3;
inline bool ProcessStats_Process::_internal_has_vm_rss_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_vm_rss_kb() const {
  return _internal_has_vm_rss_kb();
}
inline void ProcessStats_Process::clear_vm_rss_kb() {
  _impl_.vm_rss_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ProcessStats_Process::_internal_vm_rss_kb() const {
  return _impl_.vm_rss_kb_;
}
inline uint64_t ProcessStats_Process::vm_rss_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_rss_kb)
  return _internal_vm_rss_kb();
}
inline void ProcessStats_Process::_internal_set_vm_rss_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vm_rss_kb_ = value;
}
inline void ProcessStats_Process::set_vm_rss_kb(uint64_t value) {
  _internal_set_vm_rss_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_rss_kb)
}

// optional uint64 rss_anon_kb = 4;
inline bool ProcessStats_Process::_internal_has_rss_anon_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_rss_anon_kb() const {
  return _internal_has_rss_anon_kb();
}
inline void ProcessStats_Process::clear_rss_anon_kb() {
  _impl_.rss_anon_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ProcessStats_Process::_internal_rss_anon_kb() const {
  return _impl_.rss_anon_kb_;
}
inline uint64_t ProcessStats_Process::rss_anon_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.rss_anon_kb)
  return _internal_rss_anon_kb();
}
inline void ProcessStats_Process::_internal_set_rss_anon_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rss_anon_kb_ = value;
}
inline void ProcessStats_Process::set_rss_anon_kb(uint64_t value) {
  _internal_set_rss_anon_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.rss_anon_kb)
}

// optional uint64 rss_file_kb = 5;
inline bool ProcessStats_Process::_internal_has_rss_file_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_rss_file_kb() const {
  return _internal_has_rss_file_kb();
}
inline void ProcessStats_Process::clear_rss_file_kb() {
  _impl_.rss_file_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ProcessStats_Process::_internal_rss_file_kb() const {
  return _impl_.rss_file_kb_;
}
inline uint64_t ProcessStats_Process::rss_file_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.rss_file_kb)
  return _internal_rss_file_kb();
}
inline void ProcessStats_Process::_internal_set_rss_file_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rss_file_kb_ = value;
}
inline void ProcessStats_Process::set_rss_file_kb(uint64_t value) {
  _internal_set_rss_file_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.rss_file_kb)
}

// optional uint64 rss_shmem_kb = 6;
inline bool ProcessStats_Process::_internal_has_rss_shmem_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_rss_shmem_kb() const {
  return _internal_has_rss_shmem_kb();
}
inline void ProcessStats_Process::clear_rss_shmem_kb() {
  _impl_.rss_shmem_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ProcessStats_Process::_internal_rss_shmem_kb() const {
  return _impl_.rss_shmem_kb_;
}
inline uint64_t ProcessStats_Process::rss_shmem_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.rss_shmem_kb)
  return _internal_rss_shmem_kb();
}
inline void ProcessStats_Process::_internal_set_rss_shmem_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rss_shmem_kb_ = value;
}
inline void ProcessStats_Process::set_rss_shmem_kb(uint64_t value) {
  _internal_set_rss_shmem_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.rss_shmem_kb)
}

// optional uint64 vm_swap_kb = 7;
inline bool ProcessStats_Process::_internal_has_vm_swap_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_vm_swap_kb() const {
  return _internal_has_vm_swap_kb();
}
inline void ProcessStats_Process::clear_vm_swap_kb() {
  _impl_.vm_swap_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t ProcessStats_Process::_internal_vm_swap_kb() const {
  return _impl_.vm_swap_kb_;
}
inline uint64_t ProcessStats_Process::vm_swap_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_swap_kb)
  return _internal_vm_swap_kb();
}
inline void ProcessStats_Process::_internal_set_vm_swap_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vm_swap_kb_ = value;
}
inline void ProcessStats_Process::set_vm_swap_kb(uint64_t value) {
  _internal_set_vm_swap_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_swap_kb)
}

// optional uint64 vm_locked_kb = 8;
inline bool ProcessStats_Process::_internal_has_vm_locked_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_vm_locked_kb() const {
  return _internal_has_vm_locked_kb();
}
inline void ProcessStats_Process::clear_vm_locked_kb() {
  _impl_.vm_locked_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t ProcessStats_Process::_internal_vm_locked_kb() const {
  return _impl_.vm_locked_kb_;
}
inline uint64_t ProcessStats_Process::vm_locked_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_locked_kb)
  return _internal_vm_locked_kb();
}
inline void ProcessStats_Process::_internal_set_vm_locked_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vm_locked_kb_ = value;
}
inline void ProcessStats_Process::set_vm_locked_kb(uint64_t value) {
  _internal_set_vm_locked_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_locked_kb)
}

// optional uint64 vm_hwm_kb = 9;
inline bool ProcessStats_Process::_internal_has_vm_hwm_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_vm_hwm_kb() const {
  return _internal_has_vm_hwm_kb();
}
inline void ProcessStats_Process::clear_vm_hwm_kb() {
  _impl_.vm_hwm_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t ProcessStats_Process::_internal_vm_hwm_kb() const {
  return _impl_.vm_hwm_kb_;
}
inline uint64_t ProcessStats_Process::vm_hwm_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.vm_hwm_kb)
  return _internal_vm_hwm_kb();
}
inline void ProcessStats_Process::_internal_set_vm_hwm_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.vm_hwm_kb_ = value;
}
inline void ProcessStats_Process::set_vm_hwm_kb(uint64_t value) {
  _internal_set_vm_hwm_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.vm_hwm_kb)
}

// optional int64 oom_score_adj = 10;
inline bool ProcessStats_Process::_internal_has_oom_score_adj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_oom_score_adj() const {
  return _internal_has_oom_score_adj();
}
inline void ProcessStats_Process::clear_oom_score_adj() {
  _impl_.oom_score_adj_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int64_t ProcessStats_Process::_internal_oom_score_adj() const {
  return _impl_.oom_score_adj_;
}
inline int64_t ProcessStats_Process::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.oom_score_adj)
  return _internal_oom_score_adj();
}
inline void ProcessStats_Process::_internal_set_oom_score_adj(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.oom_score_adj_ = value;
}
inline void ProcessStats_Process::set_oom_score_adj(int64_t value) {
  _internal_set_oom_score_adj(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.oom_score_adj)
}

// optional bool is_peak_rss_resettable = 12;
inline bool ProcessStats_Process::_internal_has_is_peak_rss_resettable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_is_peak_rss_resettable() const {
  return _internal_has_is_peak_rss_resettable();
}
inline void ProcessStats_Process::clear_is_peak_rss_resettable() {
  _impl_.is_peak_rss_resettable_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ProcessStats_Process::_internal_is_peak_rss_resettable() const {
  return _impl_.is_peak_rss_resettable_;
}
inline bool ProcessStats_Process::is_peak_rss_resettable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.is_peak_rss_resettable)
  return _internal_is_peak_rss_resettable();
}
inline void ProcessStats_Process::_internal_set_is_peak_rss_resettable(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_peak_rss_resettable_ = value;
}
inline void ProcessStats_Process::set_is_peak_rss_resettable(bool value) {
  _internal_set_is_peak_rss_resettable(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.is_peak_rss_resettable)
}

// optional uint32 chrome_private_footprint_kb = 13;
inline bool ProcessStats_Process::_internal_has_chrome_private_footprint_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_chrome_private_footprint_kb() const {
  return _internal_has_chrome_private_footprint_kb();
}
inline void ProcessStats_Process::clear_chrome_private_footprint_kb() {
  _impl_.chrome_private_footprint_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t ProcessStats_Process::_internal_chrome_private_footprint_kb() const {
  return _impl_.chrome_private_footprint_kb_;
}
inline uint32_t ProcessStats_Process::chrome_private_footprint_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.chrome_private_footprint_kb)
  return _internal_chrome_private_footprint_kb();
}
inline void ProcessStats_Process::_internal_set_chrome_private_footprint_kb(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.chrome_private_footprint_kb_ = value;
}
inline void ProcessStats_Process::set_chrome_private_footprint_kb(uint32_t value) {
  _internal_set_chrome_private_footprint_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.chrome_private_footprint_kb)
}

// optional uint32 chrome_peak_resident_set_kb = 14;
inline bool ProcessStats_Process::_internal_has_chrome_peak_resident_set_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_chrome_peak_resident_set_kb() const {
  return _internal_has_chrome_peak_resident_set_kb();
}
inline void ProcessStats_Process::clear_chrome_peak_resident_set_kb() {
  _impl_.chrome_peak_resident_set_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t ProcessStats_Process::_internal_chrome_peak_resident_set_kb() const {
  return _impl_.chrome_peak_resident_set_kb_;
}
inline uint32_t ProcessStats_Process::chrome_peak_resident_set_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.chrome_peak_resident_set_kb)
  return _internal_chrome_peak_resident_set_kb();
}
inline void ProcessStats_Process::_internal_set_chrome_peak_resident_set_kb(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.chrome_peak_resident_set_kb_ = value;
}
inline void ProcessStats_Process::set_chrome_peak_resident_set_kb(uint32_t value) {
  _internal_set_chrome_peak_resident_set_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.chrome_peak_resident_set_kb)
}

// repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
inline int ProcessStats_Process::_internal_fds_size() const {
  return _impl_.fds_.size();
}
inline int ProcessStats_Process::fds_size() const {
  return _internal_fds_size();
}
inline void ProcessStats_Process::clear_fds() {
  _impl_.fds_.Clear();
}
inline ::perfetto::protos::ProcessStats_FDInfo* ProcessStats_Process::mutable_fds(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessStats.Process.fds)
  return _impl_.fds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_FDInfo >*
ProcessStats_Process::mutable_fds() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStats.Process.fds)
  return &_impl_.fds_;
}
inline const ::perfetto::protos::ProcessStats_FDInfo& ProcessStats_Process::_internal_fds(int index) const {
  return _impl_.fds_.Get(index);
}
inline const ::perfetto::protos::ProcessStats_FDInfo& ProcessStats_Process::fds(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.fds)
  return _internal_fds(index);
}
inline ::perfetto::protos::ProcessStats_FDInfo* ProcessStats_Process::_internal_add_fds() {
  return _impl_.fds_.Add();
}
inline ::perfetto::protos::ProcessStats_FDInfo* ProcessStats_Process::add_fds() {
  ::perfetto::protos::ProcessStats_FDInfo* _add = _internal_add_fds();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStats.Process.fds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_FDInfo >&
ProcessStats_Process::fds() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStats.Process.fds)
  return _impl_.fds_;
}

// optional uint64 smr_rss_kb = 16;
inline bool ProcessStats_Process::_internal_has_smr_rss_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_smr_rss_kb() const {
  return _internal_has_smr_rss_kb();
}
inline void ProcessStats_Process::clear_smr_rss_kb() {
  _impl_.smr_rss_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t ProcessStats_Process::_internal_smr_rss_kb() const {
  return _impl_.smr_rss_kb_;
}
inline uint64_t ProcessStats_Process::smr_rss_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.smr_rss_kb)
  return _internal_smr_rss_kb();
}
inline void ProcessStats_Process::_internal_set_smr_rss_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.smr_rss_kb_ = value;
}
inline void ProcessStats_Process::set_smr_rss_kb(uint64_t value) {
  _internal_set_smr_rss_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.smr_rss_kb)
}

// optional uint64 smr_pss_kb = 17;
inline bool ProcessStats_Process::_internal_has_smr_pss_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_smr_pss_kb() const {
  return _internal_has_smr_pss_kb();
}
inline void ProcessStats_Process::clear_smr_pss_kb() {
  _impl_.smr_pss_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint64_t ProcessStats_Process::_internal_smr_pss_kb() const {
  return _impl_.smr_pss_kb_;
}
inline uint64_t ProcessStats_Process::smr_pss_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.smr_pss_kb)
  return _internal_smr_pss_kb();
}
inline void ProcessStats_Process::_internal_set_smr_pss_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.smr_pss_kb_ = value;
}
inline void ProcessStats_Process::set_smr_pss_kb(uint64_t value) {
  _internal_set_smr_pss_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.smr_pss_kb)
}

// optional uint64 smr_pss_anon_kb = 18;
inline bool ProcessStats_Process::_internal_has_smr_pss_anon_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_smr_pss_anon_kb() const {
  return _internal_has_smr_pss_anon_kb();
}
inline void ProcessStats_Process::clear_smr_pss_anon_kb() {
  _impl_.smr_pss_anon_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint64_t ProcessStats_Process::_internal_smr_pss_anon_kb() const {
  return _impl_.smr_pss_anon_kb_;
}
inline uint64_t ProcessStats_Process::smr_pss_anon_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.smr_pss_anon_kb)
  return _internal_smr_pss_anon_kb();
}
inline void ProcessStats_Process::_internal_set_smr_pss_anon_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.smr_pss_anon_kb_ = value;
}
inline void ProcessStats_Process::set_smr_pss_anon_kb(uint64_t value) {
  _internal_set_smr_pss_anon_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.smr_pss_anon_kb)
}

// optional uint64 smr_pss_file_kb = 19;
inline bool ProcessStats_Process::_internal_has_smr_pss_file_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_smr_pss_file_kb() const {
  return _internal_has_smr_pss_file_kb();
}
inline void ProcessStats_Process::clear_smr_pss_file_kb() {
  _impl_.smr_pss_file_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint64_t ProcessStats_Process::_internal_smr_pss_file_kb() const {
  return _impl_.smr_pss_file_kb_;
}
inline uint64_t ProcessStats_Process::smr_pss_file_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.smr_pss_file_kb)
  return _internal_smr_pss_file_kb();
}
inline void ProcessStats_Process::_internal_set_smr_pss_file_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.smr_pss_file_kb_ = value;
}
inline void ProcessStats_Process::set_smr_pss_file_kb(uint64_t value) {
  _internal_set_smr_pss_file_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.smr_pss_file_kb)
}

// optional uint64 smr_pss_shmem_kb = 20;
inline bool ProcessStats_Process::_internal_has_smr_pss_shmem_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_smr_pss_shmem_kb() const {
  return _internal_has_smr_pss_shmem_kb();
}
inline void ProcessStats_Process::clear_smr_pss_shmem_kb() {
  _impl_.smr_pss_shmem_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint64_t ProcessStats_Process::_internal_smr_pss_shmem_kb() const {
  return _impl_.smr_pss_shmem_kb_;
}
inline uint64_t ProcessStats_Process::smr_pss_shmem_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.smr_pss_shmem_kb)
  return _internal_smr_pss_shmem_kb();
}
inline void ProcessStats_Process::_internal_set_smr_pss_shmem_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.smr_pss_shmem_kb_ = value;
}
inline void ProcessStats_Process::set_smr_pss_shmem_kb(uint64_t value) {
  _internal_set_smr_pss_shmem_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.smr_pss_shmem_kb)
}

// optional uint64 smr_swap_pss_kb = 23;
inline bool ProcessStats_Process::_internal_has_smr_swap_pss_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_smr_swap_pss_kb() const {
  return _internal_has_smr_swap_pss_kb();
}
inline void ProcessStats_Process::clear_smr_swap_pss_kb() {
  _impl_.smr_swap_pss_kb_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint64_t ProcessStats_Process::_internal_smr_swap_pss_kb() const {
  return _impl_.smr_swap_pss_kb_;
}
inline uint64_t ProcessStats_Process::smr_swap_pss_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.smr_swap_pss_kb)
  return _internal_smr_swap_pss_kb();
}
inline void ProcessStats_Process::_internal_set_smr_swap_pss_kb(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.smr_swap_pss_kb_ = value;
}
inline void ProcessStats_Process::set_smr_swap_pss_kb(uint64_t value) {
  _internal_set_smr_swap_pss_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.smr_swap_pss_kb)
}

// optional uint64 runtime_user_mode = 21;
inline bool ProcessStats_Process::_internal_has_runtime_user_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_runtime_user_mode() const {
  return _internal_has_runtime_user_mode();
}
inline void ProcessStats_Process::clear_runtime_user_mode() {
  _impl_.runtime_user_mode_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint64_t ProcessStats_Process::_internal_runtime_user_mode() const {
  return _impl_.runtime_user_mode_;
}
inline uint64_t ProcessStats_Process::runtime_user_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.runtime_user_mode)
  return _internal_runtime_user_mode();
}
inline void ProcessStats_Process::_internal_set_runtime_user_mode(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.runtime_user_mode_ = value;
}
inline void ProcessStats_Process::set_runtime_user_mode(uint64_t value) {
  _internal_set_runtime_user_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.runtime_user_mode)
}

// optional uint64 runtime_kernel_mode = 22;
inline bool ProcessStats_Process::_internal_has_runtime_kernel_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ProcessStats_Process::has_runtime_kernel_mode() const {
  return _internal_has_runtime_kernel_mode();
}
inline void ProcessStats_Process::clear_runtime_kernel_mode() {
  _impl_.runtime_kernel_mode_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint64_t ProcessStats_Process::_internal_runtime_kernel_mode() const {
  return _impl_.runtime_kernel_mode_;
}
inline uint64_t ProcessStats_Process::runtime_kernel_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.Process.runtime_kernel_mode)
  return _internal_runtime_kernel_mode();
}
inline void ProcessStats_Process::_internal_set_runtime_kernel_mode(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.runtime_kernel_mode_ = value;
}
inline void ProcessStats_Process::set_runtime_kernel_mode(uint64_t value) {
  _internal_set_runtime_kernel_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.Process.runtime_kernel_mode)
}

// -------------------------------------------------------------------

// ProcessStats

// repeated .perfetto.protos.ProcessStats.Process processes = 1;
inline int ProcessStats::_internal_processes_size() const {
  return _impl_.processes_.size();
}
inline int ProcessStats::processes_size() const {
  return _internal_processes_size();
}
inline void ProcessStats::clear_processes() {
  _impl_.processes_.Clear();
}
inline ::perfetto::protos::ProcessStats_Process* ProcessStats::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessStats.processes)
  return _impl_.processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >*
ProcessStats::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStats.processes)
  return &_impl_.processes_;
}
inline const ::perfetto::protos::ProcessStats_Process& ProcessStats::_internal_processes(int index) const {
  return _impl_.processes_.Get(index);
}
inline const ::perfetto::protos::ProcessStats_Process& ProcessStats::processes(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.processes)
  return _internal_processes(index);
}
inline ::perfetto::protos::ProcessStats_Process* ProcessStats::_internal_add_processes() {
  return _impl_.processes_.Add();
}
inline ::perfetto::protos::ProcessStats_Process* ProcessStats::add_processes() {
  ::perfetto::protos::ProcessStats_Process* _add = _internal_add_processes();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStats.processes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessStats_Process >&
ProcessStats::processes() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStats.processes)
  return _impl_.processes_;
}

// optional uint64 collection_end_timestamp = 2;
inline bool ProcessStats::_internal_has_collection_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessStats::has_collection_end_timestamp() const {
  return _internal_has_collection_end_timestamp();
}
inline void ProcessStats::clear_collection_end_timestamp() {
  _impl_.collection_end_timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ProcessStats::_internal_collection_end_timestamp() const {
  return _impl_.collection_end_timestamp_;
}
inline uint64_t ProcessStats::collection_end_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStats.collection_end_timestamp)
  return _internal_collection_end_timestamp();
}
inline void ProcessStats::_internal_set_collection_end_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.collection_end_timestamp_ = value;
}
inline void ProcessStats::set_collection_end_timestamp(uint64_t value) {
  _internal_set_collection_end_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStats.collection_end_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto
