#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ui_state.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

UiState::UiState() = default;
UiState::~UiState() = default;
UiState::UiState(const UiState&) = default;
UiState& UiState::operator=(const UiState&) = default;
UiState::UiState(UiState&&) noexcept = default;
UiState& UiState::operator=(UiState&&) = default;

bool UiState::operator==(const UiState& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(timeline_start_ts_, other.timeline_start_ts_)
   && ::protozero::internal::gen_helpers::EqualsField(timeline_end_ts_, other.timeline_end_ts_)
   && ::protozero::internal::gen_helpers::EqualsField(highlight_process_, other.highlight_process_);
}

bool UiState::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* timeline_start_ts */:
        field.get(&timeline_start_ts_);
        break;
      case 2 /* timeline_end_ts */:
        field.get(&timeline_end_ts_);
        break;
      case 3 /* highlight_process */:
        (*highlight_process_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string UiState::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> UiState::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void UiState::Serialize(::protozero::Message* msg) const {
  // Field 1: timeline_start_ts
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, timeline_start_ts_, msg);
  }

  // Field 2: timeline_end_ts
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, timeline_end_ts_, msg);
  }

  // Field 3: highlight_process
  if (_has_field_[3]) {
    (*highlight_process_).Serialize(msg->BeginNestedMessage<::protozero::Message>(3));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


UiState_HighlightProcess::UiState_HighlightProcess() = default;
UiState_HighlightProcess::~UiState_HighlightProcess() = default;
UiState_HighlightProcess::UiState_HighlightProcess(const UiState_HighlightProcess&) = default;
UiState_HighlightProcess& UiState_HighlightProcess::operator=(const UiState_HighlightProcess&) = default;
UiState_HighlightProcess::UiState_HighlightProcess(UiState_HighlightProcess&&) noexcept = default;
UiState_HighlightProcess& UiState_HighlightProcess::operator=(UiState_HighlightProcess&&) = default;

bool UiState_HighlightProcess::operator==(const UiState_HighlightProcess& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(cmdline_, other.cmdline_);
}

bool UiState_HighlightProcess::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* cmdline */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmdline_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string UiState_HighlightProcess::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> UiState_HighlightProcess::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void UiState_HighlightProcess::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, pid_, msg);
  }

  // Field 2: cmdline
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, cmdline_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
