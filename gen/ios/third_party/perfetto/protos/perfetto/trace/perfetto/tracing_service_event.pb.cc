// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/tracing_service_event.proto

#include "protos/perfetto/trace/perfetto/tracing_service_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TracingServiceEvent::TracingServiceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TracingServiceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracingServiceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracingServiceEventDefaultTypeInternal() {}
  union {
    TracingServiceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracingServiceEventDefaultTypeInternal _TracingServiceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class TracingServiceEvent::_Internal {
 public:
};

TracingServiceEvent::TracingServiceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TracingServiceEvent)
}
TracingServiceEvent::TracingServiceEvent(const TracingServiceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TracingServiceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_event_type();
  switch (from.event_type_case()) {
    case kTracingStarted: {
      _this->_internal_set_tracing_started(from._internal_tracing_started());
      break;
    }
    case kAllDataSourcesStarted: {
      _this->_internal_set_all_data_sources_started(from._internal_all_data_sources_started());
      break;
    }
    case kAllDataSourcesFlushed: {
      _this->_internal_set_all_data_sources_flushed(from._internal_all_data_sources_flushed());
      break;
    }
    case kReadTracingBuffersCompleted: {
      _this->_internal_set_read_tracing_buffers_completed(from._internal_read_tracing_buffers_completed());
      break;
    }
    case kTracingDisabled: {
      _this->_internal_set_tracing_disabled(from._internal_tracing_disabled());
      break;
    }
    case kSeizedForBugreport: {
      _this->_internal_set_seized_for_bugreport(from._internal_seized_for_bugreport());
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceEvent)
}

inline void TracingServiceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event_type();
}

TracingServiceEvent::~TracingServiceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TracingServiceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event_type()) {
    clear_event_type();
  }
}

void TracingServiceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TracingServiceEvent::clear_event_type() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracingServiceEvent)
  switch (event_type_case()) {
    case kTracingStarted: {
      // No need to clear
      break;
    }
    case kAllDataSourcesStarted: {
      // No need to clear
      break;
    }
    case kAllDataSourcesFlushed: {
      // No need to clear
      break;
    }
    case kReadTracingBuffersCompleted: {
      // No need to clear
      break;
    }
    case kTracingDisabled: {
      // No need to clear
      break;
    }
    case kSeizedForBugreport: {
      // No need to clear
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_TYPE_NOT_SET;
}


void TracingServiceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event_type();
  _internal_metadata_.Clear<std::string>();
}

const char* TracingServiceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool all_data_sources_started = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_all_data_sources_started(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tracing_started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_tracing_started(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool all_data_sources_flushed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_all_data_sources_flushed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool read_tracing_buffers_completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_read_tracing_buffers_completed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tracing_disabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_tracing_disabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool seized_for_bugreport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_seized_for_bugreport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TracingServiceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TracingServiceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_type_case()) {
    case kAllDataSourcesStarted: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_all_data_sources_started(), target);
      break;
    }
    case kTracingStarted: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_tracing_started(), target);
      break;
    }
    case kAllDataSourcesFlushed: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_all_data_sources_flushed(), target);
      break;
    }
    case kReadTracingBuffersCompleted: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_read_tracing_buffers_completed(), target);
      break;
    }
    case kTracingDisabled: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_tracing_disabled(), target);
      break;
    }
    case kSeizedForBugreport: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_seized_for_bugreport(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TracingServiceEvent)
  return target;
}

size_t TracingServiceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_type_case()) {
    // bool tracing_started = 2;
    case kTracingStarted: {
      total_size += 1 + 1;
      break;
    }
    // bool all_data_sources_started = 1;
    case kAllDataSourcesStarted: {
      total_size += 1 + 1;
      break;
    }
    // bool all_data_sources_flushed = 3;
    case kAllDataSourcesFlushed: {
      total_size += 1 + 1;
      break;
    }
    // bool read_tracing_buffers_completed = 4;
    case kReadTracingBuffersCompleted: {
      total_size += 1 + 1;
      break;
    }
    // bool tracing_disabled = 5;
    case kTracingDisabled: {
      total_size += 1 + 1;
      break;
    }
    // bool seized_for_bugreport = 6;
    case kSeizedForBugreport: {
      total_size += 1 + 1;
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TracingServiceEvent*>(
      &from));
}

void TracingServiceEvent::MergeFrom(const TracingServiceEvent& from) {
  TracingServiceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_type_case()) {
    case kTracingStarted: {
      _this->_internal_set_tracing_started(from._internal_tracing_started());
      break;
    }
    case kAllDataSourcesStarted: {
      _this->_internal_set_all_data_sources_started(from._internal_all_data_sources_started());
      break;
    }
    case kAllDataSourcesFlushed: {
      _this->_internal_set_all_data_sources_flushed(from._internal_all_data_sources_flushed());
      break;
    }
    case kReadTracingBuffersCompleted: {
      _this->_internal_set_read_tracing_buffers_completed(from._internal_read_tracing_buffers_completed());
      break;
    }
    case kTracingDisabled: {
      _this->_internal_set_tracing_disabled(from._internal_tracing_disabled());
      break;
    }
    case kSeizedForBugreport: {
      _this->_internal_set_seized_for_bugreport(from._internal_seized_for_bugreport());
      break;
    }
    case EVENT_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TracingServiceEvent::CopyFrom(const TracingServiceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceEvent::IsInitialized() const {
  return true;
}

void TracingServiceEvent::InternalSwap(TracingServiceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_type_, other->_impl_.event_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string TracingServiceEvent::GetTypeName() const {
  return "perfetto.protos.TracingServiceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TracingServiceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
