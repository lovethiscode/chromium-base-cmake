// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PERFETTO_PERFETTO_METATRACE_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PERFETTO_PERFETTO_METATRACE_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class PerfettoMetatrace;
class PerfettoMetatrace_InternedString;
class PerfettoMetatrace_Arg;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT PerfettoMetatrace : public ::protozero::CppMessageObj {
 public:
  using Arg = PerfettoMetatrace_Arg;
  using InternedString = PerfettoMetatrace_InternedString;
  enum FieldNumbers {
    kEventIdFieldNumber = 1,
    kCounterIdFieldNumber = 2,
    kEventNameFieldNumber = 8,
    kEventNameIidFieldNumber = 11,
    kCounterNameFieldNumber = 9,
    kEventDurationNsFieldNumber = 3,
    kCounterValueFieldNumber = 4,
    kThreadIdFieldNumber = 5,
    kHasOverrunsFieldNumber = 6,
    kArgsFieldNumber = 7,
    kInternedStringsFieldNumber = 10,
  };

  PerfettoMetatrace();
  ~PerfettoMetatrace() override;
  PerfettoMetatrace(PerfettoMetatrace&&) noexcept;
  PerfettoMetatrace& operator=(PerfettoMetatrace&&);
  PerfettoMetatrace(const PerfettoMetatrace&);
  PerfettoMetatrace& operator=(const PerfettoMetatrace&);
  bool operator==(const PerfettoMetatrace&) const;
  bool operator!=(const PerfettoMetatrace& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_event_id() const { return _has_field_[1]; }
  uint32_t event_id() const { return event_id_; }
  void set_event_id(uint32_t value) { event_id_ = value; _has_field_.set(1); }

  bool has_counter_id() const { return _has_field_[2]; }
  uint32_t counter_id() const { return counter_id_; }
  void set_counter_id(uint32_t value) { counter_id_ = value; _has_field_.set(2); }

  bool has_event_name() const { return _has_field_[8]; }
  const std::string& event_name() const { return event_name_; }
  void set_event_name(const std::string& value) { event_name_ = value; _has_field_.set(8); }

  bool has_event_name_iid() const { return _has_field_[11]; }
  uint64_t event_name_iid() const { return event_name_iid_; }
  void set_event_name_iid(uint64_t value) { event_name_iid_ = value; _has_field_.set(11); }

  bool has_counter_name() const { return _has_field_[9]; }
  const std::string& counter_name() const { return counter_name_; }
  void set_counter_name(const std::string& value) { counter_name_ = value; _has_field_.set(9); }

  bool has_event_duration_ns() const { return _has_field_[3]; }
  uint64_t event_duration_ns() const { return event_duration_ns_; }
  void set_event_duration_ns(uint64_t value) { event_duration_ns_ = value; _has_field_.set(3); }

  bool has_counter_value() const { return _has_field_[4]; }
  int32_t counter_value() const { return counter_value_; }
  void set_counter_value(int32_t value) { counter_value_ = value; _has_field_.set(4); }

  bool has_thread_id() const { return _has_field_[5]; }
  uint32_t thread_id() const { return thread_id_; }
  void set_thread_id(uint32_t value) { thread_id_ = value; _has_field_.set(5); }

  bool has_has_overruns() const { return _has_field_[6]; }
  bool has_overruns() const { return has_overruns_; }
  void set_has_overruns(bool value) { has_overruns_ = value; _has_field_.set(6); }

  const std::vector<PerfettoMetatrace_Arg>& args() const { return args_; }
  std::vector<PerfettoMetatrace_Arg>* mutable_args() { return &args_; }
  int args_size() const;
  void clear_args();
  PerfettoMetatrace_Arg* add_args();

  const std::vector<PerfettoMetatrace_InternedString>& interned_strings() const { return interned_strings_; }
  std::vector<PerfettoMetatrace_InternedString>* mutable_interned_strings() { return &interned_strings_; }
  int interned_strings_size() const;
  void clear_interned_strings();
  PerfettoMetatrace_InternedString* add_interned_strings();

 private:
  uint32_t event_id_{};
  uint32_t counter_id_{};
  std::string event_name_{};
  uint64_t event_name_iid_{};
  std::string counter_name_{};
  uint64_t event_duration_ns_{};
  int32_t counter_value_{};
  uint32_t thread_id_{};
  bool has_overruns_{};
  std::vector<PerfettoMetatrace_Arg> args_;
  std::vector<PerfettoMetatrace_InternedString> interned_strings_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<12> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT PerfettoMetatrace_InternedString : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIidFieldNumber = 1,
    kValueFieldNumber = 2,
  };

  PerfettoMetatrace_InternedString();
  ~PerfettoMetatrace_InternedString() override;
  PerfettoMetatrace_InternedString(PerfettoMetatrace_InternedString&&) noexcept;
  PerfettoMetatrace_InternedString& operator=(PerfettoMetatrace_InternedString&&);
  PerfettoMetatrace_InternedString(const PerfettoMetatrace_InternedString&);
  PerfettoMetatrace_InternedString& operator=(const PerfettoMetatrace_InternedString&);
  bool operator==(const PerfettoMetatrace_InternedString&) const;
  bool operator!=(const PerfettoMetatrace_InternedString& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_iid() const { return _has_field_[1]; }
  uint64_t iid() const { return iid_; }
  void set_iid(uint64_t value) { iid_ = value; _has_field_.set(1); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

 private:
  uint64_t iid_{};
  std::string value_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT PerfettoMetatrace_Arg : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kKeyFieldNumber = 1,
    kKeyIidFieldNumber = 3,
    kValueFieldNumber = 2,
    kValueIidFieldNumber = 4,
  };

  PerfettoMetatrace_Arg();
  ~PerfettoMetatrace_Arg() override;
  PerfettoMetatrace_Arg(PerfettoMetatrace_Arg&&) noexcept;
  PerfettoMetatrace_Arg& operator=(PerfettoMetatrace_Arg&&);
  PerfettoMetatrace_Arg(const PerfettoMetatrace_Arg&);
  PerfettoMetatrace_Arg& operator=(const PerfettoMetatrace_Arg&);
  bool operator==(const PerfettoMetatrace_Arg&) const;
  bool operator!=(const PerfettoMetatrace_Arg& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_key() const { return _has_field_[1]; }
  const std::string& key() const { return key_; }
  void set_key(const std::string& value) { key_ = value; _has_field_.set(1); }

  bool has_key_iid() const { return _has_field_[3]; }
  uint64_t key_iid() const { return key_iid_; }
  void set_key_iid(uint64_t value) { key_iid_ = value; _has_field_.set(3); }

  bool has_value() const { return _has_field_[2]; }
  const std::string& value() const { return value_; }
  void set_value(const std::string& value) { value_ = value; _has_field_.set(2); }

  bool has_value_iid() const { return _has_field_[4]; }
  uint64_t value_iid() const { return value_iid_; }
  void set_value_iid(uint64_t value) { value_iid_ = value; _has_field_.set(4); }

 private:
  std::string key_{};
  uint64_t key_iid_{};
  std::string value_{};
  uint64_t value_iid_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_PERFETTO_PERFETTO_METATRACE_PROTO_CPP_H_
