#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/perfetto/tracing_service_event.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

TracingServiceEvent::TracingServiceEvent() = default;
TracingServiceEvent::~TracingServiceEvent() = default;
TracingServiceEvent::TracingServiceEvent(const TracingServiceEvent&) = default;
TracingServiceEvent& TracingServiceEvent::operator=(const TracingServiceEvent&) = default;
TracingServiceEvent::TracingServiceEvent(TracingServiceEvent&&) noexcept = default;
TracingServiceEvent& TracingServiceEvent::operator=(TracingServiceEvent&&) = default;

bool TracingServiceEvent::operator==(const TracingServiceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(tracing_started_, other.tracing_started_)
   && ::protozero::internal::gen_helpers::EqualsField(all_data_sources_started_, other.all_data_sources_started_)
   && ::protozero::internal::gen_helpers::EqualsField(all_data_sources_flushed_, other.all_data_sources_flushed_)
   && ::protozero::internal::gen_helpers::EqualsField(read_tracing_buffers_completed_, other.read_tracing_buffers_completed_)
   && ::protozero::internal::gen_helpers::EqualsField(tracing_disabled_, other.tracing_disabled_)
   && ::protozero::internal::gen_helpers::EqualsField(seized_for_bugreport_, other.seized_for_bugreport_);
}

bool TracingServiceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 2 /* tracing_started */:
        field.get(&tracing_started_);
        break;
      case 1 /* all_data_sources_started */:
        field.get(&all_data_sources_started_);
        break;
      case 3 /* all_data_sources_flushed */:
        field.get(&all_data_sources_flushed_);
        break;
      case 4 /* read_tracing_buffers_completed */:
        field.get(&read_tracing_buffers_completed_);
        break;
      case 5 /* tracing_disabled */:
        field.get(&tracing_disabled_);
        break;
      case 6 /* seized_for_bugreport */:
        field.get(&seized_for_bugreport_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TracingServiceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TracingServiceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TracingServiceEvent::Serialize(::protozero::Message* msg) const {
  // Field 2: tracing_started
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(2, tracing_started_, msg);
  }

  // Field 1: all_data_sources_started
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(1, all_data_sources_started_, msg);
  }

  // Field 3: all_data_sources_flushed
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(3, all_data_sources_flushed_, msg);
  }

  // Field 4: read_tracing_buffers_completed
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(4, read_tracing_buffers_completed_, msg);
  }

  // Field 5: tracing_disabled
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(5, tracing_disabled_, msg);
  }

  // Field 6: seized_for_bugreport
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeTinyVarInt(6, seized_for_bugreport_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
