// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/translation/translation_table.proto

#include "protos/perfetto/trace/translation/translation_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR TranslationTable::TranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranslationTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranslationTableDefaultTypeInternal() {}
  union {
    TranslationTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranslationTableDefaultTypeInternal _TranslationTable_default_instance_;
PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal _ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable::ChromeHistorgramTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_to_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChromeHistorgramTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeHistorgramTranslationTableDefaultTypeInternal() {}
  union {
    ChromeHistorgramTranslationTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeHistorgramTranslationTableDefaultTypeInternal _ChromeHistorgramTranslationTable_default_instance_;
PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal _ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable::ChromeUserEventTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_hash_to_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChromeUserEventTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserEventTranslationTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserEventTranslationTableDefaultTypeInternal() {}
  union {
    ChromeUserEventTranslationTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserEventTranslationTableDefaultTypeInternal _ChromeUserEventTranslationTable_default_instance_;
PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal _ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal _ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable::ChromePerformanceMarkTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.site_hash_to_name_)*/{}
  , /*decltype(_impl_.mark_hash_to_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChromePerformanceMarkTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromePerformanceMarkTranslationTableDefaultTypeInternal() {}
  union {
    ChromePerformanceMarkTranslationTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromePerformanceMarkTranslationTableDefaultTypeInternal _ChromePerformanceMarkTranslationTable_default_instance_;
PROTOBUF_CONSTEXPR SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal _SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SliceNameTranslationTable::SliceNameTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_to_deobfuscated_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SliceNameTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SliceNameTranslationTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SliceNameTranslationTableDefaultTypeInternal() {}
  union {
    SliceNameTranslationTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SliceNameTranslationTableDefaultTypeInternal _SliceNameTranslationTable_default_instance_;
PROTOBUF_CONSTEXPR ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal _ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessTrackNameTranslationTable::ProcessTrackNameTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_to_deobfuscated_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessTrackNameTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTrackNameTranslationTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTrackNameTranslationTableDefaultTypeInternal() {}
  union {
    ProcessTrackNameTranslationTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTrackNameTranslationTableDefaultTypeInternal _ProcessTrackNameTranslationTable_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class TranslationTable::_Internal {
 public:
  static const ::perfetto::protos::ChromeHistorgramTranslationTable& chrome_histogram(const TranslationTable* msg);
  static const ::perfetto::protos::ChromeUserEventTranslationTable& chrome_user_event(const TranslationTable* msg);
  static const ::perfetto::protos::ChromePerformanceMarkTranslationTable& chrome_performance_mark(const TranslationTable* msg);
  static const ::perfetto::protos::SliceNameTranslationTable& slice_name(const TranslationTable* msg);
  static const ::perfetto::protos::ProcessTrackNameTranslationTable& process_track_name(const TranslationTable* msg);
};

const ::perfetto::protos::ChromeHistorgramTranslationTable&
TranslationTable::_Internal::chrome_histogram(const TranslationTable* msg) {
  return *msg->_impl_.table_.chrome_histogram_;
}
const ::perfetto::protos::ChromeUserEventTranslationTable&
TranslationTable::_Internal::chrome_user_event(const TranslationTable* msg) {
  return *msg->_impl_.table_.chrome_user_event_;
}
const ::perfetto::protos::ChromePerformanceMarkTranslationTable&
TranslationTable::_Internal::chrome_performance_mark(const TranslationTable* msg) {
  return *msg->_impl_.table_.chrome_performance_mark_;
}
const ::perfetto::protos::SliceNameTranslationTable&
TranslationTable::_Internal::slice_name(const TranslationTable* msg) {
  return *msg->_impl_.table_.slice_name_;
}
const ::perfetto::protos::ProcessTrackNameTranslationTable&
TranslationTable::_Internal::process_track_name(const TranslationTable* msg) {
  return *msg->_impl_.table_.process_track_name_;
}
void TranslationTable::set_allocated_chrome_histogram(::perfetto::protos::ChromeHistorgramTranslationTable* chrome_histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (chrome_histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_histogram);
    if (message_arena != submessage_arena) {
      chrome_histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_histogram, submessage_arena);
    }
    set_has_chrome_histogram();
    _impl_.table_.chrome_histogram_ = chrome_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.chrome_histogram)
}
void TranslationTable::set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEventTranslationTable* chrome_user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (chrome_user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_user_event);
    if (message_arena != submessage_arena) {
      chrome_user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_user_event, submessage_arena);
    }
    set_has_chrome_user_event();
    _impl_.table_.chrome_user_event_ = chrome_user_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.chrome_user_event)
}
void TranslationTable::set_allocated_chrome_performance_mark(::perfetto::protos::ChromePerformanceMarkTranslationTable* chrome_performance_mark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (chrome_performance_mark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_performance_mark);
    if (message_arena != submessage_arena) {
      chrome_performance_mark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_performance_mark, submessage_arena);
    }
    set_has_chrome_performance_mark();
    _impl_.table_.chrome_performance_mark_ = chrome_performance_mark;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.chrome_performance_mark)
}
void TranslationTable::set_allocated_slice_name(::perfetto::protos::SliceNameTranslationTable* slice_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (slice_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slice_name);
    if (message_arena != submessage_arena) {
      slice_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_name, submessage_arena);
    }
    set_has_slice_name();
    _impl_.table_.slice_name_ = slice_name;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.slice_name)
}
void TranslationTable::set_allocated_process_track_name(::perfetto::protos::ProcessTrackNameTranslationTable* process_track_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (process_track_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process_track_name);
    if (message_arena != submessage_arena) {
      process_track_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_track_name, submessage_arena);
    }
    set_has_process_track_name();
    _impl_.table_.process_track_name_ = process_track_name;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.process_track_name)
}
TranslationTable::TranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TranslationTable)
}
TranslationTable::TranslationTable(const TranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_table();
  switch (from.table_case()) {
    case kChromeHistogram: {
      _this->_internal_mutable_chrome_histogram()->::perfetto::protos::ChromeHistorgramTranslationTable::MergeFrom(
          from._internal_chrome_histogram());
      break;
    }
    case kChromeUserEvent: {
      _this->_internal_mutable_chrome_user_event()->::perfetto::protos::ChromeUserEventTranslationTable::MergeFrom(
          from._internal_chrome_user_event());
      break;
    }
    case kChromePerformanceMark: {
      _this->_internal_mutable_chrome_performance_mark()->::perfetto::protos::ChromePerformanceMarkTranslationTable::MergeFrom(
          from._internal_chrome_performance_mark());
      break;
    }
    case kSliceName: {
      _this->_internal_mutable_slice_name()->::perfetto::protos::SliceNameTranslationTable::MergeFrom(
          from._internal_slice_name());
      break;
    }
    case kProcessTrackName: {
      _this->_internal_mutable_process_track_name()->::perfetto::protos::ProcessTrackNameTranslationTable::MergeFrom(
          from._internal_process_track_name());
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TranslationTable)
}

inline void TranslationTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_table();
}

TranslationTable::~TranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranslationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_table()) {
    clear_table();
  }
}

void TranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TranslationTable::clear_table() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TranslationTable)
  switch (table_case()) {
    case kChromeHistogram: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.chrome_histogram_;
      }
      break;
    }
    case kChromeUserEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.chrome_user_event_;
      }
      break;
    }
    case kChromePerformanceMark: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.chrome_performance_mark_;
      }
      break;
    }
    case kSliceName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.slice_name_;
      }
      break;
    }
    case kProcessTrackName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.process_track_name_;
      }
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TABLE_NOT_SET;
}


void TranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TranslationTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_table();
  _internal_metadata_.Clear<std::string>();
}

const char* TranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.ChromeHistorgramTranslationTable chrome_histogram = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_histogram(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.ChromeUserEventTranslationTable chrome_user_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_user_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.ChromePerformanceMarkTranslationTable chrome_performance_mark = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_performance_mark(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.SliceNameTranslationTable slice_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .perfetto.protos.ProcessTrackNameTranslationTable process_track_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_track_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslationTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TranslationTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (table_case()) {
    case kChromeHistogram: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::chrome_histogram(this),
          _Internal::chrome_histogram(this).GetCachedSize(), target, stream);
      break;
    }
    case kChromeUserEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::chrome_user_event(this),
          _Internal::chrome_user_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kChromePerformanceMark: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::chrome_performance_mark(this),
          _Internal::chrome_performance_mark(this).GetCachedSize(), target, stream);
      break;
    }
    case kSliceName: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::slice_name(this),
          _Internal::slice_name(this).GetCachedSize(), target, stream);
      break;
    }
    case kProcessTrackName: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::process_track_name(this),
          _Internal::process_track_name(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TranslationTable)
  return target;
}

size_t TranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TranslationTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (table_case()) {
    // .perfetto.protos.ChromeHistorgramTranslationTable chrome_histogram = 1;
    case kChromeHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.chrome_histogram_);
      break;
    }
    // .perfetto.protos.ChromeUserEventTranslationTable chrome_user_event = 2;
    case kChromeUserEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.chrome_user_event_);
      break;
    }
    // .perfetto.protos.ChromePerformanceMarkTranslationTable chrome_performance_mark = 3;
    case kChromePerformanceMark: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.chrome_performance_mark_);
      break;
    }
    // .perfetto.protos.SliceNameTranslationTable slice_name = 4;
    case kSliceName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.slice_name_);
      break;
    }
    // .perfetto.protos.ProcessTrackNameTranslationTable process_track_name = 5;
    case kProcessTrackName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.process_track_name_);
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranslationTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TranslationTable*>(
      &from));
}

void TranslationTable::MergeFrom(const TranslationTable& from) {
  TranslationTable* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TranslationTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.table_case()) {
    case kChromeHistogram: {
      _this->_internal_mutable_chrome_histogram()->::perfetto::protos::ChromeHistorgramTranslationTable::MergeFrom(
          from._internal_chrome_histogram());
      break;
    }
    case kChromeUserEvent: {
      _this->_internal_mutable_chrome_user_event()->::perfetto::protos::ChromeUserEventTranslationTable::MergeFrom(
          from._internal_chrome_user_event());
      break;
    }
    case kChromePerformanceMark: {
      _this->_internal_mutable_chrome_performance_mark()->::perfetto::protos::ChromePerformanceMarkTranslationTable::MergeFrom(
          from._internal_chrome_performance_mark());
      break;
    }
    case kSliceName: {
      _this->_internal_mutable_slice_name()->::perfetto::protos::SliceNameTranslationTable::MergeFrom(
          from._internal_slice_name());
      break;
    }
    case kProcessTrackName: {
      _this->_internal_mutable_process_track_name()->::perfetto::protos::ProcessTrackNameTranslationTable::MergeFrom(
          from._internal_process_track_name());
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TranslationTable::CopyFrom(const TranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslationTable::IsInitialized() const {
  return true;
}

void TranslationTable::InternalSwap(TranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.table_, other->_impl_.table_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string TranslationTable::GetTypeName() const {
  return "perfetto.protos.TranslationTable";
}


// ===================================================================

ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse() {}
ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::MergeFrom(const ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class ChromeHistorgramTranslationTable::_Internal {
 public:
};

ChromeHistorgramTranslationTable::ChromeHistorgramTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeHistorgramTranslationTable)
}
ChromeHistorgramTranslationTable::ChromeHistorgramTranslationTable(const ChromeHistorgramTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeHistorgramTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.hash_to_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.hash_to_name_.MergeFrom(from._impl_.hash_to_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeHistorgramTranslationTable)
}

inline void ChromeHistorgramTranslationTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChromeHistorgramTranslationTable::~ChromeHistorgramTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeHistorgramTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeHistorgramTranslationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_to_name_.Destruct();
  _impl_.hash_to_name_.~MapFieldLite();
}

void ChromeHistorgramTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeHistorgramTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeHistorgramTranslationTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_to_name_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeHistorgramTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, string> hash_to_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeHistorgramTranslationTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeHistorgramTranslationTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, string> hash_to_name = 1;
  if (!this->_internal_hash_to_name().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeHistorgramTranslationTable)
  return target;
}

size_t ChromeHistorgramTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeHistorgramTranslationTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> hash_to_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      it = this->_internal_hash_to_name().begin();
      it != this->_internal_hash_to_name().end(); ++it) {
    total_size += ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeHistorgramTranslationTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeHistorgramTranslationTable*>(
      &from));
}

void ChromeHistorgramTranslationTable::MergeFrom(const ChromeHistorgramTranslationTable& from) {
  ChromeHistorgramTranslationTable* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeHistorgramTranslationTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hash_to_name_.MergeFrom(from._impl_.hash_to_name_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeHistorgramTranslationTable::CopyFrom(const ChromeHistorgramTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeHistorgramTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeHistorgramTranslationTable::IsInitialized() const {
  return true;
}

void ChromeHistorgramTranslationTable::InternalSwap(ChromeHistorgramTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hash_to_name_.InternalSwap(&other->_impl_.hash_to_name_);
}

std::string ChromeHistorgramTranslationTable::GetTypeName() const {
  return "perfetto.protos.ChromeHistorgramTranslationTable";
}


// ===================================================================

ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse() {}
ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::MergeFrom(const ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class ChromeUserEventTranslationTable::_Internal {
 public:
};

ChromeUserEventTranslationTable::ChromeUserEventTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeUserEventTranslationTable)
}
ChromeUserEventTranslationTable::ChromeUserEventTranslationTable(const ChromeUserEventTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeUserEventTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.action_hash_to_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.action_hash_to_name_.MergeFrom(from._impl_.action_hash_to_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeUserEventTranslationTable)
}

inline void ChromeUserEventTranslationTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.action_hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChromeUserEventTranslationTable::~ChromeUserEventTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeUserEventTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeUserEventTranslationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_hash_to_name_.Destruct();
  _impl_.action_hash_to_name_.~MapFieldLite();
}

void ChromeUserEventTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeUserEventTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeUserEventTranslationTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_hash_to_name_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeUserEventTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, string> action_hash_to_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.action_hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeUserEventTranslationTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeUserEventTranslationTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, string> action_hash_to_name = 1;
  if (!this->_internal_action_hash_to_name().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_action_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeUserEventTranslationTable)
  return target;
}

size_t ChromeUserEventTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeUserEventTranslationTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> action_hash_to_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_action_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      it = this->_internal_action_hash_to_name().begin();
      it != this->_internal_action_hash_to_name().end(); ++it) {
    total_size += ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeUserEventTranslationTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeUserEventTranslationTable*>(
      &from));
}

void ChromeUserEventTranslationTable::MergeFrom(const ChromeUserEventTranslationTable& from) {
  ChromeUserEventTranslationTable* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeUserEventTranslationTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.action_hash_to_name_.MergeFrom(from._impl_.action_hash_to_name_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeUserEventTranslationTable::CopyFrom(const ChromeUserEventTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeUserEventTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserEventTranslationTable::IsInitialized() const {
  return true;
}

void ChromeUserEventTranslationTable::InternalSwap(ChromeUserEventTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.action_hash_to_name_.InternalSwap(&other->_impl_.action_hash_to_name_);
}

std::string ChromeUserEventTranslationTable::GetTypeName() const {
  return "perfetto.protos.ChromeUserEventTranslationTable";
}


// ===================================================================

ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse() {}
ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::MergeFrom(const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse() {}
ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::MergeFrom(const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class ChromePerformanceMarkTranslationTable::_Internal {
 public:
};

ChromePerformanceMarkTranslationTable::ChromePerformanceMarkTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromePerformanceMarkTranslationTable)
}
ChromePerformanceMarkTranslationTable::ChromePerformanceMarkTranslationTable(const ChromePerformanceMarkTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromePerformanceMarkTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.site_hash_to_name_)*/{}
    , /*decltype(_impl_.mark_hash_to_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.site_hash_to_name_.MergeFrom(from._impl_.site_hash_to_name_);
  _this->_impl_.mark_hash_to_name_.MergeFrom(from._impl_.mark_hash_to_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromePerformanceMarkTranslationTable)
}

inline void ChromePerformanceMarkTranslationTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.site_hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.mark_hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChromePerformanceMarkTranslationTable::~ChromePerformanceMarkTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromePerformanceMarkTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromePerformanceMarkTranslationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_hash_to_name_.Destruct();
  _impl_.site_hash_to_name_.~MapFieldLite();
  _impl_.mark_hash_to_name_.Destruct();
  _impl_.mark_hash_to_name_.~MapFieldLite();
}

void ChromePerformanceMarkTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromePerformanceMarkTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.site_hash_to_name_.Clear();
  _impl_.mark_hash_to_name_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromePerformanceMarkTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, string> site_hash_to_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.site_hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, string> mark_hash_to_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mark_hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromePerformanceMarkTranslationTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, string> site_hash_to_name = 1;
  if (!this->_internal_site_hash_to_name().empty()) {
    using MapType = ::_pb::Map<uint32_t, std::string>;
    using WireHelper = ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_site_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint32, string> mark_hash_to_name = 2;
  if (!this->_internal_mark_hash_to_name().empty()) {
    using MapType = ::_pb::Map<uint32_t, std::string>;
    using WireHelper = ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mark_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromePerformanceMarkTranslationTable)
  return target;
}

size_t ChromePerformanceMarkTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> site_hash_to_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_site_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_iterator
      it = this->_internal_site_hash_to_name().begin();
      it != this->_internal_site_hash_to_name().end(); ++it) {
    total_size += ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, string> mark_hash_to_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mark_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_iterator
      it = this->_internal_mark_hash_to_name().begin();
      it != this->_internal_mark_hash_to_name().end(); ++it) {
    total_size += ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromePerformanceMarkTranslationTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromePerformanceMarkTranslationTable*>(
      &from));
}

void ChromePerformanceMarkTranslationTable::MergeFrom(const ChromePerformanceMarkTranslationTable& from) {
  ChromePerformanceMarkTranslationTable* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.site_hash_to_name_.MergeFrom(from._impl_.site_hash_to_name_);
  _this->_impl_.mark_hash_to_name_.MergeFrom(from._impl_.mark_hash_to_name_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromePerformanceMarkTranslationTable::CopyFrom(const ChromePerformanceMarkTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromePerformanceMarkTranslationTable::IsInitialized() const {
  return true;
}

void ChromePerformanceMarkTranslationTable::InternalSwap(ChromePerformanceMarkTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.site_hash_to_name_.InternalSwap(&other->_impl_.site_hash_to_name_);
  _impl_.mark_hash_to_name_.InternalSwap(&other->_impl_.mark_hash_to_name_);
}

std::string ChromePerformanceMarkTranslationTable::GetTypeName() const {
  return "perfetto.protos.ChromePerformanceMarkTranslationTable";
}


// ===================================================================

SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse() {}
SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::MergeFrom(const SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class SliceNameTranslationTable::_Internal {
 public:
};

SliceNameTranslationTable::SliceNameTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SliceNameTranslationTable)
}
SliceNameTranslationTable::SliceNameTranslationTable(const SliceNameTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SliceNameTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_to_deobfuscated_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.raw_to_deobfuscated_name_.MergeFrom(from._impl_.raw_to_deobfuscated_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SliceNameTranslationTable)
}

inline void SliceNameTranslationTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_to_deobfuscated_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SliceNameTranslationTable::~SliceNameTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SliceNameTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SliceNameTranslationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_to_deobfuscated_name_.Destruct();
  _impl_.raw_to_deobfuscated_name_.~MapFieldLite();
}

void SliceNameTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SliceNameTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SliceNameTranslationTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_to_deobfuscated_name_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SliceNameTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> raw_to_deobfuscated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.raw_to_deobfuscated_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SliceNameTranslationTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SliceNameTranslationTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> raw_to_deobfuscated_name = 1;
  if (!this->_internal_raw_to_deobfuscated_name().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_raw_to_deobfuscated_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SliceNameTranslationTable)
  return target;
}

size_t SliceNameTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SliceNameTranslationTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> raw_to_deobfuscated_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_raw_to_deobfuscated_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_raw_to_deobfuscated_name().begin();
      it != this->_internal_raw_to_deobfuscated_name().end(); ++it) {
    total_size += SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SliceNameTranslationTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SliceNameTranslationTable*>(
      &from));
}

void SliceNameTranslationTable::MergeFrom(const SliceNameTranslationTable& from) {
  SliceNameTranslationTable* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SliceNameTranslationTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.raw_to_deobfuscated_name_.MergeFrom(from._impl_.raw_to_deobfuscated_name_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SliceNameTranslationTable::CopyFrom(const SliceNameTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SliceNameTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceNameTranslationTable::IsInitialized() const {
  return true;
}

void SliceNameTranslationTable::InternalSwap(SliceNameTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.raw_to_deobfuscated_name_.InternalSwap(&other->_impl_.raw_to_deobfuscated_name_);
}

std::string SliceNameTranslationTable::GetTypeName() const {
  return "perfetto.protos.SliceNameTranslationTable";
}


// ===================================================================

ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse() {}
ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::MergeFrom(const ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class ProcessTrackNameTranslationTable::_Internal {
 public:
};

ProcessTrackNameTranslationTable::ProcessTrackNameTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessTrackNameTranslationTable)
}
ProcessTrackNameTranslationTable::ProcessTrackNameTranslationTable(const ProcessTrackNameTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ProcessTrackNameTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_to_deobfuscated_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.raw_to_deobfuscated_name_.MergeFrom(from._impl_.raw_to_deobfuscated_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessTrackNameTranslationTable)
}

inline void ProcessTrackNameTranslationTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_to_deobfuscated_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessTrackNameTranslationTable::~ProcessTrackNameTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessTrackNameTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessTrackNameTranslationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_to_deobfuscated_name_.Destruct();
  _impl_.raw_to_deobfuscated_name_.~MapFieldLite();
}

void ProcessTrackNameTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessTrackNameTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessTrackNameTranslationTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_to_deobfuscated_name_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProcessTrackNameTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> raw_to_deobfuscated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.raw_to_deobfuscated_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessTrackNameTranslationTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessTrackNameTranslationTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> raw_to_deobfuscated_name = 1;
  if (!this->_internal_raw_to_deobfuscated_name().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_raw_to_deobfuscated_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessTrackNameTranslationTable)
  return target;
}

size_t ProcessTrackNameTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessTrackNameTranslationTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> raw_to_deobfuscated_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_raw_to_deobfuscated_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_raw_to_deobfuscated_name().begin();
      it != this->_internal_raw_to_deobfuscated_name().end(); ++it) {
    total_size += ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTrackNameTranslationTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProcessTrackNameTranslationTable*>(
      &from));
}

void ProcessTrackNameTranslationTable::MergeFrom(const ProcessTrackNameTranslationTable& from) {
  ProcessTrackNameTranslationTable* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessTrackNameTranslationTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.raw_to_deobfuscated_name_.MergeFrom(from._impl_.raw_to_deobfuscated_name_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProcessTrackNameTranslationTable::CopyFrom(const ProcessTrackNameTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessTrackNameTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTrackNameTranslationTable::IsInitialized() const {
  return true;
}

void ProcessTrackNameTranslationTable::InternalSwap(ProcessTrackNameTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.raw_to_deobfuscated_name_.InternalSwap(&other->_impl_.raw_to_deobfuscated_name_);
}

std::string ProcessTrackNameTranslationTable::GetTypeName() const {
  return "perfetto.protos.ProcessTrackNameTranslationTable";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::TranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeHistorgramTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeHistorgramTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeHistorgramTranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeUserEventTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeUserEventTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeUserEventTranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromePerformanceMarkTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromePerformanceMarkTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromePerformanceMarkTranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SliceNameTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::SliceNameTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SliceNameTranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessTrackNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessTrackNameTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessTrackNameTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessTrackNameTranslationTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
