#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/lwis.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

LwisTracingMarkWriteFtraceEvent::LwisTracingMarkWriteFtraceEvent() = default;
LwisTracingMarkWriteFtraceEvent::~LwisTracingMarkWriteFtraceEvent() = default;
LwisTracingMarkWriteFtraceEvent::LwisTracingMarkWriteFtraceEvent(const LwisTracingMarkWriteFtraceEvent&) = default;
LwisTracingMarkWriteFtraceEvent& LwisTracingMarkWriteFtraceEvent::operator=(const LwisTracingMarkWriteFtraceEvent&) = default;
LwisTracingMarkWriteFtraceEvent::LwisTracingMarkWriteFtraceEvent(LwisTracingMarkWriteFtraceEvent&&) noexcept = default;
LwisTracingMarkWriteFtraceEvent& LwisTracingMarkWriteFtraceEvent::operator=(LwisTracingMarkWriteFtraceEvent&&) = default;

bool LwisTracingMarkWriteFtraceEvent::operator==(const LwisTracingMarkWriteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(lwis_name_, other.lwis_name_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(func_name_, other.func_name_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool LwisTracingMarkWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* lwis_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &lwis_name_);
        break;
      case 2 /* type */:
        field.get(&type_);
        break;
      case 3 /* pid */:
        field.get(&pid_);
        break;
      case 4 /* func_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &func_name_);
        break;
      case 5 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string LwisTracingMarkWriteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> LwisTracingMarkWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void LwisTracingMarkWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: lwis_name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, lwis_name_, msg);
  }

  // Field 2: type
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, type_, msg);
  }

  // Field 3: pid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pid_, msg);
  }

  // Field 4: func_name
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, func_name_, msg);
  }

  // Field 5: value
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
