#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/block.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

BlockUnplugFtraceEvent::BlockUnplugFtraceEvent() = default;
BlockUnplugFtraceEvent::~BlockUnplugFtraceEvent() = default;
BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(const BlockUnplugFtraceEvent&) = default;
BlockUnplugFtraceEvent& BlockUnplugFtraceEvent::operator=(const BlockUnplugFtraceEvent&) = default;
BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(BlockUnplugFtraceEvent&&) noexcept = default;
BlockUnplugFtraceEvent& BlockUnplugFtraceEvent::operator=(BlockUnplugFtraceEvent&&) = default;

bool BlockUnplugFtraceEvent::operator==(const BlockUnplugFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_rq_, other.nr_rq_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockUnplugFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* nr_rq */:
        field.get(&nr_rq_);
        break;
      case 2 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockUnplugFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockUnplugFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockUnplugFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: nr_rq
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, nr_rq_, msg);
  }

  // Field 2: comm
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent() = default;
BlockTouchBufferFtraceEvent::~BlockTouchBufferFtraceEvent() = default;
BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(const BlockTouchBufferFtraceEvent&) = default;
BlockTouchBufferFtraceEvent& BlockTouchBufferFtraceEvent::operator=(const BlockTouchBufferFtraceEvent&) = default;
BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(BlockTouchBufferFtraceEvent&&) noexcept = default;
BlockTouchBufferFtraceEvent& BlockTouchBufferFtraceEvent::operator=(BlockTouchBufferFtraceEvent&&) = default;

bool BlockTouchBufferFtraceEvent::operator==(const BlockTouchBufferFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_);
}

bool BlockTouchBufferFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockTouchBufferFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockTouchBufferFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockTouchBufferFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockSplitFtraceEvent::BlockSplitFtraceEvent() = default;
BlockSplitFtraceEvent::~BlockSplitFtraceEvent() = default;
BlockSplitFtraceEvent::BlockSplitFtraceEvent(const BlockSplitFtraceEvent&) = default;
BlockSplitFtraceEvent& BlockSplitFtraceEvent::operator=(const BlockSplitFtraceEvent&) = default;
BlockSplitFtraceEvent::BlockSplitFtraceEvent(BlockSplitFtraceEvent&&) noexcept = default;
BlockSplitFtraceEvent& BlockSplitFtraceEvent::operator=(BlockSplitFtraceEvent&&) = default;

bool BlockSplitFtraceEvent::operator==(const BlockSplitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(new_sector_, other.new_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockSplitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* new_sector */:
        field.get(&new_sector_);
        break;
      case 4 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 5 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockSplitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockSplitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockSplitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: new_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, new_sector_, msg);
  }

  // Field 4: rwbs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, rwbs_, msg);
  }

  // Field 5: comm
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent() = default;
BlockSleeprqFtraceEvent::~BlockSleeprqFtraceEvent() = default;
BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(const BlockSleeprqFtraceEvent&) = default;
BlockSleeprqFtraceEvent& BlockSleeprqFtraceEvent::operator=(const BlockSleeprqFtraceEvent&) = default;
BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(BlockSleeprqFtraceEvent&&) noexcept = default;
BlockSleeprqFtraceEvent& BlockSleeprqFtraceEvent::operator=(BlockSleeprqFtraceEvent&&) = default;

bool BlockSleeprqFtraceEvent::operator==(const BlockSleeprqFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockSleeprqFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 5 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockSleeprqFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockSleeprqFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockSleeprqFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: rwbs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, rwbs_, msg);
  }

  // Field 5: comm
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent() = default;
BlockRqRequeueFtraceEvent::~BlockRqRequeueFtraceEvent() = default;
BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(const BlockRqRequeueFtraceEvent&) = default;
BlockRqRequeueFtraceEvent& BlockRqRequeueFtraceEvent::operator=(const BlockRqRequeueFtraceEvent&) = default;
BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(BlockRqRequeueFtraceEvent&&) noexcept = default;
BlockRqRequeueFtraceEvent& BlockRqRequeueFtraceEvent::operator=(BlockRqRequeueFtraceEvent&&) = default;

bool BlockRqRequeueFtraceEvent::operator==(const BlockRqRequeueFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(errors_, other.errors_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(cmd_, other.cmd_);
}

bool BlockRqRequeueFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* errors */:
        field.get(&errors_);
        break;
      case 5 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 6 /* cmd */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmd_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockRqRequeueFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockRqRequeueFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockRqRequeueFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: errors
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, errors_, msg);
  }

  // Field 5: rwbs
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, rwbs_, msg);
  }

  // Field 6: cmd
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, cmd_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent() = default;
BlockRqRemapFtraceEvent::~BlockRqRemapFtraceEvent() = default;
BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(const BlockRqRemapFtraceEvent&) = default;
BlockRqRemapFtraceEvent& BlockRqRemapFtraceEvent::operator=(const BlockRqRemapFtraceEvent&) = default;
BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(BlockRqRemapFtraceEvent&&) noexcept = default;
BlockRqRemapFtraceEvent& BlockRqRemapFtraceEvent::operator=(BlockRqRemapFtraceEvent&&) = default;

bool BlockRqRemapFtraceEvent::operator==(const BlockRqRemapFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(old_dev_, other.old_dev_)
   && ::protozero::internal::gen_helpers::EqualsField(old_sector_, other.old_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_bios_, other.nr_bios_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_);
}

bool BlockRqRemapFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* old_dev */:
        field.get(&old_dev_);
        break;
      case 5 /* old_sector */:
        field.get(&old_sector_);
        break;
      case 6 /* nr_bios */:
        field.get(&nr_bios_);
        break;
      case 7 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockRqRemapFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockRqRemapFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockRqRemapFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: old_dev
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, old_dev_, msg);
  }

  // Field 5: old_sector
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, old_sector_, msg);
  }

  // Field 6: nr_bios
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, nr_bios_, msg);
  }

  // Field 7: rwbs
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeString(7, rwbs_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent() = default;
BlockRqInsertFtraceEvent::~BlockRqInsertFtraceEvent() = default;
BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(const BlockRqInsertFtraceEvent&) = default;
BlockRqInsertFtraceEvent& BlockRqInsertFtraceEvent::operator=(const BlockRqInsertFtraceEvent&) = default;
BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(BlockRqInsertFtraceEvent&&) noexcept = default;
BlockRqInsertFtraceEvent& BlockRqInsertFtraceEvent::operator=(BlockRqInsertFtraceEvent&&) = default;

bool BlockRqInsertFtraceEvent::operator==(const BlockRqInsertFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(bytes_, other.bytes_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_)
   && ::protozero::internal::gen_helpers::EqualsField(cmd_, other.cmd_);
}

bool BlockRqInsertFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* bytes */:
        field.get(&bytes_);
        break;
      case 5 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 6 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      case 7 /* cmd */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmd_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockRqInsertFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockRqInsertFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockRqInsertFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: bytes
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, bytes_, msg);
  }

  // Field 5: rwbs
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, rwbs_, msg);
  }

  // Field 6: comm
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, comm_, msg);
  }

  // Field 7: cmd
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeString(7, cmd_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent() = default;
BlockRqCompleteFtraceEvent::~BlockRqCompleteFtraceEvent() = default;
BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(const BlockRqCompleteFtraceEvent&) = default;
BlockRqCompleteFtraceEvent& BlockRqCompleteFtraceEvent::operator=(const BlockRqCompleteFtraceEvent&) = default;
BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(BlockRqCompleteFtraceEvent&&) noexcept = default;
BlockRqCompleteFtraceEvent& BlockRqCompleteFtraceEvent::operator=(BlockRqCompleteFtraceEvent&&) = default;

bool BlockRqCompleteFtraceEvent::operator==(const BlockRqCompleteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(errors_, other.errors_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(cmd_, other.cmd_)
   && ::protozero::internal::gen_helpers::EqualsField(error_, other.error_);
}

bool BlockRqCompleteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* errors */:
        field.get(&errors_);
        break;
      case 5 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 6 /* cmd */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmd_);
        break;
      case 7 /* error */:
        field.get(&error_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockRqCompleteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockRqCompleteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockRqCompleteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: errors
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, errors_, msg);
  }

  // Field 5: rwbs
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, rwbs_, msg);
  }

  // Field 6: cmd
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, cmd_, msg);
  }

  // Field 7: error
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, error_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent() = default;
BlockRqAbortFtraceEvent::~BlockRqAbortFtraceEvent() = default;
BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(const BlockRqAbortFtraceEvent&) = default;
BlockRqAbortFtraceEvent& BlockRqAbortFtraceEvent::operator=(const BlockRqAbortFtraceEvent&) = default;
BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(BlockRqAbortFtraceEvent&&) noexcept = default;
BlockRqAbortFtraceEvent& BlockRqAbortFtraceEvent::operator=(BlockRqAbortFtraceEvent&&) = default;

bool BlockRqAbortFtraceEvent::operator==(const BlockRqAbortFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(errors_, other.errors_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(cmd_, other.cmd_);
}

bool BlockRqAbortFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* errors */:
        field.get(&errors_);
        break;
      case 5 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 6 /* cmd */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmd_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockRqAbortFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockRqAbortFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockRqAbortFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: errors
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, errors_, msg);
  }

  // Field 5: rwbs
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, rwbs_, msg);
  }

  // Field 6: cmd
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, cmd_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockPlugFtraceEvent::BlockPlugFtraceEvent() = default;
BlockPlugFtraceEvent::~BlockPlugFtraceEvent() = default;
BlockPlugFtraceEvent::BlockPlugFtraceEvent(const BlockPlugFtraceEvent&) = default;
BlockPlugFtraceEvent& BlockPlugFtraceEvent::operator=(const BlockPlugFtraceEvent&) = default;
BlockPlugFtraceEvent::BlockPlugFtraceEvent(BlockPlugFtraceEvent&&) noexcept = default;
BlockPlugFtraceEvent& BlockPlugFtraceEvent::operator=(BlockPlugFtraceEvent&&) = default;

bool BlockPlugFtraceEvent::operator==(const BlockPlugFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockPlugFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockPlugFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockPlugFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockPlugFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: comm
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockGetrqFtraceEvent::BlockGetrqFtraceEvent() = default;
BlockGetrqFtraceEvent::~BlockGetrqFtraceEvent() = default;
BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(const BlockGetrqFtraceEvent&) = default;
BlockGetrqFtraceEvent& BlockGetrqFtraceEvent::operator=(const BlockGetrqFtraceEvent&) = default;
BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(BlockGetrqFtraceEvent&&) noexcept = default;
BlockGetrqFtraceEvent& BlockGetrqFtraceEvent::operator=(BlockGetrqFtraceEvent&&) = default;

bool BlockGetrqFtraceEvent::operator==(const BlockGetrqFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockGetrqFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 5 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockGetrqFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockGetrqFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockGetrqFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: rwbs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, rwbs_, msg);
  }

  // Field 5: comm
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent() = default;
BlockDirtyBufferFtraceEvent::~BlockDirtyBufferFtraceEvent() = default;
BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(const BlockDirtyBufferFtraceEvent&) = default;
BlockDirtyBufferFtraceEvent& BlockDirtyBufferFtraceEvent::operator=(const BlockDirtyBufferFtraceEvent&) = default;
BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(BlockDirtyBufferFtraceEvent&&) noexcept = default;
BlockDirtyBufferFtraceEvent& BlockDirtyBufferFtraceEvent::operator=(BlockDirtyBufferFtraceEvent&&) = default;

bool BlockDirtyBufferFtraceEvent::operator==(const BlockDirtyBufferFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_);
}

bool BlockDirtyBufferFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockDirtyBufferFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockDirtyBufferFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockDirtyBufferFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent() = default;
BlockBioRemapFtraceEvent::~BlockBioRemapFtraceEvent() = default;
BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(const BlockBioRemapFtraceEvent&) = default;
BlockBioRemapFtraceEvent& BlockBioRemapFtraceEvent::operator=(const BlockBioRemapFtraceEvent&) = default;
BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(BlockBioRemapFtraceEvent&&) noexcept = default;
BlockBioRemapFtraceEvent& BlockBioRemapFtraceEvent::operator=(BlockBioRemapFtraceEvent&&) = default;

bool BlockBioRemapFtraceEvent::operator==(const BlockBioRemapFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(old_dev_, other.old_dev_)
   && ::protozero::internal::gen_helpers::EqualsField(old_sector_, other.old_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_);
}

bool BlockBioRemapFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* old_dev */:
        field.get(&old_dev_);
        break;
      case 5 /* old_sector */:
        field.get(&old_sector_);
        break;
      case 6 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockBioRemapFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockBioRemapFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockBioRemapFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: old_dev
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, old_dev_, msg);
  }

  // Field 5: old_sector
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, old_sector_, msg);
  }

  // Field 6: rwbs
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, rwbs_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent() = default;
BlockBioQueueFtraceEvent::~BlockBioQueueFtraceEvent() = default;
BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(const BlockBioQueueFtraceEvent&) = default;
BlockBioQueueFtraceEvent& BlockBioQueueFtraceEvent::operator=(const BlockBioQueueFtraceEvent&) = default;
BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(BlockBioQueueFtraceEvent&&) noexcept = default;
BlockBioQueueFtraceEvent& BlockBioQueueFtraceEvent::operator=(BlockBioQueueFtraceEvent&&) = default;

bool BlockBioQueueFtraceEvent::operator==(const BlockBioQueueFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockBioQueueFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 5 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockBioQueueFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockBioQueueFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockBioQueueFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: rwbs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, rwbs_, msg);
  }

  // Field 5: comm
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent() = default;
BlockBioFrontmergeFtraceEvent::~BlockBioFrontmergeFtraceEvent() = default;
BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(const BlockBioFrontmergeFtraceEvent&) = default;
BlockBioFrontmergeFtraceEvent& BlockBioFrontmergeFtraceEvent::operator=(const BlockBioFrontmergeFtraceEvent&) = default;
BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(BlockBioFrontmergeFtraceEvent&&) noexcept = default;
BlockBioFrontmergeFtraceEvent& BlockBioFrontmergeFtraceEvent::operator=(BlockBioFrontmergeFtraceEvent&&) = default;

bool BlockBioFrontmergeFtraceEvent::operator==(const BlockBioFrontmergeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockBioFrontmergeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 5 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockBioFrontmergeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockBioFrontmergeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockBioFrontmergeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: rwbs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, rwbs_, msg);
  }

  // Field 5: comm
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent() = default;
BlockBioCompleteFtraceEvent::~BlockBioCompleteFtraceEvent() = default;
BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(const BlockBioCompleteFtraceEvent&) = default;
BlockBioCompleteFtraceEvent& BlockBioCompleteFtraceEvent::operator=(const BlockBioCompleteFtraceEvent&) = default;
BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(BlockBioCompleteFtraceEvent&&) noexcept = default;
BlockBioCompleteFtraceEvent& BlockBioCompleteFtraceEvent::operator=(BlockBioCompleteFtraceEvent&&) = default;

bool BlockBioCompleteFtraceEvent::operator==(const BlockBioCompleteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(error_, other.error_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_);
}

bool BlockBioCompleteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* error */:
        field.get(&error_);
        break;
      case 5 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockBioCompleteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockBioCompleteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockBioCompleteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: error
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, error_, msg);
  }

  // Field 5: rwbs
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, rwbs_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent() = default;
BlockBioBounceFtraceEvent::~BlockBioBounceFtraceEvent() = default;
BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(const BlockBioBounceFtraceEvent&) = default;
BlockBioBounceFtraceEvent& BlockBioBounceFtraceEvent::operator=(const BlockBioBounceFtraceEvent&) = default;
BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(BlockBioBounceFtraceEvent&&) noexcept = default;
BlockBioBounceFtraceEvent& BlockBioBounceFtraceEvent::operator=(BlockBioBounceFtraceEvent&&) = default;

bool BlockBioBounceFtraceEvent::operator==(const BlockBioBounceFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockBioBounceFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 5 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockBioBounceFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockBioBounceFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockBioBounceFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: rwbs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, rwbs_, msg);
  }

  // Field 5: comm
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent() = default;
BlockBioBackmergeFtraceEvent::~BlockBioBackmergeFtraceEvent() = default;
BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(const BlockBioBackmergeFtraceEvent&) = default;
BlockBioBackmergeFtraceEvent& BlockBioBackmergeFtraceEvent::operator=(const BlockBioBackmergeFtraceEvent&) = default;
BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(BlockBioBackmergeFtraceEvent&&) noexcept = default;
BlockBioBackmergeFtraceEvent& BlockBioBackmergeFtraceEvent::operator=(BlockBioBackmergeFtraceEvent&&) = default;

bool BlockBioBackmergeFtraceEvent::operator==(const BlockBioBackmergeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_);
}

bool BlockBioBackmergeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 5 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockBioBackmergeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockBioBackmergeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockBioBackmergeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: rwbs
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, rwbs_, msg);
  }

  // Field 5: comm
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, comm_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent() = default;
BlockRqIssueFtraceEvent::~BlockRqIssueFtraceEvent() = default;
BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(const BlockRqIssueFtraceEvent&) = default;
BlockRqIssueFtraceEvent& BlockRqIssueFtraceEvent::operator=(const BlockRqIssueFtraceEvent&) = default;
BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(BlockRqIssueFtraceEvent&&) noexcept = default;
BlockRqIssueFtraceEvent& BlockRqIssueFtraceEvent::operator=(BlockRqIssueFtraceEvent&&) = default;

bool BlockRqIssueFtraceEvent::operator==(const BlockRqIssueFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dev_, other.dev_)
   && ::protozero::internal::gen_helpers::EqualsField(sector_, other.sector_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_sector_, other.nr_sector_)
   && ::protozero::internal::gen_helpers::EqualsField(bytes_, other.bytes_)
   && ::protozero::internal::gen_helpers::EqualsField(rwbs_, other.rwbs_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_)
   && ::protozero::internal::gen_helpers::EqualsField(cmd_, other.cmd_);
}

bool BlockRqIssueFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dev */:
        field.get(&dev_);
        break;
      case 2 /* sector */:
        field.get(&sector_);
        break;
      case 3 /* nr_sector */:
        field.get(&nr_sector_);
        break;
      case 4 /* bytes */:
        field.get(&bytes_);
        break;
      case 5 /* rwbs */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &rwbs_);
        break;
      case 6 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      case 7 /* cmd */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cmd_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string BlockRqIssueFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> BlockRqIssueFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void BlockRqIssueFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dev
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dev_, msg);
  }

  // Field 2: sector
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, sector_, msg);
  }

  // Field 3: nr_sector
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, nr_sector_, msg);
  }

  // Field 4: bytes
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, bytes_, msg);
  }

  // Field 5: rwbs
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, rwbs_, msg);
  }

  // Field 6: comm
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, comm_, msg);
  }

  // Field 7: cmd
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeString(7, cmd_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
