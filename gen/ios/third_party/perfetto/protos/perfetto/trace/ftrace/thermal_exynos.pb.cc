// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/thermal_exynos.proto

#include "protos/perfetto/trace/ftrace/thermal_exynos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ThermalExynosAcpmBulkFtraceEvent::ThermalExynosAcpmBulkFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tz_id_)*/0u
  , /*decltype(_impl_.current_temp_)*/0u
  , /*decltype(_impl_.ctrl_temp_)*/0u
  , /*decltype(_impl_.cdev_state_)*/0u
  , /*decltype(_impl_.pid_et_p_)*/0
  , /*decltype(_impl_.pid_power_range_)*/0
  , /*decltype(_impl_.pid_p_)*/0
  , /*decltype(_impl_.pid_i_)*/0
  , /*decltype(_impl_.k_p_)*/0
  , /*decltype(_impl_.k_i_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}} {}
struct ThermalExynosAcpmBulkFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThermalExynosAcpmBulkFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThermalExynosAcpmBulkFtraceEventDefaultTypeInternal() {}
  union {
    ThermalExynosAcpmBulkFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThermalExynosAcpmBulkFtraceEventDefaultTypeInternal _ThermalExynosAcpmBulkFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR ThermalExynosAcpmHighOverheadFtraceEvent::ThermalExynosAcpmHighOverheadFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tz_id_)*/0
  , /*decltype(_impl_.current_temp_)*/0u
  , /*decltype(_impl_.ctrl_temp_)*/0u
  , /*decltype(_impl_.cdev_state_)*/0u
  , /*decltype(_impl_.pid_et_p_)*/0
  , /*decltype(_impl_.k_p_)*/0
  , /*decltype(_impl_.k_i_)*/0} {}
struct ThermalExynosAcpmHighOverheadFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThermalExynosAcpmHighOverheadFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThermalExynosAcpmHighOverheadFtraceEventDefaultTypeInternal() {}
  union {
    ThermalExynosAcpmHighOverheadFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThermalExynosAcpmHighOverheadFtraceEventDefaultTypeInternal _ThermalExynosAcpmHighOverheadFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class ThermalExynosAcpmBulkFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ThermalExynosAcpmBulkFtraceEvent>()._impl_._has_bits_);
  static void set_has_tz_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ctrl_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cdev_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid_et_p(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pid_power_range(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pid_p(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pid_i(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_k_p(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_k_i(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ThermalExynosAcpmBulkFtraceEvent::ThermalExynosAcpmBulkFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
}
ThermalExynosAcpmBulkFtraceEvent::ThermalExynosAcpmBulkFtraceEvent(const ThermalExynosAcpmBulkFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ThermalExynosAcpmBulkFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tz_id_){}
    , decltype(_impl_.current_temp_){}
    , decltype(_impl_.ctrl_temp_){}
    , decltype(_impl_.cdev_state_){}
    , decltype(_impl_.pid_et_p_){}
    , decltype(_impl_.pid_power_range_){}
    , decltype(_impl_.pid_p_){}
    , decltype(_impl_.pid_i_){}
    , decltype(_impl_.k_p_){}
    , decltype(_impl_.k_i_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.tz_id_, &from._impl_.tz_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.tz_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
}

inline void ThermalExynosAcpmBulkFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tz_id_){0u}
    , decltype(_impl_.current_temp_){0u}
    , decltype(_impl_.ctrl_temp_){0u}
    , decltype(_impl_.cdev_state_){0u}
    , decltype(_impl_.pid_et_p_){0}
    , decltype(_impl_.pid_power_range_){0}
    , decltype(_impl_.pid_p_){0}
    , decltype(_impl_.pid_i_){0}
    , decltype(_impl_.k_p_){0}
    , decltype(_impl_.k_i_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
  };
}

ThermalExynosAcpmBulkFtraceEvent::~ThermalExynosAcpmBulkFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThermalExynosAcpmBulkFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThermalExynosAcpmBulkFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThermalExynosAcpmBulkFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tz_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pid_i_) -
        reinterpret_cast<char*>(&_impl_.tz_id_)) + sizeof(_impl_.pid_i_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.k_p_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.k_p_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ThermalExynosAcpmBulkFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tz_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tz_id(&has_bits);
          _impl_.tz_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_current_temp(&has_bits);
          _impl_.current_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctrl_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ctrl_temp(&has_bits);
          _impl_.ctrl_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cdev_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cdev_state(&has_bits);
          _impl_.cdev_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid_et_p = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pid_et_p(&has_bits);
          _impl_.pid_et_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid_power_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pid_power_range(&has_bits);
          _impl_.pid_power_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid_p = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_pid_p(&has_bits);
          _impl_.pid_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid_i = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_pid_i(&has_bits);
          _impl_.pid_i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 k_p = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_k_p(&has_bits);
          _impl_.k_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 k_i = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_k_i(&has_bits);
          _impl_.k_i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThermalExynosAcpmBulkFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tz_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tz_id(), target);
  }

  // optional uint32 current_temp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_current_temp(), target);
  }

  // optional uint32 ctrl_temp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ctrl_temp(), target);
  }

  // optional uint32 cdev_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cdev_state(), target);
  }

  // optional int32 pid_et_p = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_pid_et_p(), target);
  }

  // optional int32 pid_power_range = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_pid_power_range(), target);
  }

  // optional int32 pid_p = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_pid_p(), target);
  }

  // optional int32 pid_i = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid_i(), target);
  }

  // optional int32 k_p = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_k_p(), target);
  }

  // optional int32 k_i = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_k_i(), target);
  }

  // optional uint64 timestamp = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
  return target;
}

size_t ThermalExynosAcpmBulkFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tz_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tz_id());
    }

    // optional uint32 current_temp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_temp());
    }

    // optional uint32 ctrl_temp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctrl_temp());
    }

    // optional uint32 cdev_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cdev_state());
    }

    // optional int32 pid_et_p = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid_et_p());
    }

    // optional int32 pid_power_range = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid_power_range());
    }

    // optional int32 pid_p = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid_p());
    }

    // optional int32 pid_i = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid_i());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 k_p = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k_p());
    }

    // optional int32 k_i = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k_i());
    }

    // optional uint64 timestamp = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalExynosAcpmBulkFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ThermalExynosAcpmBulkFtraceEvent*>(
      &from));
}

void ThermalExynosAcpmBulkFtraceEvent::MergeFrom(const ThermalExynosAcpmBulkFtraceEvent& from) {
  ThermalExynosAcpmBulkFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tz_id_ = from._impl_.tz_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.current_temp_ = from._impl_.current_temp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ctrl_temp_ = from._impl_.ctrl_temp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cdev_state_ = from._impl_.cdev_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pid_et_p_ = from._impl_.pid_et_p_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_power_range_ = from._impl_.pid_power_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pid_p_ = from._impl_.pid_p_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.pid_i_ = from._impl_.pid_i_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.k_p_ = from._impl_.k_p_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.k_i_ = from._impl_.k_i_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ThermalExynosAcpmBulkFtraceEvent::CopyFrom(const ThermalExynosAcpmBulkFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ThermalExynosAcpmBulkFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalExynosAcpmBulkFtraceEvent::IsInitialized() const {
  return true;
}

void ThermalExynosAcpmBulkFtraceEvent::InternalSwap(ThermalExynosAcpmBulkFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalExynosAcpmBulkFtraceEvent, _impl_.timestamp_)
      + sizeof(ThermalExynosAcpmBulkFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ThermalExynosAcpmBulkFtraceEvent, _impl_.tz_id_)>(
          reinterpret_cast<char*>(&_impl_.tz_id_),
          reinterpret_cast<char*>(&other->_impl_.tz_id_));
}

std::string ThermalExynosAcpmBulkFtraceEvent::GetTypeName() const {
  return "perfetto.protos.ThermalExynosAcpmBulkFtraceEvent";
}


// ===================================================================

class ThermalExynosAcpmHighOverheadFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ThermalExynosAcpmHighOverheadFtraceEvent>()._impl_._has_bits_);
  static void set_has_tz_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ctrl_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cdev_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid_et_p(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_k_p(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_k_i(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ThermalExynosAcpmHighOverheadFtraceEvent::ThermalExynosAcpmHighOverheadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
}
ThermalExynosAcpmHighOverheadFtraceEvent::ThermalExynosAcpmHighOverheadFtraceEvent(const ThermalExynosAcpmHighOverheadFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ThermalExynosAcpmHighOverheadFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tz_id_){}
    , decltype(_impl_.current_temp_){}
    , decltype(_impl_.ctrl_temp_){}
    , decltype(_impl_.cdev_state_){}
    , decltype(_impl_.pid_et_p_){}
    , decltype(_impl_.k_p_){}
    , decltype(_impl_.k_i_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.tz_id_, &from._impl_.tz_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.k_i_) -
    reinterpret_cast<char*>(&_impl_.tz_id_)) + sizeof(_impl_.k_i_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
}

inline void ThermalExynosAcpmHighOverheadFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tz_id_){0}
    , decltype(_impl_.current_temp_){0u}
    , decltype(_impl_.ctrl_temp_){0u}
    , decltype(_impl_.cdev_state_){0u}
    , decltype(_impl_.pid_et_p_){0}
    , decltype(_impl_.k_p_){0}
    , decltype(_impl_.k_i_){0}
  };
}

ThermalExynosAcpmHighOverheadFtraceEvent::~ThermalExynosAcpmHighOverheadFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThermalExynosAcpmHighOverheadFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThermalExynosAcpmHighOverheadFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThermalExynosAcpmHighOverheadFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.tz_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.k_i_) -
        reinterpret_cast<char*>(&_impl_.tz_id_)) + sizeof(_impl_.k_i_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ThermalExynosAcpmHighOverheadFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tz_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tz_id(&has_bits);
          _impl_.tz_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_current_temp(&has_bits);
          _impl_.current_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctrl_temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ctrl_temp(&has_bits);
          _impl_.ctrl_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cdev_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cdev_state(&has_bits);
          _impl_.cdev_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid_et_p = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pid_et_p(&has_bits);
          _impl_.pid_et_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 k_p = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_k_p(&has_bits);
          _impl_.k_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 k_i = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_k_i(&has_bits);
          _impl_.k_i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThermalExynosAcpmHighOverheadFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tz_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tz_id(), target);
  }

  // optional uint32 current_temp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_current_temp(), target);
  }

  // optional uint32 ctrl_temp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ctrl_temp(), target);
  }

  // optional uint32 cdev_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cdev_state(), target);
  }

  // optional int32 pid_et_p = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_pid_et_p(), target);
  }

  // optional int32 k_p = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_k_p(), target);
  }

  // optional int32 k_i = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_k_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
  return target;
}

size_t ThermalExynosAcpmHighOverheadFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 tz_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tz_id());
    }

    // optional uint32 current_temp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_temp());
    }

    // optional uint32 ctrl_temp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctrl_temp());
    }

    // optional uint32 cdev_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cdev_state());
    }

    // optional int32 pid_et_p = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid_et_p());
    }

    // optional int32 k_p = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k_p());
    }

    // optional int32 k_i = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k_i());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalExynosAcpmHighOverheadFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ThermalExynosAcpmHighOverheadFtraceEvent*>(
      &from));
}

void ThermalExynosAcpmHighOverheadFtraceEvent::MergeFrom(const ThermalExynosAcpmHighOverheadFtraceEvent& from) {
  ThermalExynosAcpmHighOverheadFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tz_id_ = from._impl_.tz_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.current_temp_ = from._impl_.current_temp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ctrl_temp_ = from._impl_.ctrl_temp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cdev_state_ = from._impl_.cdev_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pid_et_p_ = from._impl_.pid_et_p_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.k_p_ = from._impl_.k_p_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.k_i_ = from._impl_.k_i_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ThermalExynosAcpmHighOverheadFtraceEvent::CopyFrom(const ThermalExynosAcpmHighOverheadFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalExynosAcpmHighOverheadFtraceEvent::IsInitialized() const {
  return true;
}

void ThermalExynosAcpmHighOverheadFtraceEvent::InternalSwap(ThermalExynosAcpmHighOverheadFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalExynosAcpmHighOverheadFtraceEvent, _impl_.k_i_)
      + sizeof(ThermalExynosAcpmHighOverheadFtraceEvent::_impl_.k_i_)
      - PROTOBUF_FIELD_OFFSET(ThermalExynosAcpmHighOverheadFtraceEvent, _impl_.tz_id_)>(
          reinterpret_cast<char*>(&_impl_.tz_id_),
          reinterpret_cast<char*>(&other->_impl_.tz_id_));
}

std::string ThermalExynosAcpmHighOverheadFtraceEvent::GetTypeName() const {
  return "perfetto.protos.ThermalExynosAcpmHighOverheadFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ThermalExynosAcpmBulkFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::ThermalExynosAcpmBulkFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ThermalExynosAcpmBulkFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ThermalExynosAcpmHighOverheadFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::ThermalExynosAcpmHighOverheadFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ThermalExynosAcpmHighOverheadFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
