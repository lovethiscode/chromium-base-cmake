#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/dpu.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

DpuDsiTxFtraceEvent::DpuDsiTxFtraceEvent() = default;
DpuDsiTxFtraceEvent::~DpuDsiTxFtraceEvent() = default;
DpuDsiTxFtraceEvent::DpuDsiTxFtraceEvent(const DpuDsiTxFtraceEvent&) = default;
DpuDsiTxFtraceEvent& DpuDsiTxFtraceEvent::operator=(const DpuDsiTxFtraceEvent&) = default;
DpuDsiTxFtraceEvent::DpuDsiTxFtraceEvent(DpuDsiTxFtraceEvent&&) noexcept = default;
DpuDsiTxFtraceEvent& DpuDsiTxFtraceEvent::operator=(DpuDsiTxFtraceEvent&&) = default;

bool DpuDsiTxFtraceEvent::operator==(const DpuDsiTxFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(tx_buf_, other.tx_buf_)
   && ::protozero::internal::gen_helpers::EqualsField(last_, other.last_)
   && ::protozero::internal::gen_helpers::EqualsField(delay_ms_, other.delay_ms_);
}

bool DpuDsiTxFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* type */:
        field.get(&type_);
        break;
      case 2 /* tx_buf */:
        field.get(&tx_buf_);
        break;
      case 3 /* last */:
        field.get(&last_);
        break;
      case 4 /* delay_ms */:
        field.get(&delay_ms_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DpuDsiTxFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DpuDsiTxFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DpuDsiTxFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: type
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, type_, msg);
  }

  // Field 2: tx_buf
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, tx_buf_, msg);
  }

  // Field 3: last
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, last_, msg);
  }

  // Field 4: delay_ms
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, delay_ms_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DpuDsiRxFtraceEvent::DpuDsiRxFtraceEvent() = default;
DpuDsiRxFtraceEvent::~DpuDsiRxFtraceEvent() = default;
DpuDsiRxFtraceEvent::DpuDsiRxFtraceEvent(const DpuDsiRxFtraceEvent&) = default;
DpuDsiRxFtraceEvent& DpuDsiRxFtraceEvent::operator=(const DpuDsiRxFtraceEvent&) = default;
DpuDsiRxFtraceEvent::DpuDsiRxFtraceEvent(DpuDsiRxFtraceEvent&&) noexcept = default;
DpuDsiRxFtraceEvent& DpuDsiRxFtraceEvent::operator=(DpuDsiRxFtraceEvent&&) = default;

bool DpuDsiRxFtraceEvent::operator==(const DpuDsiRxFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cmd_, other.cmd_)
   && ::protozero::internal::gen_helpers::EqualsField(rx_buf_, other.rx_buf_);
}

bool DpuDsiRxFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cmd */:
        field.get(&cmd_);
        break;
      case 2 /* rx_buf */:
        field.get(&rx_buf_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DpuDsiRxFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DpuDsiRxFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DpuDsiRxFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cmd
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cmd_, msg);
  }

  // Field 2: rx_buf
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, rx_buf_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DpuDsiCmdFifoStatusFtraceEvent::DpuDsiCmdFifoStatusFtraceEvent() = default;
DpuDsiCmdFifoStatusFtraceEvent::~DpuDsiCmdFifoStatusFtraceEvent() = default;
DpuDsiCmdFifoStatusFtraceEvent::DpuDsiCmdFifoStatusFtraceEvent(const DpuDsiCmdFifoStatusFtraceEvent&) = default;
DpuDsiCmdFifoStatusFtraceEvent& DpuDsiCmdFifoStatusFtraceEvent::operator=(const DpuDsiCmdFifoStatusFtraceEvent&) = default;
DpuDsiCmdFifoStatusFtraceEvent::DpuDsiCmdFifoStatusFtraceEvent(DpuDsiCmdFifoStatusFtraceEvent&&) noexcept = default;
DpuDsiCmdFifoStatusFtraceEvent& DpuDsiCmdFifoStatusFtraceEvent::operator=(DpuDsiCmdFifoStatusFtraceEvent&&) = default;

bool DpuDsiCmdFifoStatusFtraceEvent::operator==(const DpuDsiCmdFifoStatusFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(header_, other.header_)
   && ::protozero::internal::gen_helpers::EqualsField(payload_, other.payload_);
}

bool DpuDsiCmdFifoStatusFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* header */:
        field.get(&header_);
        break;
      case 2 /* payload */:
        field.get(&payload_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DpuDsiCmdFifoStatusFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DpuDsiCmdFifoStatusFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DpuDsiCmdFifoStatusFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: header
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, header_, msg);
  }

  // Field 2: payload
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, payload_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DpuTracingMarkWriteFtraceEvent::DpuTracingMarkWriteFtraceEvent() = default;
DpuTracingMarkWriteFtraceEvent::~DpuTracingMarkWriteFtraceEvent() = default;
DpuTracingMarkWriteFtraceEvent::DpuTracingMarkWriteFtraceEvent(const DpuTracingMarkWriteFtraceEvent&) = default;
DpuTracingMarkWriteFtraceEvent& DpuTracingMarkWriteFtraceEvent::operator=(const DpuTracingMarkWriteFtraceEvent&) = default;
DpuTracingMarkWriteFtraceEvent::DpuTracingMarkWriteFtraceEvent(DpuTracingMarkWriteFtraceEvent&&) noexcept = default;
DpuTracingMarkWriteFtraceEvent& DpuTracingMarkWriteFtraceEvent::operator=(DpuTracingMarkWriteFtraceEvent&&) = default;

bool DpuTracingMarkWriteFtraceEvent::operator==(const DpuTracingMarkWriteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_name_, other.trace_name_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_begin_, other.trace_begin_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(type_, other.type_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_);
}

bool DpuTracingMarkWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* trace_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &trace_name_);
        break;
      case 3 /* trace_begin */:
        field.get(&trace_begin_);
        break;
      case 4 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 5 /* type */:
        field.get(&type_);
        break;
      case 6 /* value */:
        field.get(&value_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DpuTracingMarkWriteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DpuTracingMarkWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DpuTracingMarkWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, pid_, msg);
  }

  // Field 2: trace_name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, trace_name_, msg);
  }

  // Field 3: trace_begin
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, trace_begin_, msg);
  }

  // Field 4: name
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, name_, msg);
  }

  // Field 5: type
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, type_, msg);
  }

  // Field 6: value
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, value_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
