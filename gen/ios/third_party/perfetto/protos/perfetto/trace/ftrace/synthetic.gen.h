// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SYNTHETIC_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SYNTHETIC_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class SuspendResumeMinimalFtraceEvent;
class RssStatThrottledFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT SuspendResumeMinimalFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kStartFieldNumber = 1,
  };

  SuspendResumeMinimalFtraceEvent();
  ~SuspendResumeMinimalFtraceEvent() override;
  SuspendResumeMinimalFtraceEvent(SuspendResumeMinimalFtraceEvent&&) noexcept;
  SuspendResumeMinimalFtraceEvent& operator=(SuspendResumeMinimalFtraceEvent&&);
  SuspendResumeMinimalFtraceEvent(const SuspendResumeMinimalFtraceEvent&);
  SuspendResumeMinimalFtraceEvent& operator=(const SuspendResumeMinimalFtraceEvent&);
  bool operator==(const SuspendResumeMinimalFtraceEvent&) const;
  bool operator!=(const SuspendResumeMinimalFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_start() const { return _has_field_[1]; }
  uint32_t start() const { return start_; }
  void set_start(uint32_t value) { start_ = value; _has_field_.set(1); }

 private:
  uint32_t start_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT RssStatThrottledFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCurrFieldNumber = 1,
    kMemberFieldNumber = 2,
    kMmIdFieldNumber = 3,
    kSizeFieldNumber = 4,
  };

  RssStatThrottledFtraceEvent();
  ~RssStatThrottledFtraceEvent() override;
  RssStatThrottledFtraceEvent(RssStatThrottledFtraceEvent&&) noexcept;
  RssStatThrottledFtraceEvent& operator=(RssStatThrottledFtraceEvent&&);
  RssStatThrottledFtraceEvent(const RssStatThrottledFtraceEvent&);
  RssStatThrottledFtraceEvent& operator=(const RssStatThrottledFtraceEvent&);
  bool operator==(const RssStatThrottledFtraceEvent&) const;
  bool operator!=(const RssStatThrottledFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_curr() const { return _has_field_[1]; }
  uint32_t curr() const { return curr_; }
  void set_curr(uint32_t value) { curr_ = value; _has_field_.set(1); }

  bool has_member() const { return _has_field_[2]; }
  int32_t member() const { return member_; }
  void set_member(int32_t value) { member_ = value; _has_field_.set(2); }

  bool has_mm_id() const { return _has_field_[3]; }
  uint32_t mm_id() const { return mm_id_; }
  void set_mm_id(uint32_t value) { mm_id_ = value; _has_field_.set(3); }

  bool has_size() const { return _has_field_[4]; }
  int64_t size() const { return size_; }
  void set_size(int64_t value) { size_ = value; _has_field_.set(4); }

 private:
  uint32_t curr_{};
  int32_t member_{};
  uint32_t mm_id_{};
  int64_t size_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SYNTHETIC_PROTO_CPP_H_
