#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/sde.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent() = default;
SdeSdePerfUpdateBusFtraceEvent::~SdeSdePerfUpdateBusFtraceEvent() = default;
SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(const SdeSdePerfUpdateBusFtraceEvent&) = default;
SdeSdePerfUpdateBusFtraceEvent& SdeSdePerfUpdateBusFtraceEvent::operator=(const SdeSdePerfUpdateBusFtraceEvent&) = default;
SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(SdeSdePerfUpdateBusFtraceEvent&&) noexcept = default;
SdeSdePerfUpdateBusFtraceEvent& SdeSdePerfUpdateBusFtraceEvent::operator=(SdeSdePerfUpdateBusFtraceEvent&&) = default;

bool SdeSdePerfUpdateBusFtraceEvent::operator==(const SdeSdePerfUpdateBusFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(ab_quota_, other.ab_quota_)
   && ::protozero::internal::gen_helpers::EqualsField(bus_id_, other.bus_id_)
   && ::protozero::internal::gen_helpers::EqualsField(client_, other.client_)
   && ::protozero::internal::gen_helpers::EqualsField(ib_quota_, other.ib_quota_);
}

bool SdeSdePerfUpdateBusFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* ab_quota */:
        field.get(&ab_quota_);
        break;
      case 2 /* bus_id */:
        field.get(&bus_id_);
        break;
      case 3 /* client */:
        field.get(&client_);
        break;
      case 4 /* ib_quota */:
        field.get(&ib_quota_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SdeSdePerfUpdateBusFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SdeSdePerfUpdateBusFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SdeSdePerfUpdateBusFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: ab_quota
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, ab_quota_, msg);
  }

  // Field 2: bus_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, bus_id_, msg);
  }

  // Field 3: client
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, client_, msg);
  }

  // Field 4: ib_quota
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, ib_quota_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent() = default;
SdeSdePerfSetQosLutsFtraceEvent::~SdeSdePerfSetQosLutsFtraceEvent() = default;
SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(const SdeSdePerfSetQosLutsFtraceEvent&) = default;
SdeSdePerfSetQosLutsFtraceEvent& SdeSdePerfSetQosLutsFtraceEvent::operator=(const SdeSdePerfSetQosLutsFtraceEvent&) = default;
SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(SdeSdePerfSetQosLutsFtraceEvent&&) noexcept = default;
SdeSdePerfSetQosLutsFtraceEvent& SdeSdePerfSetQosLutsFtraceEvent::operator=(SdeSdePerfSetQosLutsFtraceEvent&&) = default;

bool SdeSdePerfSetQosLutsFtraceEvent::operator==(const SdeSdePerfSetQosLutsFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(fl_, other.fl_)
   && ::protozero::internal::gen_helpers::EqualsField(fmt_, other.fmt_)
   && ::protozero::internal::gen_helpers::EqualsField(lut_, other.lut_)
   && ::protozero::internal::gen_helpers::EqualsField(lut_usage_, other.lut_usage_)
   && ::protozero::internal::gen_helpers::EqualsField(pnum_, other.pnum_)
   && ::protozero::internal::gen_helpers::EqualsField(rt_, other.rt_);
}

bool SdeSdePerfSetQosLutsFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* fl */:
        field.get(&fl_);
        break;
      case 2 /* fmt */:
        field.get(&fmt_);
        break;
      case 3 /* lut */:
        field.get(&lut_);
        break;
      case 4 /* lut_usage */:
        field.get(&lut_usage_);
        break;
      case 5 /* pnum */:
        field.get(&pnum_);
        break;
      case 6 /* rt */:
        field.get(&rt_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SdeSdePerfSetQosLutsFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SdeSdePerfSetQosLutsFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SdeSdePerfSetQosLutsFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: fl
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, fl_, msg);
  }

  // Field 2: fmt
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, fmt_, msg);
  }

  // Field 3: lut
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, lut_, msg);
  }

  // Field 4: lut_usage
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, lut_usage_, msg);
  }

  // Field 5: pnum
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, pnum_, msg);
  }

  // Field 6: rt
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, rt_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent() = default;
SdeSdePerfCrtcUpdateFtraceEvent::~SdeSdePerfCrtcUpdateFtraceEvent() = default;
SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(const SdeSdePerfCrtcUpdateFtraceEvent&) = default;
SdeSdePerfCrtcUpdateFtraceEvent& SdeSdePerfCrtcUpdateFtraceEvent::operator=(const SdeSdePerfCrtcUpdateFtraceEvent&) = default;
SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(SdeSdePerfCrtcUpdateFtraceEvent&&) noexcept = default;
SdeSdePerfCrtcUpdateFtraceEvent& SdeSdePerfCrtcUpdateFtraceEvent::operator=(SdeSdePerfCrtcUpdateFtraceEvent&&) = default;

bool SdeSdePerfCrtcUpdateFtraceEvent::operator==(const SdeSdePerfCrtcUpdateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bw_ctl_ebi_, other.bw_ctl_ebi_)
   && ::protozero::internal::gen_helpers::EqualsField(bw_ctl_llcc_, other.bw_ctl_llcc_)
   && ::protozero::internal::gen_helpers::EqualsField(bw_ctl_mnoc_, other.bw_ctl_mnoc_)
   && ::protozero::internal::gen_helpers::EqualsField(core_clk_rate_, other.core_clk_rate_)
   && ::protozero::internal::gen_helpers::EqualsField(crtc_, other.crtc_)
   && ::protozero::internal::gen_helpers::EqualsField(params_, other.params_)
   && ::protozero::internal::gen_helpers::EqualsField(per_pipe_ib_ebi_, other.per_pipe_ib_ebi_)
   && ::protozero::internal::gen_helpers::EqualsField(per_pipe_ib_llcc_, other.per_pipe_ib_llcc_)
   && ::protozero::internal::gen_helpers::EqualsField(per_pipe_ib_mnoc_, other.per_pipe_ib_mnoc_)
   && ::protozero::internal::gen_helpers::EqualsField(stop_req_, other.stop_req_)
   && ::protozero::internal::gen_helpers::EqualsField(update_bus_, other.update_bus_)
   && ::protozero::internal::gen_helpers::EqualsField(update_clk_, other.update_clk_);
}

bool SdeSdePerfCrtcUpdateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bw_ctl_ebi */:
        field.get(&bw_ctl_ebi_);
        break;
      case 2 /* bw_ctl_llcc */:
        field.get(&bw_ctl_llcc_);
        break;
      case 3 /* bw_ctl_mnoc */:
        field.get(&bw_ctl_mnoc_);
        break;
      case 4 /* core_clk_rate */:
        field.get(&core_clk_rate_);
        break;
      case 5 /* crtc */:
        field.get(&crtc_);
        break;
      case 6 /* params */:
        field.get(&params_);
        break;
      case 7 /* per_pipe_ib_ebi */:
        field.get(&per_pipe_ib_ebi_);
        break;
      case 8 /* per_pipe_ib_llcc */:
        field.get(&per_pipe_ib_llcc_);
        break;
      case 9 /* per_pipe_ib_mnoc */:
        field.get(&per_pipe_ib_mnoc_);
        break;
      case 10 /* stop_req */:
        field.get(&stop_req_);
        break;
      case 11 /* update_bus */:
        field.get(&update_bus_);
        break;
      case 12 /* update_clk */:
        field.get(&update_clk_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SdeSdePerfCrtcUpdateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SdeSdePerfCrtcUpdateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SdeSdePerfCrtcUpdateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bw_ctl_ebi
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bw_ctl_ebi_, msg);
  }

  // Field 2: bw_ctl_llcc
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, bw_ctl_llcc_, msg);
  }

  // Field 3: bw_ctl_mnoc
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, bw_ctl_mnoc_, msg);
  }

  // Field 4: core_clk_rate
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, core_clk_rate_, msg);
  }

  // Field 5: crtc
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, crtc_, msg);
  }

  // Field 6: params
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, params_, msg);
  }

  // Field 7: per_pipe_ib_ebi
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, per_pipe_ib_ebi_, msg);
  }

  // Field 8: per_pipe_ib_llcc
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, per_pipe_ib_llcc_, msg);
  }

  // Field 9: per_pipe_ib_mnoc
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, per_pipe_ib_mnoc_, msg);
  }

  // Field 10: stop_req
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(10, stop_req_, msg);
  }

  // Field 11: update_bus
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, update_bus_, msg);
  }

  // Field 12: update_clk
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, update_clk_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent() = default;
SdeSdePerfCalcCrtcFtraceEvent::~SdeSdePerfCalcCrtcFtraceEvent() = default;
SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(const SdeSdePerfCalcCrtcFtraceEvent&) = default;
SdeSdePerfCalcCrtcFtraceEvent& SdeSdePerfCalcCrtcFtraceEvent::operator=(const SdeSdePerfCalcCrtcFtraceEvent&) = default;
SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(SdeSdePerfCalcCrtcFtraceEvent&&) noexcept = default;
SdeSdePerfCalcCrtcFtraceEvent& SdeSdePerfCalcCrtcFtraceEvent::operator=(SdeSdePerfCalcCrtcFtraceEvent&&) = default;

bool SdeSdePerfCalcCrtcFtraceEvent::operator==(const SdeSdePerfCalcCrtcFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(bw_ctl_ebi_, other.bw_ctl_ebi_)
   && ::protozero::internal::gen_helpers::EqualsField(bw_ctl_llcc_, other.bw_ctl_llcc_)
   && ::protozero::internal::gen_helpers::EqualsField(bw_ctl_mnoc_, other.bw_ctl_mnoc_)
   && ::protozero::internal::gen_helpers::EqualsField(core_clk_rate_, other.core_clk_rate_)
   && ::protozero::internal::gen_helpers::EqualsField(crtc_, other.crtc_)
   && ::protozero::internal::gen_helpers::EqualsField(ib_ebi_, other.ib_ebi_)
   && ::protozero::internal::gen_helpers::EqualsField(ib_llcc_, other.ib_llcc_)
   && ::protozero::internal::gen_helpers::EqualsField(ib_mnoc_, other.ib_mnoc_);
}

bool SdeSdePerfCalcCrtcFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* bw_ctl_ebi */:
        field.get(&bw_ctl_ebi_);
        break;
      case 2 /* bw_ctl_llcc */:
        field.get(&bw_ctl_llcc_);
        break;
      case 3 /* bw_ctl_mnoc */:
        field.get(&bw_ctl_mnoc_);
        break;
      case 4 /* core_clk_rate */:
        field.get(&core_clk_rate_);
        break;
      case 5 /* crtc */:
        field.get(&crtc_);
        break;
      case 6 /* ib_ebi */:
        field.get(&ib_ebi_);
        break;
      case 7 /* ib_llcc */:
        field.get(&ib_llcc_);
        break;
      case 8 /* ib_mnoc */:
        field.get(&ib_mnoc_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SdeSdePerfCalcCrtcFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SdeSdePerfCalcCrtcFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SdeSdePerfCalcCrtcFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: bw_ctl_ebi
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, bw_ctl_ebi_, msg);
  }

  // Field 2: bw_ctl_llcc
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, bw_ctl_llcc_, msg);
  }

  // Field 3: bw_ctl_mnoc
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, bw_ctl_mnoc_, msg);
  }

  // Field 4: core_clk_rate
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, core_clk_rate_, msg);
  }

  // Field 5: crtc
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, crtc_, msg);
  }

  // Field 6: ib_ebi
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, ib_ebi_, msg);
  }

  // Field 7: ib_llcc
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, ib_llcc_, msg);
  }

  // Field 8: ib_mnoc
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, ib_mnoc_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent() = default;
SdeSdeEvtlogFtraceEvent::~SdeSdeEvtlogFtraceEvent() = default;
SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(const SdeSdeEvtlogFtraceEvent&) = default;
SdeSdeEvtlogFtraceEvent& SdeSdeEvtlogFtraceEvent::operator=(const SdeSdeEvtlogFtraceEvent&) = default;
SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(SdeSdeEvtlogFtraceEvent&&) noexcept = default;
SdeSdeEvtlogFtraceEvent& SdeSdeEvtlogFtraceEvent::operator=(SdeSdeEvtlogFtraceEvent&&) = default;

bool SdeSdeEvtlogFtraceEvent::operator==(const SdeSdeEvtlogFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(evtlog_tag_, other.evtlog_tag_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(tag_id_, other.tag_id_);
}

bool SdeSdeEvtlogFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* evtlog_tag */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &evtlog_tag_);
        break;
      case 2 /* pid */:
        field.get(&pid_);
        break;
      case 3 /* tag_id */:
        field.get(&tag_id_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SdeSdeEvtlogFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SdeSdeEvtlogFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SdeSdeEvtlogFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: evtlog_tag
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, evtlog_tag_, msg);
  }

  // Field 2: pid
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, pid_, msg);
  }

  // Field 3: tag_id
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, tag_id_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent() = default;
SdeTracingMarkWriteFtraceEvent::~SdeTracingMarkWriteFtraceEvent() = default;
SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent&) = default;
SdeTracingMarkWriteFtraceEvent& SdeTracingMarkWriteFtraceEvent::operator=(const SdeTracingMarkWriteFtraceEvent&) = default;
SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(SdeTracingMarkWriteFtraceEvent&&) noexcept = default;
SdeTracingMarkWriteFtraceEvent& SdeTracingMarkWriteFtraceEvent::operator=(SdeTracingMarkWriteFtraceEvent&&) = default;

bool SdeTracingMarkWriteFtraceEvent::operator==(const SdeTracingMarkWriteFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_name_, other.trace_name_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_type_, other.trace_type_)
   && ::protozero::internal::gen_helpers::EqualsField(value_, other.value_)
   && ::protozero::internal::gen_helpers::EqualsField(trace_begin_, other.trace_begin_);
}

bool SdeTracingMarkWriteFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* pid */:
        field.get(&pid_);
        break;
      case 2 /* trace_name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &trace_name_);
        break;
      case 3 /* trace_type */:
        field.get(&trace_type_);
        break;
      case 4 /* value */:
        field.get(&value_);
        break;
      case 5 /* trace_begin */:
        field.get(&trace_begin_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string SdeTracingMarkWriteFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> SdeTracingMarkWriteFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void SdeTracingMarkWriteFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: pid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, pid_, msg);
  }

  // Field 2: trace_name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, trace_name_, msg);
  }

  // Field 3: trace_type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, trace_type_, msg);
  }

  // Field 4: value
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, value_, msg);
  }

  // Field 5: trace_begin
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, trace_begin_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
