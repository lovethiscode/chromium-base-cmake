// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TRUSTY_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TRUSTY_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class TrustyEnqueueNopFtraceEvent;
class TrustyIpcRxFtraceEvent;
class TrustyIpcReadEndFtraceEvent;
class TrustyIpcReadFtraceEvent;
class TrustyIpcPollFtraceEvent;
class TrustyIpcWriteFtraceEvent;
class TrustyIpcConnectEndFtraceEvent;
class TrustyIpcConnectFtraceEvent;
class TrustyIpcHandleEventFtraceEvent;
class TrustyIrqFtraceEvent;
class TrustyReclaimMemoryDoneFtraceEvent;
class TrustyReclaimMemoryFtraceEvent;
class TrustyShareMemoryDoneFtraceEvent;
class TrustyShareMemoryFtraceEvent;
class TrustyStdCall32DoneFtraceEvent;
class TrustyStdCall32FtraceEvent;
class TrustySmcDoneFtraceEvent;
class TrustySmcFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT TrustyEnqueueNopFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kArg1FieldNumber = 1,
    kArg2FieldNumber = 2,
    kArg3FieldNumber = 3,
  };

  TrustyEnqueueNopFtraceEvent();
  ~TrustyEnqueueNopFtraceEvent() override;
  TrustyEnqueueNopFtraceEvent(TrustyEnqueueNopFtraceEvent&&) noexcept;
  TrustyEnqueueNopFtraceEvent& operator=(TrustyEnqueueNopFtraceEvent&&);
  TrustyEnqueueNopFtraceEvent(const TrustyEnqueueNopFtraceEvent&);
  TrustyEnqueueNopFtraceEvent& operator=(const TrustyEnqueueNopFtraceEvent&);
  bool operator==(const TrustyEnqueueNopFtraceEvent&) const;
  bool operator!=(const TrustyEnqueueNopFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_arg1() const { return _has_field_[1]; }
  uint32_t arg1() const { return arg1_; }
  void set_arg1(uint32_t value) { arg1_ = value; _has_field_.set(1); }

  bool has_arg2() const { return _has_field_[2]; }
  uint32_t arg2() const { return arg2_; }
  void set_arg2(uint32_t value) { arg2_ = value; _has_field_.set(2); }

  bool has_arg3() const { return _has_field_[3]; }
  uint32_t arg3() const { return arg3_; }
  void set_arg3(uint32_t value) { arg3_ = value; _has_field_.set(3); }

 private:
  uint32_t arg1_{};
  uint32_t arg2_{};
  uint32_t arg3_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcRxFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBufIdFieldNumber = 1,
    kChanFieldNumber = 2,
    kSrvNameFieldNumber = 3,
  };

  TrustyIpcRxFtraceEvent();
  ~TrustyIpcRxFtraceEvent() override;
  TrustyIpcRxFtraceEvent(TrustyIpcRxFtraceEvent&&) noexcept;
  TrustyIpcRxFtraceEvent& operator=(TrustyIpcRxFtraceEvent&&);
  TrustyIpcRxFtraceEvent(const TrustyIpcRxFtraceEvent&);
  TrustyIpcRxFtraceEvent& operator=(const TrustyIpcRxFtraceEvent&);
  bool operator==(const TrustyIpcRxFtraceEvent&) const;
  bool operator!=(const TrustyIpcRxFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_buf_id() const { return _has_field_[1]; }
  uint64_t buf_id() const { return buf_id_; }
  void set_buf_id(uint64_t value) { buf_id_ = value; _has_field_.set(1); }

  bool has_chan() const { return _has_field_[2]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(2); }

  bool has_srv_name() const { return _has_field_[3]; }
  const std::string& srv_name() const { return srv_name_; }
  void set_srv_name(const std::string& value) { srv_name_ = value; _has_field_.set(3); }

 private:
  uint64_t buf_id_{};
  uint32_t chan_{};
  std::string srv_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcReadEndFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBufIdFieldNumber = 1,
    kChanFieldNumber = 2,
    kLenOrErrFieldNumber = 3,
    kShmCntFieldNumber = 4,
    kSrvNameFieldNumber = 5,
  };

  TrustyIpcReadEndFtraceEvent();
  ~TrustyIpcReadEndFtraceEvent() override;
  TrustyIpcReadEndFtraceEvent(TrustyIpcReadEndFtraceEvent&&) noexcept;
  TrustyIpcReadEndFtraceEvent& operator=(TrustyIpcReadEndFtraceEvent&&);
  TrustyIpcReadEndFtraceEvent(const TrustyIpcReadEndFtraceEvent&);
  TrustyIpcReadEndFtraceEvent& operator=(const TrustyIpcReadEndFtraceEvent&);
  bool operator==(const TrustyIpcReadEndFtraceEvent&) const;
  bool operator!=(const TrustyIpcReadEndFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_buf_id() const { return _has_field_[1]; }
  uint64_t buf_id() const { return buf_id_; }
  void set_buf_id(uint64_t value) { buf_id_ = value; _has_field_.set(1); }

  bool has_chan() const { return _has_field_[2]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(2); }

  bool has_len_or_err() const { return _has_field_[3]; }
  int32_t len_or_err() const { return len_or_err_; }
  void set_len_or_err(int32_t value) { len_or_err_ = value; _has_field_.set(3); }

  bool has_shm_cnt() const { return _has_field_[4]; }
  uint64_t shm_cnt() const { return shm_cnt_; }
  void set_shm_cnt(uint64_t value) { shm_cnt_ = value; _has_field_.set(4); }

  bool has_srv_name() const { return _has_field_[5]; }
  const std::string& srv_name() const { return srv_name_; }
  void set_srv_name(const std::string& value) { srv_name_ = value; _has_field_.set(5); }

 private:
  uint64_t buf_id_{};
  uint32_t chan_{};
  int32_t len_or_err_{};
  uint64_t shm_cnt_{};
  std::string srv_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcReadFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kChanFieldNumber = 1,
    kSrvNameFieldNumber = 2,
  };

  TrustyIpcReadFtraceEvent();
  ~TrustyIpcReadFtraceEvent() override;
  TrustyIpcReadFtraceEvent(TrustyIpcReadFtraceEvent&&) noexcept;
  TrustyIpcReadFtraceEvent& operator=(TrustyIpcReadFtraceEvent&&);
  TrustyIpcReadFtraceEvent(const TrustyIpcReadFtraceEvent&);
  TrustyIpcReadFtraceEvent& operator=(const TrustyIpcReadFtraceEvent&);
  bool operator==(const TrustyIpcReadFtraceEvent&) const;
  bool operator!=(const TrustyIpcReadFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_chan() const { return _has_field_[1]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(1); }

  bool has_srv_name() const { return _has_field_[2]; }
  const std::string& srv_name() const { return srv_name_; }
  void set_srv_name(const std::string& value) { srv_name_ = value; _has_field_.set(2); }

 private:
  uint32_t chan_{};
  std::string srv_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcPollFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kChanFieldNumber = 1,
    kPollMaskFieldNumber = 2,
    kSrvNameFieldNumber = 3,
  };

  TrustyIpcPollFtraceEvent();
  ~TrustyIpcPollFtraceEvent() override;
  TrustyIpcPollFtraceEvent(TrustyIpcPollFtraceEvent&&) noexcept;
  TrustyIpcPollFtraceEvent& operator=(TrustyIpcPollFtraceEvent&&);
  TrustyIpcPollFtraceEvent(const TrustyIpcPollFtraceEvent&);
  TrustyIpcPollFtraceEvent& operator=(const TrustyIpcPollFtraceEvent&);
  bool operator==(const TrustyIpcPollFtraceEvent&) const;
  bool operator!=(const TrustyIpcPollFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_chan() const { return _has_field_[1]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(1); }

  bool has_poll_mask() const { return _has_field_[2]; }
  uint32_t poll_mask() const { return poll_mask_; }
  void set_poll_mask(uint32_t value) { poll_mask_ = value; _has_field_.set(2); }

  bool has_srv_name() const { return _has_field_[3]; }
  const std::string& srv_name() const { return srv_name_; }
  void set_srv_name(const std::string& value) { srv_name_ = value; _has_field_.set(3); }

 private:
  uint32_t chan_{};
  uint32_t poll_mask_{};
  std::string srv_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcWriteFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBufIdFieldNumber = 1,
    kChanFieldNumber = 2,
    kKindShmFieldNumber = 3,
    kLenOrErrFieldNumber = 4,
    kShmCntFieldNumber = 5,
    kSrvNameFieldNumber = 6,
  };

  TrustyIpcWriteFtraceEvent();
  ~TrustyIpcWriteFtraceEvent() override;
  TrustyIpcWriteFtraceEvent(TrustyIpcWriteFtraceEvent&&) noexcept;
  TrustyIpcWriteFtraceEvent& operator=(TrustyIpcWriteFtraceEvent&&);
  TrustyIpcWriteFtraceEvent(const TrustyIpcWriteFtraceEvent&);
  TrustyIpcWriteFtraceEvent& operator=(const TrustyIpcWriteFtraceEvent&);
  bool operator==(const TrustyIpcWriteFtraceEvent&) const;
  bool operator!=(const TrustyIpcWriteFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_buf_id() const { return _has_field_[1]; }
  uint64_t buf_id() const { return buf_id_; }
  void set_buf_id(uint64_t value) { buf_id_ = value; _has_field_.set(1); }

  bool has_chan() const { return _has_field_[2]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(2); }

  bool has_kind_shm() const { return _has_field_[3]; }
  int32_t kind_shm() const { return kind_shm_; }
  void set_kind_shm(int32_t value) { kind_shm_ = value; _has_field_.set(3); }

  bool has_len_or_err() const { return _has_field_[4]; }
  int32_t len_or_err() const { return len_or_err_; }
  void set_len_or_err(int32_t value) { len_or_err_ = value; _has_field_.set(4); }

  bool has_shm_cnt() const { return _has_field_[5]; }
  uint64_t shm_cnt() const { return shm_cnt_; }
  void set_shm_cnt(uint64_t value) { shm_cnt_ = value; _has_field_.set(5); }

  bool has_srv_name() const { return _has_field_[6]; }
  const std::string& srv_name() const { return srv_name_; }
  void set_srv_name(const std::string& value) { srv_name_ = value; _has_field_.set(6); }

 private:
  uint64_t buf_id_{};
  uint32_t chan_{};
  int32_t kind_shm_{};
  int32_t len_or_err_{};
  uint64_t shm_cnt_{};
  std::string srv_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcConnectEndFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kChanFieldNumber = 1,
    kErrFieldNumber = 2,
    kStateFieldNumber = 3,
  };

  TrustyIpcConnectEndFtraceEvent();
  ~TrustyIpcConnectEndFtraceEvent() override;
  TrustyIpcConnectEndFtraceEvent(TrustyIpcConnectEndFtraceEvent&&) noexcept;
  TrustyIpcConnectEndFtraceEvent& operator=(TrustyIpcConnectEndFtraceEvent&&);
  TrustyIpcConnectEndFtraceEvent(const TrustyIpcConnectEndFtraceEvent&);
  TrustyIpcConnectEndFtraceEvent& operator=(const TrustyIpcConnectEndFtraceEvent&);
  bool operator==(const TrustyIpcConnectEndFtraceEvent&) const;
  bool operator!=(const TrustyIpcConnectEndFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_chan() const { return _has_field_[1]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(1); }

  bool has_err() const { return _has_field_[2]; }
  int32_t err() const { return err_; }
  void set_err(int32_t value) { err_ = value; _has_field_.set(2); }

  bool has_state() const { return _has_field_[3]; }
  int32_t state() const { return state_; }
  void set_state(int32_t value) { state_ = value; _has_field_.set(3); }

 private:
  uint32_t chan_{};
  int32_t err_{};
  int32_t state_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcConnectFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kChanFieldNumber = 1,
    kPortFieldNumber = 2,
    kStateFieldNumber = 3,
  };

  TrustyIpcConnectFtraceEvent();
  ~TrustyIpcConnectFtraceEvent() override;
  TrustyIpcConnectFtraceEvent(TrustyIpcConnectFtraceEvent&&) noexcept;
  TrustyIpcConnectFtraceEvent& operator=(TrustyIpcConnectFtraceEvent&&);
  TrustyIpcConnectFtraceEvent(const TrustyIpcConnectFtraceEvent&);
  TrustyIpcConnectFtraceEvent& operator=(const TrustyIpcConnectFtraceEvent&);
  bool operator==(const TrustyIpcConnectFtraceEvent&) const;
  bool operator!=(const TrustyIpcConnectFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_chan() const { return _has_field_[1]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(1); }

  bool has_port() const { return _has_field_[2]; }
  const std::string& port() const { return port_; }
  void set_port(const std::string& value) { port_ = value; _has_field_.set(2); }

  bool has_state() const { return _has_field_[3]; }
  int32_t state() const { return state_; }
  void set_state(int32_t value) { state_ = value; _has_field_.set(3); }

 private:
  uint32_t chan_{};
  std::string port_{};
  int32_t state_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIpcHandleEventFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kChanFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kSrvNameFieldNumber = 3,
  };

  TrustyIpcHandleEventFtraceEvent();
  ~TrustyIpcHandleEventFtraceEvent() override;
  TrustyIpcHandleEventFtraceEvent(TrustyIpcHandleEventFtraceEvent&&) noexcept;
  TrustyIpcHandleEventFtraceEvent& operator=(TrustyIpcHandleEventFtraceEvent&&);
  TrustyIpcHandleEventFtraceEvent(const TrustyIpcHandleEventFtraceEvent&);
  TrustyIpcHandleEventFtraceEvent& operator=(const TrustyIpcHandleEventFtraceEvent&);
  bool operator==(const TrustyIpcHandleEventFtraceEvent&) const;
  bool operator!=(const TrustyIpcHandleEventFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_chan() const { return _has_field_[1]; }
  uint32_t chan() const { return chan_; }
  void set_chan(uint32_t value) { chan_ = value; _has_field_.set(1); }

  bool has_event_id() const { return _has_field_[2]; }
  uint32_t event_id() const { return event_id_; }
  void set_event_id(uint32_t value) { event_id_ = value; _has_field_.set(2); }

  bool has_srv_name() const { return _has_field_[3]; }
  const std::string& srv_name() const { return srv_name_; }
  void set_srv_name(const std::string& value) { srv_name_ = value; _has_field_.set(3); }

 private:
  uint32_t chan_{};
  uint32_t event_id_{};
  std::string srv_name_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyIrqFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIrqFieldNumber = 1,
  };

  TrustyIrqFtraceEvent();
  ~TrustyIrqFtraceEvent() override;
  TrustyIrqFtraceEvent(TrustyIrqFtraceEvent&&) noexcept;
  TrustyIrqFtraceEvent& operator=(TrustyIrqFtraceEvent&&);
  TrustyIrqFtraceEvent(const TrustyIrqFtraceEvent&);
  TrustyIrqFtraceEvent& operator=(const TrustyIrqFtraceEvent&);
  bool operator==(const TrustyIrqFtraceEvent&) const;
  bool operator!=(const TrustyIrqFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_irq() const { return _has_field_[1]; }
  int32_t irq() const { return irq_; }
  void set_irq(int32_t value) { irq_ = value; _has_field_.set(1); }

 private:
  int32_t irq_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyReclaimMemoryDoneFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kRetFieldNumber = 2,
  };

  TrustyReclaimMemoryDoneFtraceEvent();
  ~TrustyReclaimMemoryDoneFtraceEvent() override;
  TrustyReclaimMemoryDoneFtraceEvent(TrustyReclaimMemoryDoneFtraceEvent&&) noexcept;
  TrustyReclaimMemoryDoneFtraceEvent& operator=(TrustyReclaimMemoryDoneFtraceEvent&&);
  TrustyReclaimMemoryDoneFtraceEvent(const TrustyReclaimMemoryDoneFtraceEvent&);
  TrustyReclaimMemoryDoneFtraceEvent& operator=(const TrustyReclaimMemoryDoneFtraceEvent&);
  bool operator==(const TrustyReclaimMemoryDoneFtraceEvent&) const;
  bool operator!=(const TrustyReclaimMemoryDoneFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint64_t id() const { return id_; }
  void set_id(uint64_t value) { id_ = value; _has_field_.set(1); }

  bool has_ret() const { return _has_field_[2]; }
  int32_t ret() const { return ret_; }
  void set_ret(int32_t value) { ret_ = value; _has_field_.set(2); }

 private:
  uint64_t id_{};
  int32_t ret_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyReclaimMemoryFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
  };

  TrustyReclaimMemoryFtraceEvent();
  ~TrustyReclaimMemoryFtraceEvent() override;
  TrustyReclaimMemoryFtraceEvent(TrustyReclaimMemoryFtraceEvent&&) noexcept;
  TrustyReclaimMemoryFtraceEvent& operator=(TrustyReclaimMemoryFtraceEvent&&);
  TrustyReclaimMemoryFtraceEvent(const TrustyReclaimMemoryFtraceEvent&);
  TrustyReclaimMemoryFtraceEvent& operator=(const TrustyReclaimMemoryFtraceEvent&);
  bool operator==(const TrustyReclaimMemoryFtraceEvent&) const;
  bool operator!=(const TrustyReclaimMemoryFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  uint64_t id() const { return id_; }
  void set_id(uint64_t value) { id_ = value; _has_field_.set(1); }

 private:
  uint64_t id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyShareMemoryDoneFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kHandleFieldNumber = 1,
    kLenFieldNumber = 2,
    kLendFieldNumber = 3,
    kNentsFieldNumber = 4,
    kRetFieldNumber = 5,
  };

  TrustyShareMemoryDoneFtraceEvent();
  ~TrustyShareMemoryDoneFtraceEvent() override;
  TrustyShareMemoryDoneFtraceEvent(TrustyShareMemoryDoneFtraceEvent&&) noexcept;
  TrustyShareMemoryDoneFtraceEvent& operator=(TrustyShareMemoryDoneFtraceEvent&&);
  TrustyShareMemoryDoneFtraceEvent(const TrustyShareMemoryDoneFtraceEvent&);
  TrustyShareMemoryDoneFtraceEvent& operator=(const TrustyShareMemoryDoneFtraceEvent&);
  bool operator==(const TrustyShareMemoryDoneFtraceEvent&) const;
  bool operator!=(const TrustyShareMemoryDoneFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_handle() const { return _has_field_[1]; }
  uint64_t handle() const { return handle_; }
  void set_handle(uint64_t value) { handle_ = value; _has_field_.set(1); }

  bool has_len() const { return _has_field_[2]; }
  uint64_t len() const { return len_; }
  void set_len(uint64_t value) { len_ = value; _has_field_.set(2); }

  bool has_lend() const { return _has_field_[3]; }
  uint32_t lend() const { return lend_; }
  void set_lend(uint32_t value) { lend_ = value; _has_field_.set(3); }

  bool has_nents() const { return _has_field_[4]; }
  uint32_t nents() const { return nents_; }
  void set_nents(uint32_t value) { nents_ = value; _has_field_.set(4); }

  bool has_ret() const { return _has_field_[5]; }
  int32_t ret() const { return ret_; }
  void set_ret(int32_t value) { ret_ = value; _has_field_.set(5); }

 private:
  uint64_t handle_{};
  uint64_t len_{};
  uint32_t lend_{};
  uint32_t nents_{};
  int32_t ret_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyShareMemoryFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kLenFieldNumber = 1,
    kLendFieldNumber = 2,
    kNentsFieldNumber = 3,
  };

  TrustyShareMemoryFtraceEvent();
  ~TrustyShareMemoryFtraceEvent() override;
  TrustyShareMemoryFtraceEvent(TrustyShareMemoryFtraceEvent&&) noexcept;
  TrustyShareMemoryFtraceEvent& operator=(TrustyShareMemoryFtraceEvent&&);
  TrustyShareMemoryFtraceEvent(const TrustyShareMemoryFtraceEvent&);
  TrustyShareMemoryFtraceEvent& operator=(const TrustyShareMemoryFtraceEvent&);
  bool operator==(const TrustyShareMemoryFtraceEvent&) const;
  bool operator!=(const TrustyShareMemoryFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_len() const { return _has_field_[1]; }
  uint64_t len() const { return len_; }
  void set_len(uint64_t value) { len_ = value; _has_field_.set(1); }

  bool has_lend() const { return _has_field_[2]; }
  uint32_t lend() const { return lend_; }
  void set_lend(uint32_t value) { lend_ = value; _has_field_.set(2); }

  bool has_nents() const { return _has_field_[3]; }
  uint32_t nents() const { return nents_; }
  void set_nents(uint32_t value) { nents_ = value; _has_field_.set(3); }

 private:
  uint64_t len_{};
  uint32_t lend_{};
  uint32_t nents_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyStdCall32DoneFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kRetFieldNumber = 1,
  };

  TrustyStdCall32DoneFtraceEvent();
  ~TrustyStdCall32DoneFtraceEvent() override;
  TrustyStdCall32DoneFtraceEvent(TrustyStdCall32DoneFtraceEvent&&) noexcept;
  TrustyStdCall32DoneFtraceEvent& operator=(TrustyStdCall32DoneFtraceEvent&&);
  TrustyStdCall32DoneFtraceEvent(const TrustyStdCall32DoneFtraceEvent&);
  TrustyStdCall32DoneFtraceEvent& operator=(const TrustyStdCall32DoneFtraceEvent&);
  bool operator==(const TrustyStdCall32DoneFtraceEvent&) const;
  bool operator!=(const TrustyStdCall32DoneFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_ret() const { return _has_field_[1]; }
  int64_t ret() const { return ret_; }
  void set_ret(int64_t value) { ret_ = value; _has_field_.set(1); }

 private:
  int64_t ret_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustyStdCall32FtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kR0FieldNumber = 1,
    kR1FieldNumber = 2,
    kR2FieldNumber = 3,
    kR3FieldNumber = 4,
  };

  TrustyStdCall32FtraceEvent();
  ~TrustyStdCall32FtraceEvent() override;
  TrustyStdCall32FtraceEvent(TrustyStdCall32FtraceEvent&&) noexcept;
  TrustyStdCall32FtraceEvent& operator=(TrustyStdCall32FtraceEvent&&);
  TrustyStdCall32FtraceEvent(const TrustyStdCall32FtraceEvent&);
  TrustyStdCall32FtraceEvent& operator=(const TrustyStdCall32FtraceEvent&);
  bool operator==(const TrustyStdCall32FtraceEvent&) const;
  bool operator!=(const TrustyStdCall32FtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_r0() const { return _has_field_[1]; }
  uint64_t r0() const { return r0_; }
  void set_r0(uint64_t value) { r0_ = value; _has_field_.set(1); }

  bool has_r1() const { return _has_field_[2]; }
  uint64_t r1() const { return r1_; }
  void set_r1(uint64_t value) { r1_ = value; _has_field_.set(2); }

  bool has_r2() const { return _has_field_[3]; }
  uint64_t r2() const { return r2_; }
  void set_r2(uint64_t value) { r2_ = value; _has_field_.set(3); }

  bool has_r3() const { return _has_field_[4]; }
  uint64_t r3() const { return r3_; }
  void set_r3(uint64_t value) { r3_ = value; _has_field_.set(4); }

 private:
  uint64_t r0_{};
  uint64_t r1_{};
  uint64_t r2_{};
  uint64_t r3_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustySmcDoneFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kRetFieldNumber = 1,
  };

  TrustySmcDoneFtraceEvent();
  ~TrustySmcDoneFtraceEvent() override;
  TrustySmcDoneFtraceEvent(TrustySmcDoneFtraceEvent&&) noexcept;
  TrustySmcDoneFtraceEvent& operator=(TrustySmcDoneFtraceEvent&&);
  TrustySmcDoneFtraceEvent(const TrustySmcDoneFtraceEvent&);
  TrustySmcDoneFtraceEvent& operator=(const TrustySmcDoneFtraceEvent&);
  bool operator==(const TrustySmcDoneFtraceEvent&) const;
  bool operator!=(const TrustySmcDoneFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_ret() const { return _has_field_[1]; }
  uint64_t ret() const { return ret_; }
  void set_ret(uint64_t value) { ret_ = value; _has_field_.set(1); }

 private:
  uint64_t ret_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<2> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT TrustySmcFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kR0FieldNumber = 1,
    kR1FieldNumber = 2,
    kR2FieldNumber = 3,
    kR3FieldNumber = 4,
  };

  TrustySmcFtraceEvent();
  ~TrustySmcFtraceEvent() override;
  TrustySmcFtraceEvent(TrustySmcFtraceEvent&&) noexcept;
  TrustySmcFtraceEvent& operator=(TrustySmcFtraceEvent&&);
  TrustySmcFtraceEvent(const TrustySmcFtraceEvent&);
  TrustySmcFtraceEvent& operator=(const TrustySmcFtraceEvent&);
  bool operator==(const TrustySmcFtraceEvent&) const;
  bool operator!=(const TrustySmcFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_r0() const { return _has_field_[1]; }
  uint64_t r0() const { return r0_; }
  void set_r0(uint64_t value) { r0_ = value; _has_field_.set(1); }

  bool has_r1() const { return _has_field_[2]; }
  uint64_t r1() const { return r1_; }
  void set_r1(uint64_t value) { r1_ = value; _has_field_.set(2); }

  bool has_r2() const { return _has_field_[3]; }
  uint64_t r2() const { return r2_; }
  void set_r2(uint64_t value) { r2_ = value; _has_field_.set(3); }

  bool has_r3() const { return _has_field_[4]; }
  uint64_t r3() const { return r3_; }
  void set_r3(uint64_t value) { r3_ = value; _has_field_.set(4); }

 private:
  uint64_t r0_{};
  uint64_t r1_{};
  uint64_t r2_{};
  uint64_t r3_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_TRUSTY_PROTO_CPP_H_
