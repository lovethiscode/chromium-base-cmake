#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/fastrpc.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

FastrpcDmaMapFtraceEvent::FastrpcDmaMapFtraceEvent() = default;
FastrpcDmaMapFtraceEvent::~FastrpcDmaMapFtraceEvent() = default;
FastrpcDmaMapFtraceEvent::FastrpcDmaMapFtraceEvent(const FastrpcDmaMapFtraceEvent&) = default;
FastrpcDmaMapFtraceEvent& FastrpcDmaMapFtraceEvent::operator=(const FastrpcDmaMapFtraceEvent&) = default;
FastrpcDmaMapFtraceEvent::FastrpcDmaMapFtraceEvent(FastrpcDmaMapFtraceEvent&&) noexcept = default;
FastrpcDmaMapFtraceEvent& FastrpcDmaMapFtraceEvent::operator=(FastrpcDmaMapFtraceEvent&&) = default;

bool FastrpcDmaMapFtraceEvent::operator==(const FastrpcDmaMapFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cid_, other.cid_)
   && ::protozero::internal::gen_helpers::EqualsField(fd_, other.fd_)
   && ::protozero::internal::gen_helpers::EqualsField(phys_, other.phys_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(attr_, other.attr_)
   && ::protozero::internal::gen_helpers::EqualsField(mflags_, other.mflags_);
}

bool FastrpcDmaMapFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cid */:
        field.get(&cid_);
        break;
      case 2 /* fd */:
        field.get(&fd_);
        break;
      case 3 /* phys */:
        field.get(&phys_);
        break;
      case 4 /* size */:
        field.get(&size_);
        break;
      case 5 /* len */:
        field.get(&len_);
        break;
      case 6 /* attr */:
        field.get(&attr_);
        break;
      case 7 /* mflags */:
        field.get(&mflags_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FastrpcDmaMapFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FastrpcDmaMapFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FastrpcDmaMapFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cid_, msg);
  }

  // Field 2: fd
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, fd_, msg);
  }

  // Field 3: phys
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, phys_, msg);
  }

  // Field 4: size
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, size_, msg);
  }

  // Field 5: len
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, len_, msg);
  }

  // Field 6: attr
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, attr_, msg);
  }

  // Field 7: mflags
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, mflags_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FastrpcDmaUnmapFtraceEvent::FastrpcDmaUnmapFtraceEvent() = default;
FastrpcDmaUnmapFtraceEvent::~FastrpcDmaUnmapFtraceEvent() = default;
FastrpcDmaUnmapFtraceEvent::FastrpcDmaUnmapFtraceEvent(const FastrpcDmaUnmapFtraceEvent&) = default;
FastrpcDmaUnmapFtraceEvent& FastrpcDmaUnmapFtraceEvent::operator=(const FastrpcDmaUnmapFtraceEvent&) = default;
FastrpcDmaUnmapFtraceEvent::FastrpcDmaUnmapFtraceEvent(FastrpcDmaUnmapFtraceEvent&&) noexcept = default;
FastrpcDmaUnmapFtraceEvent& FastrpcDmaUnmapFtraceEvent::operator=(FastrpcDmaUnmapFtraceEvent&&) = default;

bool FastrpcDmaUnmapFtraceEvent::operator==(const FastrpcDmaUnmapFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cid_, other.cid_)
   && ::protozero::internal::gen_helpers::EqualsField(phys_, other.phys_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_);
}

bool FastrpcDmaUnmapFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cid */:
        field.get(&cid_);
        break;
      case 2 /* phys */:
        field.get(&phys_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FastrpcDmaUnmapFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FastrpcDmaUnmapFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FastrpcDmaUnmapFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cid_, msg);
  }

  // Field 2: phys
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, phys_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FastrpcDmaAllocFtraceEvent::FastrpcDmaAllocFtraceEvent() = default;
FastrpcDmaAllocFtraceEvent::~FastrpcDmaAllocFtraceEvent() = default;
FastrpcDmaAllocFtraceEvent::FastrpcDmaAllocFtraceEvent(const FastrpcDmaAllocFtraceEvent&) = default;
FastrpcDmaAllocFtraceEvent& FastrpcDmaAllocFtraceEvent::operator=(const FastrpcDmaAllocFtraceEvent&) = default;
FastrpcDmaAllocFtraceEvent::FastrpcDmaAllocFtraceEvent(FastrpcDmaAllocFtraceEvent&&) noexcept = default;
FastrpcDmaAllocFtraceEvent& FastrpcDmaAllocFtraceEvent::operator=(FastrpcDmaAllocFtraceEvent&&) = default;

bool FastrpcDmaAllocFtraceEvent::operator==(const FastrpcDmaAllocFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cid_, other.cid_)
   && ::protozero::internal::gen_helpers::EqualsField(phys_, other.phys_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_)
   && ::protozero::internal::gen_helpers::EqualsField(attr_, other.attr_)
   && ::protozero::internal::gen_helpers::EqualsField(mflags_, other.mflags_);
}

bool FastrpcDmaAllocFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cid */:
        field.get(&cid_);
        break;
      case 2 /* phys */:
        field.get(&phys_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      case 4 /* attr */:
        field.get(&attr_);
        break;
      case 5 /* mflags */:
        field.get(&mflags_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FastrpcDmaAllocFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FastrpcDmaAllocFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FastrpcDmaAllocFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cid_, msg);
  }

  // Field 2: phys
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, phys_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  // Field 4: attr
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, attr_, msg);
  }

  // Field 5: mflags
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, mflags_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FastrpcDmaFreeFtraceEvent::FastrpcDmaFreeFtraceEvent() = default;
FastrpcDmaFreeFtraceEvent::~FastrpcDmaFreeFtraceEvent() = default;
FastrpcDmaFreeFtraceEvent::FastrpcDmaFreeFtraceEvent(const FastrpcDmaFreeFtraceEvent&) = default;
FastrpcDmaFreeFtraceEvent& FastrpcDmaFreeFtraceEvent::operator=(const FastrpcDmaFreeFtraceEvent&) = default;
FastrpcDmaFreeFtraceEvent::FastrpcDmaFreeFtraceEvent(FastrpcDmaFreeFtraceEvent&&) noexcept = default;
FastrpcDmaFreeFtraceEvent& FastrpcDmaFreeFtraceEvent::operator=(FastrpcDmaFreeFtraceEvent&&) = default;

bool FastrpcDmaFreeFtraceEvent::operator==(const FastrpcDmaFreeFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cid_, other.cid_)
   && ::protozero::internal::gen_helpers::EqualsField(phys_, other.phys_)
   && ::protozero::internal::gen_helpers::EqualsField(size_, other.size_);
}

bool FastrpcDmaFreeFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cid */:
        field.get(&cid_);
        break;
      case 2 /* phys */:
        field.get(&phys_);
        break;
      case 3 /* size */:
        field.get(&size_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FastrpcDmaFreeFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FastrpcDmaFreeFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FastrpcDmaFreeFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cid_, msg);
  }

  // Field 2: phys
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, phys_, msg);
  }

  // Field 3: size
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, size_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


FastrpcDmaStatFtraceEvent::FastrpcDmaStatFtraceEvent() = default;
FastrpcDmaStatFtraceEvent::~FastrpcDmaStatFtraceEvent() = default;
FastrpcDmaStatFtraceEvent::FastrpcDmaStatFtraceEvent(const FastrpcDmaStatFtraceEvent&) = default;
FastrpcDmaStatFtraceEvent& FastrpcDmaStatFtraceEvent::operator=(const FastrpcDmaStatFtraceEvent&) = default;
FastrpcDmaStatFtraceEvent::FastrpcDmaStatFtraceEvent(FastrpcDmaStatFtraceEvent&&) noexcept = default;
FastrpcDmaStatFtraceEvent& FastrpcDmaStatFtraceEvent::operator=(FastrpcDmaStatFtraceEvent&&) = default;

bool FastrpcDmaStatFtraceEvent::operator==(const FastrpcDmaStatFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(cid_, other.cid_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(total_allocated_, other.total_allocated_);
}

bool FastrpcDmaStatFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* cid */:
        field.get(&cid_);
        break;
      case 2 /* len */:
        field.get(&len_);
        break;
      case 3 /* total_allocated */:
        field.get(&total_allocated_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string FastrpcDmaStatFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> FastrpcDmaStatFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void FastrpcDmaStatFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: cid
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, cid_, msg);
  }

  // Field 2: len
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, len_, msg);
  }

  // Field 3: total_allocated
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, total_allocated_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
