// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event_bundle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/trace/ftrace/ftrace_event.pb.h"
#include "protos/perfetto/trace/ftrace/ftrace_stats.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class FtraceEventBundle;
struct FtraceEventBundleDefaultTypeInternal;
extern FtraceEventBundleDefaultTypeInternal _FtraceEventBundle_default_instance_;
class FtraceEventBundle_CompactSched;
struct FtraceEventBundle_CompactSchedDefaultTypeInternal;
extern FtraceEventBundle_CompactSchedDefaultTypeInternal _FtraceEventBundle_CompactSched_default_instance_;
class FtraceEventBundle_FtraceError;
struct FtraceEventBundle_FtraceErrorDefaultTypeInternal;
extern FtraceEventBundle_FtraceErrorDefaultTypeInternal _FtraceEventBundle_FtraceError_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::FtraceEventBundle* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEventBundle>(Arena*);
template<> ::perfetto::protos::FtraceEventBundle_CompactSched* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEventBundle_CompactSched>(Arena*);
template<> ::perfetto::protos::FtraceEventBundle_FtraceError* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEventBundle_FtraceError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum FtraceClock : int {
  FTRACE_CLOCK_UNSPECIFIED = 0,
  FTRACE_CLOCK_UNKNOWN = 1,
  FTRACE_CLOCK_GLOBAL = 2,
  FTRACE_CLOCK_LOCAL = 3,
  FTRACE_CLOCK_MONO_RAW = 4
};
bool FtraceClock_IsValid(int value);
constexpr FtraceClock FtraceClock_MIN = FTRACE_CLOCK_UNSPECIFIED;
constexpr FtraceClock FtraceClock_MAX = FTRACE_CLOCK_MONO_RAW;
constexpr int FtraceClock_ARRAYSIZE = FtraceClock_MAX + 1;

const std::string& FtraceClock_Name(FtraceClock value);
template<typename T>
inline const std::string& FtraceClock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FtraceClock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FtraceClock_Name.");
  return FtraceClock_Name(static_cast<FtraceClock>(enum_t_value));
}
bool FtraceClock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FtraceClock* value);
// ===================================================================

class FtraceEventBundle_CompactSched final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEventBundle.CompactSched) */ {
 public:
  inline FtraceEventBundle_CompactSched() : FtraceEventBundle_CompactSched(nullptr) {}
  ~FtraceEventBundle_CompactSched() override;
  explicit PROTOBUF_CONSTEXPR FtraceEventBundle_CompactSched(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched& from);
  FtraceEventBundle_CompactSched(FtraceEventBundle_CompactSched&& from) noexcept
    : FtraceEventBundle_CompactSched() {
    *this = ::std::move(from);
  }

  inline FtraceEventBundle_CompactSched& operator=(const FtraceEventBundle_CompactSched& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEventBundle_CompactSched& operator=(FtraceEventBundle_CompactSched&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FtraceEventBundle_CompactSched& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceEventBundle_CompactSched* internal_default_instance() {
    return reinterpret_cast<const FtraceEventBundle_CompactSched*>(
               &_FtraceEventBundle_CompactSched_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceEventBundle_CompactSched& a, FtraceEventBundle_CompactSched& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FtraceEventBundle_CompactSched* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceEventBundle_CompactSched* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceEventBundle_CompactSched* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceEventBundle_CompactSched>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FtraceEventBundle_CompactSched& from);
  void MergeFrom(const FtraceEventBundle_CompactSched& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceEventBundle_CompactSched* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceEventBundle.CompactSched";
  }
  protected:
  explicit FtraceEventBundle_CompactSched(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchTimestampFieldNumber = 1,
    kSwitchPrevStateFieldNumber = 2,
    kSwitchNextPidFieldNumber = 3,
    kSwitchNextPrioFieldNumber = 4,
    kInternTableFieldNumber = 5,
    kSwitchNextCommIndexFieldNumber = 6,
    kWakingTimestampFieldNumber = 7,
    kWakingPidFieldNumber = 8,
    kWakingTargetCpuFieldNumber = 9,
    kWakingPrioFieldNumber = 10,
    kWakingCommIndexFieldNumber = 11,
    kWakingCommonFlagsFieldNumber = 12,
  };
  // repeated uint64 switch_timestamp = 1 [packed = true];
  int switch_timestamp_size() const;
  private:
  int _internal_switch_timestamp_size() const;
  public:
  void clear_switch_timestamp();
  private:
  uint64_t _internal_switch_timestamp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_switch_timestamp() const;
  void _internal_add_switch_timestamp(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_switch_timestamp();
  public:
  uint64_t switch_timestamp(int index) const;
  void set_switch_timestamp(int index, uint64_t value);
  void add_switch_timestamp(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      switch_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_switch_timestamp();

  // repeated int64 switch_prev_state = 2 [packed = true];
  int switch_prev_state_size() const;
  private:
  int _internal_switch_prev_state_size() const;
  public:
  void clear_switch_prev_state();
  private:
  int64_t _internal_switch_prev_state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_switch_prev_state() const;
  void _internal_add_switch_prev_state(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_switch_prev_state();
  public:
  int64_t switch_prev_state(int index) const;
  void set_switch_prev_state(int index, int64_t value);
  void add_switch_prev_state(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      switch_prev_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_switch_prev_state();

  // repeated int32 switch_next_pid = 3 [packed = true];
  int switch_next_pid_size() const;
  private:
  int _internal_switch_next_pid_size() const;
  public:
  void clear_switch_next_pid();
  private:
  int32_t _internal_switch_next_pid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_switch_next_pid() const;
  void _internal_add_switch_next_pid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_switch_next_pid();
  public:
  int32_t switch_next_pid(int index) const;
  void set_switch_next_pid(int index, int32_t value);
  void add_switch_next_pid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      switch_next_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_switch_next_pid();

  // repeated int32 switch_next_prio = 4 [packed = true];
  int switch_next_prio_size() const;
  private:
  int _internal_switch_next_prio_size() const;
  public:
  void clear_switch_next_prio();
  private:
  int32_t _internal_switch_next_prio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_switch_next_prio() const;
  void _internal_add_switch_next_prio(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_switch_next_prio();
  public:
  int32_t switch_next_prio(int index) const;
  void set_switch_next_prio(int index, int32_t value);
  void add_switch_next_prio(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      switch_next_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_switch_next_prio();

  // repeated string intern_table = 5;
  int intern_table_size() const;
  private:
  int _internal_intern_table_size() const;
  public:
  void clear_intern_table();
  const std::string& intern_table(int index) const;
  std::string* mutable_intern_table(int index);
  void set_intern_table(int index, const std::string& value);
  void set_intern_table(int index, std::string&& value);
  void set_intern_table(int index, const char* value);
  void set_intern_table(int index, const char* value, size_t size);
  std::string* add_intern_table();
  void add_intern_table(const std::string& value);
  void add_intern_table(std::string&& value);
  void add_intern_table(const char* value);
  void add_intern_table(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intern_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intern_table();
  private:
  const std::string& _internal_intern_table(int index) const;
  std::string* _internal_add_intern_table();
  public:

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  int switch_next_comm_index_size() const;
  private:
  int _internal_switch_next_comm_index_size() const;
  public:
  void clear_switch_next_comm_index();
  private:
  uint32_t _internal_switch_next_comm_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_switch_next_comm_index() const;
  void _internal_add_switch_next_comm_index(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_switch_next_comm_index();
  public:
  uint32_t switch_next_comm_index(int index) const;
  void set_switch_next_comm_index(int index, uint32_t value);
  void add_switch_next_comm_index(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      switch_next_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_switch_next_comm_index();

  // repeated uint64 waking_timestamp = 7 [packed = true];
  int waking_timestamp_size() const;
  private:
  int _internal_waking_timestamp_size() const;
  public:
  void clear_waking_timestamp();
  private:
  uint64_t _internal_waking_timestamp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_waking_timestamp() const;
  void _internal_add_waking_timestamp(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_waking_timestamp();
  public:
  uint64_t waking_timestamp(int index) const;
  void set_waking_timestamp(int index, uint64_t value);
  void add_waking_timestamp(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      waking_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_waking_timestamp();

  // repeated int32 waking_pid = 8 [packed = true];
  int waking_pid_size() const;
  private:
  int _internal_waking_pid_size() const;
  public:
  void clear_waking_pid();
  private:
  int32_t _internal_waking_pid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_waking_pid() const;
  void _internal_add_waking_pid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_waking_pid();
  public:
  int32_t waking_pid(int index) const;
  void set_waking_pid(int index, int32_t value);
  void add_waking_pid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      waking_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_waking_pid();

  // repeated int32 waking_target_cpu = 9 [packed = true];
  int waking_target_cpu_size() const;
  private:
  int _internal_waking_target_cpu_size() const;
  public:
  void clear_waking_target_cpu();
  private:
  int32_t _internal_waking_target_cpu(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_waking_target_cpu() const;
  void _internal_add_waking_target_cpu(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_waking_target_cpu();
  public:
  int32_t waking_target_cpu(int index) const;
  void set_waking_target_cpu(int index, int32_t value);
  void add_waking_target_cpu(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      waking_target_cpu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_waking_target_cpu();

  // repeated int32 waking_prio = 10 [packed = true];
  int waking_prio_size() const;
  private:
  int _internal_waking_prio_size() const;
  public:
  void clear_waking_prio();
  private:
  int32_t _internal_waking_prio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_waking_prio() const;
  void _internal_add_waking_prio(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_waking_prio();
  public:
  int32_t waking_prio(int index) const;
  void set_waking_prio(int index, int32_t value);
  void add_waking_prio(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      waking_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_waking_prio();

  // repeated uint32 waking_comm_index = 11 [packed = true];
  int waking_comm_index_size() const;
  private:
  int _internal_waking_comm_index_size() const;
  public:
  void clear_waking_comm_index();
  private:
  uint32_t _internal_waking_comm_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_waking_comm_index() const;
  void _internal_add_waking_comm_index(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_waking_comm_index();
  public:
  uint32_t waking_comm_index(int index) const;
  void set_waking_comm_index(int index, uint32_t value);
  void add_waking_comm_index(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      waking_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_waking_comm_index();

  // repeated uint32 waking_common_flags = 12 [packed = true];
  int waking_common_flags_size() const;
  private:
  int _internal_waking_common_flags_size() const;
  public:
  void clear_waking_common_flags();
  private:
  uint32_t _internal_waking_common_flags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_waking_common_flags() const;
  void _internal_add_waking_common_flags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_waking_common_flags();
  public:
  uint32_t waking_common_flags(int index) const;
  void set_waking_common_flags(int index, uint32_t value);
  void add_waking_common_flags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      waking_common_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_waking_common_flags();

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle.CompactSched)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > switch_timestamp_;
    mutable std::atomic<int> _switch_timestamp_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > switch_prev_state_;
    mutable std::atomic<int> _switch_prev_state_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > switch_next_pid_;
    mutable std::atomic<int> _switch_next_pid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > switch_next_prio_;
    mutable std::atomic<int> _switch_next_prio_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intern_table_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > switch_next_comm_index_;
    mutable std::atomic<int> _switch_next_comm_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > waking_timestamp_;
    mutable std::atomic<int> _waking_timestamp_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > waking_pid_;
    mutable std::atomic<int> _waking_pid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > waking_target_cpu_;
    mutable std::atomic<int> _waking_target_cpu_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > waking_prio_;
    mutable std::atomic<int> _waking_prio_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > waking_comm_index_;
    mutable std::atomic<int> _waking_comm_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > waking_common_flags_;
    mutable std::atomic<int> _waking_common_flags_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
};
// -------------------------------------------------------------------

class FtraceEventBundle_FtraceError final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEventBundle.FtraceError) */ {
 public:
  inline FtraceEventBundle_FtraceError() : FtraceEventBundle_FtraceError(nullptr) {}
  ~FtraceEventBundle_FtraceError() override;
  explicit PROTOBUF_CONSTEXPR FtraceEventBundle_FtraceError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceEventBundle_FtraceError(const FtraceEventBundle_FtraceError& from);
  FtraceEventBundle_FtraceError(FtraceEventBundle_FtraceError&& from) noexcept
    : FtraceEventBundle_FtraceError() {
    *this = ::std::move(from);
  }

  inline FtraceEventBundle_FtraceError& operator=(const FtraceEventBundle_FtraceError& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEventBundle_FtraceError& operator=(FtraceEventBundle_FtraceError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FtraceEventBundle_FtraceError& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceEventBundle_FtraceError* internal_default_instance() {
    return reinterpret_cast<const FtraceEventBundle_FtraceError*>(
               &_FtraceEventBundle_FtraceError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FtraceEventBundle_FtraceError& a, FtraceEventBundle_FtraceError& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FtraceEventBundle_FtraceError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceEventBundle_FtraceError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceEventBundle_FtraceError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceEventBundle_FtraceError>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FtraceEventBundle_FtraceError& from);
  void MergeFrom(const FtraceEventBundle_FtraceError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceEventBundle_FtraceError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceEventBundle.FtraceError";
  }
  protected:
  explicit FtraceEventBundle_FtraceError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional .perfetto.protos.FtraceParseStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::perfetto::protos::FtraceParseStatus status() const;
  void set_status(::perfetto::protos::FtraceParseStatus value);
  private:
  ::perfetto::protos::FtraceParseStatus _internal_status() const;
  void _internal_set_status(::perfetto::protos::FtraceParseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle.FtraceError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t timestamp_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
};
// -------------------------------------------------------------------

class FtraceEventBundle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEventBundle) */ {
 public:
  inline FtraceEventBundle() : FtraceEventBundle(nullptr) {}
  ~FtraceEventBundle() override;
  explicit PROTOBUF_CONSTEXPR FtraceEventBundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceEventBundle(const FtraceEventBundle& from);
  FtraceEventBundle(FtraceEventBundle&& from) noexcept
    : FtraceEventBundle() {
    *this = ::std::move(from);
  }

  inline FtraceEventBundle& operator=(const FtraceEventBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEventBundle& operator=(FtraceEventBundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FtraceEventBundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceEventBundle* internal_default_instance() {
    return reinterpret_cast<const FtraceEventBundle*>(
               &_FtraceEventBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FtraceEventBundle& a, FtraceEventBundle& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FtraceEventBundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceEventBundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceEventBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceEventBundle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FtraceEventBundle& from);
  void MergeFrom(const FtraceEventBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceEventBundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.FtraceEventBundle";
  }
  protected:
  explicit FtraceEventBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FtraceEventBundle_CompactSched CompactSched;
  typedef FtraceEventBundle_FtraceError FtraceError;

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kErrorFieldNumber = 8,
    kCompactSchedFieldNumber = 4,
    kCpuFieldNumber = 1,
    kLostEventsFieldNumber = 3,
    kFtraceTimestampFieldNumber = 6,
    kBootTimestampFieldNumber = 7,
    kLastReadEventTimestampFieldNumber = 9,
    kFtraceClockFieldNumber = 5,
  };
  // repeated .perfetto.protos.FtraceEvent event = 2;
  int event_size() const;
  private:
  int _internal_event_size() const;
  public:
  void clear_event();
  ::perfetto::protos::FtraceEvent* mutable_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >*
      mutable_event();
  private:
  const ::perfetto::protos::FtraceEvent& _internal_event(int index) const;
  ::perfetto::protos::FtraceEvent* _internal_add_event();
  public:
  const ::perfetto::protos::FtraceEvent& event(int index) const;
  ::perfetto::protos::FtraceEvent* add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >&
      event() const;

  // repeated .perfetto.protos.FtraceEventBundle.FtraceError error = 8;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  ::perfetto::protos::FtraceEventBundle_FtraceError* mutable_error(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle_FtraceError >*
      mutable_error();
  private:
  const ::perfetto::protos::FtraceEventBundle_FtraceError& _internal_error(int index) const;
  ::perfetto::protos::FtraceEventBundle_FtraceError* _internal_add_error();
  public:
  const ::perfetto::protos::FtraceEventBundle_FtraceError& error(int index) const;
  ::perfetto::protos::FtraceEventBundle_FtraceError* add_error();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle_FtraceError >&
      error() const;

  // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
  bool has_compact_sched() const;
  private:
  bool _internal_has_compact_sched() const;
  public:
  void clear_compact_sched();
  const ::perfetto::protos::FtraceEventBundle_CompactSched& compact_sched() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceEventBundle_CompactSched* release_compact_sched();
  ::perfetto::protos::FtraceEventBundle_CompactSched* mutable_compact_sched();
  void set_allocated_compact_sched(::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched);
  private:
  const ::perfetto::protos::FtraceEventBundle_CompactSched& _internal_compact_sched() const;
  ::perfetto::protos::FtraceEventBundle_CompactSched* _internal_mutable_compact_sched();
  public:
  void unsafe_arena_set_allocated_compact_sched(
      ::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched);
  ::perfetto::protos::FtraceEventBundle_CompactSched* unsafe_arena_release_compact_sched();

  // optional uint32 cpu = 1;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  uint32_t cpu() const;
  void set_cpu(uint32_t value);
  private:
  uint32_t _internal_cpu() const;
  void _internal_set_cpu(uint32_t value);
  public:

  // optional bool lost_events = 3;
  bool has_lost_events() const;
  private:
  bool _internal_has_lost_events() const;
  public:
  void clear_lost_events();
  bool lost_events() const;
  void set_lost_events(bool value);
  private:
  bool _internal_lost_events() const;
  void _internal_set_lost_events(bool value);
  public:

  // optional int64 ftrace_timestamp = 6;
  bool has_ftrace_timestamp() const;
  private:
  bool _internal_has_ftrace_timestamp() const;
  public:
  void clear_ftrace_timestamp();
  int64_t ftrace_timestamp() const;
  void set_ftrace_timestamp(int64_t value);
  private:
  int64_t _internal_ftrace_timestamp() const;
  void _internal_set_ftrace_timestamp(int64_t value);
  public:

  // optional int64 boot_timestamp = 7;
  bool has_boot_timestamp() const;
  private:
  bool _internal_has_boot_timestamp() const;
  public:
  void clear_boot_timestamp();
  int64_t boot_timestamp() const;
  void set_boot_timestamp(int64_t value);
  private:
  int64_t _internal_boot_timestamp() const;
  void _internal_set_boot_timestamp(int64_t value);
  public:

  // optional uint64 last_read_event_timestamp = 9;
  bool has_last_read_event_timestamp() const;
  private:
  bool _internal_has_last_read_event_timestamp() const;
  public:
  void clear_last_read_event_timestamp();
  uint64_t last_read_event_timestamp() const;
  void set_last_read_event_timestamp(uint64_t value);
  private:
  uint64_t _internal_last_read_event_timestamp() const;
  void _internal_set_last_read_event_timestamp(uint64_t value);
  public:

  // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
  bool has_ftrace_clock() const;
  private:
  bool _internal_has_ftrace_clock() const;
  public:
  void clear_ftrace_clock();
  ::perfetto::protos::FtraceClock ftrace_clock() const;
  void set_ftrace_clock(::perfetto::protos::FtraceClock value);
  private:
  ::perfetto::protos::FtraceClock _internal_ftrace_clock() const;
  void _internal_set_ftrace_clock(::perfetto::protos::FtraceClock value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent > event_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle_FtraceError > error_;
    ::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched_;
    uint32_t cpu_;
    bool lost_events_;
    int64_t ftrace_timestamp_;
    int64_t boot_timestamp_;
    uint64_t last_read_event_timestamp_;
    int ftrace_clock_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FtraceEventBundle_CompactSched

// repeated string intern_table = 5;
inline int FtraceEventBundle_CompactSched::_internal_intern_table_size() const {
  return _impl_.intern_table_.size();
}
inline int FtraceEventBundle_CompactSched::intern_table_size() const {
  return _internal_intern_table_size();
}
inline void FtraceEventBundle_CompactSched::clear_intern_table() {
  _impl_.intern_table_.Clear();
}
inline std::string* FtraceEventBundle_CompactSched::add_intern_table() {
  std::string* _s = _internal_add_intern_table();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _s;
}
inline const std::string& FtraceEventBundle_CompactSched::_internal_intern_table(int index) const {
  return _impl_.intern_table_.Get(index);
}
inline const std::string& FtraceEventBundle_CompactSched::intern_table(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _internal_intern_table(index);
}
inline std::string* FtraceEventBundle_CompactSched::mutable_intern_table(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _impl_.intern_table_.Mutable(index);
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const std::string& value) {
  _impl_.intern_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, std::string&& value) {
  _impl_.intern_table_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.intern_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const char* value, size_t size) {
  _impl_.intern_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline std::string* FtraceEventBundle_CompactSched::_internal_add_intern_table() {
  return _impl_.intern_table_.Add();
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const std::string& value) {
  _impl_.intern_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(std::string&& value) {
  _impl_.intern_table_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.intern_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const char* value, size_t size) {
  _impl_.intern_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceEventBundle_CompactSched::intern_table() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _impl_.intern_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceEventBundle_CompactSched::mutable_intern_table() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return &_impl_.intern_table_;
}

// repeated uint64 switch_timestamp = 1 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_timestamp_size() const {
  return _impl_.switch_timestamp_.size();
}
inline int FtraceEventBundle_CompactSched::switch_timestamp_size() const {
  return _internal_switch_timestamp_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_timestamp() {
  _impl_.switch_timestamp_.Clear();
}
inline uint64_t FtraceEventBundle_CompactSched::_internal_switch_timestamp(int index) const {
  return _impl_.switch_timestamp_.Get(index);
}
inline uint64_t FtraceEventBundle_CompactSched::switch_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return _internal_switch_timestamp(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_timestamp(int index, uint64_t value) {
  _impl_.switch_timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_timestamp(uint64_t value) {
  _impl_.switch_timestamp_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_switch_timestamp(uint64_t value) {
  _internal_add_switch_timestamp(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FtraceEventBundle_CompactSched::_internal_switch_timestamp() const {
  return _impl_.switch_timestamp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FtraceEventBundle_CompactSched::switch_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return _internal_switch_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FtraceEventBundle_CompactSched::_internal_mutable_switch_timestamp() {
  return &_impl_.switch_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FtraceEventBundle_CompactSched::mutable_switch_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return _internal_mutable_switch_timestamp();
}

// repeated int64 switch_prev_state = 2 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_prev_state_size() const {
  return _impl_.switch_prev_state_.size();
}
inline int FtraceEventBundle_CompactSched::switch_prev_state_size() const {
  return _internal_switch_prev_state_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_prev_state() {
  _impl_.switch_prev_state_.Clear();
}
inline int64_t FtraceEventBundle_CompactSched::_internal_switch_prev_state(int index) const {
  return _impl_.switch_prev_state_.Get(index);
}
inline int64_t FtraceEventBundle_CompactSched::switch_prev_state(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return _internal_switch_prev_state(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_prev_state(int index, int64_t value) {
  _impl_.switch_prev_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_prev_state(int64_t value) {
  _impl_.switch_prev_state_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_switch_prev_state(int64_t value) {
  _internal_add_switch_prev_state(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FtraceEventBundle_CompactSched::_internal_switch_prev_state() const {
  return _impl_.switch_prev_state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
FtraceEventBundle_CompactSched::switch_prev_state() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return _internal_switch_prev_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FtraceEventBundle_CompactSched::_internal_mutable_switch_prev_state() {
  return &_impl_.switch_prev_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
FtraceEventBundle_CompactSched::mutable_switch_prev_state() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return _internal_mutable_switch_prev_state();
}

// repeated int32 switch_next_pid = 3 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_next_pid_size() const {
  return _impl_.switch_next_pid_.size();
}
inline int FtraceEventBundle_CompactSched::switch_next_pid_size() const {
  return _internal_switch_next_pid_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_pid() {
  _impl_.switch_next_pid_.Clear();
}
inline int32_t FtraceEventBundle_CompactSched::_internal_switch_next_pid(int index) const {
  return _impl_.switch_next_pid_.Get(index);
}
inline int32_t FtraceEventBundle_CompactSched::switch_next_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return _internal_switch_next_pid(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_pid(int index, int32_t value) {
  _impl_.switch_next_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_next_pid(int32_t value) {
  _impl_.switch_next_pid_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_switch_next_pid(int32_t value) {
  _internal_add_switch_next_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::_internal_switch_next_pid() const {
  return _impl_.switch_next_pid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::switch_next_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return _internal_switch_next_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_switch_next_pid() {
  return &_impl_.switch_next_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::mutable_switch_next_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return _internal_mutable_switch_next_pid();
}

// repeated int32 switch_next_prio = 4 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_next_prio_size() const {
  return _impl_.switch_next_prio_.size();
}
inline int FtraceEventBundle_CompactSched::switch_next_prio_size() const {
  return _internal_switch_next_prio_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_prio() {
  _impl_.switch_next_prio_.Clear();
}
inline int32_t FtraceEventBundle_CompactSched::_internal_switch_next_prio(int index) const {
  return _impl_.switch_next_prio_.Get(index);
}
inline int32_t FtraceEventBundle_CompactSched::switch_next_prio(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return _internal_switch_next_prio(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_prio(int index, int32_t value) {
  _impl_.switch_next_prio_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_next_prio(int32_t value) {
  _impl_.switch_next_prio_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_switch_next_prio(int32_t value) {
  _internal_add_switch_next_prio(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::_internal_switch_next_prio() const {
  return _impl_.switch_next_prio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::switch_next_prio() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return _internal_switch_next_prio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_switch_next_prio() {
  return &_impl_.switch_next_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::mutable_switch_next_prio() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return _internal_mutable_switch_next_prio();
}

// repeated uint32 switch_next_comm_index = 6 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_next_comm_index_size() const {
  return _impl_.switch_next_comm_index_.size();
}
inline int FtraceEventBundle_CompactSched::switch_next_comm_index_size() const {
  return _internal_switch_next_comm_index_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_comm_index() {
  _impl_.switch_next_comm_index_.Clear();
}
inline uint32_t FtraceEventBundle_CompactSched::_internal_switch_next_comm_index(int index) const {
  return _impl_.switch_next_comm_index_.Get(index);
}
inline uint32_t FtraceEventBundle_CompactSched::switch_next_comm_index(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return _internal_switch_next_comm_index(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_comm_index(int index, uint32_t value) {
  _impl_.switch_next_comm_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_next_comm_index(uint32_t value) {
  _impl_.switch_next_comm_index_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_switch_next_comm_index(uint32_t value) {
  _internal_add_switch_next_comm_index(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FtraceEventBundle_CompactSched::_internal_switch_next_comm_index() const {
  return _impl_.switch_next_comm_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FtraceEventBundle_CompactSched::switch_next_comm_index() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return _internal_switch_next_comm_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_switch_next_comm_index() {
  return &_impl_.switch_next_comm_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FtraceEventBundle_CompactSched::mutable_switch_next_comm_index() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return _internal_mutable_switch_next_comm_index();
}

// repeated uint64 waking_timestamp = 7 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_timestamp_size() const {
  return _impl_.waking_timestamp_.size();
}
inline int FtraceEventBundle_CompactSched::waking_timestamp_size() const {
  return _internal_waking_timestamp_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_timestamp() {
  _impl_.waking_timestamp_.Clear();
}
inline uint64_t FtraceEventBundle_CompactSched::_internal_waking_timestamp(int index) const {
  return _impl_.waking_timestamp_.Get(index);
}
inline uint64_t FtraceEventBundle_CompactSched::waking_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return _internal_waking_timestamp(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_timestamp(int index, uint64_t value) {
  _impl_.waking_timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_timestamp(uint64_t value) {
  _impl_.waking_timestamp_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_waking_timestamp(uint64_t value) {
  _internal_add_waking_timestamp(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FtraceEventBundle_CompactSched::_internal_waking_timestamp() const {
  return _impl_.waking_timestamp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FtraceEventBundle_CompactSched::waking_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return _internal_waking_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FtraceEventBundle_CompactSched::_internal_mutable_waking_timestamp() {
  return &_impl_.waking_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FtraceEventBundle_CompactSched::mutable_waking_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return _internal_mutable_waking_timestamp();
}

// repeated int32 waking_pid = 8 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_pid_size() const {
  return _impl_.waking_pid_.size();
}
inline int FtraceEventBundle_CompactSched::waking_pid_size() const {
  return _internal_waking_pid_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_pid() {
  _impl_.waking_pid_.Clear();
}
inline int32_t FtraceEventBundle_CompactSched::_internal_waking_pid(int index) const {
  return _impl_.waking_pid_.Get(index);
}
inline int32_t FtraceEventBundle_CompactSched::waking_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return _internal_waking_pid(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_pid(int index, int32_t value) {
  _impl_.waking_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_pid(int32_t value) {
  _impl_.waking_pid_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_waking_pid(int32_t value) {
  _internal_add_waking_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::_internal_waking_pid() const {
  return _impl_.waking_pid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::waking_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return _internal_waking_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_waking_pid() {
  return &_impl_.waking_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::mutable_waking_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return _internal_mutable_waking_pid();
}

// repeated int32 waking_target_cpu = 9 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_target_cpu_size() const {
  return _impl_.waking_target_cpu_.size();
}
inline int FtraceEventBundle_CompactSched::waking_target_cpu_size() const {
  return _internal_waking_target_cpu_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_target_cpu() {
  _impl_.waking_target_cpu_.Clear();
}
inline int32_t FtraceEventBundle_CompactSched::_internal_waking_target_cpu(int index) const {
  return _impl_.waking_target_cpu_.Get(index);
}
inline int32_t FtraceEventBundle_CompactSched::waking_target_cpu(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return _internal_waking_target_cpu(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_target_cpu(int index, int32_t value) {
  _impl_.waking_target_cpu_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_target_cpu(int32_t value) {
  _impl_.waking_target_cpu_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_waking_target_cpu(int32_t value) {
  _internal_add_waking_target_cpu(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::_internal_waking_target_cpu() const {
  return _impl_.waking_target_cpu_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::waking_target_cpu() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return _internal_waking_target_cpu();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_waking_target_cpu() {
  return &_impl_.waking_target_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::mutable_waking_target_cpu() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return _internal_mutable_waking_target_cpu();
}

// repeated int32 waking_prio = 10 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_prio_size() const {
  return _impl_.waking_prio_.size();
}
inline int FtraceEventBundle_CompactSched::waking_prio_size() const {
  return _internal_waking_prio_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_prio() {
  _impl_.waking_prio_.Clear();
}
inline int32_t FtraceEventBundle_CompactSched::_internal_waking_prio(int index) const {
  return _impl_.waking_prio_.Get(index);
}
inline int32_t FtraceEventBundle_CompactSched::waking_prio(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return _internal_waking_prio(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_prio(int index, int32_t value) {
  _impl_.waking_prio_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_prio(int32_t value) {
  _impl_.waking_prio_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_waking_prio(int32_t value) {
  _internal_add_waking_prio(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::_internal_waking_prio() const {
  return _impl_.waking_prio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FtraceEventBundle_CompactSched::waking_prio() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return _internal_waking_prio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_waking_prio() {
  return &_impl_.waking_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FtraceEventBundle_CompactSched::mutable_waking_prio() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return _internal_mutable_waking_prio();
}

// repeated uint32 waking_comm_index = 11 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_comm_index_size() const {
  return _impl_.waking_comm_index_.size();
}
inline int FtraceEventBundle_CompactSched::waking_comm_index_size() const {
  return _internal_waking_comm_index_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_comm_index() {
  _impl_.waking_comm_index_.Clear();
}
inline uint32_t FtraceEventBundle_CompactSched::_internal_waking_comm_index(int index) const {
  return _impl_.waking_comm_index_.Get(index);
}
inline uint32_t FtraceEventBundle_CompactSched::waking_comm_index(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return _internal_waking_comm_index(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_comm_index(int index, uint32_t value) {
  _impl_.waking_comm_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_comm_index(uint32_t value) {
  _impl_.waking_comm_index_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_waking_comm_index(uint32_t value) {
  _internal_add_waking_comm_index(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FtraceEventBundle_CompactSched::_internal_waking_comm_index() const {
  return _impl_.waking_comm_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FtraceEventBundle_CompactSched::waking_comm_index() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return _internal_waking_comm_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_waking_comm_index() {
  return &_impl_.waking_comm_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FtraceEventBundle_CompactSched::mutable_waking_comm_index() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return _internal_mutable_waking_comm_index();
}

// repeated uint32 waking_common_flags = 12 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_common_flags_size() const {
  return _impl_.waking_common_flags_.size();
}
inline int FtraceEventBundle_CompactSched::waking_common_flags_size() const {
  return _internal_waking_common_flags_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_common_flags() {
  _impl_.waking_common_flags_.Clear();
}
inline uint32_t FtraceEventBundle_CompactSched::_internal_waking_common_flags(int index) const {
  return _impl_.waking_common_flags_.Get(index);
}
inline uint32_t FtraceEventBundle_CompactSched::waking_common_flags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
  return _internal_waking_common_flags(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_common_flags(int index, uint32_t value) {
  _impl_.waking_common_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_common_flags(uint32_t value) {
  _impl_.waking_common_flags_.Add(value);
}
inline void FtraceEventBundle_CompactSched::add_waking_common_flags(uint32_t value) {
  _internal_add_waking_common_flags(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FtraceEventBundle_CompactSched::_internal_waking_common_flags() const {
  return _impl_.waking_common_flags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FtraceEventBundle_CompactSched::waking_common_flags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
  return _internal_waking_common_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FtraceEventBundle_CompactSched::_internal_mutable_waking_common_flags() {
  return &_impl_.waking_common_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FtraceEventBundle_CompactSched::mutable_waking_common_flags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
  return _internal_mutable_waking_common_flags();
}

// -------------------------------------------------------------------

// FtraceEventBundle_FtraceError

// optional uint64 timestamp = 1;
inline bool FtraceEventBundle_FtraceError::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FtraceEventBundle_FtraceError::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FtraceEventBundle_FtraceError::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t FtraceEventBundle_FtraceError::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t FtraceEventBundle_FtraceError::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.FtraceError.timestamp)
  return _internal_timestamp();
}
inline void FtraceEventBundle_FtraceError::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void FtraceEventBundle_FtraceError::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.FtraceError.timestamp)
}

// optional .perfetto.protos.FtraceParseStatus status = 2;
inline bool FtraceEventBundle_FtraceError::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FtraceEventBundle_FtraceError::has_status() const {
  return _internal_has_status();
}
inline void FtraceEventBundle_FtraceError::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::FtraceParseStatus FtraceEventBundle_FtraceError::_internal_status() const {
  return static_cast< ::perfetto::protos::FtraceParseStatus >(_impl_.status_);
}
inline ::perfetto::protos::FtraceParseStatus FtraceEventBundle_FtraceError::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.FtraceError.status)
  return _internal_status();
}
inline void FtraceEventBundle_FtraceError::_internal_set_status(::perfetto::protos::FtraceParseStatus value) {
  assert(::perfetto::protos::FtraceParseStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_ = value;
}
inline void FtraceEventBundle_FtraceError::set_status(::perfetto::protos::FtraceParseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.FtraceError.status)
}

// -------------------------------------------------------------------

// FtraceEventBundle

// optional uint32 cpu = 1;
inline bool FtraceEventBundle::_internal_has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FtraceEventBundle::has_cpu() const {
  return _internal_has_cpu();
}
inline void FtraceEventBundle::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FtraceEventBundle::_internal_cpu() const {
  return _impl_.cpu_;
}
inline uint32_t FtraceEventBundle::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.cpu)
  return _internal_cpu();
}
inline void FtraceEventBundle::_internal_set_cpu(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_ = value;
}
inline void FtraceEventBundle::set_cpu(uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.cpu)
}

// repeated .perfetto.protos.FtraceEvent event = 2;
inline int FtraceEventBundle::_internal_event_size() const {
  return _impl_.event_.size();
}
inline int FtraceEventBundle::event_size() const {
  return _internal_event_size();
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.event)
  return _impl_.event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >*
FtraceEventBundle::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.event)
  return &_impl_.event_;
}
inline const ::perfetto::protos::FtraceEvent& FtraceEventBundle::_internal_event(int index) const {
  return _impl_.event_.Get(index);
}
inline const ::perfetto::protos::FtraceEvent& FtraceEventBundle::event(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.event)
  return _internal_event(index);
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::_internal_add_event() {
  return _impl_.event_.Add();
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::add_event() {
  ::perfetto::protos::FtraceEvent* _add = _internal_add_event();
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >&
FtraceEventBundle::event() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.event)
  return _impl_.event_;
}

// optional bool lost_events = 3;
inline bool FtraceEventBundle::_internal_has_lost_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FtraceEventBundle::has_lost_events() const {
  return _internal_has_lost_events();
}
inline void FtraceEventBundle::clear_lost_events() {
  _impl_.lost_events_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FtraceEventBundle::_internal_lost_events() const {
  return _impl_.lost_events_;
}
inline bool FtraceEventBundle::lost_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.lost_events)
  return _internal_lost_events();
}
inline void FtraceEventBundle::_internal_set_lost_events(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lost_events_ = value;
}
inline void FtraceEventBundle::set_lost_events(bool value) {
  _internal_set_lost_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.lost_events)
}

// optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
inline bool FtraceEventBundle::_internal_has_compact_sched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compact_sched_ != nullptr);
  return value;
}
inline bool FtraceEventBundle::has_compact_sched() const {
  return _internal_has_compact_sched();
}
inline void FtraceEventBundle::clear_compact_sched() {
  if (_impl_.compact_sched_ != nullptr) _impl_.compact_sched_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::FtraceEventBundle_CompactSched& FtraceEventBundle::_internal_compact_sched() const {
  const ::perfetto::protos::FtraceEventBundle_CompactSched* p = _impl_.compact_sched_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FtraceEventBundle_CompactSched&>(
      ::perfetto::protos::_FtraceEventBundle_CompactSched_default_instance_);
}
inline const ::perfetto::protos::FtraceEventBundle_CompactSched& FtraceEventBundle::compact_sched() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.compact_sched)
  return _internal_compact_sched();
}
inline void FtraceEventBundle::unsafe_arena_set_allocated_compact_sched(
    ::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compact_sched_);
  }
  _impl_.compact_sched_ = compact_sched;
  if (compact_sched) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEventBundle.compact_sched)
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::release_compact_sched() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::FtraceEventBundle_CompactSched* temp = _impl_.compact_sched_;
  _impl_.compact_sched_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::unsafe_arena_release_compact_sched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEventBundle.compact_sched)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::FtraceEventBundle_CompactSched* temp = _impl_.compact_sched_;
  _impl_.compact_sched_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::_internal_mutable_compact_sched() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.compact_sched_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceEventBundle_CompactSched>(GetArenaForAllocation());
    _impl_.compact_sched_ = p;
  }
  return _impl_.compact_sched_;
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::mutable_compact_sched() {
  ::perfetto::protos::FtraceEventBundle_CompactSched* _msg = _internal_mutable_compact_sched();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.compact_sched)
  return _msg;
}
inline void FtraceEventBundle::set_allocated_compact_sched(::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.compact_sched_;
  }
  if (compact_sched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compact_sched);
    if (message_arena != submessage_arena) {
      compact_sched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_sched, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.compact_sched_ = compact_sched;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEventBundle.compact_sched)
}

// optional .perfetto.protos.FtraceClock ftrace_clock = 5;
inline bool FtraceEventBundle::_internal_has_ftrace_clock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FtraceEventBundle::has_ftrace_clock() const {
  return _internal_has_ftrace_clock();
}
inline void FtraceEventBundle::clear_ftrace_clock() {
  _impl_.ftrace_clock_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::perfetto::protos::FtraceClock FtraceEventBundle::_internal_ftrace_clock() const {
  return static_cast< ::perfetto::protos::FtraceClock >(_impl_.ftrace_clock_);
}
inline ::perfetto::protos::FtraceClock FtraceEventBundle::ftrace_clock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.ftrace_clock)
  return _internal_ftrace_clock();
}
inline void FtraceEventBundle::_internal_set_ftrace_clock(::perfetto::protos::FtraceClock value) {
  assert(::perfetto::protos::FtraceClock_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ftrace_clock_ = value;
}
inline void FtraceEventBundle::set_ftrace_clock(::perfetto::protos::FtraceClock value) {
  _internal_set_ftrace_clock(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.ftrace_clock)
}

// optional int64 ftrace_timestamp = 6;
inline bool FtraceEventBundle::_internal_has_ftrace_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FtraceEventBundle::has_ftrace_timestamp() const {
  return _internal_has_ftrace_timestamp();
}
inline void FtraceEventBundle::clear_ftrace_timestamp() {
  _impl_.ftrace_timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t FtraceEventBundle::_internal_ftrace_timestamp() const {
  return _impl_.ftrace_timestamp_;
}
inline int64_t FtraceEventBundle::ftrace_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.ftrace_timestamp)
  return _internal_ftrace_timestamp();
}
inline void FtraceEventBundle::_internal_set_ftrace_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ftrace_timestamp_ = value;
}
inline void FtraceEventBundle::set_ftrace_timestamp(int64_t value) {
  _internal_set_ftrace_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.ftrace_timestamp)
}

// optional int64 boot_timestamp = 7;
inline bool FtraceEventBundle::_internal_has_boot_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FtraceEventBundle::has_boot_timestamp() const {
  return _internal_has_boot_timestamp();
}
inline void FtraceEventBundle::clear_boot_timestamp() {
  _impl_.boot_timestamp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t FtraceEventBundle::_internal_boot_timestamp() const {
  return _impl_.boot_timestamp_;
}
inline int64_t FtraceEventBundle::boot_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.boot_timestamp)
  return _internal_boot_timestamp();
}
inline void FtraceEventBundle::_internal_set_boot_timestamp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.boot_timestamp_ = value;
}
inline void FtraceEventBundle::set_boot_timestamp(int64_t value) {
  _internal_set_boot_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.boot_timestamp)
}

// repeated .perfetto.protos.FtraceEventBundle.FtraceError error = 8;
inline int FtraceEventBundle::_internal_error_size() const {
  return _impl_.error_.size();
}
inline int FtraceEventBundle::error_size() const {
  return _internal_error_size();
}
inline void FtraceEventBundle::clear_error() {
  _impl_.error_.Clear();
}
inline ::perfetto::protos::FtraceEventBundle_FtraceError* FtraceEventBundle::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.error)
  return _impl_.error_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle_FtraceError >*
FtraceEventBundle::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.error)
  return &_impl_.error_;
}
inline const ::perfetto::protos::FtraceEventBundle_FtraceError& FtraceEventBundle::_internal_error(int index) const {
  return _impl_.error_.Get(index);
}
inline const ::perfetto::protos::FtraceEventBundle_FtraceError& FtraceEventBundle::error(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.error)
  return _internal_error(index);
}
inline ::perfetto::protos::FtraceEventBundle_FtraceError* FtraceEventBundle::_internal_add_error() {
  return _impl_.error_.Add();
}
inline ::perfetto::protos::FtraceEventBundle_FtraceError* FtraceEventBundle::add_error() {
  ::perfetto::protos::FtraceEventBundle_FtraceError* _add = _internal_add_error();
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.error)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle_FtraceError >&
FtraceEventBundle::error() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.error)
  return _impl_.error_;
}

// optional uint64 last_read_event_timestamp = 9;
inline bool FtraceEventBundle::_internal_has_last_read_event_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FtraceEventBundle::has_last_read_event_timestamp() const {
  return _internal_has_last_read_event_timestamp();
}
inline void FtraceEventBundle::clear_last_read_event_timestamp() {
  _impl_.last_read_event_timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t FtraceEventBundle::_internal_last_read_event_timestamp() const {
  return _impl_.last_read_event_timestamp_;
}
inline uint64_t FtraceEventBundle::last_read_event_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.last_read_event_timestamp)
  return _internal_last_read_event_timestamp();
}
inline void FtraceEventBundle::_internal_set_last_read_event_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.last_read_event_timestamp_ = value;
}
inline void FtraceEventBundle::set_last_read_event_timestamp(uint64_t value) {
  _internal_set_last_read_event_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.last_read_event_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::FtraceClock> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto
