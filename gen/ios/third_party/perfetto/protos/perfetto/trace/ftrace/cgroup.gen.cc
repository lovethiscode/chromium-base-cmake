#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/cgroup.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

CgroupSetupRootFtraceEvent::CgroupSetupRootFtraceEvent() = default;
CgroupSetupRootFtraceEvent::~CgroupSetupRootFtraceEvent() = default;
CgroupSetupRootFtraceEvent::CgroupSetupRootFtraceEvent(const CgroupSetupRootFtraceEvent&) = default;
CgroupSetupRootFtraceEvent& CgroupSetupRootFtraceEvent::operator=(const CgroupSetupRootFtraceEvent&) = default;
CgroupSetupRootFtraceEvent::CgroupSetupRootFtraceEvent(CgroupSetupRootFtraceEvent&&) noexcept = default;
CgroupSetupRootFtraceEvent& CgroupSetupRootFtraceEvent::operator=(CgroupSetupRootFtraceEvent&&) = default;

bool CgroupSetupRootFtraceEvent::operator==(const CgroupSetupRootFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(root_, other.root_)
   && ::protozero::internal::gen_helpers::EqualsField(ss_mask_, other.ss_mask_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool CgroupSetupRootFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* root */:
        field.get(&root_);
        break;
      case 2 /* ss_mask */:
        field.get(&ss_mask_);
        break;
      case 3 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupSetupRootFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupSetupRootFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupSetupRootFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, root_, msg);
  }

  // Field 2: ss_mask
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ss_mask_, msg);
  }

  // Field 3: name
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupRenameFtraceEvent::CgroupRenameFtraceEvent() = default;
CgroupRenameFtraceEvent::~CgroupRenameFtraceEvent() = default;
CgroupRenameFtraceEvent::CgroupRenameFtraceEvent(const CgroupRenameFtraceEvent&) = default;
CgroupRenameFtraceEvent& CgroupRenameFtraceEvent::operator=(const CgroupRenameFtraceEvent&) = default;
CgroupRenameFtraceEvent::CgroupRenameFtraceEvent(CgroupRenameFtraceEvent&&) noexcept = default;
CgroupRenameFtraceEvent& CgroupRenameFtraceEvent::operator=(CgroupRenameFtraceEvent&&) = default;

bool CgroupRenameFtraceEvent::operator==(const CgroupRenameFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(root_, other.root_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(cname_, other.cname_)
   && ::protozero::internal::gen_helpers::EqualsField(level_, other.level_)
   && ::protozero::internal::gen_helpers::EqualsField(path_, other.path_);
}

bool CgroupRenameFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* root */:
        field.get(&root_);
        break;
      case 2 /* id */:
        field.get(&id_);
        break;
      case 3 /* cname */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cname_);
        break;
      case 4 /* level */:
        field.get(&level_);
        break;
      case 5 /* path */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &path_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupRenameFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupRenameFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupRenameFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, root_, msg);
  }

  // Field 2: id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, id_, msg);
  }

  // Field 3: cname
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, cname_, msg);
  }

  // Field 4: level
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, level_, msg);
  }

  // Field 5: path
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, path_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupReleaseFtraceEvent::CgroupReleaseFtraceEvent() = default;
CgroupReleaseFtraceEvent::~CgroupReleaseFtraceEvent() = default;
CgroupReleaseFtraceEvent::CgroupReleaseFtraceEvent(const CgroupReleaseFtraceEvent&) = default;
CgroupReleaseFtraceEvent& CgroupReleaseFtraceEvent::operator=(const CgroupReleaseFtraceEvent&) = default;
CgroupReleaseFtraceEvent::CgroupReleaseFtraceEvent(CgroupReleaseFtraceEvent&&) noexcept = default;
CgroupReleaseFtraceEvent& CgroupReleaseFtraceEvent::operator=(CgroupReleaseFtraceEvent&&) = default;

bool CgroupReleaseFtraceEvent::operator==(const CgroupReleaseFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(root_, other.root_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(cname_, other.cname_)
   && ::protozero::internal::gen_helpers::EqualsField(level_, other.level_)
   && ::protozero::internal::gen_helpers::EqualsField(path_, other.path_);
}

bool CgroupReleaseFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* root */:
        field.get(&root_);
        break;
      case 2 /* id */:
        field.get(&id_);
        break;
      case 3 /* cname */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cname_);
        break;
      case 4 /* level */:
        field.get(&level_);
        break;
      case 5 /* path */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &path_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupReleaseFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupReleaseFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupReleaseFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, root_, msg);
  }

  // Field 2: id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, id_, msg);
  }

  // Field 3: cname
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, cname_, msg);
  }

  // Field 4: level
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, level_, msg);
  }

  // Field 5: path
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, path_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupDestroyRootFtraceEvent::CgroupDestroyRootFtraceEvent() = default;
CgroupDestroyRootFtraceEvent::~CgroupDestroyRootFtraceEvent() = default;
CgroupDestroyRootFtraceEvent::CgroupDestroyRootFtraceEvent(const CgroupDestroyRootFtraceEvent&) = default;
CgroupDestroyRootFtraceEvent& CgroupDestroyRootFtraceEvent::operator=(const CgroupDestroyRootFtraceEvent&) = default;
CgroupDestroyRootFtraceEvent::CgroupDestroyRootFtraceEvent(CgroupDestroyRootFtraceEvent&&) noexcept = default;
CgroupDestroyRootFtraceEvent& CgroupDestroyRootFtraceEvent::operator=(CgroupDestroyRootFtraceEvent&&) = default;

bool CgroupDestroyRootFtraceEvent::operator==(const CgroupDestroyRootFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(root_, other.root_)
   && ::protozero::internal::gen_helpers::EqualsField(ss_mask_, other.ss_mask_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool CgroupDestroyRootFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* root */:
        field.get(&root_);
        break;
      case 2 /* ss_mask */:
        field.get(&ss_mask_);
        break;
      case 3 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupDestroyRootFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupDestroyRootFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupDestroyRootFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, root_, msg);
  }

  // Field 2: ss_mask
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ss_mask_, msg);
  }

  // Field 3: name
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupTransferTasksFtraceEvent::CgroupTransferTasksFtraceEvent() = default;
CgroupTransferTasksFtraceEvent::~CgroupTransferTasksFtraceEvent() = default;
CgroupTransferTasksFtraceEvent::CgroupTransferTasksFtraceEvent(const CgroupTransferTasksFtraceEvent&) = default;
CgroupTransferTasksFtraceEvent& CgroupTransferTasksFtraceEvent::operator=(const CgroupTransferTasksFtraceEvent&) = default;
CgroupTransferTasksFtraceEvent::CgroupTransferTasksFtraceEvent(CgroupTransferTasksFtraceEvent&&) noexcept = default;
CgroupTransferTasksFtraceEvent& CgroupTransferTasksFtraceEvent::operator=(CgroupTransferTasksFtraceEvent&&) = default;

bool CgroupTransferTasksFtraceEvent::operator==(const CgroupTransferTasksFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_root_, other.dst_root_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_id_, other.dst_id_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_)
   && ::protozero::internal::gen_helpers::EqualsField(cname_, other.cname_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_level_, other.dst_level_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_path_, other.dst_path_);
}

bool CgroupTransferTasksFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dst_root */:
        field.get(&dst_root_);
        break;
      case 2 /* dst_id */:
        field.get(&dst_id_);
        break;
      case 3 /* pid */:
        field.get(&pid_);
        break;
      case 4 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      case 5 /* cname */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cname_);
        break;
      case 6 /* dst_level */:
        field.get(&dst_level_);
        break;
      case 7 /* dst_path */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &dst_path_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupTransferTasksFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupTransferTasksFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupTransferTasksFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dst_root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dst_root_, msg);
  }

  // Field 2: dst_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, dst_id_, msg);
  }

  // Field 3: pid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pid_, msg);
  }

  // Field 4: comm
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, comm_, msg);
  }

  // Field 5: cname
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, cname_, msg);
  }

  // Field 6: dst_level
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, dst_level_, msg);
  }

  // Field 7: dst_path
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeString(7, dst_path_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupRmdirFtraceEvent::CgroupRmdirFtraceEvent() = default;
CgroupRmdirFtraceEvent::~CgroupRmdirFtraceEvent() = default;
CgroupRmdirFtraceEvent::CgroupRmdirFtraceEvent(const CgroupRmdirFtraceEvent&) = default;
CgroupRmdirFtraceEvent& CgroupRmdirFtraceEvent::operator=(const CgroupRmdirFtraceEvent&) = default;
CgroupRmdirFtraceEvent::CgroupRmdirFtraceEvent(CgroupRmdirFtraceEvent&&) noexcept = default;
CgroupRmdirFtraceEvent& CgroupRmdirFtraceEvent::operator=(CgroupRmdirFtraceEvent&&) = default;

bool CgroupRmdirFtraceEvent::operator==(const CgroupRmdirFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(root_, other.root_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(cname_, other.cname_)
   && ::protozero::internal::gen_helpers::EqualsField(level_, other.level_)
   && ::protozero::internal::gen_helpers::EqualsField(path_, other.path_);
}

bool CgroupRmdirFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* root */:
        field.get(&root_);
        break;
      case 2 /* id */:
        field.get(&id_);
        break;
      case 3 /* cname */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cname_);
        break;
      case 4 /* level */:
        field.get(&level_);
        break;
      case 5 /* path */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &path_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupRmdirFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupRmdirFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupRmdirFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, root_, msg);
  }

  // Field 2: id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, id_, msg);
  }

  // Field 3: cname
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, cname_, msg);
  }

  // Field 4: level
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, level_, msg);
  }

  // Field 5: path
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, path_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupRemountFtraceEvent::CgroupRemountFtraceEvent() = default;
CgroupRemountFtraceEvent::~CgroupRemountFtraceEvent() = default;
CgroupRemountFtraceEvent::CgroupRemountFtraceEvent(const CgroupRemountFtraceEvent&) = default;
CgroupRemountFtraceEvent& CgroupRemountFtraceEvent::operator=(const CgroupRemountFtraceEvent&) = default;
CgroupRemountFtraceEvent::CgroupRemountFtraceEvent(CgroupRemountFtraceEvent&&) noexcept = default;
CgroupRemountFtraceEvent& CgroupRemountFtraceEvent::operator=(CgroupRemountFtraceEvent&&) = default;

bool CgroupRemountFtraceEvent::operator==(const CgroupRemountFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(root_, other.root_)
   && ::protozero::internal::gen_helpers::EqualsField(ss_mask_, other.ss_mask_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool CgroupRemountFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* root */:
        field.get(&root_);
        break;
      case 2 /* ss_mask */:
        field.get(&ss_mask_);
        break;
      case 3 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupRemountFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupRemountFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupRemountFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, root_, msg);
  }

  // Field 2: ss_mask
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, ss_mask_, msg);
  }

  // Field 3: name
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupMkdirFtraceEvent::CgroupMkdirFtraceEvent() = default;
CgroupMkdirFtraceEvent::~CgroupMkdirFtraceEvent() = default;
CgroupMkdirFtraceEvent::CgroupMkdirFtraceEvent(const CgroupMkdirFtraceEvent&) = default;
CgroupMkdirFtraceEvent& CgroupMkdirFtraceEvent::operator=(const CgroupMkdirFtraceEvent&) = default;
CgroupMkdirFtraceEvent::CgroupMkdirFtraceEvent(CgroupMkdirFtraceEvent&&) noexcept = default;
CgroupMkdirFtraceEvent& CgroupMkdirFtraceEvent::operator=(CgroupMkdirFtraceEvent&&) = default;

bool CgroupMkdirFtraceEvent::operator==(const CgroupMkdirFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(root_, other.root_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(cname_, other.cname_)
   && ::protozero::internal::gen_helpers::EqualsField(level_, other.level_)
   && ::protozero::internal::gen_helpers::EqualsField(path_, other.path_);
}

bool CgroupMkdirFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* root */:
        field.get(&root_);
        break;
      case 2 /* id */:
        field.get(&id_);
        break;
      case 3 /* cname */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cname_);
        break;
      case 4 /* level */:
        field.get(&level_);
        break;
      case 5 /* path */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &path_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupMkdirFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupMkdirFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupMkdirFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, root_, msg);
  }

  // Field 2: id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, id_, msg);
  }

  // Field 3: cname
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeString(3, cname_, msg);
  }

  // Field 4: level
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, level_, msg);
  }

  // Field 5: path
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, path_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


CgroupAttachTaskFtraceEvent::CgroupAttachTaskFtraceEvent() = default;
CgroupAttachTaskFtraceEvent::~CgroupAttachTaskFtraceEvent() = default;
CgroupAttachTaskFtraceEvent::CgroupAttachTaskFtraceEvent(const CgroupAttachTaskFtraceEvent&) = default;
CgroupAttachTaskFtraceEvent& CgroupAttachTaskFtraceEvent::operator=(const CgroupAttachTaskFtraceEvent&) = default;
CgroupAttachTaskFtraceEvent::CgroupAttachTaskFtraceEvent(CgroupAttachTaskFtraceEvent&&) noexcept = default;
CgroupAttachTaskFtraceEvent& CgroupAttachTaskFtraceEvent::operator=(CgroupAttachTaskFtraceEvent&&) = default;

bool CgroupAttachTaskFtraceEvent::operator==(const CgroupAttachTaskFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_root_, other.dst_root_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_id_, other.dst_id_)
   && ::protozero::internal::gen_helpers::EqualsField(pid_, other.pid_)
   && ::protozero::internal::gen_helpers::EqualsField(comm_, other.comm_)
   && ::protozero::internal::gen_helpers::EqualsField(cname_, other.cname_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_level_, other.dst_level_)
   && ::protozero::internal::gen_helpers::EqualsField(dst_path_, other.dst_path_);
}

bool CgroupAttachTaskFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* dst_root */:
        field.get(&dst_root_);
        break;
      case 2 /* dst_id */:
        field.get(&dst_id_);
        break;
      case 3 /* pid */:
        field.get(&pid_);
        break;
      case 4 /* comm */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &comm_);
        break;
      case 5 /* cname */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &cname_);
        break;
      case 6 /* dst_level */:
        field.get(&dst_level_);
        break;
      case 7 /* dst_path */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &dst_path_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string CgroupAttachTaskFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> CgroupAttachTaskFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void CgroupAttachTaskFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: dst_root
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, dst_root_, msg);
  }

  // Field 2: dst_id
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, dst_id_, msg);
  }

  // Field 3: pid
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, pid_, msg);
  }

  // Field 4: comm
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeString(4, comm_, msg);
  }

  // Field 5: cname
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeString(5, cname_, msg);
  }

  // Field 6: dst_level
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, dst_level_, msg);
  }

  // Field 7: dst_path
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeString(7, dst_path_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
