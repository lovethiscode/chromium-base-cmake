// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FASTRPC_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FASTRPC_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class FastrpcDmaMapFtraceEvent;
class FastrpcDmaUnmapFtraceEvent;
class FastrpcDmaAllocFtraceEvent;
class FastrpcDmaFreeFtraceEvent;
class FastrpcDmaStatFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT FastrpcDmaMapFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCidFieldNumber = 1,
    kFdFieldNumber = 2,
    kPhysFieldNumber = 3,
    kSizeFieldNumber = 4,
    kLenFieldNumber = 5,
    kAttrFieldNumber = 6,
    kMflagsFieldNumber = 7,
  };

  FastrpcDmaMapFtraceEvent();
  ~FastrpcDmaMapFtraceEvent() override;
  FastrpcDmaMapFtraceEvent(FastrpcDmaMapFtraceEvent&&) noexcept;
  FastrpcDmaMapFtraceEvent& operator=(FastrpcDmaMapFtraceEvent&&);
  FastrpcDmaMapFtraceEvent(const FastrpcDmaMapFtraceEvent&);
  FastrpcDmaMapFtraceEvent& operator=(const FastrpcDmaMapFtraceEvent&);
  bool operator==(const FastrpcDmaMapFtraceEvent&) const;
  bool operator!=(const FastrpcDmaMapFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cid() const { return _has_field_[1]; }
  int32_t cid() const { return cid_; }
  void set_cid(int32_t value) { cid_ = value; _has_field_.set(1); }

  bool has_fd() const { return _has_field_[2]; }
  int32_t fd() const { return fd_; }
  void set_fd(int32_t value) { fd_ = value; _has_field_.set(2); }

  bool has_phys() const { return _has_field_[3]; }
  uint64_t phys() const { return phys_; }
  void set_phys(uint64_t value) { phys_ = value; _has_field_.set(3); }

  bool has_size() const { return _has_field_[4]; }
  uint64_t size() const { return size_; }
  void set_size(uint64_t value) { size_ = value; _has_field_.set(4); }

  bool has_len() const { return _has_field_[5]; }
  uint64_t len() const { return len_; }
  void set_len(uint64_t value) { len_ = value; _has_field_.set(5); }

  bool has_attr() const { return _has_field_[6]; }
  uint32_t attr() const { return attr_; }
  void set_attr(uint32_t value) { attr_ = value; _has_field_.set(6); }

  bool has_mflags() const { return _has_field_[7]; }
  int32_t mflags() const { return mflags_; }
  void set_mflags(int32_t value) { mflags_ = value; _has_field_.set(7); }

 private:
  int32_t cid_{};
  int32_t fd_{};
  uint64_t phys_{};
  uint64_t size_{};
  uint64_t len_{};
  uint32_t attr_{};
  int32_t mflags_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<8> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT FastrpcDmaUnmapFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCidFieldNumber = 1,
    kPhysFieldNumber = 2,
    kSizeFieldNumber = 3,
  };

  FastrpcDmaUnmapFtraceEvent();
  ~FastrpcDmaUnmapFtraceEvent() override;
  FastrpcDmaUnmapFtraceEvent(FastrpcDmaUnmapFtraceEvent&&) noexcept;
  FastrpcDmaUnmapFtraceEvent& operator=(FastrpcDmaUnmapFtraceEvent&&);
  FastrpcDmaUnmapFtraceEvent(const FastrpcDmaUnmapFtraceEvent&);
  FastrpcDmaUnmapFtraceEvent& operator=(const FastrpcDmaUnmapFtraceEvent&);
  bool operator==(const FastrpcDmaUnmapFtraceEvent&) const;
  bool operator!=(const FastrpcDmaUnmapFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cid() const { return _has_field_[1]; }
  int32_t cid() const { return cid_; }
  void set_cid(int32_t value) { cid_ = value; _has_field_.set(1); }

  bool has_phys() const { return _has_field_[2]; }
  uint64_t phys() const { return phys_; }
  void set_phys(uint64_t value) { phys_ = value; _has_field_.set(2); }

  bool has_size() const { return _has_field_[3]; }
  uint64_t size() const { return size_; }
  void set_size(uint64_t value) { size_ = value; _has_field_.set(3); }

 private:
  int32_t cid_{};
  uint64_t phys_{};
  uint64_t size_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT FastrpcDmaAllocFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCidFieldNumber = 1,
    kPhysFieldNumber = 2,
    kSizeFieldNumber = 3,
    kAttrFieldNumber = 4,
    kMflagsFieldNumber = 5,
  };

  FastrpcDmaAllocFtraceEvent();
  ~FastrpcDmaAllocFtraceEvent() override;
  FastrpcDmaAllocFtraceEvent(FastrpcDmaAllocFtraceEvent&&) noexcept;
  FastrpcDmaAllocFtraceEvent& operator=(FastrpcDmaAllocFtraceEvent&&);
  FastrpcDmaAllocFtraceEvent(const FastrpcDmaAllocFtraceEvent&);
  FastrpcDmaAllocFtraceEvent& operator=(const FastrpcDmaAllocFtraceEvent&);
  bool operator==(const FastrpcDmaAllocFtraceEvent&) const;
  bool operator!=(const FastrpcDmaAllocFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cid() const { return _has_field_[1]; }
  int32_t cid() const { return cid_; }
  void set_cid(int32_t value) { cid_ = value; _has_field_.set(1); }

  bool has_phys() const { return _has_field_[2]; }
  uint64_t phys() const { return phys_; }
  void set_phys(uint64_t value) { phys_ = value; _has_field_.set(2); }

  bool has_size() const { return _has_field_[3]; }
  uint64_t size() const { return size_; }
  void set_size(uint64_t value) { size_ = value; _has_field_.set(3); }

  bool has_attr() const { return _has_field_[4]; }
  uint64_t attr() const { return attr_; }
  void set_attr(uint64_t value) { attr_ = value; _has_field_.set(4); }

  bool has_mflags() const { return _has_field_[5]; }
  int32_t mflags() const { return mflags_; }
  void set_mflags(int32_t value) { mflags_ = value; _has_field_.set(5); }

 private:
  int32_t cid_{};
  uint64_t phys_{};
  uint64_t size_{};
  uint64_t attr_{};
  int32_t mflags_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT FastrpcDmaFreeFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCidFieldNumber = 1,
    kPhysFieldNumber = 2,
    kSizeFieldNumber = 3,
  };

  FastrpcDmaFreeFtraceEvent();
  ~FastrpcDmaFreeFtraceEvent() override;
  FastrpcDmaFreeFtraceEvent(FastrpcDmaFreeFtraceEvent&&) noexcept;
  FastrpcDmaFreeFtraceEvent& operator=(FastrpcDmaFreeFtraceEvent&&);
  FastrpcDmaFreeFtraceEvent(const FastrpcDmaFreeFtraceEvent&);
  FastrpcDmaFreeFtraceEvent& operator=(const FastrpcDmaFreeFtraceEvent&);
  bool operator==(const FastrpcDmaFreeFtraceEvent&) const;
  bool operator!=(const FastrpcDmaFreeFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cid() const { return _has_field_[1]; }
  int32_t cid() const { return cid_; }
  void set_cid(int32_t value) { cid_ = value; _has_field_.set(1); }

  bool has_phys() const { return _has_field_[2]; }
  uint64_t phys() const { return phys_; }
  void set_phys(uint64_t value) { phys_ = value; _has_field_.set(2); }

  bool has_size() const { return _has_field_[3]; }
  uint64_t size() const { return size_; }
  void set_size(uint64_t value) { size_ = value; _has_field_.set(3); }

 private:
  int32_t cid_{};
  uint64_t phys_{};
  uint64_t size_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT FastrpcDmaStatFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kCidFieldNumber = 1,
    kLenFieldNumber = 2,
    kTotalAllocatedFieldNumber = 3,
  };

  FastrpcDmaStatFtraceEvent();
  ~FastrpcDmaStatFtraceEvent() override;
  FastrpcDmaStatFtraceEvent(FastrpcDmaStatFtraceEvent&&) noexcept;
  FastrpcDmaStatFtraceEvent& operator=(FastrpcDmaStatFtraceEvent&&);
  FastrpcDmaStatFtraceEvent(const FastrpcDmaStatFtraceEvent&);
  FastrpcDmaStatFtraceEvent& operator=(const FastrpcDmaStatFtraceEvent&);
  bool operator==(const FastrpcDmaStatFtraceEvent&) const;
  bool operator!=(const FastrpcDmaStatFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_cid() const { return _has_field_[1]; }
  int32_t cid() const { return cid_; }
  void set_cid(int32_t value) { cid_ = value; _has_field_.set(1); }

  bool has_len() const { return _has_field_[2]; }
  int64_t len() const { return len_; }
  void set_len(int64_t value) { len_ = value; _has_field_.set(2); }

  bool has_total_allocated() const { return _has_field_[3]; }
  uint64_t total_allocated() const { return total_allocated_; }
  void set_total_allocated(uint64_t value) { total_allocated_ = value; _has_field_.set(3); }

 private:
  int32_t cid_{};
  int64_t len_{};
  uint64_t total_allocated_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_FASTRPC_PROTO_CPP_H_
