// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BCL_EXYNOS_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BCL_EXYNOS_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"


namespace perfetto {
namespace protos {
namespace pbzero {

class BclIrqTriggerFtraceEvent_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/9, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BclIrqTriggerFtraceEvent_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BclIrqTriggerFtraceEvent_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BclIrqTriggerFtraceEvent_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_id() const { return at<1>().valid(); }
  int32_t id() const { return at<1>().as_int32(); }
  bool has_throttle() const { return at<2>().valid(); }
  int32_t throttle() const { return at<2>().as_int32(); }
  bool has_cpu0_limit() const { return at<3>().valid(); }
  int32_t cpu0_limit() const { return at<3>().as_int32(); }
  bool has_cpu1_limit() const { return at<4>().valid(); }
  int32_t cpu1_limit() const { return at<4>().as_int32(); }
  bool has_cpu2_limit() const { return at<5>().valid(); }
  int32_t cpu2_limit() const { return at<5>().as_int32(); }
  bool has_tpu_limit() const { return at<6>().valid(); }
  int32_t tpu_limit() const { return at<6>().as_int32(); }
  bool has_gpu_limit() const { return at<7>().valid(); }
  int32_t gpu_limit() const { return at<7>().as_int32(); }
  bool has_voltage() const { return at<8>().valid(); }
  int32_t voltage() const { return at<8>().as_int32(); }
  bool has_capacity() const { return at<9>().valid(); }
  int32_t capacity() const { return at<9>().as_int32(); }
};

class BclIrqTriggerFtraceEvent : public ::protozero::Message {
 public:
  using Decoder = BclIrqTriggerFtraceEvent_Decoder;
  enum : int32_t {
    kIdFieldNumber = 1,
    kThrottleFieldNumber = 2,
    kCpu0LimitFieldNumber = 3,
    kCpu1LimitFieldNumber = 4,
    kCpu2LimitFieldNumber = 5,
    kTpuLimitFieldNumber = 6,
    kGpuLimitFieldNumber = 7,
    kVoltageFieldNumber = 8,
    kCapacityFieldNumber = 9,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BclIrqTriggerFtraceEvent"; }


  using FieldMetadata_Id =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_Id kId{};
  void set_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Id::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Throttle =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_Throttle kThrottle{};
  void set_throttle(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Throttle::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Cpu0Limit =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_Cpu0Limit kCpu0Limit{};
  void set_cpu0_limit(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Cpu0Limit::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Cpu1Limit =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_Cpu1Limit kCpu1Limit{};
  void set_cpu1_limit(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Cpu1Limit::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Cpu2Limit =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_Cpu2Limit kCpu2Limit{};
  void set_cpu2_limit(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Cpu2Limit::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TpuLimit =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_TpuLimit kTpuLimit{};
  void set_tpu_limit(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TpuLimit::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_GpuLimit =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_GpuLimit kGpuLimit{};
  void set_gpu_limit(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_GpuLimit::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Voltage =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_Voltage kVoltage{};
  void set_voltage(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Voltage::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Capacity =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BclIrqTriggerFtraceEvent>;

  static constexpr FieldMetadata_Capacity kCapacity{};
  void set_capacity(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Capacity::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
