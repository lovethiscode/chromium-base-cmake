// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/raw_syscalls.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class SysEnterFtraceEvent;
struct SysEnterFtraceEventDefaultTypeInternal;
extern SysEnterFtraceEventDefaultTypeInternal _SysEnterFtraceEvent_default_instance_;
class SysExitFtraceEvent;
struct SysExitFtraceEventDefaultTypeInternal;
extern SysExitFtraceEventDefaultTypeInternal _SysExitFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SysEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SysEnterFtraceEvent>(Arena*);
template<> ::perfetto::protos::SysExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SysExitFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SysEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysEnterFtraceEvent) */ {
 public:
  inline SysEnterFtraceEvent() : SysEnterFtraceEvent(nullptr) {}
  ~SysEnterFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR SysEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysEnterFtraceEvent(const SysEnterFtraceEvent& from);
  SysEnterFtraceEvent(SysEnterFtraceEvent&& from) noexcept
    : SysEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SysEnterFtraceEvent& operator=(const SysEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysEnterFtraceEvent& operator=(SysEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SysEnterFtraceEvent*>(
               &_SysEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SysEnterFtraceEvent& a, SysEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysEnterFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysEnterFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysEnterFtraceEvent& from);
  void MergeFrom(const SysEnterFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysEnterFtraceEvent";
  }
  protected:
  explicit SysEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated uint64 args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  private:
  uint64_t _internal_args(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_args() const;
  void _internal_add_args(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_args();
  public:
  uint64_t args(int index) const;
  void set_args(int index, uint64_t value);
  void add_args(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_args();

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > args_;
    int64_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto;
};
// -------------------------------------------------------------------

class SysExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SysExitFtraceEvent) */ {
 public:
  inline SysExitFtraceEvent() : SysExitFtraceEvent(nullptr) {}
  ~SysExitFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR SysExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysExitFtraceEvent(const SysExitFtraceEvent& from);
  SysExitFtraceEvent(SysExitFtraceEvent&& from) noexcept
    : SysExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SysExitFtraceEvent& operator=(const SysExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysExitFtraceEvent& operator=(SysExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SysExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SysExitFtraceEvent*>(
               &_SysExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SysExitFtraceEvent& a, SysExitFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SysExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysExitFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysExitFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SysExitFtraceEvent& from);
  void MergeFrom(const SysExitFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SysExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SysExitFtraceEvent";
  }
  protected:
  explicit SysExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // optional int64 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int64_t ret() const;
  void set_ret(int64_t value);
  private:
  int64_t _internal_ret() const;
  void _internal_set_ret(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.SysExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t id_;
    int64_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SysEnterFtraceEvent

// optional int64 id = 1;
inline bool SysEnterFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysEnterFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void SysEnterFtraceEvent::clear_id() {
  _impl_.id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t SysEnterFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline int64_t SysEnterFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysEnterFtraceEvent.id)
  return _internal_id();
}
inline void SysEnterFtraceEvent::_internal_set_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void SysEnterFtraceEvent::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysEnterFtraceEvent.id)
}

// repeated uint64 args = 2;
inline int SysEnterFtraceEvent::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int SysEnterFtraceEvent::args_size() const {
  return _internal_args_size();
}
inline void SysEnterFtraceEvent::clear_args() {
  _impl_.args_.Clear();
}
inline uint64_t SysEnterFtraceEvent::_internal_args(int index) const {
  return _impl_.args_.Get(index);
}
inline uint64_t SysEnterFtraceEvent::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysEnterFtraceEvent.args)
  return _internal_args(index);
}
inline void SysEnterFtraceEvent::set_args(int index, uint64_t value) {
  _impl_.args_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysEnterFtraceEvent.args)
}
inline void SysEnterFtraceEvent::_internal_add_args(uint64_t value) {
  _impl_.args_.Add(value);
}
inline void SysEnterFtraceEvent::add_args(uint64_t value) {
  _internal_add_args(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysEnterFtraceEvent.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SysEnterFtraceEvent::_internal_args() const {
  return _impl_.args_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
SysEnterFtraceEvent::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysEnterFtraceEvent.args)
  return _internal_args();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SysEnterFtraceEvent::_internal_mutable_args() {
  return &_impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
SysEnterFtraceEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysEnterFtraceEvent.args)
  return _internal_mutable_args();
}

// -------------------------------------------------------------------

// SysExitFtraceEvent

// optional int64 id = 1;
inline bool SysExitFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SysExitFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void SysExitFtraceEvent::clear_id() {
  _impl_.id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t SysExitFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline int64_t SysExitFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysExitFtraceEvent.id)
  return _internal_id();
}
inline void SysExitFtraceEvent::_internal_set_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void SysExitFtraceEvent::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysExitFtraceEvent.id)
}

// optional int64 ret = 2;
inline bool SysExitFtraceEvent::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SysExitFtraceEvent::has_ret() const {
  return _internal_has_ret();
}
inline void SysExitFtraceEvent::clear_ret() {
  _impl_.ret_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t SysExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline int64_t SysExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysExitFtraceEvent.ret)
  return _internal_ret();
}
inline void SysExitFtraceEvent::_internal_set_ret(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void SysExitFtraceEvent::set_ret(int64_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysExitFtraceEvent.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto
