#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/clk.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

ClkSetRateFtraceEvent::ClkSetRateFtraceEvent() = default;
ClkSetRateFtraceEvent::~ClkSetRateFtraceEvent() = default;
ClkSetRateFtraceEvent::ClkSetRateFtraceEvent(const ClkSetRateFtraceEvent&) = default;
ClkSetRateFtraceEvent& ClkSetRateFtraceEvent::operator=(const ClkSetRateFtraceEvent&) = default;
ClkSetRateFtraceEvent::ClkSetRateFtraceEvent(ClkSetRateFtraceEvent&&) noexcept = default;
ClkSetRateFtraceEvent& ClkSetRateFtraceEvent::operator=(ClkSetRateFtraceEvent&&) = default;

bool ClkSetRateFtraceEvent::operator==(const ClkSetRateFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(rate_, other.rate_);
}

bool ClkSetRateFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 2 /* rate */:
        field.get(&rate_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ClkSetRateFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ClkSetRateFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ClkSetRateFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  // Field 2: rate
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, rate_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ClkDisableFtraceEvent::ClkDisableFtraceEvent() = default;
ClkDisableFtraceEvent::~ClkDisableFtraceEvent() = default;
ClkDisableFtraceEvent::ClkDisableFtraceEvent(const ClkDisableFtraceEvent&) = default;
ClkDisableFtraceEvent& ClkDisableFtraceEvent::operator=(const ClkDisableFtraceEvent&) = default;
ClkDisableFtraceEvent::ClkDisableFtraceEvent(ClkDisableFtraceEvent&&) noexcept = default;
ClkDisableFtraceEvent& ClkDisableFtraceEvent::operator=(ClkDisableFtraceEvent&&) = default;

bool ClkDisableFtraceEvent::operator==(const ClkDisableFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool ClkDisableFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ClkDisableFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ClkDisableFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ClkDisableFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


ClkEnableFtraceEvent::ClkEnableFtraceEvent() = default;
ClkEnableFtraceEvent::~ClkEnableFtraceEvent() = default;
ClkEnableFtraceEvent::ClkEnableFtraceEvent(const ClkEnableFtraceEvent&) = default;
ClkEnableFtraceEvent& ClkEnableFtraceEvent::operator=(const ClkEnableFtraceEvent&) = default;
ClkEnableFtraceEvent::ClkEnableFtraceEvent(ClkEnableFtraceEvent&&) noexcept = default;
ClkEnableFtraceEvent& ClkEnableFtraceEvent::operator=(ClkEnableFtraceEvent&&) = default;

bool ClkEnableFtraceEvent::operator==(const ClkEnableFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool ClkEnableFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string ClkEnableFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> ClkEnableFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void ClkEnableFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: name
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeString(1, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
