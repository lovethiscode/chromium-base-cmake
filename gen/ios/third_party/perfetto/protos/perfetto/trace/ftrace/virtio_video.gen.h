// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_VIRTIO_VIDEO_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_VIRTIO_VIDEO_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class VirtioVideoResourceQueueDoneFtraceEvent;
class VirtioVideoResourceQueueFtraceEvent;
class VirtioVideoCmdDoneFtraceEvent;
class VirtioVideoCmdFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT VirtioVideoResourceQueueDoneFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDataSize0FieldNumber = 1,
    kDataSize1FieldNumber = 2,
    kDataSize2FieldNumber = 3,
    kDataSize3FieldNumber = 4,
    kQueueTypeFieldNumber = 5,
    kResourceIdFieldNumber = 6,
    kStreamIdFieldNumber = 7,
    kTimestampFieldNumber = 8,
  };

  VirtioVideoResourceQueueDoneFtraceEvent();
  ~VirtioVideoResourceQueueDoneFtraceEvent() override;
  VirtioVideoResourceQueueDoneFtraceEvent(VirtioVideoResourceQueueDoneFtraceEvent&&) noexcept;
  VirtioVideoResourceQueueDoneFtraceEvent& operator=(VirtioVideoResourceQueueDoneFtraceEvent&&);
  VirtioVideoResourceQueueDoneFtraceEvent(const VirtioVideoResourceQueueDoneFtraceEvent&);
  VirtioVideoResourceQueueDoneFtraceEvent& operator=(const VirtioVideoResourceQueueDoneFtraceEvent&);
  bool operator==(const VirtioVideoResourceQueueDoneFtraceEvent&) const;
  bool operator!=(const VirtioVideoResourceQueueDoneFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_data_size0() const { return _has_field_[1]; }
  uint32_t data_size0() const { return data_size0_; }
  void set_data_size0(uint32_t value) { data_size0_ = value; _has_field_.set(1); }

  bool has_data_size1() const { return _has_field_[2]; }
  uint32_t data_size1() const { return data_size1_; }
  void set_data_size1(uint32_t value) { data_size1_ = value; _has_field_.set(2); }

  bool has_data_size2() const { return _has_field_[3]; }
  uint32_t data_size2() const { return data_size2_; }
  void set_data_size2(uint32_t value) { data_size2_ = value; _has_field_.set(3); }

  bool has_data_size3() const { return _has_field_[4]; }
  uint32_t data_size3() const { return data_size3_; }
  void set_data_size3(uint32_t value) { data_size3_ = value; _has_field_.set(4); }

  bool has_queue_type() const { return _has_field_[5]; }
  uint32_t queue_type() const { return queue_type_; }
  void set_queue_type(uint32_t value) { queue_type_ = value; _has_field_.set(5); }

  bool has_resource_id() const { return _has_field_[6]; }
  int32_t resource_id() const { return resource_id_; }
  void set_resource_id(int32_t value) { resource_id_ = value; _has_field_.set(6); }

  bool has_stream_id() const { return _has_field_[7]; }
  int32_t stream_id() const { return stream_id_; }
  void set_stream_id(int32_t value) { stream_id_ = value; _has_field_.set(7); }

  bool has_timestamp() const { return _has_field_[8]; }
  uint64_t timestamp() const { return timestamp_; }
  void set_timestamp(uint64_t value) { timestamp_ = value; _has_field_.set(8); }

 private:
  uint32_t data_size0_{};
  uint32_t data_size1_{};
  uint32_t data_size2_{};
  uint32_t data_size3_{};
  uint32_t queue_type_{};
  int32_t resource_id_{};
  int32_t stream_id_{};
  uint64_t timestamp_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<9> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT VirtioVideoResourceQueueFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDataSize0FieldNumber = 1,
    kDataSize1FieldNumber = 2,
    kDataSize2FieldNumber = 3,
    kDataSize3FieldNumber = 4,
    kQueueTypeFieldNumber = 5,
    kResourceIdFieldNumber = 6,
    kStreamIdFieldNumber = 7,
    kTimestampFieldNumber = 8,
  };

  VirtioVideoResourceQueueFtraceEvent();
  ~VirtioVideoResourceQueueFtraceEvent() override;
  VirtioVideoResourceQueueFtraceEvent(VirtioVideoResourceQueueFtraceEvent&&) noexcept;
  VirtioVideoResourceQueueFtraceEvent& operator=(VirtioVideoResourceQueueFtraceEvent&&);
  VirtioVideoResourceQueueFtraceEvent(const VirtioVideoResourceQueueFtraceEvent&);
  VirtioVideoResourceQueueFtraceEvent& operator=(const VirtioVideoResourceQueueFtraceEvent&);
  bool operator==(const VirtioVideoResourceQueueFtraceEvent&) const;
  bool operator!=(const VirtioVideoResourceQueueFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_data_size0() const { return _has_field_[1]; }
  uint32_t data_size0() const { return data_size0_; }
  void set_data_size0(uint32_t value) { data_size0_ = value; _has_field_.set(1); }

  bool has_data_size1() const { return _has_field_[2]; }
  uint32_t data_size1() const { return data_size1_; }
  void set_data_size1(uint32_t value) { data_size1_ = value; _has_field_.set(2); }

  bool has_data_size2() const { return _has_field_[3]; }
  uint32_t data_size2() const { return data_size2_; }
  void set_data_size2(uint32_t value) { data_size2_ = value; _has_field_.set(3); }

  bool has_data_size3() const { return _has_field_[4]; }
  uint32_t data_size3() const { return data_size3_; }
  void set_data_size3(uint32_t value) { data_size3_ = value; _has_field_.set(4); }

  bool has_queue_type() const { return _has_field_[5]; }
  uint32_t queue_type() const { return queue_type_; }
  void set_queue_type(uint32_t value) { queue_type_ = value; _has_field_.set(5); }

  bool has_resource_id() const { return _has_field_[6]; }
  int32_t resource_id() const { return resource_id_; }
  void set_resource_id(int32_t value) { resource_id_ = value; _has_field_.set(6); }

  bool has_stream_id() const { return _has_field_[7]; }
  int32_t stream_id() const { return stream_id_; }
  void set_stream_id(int32_t value) { stream_id_ = value; _has_field_.set(7); }

  bool has_timestamp() const { return _has_field_[8]; }
  uint64_t timestamp() const { return timestamp_; }
  void set_timestamp(uint64_t value) { timestamp_ = value; _has_field_.set(8); }

 private:
  uint32_t data_size0_{};
  uint32_t data_size1_{};
  uint32_t data_size2_{};
  uint32_t data_size3_{};
  uint32_t queue_type_{};
  int32_t resource_id_{};
  int32_t stream_id_{};
  uint64_t timestamp_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<9> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT VirtioVideoCmdDoneFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kStreamIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };

  VirtioVideoCmdDoneFtraceEvent();
  ~VirtioVideoCmdDoneFtraceEvent() override;
  VirtioVideoCmdDoneFtraceEvent(VirtioVideoCmdDoneFtraceEvent&&) noexcept;
  VirtioVideoCmdDoneFtraceEvent& operator=(VirtioVideoCmdDoneFtraceEvent&&);
  VirtioVideoCmdDoneFtraceEvent(const VirtioVideoCmdDoneFtraceEvent&);
  VirtioVideoCmdDoneFtraceEvent& operator=(const VirtioVideoCmdDoneFtraceEvent&);
  bool operator==(const VirtioVideoCmdDoneFtraceEvent&) const;
  bool operator!=(const VirtioVideoCmdDoneFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_stream_id() const { return _has_field_[1]; }
  uint32_t stream_id() const { return stream_id_; }
  void set_stream_id(uint32_t value) { stream_id_ = value; _has_field_.set(1); }

  bool has_type() const { return _has_field_[2]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(2); }

 private:
  uint32_t stream_id_{};
  uint32_t type_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT VirtioVideoCmdFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kStreamIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };

  VirtioVideoCmdFtraceEvent();
  ~VirtioVideoCmdFtraceEvent() override;
  VirtioVideoCmdFtraceEvent(VirtioVideoCmdFtraceEvent&&) noexcept;
  VirtioVideoCmdFtraceEvent& operator=(VirtioVideoCmdFtraceEvent&&);
  VirtioVideoCmdFtraceEvent(const VirtioVideoCmdFtraceEvent&);
  VirtioVideoCmdFtraceEvent& operator=(const VirtioVideoCmdFtraceEvent&);
  bool operator==(const VirtioVideoCmdFtraceEvent&) const;
  bool operator!=(const VirtioVideoCmdFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_stream_id() const { return _has_field_[1]; }
  uint32_t stream_id() const { return stream_id_; }
  void set_stream_id(uint32_t value) { stream_id_ = value; _has_field_.set(1); }

  bool has_type() const { return _has_field_[2]; }
  uint32_t type() const { return type_; }
  void set_type(uint32_t value) { type_ = value; _has_field_.set(2); }

 private:
  uint32_t stream_id_{};
  uint32_t type_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<3> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_VIRTIO_VIDEO_PROTO_CPP_H_
