// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BCL_EXYNOS_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BCL_EXYNOS_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class BclIrqTriggerFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT BclIrqTriggerFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kIdFieldNumber = 1,
    kThrottleFieldNumber = 2,
    kCpu0LimitFieldNumber = 3,
    kCpu1LimitFieldNumber = 4,
    kCpu2LimitFieldNumber = 5,
    kTpuLimitFieldNumber = 6,
    kGpuLimitFieldNumber = 7,
    kVoltageFieldNumber = 8,
    kCapacityFieldNumber = 9,
  };

  BclIrqTriggerFtraceEvent();
  ~BclIrqTriggerFtraceEvent() override;
  BclIrqTriggerFtraceEvent(BclIrqTriggerFtraceEvent&&) noexcept;
  BclIrqTriggerFtraceEvent& operator=(BclIrqTriggerFtraceEvent&&);
  BclIrqTriggerFtraceEvent(const BclIrqTriggerFtraceEvent&);
  BclIrqTriggerFtraceEvent& operator=(const BclIrqTriggerFtraceEvent&);
  bool operator==(const BclIrqTriggerFtraceEvent&) const;
  bool operator!=(const BclIrqTriggerFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_id() const { return _has_field_[1]; }
  int32_t id() const { return id_; }
  void set_id(int32_t value) { id_ = value; _has_field_.set(1); }

  bool has_throttle() const { return _has_field_[2]; }
  int32_t throttle() const { return throttle_; }
  void set_throttle(int32_t value) { throttle_ = value; _has_field_.set(2); }

  bool has_cpu0_limit() const { return _has_field_[3]; }
  int32_t cpu0_limit() const { return cpu0_limit_; }
  void set_cpu0_limit(int32_t value) { cpu0_limit_ = value; _has_field_.set(3); }

  bool has_cpu1_limit() const { return _has_field_[4]; }
  int32_t cpu1_limit() const { return cpu1_limit_; }
  void set_cpu1_limit(int32_t value) { cpu1_limit_ = value; _has_field_.set(4); }

  bool has_cpu2_limit() const { return _has_field_[5]; }
  int32_t cpu2_limit() const { return cpu2_limit_; }
  void set_cpu2_limit(int32_t value) { cpu2_limit_ = value; _has_field_.set(5); }

  bool has_tpu_limit() const { return _has_field_[6]; }
  int32_t tpu_limit() const { return tpu_limit_; }
  void set_tpu_limit(int32_t value) { tpu_limit_ = value; _has_field_.set(6); }

  bool has_gpu_limit() const { return _has_field_[7]; }
  int32_t gpu_limit() const { return gpu_limit_; }
  void set_gpu_limit(int32_t value) { gpu_limit_ = value; _has_field_.set(7); }

  bool has_voltage() const { return _has_field_[8]; }
  int32_t voltage() const { return voltage_; }
  void set_voltage(int32_t value) { voltage_ = value; _has_field_.set(8); }

  bool has_capacity() const { return _has_field_[9]; }
  int32_t capacity() const { return capacity_; }
  void set_capacity(int32_t value) { capacity_ = value; _has_field_.set(9); }

 private:
  int32_t id_{};
  int32_t throttle_{};
  int32_t cpu0_limit_{};
  int32_t cpu1_limit_{};
  int32_t cpu2_limit_{};
  int32_t tpu_limit_{};
  int32_t gpu_limit_{};
  int32_t voltage_{};
  int32_t capacity_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_BCL_EXYNOS_PROTO_CPP_H_
