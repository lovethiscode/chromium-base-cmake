// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/bcl_exynos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbcl_5fexynos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbcl_5fexynos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fbcl_5fexynos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbcl_5fexynos_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class BclIrqTriggerFtraceEvent;
struct BclIrqTriggerFtraceEventDefaultTypeInternal;
extern BclIrqTriggerFtraceEventDefaultTypeInternal _BclIrqTriggerFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::BclIrqTriggerFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::BclIrqTriggerFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class BclIrqTriggerFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.BclIrqTriggerFtraceEvent) */ {
 public:
  inline BclIrqTriggerFtraceEvent() : BclIrqTriggerFtraceEvent(nullptr) {}
  ~BclIrqTriggerFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR BclIrqTriggerFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BclIrqTriggerFtraceEvent(const BclIrqTriggerFtraceEvent& from);
  BclIrqTriggerFtraceEvent(BclIrqTriggerFtraceEvent&& from) noexcept
    : BclIrqTriggerFtraceEvent() {
    *this = ::std::move(from);
  }

  inline BclIrqTriggerFtraceEvent& operator=(const BclIrqTriggerFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BclIrqTriggerFtraceEvent& operator=(BclIrqTriggerFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BclIrqTriggerFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BclIrqTriggerFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const BclIrqTriggerFtraceEvent*>(
               &_BclIrqTriggerFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BclIrqTriggerFtraceEvent& a, BclIrqTriggerFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BclIrqTriggerFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BclIrqTriggerFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BclIrqTriggerFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BclIrqTriggerFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BclIrqTriggerFtraceEvent& from);
  void MergeFrom(const BclIrqTriggerFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BclIrqTriggerFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.BclIrqTriggerFtraceEvent";
  }
  protected:
  explicit BclIrqTriggerFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kThrottleFieldNumber = 2,
    kCpu0LimitFieldNumber = 3,
    kCpu1LimitFieldNumber = 4,
    kCpu2LimitFieldNumber = 5,
    kTpuLimitFieldNumber = 6,
    kGpuLimitFieldNumber = 7,
    kVoltageFieldNumber = 8,
    kCapacityFieldNumber = 9,
  };
  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 throttle = 2;
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  int32_t throttle() const;
  void set_throttle(int32_t value);
  private:
  int32_t _internal_throttle() const;
  void _internal_set_throttle(int32_t value);
  public:

  // optional int32 cpu0_limit = 3;
  bool has_cpu0_limit() const;
  private:
  bool _internal_has_cpu0_limit() const;
  public:
  void clear_cpu0_limit();
  int32_t cpu0_limit() const;
  void set_cpu0_limit(int32_t value);
  private:
  int32_t _internal_cpu0_limit() const;
  void _internal_set_cpu0_limit(int32_t value);
  public:

  // optional int32 cpu1_limit = 4;
  bool has_cpu1_limit() const;
  private:
  bool _internal_has_cpu1_limit() const;
  public:
  void clear_cpu1_limit();
  int32_t cpu1_limit() const;
  void set_cpu1_limit(int32_t value);
  private:
  int32_t _internal_cpu1_limit() const;
  void _internal_set_cpu1_limit(int32_t value);
  public:

  // optional int32 cpu2_limit = 5;
  bool has_cpu2_limit() const;
  private:
  bool _internal_has_cpu2_limit() const;
  public:
  void clear_cpu2_limit();
  int32_t cpu2_limit() const;
  void set_cpu2_limit(int32_t value);
  private:
  int32_t _internal_cpu2_limit() const;
  void _internal_set_cpu2_limit(int32_t value);
  public:

  // optional int32 tpu_limit = 6;
  bool has_tpu_limit() const;
  private:
  bool _internal_has_tpu_limit() const;
  public:
  void clear_tpu_limit();
  int32_t tpu_limit() const;
  void set_tpu_limit(int32_t value);
  private:
  int32_t _internal_tpu_limit() const;
  void _internal_set_tpu_limit(int32_t value);
  public:

  // optional int32 gpu_limit = 7;
  bool has_gpu_limit() const;
  private:
  bool _internal_has_gpu_limit() const;
  public:
  void clear_gpu_limit();
  int32_t gpu_limit() const;
  void set_gpu_limit(int32_t value);
  private:
  int32_t _internal_gpu_limit() const;
  void _internal_set_gpu_limit(int32_t value);
  public:

  // optional int32 voltage = 8;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  int32_t voltage() const;
  void set_voltage(int32_t value);
  private:
  int32_t _internal_voltage() const;
  void _internal_set_voltage(int32_t value);
  public:

  // optional int32 capacity = 9;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  int32_t capacity() const;
  void set_capacity(int32_t value);
  private:
  int32_t _internal_capacity() const;
  void _internal_set_capacity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.BclIrqTriggerFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t id_;
    int32_t throttle_;
    int32_t cpu0_limit_;
    int32_t cpu1_limit_;
    int32_t cpu2_limit_;
    int32_t tpu_limit_;
    int32_t gpu_limit_;
    int32_t voltage_;
    int32_t capacity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbcl_5fexynos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BclIrqTriggerFtraceEvent

// optional int32 id = 1;
inline bool BclIrqTriggerFtraceEvent::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_id() const {
  return _internal_has_id();
}
inline void BclIrqTriggerFtraceEvent::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline int32_t BclIrqTriggerFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.id)
  return _internal_id();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.id)
}

// optional int32 throttle = 2;
inline bool BclIrqTriggerFtraceEvent::_internal_has_throttle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_throttle() const {
  return _internal_has_throttle();
}
inline void BclIrqTriggerFtraceEvent::clear_throttle() {
  _impl_.throttle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_throttle() const {
  return _impl_.throttle_;
}
inline int32_t BclIrqTriggerFtraceEvent::throttle() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.throttle)
  return _internal_throttle();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_throttle(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.throttle_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_throttle(int32_t value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.throttle)
}

// optional int32 cpu0_limit = 3;
inline bool BclIrqTriggerFtraceEvent::_internal_has_cpu0_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_cpu0_limit() const {
  return _internal_has_cpu0_limit();
}
inline void BclIrqTriggerFtraceEvent::clear_cpu0_limit() {
  _impl_.cpu0_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_cpu0_limit() const {
  return _impl_.cpu0_limit_;
}
inline int32_t BclIrqTriggerFtraceEvent::cpu0_limit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.cpu0_limit)
  return _internal_cpu0_limit();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_cpu0_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cpu0_limit_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_cpu0_limit(int32_t value) {
  _internal_set_cpu0_limit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.cpu0_limit)
}

// optional int32 cpu1_limit = 4;
inline bool BclIrqTriggerFtraceEvent::_internal_has_cpu1_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_cpu1_limit() const {
  return _internal_has_cpu1_limit();
}
inline void BclIrqTriggerFtraceEvent::clear_cpu1_limit() {
  _impl_.cpu1_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_cpu1_limit() const {
  return _impl_.cpu1_limit_;
}
inline int32_t BclIrqTriggerFtraceEvent::cpu1_limit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.cpu1_limit)
  return _internal_cpu1_limit();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_cpu1_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cpu1_limit_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_cpu1_limit(int32_t value) {
  _internal_set_cpu1_limit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.cpu1_limit)
}

// optional int32 cpu2_limit = 5;
inline bool BclIrqTriggerFtraceEvent::_internal_has_cpu2_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_cpu2_limit() const {
  return _internal_has_cpu2_limit();
}
inline void BclIrqTriggerFtraceEvent::clear_cpu2_limit() {
  _impl_.cpu2_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_cpu2_limit() const {
  return _impl_.cpu2_limit_;
}
inline int32_t BclIrqTriggerFtraceEvent::cpu2_limit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.cpu2_limit)
  return _internal_cpu2_limit();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_cpu2_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cpu2_limit_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_cpu2_limit(int32_t value) {
  _internal_set_cpu2_limit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.cpu2_limit)
}

// optional int32 tpu_limit = 6;
inline bool BclIrqTriggerFtraceEvent::_internal_has_tpu_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_tpu_limit() const {
  return _internal_has_tpu_limit();
}
inline void BclIrqTriggerFtraceEvent::clear_tpu_limit() {
  _impl_.tpu_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_tpu_limit() const {
  return _impl_.tpu_limit_;
}
inline int32_t BclIrqTriggerFtraceEvent::tpu_limit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.tpu_limit)
  return _internal_tpu_limit();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_tpu_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tpu_limit_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_tpu_limit(int32_t value) {
  _internal_set_tpu_limit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.tpu_limit)
}

// optional int32 gpu_limit = 7;
inline bool BclIrqTriggerFtraceEvent::_internal_has_gpu_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_gpu_limit() const {
  return _internal_has_gpu_limit();
}
inline void BclIrqTriggerFtraceEvent::clear_gpu_limit() {
  _impl_.gpu_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_gpu_limit() const {
  return _impl_.gpu_limit_;
}
inline int32_t BclIrqTriggerFtraceEvent::gpu_limit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.gpu_limit)
  return _internal_gpu_limit();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_gpu_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gpu_limit_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_gpu_limit(int32_t value) {
  _internal_set_gpu_limit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.gpu_limit)
}

// optional int32 voltage = 8;
inline bool BclIrqTriggerFtraceEvent::_internal_has_voltage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_voltage() const {
  return _internal_has_voltage();
}
inline void BclIrqTriggerFtraceEvent::clear_voltage() {
  _impl_.voltage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_voltage() const {
  return _impl_.voltage_;
}
inline int32_t BclIrqTriggerFtraceEvent::voltage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.voltage)
  return _internal_voltage();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_voltage(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.voltage_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_voltage(int32_t value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.voltage)
}

// optional int32 capacity = 9;
inline bool BclIrqTriggerFtraceEvent::_internal_has_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BclIrqTriggerFtraceEvent::has_capacity() const {
  return _internal_has_capacity();
}
inline void BclIrqTriggerFtraceEvent::clear_capacity() {
  _impl_.capacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t BclIrqTriggerFtraceEvent::_internal_capacity() const {
  return _impl_.capacity_;
}
inline int32_t BclIrqTriggerFtraceEvent::capacity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BclIrqTriggerFtraceEvent.capacity)
  return _internal_capacity();
}
inline void BclIrqTriggerFtraceEvent::_internal_set_capacity(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.capacity_ = value;
}
inline void BclIrqTriggerFtraceEvent::set_capacity(int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BclIrqTriggerFtraceEvent.capacity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fbcl_5fexynos_2eproto
