#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/gpu_scheduler.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

DrmSchedProcessJobFtraceEvent::DrmSchedProcessJobFtraceEvent() = default;
DrmSchedProcessJobFtraceEvent::~DrmSchedProcessJobFtraceEvent() = default;
DrmSchedProcessJobFtraceEvent::DrmSchedProcessJobFtraceEvent(const DrmSchedProcessJobFtraceEvent&) = default;
DrmSchedProcessJobFtraceEvent& DrmSchedProcessJobFtraceEvent::operator=(const DrmSchedProcessJobFtraceEvent&) = default;
DrmSchedProcessJobFtraceEvent::DrmSchedProcessJobFtraceEvent(DrmSchedProcessJobFtraceEvent&&) noexcept = default;
DrmSchedProcessJobFtraceEvent& DrmSchedProcessJobFtraceEvent::operator=(DrmSchedProcessJobFtraceEvent&&) = default;

bool DrmSchedProcessJobFtraceEvent::operator==(const DrmSchedProcessJobFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_, other.fence_);
}

bool DrmSchedProcessJobFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* fence */:
        field.get(&fence_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DrmSchedProcessJobFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DrmSchedProcessJobFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DrmSchedProcessJobFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: fence
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, fence_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DrmRunJobFtraceEvent::DrmRunJobFtraceEvent() = default;
DrmRunJobFtraceEvent::~DrmRunJobFtraceEvent() = default;
DrmRunJobFtraceEvent::DrmRunJobFtraceEvent(const DrmRunJobFtraceEvent&) = default;
DrmRunJobFtraceEvent& DrmRunJobFtraceEvent::operator=(const DrmRunJobFtraceEvent&) = default;
DrmRunJobFtraceEvent::DrmRunJobFtraceEvent(DrmRunJobFtraceEvent&&) noexcept = default;
DrmRunJobFtraceEvent& DrmRunJobFtraceEvent::operator=(DrmRunJobFtraceEvent&&) = default;

bool DrmRunJobFtraceEvent::operator==(const DrmRunJobFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(entity_, other.entity_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_, other.fence_)
   && ::protozero::internal::gen_helpers::EqualsField(hw_job_count_, other.hw_job_count_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(job_count_, other.job_count_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool DrmRunJobFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* entity */:
        field.get(&entity_);
        break;
      case 2 /* fence */:
        field.get(&fence_);
        break;
      case 3 /* hw_job_count */:
        field.get(&hw_job_count_);
        break;
      case 4 /* id */:
        field.get(&id_);
        break;
      case 5 /* job_count */:
        field.get(&job_count_);
        break;
      case 6 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DrmRunJobFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DrmRunJobFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DrmRunJobFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: entity
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, entity_, msg);
  }

  // Field 2: fence
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, fence_, msg);
  }

  // Field 3: hw_job_count
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, hw_job_count_, msg);
  }

  // Field 4: id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, id_, msg);
  }

  // Field 5: job_count
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, job_count_, msg);
  }

  // Field 6: name
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


DrmSchedJobFtraceEvent::DrmSchedJobFtraceEvent() = default;
DrmSchedJobFtraceEvent::~DrmSchedJobFtraceEvent() = default;
DrmSchedJobFtraceEvent::DrmSchedJobFtraceEvent(const DrmSchedJobFtraceEvent&) = default;
DrmSchedJobFtraceEvent& DrmSchedJobFtraceEvent::operator=(const DrmSchedJobFtraceEvent&) = default;
DrmSchedJobFtraceEvent::DrmSchedJobFtraceEvent(DrmSchedJobFtraceEvent&&) noexcept = default;
DrmSchedJobFtraceEvent& DrmSchedJobFtraceEvent::operator=(DrmSchedJobFtraceEvent&&) = default;

bool DrmSchedJobFtraceEvent::operator==(const DrmSchedJobFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(entity_, other.entity_)
   && ::protozero::internal::gen_helpers::EqualsField(fence_, other.fence_)
   && ::protozero::internal::gen_helpers::EqualsField(hw_job_count_, other.hw_job_count_)
   && ::protozero::internal::gen_helpers::EqualsField(id_, other.id_)
   && ::protozero::internal::gen_helpers::EqualsField(job_count_, other.job_count_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_);
}

bool DrmSchedJobFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* entity */:
        field.get(&entity_);
        break;
      case 2 /* fence */:
        field.get(&fence_);
        break;
      case 3 /* hw_job_count */:
        field.get(&hw_job_count_);
        break;
      case 4 /* id */:
        field.get(&id_);
        break;
      case 5 /* job_count */:
        field.get(&job_count_);
        break;
      case 6 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string DrmSchedJobFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> DrmSchedJobFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void DrmSchedJobFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: entity
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, entity_, msg);
  }

  // Field 2: fence
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, fence_, msg);
  }

  // Field 3: hw_job_count
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, hw_job_count_, msg);
  }

  // Field 4: id
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, id_, msg);
  }

  // Field 5: job_count
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, job_count_, msg);
  }

  // Field 6: name
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeString(6, name_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
