// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/vmscan.proto

#include "protos/perfetto/trace/ftrace/vmscan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_)*/0
  , /*decltype(_impl_.may_writepage_)*/0
  , /*decltype(_impl_.gfp_flags_)*/0u} {}
struct MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanDirectReclaimBeginFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal _MmVmscanDirectReclaimBeginFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nr_reclaimed_)*/uint64_t{0u}} {}
struct MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanDirectReclaimEndFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal _MmVmscanDirectReclaimEndFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/0
  , /*decltype(_impl_.order_)*/0
  , /*decltype(_impl_.zid_)*/0} {}
struct MmVmscanKswapdWakeFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanKswapdWakeFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanKswapdWakeFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanKswapdWakeFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanKswapdWakeFtraceEventDefaultTypeInternal _MmVmscanKswapdWakeFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/0} {}
struct MmVmscanKswapdSleepFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanKswapdSleepFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanKswapdSleepFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanKswapdSleepFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanKswapdSleepFtraceEventDefaultTypeInternal _MmVmscanKswapdSleepFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cache_items_)*/uint64_t{0u}
  , /*decltype(_impl_.delta_)*/uint64_t{0u}
  , /*decltype(_impl_.lru_pgs_)*/uint64_t{0u}
  , /*decltype(_impl_.nr_objects_to_shrink_)*/int64_t{0}
  , /*decltype(_impl_.pgs_scanned_)*/uint64_t{0u}
  , /*decltype(_impl_.gfp_flags_)*/0u
  , /*decltype(_impl_.nid_)*/0
  , /*decltype(_impl_.shr_)*/uint64_t{0u}
  , /*decltype(_impl_.shrink_)*/uint64_t{0u}
  , /*decltype(_impl_.total_scan_)*/uint64_t{0u}
  , /*decltype(_impl_.priority_)*/0} {}
struct MmShrinkSlabStartFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmShrinkSlabStartFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmShrinkSlabStartFtraceEventDefaultTypeInternal() {}
  union {
    MmShrinkSlabStartFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmShrinkSlabStartFtraceEventDefaultTypeInternal _MmShrinkSlabStartFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_scan_)*/int64_t{0}
  , /*decltype(_impl_.shr_)*/uint64_t{0u}
  , /*decltype(_impl_.shrink_)*/uint64_t{0u}
  , /*decltype(_impl_.retval_)*/0
  , /*decltype(_impl_.nid_)*/0
  , /*decltype(_impl_.total_scan_)*/int64_t{0}
  , /*decltype(_impl_.unused_scan_)*/int64_t{0}} {}
struct MmShrinkSlabEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmShrinkSlabEndFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmShrinkSlabEndFtraceEventDefaultTypeInternal() {}
  union {
    MmShrinkSlabEndFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmShrinkSlabEndFtraceEventDefaultTypeInternal _MmShrinkSlabEndFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class MmVmscanDirectReclaimBeginFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanDirectReclaimBeginFtraceEvent>()._impl_._has_bits_);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_writepage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gfp_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
}
MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(const MmVmscanDirectReclaimBeginFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MmVmscanDirectReclaimBeginFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){}
    , decltype(_impl_.may_writepage_){}
    , decltype(_impl_.gfp_flags_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.order_, &from._impl_.order_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gfp_flags_) -
    reinterpret_cast<char*>(&_impl_.order_)) + sizeof(_impl_.gfp_flags_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
}

inline void MmVmscanDirectReclaimBeginFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){0}
    , decltype(_impl_.may_writepage_){0}
    , decltype(_impl_.gfp_flags_){0u}
  };
}

MmVmscanDirectReclaimBeginFtraceEvent::~MmVmscanDirectReclaimBeginFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanDirectReclaimBeginFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanDirectReclaimBeginFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanDirectReclaimBeginFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gfp_flags_) -
        reinterpret_cast<char*>(&_impl_.order_)) + sizeof(_impl_.gfp_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MmVmscanDirectReclaimBeginFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 may_writepage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_may_writepage(&has_bits);
          _impl_.may_writepage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gfp_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gfp_flags(&has_bits);
          _impl_.gfp_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MmVmscanDirectReclaimBeginFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_order(), target);
  }

  // optional int32 may_writepage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_may_writepage(), target);
  }

  // optional uint32 gfp_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gfp_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  return target;
}

size_t MmVmscanDirectReclaimBeginFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order());
    }

    // optional int32 may_writepage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_may_writepage());
    }

    // optional uint32 gfp_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gfp_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanDirectReclaimBeginFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MmVmscanDirectReclaimBeginFtraceEvent*>(
      &from));
}

void MmVmscanDirectReclaimBeginFtraceEvent::MergeFrom(const MmVmscanDirectReclaimBeginFtraceEvent& from) {
  MmVmscanDirectReclaimBeginFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.may_writepage_ = from._impl_.may_writepage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gfp_flags_ = from._impl_.gfp_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MmVmscanDirectReclaimBeginFtraceEvent::CopyFrom(const MmVmscanDirectReclaimBeginFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanDirectReclaimBeginFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanDirectReclaimBeginFtraceEvent::InternalSwap(MmVmscanDirectReclaimBeginFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmVmscanDirectReclaimBeginFtraceEvent, _impl_.gfp_flags_)
      + sizeof(MmVmscanDirectReclaimBeginFtraceEvent::_impl_.gfp_flags_)
      - PROTOBUF_FIELD_OFFSET(MmVmscanDirectReclaimBeginFtraceEvent, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

std::string MmVmscanDirectReclaimBeginFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent";
}


// ===================================================================

class MmVmscanDirectReclaimEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanDirectReclaimEndFtraceEvent>()._impl_._has_bits_);
  static void set_has_nr_reclaimed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
}
MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(const MmVmscanDirectReclaimEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MmVmscanDirectReclaimEndFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nr_reclaimed_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.nr_reclaimed_ = from._impl_.nr_reclaimed_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
}

inline void MmVmscanDirectReclaimEndFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nr_reclaimed_){uint64_t{0u}}
  };
}

MmVmscanDirectReclaimEndFtraceEvent::~MmVmscanDirectReclaimEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanDirectReclaimEndFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanDirectReclaimEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanDirectReclaimEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nr_reclaimed_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MmVmscanDirectReclaimEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 nr_reclaimed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_nr_reclaimed(&has_bits);
          _impl_.nr_reclaimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MmVmscanDirectReclaimEndFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 nr_reclaimed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nr_reclaimed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  return target;
}

size_t MmVmscanDirectReclaimEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 nr_reclaimed = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nr_reclaimed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanDirectReclaimEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MmVmscanDirectReclaimEndFtraceEvent*>(
      &from));
}

void MmVmscanDirectReclaimEndFtraceEvent::MergeFrom(const MmVmscanDirectReclaimEndFtraceEvent& from) {
  MmVmscanDirectReclaimEndFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nr_reclaimed()) {
    _this->_internal_set_nr_reclaimed(from._internal_nr_reclaimed());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MmVmscanDirectReclaimEndFtraceEvent::CopyFrom(const MmVmscanDirectReclaimEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanDirectReclaimEndFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanDirectReclaimEndFtraceEvent::InternalSwap(MmVmscanDirectReclaimEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.nr_reclaimed_, other->_impl_.nr_reclaimed_);
}

std::string MmVmscanDirectReclaimEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent";
}


// ===================================================================

class MmVmscanKswapdWakeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanKswapdWakeFtraceEvent>()._impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
}
MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(const MmVmscanKswapdWakeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MmVmscanKswapdWakeFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_){}
    , decltype(_impl_.order_){}
    , decltype(_impl_.zid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.nid_, &from._impl_.nid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.zid_) -
    reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.zid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
}

inline void MmVmscanKswapdWakeFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_){0}
    , decltype(_impl_.order_){0}
    , decltype(_impl_.zid_){0}
  };
}

MmVmscanKswapdWakeFtraceEvent::~MmVmscanKswapdWakeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanKswapdWakeFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanKswapdWakeFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanKswapdWakeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.nid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.zid_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.zid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MmVmscanKswapdWakeFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 zid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_zid(&has_bits);
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MmVmscanKswapdWakeFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nid(), target);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_order(), target);
  }

  // optional int32 zid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_zid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  return target;
}

size_t MmVmscanKswapdWakeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nid());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order());
    }

    // optional int32 zid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanKswapdWakeFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MmVmscanKswapdWakeFtraceEvent*>(
      &from));
}

void MmVmscanKswapdWakeFtraceEvent::MergeFrom(const MmVmscanKswapdWakeFtraceEvent& from) {
  MmVmscanKswapdWakeFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.zid_ = from._impl_.zid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MmVmscanKswapdWakeFtraceEvent::CopyFrom(const MmVmscanKswapdWakeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanKswapdWakeFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanKswapdWakeFtraceEvent::InternalSwap(MmVmscanKswapdWakeFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmVmscanKswapdWakeFtraceEvent, _impl_.zid_)
      + sizeof(MmVmscanKswapdWakeFtraceEvent::_impl_.zid_)
      - PROTOBUF_FIELD_OFFSET(MmVmscanKswapdWakeFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

std::string MmVmscanKswapdWakeFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanKswapdWakeFtraceEvent";
}


// ===================================================================

class MmVmscanKswapdSleepFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanKswapdSleepFtraceEvent>()._impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
}
MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(const MmVmscanKswapdSleepFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MmVmscanKswapdSleepFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.nid_ = from._impl_.nid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
}

inline void MmVmscanKswapdSleepFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_){0}
  };
}

MmVmscanKswapdSleepFtraceEvent::~MmVmscanKswapdSleepFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanKswapdSleepFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanKswapdSleepFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanKswapdSleepFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MmVmscanKswapdSleepFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MmVmscanKswapdSleepFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  return target;
}

size_t MmVmscanKswapdSleepFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmVmscanKswapdSleepFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MmVmscanKswapdSleepFtraceEvent*>(
      &from));
}

void MmVmscanKswapdSleepFtraceEvent::MergeFrom(const MmVmscanKswapdSleepFtraceEvent& from) {
  MmVmscanKswapdSleepFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nid()) {
    _this->_internal_set_nid(from._internal_nid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MmVmscanKswapdSleepFtraceEvent::CopyFrom(const MmVmscanKswapdSleepFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanKswapdSleepFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanKswapdSleepFtraceEvent::InternalSwap(MmVmscanKswapdSleepFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.nid_, other->_impl_.nid_);
}

std::string MmVmscanKswapdSleepFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmVmscanKswapdSleepFtraceEvent";
}


// ===================================================================

class MmShrinkSlabStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmShrinkSlabStartFtraceEvent>()._impl_._has_bits_);
  static void set_has_cache_items(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gfp_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lru_pgs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_objects_to_shrink(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pgs_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_shrink(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmShrinkSlabStartFtraceEvent)
}
MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(const MmShrinkSlabStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MmShrinkSlabStartFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cache_items_){}
    , decltype(_impl_.delta_){}
    , decltype(_impl_.lru_pgs_){}
    , decltype(_impl_.nr_objects_to_shrink_){}
    , decltype(_impl_.pgs_scanned_){}
    , decltype(_impl_.gfp_flags_){}
    , decltype(_impl_.nid_){}
    , decltype(_impl_.shr_){}
    , decltype(_impl_.shrink_){}
    , decltype(_impl_.total_scan_){}
    , decltype(_impl_.priority_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.cache_items_, &from._impl_.cache_items_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.cache_items_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmShrinkSlabStartFtraceEvent)
}

inline void MmShrinkSlabStartFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cache_items_){uint64_t{0u}}
    , decltype(_impl_.delta_){uint64_t{0u}}
    , decltype(_impl_.lru_pgs_){uint64_t{0u}}
    , decltype(_impl_.nr_objects_to_shrink_){int64_t{0}}
    , decltype(_impl_.pgs_scanned_){uint64_t{0u}}
    , decltype(_impl_.gfp_flags_){0u}
    , decltype(_impl_.nid_){0}
    , decltype(_impl_.shr_){uint64_t{0u}}
    , decltype(_impl_.shrink_){uint64_t{0u}}
    , decltype(_impl_.total_scan_){uint64_t{0u}}
    , decltype(_impl_.priority_){0}
  };
}

MmShrinkSlabStartFtraceEvent::~MmShrinkSlabStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmShrinkSlabStartFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmShrinkSlabStartFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmShrinkSlabStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cache_items_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shr_) -
        reinterpret_cast<char*>(&_impl_.cache_items_)) + sizeof(_impl_.shr_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.shrink_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.priority_) -
        reinterpret_cast<char*>(&_impl_.shrink_)) + sizeof(_impl_.priority_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MmShrinkSlabStartFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 cache_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cache_items(&has_bits);
          _impl_.cache_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gfp_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gfp_flags(&has_bits);
          _impl_.gfp_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lru_pgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lru_pgs(&has_bits);
          _impl_.lru_pgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 nr_objects_to_shrink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_nr_objects_to_shrink(&has_bits);
          _impl_.nr_objects_to_shrink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 pgs_scanned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pgs_scanned(&has_bits);
          _impl_.pgs_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_shr(&has_bits);
          _impl_.shr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shrink = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_shrink(&has_bits);
          _impl_.shrink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_scan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_total_scan(&has_bits);
          _impl_.total_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MmShrinkSlabStartFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 cache_items = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cache_items(), target);
  }

  // optional uint64 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_delta(), target);
  }

  // optional uint32 gfp_flags = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gfp_flags(), target);
  }

  // optional uint64 lru_pgs = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lru_pgs(), target);
  }

  // optional int64 nr_objects_to_shrink = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_nr_objects_to_shrink(), target);
  }

  // optional uint64 pgs_scanned = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_pgs_scanned(), target);
  }

  // optional uint64 shr = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_shr(), target);
  }

  // optional uint64 shrink = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_shrink(), target);
  }

  // optional uint64 total_scan = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_total_scan(), target);
  }

  // optional int32 nid = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_nid(), target);
  }

  // optional int32 priority = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  return target;
}

size_t MmShrinkSlabStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 cache_items = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cache_items());
    }

    // optional uint64 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_delta());
    }

    // optional uint64 lru_pgs = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lru_pgs());
    }

    // optional int64 nr_objects_to_shrink = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_nr_objects_to_shrink());
    }

    // optional uint64 pgs_scanned = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pgs_scanned());
    }

    // optional uint32 gfp_flags = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gfp_flags());
    }

    // optional int32 nid = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nid());
    }

    // optional uint64 shr = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shr());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 shrink = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shrink());
    }

    // optional uint64 total_scan = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_scan());
    }

    // optional int32 priority = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmShrinkSlabStartFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MmShrinkSlabStartFtraceEvent*>(
      &from));
}

void MmShrinkSlabStartFtraceEvent::MergeFrom(const MmShrinkSlabStartFtraceEvent& from) {
  MmShrinkSlabStartFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cache_items_ = from._impl_.cache_items_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lru_pgs_ = from._impl_.lru_pgs_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nr_objects_to_shrink_ = from._impl_.nr_objects_to_shrink_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pgs_scanned_ = from._impl_.pgs_scanned_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gfp_flags_ = from._impl_.gfp_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.shr_ = from._impl_.shr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.shrink_ = from._impl_.shrink_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.total_scan_ = from._impl_.total_scan_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MmShrinkSlabStartFtraceEvent::CopyFrom(const MmShrinkSlabStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmShrinkSlabStartFtraceEvent::IsInitialized() const {
  return true;
}

void MmShrinkSlabStartFtraceEvent::InternalSwap(MmShrinkSlabStartFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmShrinkSlabStartFtraceEvent, _impl_.priority_)
      + sizeof(MmShrinkSlabStartFtraceEvent::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(MmShrinkSlabStartFtraceEvent, _impl_.cache_items_)>(
          reinterpret_cast<char*>(&_impl_.cache_items_),
          reinterpret_cast<char*>(&other->_impl_.cache_items_));
}

std::string MmShrinkSlabStartFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmShrinkSlabStartFtraceEvent";
}


// ===================================================================

class MmShrinkSlabEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmShrinkSlabEndFtraceEvent>()._impl_._has_bits_);
  static void set_has_new_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_retval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shrink(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unused_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmShrinkSlabEndFtraceEvent)
}
MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(const MmShrinkSlabEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MmShrinkSlabEndFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_scan_){}
    , decltype(_impl_.shr_){}
    , decltype(_impl_.shrink_){}
    , decltype(_impl_.retval_){}
    , decltype(_impl_.nid_){}
    , decltype(_impl_.total_scan_){}
    , decltype(_impl_.unused_scan_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.new_scan_, &from._impl_.new_scan_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unused_scan_) -
    reinterpret_cast<char*>(&_impl_.new_scan_)) + sizeof(_impl_.unused_scan_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmShrinkSlabEndFtraceEvent)
}

inline void MmShrinkSlabEndFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_scan_){int64_t{0}}
    , decltype(_impl_.shr_){uint64_t{0u}}
    , decltype(_impl_.shrink_){uint64_t{0u}}
    , decltype(_impl_.retval_){0}
    , decltype(_impl_.nid_){0}
    , decltype(_impl_.total_scan_){int64_t{0}}
    , decltype(_impl_.unused_scan_){int64_t{0}}
  };
}

MmShrinkSlabEndFtraceEvent::~MmShrinkSlabEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmShrinkSlabEndFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmShrinkSlabEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmShrinkSlabEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.new_scan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unused_scan_) -
        reinterpret_cast<char*>(&_impl_.new_scan_)) + sizeof(_impl_.unused_scan_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MmShrinkSlabEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 new_scan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_new_scan(&has_bits);
          _impl_.new_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 retval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_retval(&has_bits);
          _impl_.retval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shr(&has_bits);
          _impl_.shr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shrink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shrink(&has_bits);
          _impl_.shrink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 total_scan = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_total_scan(&has_bits);
          _impl_.total_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 unused_scan = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_unused_scan(&has_bits);
          _impl_.unused_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MmShrinkSlabEndFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 new_scan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_new_scan(), target);
  }

  // optional int32 retval = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_retval(), target);
  }

  // optional uint64 shr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_shr(), target);
  }

  // optional uint64 shrink = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_shrink(), target);
  }

  // optional int64 total_scan = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_scan(), target);
  }

  // optional int64 unused_scan = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_unused_scan(), target);
  }

  // optional int32 nid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  return target;
}

size_t MmShrinkSlabEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 new_scan = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_new_scan());
    }

    // optional uint64 shr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shr());
    }

    // optional uint64 shrink = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shrink());
    }

    // optional int32 retval = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retval());
    }

    // optional int32 nid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nid());
    }

    // optional int64 total_scan = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_scan());
    }

    // optional int64 unused_scan = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unused_scan());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MmShrinkSlabEndFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MmShrinkSlabEndFtraceEvent*>(
      &from));
}

void MmShrinkSlabEndFtraceEvent::MergeFrom(const MmShrinkSlabEndFtraceEvent& from) {
  MmShrinkSlabEndFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.new_scan_ = from._impl_.new_scan_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shr_ = from._impl_.shr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.shrink_ = from._impl_.shrink_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.retval_ = from._impl_.retval_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.total_scan_ = from._impl_.total_scan_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.unused_scan_ = from._impl_.unused_scan_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MmShrinkSlabEndFtraceEvent::CopyFrom(const MmShrinkSlabEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmShrinkSlabEndFtraceEvent::IsInitialized() const {
  return true;
}

void MmShrinkSlabEndFtraceEvent::InternalSwap(MmShrinkSlabEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmShrinkSlabEndFtraceEvent, _impl_.unused_scan_)
      + sizeof(MmShrinkSlabEndFtraceEvent::_impl_.unused_scan_)
      - PROTOBUF_FIELD_OFFSET(MmShrinkSlabEndFtraceEvent, _impl_.new_scan_)>(
          reinterpret_cast<char*>(&_impl_.new_scan_),
          reinterpret_cast<char*>(&other->_impl_.new_scan_));
}

std::string MmShrinkSlabEndFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MmShrinkSlabEndFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmShrinkSlabStartFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmShrinkSlabStartFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmShrinkSlabStartFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmShrinkSlabEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmShrinkSlabEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmShrinkSlabEndFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
