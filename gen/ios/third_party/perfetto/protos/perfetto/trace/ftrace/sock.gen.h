// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SOCK_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SOCK_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class InetSockSetStateFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT InetSockSetStateFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kDaddrFieldNumber = 1,
    kDportFieldNumber = 2,
    kFamilyFieldNumber = 3,
    kNewstateFieldNumber = 4,
    kOldstateFieldNumber = 5,
    kProtocolFieldNumber = 6,
    kSaddrFieldNumber = 7,
    kSkaddrFieldNumber = 8,
    kSportFieldNumber = 9,
  };

  InetSockSetStateFtraceEvent();
  ~InetSockSetStateFtraceEvent() override;
  InetSockSetStateFtraceEvent(InetSockSetStateFtraceEvent&&) noexcept;
  InetSockSetStateFtraceEvent& operator=(InetSockSetStateFtraceEvent&&);
  InetSockSetStateFtraceEvent(const InetSockSetStateFtraceEvent&);
  InetSockSetStateFtraceEvent& operator=(const InetSockSetStateFtraceEvent&);
  bool operator==(const InetSockSetStateFtraceEvent&) const;
  bool operator!=(const InetSockSetStateFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_daddr() const { return _has_field_[1]; }
  uint32_t daddr() const { return daddr_; }
  void set_daddr(uint32_t value) { daddr_ = value; _has_field_.set(1); }

  bool has_dport() const { return _has_field_[2]; }
  uint32_t dport() const { return dport_; }
  void set_dport(uint32_t value) { dport_ = value; _has_field_.set(2); }

  bool has_family() const { return _has_field_[3]; }
  uint32_t family() const { return family_; }
  void set_family(uint32_t value) { family_ = value; _has_field_.set(3); }

  bool has_newstate() const { return _has_field_[4]; }
  int32_t newstate() const { return newstate_; }
  void set_newstate(int32_t value) { newstate_ = value; _has_field_.set(4); }

  bool has_oldstate() const { return _has_field_[5]; }
  int32_t oldstate() const { return oldstate_; }
  void set_oldstate(int32_t value) { oldstate_ = value; _has_field_.set(5); }

  bool has_protocol() const { return _has_field_[6]; }
  uint32_t protocol() const { return protocol_; }
  void set_protocol(uint32_t value) { protocol_ = value; _has_field_.set(6); }

  bool has_saddr() const { return _has_field_[7]; }
  uint32_t saddr() const { return saddr_; }
  void set_saddr(uint32_t value) { saddr_ = value; _has_field_.set(7); }

  bool has_skaddr() const { return _has_field_[8]; }
  uint64_t skaddr() const { return skaddr_; }
  void set_skaddr(uint64_t value) { skaddr_ = value; _has_field_.set(8); }

  bool has_sport() const { return _has_field_[9]; }
  uint32_t sport() const { return sport_; }
  void set_sport(uint32_t value) { sport_ = value; _has_field_.set(9); }

 private:
  uint32_t daddr_{};
  uint32_t dport_{};
  uint32_t family_{};
  int32_t newstate_{};
  int32_t oldstate_{};
  uint32_t protocol_{};
  uint32_t saddr_{};
  uint64_t skaddr_{};
  uint32_t sport_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<10> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SOCK_PROTO_CPP_H_
