// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/mali.proto

#include "protos/perfetto/trace/ftrace/mali.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/0
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0} {}
struct MaliTracingMarkWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliTracingMarkWriteFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliTracingMarkWriteFtraceEventDefaultTypeInternal() {}
  union {
    MaliTracingMarkWriteFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliTracingMarkWriteFtraceEventDefaultTypeInternal _MaliTracingMarkWriteFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val2_)*/uint64_t{0u}
  , /*decltype(_impl_.kctx_tgid_)*/0} {}
struct MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSSETFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSSETFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val2_)*/uint64_t{0u}
  , /*decltype(_impl_.kctx_tgid_)*/0} {}
struct MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSWAITSTARTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSWAITSTARTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val2_)*/uint64_t{0u}
  , /*decltype(_impl_.kctx_tgid_)*/0} {}
struct MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSWAITENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSWAITENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/uint64_t{0u}
  , /*decltype(_impl_.info_val2_)*/uint64_t{0u}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.id_)*/0u} {}
struct MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCESIGNALFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCESIGNALFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/uint64_t{0u}
  , /*decltype(_impl_.info_val2_)*/uint64_t{0u}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.id_)*/0u} {}
struct MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCEWAITSTARTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCEWAITSTARTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/uint64_t{0u}
  , /*decltype(_impl_.info_val2_)*/uint64_t{0u}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.id_)*/0u} {}
struct MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCEWAITENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCEWAITENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliCSFINTERRUPTSTARTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal _MaliMaliCSFINTERRUPTSTARTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliCSFINTERRUPTENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal _MaliMaliCSFINTERRUPTENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLMCUONRECHECKFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLMCUONRECHECKFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLMCUONRECHECKFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLMCUONRECHECKFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLSHADERSPENDONFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSPENDONFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLSHADERSPENDONFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLSHADERSPENDONFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEventDefaultTypeInternal _MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUINSLEEPFtraceEvent::MaliMaliPMMCUINSLEEPFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUINSLEEPFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUINSLEEPFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUINSLEEPFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUINSLEEPFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUINSLEEPFtraceEventDefaultTypeInternal _MaliMaliPMMCUINSLEEPFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUOFFFtraceEvent::MaliMaliPMMCUOFFFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUOFFFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUOFFFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUOFFFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUOFFFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUOFFFtraceEventDefaultTypeInternal _MaliMaliPMMCUOFFFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONFtraceEvent::MaliMaliPMMCUONFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONFtraceEventDefaultTypeInternal _MaliMaliPMMCUONFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEventDefaultTypeInternal _MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONGLBREINITPENDFtraceEvent::MaliMaliPMMCUONGLBREINITPENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONGLBREINITPENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONGLBREINITPENDFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONGLBREINITPENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONGLBREINITPENDFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONGLBREINITPENDFtraceEventDefaultTypeInternal _MaliMaliPMMCUONGLBREINITPENDFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONHALTFtraceEvent::MaliMaliPMMCUONHALTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONHALTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONHALTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONHALTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONHALTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONHALTFtraceEventDefaultTypeInternal _MaliMaliPMMCUONHALTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONHWCNTDISABLEFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONHWCNTDISABLEFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONHWCNTDISABLEFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONHWCNTDISABLEFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONHWCNTDISABLEFtraceEventDefaultTypeInternal _MaliMaliPMMCUONHWCNTDISABLEFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONHWCNTENABLEFtraceEvent::MaliMaliPMMCUONHWCNTENABLEFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONHWCNTENABLEFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONHWCNTENABLEFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONHWCNTENABLEFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONHWCNTENABLEFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONHWCNTENABLEFtraceEventDefaultTypeInternal _MaliMaliPMMCUONHWCNTENABLEFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONPENDHALTFtraceEvent::MaliMaliPMMCUONPENDHALTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONPENDHALTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONPENDHALTFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONPENDHALTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONPENDHALTFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONPENDHALTFtraceEventDefaultTypeInternal _MaliMaliPMMCUONPENDHALTFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONPENDSLEEPFtraceEvent::MaliMaliPMMCUONPENDSLEEPFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONPENDSLEEPFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONPENDSLEEPFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONPENDSLEEPFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONPENDSLEEPFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONPENDSLEEPFtraceEventDefaultTypeInternal _MaliMaliPMMCUONPENDSLEEPFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUONSLEEPINITIATEFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUONSLEEPINITIATEFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUONSLEEPINITIATEFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUONSLEEPINITIATEFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUONSLEEPINITIATEFtraceEventDefaultTypeInternal _MaliMaliPMMCUONSLEEPINITIATEFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUPENDOFFFtraceEvent::MaliMaliPMMCUPENDOFFFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUPENDOFFFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUPENDOFFFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUPENDOFFFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUPENDOFFFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUPENDOFFFtraceEventDefaultTypeInternal _MaliMaliPMMCUPENDOFFFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUPENDONRELOADFtraceEvent::MaliMaliPMMCUPENDONRELOADFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUPENDONRELOADFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUPENDONRELOADFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUPENDONRELOADFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUPENDONRELOADFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUPENDONRELOADFtraceEventDefaultTypeInternal _MaliMaliPMMCUPENDONRELOADFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCUPOWERDOWNFtraceEvent::MaliMaliPMMCUPOWERDOWNFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCUPOWERDOWNFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCUPOWERDOWNFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCUPOWERDOWNFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCUPOWERDOWNFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCUPOWERDOWNFtraceEventDefaultTypeInternal _MaliMaliPMMCUPOWERDOWNFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR MaliMaliPMMCURESETWAITFtraceEvent::MaliMaliPMMCURESETWAITFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/0
  , /*decltype(_impl_.kctx_id_)*/0u
  , /*decltype(_impl_.info_val_)*/uint64_t{0u}} {}
struct MaliMaliPMMCURESETWAITFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliPMMCURESETWAITFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliPMMCURESETWAITFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliPMMCURESETWAITFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliPMMCURESETWAITFtraceEventDefaultTypeInternal _MaliMaliPMMCURESETWAITFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class MaliTracingMarkWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliTracingMarkWriteFtraceEvent>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
}
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(const MaliTracingMarkWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliTracingMarkWriteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
}

inline void MaliTracingMarkWriteFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.pid_){0}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MaliTracingMarkWriteFtraceEvent::~MaliTracingMarkWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliTracingMarkWriteFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void MaliTracingMarkWriteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliTracingMarkWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliTracingMarkWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliTracingMarkWriteFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  return target;
}

size_t MaliTracingMarkWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliTracingMarkWriteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliTracingMarkWriteFtraceEvent*>(
      &from));
}

void MaliTracingMarkWriteFtraceEvent::MergeFrom(const MaliTracingMarkWriteFtraceEvent& from) {
  MaliTracingMarkWriteFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliTracingMarkWriteFtraceEvent::CopyFrom(const MaliTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliTracingMarkWriteFtraceEvent::IsInitialized() const {
  return true;
}

void MaliTracingMarkWriteFtraceEvent::InternalSwap(MaliTracingMarkWriteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliTracingMarkWriteFtraceEvent, _impl_.value_)
      + sizeof(MaliTracingMarkWriteFtraceEvent::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(MaliTracingMarkWriteFtraceEvent, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

std::string MaliTracingMarkWriteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliTracingMarkWriteFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUCQSSETFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSSETFtraceEvent>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
}
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(const MaliMaliKCPUCQSSETFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliKCPUCQSSETFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val2_){}
    , decltype(_impl_.kctx_tgid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.info_val1_, &from._impl_.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
    reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
}

inline void MaliMaliKCPUCQSSETFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val2_){uint64_t{0u}}
    , decltype(_impl_.kctx_tgid_){0}
  };
}

MaliMaliKCPUCQSSETFtraceEvent::~MaliMaliKCPUCQSSETFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSSETFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSSETFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUCQSSETFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUCQSSETFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUCQSSETFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  return target;
}

size_t MaliMaliKCPUCQSSETFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUCQSSETFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUCQSSETFtraceEvent*>(
      &from));
}

void MaliMaliKCPUCQSSETFtraceEvent::MergeFrom(const MaliMaliKCPUCQSSETFtraceEvent& from) {
  MaliMaliKCPUCQSSETFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUCQSSETFtraceEvent::CopyFrom(const MaliMaliKCPUCQSSETFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSSETFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSSETFtraceEvent::InternalSwap(MaliMaliKCPUCQSSETFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSSETFtraceEvent, _impl_.kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSSETFtraceEvent::_impl_.kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSSETFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

std::string MaliMaliKCPUCQSSETFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUCQSWAITSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSWAITSTARTFtraceEvent>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
}
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliKCPUCQSWAITSTARTFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val2_){}
    , decltype(_impl_.kctx_tgid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.info_val1_, &from._impl_.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
    reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
}

inline void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val2_){uint64_t{0u}}
    , decltype(_impl_.kctx_tgid_){0}
  };
}

MaliMaliKCPUCQSWAITSTARTFtraceEvent::~MaliMaliKCPUCQSWAITSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUCQSWAITSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUCQSWAITSTARTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  return target;
}

size_t MaliMaliKCPUCQSWAITSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUCQSWAITSTARTFtraceEvent*>(
      &from));
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::MergeFrom(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from) {
  MaliMaliKCPUCQSWAITSTARTFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::CopyFrom(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::InternalSwap(MaliMaliKCPUCQSWAITSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSWAITSTARTFtraceEvent::_impl_.kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

std::string MaliMaliKCPUCQSWAITSTARTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUCQSWAITENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSWAITENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
}
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(const MaliMaliKCPUCQSWAITENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliKCPUCQSWAITENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val2_){}
    , decltype(_impl_.kctx_tgid_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.info_val1_, &from._impl_.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
    reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
}

inline void MaliMaliKCPUCQSWAITENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val2_){uint64_t{0u}}
    , decltype(_impl_.kctx_tgid_){0}
  };
}

MaliMaliKCPUCQSWAITENDFtraceEvent::~MaliMaliKCPUCQSWAITENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSWAITENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUCQSWAITENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUCQSWAITENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  return target;
}

size_t MaliMaliKCPUCQSWAITENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUCQSWAITENDFtraceEvent*>(
      &from));
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::MergeFrom(const MaliMaliKCPUCQSWAITENDFtraceEvent& from) {
  MaliMaliKCPUCQSWAITENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::CopyFrom(const MaliMaliKCPUCQSWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSWAITENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::InternalSwap(MaliMaliKCPUCQSWAITENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSWAITENDFtraceEvent::_impl_.kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

std::string MaliMaliKCPUCQSWAITENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUFENCESIGNALFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCESIGNALFtraceEvent>()._impl_._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
}
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(const MaliMaliKCPUFENCESIGNALFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliKCPUFENCESIGNALFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){}
    , decltype(_impl_.info_val2_){}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.info_val1_, &from._impl_.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
}

inline void MaliMaliKCPUFENCESIGNALFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){uint64_t{0u}}
    , decltype(_impl_.info_val2_){uint64_t{0u}}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.id_){0u}
  };
}

MaliMaliKCPUFENCESIGNALFtraceEvent::~MaliMaliKCPUFENCESIGNALFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCESIGNALFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUFENCESIGNALFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUFENCESIGNALFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  return target;
}

size_t MaliMaliKCPUFENCESIGNALFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUFENCESIGNALFtraceEvent*>(
      &from));
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::MergeFrom(const MaliMaliKCPUFENCESIGNALFtraceEvent& from) {
  MaliMaliKCPUFENCESIGNALFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::CopyFrom(const MaliMaliKCPUFENCESIGNALFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCESIGNALFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::InternalSwap(MaliMaliKCPUFENCESIGNALFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.id_)
      + sizeof(MaliMaliKCPUFENCESIGNALFtraceEvent::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

std::string MaliMaliKCPUFENCESIGNALFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCEWAITSTARTFtraceEvent>()._impl_._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
}
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliKCPUFENCEWAITSTARTFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){}
    , decltype(_impl_.info_val2_){}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.info_val1_, &from._impl_.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
}

inline void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){uint64_t{0u}}
    , decltype(_impl_.info_val2_){uint64_t{0u}}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.id_){0u}
  };
}

MaliMaliKCPUFENCEWAITSTARTFtraceEvent::~MaliMaliKCPUFENCEWAITSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  return target;
}

size_t MaliMaliKCPUFENCEWAITSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUFENCEWAITSTARTFtraceEvent*>(
      &from));
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MergeFrom(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from) {
  MaliMaliKCPUFENCEWAITSTARTFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::CopyFrom(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::InternalSwap(MaliMaliKCPUFENCEWAITSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.id_)
      + sizeof(MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

std::string MaliMaliKCPUFENCEWAITSTARTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent";
}


// ===================================================================

class MaliMaliKCPUFENCEWAITENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCEWAITENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
}
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliKCPUFENCEWAITENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){}
    , decltype(_impl_.info_val2_){}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.info_val1_, &from._impl_.info_val1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
}

inline void MaliMaliKCPUFENCEWAITENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_){uint64_t{0u}}
    , decltype(_impl_.info_val2_){uint64_t{0u}}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.id_){0u}
  };
}

MaliMaliKCPUFENCEWAITENDFtraceEvent::~MaliMaliKCPUFENCEWAITENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCEWAITENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliKCPUFENCEWAITENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliKCPUFENCEWAITENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  return target;
}

size_t MaliMaliKCPUFENCEWAITENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliKCPUFENCEWAITENDFtraceEvent*>(
      &from));
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::MergeFrom(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from) {
  MaliMaliKCPUFENCEWAITENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::CopyFrom(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::InternalSwap(MaliMaliKCPUFENCEWAITENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.id_)
      + sizeof(MaliMaliKCPUFENCEWAITENDFtraceEvent::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

std::string MaliMaliKCPUFENCEWAITENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent";
}


// ===================================================================

class MaliMaliCSFINTERRUPTSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliCSFINTERRUPTSTARTFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
}
MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliCSFINTERRUPTSTARTFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
}

inline void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliCSFINTERRUPTSTARTFtraceEvent::~MaliMaliCSFINTERRUPTSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliCSFINTERRUPTSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliCSFINTERRUPTSTARTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  return target;
}

size_t MaliMaliCSFINTERRUPTSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliCSFINTERRUPTSTARTFtraceEvent*>(
      &from));
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::MergeFrom(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from) {
  MaliMaliCSFINTERRUPTSTARTFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::CopyFrom(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliCSFINTERRUPTSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::InternalSwap(MaliMaliCSFINTERRUPTSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliCSFINTERRUPTSTARTFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliCSFINTERRUPTSTARTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent";
}


// ===================================================================

class MaliMaliCSFINTERRUPTENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliCSFINTERRUPTENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
}
MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(const MaliMaliCSFINTERRUPTENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliCSFINTERRUPTENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
}

inline void MaliMaliCSFINTERRUPTENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliCSFINTERRUPTENDFtraceEvent::~MaliMaliCSFINTERRUPTENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliCSFINTERRUPTENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliCSFINTERRUPTENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliCSFINTERRUPTENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  return target;
}

size_t MaliMaliCSFINTERRUPTENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliCSFINTERRUPTENDFtraceEvent*>(
      &from));
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::MergeFrom(const MaliMaliCSFINTERRUPTENDFtraceEvent& from) {
  MaliMaliCSFINTERRUPTENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::CopyFrom(const MaliMaliCSFINTERRUPTENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliCSFINTERRUPTENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::InternalSwap(MaliMaliCSFINTERRUPTENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliCSFINTERRUPTENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliCSFINTERRUPTENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
}
MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
}

inline void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::~MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& from) {
  MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
}
MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
}

inline void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::~MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& from) {
  MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
}
MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
}

inline void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::~MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& from) {
  MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
}
MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
}

inline void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::~MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& from) {
  MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
}
MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
}

inline void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::~MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& from) {
  MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
}
MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
}

inline void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::~MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& from) {
  MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
}
MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
}

inline void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::~MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& from) {
  MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
}
MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
}

inline void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::~MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::MergeFrom(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& from) {
  MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::CopyFrom(const MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::InternalSwap(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUINSLEEPFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUINSLEEPFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUINSLEEPFtraceEvent::MaliMaliPMMCUINSLEEPFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
}
MaliMaliPMMCUINSLEEPFtraceEvent::MaliMaliPMMCUINSLEEPFtraceEvent(const MaliMaliPMMCUINSLEEPFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUINSLEEPFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
}

inline void MaliMaliPMMCUINSLEEPFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUINSLEEPFtraceEvent::~MaliMaliPMMCUINSLEEPFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUINSLEEPFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUINSLEEPFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUINSLEEPFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUINSLEEPFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUINSLEEPFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUINSLEEPFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUINSLEEPFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUINSLEEPFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUINSLEEPFtraceEvent::MergeFrom(const MaliMaliPMMCUINSLEEPFtraceEvent& from) {
  MaliMaliPMMCUINSLEEPFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUINSLEEPFtraceEvent::CopyFrom(const MaliMaliPMMCUINSLEEPFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUINSLEEPFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUINSLEEPFtraceEvent::InternalSwap(MaliMaliPMMCUINSLEEPFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUINSLEEPFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUINSLEEPFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUINSLEEPFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUINSLEEPFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUINSLEEPFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUOFFFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUOFFFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUOFFFtraceEvent::MaliMaliPMMCUOFFFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
}
MaliMaliPMMCUOFFFtraceEvent::MaliMaliPMMCUOFFFtraceEvent(const MaliMaliPMMCUOFFFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUOFFFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
}

inline void MaliMaliPMMCUOFFFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUOFFFtraceEvent::~MaliMaliPMMCUOFFFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUOFFFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUOFFFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUOFFFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUOFFFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUOFFFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUOFFFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUOFFFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUOFFFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUOFFFtraceEvent::MergeFrom(const MaliMaliPMMCUOFFFtraceEvent& from) {
  MaliMaliPMMCUOFFFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUOFFFtraceEvent::CopyFrom(const MaliMaliPMMCUOFFFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUOFFFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUOFFFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUOFFFtraceEvent::InternalSwap(MaliMaliPMMCUOFFFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUOFFFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUOFFFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUOFFFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUOFFFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUOFFFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONFtraceEvent::MaliMaliPMMCUONFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
}
MaliMaliPMMCUONFtraceEvent::MaliMaliPMMCUONFtraceEvent(const MaliMaliPMMCUONFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
}

inline void MaliMaliPMMCUONFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONFtraceEvent::~MaliMaliPMMCUONFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONFtraceEvent::MergeFrom(const MaliMaliPMMCUONFtraceEvent& from) {
  MaliMaliPMMCUONFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONFtraceEvent::CopyFrom(const MaliMaliPMMCUONFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONFtraceEvent::InternalSwap(MaliMaliPMMCUONFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
}
MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
}

inline void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::~MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::MergeFrom(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& from) {
  MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::CopyFrom(const MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::InternalSwap(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONGLBREINITPENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONGLBREINITPENDFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONGLBREINITPENDFtraceEvent::MaliMaliPMMCUONGLBREINITPENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
}
MaliMaliPMMCUONGLBREINITPENDFtraceEvent::MaliMaliPMMCUONGLBREINITPENDFtraceEvent(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONGLBREINITPENDFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
}

inline void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONGLBREINITPENDFtraceEvent::~MaliMaliPMMCUONGLBREINITPENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONGLBREINITPENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONGLBREINITPENDFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONGLBREINITPENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONGLBREINITPENDFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::MergeFrom(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent& from) {
  MaliMaliPMMCUONGLBREINITPENDFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::CopyFrom(const MaliMaliPMMCUONGLBREINITPENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONGLBREINITPENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONGLBREINITPENDFtraceEvent::InternalSwap(MaliMaliPMMCUONGLBREINITPENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONGLBREINITPENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONGLBREINITPENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONGLBREINITPENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONGLBREINITPENDFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONGLBREINITPENDFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONHALTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONHALTFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONHALTFtraceEvent::MaliMaliPMMCUONHALTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
}
MaliMaliPMMCUONHALTFtraceEvent::MaliMaliPMMCUONHALTFtraceEvent(const MaliMaliPMMCUONHALTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONHALTFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
}

inline void MaliMaliPMMCUONHALTFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONHALTFtraceEvent::~MaliMaliPMMCUONHALTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONHALTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONHALTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONHALTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONHALTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONHALTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONHALTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONHALTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONHALTFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONHALTFtraceEvent::MergeFrom(const MaliMaliPMMCUONHALTFtraceEvent& from) {
  MaliMaliPMMCUONHALTFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONHALTFtraceEvent::CopyFrom(const MaliMaliPMMCUONHALTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONHALTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONHALTFtraceEvent::InternalSwap(MaliMaliPMMCUONHALTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONHALTFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONHALTFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONHALTFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONHALTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONHALTFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONHWCNTDISABLEFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
}
MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONHWCNTDISABLEFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
}

inline void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::~MaliMaliPMMCUONHWCNTDISABLEFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::MergeFrom(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& from) {
  MaliMaliPMMCUONHWCNTDISABLEFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::CopyFrom(const MaliMaliPMMCUONHWCNTDISABLEFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::InternalSwap(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONHWCNTDISABLEFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONHWCNTDISABLEFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONHWCNTDISABLEFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONHWCNTENABLEFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONHWCNTENABLEFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONHWCNTENABLEFtraceEvent::MaliMaliPMMCUONHWCNTENABLEFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
}
MaliMaliPMMCUONHWCNTENABLEFtraceEvent::MaliMaliPMMCUONHWCNTENABLEFtraceEvent(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONHWCNTENABLEFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
}

inline void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONHWCNTENABLEFtraceEvent::~MaliMaliPMMCUONHWCNTENABLEFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONHWCNTENABLEFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONHWCNTENABLEFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONHWCNTENABLEFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONHWCNTENABLEFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::MergeFrom(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent& from) {
  MaliMaliPMMCUONHWCNTENABLEFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::CopyFrom(const MaliMaliPMMCUONHWCNTENABLEFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONHWCNTENABLEFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONHWCNTENABLEFtraceEvent::InternalSwap(MaliMaliPMMCUONHWCNTENABLEFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONHWCNTENABLEFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONHWCNTENABLEFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONHWCNTENABLEFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONHWCNTENABLEFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONHWCNTENABLEFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONPENDHALTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONPENDHALTFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONPENDHALTFtraceEvent::MaliMaliPMMCUONPENDHALTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
}
MaliMaliPMMCUONPENDHALTFtraceEvent::MaliMaliPMMCUONPENDHALTFtraceEvent(const MaliMaliPMMCUONPENDHALTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONPENDHALTFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
}

inline void MaliMaliPMMCUONPENDHALTFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONPENDHALTFtraceEvent::~MaliMaliPMMCUONPENDHALTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONPENDHALTFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONPENDHALTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONPENDHALTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONPENDHALTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONPENDHALTFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONPENDHALTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONPENDHALTFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONPENDHALTFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONPENDHALTFtraceEvent::MergeFrom(const MaliMaliPMMCUONPENDHALTFtraceEvent& from) {
  MaliMaliPMMCUONPENDHALTFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONPENDHALTFtraceEvent::CopyFrom(const MaliMaliPMMCUONPENDHALTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONPENDHALTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONPENDHALTFtraceEvent::InternalSwap(MaliMaliPMMCUONPENDHALTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONPENDHALTFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONPENDHALTFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONPENDHALTFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONPENDHALTFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONPENDHALTFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONPENDSLEEPFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONPENDSLEEPFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONPENDSLEEPFtraceEvent::MaliMaliPMMCUONPENDSLEEPFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
}
MaliMaliPMMCUONPENDSLEEPFtraceEvent::MaliMaliPMMCUONPENDSLEEPFtraceEvent(const MaliMaliPMMCUONPENDSLEEPFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONPENDSLEEPFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
}

inline void MaliMaliPMMCUONPENDSLEEPFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONPENDSLEEPFtraceEvent::~MaliMaliPMMCUONPENDSLEEPFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONPENDSLEEPFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONPENDSLEEPFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONPENDSLEEPFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONPENDSLEEPFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONPENDSLEEPFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONPENDSLEEPFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONPENDSLEEPFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONPENDSLEEPFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONPENDSLEEPFtraceEvent::MergeFrom(const MaliMaliPMMCUONPENDSLEEPFtraceEvent& from) {
  MaliMaliPMMCUONPENDSLEEPFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONPENDSLEEPFtraceEvent::CopyFrom(const MaliMaliPMMCUONPENDSLEEPFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONPENDSLEEPFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONPENDSLEEPFtraceEvent::InternalSwap(MaliMaliPMMCUONPENDSLEEPFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONPENDSLEEPFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONPENDSLEEPFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONPENDSLEEPFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONPENDSLEEPFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONPENDSLEEPFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUONSLEEPINITIATEFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
}
MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUONSLEEPINITIATEFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
}

inline void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::~MaliMaliPMMCUONSLEEPINITIATEFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::MergeFrom(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& from) {
  MaliMaliPMMCUONSLEEPINITIATEFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::CopyFrom(const MaliMaliPMMCUONSLEEPINITIATEFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::InternalSwap(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUONSLEEPINITIATEFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUONSLEEPINITIATEFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUONSLEEPINITIATEFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUPENDOFFFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUPENDOFFFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUPENDOFFFtraceEvent::MaliMaliPMMCUPENDOFFFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
}
MaliMaliPMMCUPENDOFFFtraceEvent::MaliMaliPMMCUPENDOFFFtraceEvent(const MaliMaliPMMCUPENDOFFFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUPENDOFFFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
}

inline void MaliMaliPMMCUPENDOFFFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUPENDOFFFtraceEvent::~MaliMaliPMMCUPENDOFFFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUPENDOFFFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUPENDOFFFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUPENDOFFFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUPENDOFFFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUPENDOFFFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUPENDOFFFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUPENDOFFFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUPENDOFFFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUPENDOFFFtraceEvent::MergeFrom(const MaliMaliPMMCUPENDOFFFtraceEvent& from) {
  MaliMaliPMMCUPENDOFFFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUPENDOFFFtraceEvent::CopyFrom(const MaliMaliPMMCUPENDOFFFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUPENDOFFFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUPENDOFFFtraceEvent::InternalSwap(MaliMaliPMMCUPENDOFFFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUPENDOFFFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUPENDOFFFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUPENDOFFFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUPENDOFFFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUPENDOFFFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUPENDONRELOADFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUPENDONRELOADFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUPENDONRELOADFtraceEvent::MaliMaliPMMCUPENDONRELOADFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
}
MaliMaliPMMCUPENDONRELOADFtraceEvent::MaliMaliPMMCUPENDONRELOADFtraceEvent(const MaliMaliPMMCUPENDONRELOADFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUPENDONRELOADFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
}

inline void MaliMaliPMMCUPENDONRELOADFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUPENDONRELOADFtraceEvent::~MaliMaliPMMCUPENDONRELOADFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUPENDONRELOADFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUPENDONRELOADFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUPENDONRELOADFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUPENDONRELOADFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUPENDONRELOADFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUPENDONRELOADFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUPENDONRELOADFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUPENDONRELOADFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUPENDONRELOADFtraceEvent::MergeFrom(const MaliMaliPMMCUPENDONRELOADFtraceEvent& from) {
  MaliMaliPMMCUPENDONRELOADFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUPENDONRELOADFtraceEvent::CopyFrom(const MaliMaliPMMCUPENDONRELOADFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUPENDONRELOADFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUPENDONRELOADFtraceEvent::InternalSwap(MaliMaliPMMCUPENDONRELOADFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUPENDONRELOADFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUPENDONRELOADFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUPENDONRELOADFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUPENDONRELOADFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUPENDONRELOADFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCUPOWERDOWNFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCUPOWERDOWNFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCUPOWERDOWNFtraceEvent::MaliMaliPMMCUPOWERDOWNFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
}
MaliMaliPMMCUPOWERDOWNFtraceEvent::MaliMaliPMMCUPOWERDOWNFtraceEvent(const MaliMaliPMMCUPOWERDOWNFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCUPOWERDOWNFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
}

inline void MaliMaliPMMCUPOWERDOWNFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCUPOWERDOWNFtraceEvent::~MaliMaliPMMCUPOWERDOWNFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCUPOWERDOWNFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCUPOWERDOWNFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCUPOWERDOWNFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCUPOWERDOWNFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCUPOWERDOWNFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
  return target;
}

size_t MaliMaliPMMCUPOWERDOWNFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCUPOWERDOWNFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCUPOWERDOWNFtraceEvent*>(
      &from));
}

void MaliMaliPMMCUPOWERDOWNFtraceEvent::MergeFrom(const MaliMaliPMMCUPOWERDOWNFtraceEvent& from) {
  MaliMaliPMMCUPOWERDOWNFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCUPOWERDOWNFtraceEvent::CopyFrom(const MaliMaliPMMCUPOWERDOWNFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCUPOWERDOWNFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCUPOWERDOWNFtraceEvent::InternalSwap(MaliMaliPMMCUPOWERDOWNFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUPOWERDOWNFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCUPOWERDOWNFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCUPOWERDOWNFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCUPOWERDOWNFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCUPOWERDOWNFtraceEvent";
}


// ===================================================================

class MaliMaliPMMCURESETWAITFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliPMMCURESETWAITFtraceEvent>()._impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliPMMCURESETWAITFtraceEvent::MaliMaliPMMCURESETWAITFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
}
MaliMaliPMMCURESETWAITFtraceEvent::MaliMaliPMMCURESETWAITFtraceEvent(const MaliMaliPMMCURESETWAITFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MaliMaliPMMCURESETWAITFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){}
    , decltype(_impl_.kctx_id_){}
    , decltype(_impl_.info_val_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.kctx_tgid_, &from._impl_.kctx_tgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_val_) -
    reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
}

inline void MaliMaliPMMCURESETWAITFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_){0}
    , decltype(_impl_.kctx_id_){0u}
    , decltype(_impl_.info_val_){uint64_t{0u}}
  };
}

MaliMaliPMMCURESETWAITFtraceEvent::~MaliMaliPMMCURESETWAITFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliPMMCURESETWAITFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliPMMCURESETWAITFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliPMMCURESETWAITFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MaliMaliPMMCURESETWAITFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaliMaliPMMCURESETWAITFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
  return target;
}

size_t MaliMaliPMMCURESETWAITFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_info_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaliMaliPMMCURESETWAITFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MaliMaliPMMCURESETWAITFtraceEvent*>(
      &from));
}

void MaliMaliPMMCURESETWAITFtraceEvent::MergeFrom(const MaliMaliPMMCURESETWAITFtraceEvent& from) {
  MaliMaliPMMCURESETWAITFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MaliMaliPMMCURESETWAITFtraceEvent::CopyFrom(const MaliMaliPMMCURESETWAITFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliPMMCURESETWAITFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliPMMCURESETWAITFtraceEvent::InternalSwap(MaliMaliPMMCURESETWAITFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliPMMCURESETWAITFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliPMMCURESETWAITFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliPMMCURESETWAITFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

std::string MaliMaliPMMCURESETWAITFtraceEvent::GetTypeName() const {
  return "perfetto.protos.MaliMaliPMMCURESETWAITFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliTracingMarkWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLCORESDOWNSCALENOTIFYPENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLCORESNOTIFYPENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLCOREINACTIVEPENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLMCUONRECHECKFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSCOREOFFPENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSPENDOFFFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSPENDONFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUHCTLSHADERSREADYOFFFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUINSLEEPFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUINSLEEPFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUINSLEEPFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUOFFFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUOFFFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUOFFFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONCOREATTRUPDATEPENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONGLBREINITPENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONGLBREINITPENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONGLBREINITPENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONHALTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONHALTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONHALTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONHWCNTDISABLEFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONHWCNTENABLEFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONHWCNTENABLEFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONHWCNTENABLEFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONPENDHALTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONPENDHALTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONPENDHALTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONPENDSLEEPFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONPENDSLEEPFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONPENDSLEEPFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUONSLEEPINITIATEFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUPENDOFFFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUPENDOFFFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUPENDOFFFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUPENDONRELOADFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUPENDONRELOADFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUPENDONRELOADFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCUPOWERDOWNFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCUPOWERDOWNFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCUPOWERDOWNFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliPMMCURESETWAITFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliPMMCURESETWAITFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliPMMCURESETWAITFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
