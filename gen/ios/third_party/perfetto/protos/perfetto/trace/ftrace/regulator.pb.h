// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/regulator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class RegulatorDisableCompleteFtraceEvent;
struct RegulatorDisableCompleteFtraceEventDefaultTypeInternal;
extern RegulatorDisableCompleteFtraceEventDefaultTypeInternal _RegulatorDisableCompleteFtraceEvent_default_instance_;
class RegulatorDisableFtraceEvent;
struct RegulatorDisableFtraceEventDefaultTypeInternal;
extern RegulatorDisableFtraceEventDefaultTypeInternal _RegulatorDisableFtraceEvent_default_instance_;
class RegulatorEnableCompleteFtraceEvent;
struct RegulatorEnableCompleteFtraceEventDefaultTypeInternal;
extern RegulatorEnableCompleteFtraceEventDefaultTypeInternal _RegulatorEnableCompleteFtraceEvent_default_instance_;
class RegulatorEnableDelayFtraceEvent;
struct RegulatorEnableDelayFtraceEventDefaultTypeInternal;
extern RegulatorEnableDelayFtraceEventDefaultTypeInternal _RegulatorEnableDelayFtraceEvent_default_instance_;
class RegulatorEnableFtraceEvent;
struct RegulatorEnableFtraceEventDefaultTypeInternal;
extern RegulatorEnableFtraceEventDefaultTypeInternal _RegulatorEnableFtraceEvent_default_instance_;
class RegulatorSetVoltageCompleteFtraceEvent;
struct RegulatorSetVoltageCompleteFtraceEventDefaultTypeInternal;
extern RegulatorSetVoltageCompleteFtraceEventDefaultTypeInternal _RegulatorSetVoltageCompleteFtraceEvent_default_instance_;
class RegulatorSetVoltageFtraceEvent;
struct RegulatorSetVoltageFtraceEventDefaultTypeInternal;
extern RegulatorSetVoltageFtraceEventDefaultTypeInternal _RegulatorSetVoltageFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorDisableCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorDisableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorDisableFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorEnableCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorEnableDelayFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorEnableDelayFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorEnableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorEnableFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent>(Arena*);
template<> ::perfetto::protos::RegulatorSetVoltageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RegulatorSetVoltageFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class RegulatorDisableFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorDisableFtraceEvent) */ {
 public:
  inline RegulatorDisableFtraceEvent() : RegulatorDisableFtraceEvent(nullptr) {}
  ~RegulatorDisableFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR RegulatorDisableFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegulatorDisableFtraceEvent(const RegulatorDisableFtraceEvent& from);
  RegulatorDisableFtraceEvent(RegulatorDisableFtraceEvent&& from) noexcept
    : RegulatorDisableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorDisableFtraceEvent& operator=(const RegulatorDisableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorDisableFtraceEvent& operator=(RegulatorDisableFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegulatorDisableFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegulatorDisableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorDisableFtraceEvent*>(
               &_RegulatorDisableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegulatorDisableFtraceEvent& a, RegulatorDisableFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegulatorDisableFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegulatorDisableFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegulatorDisableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegulatorDisableFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegulatorDisableFtraceEvent& from);
  void MergeFrom(const RegulatorDisableFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorDisableFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorDisableFtraceEvent";
  }
  protected:
  explicit RegulatorDisableFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorDisableFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorDisableCompleteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorDisableCompleteFtraceEvent) */ {
 public:
  inline RegulatorDisableCompleteFtraceEvent() : RegulatorDisableCompleteFtraceEvent(nullptr) {}
  ~RegulatorDisableCompleteFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR RegulatorDisableCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegulatorDisableCompleteFtraceEvent(const RegulatorDisableCompleteFtraceEvent& from);
  RegulatorDisableCompleteFtraceEvent(RegulatorDisableCompleteFtraceEvent&& from) noexcept
    : RegulatorDisableCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorDisableCompleteFtraceEvent& operator=(const RegulatorDisableCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorDisableCompleteFtraceEvent& operator=(RegulatorDisableCompleteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegulatorDisableCompleteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegulatorDisableCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorDisableCompleteFtraceEvent*>(
               &_RegulatorDisableCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegulatorDisableCompleteFtraceEvent& a, RegulatorDisableCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegulatorDisableCompleteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegulatorDisableCompleteFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegulatorDisableCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegulatorDisableCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegulatorDisableCompleteFtraceEvent& from);
  void MergeFrom(const RegulatorDisableCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorDisableCompleteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorDisableCompleteFtraceEvent";
  }
  protected:
  explicit RegulatorDisableCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorDisableCompleteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorEnableFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorEnableFtraceEvent) */ {
 public:
  inline RegulatorEnableFtraceEvent() : RegulatorEnableFtraceEvent(nullptr) {}
  ~RegulatorEnableFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR RegulatorEnableFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegulatorEnableFtraceEvent(const RegulatorEnableFtraceEvent& from);
  RegulatorEnableFtraceEvent(RegulatorEnableFtraceEvent&& from) noexcept
    : RegulatorEnableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorEnableFtraceEvent& operator=(const RegulatorEnableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorEnableFtraceEvent& operator=(RegulatorEnableFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegulatorEnableFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegulatorEnableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorEnableFtraceEvent*>(
               &_RegulatorEnableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegulatorEnableFtraceEvent& a, RegulatorEnableFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegulatorEnableFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegulatorEnableFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegulatorEnableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegulatorEnableFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegulatorEnableFtraceEvent& from);
  void MergeFrom(const RegulatorEnableFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorEnableFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorEnableFtraceEvent";
  }
  protected:
  explicit RegulatorEnableFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorEnableFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorEnableCompleteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorEnableCompleteFtraceEvent) */ {
 public:
  inline RegulatorEnableCompleteFtraceEvent() : RegulatorEnableCompleteFtraceEvent(nullptr) {}
  ~RegulatorEnableCompleteFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR RegulatorEnableCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegulatorEnableCompleteFtraceEvent(const RegulatorEnableCompleteFtraceEvent& from);
  RegulatorEnableCompleteFtraceEvent(RegulatorEnableCompleteFtraceEvent&& from) noexcept
    : RegulatorEnableCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorEnableCompleteFtraceEvent& operator=(const RegulatorEnableCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorEnableCompleteFtraceEvent& operator=(RegulatorEnableCompleteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegulatorEnableCompleteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegulatorEnableCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorEnableCompleteFtraceEvent*>(
               &_RegulatorEnableCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegulatorEnableCompleteFtraceEvent& a, RegulatorEnableCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegulatorEnableCompleteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegulatorEnableCompleteFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegulatorEnableCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegulatorEnableCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegulatorEnableCompleteFtraceEvent& from);
  void MergeFrom(const RegulatorEnableCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorEnableCompleteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorEnableCompleteFtraceEvent";
  }
  protected:
  explicit RegulatorEnableCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorEnableCompleteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorEnableDelayFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorEnableDelayFtraceEvent) */ {
 public:
  inline RegulatorEnableDelayFtraceEvent() : RegulatorEnableDelayFtraceEvent(nullptr) {}
  ~RegulatorEnableDelayFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR RegulatorEnableDelayFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegulatorEnableDelayFtraceEvent(const RegulatorEnableDelayFtraceEvent& from);
  RegulatorEnableDelayFtraceEvent(RegulatorEnableDelayFtraceEvent&& from) noexcept
    : RegulatorEnableDelayFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorEnableDelayFtraceEvent& operator=(const RegulatorEnableDelayFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorEnableDelayFtraceEvent& operator=(RegulatorEnableDelayFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegulatorEnableDelayFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegulatorEnableDelayFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorEnableDelayFtraceEvent*>(
               &_RegulatorEnableDelayFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegulatorEnableDelayFtraceEvent& a, RegulatorEnableDelayFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegulatorEnableDelayFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegulatorEnableDelayFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegulatorEnableDelayFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegulatorEnableDelayFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegulatorEnableDelayFtraceEvent& from);
  void MergeFrom(const RegulatorEnableDelayFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorEnableDelayFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorEnableDelayFtraceEvent";
  }
  protected:
  explicit RegulatorEnableDelayFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorEnableDelayFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorSetVoltageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorSetVoltageFtraceEvent) */ {
 public:
  inline RegulatorSetVoltageFtraceEvent() : RegulatorSetVoltageFtraceEvent(nullptr) {}
  ~RegulatorSetVoltageFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR RegulatorSetVoltageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegulatorSetVoltageFtraceEvent(const RegulatorSetVoltageFtraceEvent& from);
  RegulatorSetVoltageFtraceEvent(RegulatorSetVoltageFtraceEvent&& from) noexcept
    : RegulatorSetVoltageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorSetVoltageFtraceEvent& operator=(const RegulatorSetVoltageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorSetVoltageFtraceEvent& operator=(RegulatorSetVoltageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegulatorSetVoltageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegulatorSetVoltageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorSetVoltageFtraceEvent*>(
               &_RegulatorSetVoltageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegulatorSetVoltageFtraceEvent& a, RegulatorSetVoltageFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegulatorSetVoltageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegulatorSetVoltageFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegulatorSetVoltageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegulatorSetVoltageFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegulatorSetVoltageFtraceEvent& from);
  void MergeFrom(const RegulatorSetVoltageFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorSetVoltageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorSetVoltageFtraceEvent";
  }
  protected:
  explicit RegulatorSetVoltageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  int32_t min() const;
  void set_min(int32_t value);
  private:
  int32_t _internal_min() const;
  void _internal_set_min(int32_t value);
  public:

  // optional int32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  int32_t max() const;
  void set_max(int32_t value);
  private:
  int32_t _internal_max() const;
  void _internal_set_max(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorSetVoltageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t min_;
    int32_t max_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// -------------------------------------------------------------------

class RegulatorSetVoltageCompleteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent) */ {
 public:
  inline RegulatorSetVoltageCompleteFtraceEvent() : RegulatorSetVoltageCompleteFtraceEvent(nullptr) {}
  ~RegulatorSetVoltageCompleteFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR RegulatorSetVoltageCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegulatorSetVoltageCompleteFtraceEvent(const RegulatorSetVoltageCompleteFtraceEvent& from);
  RegulatorSetVoltageCompleteFtraceEvent(RegulatorSetVoltageCompleteFtraceEvent&& from) noexcept
    : RegulatorSetVoltageCompleteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RegulatorSetVoltageCompleteFtraceEvent& operator=(const RegulatorSetVoltageCompleteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegulatorSetVoltageCompleteFtraceEvent& operator=(RegulatorSetVoltageCompleteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RegulatorSetVoltageCompleteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegulatorSetVoltageCompleteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RegulatorSetVoltageCompleteFtraceEvent*>(
               &_RegulatorSetVoltageCompleteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegulatorSetVoltageCompleteFtraceEvent& a, RegulatorSetVoltageCompleteFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RegulatorSetVoltageCompleteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegulatorSetVoltageCompleteFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegulatorSetVoltageCompleteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegulatorSetVoltageCompleteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RegulatorSetVoltageCompleteFtraceEvent& from);
  void MergeFrom(const RegulatorSetVoltageCompleteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegulatorSetVoltageCompleteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent";
  }
  protected:
  explicit RegulatorSetVoltageCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t val_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegulatorDisableFtraceEvent

// optional string name = 1;
inline bool RegulatorDisableFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegulatorDisableFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void RegulatorDisableFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorDisableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorDisableFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegulatorDisableFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorDisableFtraceEvent.name)
}
inline std::string* RegulatorDisableFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorDisableFtraceEvent.name)
  return _s;
}
inline const std::string& RegulatorDisableFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegulatorDisableFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegulatorDisableFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegulatorDisableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorDisableFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegulatorDisableFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorDisableFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorDisableCompleteFtraceEvent

// optional string name = 1;
inline bool RegulatorDisableCompleteFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegulatorDisableCompleteFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void RegulatorDisableCompleteFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorDisableCompleteFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegulatorDisableCompleteFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
}
inline std::string* RegulatorDisableCompleteFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
  return _s;
}
inline const std::string& RegulatorDisableCompleteFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegulatorDisableCompleteFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegulatorDisableCompleteFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegulatorDisableCompleteFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegulatorDisableCompleteFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorDisableCompleteFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorEnableFtraceEvent

// optional string name = 1;
inline bool RegulatorEnableFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegulatorEnableFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void RegulatorEnableFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorEnableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorEnableFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegulatorEnableFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorEnableFtraceEvent.name)
}
inline std::string* RegulatorEnableFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorEnableFtraceEvent.name)
  return _s;
}
inline const std::string& RegulatorEnableFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegulatorEnableFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegulatorEnableFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegulatorEnableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorEnableFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegulatorEnableFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorEnableFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorEnableCompleteFtraceEvent

// optional string name = 1;
inline bool RegulatorEnableCompleteFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegulatorEnableCompleteFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void RegulatorEnableCompleteFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorEnableCompleteFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegulatorEnableCompleteFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
}
inline std::string* RegulatorEnableCompleteFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
  return _s;
}
inline const std::string& RegulatorEnableCompleteFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegulatorEnableCompleteFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegulatorEnableCompleteFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegulatorEnableCompleteFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegulatorEnableCompleteFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorEnableCompleteFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorEnableDelayFtraceEvent

// optional string name = 1;
inline bool RegulatorEnableDelayFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegulatorEnableDelayFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void RegulatorEnableDelayFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorEnableDelayFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegulatorEnableDelayFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
}
inline std::string* RegulatorEnableDelayFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
  return _s;
}
inline const std::string& RegulatorEnableDelayFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegulatorEnableDelayFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegulatorEnableDelayFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegulatorEnableDelayFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegulatorEnableDelayFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorEnableDelayFtraceEvent.name)
}

// -------------------------------------------------------------------

// RegulatorSetVoltageFtraceEvent

// optional string name = 1;
inline bool RegulatorSetVoltageFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegulatorSetVoltageFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void RegulatorSetVoltageFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorSetVoltageFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegulatorSetVoltageFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
}
inline std::string* RegulatorSetVoltageFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
  return _s;
}
inline const std::string& RegulatorSetVoltageFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegulatorSetVoltageFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegulatorSetVoltageFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegulatorSetVoltageFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegulatorSetVoltageFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorSetVoltageFtraceEvent.name)
}

// optional int32 min = 2;
inline bool RegulatorSetVoltageFtraceEvent::_internal_has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegulatorSetVoltageFtraceEvent::has_min() const {
  return _internal_has_min();
}
inline void RegulatorSetVoltageFtraceEvent::clear_min() {
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RegulatorSetVoltageFtraceEvent::_internal_min() const {
  return _impl_.min_;
}
inline int32_t RegulatorSetVoltageFtraceEvent::min() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageFtraceEvent.min)
  return _internal_min();
}
inline void RegulatorSetVoltageFtraceEvent::_internal_set_min(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_ = value;
}
inline void RegulatorSetVoltageFtraceEvent::set_min(int32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageFtraceEvent.min)
}

// optional int32 max = 3;
inline bool RegulatorSetVoltageFtraceEvent::_internal_has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegulatorSetVoltageFtraceEvent::has_max() const {
  return _internal_has_max();
}
inline void RegulatorSetVoltageFtraceEvent::clear_max() {
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RegulatorSetVoltageFtraceEvent::_internal_max() const {
  return _impl_.max_;
}
inline int32_t RegulatorSetVoltageFtraceEvent::max() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageFtraceEvent.max)
  return _internal_max();
}
inline void RegulatorSetVoltageFtraceEvent::_internal_set_max(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}
inline void RegulatorSetVoltageFtraceEvent::set_max(int32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageFtraceEvent.max)
}

// -------------------------------------------------------------------

// RegulatorSetVoltageCompleteFtraceEvent

// optional string name = 1;
inline bool RegulatorSetVoltageCompleteFtraceEvent::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegulatorSetVoltageCompleteFtraceEvent::has_name() const {
  return _internal_has_name();
}
inline void RegulatorSetVoltageCompleteFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegulatorSetVoltageCompleteFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegulatorSetVoltageCompleteFtraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
}
inline std::string* RegulatorSetVoltageCompleteFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
  return _s;
}
inline const std::string& RegulatorSetVoltageCompleteFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RegulatorSetVoltageCompleteFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegulatorSetVoltageCompleteFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegulatorSetVoltageCompleteFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.name)
}

// optional uint32 val = 2;
inline bool RegulatorSetVoltageCompleteFtraceEvent::_internal_has_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegulatorSetVoltageCompleteFtraceEvent::has_val() const {
  return _internal_has_val();
}
inline void RegulatorSetVoltageCompleteFtraceEvent::clear_val() {
  _impl_.val_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RegulatorSetVoltageCompleteFtraceEvent::_internal_val() const {
  return _impl_.val_;
}
inline uint32_t RegulatorSetVoltageCompleteFtraceEvent::val() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.val)
  return _internal_val();
}
inline void RegulatorSetVoltageCompleteFtraceEvent::_internal_set_val(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.val_ = value;
}
inline void RegulatorSetVoltageCompleteFtraceEvent::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent.val)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto
