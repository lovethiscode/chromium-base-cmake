// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/v4l2.proto

#include "protos/perfetto/trace/ftrace/v4l2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytesused_)*/0u
  , /*decltype(_impl_.field_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.timecode_flags_)*/0u
  , /*decltype(_impl_.timecode_frames_)*/0u
  , /*decltype(_impl_.timecode_hours_)*/0u
  , /*decltype(_impl_.timecode_minutes_)*/0u
  , /*decltype(_impl_.timecode_seconds_)*/0u
  , /*decltype(_impl_.timecode_type_)*/0u
  , /*decltype(_impl_.timecode_userbits0_)*/0u
  , /*decltype(_impl_.timecode_userbits1_)*/0u
  , /*decltype(_impl_.timecode_userbits2_)*/0u
  , /*decltype(_impl_.timecode_userbits3_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0u} {}
struct V4l2QbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V4l2QbufFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V4l2QbufFtraceEventDefaultTypeInternal() {}
  union {
    V4l2QbufFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V4l2QbufFtraceEventDefaultTypeInternal _V4l2QbufFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytesused_)*/0u
  , /*decltype(_impl_.field_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.timecode_flags_)*/0u
  , /*decltype(_impl_.timecode_frames_)*/0u
  , /*decltype(_impl_.timecode_hours_)*/0u
  , /*decltype(_impl_.timecode_minutes_)*/0u
  , /*decltype(_impl_.timecode_seconds_)*/0u
  , /*decltype(_impl_.timecode_type_)*/0u
  , /*decltype(_impl_.timecode_userbits0_)*/0u
  , /*decltype(_impl_.timecode_userbits1_)*/0u
  , /*decltype(_impl_.timecode_userbits2_)*/0u
  , /*decltype(_impl_.timecode_userbits3_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0u} {}
struct V4l2DqbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V4l2DqbufFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V4l2DqbufFtraceEventDefaultTypeInternal() {}
  union {
    V4l2DqbufFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V4l2DqbufFtraceEventDefaultTypeInternal _V4l2DqbufFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.timecode_flags_)*/0u
  , /*decltype(_impl_.timecode_frames_)*/0u
  , /*decltype(_impl_.timecode_hours_)*/0u
  , /*decltype(_impl_.timecode_minutes_)*/0u
  , /*decltype(_impl_.timecode_seconds_)*/0u
  , /*decltype(_impl_.timecode_type_)*/0u
  , /*decltype(_impl_.timecode_userbits0_)*/0u
  , /*decltype(_impl_.timecode_userbits1_)*/0u
  , /*decltype(_impl_.timecode_userbits2_)*/0u
  , /*decltype(_impl_.timecode_userbits3_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct Vb2V4l2BufQueueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2BufQueueFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2BufQueueFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2BufQueueFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2BufQueueFtraceEventDefaultTypeInternal _Vb2V4l2BufQueueFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.timecode_flags_)*/0u
  , /*decltype(_impl_.timecode_frames_)*/0u
  , /*decltype(_impl_.timecode_hours_)*/0u
  , /*decltype(_impl_.timecode_minutes_)*/0u
  , /*decltype(_impl_.timecode_seconds_)*/0u
  , /*decltype(_impl_.timecode_type_)*/0u
  , /*decltype(_impl_.timecode_userbits0_)*/0u
  , /*decltype(_impl_.timecode_userbits1_)*/0u
  , /*decltype(_impl_.timecode_userbits2_)*/0u
  , /*decltype(_impl_.timecode_userbits3_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct Vb2V4l2BufDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2BufDoneFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2BufDoneFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2BufDoneFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2BufDoneFtraceEventDefaultTypeInternal _Vb2V4l2BufDoneFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.timecode_flags_)*/0u
  , /*decltype(_impl_.timecode_frames_)*/0u
  , /*decltype(_impl_.timecode_hours_)*/0u
  , /*decltype(_impl_.timecode_minutes_)*/0u
  , /*decltype(_impl_.timecode_seconds_)*/0u
  , /*decltype(_impl_.timecode_type_)*/0u
  , /*decltype(_impl_.timecode_userbits0_)*/0u
  , /*decltype(_impl_.timecode_userbits1_)*/0u
  , /*decltype(_impl_.timecode_userbits2_)*/0u
  , /*decltype(_impl_.timecode_userbits3_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct Vb2V4l2QbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2QbufFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2QbufFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2QbufFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2QbufFtraceEventDefaultTypeInternal _Vb2V4l2QbufFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.minor_)*/0
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.timecode_flags_)*/0u
  , /*decltype(_impl_.timecode_frames_)*/0u
  , /*decltype(_impl_.timecode_hours_)*/0u
  , /*decltype(_impl_.timecode_minutes_)*/0u
  , /*decltype(_impl_.timecode_seconds_)*/0u
  , /*decltype(_impl_.timecode_type_)*/0u
  , /*decltype(_impl_.timecode_userbits0_)*/0u
  , /*decltype(_impl_.timecode_userbits1_)*/0u
  , /*decltype(_impl_.timecode_userbits2_)*/0u
  , /*decltype(_impl_.timecode_userbits3_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}} {}
struct Vb2V4l2DqbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2DqbufFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2DqbufFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2DqbufFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2DqbufFtraceEventDefaultTypeInternal _Vb2V4l2DqbufFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class V4l2QbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<V4l2QbufFtraceEvent>()._impl_._has_bits_);
  static void set_has_bytesused(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.V4l2QbufFtraceEvent)
}
V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(const V4l2QbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  V4l2QbufFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytesused_){}
    , decltype(_impl_.field_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.timecode_flags_){}
    , decltype(_impl_.timecode_frames_){}
    , decltype(_impl_.timecode_hours_){}
    , decltype(_impl_.timecode_minutes_){}
    , decltype(_impl_.timecode_seconds_){}
    , decltype(_impl_.timecode_type_){}
    , decltype(_impl_.timecode_userbits0_){}
    , decltype(_impl_.timecode_userbits1_){}
    , decltype(_impl_.timecode_userbits2_){}
    , decltype(_impl_.timecode_userbits3_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.bytesused_, &from._impl_.bytesused_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.bytesused_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.V4l2QbufFtraceEvent)
}

inline void V4l2QbufFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytesused_){0u}
    , decltype(_impl_.field_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.timecode_flags_){0u}
    , decltype(_impl_.timecode_frames_){0u}
    , decltype(_impl_.timecode_hours_){0u}
    , decltype(_impl_.timecode_minutes_){0u}
    , decltype(_impl_.timecode_seconds_){0u}
    , decltype(_impl_.timecode_type_){0u}
    , decltype(_impl_.timecode_userbits0_){0u}
    , decltype(_impl_.timecode_userbits1_){0u}
    , decltype(_impl_.timecode_userbits2_){0u}
    , decltype(_impl_.timecode_userbits3_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.type_){0u}
  };
}

V4l2QbufFtraceEvent::~V4l2QbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.V4l2QbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V4l2QbufFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void V4l2QbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V4l2QbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.V4l2QbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bytesused_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_frames_) -
        reinterpret_cast<char*>(&_impl_.bytesused_)) + sizeof(_impl_.timecode_frames_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.timecode_hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_userbits3_) -
        reinterpret_cast<char*>(&_impl_.timecode_hours_)) + sizeof(_impl_.timecode_userbits3_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* V4l2QbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bytesused = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bytesused(&has_bits);
          _impl_.bytesused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_frames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_hours = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_minutes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_seconds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits0 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits3 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V4l2QbufFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.V4l2QbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bytesused = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bytesused(), target);
  }

  // optional uint32 field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_field(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // optional int32 minor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_timestamp(), target);
  }

  // optional uint32 type = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.V4l2QbufFtraceEvent)
  return target;
}

size_t V4l2QbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.V4l2QbufFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 bytesused = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytesused());
    }

    // optional uint32 field = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional int32 minor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
    }

    // optional uint32 sequence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_frames());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 timecode_hours = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_minutes());
    }

    // optional uint32 timecode_seconds = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_timecode_userbits3());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int64 timestamp = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_timestamp());
    }

    // optional uint32 type = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V4l2QbufFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const V4l2QbufFtraceEvent*>(
      &from));
}

void V4l2QbufFtraceEvent::MergeFrom(const V4l2QbufFtraceEvent& from) {
  V4l2QbufFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.V4l2QbufFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bytesused_ = from._impl_.bytesused_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void V4l2QbufFtraceEvent::CopyFrom(const V4l2QbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.V4l2QbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4l2QbufFtraceEvent::IsInitialized() const {
  return true;
}

void V4l2QbufFtraceEvent::InternalSwap(V4l2QbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V4l2QbufFtraceEvent, _impl_.type_)
      + sizeof(V4l2QbufFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(V4l2QbufFtraceEvent, _impl_.bytesused_)>(
          reinterpret_cast<char*>(&_impl_.bytesused_),
          reinterpret_cast<char*>(&other->_impl_.bytesused_));
}

std::string V4l2QbufFtraceEvent::GetTypeName() const {
  return "perfetto.protos.V4l2QbufFtraceEvent";
}


// ===================================================================

class V4l2DqbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<V4l2DqbufFtraceEvent>()._impl_._has_bits_);
  static void set_has_bytesused(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.V4l2DqbufFtraceEvent)
}
V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(const V4l2DqbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  V4l2DqbufFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytesused_){}
    , decltype(_impl_.field_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.timecode_flags_){}
    , decltype(_impl_.timecode_frames_){}
    , decltype(_impl_.timecode_hours_){}
    , decltype(_impl_.timecode_minutes_){}
    , decltype(_impl_.timecode_seconds_){}
    , decltype(_impl_.timecode_type_){}
    , decltype(_impl_.timecode_userbits0_){}
    , decltype(_impl_.timecode_userbits1_){}
    , decltype(_impl_.timecode_userbits2_){}
    , decltype(_impl_.timecode_userbits3_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.bytesused_, &from._impl_.bytesused_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.bytesused_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.V4l2DqbufFtraceEvent)
}

inline void V4l2DqbufFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytesused_){0u}
    , decltype(_impl_.field_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.timecode_flags_){0u}
    , decltype(_impl_.timecode_frames_){0u}
    , decltype(_impl_.timecode_hours_){0u}
    , decltype(_impl_.timecode_minutes_){0u}
    , decltype(_impl_.timecode_seconds_){0u}
    , decltype(_impl_.timecode_type_){0u}
    , decltype(_impl_.timecode_userbits0_){0u}
    , decltype(_impl_.timecode_userbits1_){0u}
    , decltype(_impl_.timecode_userbits2_){0u}
    , decltype(_impl_.timecode_userbits3_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.type_){0u}
  };
}

V4l2DqbufFtraceEvent::~V4l2DqbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.V4l2DqbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V4l2DqbufFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void V4l2DqbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V4l2DqbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.V4l2DqbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bytesused_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_frames_) -
        reinterpret_cast<char*>(&_impl_.bytesused_)) + sizeof(_impl_.timecode_frames_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.timecode_hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_userbits3_) -
        reinterpret_cast<char*>(&_impl_.timecode_hours_)) + sizeof(_impl_.timecode_userbits3_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* V4l2DqbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bytesused = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bytesused(&has_bits);
          _impl_.bytesused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_frames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_hours = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_minutes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_seconds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits0 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits3 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V4l2DqbufFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.V4l2DqbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bytesused = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bytesused(), target);
  }

  // optional uint32 field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_field(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // optional int32 minor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_timestamp(), target);
  }

  // optional uint32 type = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.V4l2DqbufFtraceEvent)
  return target;
}

size_t V4l2DqbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.V4l2DqbufFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 bytesused = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytesused());
    }

    // optional uint32 field = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional int32 minor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
    }

    // optional uint32 sequence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_frames());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 timecode_hours = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_minutes());
    }

    // optional uint32 timecode_seconds = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_timecode_userbits3());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int64 timestamp = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_timestamp());
    }

    // optional uint32 type = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V4l2DqbufFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const V4l2DqbufFtraceEvent*>(
      &from));
}

void V4l2DqbufFtraceEvent::MergeFrom(const V4l2DqbufFtraceEvent& from) {
  V4l2DqbufFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.V4l2DqbufFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bytesused_ = from._impl_.bytesused_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void V4l2DqbufFtraceEvent::CopyFrom(const V4l2DqbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.V4l2DqbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4l2DqbufFtraceEvent::IsInitialized() const {
  return true;
}

void V4l2DqbufFtraceEvent::InternalSwap(V4l2DqbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V4l2DqbufFtraceEvent, _impl_.type_)
      + sizeof(V4l2DqbufFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(V4l2DqbufFtraceEvent, _impl_.bytesused_)>(
          reinterpret_cast<char*>(&_impl_.bytesused_),
          reinterpret_cast<char*>(&other->_impl_.bytesused_));
}

std::string V4l2DqbufFtraceEvent::GetTypeName() const {
  return "perfetto.protos.V4l2DqbufFtraceEvent";
}


// ===================================================================

class Vb2V4l2BufQueueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2BufQueueFtraceEvent>()._impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
}
Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(const Vb2V4l2BufQueueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Vb2V4l2BufQueueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.timecode_flags_){}
    , decltype(_impl_.timecode_frames_){}
    , decltype(_impl_.timecode_hours_){}
    , decltype(_impl_.timecode_minutes_){}
    , decltype(_impl_.timecode_seconds_){}
    , decltype(_impl_.timecode_type_){}
    , decltype(_impl_.timecode_userbits0_){}
    , decltype(_impl_.timecode_userbits1_){}
    , decltype(_impl_.timecode_userbits2_){}
    , decltype(_impl_.timecode_userbits3_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.field_, &from._impl_.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
}

inline void Vb2V4l2BufQueueFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.timecode_flags_){0u}
    , decltype(_impl_.timecode_frames_){0u}
    , decltype(_impl_.timecode_hours_){0u}
    , decltype(_impl_.timecode_minutes_){0u}
    , decltype(_impl_.timecode_seconds_){0u}
    , decltype(_impl_.timecode_type_){0u}
    , decltype(_impl_.timecode_userbits0_){0u}
    , decltype(_impl_.timecode_userbits1_){0u}
    , decltype(_impl_.timecode_userbits2_){0u}
    , decltype(_impl_.timecode_userbits3_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

Vb2V4l2BufQueueFtraceEvent::~Vb2V4l2BufQueueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2BufQueueFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2BufQueueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2BufQueueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Vb2V4l2BufQueueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vb2V4l2BufQueueFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  return target;
}

size_t Vb2V4l2BufQueueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vb2V4l2BufQueueFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Vb2V4l2BufQueueFtraceEvent*>(
      &from));
}

void Vb2V4l2BufQueueFtraceEvent::MergeFrom(const Vb2V4l2BufQueueFtraceEvent& from) {
  Vb2V4l2BufQueueFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vb2V4l2BufQueueFtraceEvent::CopyFrom(const Vb2V4l2BufQueueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2BufQueueFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2BufQueueFtraceEvent::InternalSwap(Vb2V4l2BufQueueFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2BufQueueFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2BufQueueFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2BufQueueFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

std::string Vb2V4l2BufQueueFtraceEvent::GetTypeName() const {
  return "perfetto.protos.Vb2V4l2BufQueueFtraceEvent";
}


// ===================================================================

class Vb2V4l2BufDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2BufDoneFtraceEvent>()._impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
}
Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(const Vb2V4l2BufDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Vb2V4l2BufDoneFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.timecode_flags_){}
    , decltype(_impl_.timecode_frames_){}
    , decltype(_impl_.timecode_hours_){}
    , decltype(_impl_.timecode_minutes_){}
    , decltype(_impl_.timecode_seconds_){}
    , decltype(_impl_.timecode_type_){}
    , decltype(_impl_.timecode_userbits0_){}
    , decltype(_impl_.timecode_userbits1_){}
    , decltype(_impl_.timecode_userbits2_){}
    , decltype(_impl_.timecode_userbits3_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.field_, &from._impl_.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
}

inline void Vb2V4l2BufDoneFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.timecode_flags_){0u}
    , decltype(_impl_.timecode_frames_){0u}
    , decltype(_impl_.timecode_hours_){0u}
    , decltype(_impl_.timecode_minutes_){0u}
    , decltype(_impl_.timecode_seconds_){0u}
    , decltype(_impl_.timecode_type_){0u}
    , decltype(_impl_.timecode_userbits0_){0u}
    , decltype(_impl_.timecode_userbits1_){0u}
    , decltype(_impl_.timecode_userbits2_){0u}
    , decltype(_impl_.timecode_userbits3_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

Vb2V4l2BufDoneFtraceEvent::~Vb2V4l2BufDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2BufDoneFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2BufDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2BufDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Vb2V4l2BufDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vb2V4l2BufDoneFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  return target;
}

size_t Vb2V4l2BufDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vb2V4l2BufDoneFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Vb2V4l2BufDoneFtraceEvent*>(
      &from));
}

void Vb2V4l2BufDoneFtraceEvent::MergeFrom(const Vb2V4l2BufDoneFtraceEvent& from) {
  Vb2V4l2BufDoneFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vb2V4l2BufDoneFtraceEvent::CopyFrom(const Vb2V4l2BufDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2BufDoneFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2BufDoneFtraceEvent::InternalSwap(Vb2V4l2BufDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2BufDoneFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2BufDoneFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2BufDoneFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

std::string Vb2V4l2BufDoneFtraceEvent::GetTypeName() const {
  return "perfetto.protos.Vb2V4l2BufDoneFtraceEvent";
}


// ===================================================================

class Vb2V4l2QbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2QbufFtraceEvent>()._impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2QbufFtraceEvent)
}
Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(const Vb2V4l2QbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Vb2V4l2QbufFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.timecode_flags_){}
    , decltype(_impl_.timecode_frames_){}
    , decltype(_impl_.timecode_hours_){}
    , decltype(_impl_.timecode_minutes_){}
    , decltype(_impl_.timecode_seconds_){}
    , decltype(_impl_.timecode_type_){}
    , decltype(_impl_.timecode_userbits0_){}
    , decltype(_impl_.timecode_userbits1_){}
    , decltype(_impl_.timecode_userbits2_){}
    , decltype(_impl_.timecode_userbits3_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.field_, &from._impl_.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2QbufFtraceEvent)
}

inline void Vb2V4l2QbufFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.timecode_flags_){0u}
    , decltype(_impl_.timecode_frames_){0u}
    , decltype(_impl_.timecode_hours_){0u}
    , decltype(_impl_.timecode_minutes_){0u}
    , decltype(_impl_.timecode_seconds_){0u}
    , decltype(_impl_.timecode_type_){0u}
    , decltype(_impl_.timecode_userbits0_){0u}
    , decltype(_impl_.timecode_userbits1_){0u}
    , decltype(_impl_.timecode_userbits2_){0u}
    , decltype(_impl_.timecode_userbits3_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

Vb2V4l2QbufFtraceEvent::~Vb2V4l2QbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2QbufFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2QbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2QbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Vb2V4l2QbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vb2V4l2QbufFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  return target;
}

size_t Vb2V4l2QbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vb2V4l2QbufFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Vb2V4l2QbufFtraceEvent*>(
      &from));
}

void Vb2V4l2QbufFtraceEvent::MergeFrom(const Vb2V4l2QbufFtraceEvent& from) {
  Vb2V4l2QbufFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vb2V4l2QbufFtraceEvent::CopyFrom(const Vb2V4l2QbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2QbufFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2QbufFtraceEvent::InternalSwap(Vb2V4l2QbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2QbufFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2QbufFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2QbufFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

std::string Vb2V4l2QbufFtraceEvent::GetTypeName() const {
  return "perfetto.protos.Vb2V4l2QbufFtraceEvent";
}


// ===================================================================

class Vb2V4l2DqbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2DqbufFtraceEvent>()._impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
}
Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(const Vb2V4l2DqbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Vb2V4l2DqbufFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.timecode_flags_){}
    , decltype(_impl_.timecode_frames_){}
    , decltype(_impl_.timecode_hours_){}
    , decltype(_impl_.timecode_minutes_){}
    , decltype(_impl_.timecode_seconds_){}
    , decltype(_impl_.timecode_type_){}
    , decltype(_impl_.timecode_userbits0_){}
    , decltype(_impl_.timecode_userbits1_){}
    , decltype(_impl_.timecode_userbits2_){}
    , decltype(_impl_.timecode_userbits3_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.field_, &from._impl_.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
}

inline void Vb2V4l2DqbufFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.minor_){0}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.timecode_flags_){0u}
    , decltype(_impl_.timecode_frames_){0u}
    , decltype(_impl_.timecode_hours_){0u}
    , decltype(_impl_.timecode_minutes_){0u}
    , decltype(_impl_.timecode_seconds_){0u}
    , decltype(_impl_.timecode_type_){0u}
    , decltype(_impl_.timecode_userbits0_){0u}
    , decltype(_impl_.timecode_userbits1_){0u}
    , decltype(_impl_.timecode_userbits2_){0u}
    , decltype(_impl_.timecode_userbits3_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
  };
}

Vb2V4l2DqbufFtraceEvent::~Vb2V4l2DqbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2DqbufFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2DqbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2DqbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Vb2V4l2DqbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vb2V4l2DqbufFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  return target;
}

size_t Vb2V4l2DqbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vb2V4l2DqbufFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Vb2V4l2DqbufFtraceEvent*>(
      &from));
}

void Vb2V4l2DqbufFtraceEvent::MergeFrom(const Vb2V4l2DqbufFtraceEvent& from) {
  Vb2V4l2DqbufFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Vb2V4l2DqbufFtraceEvent::CopyFrom(const Vb2V4l2DqbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2DqbufFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2DqbufFtraceEvent::InternalSwap(Vb2V4l2DqbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2DqbufFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2DqbufFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2DqbufFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

std::string Vb2V4l2DqbufFtraceEvent::GetTypeName() const {
  return "perfetto.protos.Vb2V4l2DqbufFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::V4l2QbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::V4l2QbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::V4l2QbufFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::V4l2DqbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::V4l2DqbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::V4l2DqbufFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2QbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2QbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2QbufFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2DqbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2DqbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2DqbufFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
