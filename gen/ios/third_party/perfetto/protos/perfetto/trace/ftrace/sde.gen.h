// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SDE_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SDE_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class SdeSdePerfUpdateBusFtraceEvent;
class SdeSdePerfSetQosLutsFtraceEvent;
class SdeSdePerfCrtcUpdateFtraceEvent;
class SdeSdePerfCalcCrtcFtraceEvent;
class SdeSdeEvtlogFtraceEvent;
class SdeTracingMarkWriteFtraceEvent;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT SdeSdePerfUpdateBusFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kAbQuotaFieldNumber = 1,
    kBusIdFieldNumber = 2,
    kClientFieldNumber = 3,
    kIbQuotaFieldNumber = 4,
  };

  SdeSdePerfUpdateBusFtraceEvent();
  ~SdeSdePerfUpdateBusFtraceEvent() override;
  SdeSdePerfUpdateBusFtraceEvent(SdeSdePerfUpdateBusFtraceEvent&&) noexcept;
  SdeSdePerfUpdateBusFtraceEvent& operator=(SdeSdePerfUpdateBusFtraceEvent&&);
  SdeSdePerfUpdateBusFtraceEvent(const SdeSdePerfUpdateBusFtraceEvent&);
  SdeSdePerfUpdateBusFtraceEvent& operator=(const SdeSdePerfUpdateBusFtraceEvent&);
  bool operator==(const SdeSdePerfUpdateBusFtraceEvent&) const;
  bool operator!=(const SdeSdePerfUpdateBusFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_ab_quota() const { return _has_field_[1]; }
  uint64_t ab_quota() const { return ab_quota_; }
  void set_ab_quota(uint64_t value) { ab_quota_ = value; _has_field_.set(1); }

  bool has_bus_id() const { return _has_field_[2]; }
  uint32_t bus_id() const { return bus_id_; }
  void set_bus_id(uint32_t value) { bus_id_ = value; _has_field_.set(2); }

  bool has_client() const { return _has_field_[3]; }
  int32_t client() const { return client_; }
  void set_client(int32_t value) { client_ = value; _has_field_.set(3); }

  bool has_ib_quota() const { return _has_field_[4]; }
  uint64_t ib_quota() const { return ib_quota_; }
  void set_ib_quota(uint64_t value) { ib_quota_ = value; _has_field_.set(4); }

 private:
  uint64_t ab_quota_{};
  uint32_t bus_id_{};
  int32_t client_{};
  uint64_t ib_quota_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<5> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT SdeSdePerfSetQosLutsFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kFlFieldNumber = 1,
    kFmtFieldNumber = 2,
    kLutFieldNumber = 3,
    kLutUsageFieldNumber = 4,
    kPnumFieldNumber = 5,
    kRtFieldNumber = 6,
  };

  SdeSdePerfSetQosLutsFtraceEvent();
  ~SdeSdePerfSetQosLutsFtraceEvent() override;
  SdeSdePerfSetQosLutsFtraceEvent(SdeSdePerfSetQosLutsFtraceEvent&&) noexcept;
  SdeSdePerfSetQosLutsFtraceEvent& operator=(SdeSdePerfSetQosLutsFtraceEvent&&);
  SdeSdePerfSetQosLutsFtraceEvent(const SdeSdePerfSetQosLutsFtraceEvent&);
  SdeSdePerfSetQosLutsFtraceEvent& operator=(const SdeSdePerfSetQosLutsFtraceEvent&);
  bool operator==(const SdeSdePerfSetQosLutsFtraceEvent&) const;
  bool operator!=(const SdeSdePerfSetQosLutsFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_fl() const { return _has_field_[1]; }
  uint32_t fl() const { return fl_; }
  void set_fl(uint32_t value) { fl_ = value; _has_field_.set(1); }

  bool has_fmt() const { return _has_field_[2]; }
  uint32_t fmt() const { return fmt_; }
  void set_fmt(uint32_t value) { fmt_ = value; _has_field_.set(2); }

  bool has_lut() const { return _has_field_[3]; }
  uint64_t lut() const { return lut_; }
  void set_lut(uint64_t value) { lut_ = value; _has_field_.set(3); }

  bool has_lut_usage() const { return _has_field_[4]; }
  uint32_t lut_usage() const { return lut_usage_; }
  void set_lut_usage(uint32_t value) { lut_usage_ = value; _has_field_.set(4); }

  bool has_pnum() const { return _has_field_[5]; }
  uint32_t pnum() const { return pnum_; }
  void set_pnum(uint32_t value) { pnum_ = value; _has_field_.set(5); }

  bool has_rt() const { return _has_field_[6]; }
  uint32_t rt() const { return rt_; }
  void set_rt(uint32_t value) { rt_ = value; _has_field_.set(6); }

 private:
  uint32_t fl_{};
  uint32_t fmt_{};
  uint64_t lut_{};
  uint32_t lut_usage_{};
  uint32_t pnum_{};
  uint32_t rt_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<7> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT SdeSdePerfCrtcUpdateFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBwCtlEbiFieldNumber = 1,
    kBwCtlLlccFieldNumber = 2,
    kBwCtlMnocFieldNumber = 3,
    kCoreClkRateFieldNumber = 4,
    kCrtcFieldNumber = 5,
    kParamsFieldNumber = 6,
    kPerPipeIbEbiFieldNumber = 7,
    kPerPipeIbLlccFieldNumber = 8,
    kPerPipeIbMnocFieldNumber = 9,
    kStopReqFieldNumber = 10,
    kUpdateBusFieldNumber = 11,
    kUpdateClkFieldNumber = 12,
  };

  SdeSdePerfCrtcUpdateFtraceEvent();
  ~SdeSdePerfCrtcUpdateFtraceEvent() override;
  SdeSdePerfCrtcUpdateFtraceEvent(SdeSdePerfCrtcUpdateFtraceEvent&&) noexcept;
  SdeSdePerfCrtcUpdateFtraceEvent& operator=(SdeSdePerfCrtcUpdateFtraceEvent&&);
  SdeSdePerfCrtcUpdateFtraceEvent(const SdeSdePerfCrtcUpdateFtraceEvent&);
  SdeSdePerfCrtcUpdateFtraceEvent& operator=(const SdeSdePerfCrtcUpdateFtraceEvent&);
  bool operator==(const SdeSdePerfCrtcUpdateFtraceEvent&) const;
  bool operator!=(const SdeSdePerfCrtcUpdateFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_bw_ctl_ebi() const { return _has_field_[1]; }
  uint64_t bw_ctl_ebi() const { return bw_ctl_ebi_; }
  void set_bw_ctl_ebi(uint64_t value) { bw_ctl_ebi_ = value; _has_field_.set(1); }

  bool has_bw_ctl_llcc() const { return _has_field_[2]; }
  uint64_t bw_ctl_llcc() const { return bw_ctl_llcc_; }
  void set_bw_ctl_llcc(uint64_t value) { bw_ctl_llcc_ = value; _has_field_.set(2); }

  bool has_bw_ctl_mnoc() const { return _has_field_[3]; }
  uint64_t bw_ctl_mnoc() const { return bw_ctl_mnoc_; }
  void set_bw_ctl_mnoc(uint64_t value) { bw_ctl_mnoc_ = value; _has_field_.set(3); }

  bool has_core_clk_rate() const { return _has_field_[4]; }
  uint32_t core_clk_rate() const { return core_clk_rate_; }
  void set_core_clk_rate(uint32_t value) { core_clk_rate_ = value; _has_field_.set(4); }

  bool has_crtc() const { return _has_field_[5]; }
  uint32_t crtc() const { return crtc_; }
  void set_crtc(uint32_t value) { crtc_ = value; _has_field_.set(5); }

  bool has_params() const { return _has_field_[6]; }
  int32_t params() const { return params_; }
  void set_params(int32_t value) { params_ = value; _has_field_.set(6); }

  bool has_per_pipe_ib_ebi() const { return _has_field_[7]; }
  uint64_t per_pipe_ib_ebi() const { return per_pipe_ib_ebi_; }
  void set_per_pipe_ib_ebi(uint64_t value) { per_pipe_ib_ebi_ = value; _has_field_.set(7); }

  bool has_per_pipe_ib_llcc() const { return _has_field_[8]; }
  uint64_t per_pipe_ib_llcc() const { return per_pipe_ib_llcc_; }
  void set_per_pipe_ib_llcc(uint64_t value) { per_pipe_ib_llcc_ = value; _has_field_.set(8); }

  bool has_per_pipe_ib_mnoc() const { return _has_field_[9]; }
  uint64_t per_pipe_ib_mnoc() const { return per_pipe_ib_mnoc_; }
  void set_per_pipe_ib_mnoc(uint64_t value) { per_pipe_ib_mnoc_ = value; _has_field_.set(9); }

  bool has_stop_req() const { return _has_field_[10]; }
  uint32_t stop_req() const { return stop_req_; }
  void set_stop_req(uint32_t value) { stop_req_ = value; _has_field_.set(10); }

  bool has_update_bus() const { return _has_field_[11]; }
  uint32_t update_bus() const { return update_bus_; }
  void set_update_bus(uint32_t value) { update_bus_ = value; _has_field_.set(11); }

  bool has_update_clk() const { return _has_field_[12]; }
  uint32_t update_clk() const { return update_clk_; }
  void set_update_clk(uint32_t value) { update_clk_ = value; _has_field_.set(12); }

 private:
  uint64_t bw_ctl_ebi_{};
  uint64_t bw_ctl_llcc_{};
  uint64_t bw_ctl_mnoc_{};
  uint32_t core_clk_rate_{};
  uint32_t crtc_{};
  int32_t params_{};
  uint64_t per_pipe_ib_ebi_{};
  uint64_t per_pipe_ib_llcc_{};
  uint64_t per_pipe_ib_mnoc_{};
  uint32_t stop_req_{};
  uint32_t update_bus_{};
  uint32_t update_clk_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<13> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT SdeSdePerfCalcCrtcFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kBwCtlEbiFieldNumber = 1,
    kBwCtlLlccFieldNumber = 2,
    kBwCtlMnocFieldNumber = 3,
    kCoreClkRateFieldNumber = 4,
    kCrtcFieldNumber = 5,
    kIbEbiFieldNumber = 6,
    kIbLlccFieldNumber = 7,
    kIbMnocFieldNumber = 8,
  };

  SdeSdePerfCalcCrtcFtraceEvent();
  ~SdeSdePerfCalcCrtcFtraceEvent() override;
  SdeSdePerfCalcCrtcFtraceEvent(SdeSdePerfCalcCrtcFtraceEvent&&) noexcept;
  SdeSdePerfCalcCrtcFtraceEvent& operator=(SdeSdePerfCalcCrtcFtraceEvent&&);
  SdeSdePerfCalcCrtcFtraceEvent(const SdeSdePerfCalcCrtcFtraceEvent&);
  SdeSdePerfCalcCrtcFtraceEvent& operator=(const SdeSdePerfCalcCrtcFtraceEvent&);
  bool operator==(const SdeSdePerfCalcCrtcFtraceEvent&) const;
  bool operator!=(const SdeSdePerfCalcCrtcFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_bw_ctl_ebi() const { return _has_field_[1]; }
  uint64_t bw_ctl_ebi() const { return bw_ctl_ebi_; }
  void set_bw_ctl_ebi(uint64_t value) { bw_ctl_ebi_ = value; _has_field_.set(1); }

  bool has_bw_ctl_llcc() const { return _has_field_[2]; }
  uint64_t bw_ctl_llcc() const { return bw_ctl_llcc_; }
  void set_bw_ctl_llcc(uint64_t value) { bw_ctl_llcc_ = value; _has_field_.set(2); }

  bool has_bw_ctl_mnoc() const { return _has_field_[3]; }
  uint64_t bw_ctl_mnoc() const { return bw_ctl_mnoc_; }
  void set_bw_ctl_mnoc(uint64_t value) { bw_ctl_mnoc_ = value; _has_field_.set(3); }

  bool has_core_clk_rate() const { return _has_field_[4]; }
  uint32_t core_clk_rate() const { return core_clk_rate_; }
  void set_core_clk_rate(uint32_t value) { core_clk_rate_ = value; _has_field_.set(4); }

  bool has_crtc() const { return _has_field_[5]; }
  uint32_t crtc() const { return crtc_; }
  void set_crtc(uint32_t value) { crtc_ = value; _has_field_.set(5); }

  bool has_ib_ebi() const { return _has_field_[6]; }
  uint64_t ib_ebi() const { return ib_ebi_; }
  void set_ib_ebi(uint64_t value) { ib_ebi_ = value; _has_field_.set(6); }

  bool has_ib_llcc() const { return _has_field_[7]; }
  uint64_t ib_llcc() const { return ib_llcc_; }
  void set_ib_llcc(uint64_t value) { ib_llcc_ = value; _has_field_.set(7); }

  bool has_ib_mnoc() const { return _has_field_[8]; }
  uint64_t ib_mnoc() const { return ib_mnoc_; }
  void set_ib_mnoc(uint64_t value) { ib_mnoc_ = value; _has_field_.set(8); }

 private:
  uint64_t bw_ctl_ebi_{};
  uint64_t bw_ctl_llcc_{};
  uint64_t bw_ctl_mnoc_{};
  uint32_t core_clk_rate_{};
  uint32_t crtc_{};
  uint64_t ib_ebi_{};
  uint64_t ib_llcc_{};
  uint64_t ib_mnoc_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<9> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT SdeSdeEvtlogFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEvtlogTagFieldNumber = 1,
    kPidFieldNumber = 2,
    kTagIdFieldNumber = 3,
  };

  SdeSdeEvtlogFtraceEvent();
  ~SdeSdeEvtlogFtraceEvent() override;
  SdeSdeEvtlogFtraceEvent(SdeSdeEvtlogFtraceEvent&&) noexcept;
  SdeSdeEvtlogFtraceEvent& operator=(SdeSdeEvtlogFtraceEvent&&);
  SdeSdeEvtlogFtraceEvent(const SdeSdeEvtlogFtraceEvent&);
  SdeSdeEvtlogFtraceEvent& operator=(const SdeSdeEvtlogFtraceEvent&);
  bool operator==(const SdeSdeEvtlogFtraceEvent&) const;
  bool operator!=(const SdeSdeEvtlogFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_evtlog_tag() const { return _has_field_[1]; }
  const std::string& evtlog_tag() const { return evtlog_tag_; }
  void set_evtlog_tag(const std::string& value) { evtlog_tag_ = value; _has_field_.set(1); }

  bool has_pid() const { return _has_field_[2]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(2); }

  bool has_tag_id() const { return _has_field_[3]; }
  uint32_t tag_id() const { return tag_id_; }
  void set_tag_id(uint32_t value) { tag_id_ = value; _has_field_.set(3); }

 private:
  std::string evtlog_tag_{};
  int32_t pid_{};
  uint32_t tag_id_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<4> _has_field_{};
};


class PERFETTO_EXPORT_COMPONENT SdeTracingMarkWriteFtraceEvent : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kPidFieldNumber = 1,
    kTraceNameFieldNumber = 2,
    kTraceTypeFieldNumber = 3,
    kValueFieldNumber = 4,
    kTraceBeginFieldNumber = 5,
  };

  SdeTracingMarkWriteFtraceEvent();
  ~SdeTracingMarkWriteFtraceEvent() override;
  SdeTracingMarkWriteFtraceEvent(SdeTracingMarkWriteFtraceEvent&&) noexcept;
  SdeTracingMarkWriteFtraceEvent& operator=(SdeTracingMarkWriteFtraceEvent&&);
  SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent&);
  SdeTracingMarkWriteFtraceEvent& operator=(const SdeTracingMarkWriteFtraceEvent&);
  bool operator==(const SdeTracingMarkWriteFtraceEvent&) const;
  bool operator!=(const SdeTracingMarkWriteFtraceEvent& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  bool has_pid() const { return _has_field_[1]; }
  int32_t pid() const { return pid_; }
  void set_pid(int32_t value) { pid_ = value; _has_field_.set(1); }

  bool has_trace_name() const { return _has_field_[2]; }
  const std::string& trace_name() const { return trace_name_; }
  void set_trace_name(const std::string& value) { trace_name_ = value; _has_field_.set(2); }

  bool has_trace_type() const { return _has_field_[3]; }
  uint32_t trace_type() const { return trace_type_; }
  void set_trace_type(uint32_t value) { trace_type_ = value; _has_field_.set(3); }

  bool has_value() const { return _has_field_[4]; }
  int32_t value() const { return value_; }
  void set_value(int32_t value) { value_ = value; _has_field_.set(4); }

  bool has_trace_begin() const { return _has_field_[5]; }
  uint32_t trace_begin() const { return trace_begin_; }
  void set_trace_begin(uint32_t value) { trace_begin_ = value; _has_field_.set(5); }

 private:
  int32_t pid_{};
  std::string trace_name_{};
  uint32_t trace_type_{};
  int32_t value_{};
  uint32_t trace_begin_{};

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<6> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_FTRACE_SDE_PROTO_CPP_H_
