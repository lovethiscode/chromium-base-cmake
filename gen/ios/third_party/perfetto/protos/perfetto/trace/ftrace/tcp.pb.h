// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/tcp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftcp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftcp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ftcp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftcp_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class TcpRetransmitSkbFtraceEvent;
struct TcpRetransmitSkbFtraceEventDefaultTypeInternal;
extern TcpRetransmitSkbFtraceEventDefaultTypeInternal _TcpRetransmitSkbFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TcpRetransmitSkbFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TcpRetransmitSkbFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TcpRetransmitSkbFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TcpRetransmitSkbFtraceEvent) */ {
 public:
  inline TcpRetransmitSkbFtraceEvent() : TcpRetransmitSkbFtraceEvent(nullptr) {}
  ~TcpRetransmitSkbFtraceEvent() override;
  explicit PROTOBUF_CONSTEXPR TcpRetransmitSkbFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TcpRetransmitSkbFtraceEvent(const TcpRetransmitSkbFtraceEvent& from);
  TcpRetransmitSkbFtraceEvent(TcpRetransmitSkbFtraceEvent&& from) noexcept
    : TcpRetransmitSkbFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TcpRetransmitSkbFtraceEvent& operator=(const TcpRetransmitSkbFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TcpRetransmitSkbFtraceEvent& operator=(TcpRetransmitSkbFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TcpRetransmitSkbFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TcpRetransmitSkbFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TcpRetransmitSkbFtraceEvent*>(
               &_TcpRetransmitSkbFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TcpRetransmitSkbFtraceEvent& a, TcpRetransmitSkbFtraceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TcpRetransmitSkbFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TcpRetransmitSkbFtraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TcpRetransmitSkbFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TcpRetransmitSkbFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TcpRetransmitSkbFtraceEvent& from);
  void MergeFrom(const TcpRetransmitSkbFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TcpRetransmitSkbFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TcpRetransmitSkbFtraceEvent";
  }
  protected:
  explicit TcpRetransmitSkbFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaddrFieldNumber = 1,
    kDportFieldNumber = 2,
    kSkaddrFieldNumber = 4,
    kSaddrFieldNumber = 3,
    kSportFieldNumber = 6,
    kSkbaddrFieldNumber = 5,
    kStateFieldNumber = 7,
  };
  // optional uint32 daddr = 1;
  bool has_daddr() const;
  private:
  bool _internal_has_daddr() const;
  public:
  void clear_daddr();
  uint32_t daddr() const;
  void set_daddr(uint32_t value);
  private:
  uint32_t _internal_daddr() const;
  void _internal_set_daddr(uint32_t value);
  public:

  // optional uint32 dport = 2;
  bool has_dport() const;
  private:
  bool _internal_has_dport() const;
  public:
  void clear_dport();
  uint32_t dport() const;
  void set_dport(uint32_t value);
  private:
  uint32_t _internal_dport() const;
  void _internal_set_dport(uint32_t value);
  public:

  // optional uint64 skaddr = 4;
  bool has_skaddr() const;
  private:
  bool _internal_has_skaddr() const;
  public:
  void clear_skaddr();
  uint64_t skaddr() const;
  void set_skaddr(uint64_t value);
  private:
  uint64_t _internal_skaddr() const;
  void _internal_set_skaddr(uint64_t value);
  public:

  // optional uint32 saddr = 3;
  bool has_saddr() const;
  private:
  bool _internal_has_saddr() const;
  public:
  void clear_saddr();
  uint32_t saddr() const;
  void set_saddr(uint32_t value);
  private:
  uint32_t _internal_saddr() const;
  void _internal_set_saddr(uint32_t value);
  public:

  // optional uint32 sport = 6;
  bool has_sport() const;
  private:
  bool _internal_has_sport() const;
  public:
  void clear_sport();
  uint32_t sport() const;
  void set_sport(uint32_t value);
  private:
  uint32_t _internal_sport() const;
  void _internal_set_sport(uint32_t value);
  public:

  // optional uint64 skbaddr = 5;
  bool has_skbaddr() const;
  private:
  bool _internal_has_skbaddr() const;
  public:
  void clear_skbaddr();
  uint64_t skbaddr() const;
  void set_skbaddr(uint64_t value);
  private:
  uint64_t _internal_skbaddr() const;
  void _internal_set_skbaddr(uint64_t value);
  public:

  // optional int32 state = 7;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TcpRetransmitSkbFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t daddr_;
    uint32_t dport_;
    uint64_t skaddr_;
    uint32_t saddr_;
    uint32_t sport_;
    uint64_t skbaddr_;
    int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftcp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TcpRetransmitSkbFtraceEvent

// optional uint32 daddr = 1;
inline bool TcpRetransmitSkbFtraceEvent::_internal_has_daddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TcpRetransmitSkbFtraceEvent::has_daddr() const {
  return _internal_has_daddr();
}
inline void TcpRetransmitSkbFtraceEvent::clear_daddr() {
  _impl_.daddr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::_internal_daddr() const {
  return _impl_.daddr_;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::daddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TcpRetransmitSkbFtraceEvent.daddr)
  return _internal_daddr();
}
inline void TcpRetransmitSkbFtraceEvent::_internal_set_daddr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.daddr_ = value;
}
inline void TcpRetransmitSkbFtraceEvent::set_daddr(uint32_t value) {
  _internal_set_daddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TcpRetransmitSkbFtraceEvent.daddr)
}

// optional uint32 dport = 2;
inline bool TcpRetransmitSkbFtraceEvent::_internal_has_dport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TcpRetransmitSkbFtraceEvent::has_dport() const {
  return _internal_has_dport();
}
inline void TcpRetransmitSkbFtraceEvent::clear_dport() {
  _impl_.dport_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::_internal_dport() const {
  return _impl_.dport_;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::dport() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TcpRetransmitSkbFtraceEvent.dport)
  return _internal_dport();
}
inline void TcpRetransmitSkbFtraceEvent::_internal_set_dport(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dport_ = value;
}
inline void TcpRetransmitSkbFtraceEvent::set_dport(uint32_t value) {
  _internal_set_dport(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TcpRetransmitSkbFtraceEvent.dport)
}

// optional uint32 saddr = 3;
inline bool TcpRetransmitSkbFtraceEvent::_internal_has_saddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TcpRetransmitSkbFtraceEvent::has_saddr() const {
  return _internal_has_saddr();
}
inline void TcpRetransmitSkbFtraceEvent::clear_saddr() {
  _impl_.saddr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::_internal_saddr() const {
  return _impl_.saddr_;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::saddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TcpRetransmitSkbFtraceEvent.saddr)
  return _internal_saddr();
}
inline void TcpRetransmitSkbFtraceEvent::_internal_set_saddr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.saddr_ = value;
}
inline void TcpRetransmitSkbFtraceEvent::set_saddr(uint32_t value) {
  _internal_set_saddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TcpRetransmitSkbFtraceEvent.saddr)
}

// optional uint64 skaddr = 4;
inline bool TcpRetransmitSkbFtraceEvent::_internal_has_skaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TcpRetransmitSkbFtraceEvent::has_skaddr() const {
  return _internal_has_skaddr();
}
inline void TcpRetransmitSkbFtraceEvent::clear_skaddr() {
  _impl_.skaddr_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t TcpRetransmitSkbFtraceEvent::_internal_skaddr() const {
  return _impl_.skaddr_;
}
inline uint64_t TcpRetransmitSkbFtraceEvent::skaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TcpRetransmitSkbFtraceEvent.skaddr)
  return _internal_skaddr();
}
inline void TcpRetransmitSkbFtraceEvent::_internal_set_skaddr(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.skaddr_ = value;
}
inline void TcpRetransmitSkbFtraceEvent::set_skaddr(uint64_t value) {
  _internal_set_skaddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TcpRetransmitSkbFtraceEvent.skaddr)
}

// optional uint64 skbaddr = 5;
inline bool TcpRetransmitSkbFtraceEvent::_internal_has_skbaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TcpRetransmitSkbFtraceEvent::has_skbaddr() const {
  return _internal_has_skbaddr();
}
inline void TcpRetransmitSkbFtraceEvent::clear_skbaddr() {
  _impl_.skbaddr_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t TcpRetransmitSkbFtraceEvent::_internal_skbaddr() const {
  return _impl_.skbaddr_;
}
inline uint64_t TcpRetransmitSkbFtraceEvent::skbaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TcpRetransmitSkbFtraceEvent.skbaddr)
  return _internal_skbaddr();
}
inline void TcpRetransmitSkbFtraceEvent::_internal_set_skbaddr(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.skbaddr_ = value;
}
inline void TcpRetransmitSkbFtraceEvent::set_skbaddr(uint64_t value) {
  _internal_set_skbaddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TcpRetransmitSkbFtraceEvent.skbaddr)
}

// optional uint32 sport = 6;
inline bool TcpRetransmitSkbFtraceEvent::_internal_has_sport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TcpRetransmitSkbFtraceEvent::has_sport() const {
  return _internal_has_sport();
}
inline void TcpRetransmitSkbFtraceEvent::clear_sport() {
  _impl_.sport_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::_internal_sport() const {
  return _impl_.sport_;
}
inline uint32_t TcpRetransmitSkbFtraceEvent::sport() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TcpRetransmitSkbFtraceEvent.sport)
  return _internal_sport();
}
inline void TcpRetransmitSkbFtraceEvent::_internal_set_sport(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sport_ = value;
}
inline void TcpRetransmitSkbFtraceEvent::set_sport(uint32_t value) {
  _internal_set_sport(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TcpRetransmitSkbFtraceEvent.sport)
}

// optional int32 state = 7;
inline bool TcpRetransmitSkbFtraceEvent::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TcpRetransmitSkbFtraceEvent::has_state() const {
  return _internal_has_state();
}
inline void TcpRetransmitSkbFtraceEvent::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t TcpRetransmitSkbFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline int32_t TcpRetransmitSkbFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TcpRetransmitSkbFtraceEvent.state)
  return _internal_state();
}
inline void TcpRetransmitSkbFtraceEvent::_internal_set_state(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.state_ = value;
}
inline void TcpRetransmitSkbFtraceEvent::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TcpRetransmitSkbFtraceEvent.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftcp_2eproto
