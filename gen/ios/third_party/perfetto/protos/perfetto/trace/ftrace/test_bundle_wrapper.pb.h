// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/test_bundle_wrapper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftest_5fbundle_5fwrapper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftest_5fbundle_5fwrapper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ftest_5fbundle_5fwrapper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftest_5fbundle_5fwrapper_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class TestBundleWrapper;
struct TestBundleWrapperDefaultTypeInternal;
extern TestBundleWrapperDefaultTypeInternal _TestBundleWrapper_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TestBundleWrapper* Arena::CreateMaybeMessage<::perfetto::protos::TestBundleWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TestBundleWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestBundleWrapper) */ {
 public:
  inline TestBundleWrapper() : TestBundleWrapper(nullptr) {}
  ~TestBundleWrapper() override;
  explicit PROTOBUF_CONSTEXPR TestBundleWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestBundleWrapper(const TestBundleWrapper& from);
  TestBundleWrapper(TestBundleWrapper&& from) noexcept
    : TestBundleWrapper() {
    *this = ::std::move(from);
  }

  inline TestBundleWrapper& operator=(const TestBundleWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestBundleWrapper& operator=(TestBundleWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TestBundleWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestBundleWrapper* internal_default_instance() {
    return reinterpret_cast<const TestBundleWrapper*>(
               &_TestBundleWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestBundleWrapper& a, TestBundleWrapper& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TestBundleWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestBundleWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestBundleWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestBundleWrapper>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TestBundleWrapper& from);
  void MergeFrom(const TestBundleWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestBundleWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TestBundleWrapper";
  }
  protected:
  explicit TestBundleWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBundleFieldNumber = 2,
    kBeforeFieldNumber = 1,
    kAfterFieldNumber = 3,
  };
  // repeated .perfetto.protos.FtraceEventBundle bundle = 2;
  int bundle_size() const;
  private:
  int _internal_bundle_size() const;
  public:
  void clear_bundle();
  ::perfetto::protos::FtraceEventBundle* mutable_bundle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle >*
      mutable_bundle();
  private:
  const ::perfetto::protos::FtraceEventBundle& _internal_bundle(int index) const;
  ::perfetto::protos::FtraceEventBundle* _internal_add_bundle();
  public:
  const ::perfetto::protos::FtraceEventBundle& bundle(int index) const;
  ::perfetto::protos::FtraceEventBundle* add_bundle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle >&
      bundle() const;

  // optional string before = 1;
  bool has_before() const;
  private:
  bool _internal_has_before() const;
  public:
  void clear_before();
  const std::string& before() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_before(ArgT0&& arg0, ArgT... args);
  std::string* mutable_before();
  PROTOBUF_NODISCARD std::string* release_before();
  void set_allocated_before(std::string* before);
  private:
  const std::string& _internal_before() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_before(const std::string& value);
  std::string* _internal_mutable_before();
  public:

  // optional string after = 3;
  bool has_after() const;
  private:
  bool _internal_has_after() const;
  public:
  void clear_after();
  const std::string& after() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_after(ArgT0&& arg0, ArgT... args);
  std::string* mutable_after();
  PROTOBUF_NODISCARD std::string* release_after();
  void set_allocated_after(std::string* after);
  private:
  const std::string& _internal_after() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_after(const std::string& value);
  std::string* _internal_mutable_after();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TestBundleWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle > bundle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr before_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr after_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftest_5fbundle_5fwrapper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestBundleWrapper

// optional string before = 1;
inline bool TestBundleWrapper::_internal_has_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestBundleWrapper::has_before() const {
  return _internal_has_before();
}
inline void TestBundleWrapper::clear_before() {
  _impl_.before_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestBundleWrapper::before() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestBundleWrapper.before)
  return _internal_before();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestBundleWrapper::set_before(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.before_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TestBundleWrapper.before)
}
inline std::string* TestBundleWrapper::mutable_before() {
  std::string* _s = _internal_mutable_before();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestBundleWrapper.before)
  return _s;
}
inline const std::string& TestBundleWrapper::_internal_before() const {
  return _impl_.before_.Get();
}
inline void TestBundleWrapper::_internal_set_before(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.before_.Set(value, GetArenaForAllocation());
}
inline std::string* TestBundleWrapper::_internal_mutable_before() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.before_.Mutable(GetArenaForAllocation());
}
inline std::string* TestBundleWrapper::release_before() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestBundleWrapper.before)
  if (!_internal_has_before()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.before_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.before_.IsDefault()) {
    _impl_.before_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestBundleWrapper::set_allocated_before(std::string* before) {
  if (before != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.before_.SetAllocated(before, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.before_.IsDefault()) {
    _impl_.before_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestBundleWrapper.before)
}

// repeated .perfetto.protos.FtraceEventBundle bundle = 2;
inline int TestBundleWrapper::_internal_bundle_size() const {
  return _impl_.bundle_.size();
}
inline int TestBundleWrapper::bundle_size() const {
  return _internal_bundle_size();
}
inline ::perfetto::protos::FtraceEventBundle* TestBundleWrapper::mutable_bundle(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestBundleWrapper.bundle)
  return _impl_.bundle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle >*
TestBundleWrapper::mutable_bundle() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TestBundleWrapper.bundle)
  return &_impl_.bundle_;
}
inline const ::perfetto::protos::FtraceEventBundle& TestBundleWrapper::_internal_bundle(int index) const {
  return _impl_.bundle_.Get(index);
}
inline const ::perfetto::protos::FtraceEventBundle& TestBundleWrapper::bundle(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestBundleWrapper.bundle)
  return _internal_bundle(index);
}
inline ::perfetto::protos::FtraceEventBundle* TestBundleWrapper::_internal_add_bundle() {
  return _impl_.bundle_.Add();
}
inline ::perfetto::protos::FtraceEventBundle* TestBundleWrapper::add_bundle() {
  ::perfetto::protos::FtraceEventBundle* _add = _internal_add_bundle();
  // @@protoc_insertion_point(field_add:perfetto.protos.TestBundleWrapper.bundle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEventBundle >&
TestBundleWrapper::bundle() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TestBundleWrapper.bundle)
  return _impl_.bundle_;
}

// optional string after = 3;
inline bool TestBundleWrapper::_internal_has_after() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestBundleWrapper::has_after() const {
  return _internal_has_after();
}
inline void TestBundleWrapper::clear_after() {
  _impl_.after_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestBundleWrapper::after() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestBundleWrapper.after)
  return _internal_after();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestBundleWrapper::set_after(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.after_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TestBundleWrapper.after)
}
inline std::string* TestBundleWrapper::mutable_after() {
  std::string* _s = _internal_mutable_after();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestBundleWrapper.after)
  return _s;
}
inline const std::string& TestBundleWrapper::_internal_after() const {
  return _impl_.after_.Get();
}
inline void TestBundleWrapper::_internal_set_after(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.after_.Set(value, GetArenaForAllocation());
}
inline std::string* TestBundleWrapper::_internal_mutable_after() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.after_.Mutable(GetArenaForAllocation());
}
inline std::string* TestBundleWrapper::release_after() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestBundleWrapper.after)
  if (!_internal_has_after()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.after_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.after_.IsDefault()) {
    _impl_.after_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestBundleWrapper::set_allocated_after(std::string* after) {
  if (after != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.after_.SetAllocated(after, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.after_.IsDefault()) {
    _impl_.after_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestBundleWrapper.after)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftest_5fbundle_5fwrapper_2eproto
