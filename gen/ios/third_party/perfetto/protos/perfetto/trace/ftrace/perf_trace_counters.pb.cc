// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/perf_trace_counters.proto

#include "protos/perfetto/trace/ftrace/perf_trace_counters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR SchedSwitchWithCtrsFtraceEvent::SchedSwitchWithCtrsFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prev_comm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_pid_)*/0
  , /*decltype(_impl_.new_pid_)*/0
  , /*decltype(_impl_.cctr_)*/0u
  , /*decltype(_impl_.ctr0_)*/0u
  , /*decltype(_impl_.ctr1_)*/0u
  , /*decltype(_impl_.ctr2_)*/0u
  , /*decltype(_impl_.ctr3_)*/0u
  , /*decltype(_impl_.lctr0_)*/0u
  , /*decltype(_impl_.lctr1_)*/0u
  , /*decltype(_impl_.ctr4_)*/0u
  , /*decltype(_impl_.ctr5_)*/0u
  , /*decltype(_impl_.prev_pid_)*/0
  , /*decltype(_impl_.cyc_)*/0u
  , /*decltype(_impl_.inst_)*/0u
  , /*decltype(_impl_.stallbm_)*/0u
  , /*decltype(_impl_.l3dm_)*/0u} {}
struct SchedSwitchWithCtrsFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchedSwitchWithCtrsFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchedSwitchWithCtrsFtraceEventDefaultTypeInternal() {}
  union {
    SchedSwitchWithCtrsFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchedSwitchWithCtrsFtraceEventDefaultTypeInternal _SchedSwitchWithCtrsFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class SchedSwitchWithCtrsFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SchedSwitchWithCtrsFtraceEvent>()._impl_._has_bits_);
  static void set_has_old_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cctr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ctr0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ctr1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ctr2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ctr3(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lctr0(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lctr1(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ctr4(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ctr5(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_prev_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cyc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_inst(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_stallbm(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_l3dm(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

SchedSwitchWithCtrsFtraceEvent::SchedSwitchWithCtrsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
}
SchedSwitchWithCtrsFtraceEvent::SchedSwitchWithCtrsFtraceEvent(const SchedSwitchWithCtrsFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SchedSwitchWithCtrsFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prev_comm_){}
    , decltype(_impl_.old_pid_){}
    , decltype(_impl_.new_pid_){}
    , decltype(_impl_.cctr_){}
    , decltype(_impl_.ctr0_){}
    , decltype(_impl_.ctr1_){}
    , decltype(_impl_.ctr2_){}
    , decltype(_impl_.ctr3_){}
    , decltype(_impl_.lctr0_){}
    , decltype(_impl_.lctr1_){}
    , decltype(_impl_.ctr4_){}
    , decltype(_impl_.ctr5_){}
    , decltype(_impl_.prev_pid_){}
    , decltype(_impl_.cyc_){}
    , decltype(_impl_.inst_){}
    , decltype(_impl_.stallbm_){}
    , decltype(_impl_.l3dm_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prev_comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prev_comm()) {
    _this->_impl_.prev_comm_.Set(from._internal_prev_comm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.old_pid_, &from._impl_.old_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.l3dm_) -
    reinterpret_cast<char*>(&_impl_.old_pid_)) + sizeof(_impl_.l3dm_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
}

inline void SchedSwitchWithCtrsFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prev_comm_){}
    , decltype(_impl_.old_pid_){0}
    , decltype(_impl_.new_pid_){0}
    , decltype(_impl_.cctr_){0u}
    , decltype(_impl_.ctr0_){0u}
    , decltype(_impl_.ctr1_){0u}
    , decltype(_impl_.ctr2_){0u}
    , decltype(_impl_.ctr3_){0u}
    , decltype(_impl_.lctr0_){0u}
    , decltype(_impl_.lctr1_){0u}
    , decltype(_impl_.ctr4_){0u}
    , decltype(_impl_.ctr5_){0u}
    , decltype(_impl_.prev_pid_){0}
    , decltype(_impl_.cyc_){0u}
    , decltype(_impl_.inst_){0u}
    , decltype(_impl_.stallbm_){0u}
    , decltype(_impl_.l3dm_){0u}
  };
  _impl_.prev_comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_comm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SchedSwitchWithCtrsFtraceEvent::~SchedSwitchWithCtrsFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SchedSwitchWithCtrsFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prev_comm_.Destroy();
}

void SchedSwitchWithCtrsFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SchedSwitchWithCtrsFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.prev_comm_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.old_pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ctr3_) -
        reinterpret_cast<char*>(&_impl_.old_pid_)) + sizeof(_impl_.ctr3_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.lctr0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stallbm_) -
        reinterpret_cast<char*>(&_impl_.lctr0_)) + sizeof(_impl_.stallbm_));
  }
  _impl_.l3dm_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SchedSwitchWithCtrsFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 old_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_old_pid(&has_bits);
          _impl_.old_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_pid(&has_bits);
          _impl_.new_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cctr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cctr(&has_bits);
          _impl_.cctr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctr0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ctr0(&has_bits);
          _impl_.ctr0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctr1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ctr1(&has_bits);
          _impl_.ctr1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctr2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ctr2(&has_bits);
          _impl_.ctr2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctr3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ctr3(&has_bits);
          _impl_.ctr3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lctr0 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_lctr0(&has_bits);
          _impl_.lctr0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lctr1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_lctr1(&has_bits);
          _impl_.lctr1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctr4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ctr4(&has_bits);
          _impl_.ctr4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ctr5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ctr5(&has_bits);
          _impl_.ctr5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string prev_comm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_prev_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 prev_pid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_prev_pid(&has_bits);
          _impl_.prev_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cyc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_cyc(&has_bits);
          _impl_.cyc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inst = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_inst(&has_bits);
          _impl_.inst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stallbm = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_stallbm(&has_bits);
          _impl_.stallbm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 l3dm = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_l3dm(&has_bits);
          _impl_.l3dm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SchedSwitchWithCtrsFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 old_pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_old_pid(), target);
  }

  // optional int32 new_pid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_pid(), target);
  }

  // optional uint32 cctr = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cctr(), target);
  }

  // optional uint32 ctr0 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ctr0(), target);
  }

  // optional uint32 ctr1 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ctr1(), target);
  }

  // optional uint32 ctr2 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ctr2(), target);
  }

  // optional uint32 ctr3 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ctr3(), target);
  }

  // optional uint32 lctr0 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lctr0(), target);
  }

  // optional uint32 lctr1 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_lctr1(), target);
  }

  // optional uint32 ctr4 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ctr4(), target);
  }

  // optional uint32 ctr5 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ctr5(), target);
  }

  // optional string prev_comm = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_prev_comm(), target);
  }

  // optional int32 prev_pid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_prev_pid(), target);
  }

  // optional uint32 cyc = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_cyc(), target);
  }

  // optional uint32 inst = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_inst(), target);
  }

  // optional uint32 stallbm = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_stallbm(), target);
  }

  // optional uint32 l3dm = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_l3dm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
  return target;
}

size_t SchedSwitchWithCtrsFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string prev_comm = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prev_comm());
    }

    // optional int32 old_pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_old_pid());
    }

    // optional int32 new_pid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_pid());
    }

    // optional uint32 cctr = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cctr());
    }

    // optional uint32 ctr0 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctr0());
    }

    // optional uint32 ctr1 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctr1());
    }

    // optional uint32 ctr2 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctr2());
    }

    // optional uint32 ctr3 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctr3());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 lctr0 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lctr0());
    }

    // optional uint32 lctr1 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lctr1());
    }

    // optional uint32 ctr4 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctr4());
    }

    // optional uint32 ctr5 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctr5());
    }

    // optional int32 prev_pid = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prev_pid());
    }

    // optional uint32 cyc = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cyc());
    }

    // optional uint32 inst = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inst());
    }

    // optional uint32 stallbm = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_stallbm());
    }

  }
  // optional uint32 l3dm = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_l3dm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchedSwitchWithCtrsFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SchedSwitchWithCtrsFtraceEvent*>(
      &from));
}

void SchedSwitchWithCtrsFtraceEvent::MergeFrom(const SchedSwitchWithCtrsFtraceEvent& from) {
  SchedSwitchWithCtrsFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_prev_comm(from._internal_prev_comm());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.old_pid_ = from._impl_.old_pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.new_pid_ = from._impl_.new_pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cctr_ = from._impl_.cctr_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ctr0_ = from._impl_.ctr0_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ctr1_ = from._impl_.ctr1_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ctr2_ = from._impl_.ctr2_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ctr3_ = from._impl_.ctr3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.lctr0_ = from._impl_.lctr0_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lctr1_ = from._impl_.lctr1_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ctr4_ = from._impl_.ctr4_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ctr5_ = from._impl_.ctr5_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.prev_pid_ = from._impl_.prev_pid_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.cyc_ = from._impl_.cyc_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.inst_ = from._impl_.inst_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.stallbm_ = from._impl_.stallbm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_l3dm(from._internal_l3dm());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SchedSwitchWithCtrsFtraceEvent::CopyFrom(const SchedSwitchWithCtrsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SchedSwitchWithCtrsFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedSwitchWithCtrsFtraceEvent::IsInitialized() const {
  return true;
}

void SchedSwitchWithCtrsFtraceEvent::InternalSwap(SchedSwitchWithCtrsFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_comm_, lhs_arena,
      &other->_impl_.prev_comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchedSwitchWithCtrsFtraceEvent, _impl_.l3dm_)
      + sizeof(SchedSwitchWithCtrsFtraceEvent::_impl_.l3dm_)
      - PROTOBUF_FIELD_OFFSET(SchedSwitchWithCtrsFtraceEvent, _impl_.old_pid_)>(
          reinterpret_cast<char*>(&_impl_.old_pid_),
          reinterpret_cast<char*>(&other->_impl_.old_pid_));
}

std::string SchedSwitchWithCtrsFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SchedSwitchWithCtrsFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SchedSwitchWithCtrsFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SchedSwitchWithCtrsFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SchedSwitchWithCtrsFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
