// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/drm.proto

#include "protos/perfetto/trace/ftrace/drm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR DrmVblankEventFtraceEvent::DrmVblankEventFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.crtc_)*/0
  , /*decltype(_impl_.high_prec_)*/0u
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.seq_)*/0u} {}
struct DrmVblankEventFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrmVblankEventFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrmVblankEventFtraceEventDefaultTypeInternal() {}
  union {
    DrmVblankEventFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrmVblankEventFtraceEventDefaultTypeInternal _DrmVblankEventFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR DrmVblankEventDeliveredFtraceEvent::DrmVblankEventDeliveredFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_)*/uint64_t{0u}
  , /*decltype(_impl_.crtc_)*/0
  , /*decltype(_impl_.seq_)*/0u} {}
struct DrmVblankEventDeliveredFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrmVblankEventDeliveredFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrmVblankEventDeliveredFtraceEventDefaultTypeInternal() {}
  union {
    DrmVblankEventDeliveredFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrmVblankEventDeliveredFtraceEventDefaultTypeInternal _DrmVblankEventDeliveredFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class DrmVblankEventFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DrmVblankEventFtraceEvent>()._impl_._has_bits_);
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high_prec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DrmVblankEventFtraceEvent::DrmVblankEventFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DrmVblankEventFtraceEvent)
}
DrmVblankEventFtraceEvent::DrmVblankEventFtraceEvent(const DrmVblankEventFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DrmVblankEventFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crtc_){}
    , decltype(_impl_.high_prec_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.seq_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.crtc_, &from._impl_.crtc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seq_) -
    reinterpret_cast<char*>(&_impl_.crtc_)) + sizeof(_impl_.seq_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DrmVblankEventFtraceEvent)
}

inline void DrmVblankEventFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crtc_){0}
    , decltype(_impl_.high_prec_){0u}
    , decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.seq_){0u}
  };
}

DrmVblankEventFtraceEvent::~DrmVblankEventFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DrmVblankEventFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrmVblankEventFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DrmVblankEventFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrmVblankEventFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DrmVblankEventFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.crtc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seq_) -
        reinterpret_cast<char*>(&_impl_.crtc_)) + sizeof(_impl_.seq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DrmVblankEventFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 crtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_crtc(&has_bits);
          _impl_.crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 high_prec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_high_prec(&has_bits);
          _impl_.high_prec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrmVblankEventFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DrmVblankEventFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 crtc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_crtc(), target);
  }

  // optional uint32 high_prec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_high_prec(), target);
  }

  // optional uint32 seq = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seq(), target);
  }

  // optional int64 time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DrmVblankEventFtraceEvent)
  return target;
}

size_t DrmVblankEventFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DrmVblankEventFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 crtc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_crtc());
    }

    // optional uint32 high_prec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_high_prec());
    }

    // optional int64 time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
    }

    // optional uint32 seq = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrmVblankEventFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DrmVblankEventFtraceEvent*>(
      &from));
}

void DrmVblankEventFtraceEvent::MergeFrom(const DrmVblankEventFtraceEvent& from) {
  DrmVblankEventFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DrmVblankEventFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.crtc_ = from._impl_.crtc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.high_prec_ = from._impl_.high_prec_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DrmVblankEventFtraceEvent::CopyFrom(const DrmVblankEventFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DrmVblankEventFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrmVblankEventFtraceEvent::IsInitialized() const {
  return true;
}

void DrmVblankEventFtraceEvent::InternalSwap(DrmVblankEventFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrmVblankEventFtraceEvent, _impl_.seq_)
      + sizeof(DrmVblankEventFtraceEvent::_impl_.seq_)
      - PROTOBUF_FIELD_OFFSET(DrmVblankEventFtraceEvent, _impl_.crtc_)>(
          reinterpret_cast<char*>(&_impl_.crtc_),
          reinterpret_cast<char*>(&other->_impl_.crtc_));
}

std::string DrmVblankEventFtraceEvent::GetTypeName() const {
  return "perfetto.protos.DrmVblankEventFtraceEvent";
}


// ===================================================================

class DrmVblankEventDeliveredFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DrmVblankEventDeliveredFtraceEvent>()._impl_._has_bits_);
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DrmVblankEventDeliveredFtraceEvent::DrmVblankEventDeliveredFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
}
DrmVblankEventDeliveredFtraceEvent::DrmVblankEventDeliveredFtraceEvent(const DrmVblankEventDeliveredFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DrmVblankEventDeliveredFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_){}
    , decltype(_impl_.crtc_){}
    , decltype(_impl_.seq_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.file_, &from._impl_.file_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seq_) -
    reinterpret_cast<char*>(&_impl_.file_)) + sizeof(_impl_.seq_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
}

inline void DrmVblankEventDeliveredFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_){uint64_t{0u}}
    , decltype(_impl_.crtc_){0}
    , decltype(_impl_.seq_){0u}
  };
}

DrmVblankEventDeliveredFtraceEvent::~DrmVblankEventDeliveredFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrmVblankEventDeliveredFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DrmVblankEventDeliveredFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrmVblankEventDeliveredFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.file_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seq_) -
        reinterpret_cast<char*>(&_impl_.file_)) + sizeof(_impl_.seq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DrmVblankEventDeliveredFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 crtc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_crtc(&has_bits);
          _impl_.crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file(&has_bits);
          _impl_.file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrmVblankEventDeliveredFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 crtc = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_crtc(), target);
  }

  // optional uint64 file = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_file(), target);
  }

  // optional uint32 seq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
  return target;
}

size_t DrmVblankEventDeliveredFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file());
    }

    // optional int32 crtc = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_crtc());
    }

    // optional uint32 seq = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrmVblankEventDeliveredFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DrmVblankEventDeliveredFtraceEvent*>(
      &from));
}

void DrmVblankEventDeliveredFtraceEvent::MergeFrom(const DrmVblankEventDeliveredFtraceEvent& from) {
  DrmVblankEventDeliveredFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.file_ = from._impl_.file_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.crtc_ = from._impl_.crtc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DrmVblankEventDeliveredFtraceEvent::CopyFrom(const DrmVblankEventDeliveredFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrmVblankEventDeliveredFtraceEvent::IsInitialized() const {
  return true;
}

void DrmVblankEventDeliveredFtraceEvent::InternalSwap(DrmVblankEventDeliveredFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrmVblankEventDeliveredFtraceEvent, _impl_.seq_)
      + sizeof(DrmVblankEventDeliveredFtraceEvent::_impl_.seq_)
      - PROTOBUF_FIELD_OFFSET(DrmVblankEventDeliveredFtraceEvent, _impl_.file_)>(
          reinterpret_cast<char*>(&_impl_.file_),
          reinterpret_cast<char*>(&other->_impl_.file_));
}

std::string DrmVblankEventDeliveredFtraceEvent::GetTypeName() const {
  return "perfetto.protos.DrmVblankEventDeliveredFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::DrmVblankEventFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::DrmVblankEventFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DrmVblankEventFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
