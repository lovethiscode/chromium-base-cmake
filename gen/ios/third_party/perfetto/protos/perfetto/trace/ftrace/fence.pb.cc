// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/fence.proto

#include "protos/perfetto/trace/ftrace/fence.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR FenceInitFtraceEvent::FenceInitFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.driver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/0u
  , /*decltype(_impl_.seqno_)*/0u} {}
struct FenceInitFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FenceInitFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FenceInitFtraceEventDefaultTypeInternal() {}
  union {
    FenceInitFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FenceInitFtraceEventDefaultTypeInternal _FenceInitFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR FenceDestroyFtraceEvent::FenceDestroyFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.driver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/0u
  , /*decltype(_impl_.seqno_)*/0u} {}
struct FenceDestroyFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FenceDestroyFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FenceDestroyFtraceEventDefaultTypeInternal() {}
  union {
    FenceDestroyFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FenceDestroyFtraceEventDefaultTypeInternal _FenceDestroyFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR FenceEnableSignalFtraceEvent::FenceEnableSignalFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.driver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/0u
  , /*decltype(_impl_.seqno_)*/0u} {}
struct FenceEnableSignalFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FenceEnableSignalFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FenceEnableSignalFtraceEventDefaultTypeInternal() {}
  union {
    FenceEnableSignalFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FenceEnableSignalFtraceEventDefaultTypeInternal _FenceEnableSignalFtraceEvent_default_instance_;
PROTOBUF_CONSTEXPR FenceSignaledFtraceEvent::FenceSignaledFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.driver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_)*/0u
  , /*decltype(_impl_.seqno_)*/0u} {}
struct FenceSignaledFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FenceSignaledFtraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FenceSignaledFtraceEventDefaultTypeInternal() {}
  union {
    FenceSignaledFtraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FenceSignaledFtraceEventDefaultTypeInternal _FenceSignaledFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {

// ===================================================================

class FenceInitFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FenceInitFtraceEvent>()._impl_._has_bits_);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FenceInitFtraceEvent::FenceInitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FenceInitFtraceEvent)
}
FenceInitFtraceEvent::FenceInitFtraceEvent(const FenceInitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FenceInitFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.seqno_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_driver()) {
    _this->_impl_.driver_.Set(from._internal_driver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timeline()) {
    _this->_impl_.timeline_.Set(from._internal_timeline(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.context_, &from._impl_.context_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seqno_) -
    reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FenceInitFtraceEvent)
}

inline void FenceInitFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){0u}
    , decltype(_impl_.seqno_){0u}
  };
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FenceInitFtraceEvent::~FenceInitFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FenceInitFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FenceInitFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.driver_.Destroy();
  _impl_.timeline_.Destroy();
}

void FenceInitFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FenceInitFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FenceInitFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.driver_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timeline_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.context_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seqno_) -
        reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FenceInitFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_context(&has_bits);
          _impl_.context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_driver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seqno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqno(&has_bits);
          _impl_.seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string timeline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timeline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FenceInitFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FenceInitFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 context = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_context(), target);
  }

  // optional string driver = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_driver(), target);
  }

  // optional uint32 seqno = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seqno(), target);
  }

  // optional string timeline = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FenceInitFtraceEvent)
  return target;
}

size_t FenceInitFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FenceInitFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string driver = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver());
    }

    // optional string timeline = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline());
    }

    // optional uint32 context = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_context());
    }

    // optional uint32 seqno = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FenceInitFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FenceInitFtraceEvent*>(
      &from));
}

void FenceInitFtraceEvent::MergeFrom(const FenceInitFtraceEvent& from) {
  FenceInitFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FenceInitFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_driver(from._internal_driver());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_timeline(from._internal_timeline());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.context_ = from._impl_.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seqno_ = from._impl_.seqno_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FenceInitFtraceEvent::CopyFrom(const FenceInitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FenceInitFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FenceInitFtraceEvent::IsInitialized() const {
  return true;
}

void FenceInitFtraceEvent::InternalSwap(FenceInitFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.driver_, lhs_arena,
      &other->_impl_.driver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeline_, lhs_arena,
      &other->_impl_.timeline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FenceInitFtraceEvent, _impl_.seqno_)
      + sizeof(FenceInitFtraceEvent::_impl_.seqno_)
      - PROTOBUF_FIELD_OFFSET(FenceInitFtraceEvent, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

std::string FenceInitFtraceEvent::GetTypeName() const {
  return "perfetto.protos.FenceInitFtraceEvent";
}


// ===================================================================

class FenceDestroyFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FenceDestroyFtraceEvent>()._impl_._has_bits_);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FenceDestroyFtraceEvent::FenceDestroyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FenceDestroyFtraceEvent)
}
FenceDestroyFtraceEvent::FenceDestroyFtraceEvent(const FenceDestroyFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FenceDestroyFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.seqno_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_driver()) {
    _this->_impl_.driver_.Set(from._internal_driver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timeline()) {
    _this->_impl_.timeline_.Set(from._internal_timeline(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.context_, &from._impl_.context_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seqno_) -
    reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FenceDestroyFtraceEvent)
}

inline void FenceDestroyFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){0u}
    , decltype(_impl_.seqno_){0u}
  };
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FenceDestroyFtraceEvent::~FenceDestroyFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FenceDestroyFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FenceDestroyFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.driver_.Destroy();
  _impl_.timeline_.Destroy();
}

void FenceDestroyFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FenceDestroyFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FenceDestroyFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.driver_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timeline_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.context_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seqno_) -
        reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FenceDestroyFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_context(&has_bits);
          _impl_.context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_driver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seqno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqno(&has_bits);
          _impl_.seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string timeline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timeline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FenceDestroyFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FenceDestroyFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 context = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_context(), target);
  }

  // optional string driver = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_driver(), target);
  }

  // optional uint32 seqno = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seqno(), target);
  }

  // optional string timeline = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FenceDestroyFtraceEvent)
  return target;
}

size_t FenceDestroyFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FenceDestroyFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string driver = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver());
    }

    // optional string timeline = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline());
    }

    // optional uint32 context = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_context());
    }

    // optional uint32 seqno = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FenceDestroyFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FenceDestroyFtraceEvent*>(
      &from));
}

void FenceDestroyFtraceEvent::MergeFrom(const FenceDestroyFtraceEvent& from) {
  FenceDestroyFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FenceDestroyFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_driver(from._internal_driver());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_timeline(from._internal_timeline());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.context_ = from._impl_.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seqno_ = from._impl_.seqno_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FenceDestroyFtraceEvent::CopyFrom(const FenceDestroyFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FenceDestroyFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FenceDestroyFtraceEvent::IsInitialized() const {
  return true;
}

void FenceDestroyFtraceEvent::InternalSwap(FenceDestroyFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.driver_, lhs_arena,
      &other->_impl_.driver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeline_, lhs_arena,
      &other->_impl_.timeline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FenceDestroyFtraceEvent, _impl_.seqno_)
      + sizeof(FenceDestroyFtraceEvent::_impl_.seqno_)
      - PROTOBUF_FIELD_OFFSET(FenceDestroyFtraceEvent, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

std::string FenceDestroyFtraceEvent::GetTypeName() const {
  return "perfetto.protos.FenceDestroyFtraceEvent";
}


// ===================================================================

class FenceEnableSignalFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FenceEnableSignalFtraceEvent>()._impl_._has_bits_);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FenceEnableSignalFtraceEvent::FenceEnableSignalFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FenceEnableSignalFtraceEvent)
}
FenceEnableSignalFtraceEvent::FenceEnableSignalFtraceEvent(const FenceEnableSignalFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FenceEnableSignalFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.seqno_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_driver()) {
    _this->_impl_.driver_.Set(from._internal_driver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timeline()) {
    _this->_impl_.timeline_.Set(from._internal_timeline(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.context_, &from._impl_.context_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seqno_) -
    reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FenceEnableSignalFtraceEvent)
}

inline void FenceEnableSignalFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){0u}
    , decltype(_impl_.seqno_){0u}
  };
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FenceEnableSignalFtraceEvent::~FenceEnableSignalFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FenceEnableSignalFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FenceEnableSignalFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.driver_.Destroy();
  _impl_.timeline_.Destroy();
}

void FenceEnableSignalFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FenceEnableSignalFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FenceEnableSignalFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.driver_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timeline_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.context_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seqno_) -
        reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FenceEnableSignalFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_context(&has_bits);
          _impl_.context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_driver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seqno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqno(&has_bits);
          _impl_.seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string timeline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timeline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FenceEnableSignalFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FenceEnableSignalFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 context = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_context(), target);
  }

  // optional string driver = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_driver(), target);
  }

  // optional uint32 seqno = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seqno(), target);
  }

  // optional string timeline = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FenceEnableSignalFtraceEvent)
  return target;
}

size_t FenceEnableSignalFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FenceEnableSignalFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string driver = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver());
    }

    // optional string timeline = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline());
    }

    // optional uint32 context = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_context());
    }

    // optional uint32 seqno = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FenceEnableSignalFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FenceEnableSignalFtraceEvent*>(
      &from));
}

void FenceEnableSignalFtraceEvent::MergeFrom(const FenceEnableSignalFtraceEvent& from) {
  FenceEnableSignalFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FenceEnableSignalFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_driver(from._internal_driver());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_timeline(from._internal_timeline());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.context_ = from._impl_.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seqno_ = from._impl_.seqno_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FenceEnableSignalFtraceEvent::CopyFrom(const FenceEnableSignalFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FenceEnableSignalFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FenceEnableSignalFtraceEvent::IsInitialized() const {
  return true;
}

void FenceEnableSignalFtraceEvent::InternalSwap(FenceEnableSignalFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.driver_, lhs_arena,
      &other->_impl_.driver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeline_, lhs_arena,
      &other->_impl_.timeline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FenceEnableSignalFtraceEvent, _impl_.seqno_)
      + sizeof(FenceEnableSignalFtraceEvent::_impl_.seqno_)
      - PROTOBUF_FIELD_OFFSET(FenceEnableSignalFtraceEvent, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

std::string FenceEnableSignalFtraceEvent::GetTypeName() const {
  return "perfetto.protos.FenceEnableSignalFtraceEvent";
}


// ===================================================================

class FenceSignaledFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FenceSignaledFtraceEvent>()._impl_._has_bits_);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqno(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FenceSignaledFtraceEvent::FenceSignaledFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FenceSignaledFtraceEvent)
}
FenceSignaledFtraceEvent::FenceSignaledFtraceEvent(const FenceSignaledFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FenceSignaledFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){}
    , decltype(_impl_.seqno_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_driver()) {
    _this->_impl_.driver_.Set(from._internal_driver(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timeline()) {
    _this->_impl_.timeline_.Set(from._internal_timeline(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.context_, &from._impl_.context_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seqno_) -
    reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FenceSignaledFtraceEvent)
}

inline void FenceSignaledFtraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.timeline_){}
    , decltype(_impl_.context_){0u}
    , decltype(_impl_.seqno_){0u}
  };
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FenceSignaledFtraceEvent::~FenceSignaledFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FenceSignaledFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FenceSignaledFtraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.driver_.Destroy();
  _impl_.timeline_.Destroy();
}

void FenceSignaledFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FenceSignaledFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FenceSignaledFtraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.driver_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timeline_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.context_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seqno_) -
        reinterpret_cast<char*>(&_impl_.context_)) + sizeof(_impl_.seqno_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FenceSignaledFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_context(&has_bits);
          _impl_.context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_driver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seqno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqno(&has_bits);
          _impl_.seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string timeline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timeline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FenceSignaledFtraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FenceSignaledFtraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 context = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_context(), target);
  }

  // optional string driver = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_driver(), target);
  }

  // optional uint32 seqno = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seqno(), target);
  }

  // optional string timeline = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FenceSignaledFtraceEvent)
  return target;
}

size_t FenceSignaledFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FenceSignaledFtraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string driver = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver());
    }

    // optional string timeline = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timeline());
    }

    // optional uint32 context = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_context());
    }

    // optional uint32 seqno = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FenceSignaledFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FenceSignaledFtraceEvent*>(
      &from));
}

void FenceSignaledFtraceEvent::MergeFrom(const FenceSignaledFtraceEvent& from) {
  FenceSignaledFtraceEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FenceSignaledFtraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_driver(from._internal_driver());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_timeline(from._internal_timeline());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.context_ = from._impl_.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seqno_ = from._impl_.seqno_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FenceSignaledFtraceEvent::CopyFrom(const FenceSignaledFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FenceSignaledFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FenceSignaledFtraceEvent::IsInitialized() const {
  return true;
}

void FenceSignaledFtraceEvent::InternalSwap(FenceSignaledFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.driver_, lhs_arena,
      &other->_impl_.driver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timeline_, lhs_arena,
      &other->_impl_.timeline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FenceSignaledFtraceEvent, _impl_.seqno_)
      + sizeof(FenceSignaledFtraceEvent::_impl_.seqno_)
      - PROTOBUF_FIELD_OFFSET(FenceSignaledFtraceEvent, _impl_.context_)>(
          reinterpret_cast<char*>(&_impl_.context_),
          reinterpret_cast<char*>(&other->_impl_.context_));
}

std::string FenceSignaledFtraceEvent::GetTypeName() const {
  return "perfetto.protos.FenceSignaledFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FenceInitFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::FenceInitFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FenceInitFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FenceDestroyFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::FenceDestroyFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FenceDestroyFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FenceEnableSignalFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::FenceEnableSignalFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FenceEnableSignalFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FenceSignaledFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::FenceSignaledFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FenceSignaledFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
