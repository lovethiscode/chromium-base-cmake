#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/ftrace/net.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent() = default;
NapiGroReceiveExitFtraceEvent::~NapiGroReceiveExitFtraceEvent() = default;
NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent(const NapiGroReceiveExitFtraceEvent&) = default;
NapiGroReceiveExitFtraceEvent& NapiGroReceiveExitFtraceEvent::operator=(const NapiGroReceiveExitFtraceEvent&) = default;
NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent(NapiGroReceiveExitFtraceEvent&&) noexcept = default;
NapiGroReceiveExitFtraceEvent& NapiGroReceiveExitFtraceEvent::operator=(NapiGroReceiveExitFtraceEvent&&) = default;

bool NapiGroReceiveExitFtraceEvent::operator==(const NapiGroReceiveExitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(ret_, other.ret_);
}

bool NapiGroReceiveExitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* ret */:
        field.get(&ret_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NapiGroReceiveExitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NapiGroReceiveExitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NapiGroReceiveExitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: ret
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, ret_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent() = default;
NapiGroReceiveEntryFtraceEvent::~NapiGroReceiveEntryFtraceEvent() = default;
NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent(const NapiGroReceiveEntryFtraceEvent&) = default;
NapiGroReceiveEntryFtraceEvent& NapiGroReceiveEntryFtraceEvent::operator=(const NapiGroReceiveEntryFtraceEvent&) = default;
NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent(NapiGroReceiveEntryFtraceEvent&&) noexcept = default;
NapiGroReceiveEntryFtraceEvent& NapiGroReceiveEntryFtraceEvent::operator=(NapiGroReceiveEntryFtraceEvent&&) = default;

bool NapiGroReceiveEntryFtraceEvent::operator==(const NapiGroReceiveEntryFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(data_len_, other.data_len_)
   && ::protozero::internal::gen_helpers::EqualsField(gso_size_, other.gso_size_)
   && ::protozero::internal::gen_helpers::EqualsField(gso_type_, other.gso_type_)
   && ::protozero::internal::gen_helpers::EqualsField(hash_, other.hash_)
   && ::protozero::internal::gen_helpers::EqualsField(ip_summed_, other.ip_summed_)
   && ::protozero::internal::gen_helpers::EqualsField(l4_hash_, other.l4_hash_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(mac_header_, other.mac_header_)
   && ::protozero::internal::gen_helpers::EqualsField(mac_header_valid_, other.mac_header_valid_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(napi_id_, other.napi_id_)
   && ::protozero::internal::gen_helpers::EqualsField(nr_frags_, other.nr_frags_)
   && ::protozero::internal::gen_helpers::EqualsField(protocol_, other.protocol_)
   && ::protozero::internal::gen_helpers::EqualsField(queue_mapping_, other.queue_mapping_)
   && ::protozero::internal::gen_helpers::EqualsField(skbaddr_, other.skbaddr_)
   && ::protozero::internal::gen_helpers::EqualsField(truesize_, other.truesize_)
   && ::protozero::internal::gen_helpers::EqualsField(vlan_proto_, other.vlan_proto_)
   && ::protozero::internal::gen_helpers::EqualsField(vlan_tagged_, other.vlan_tagged_)
   && ::protozero::internal::gen_helpers::EqualsField(vlan_tci_, other.vlan_tci_);
}

bool NapiGroReceiveEntryFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* data_len */:
        field.get(&data_len_);
        break;
      case 2 /* gso_size */:
        field.get(&gso_size_);
        break;
      case 3 /* gso_type */:
        field.get(&gso_type_);
        break;
      case 4 /* hash */:
        field.get(&hash_);
        break;
      case 5 /* ip_summed */:
        field.get(&ip_summed_);
        break;
      case 6 /* l4_hash */:
        field.get(&l4_hash_);
        break;
      case 7 /* len */:
        field.get(&len_);
        break;
      case 8 /* mac_header */:
        field.get(&mac_header_);
        break;
      case 9 /* mac_header_valid */:
        field.get(&mac_header_valid_);
        break;
      case 10 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 11 /* napi_id */:
        field.get(&napi_id_);
        break;
      case 12 /* nr_frags */:
        field.get(&nr_frags_);
        break;
      case 13 /* protocol */:
        field.get(&protocol_);
        break;
      case 14 /* queue_mapping */:
        field.get(&queue_mapping_);
        break;
      case 15 /* skbaddr */:
        field.get(&skbaddr_);
        break;
      case 16 /* truesize */:
        field.get(&truesize_);
        break;
      case 17 /* vlan_proto */:
        field.get(&vlan_proto_);
        break;
      case 18 /* vlan_tagged */:
        field.get(&vlan_tagged_);
        break;
      case 19 /* vlan_tci */:
        field.get(&vlan_tci_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NapiGroReceiveEntryFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NapiGroReceiveEntryFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NapiGroReceiveEntryFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: data_len
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, data_len_, msg);
  }

  // Field 2: gso_size
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(2, gso_size_, msg);
  }

  // Field 3: gso_type
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, gso_type_, msg);
  }

  // Field 4: hash
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, hash_, msg);
  }

  // Field 5: ip_summed
  if (_has_field_[5]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(5, ip_summed_, msg);
  }

  // Field 6: l4_hash
  if (_has_field_[6]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(6, l4_hash_, msg);
  }

  // Field 7: len
  if (_has_field_[7]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(7, len_, msg);
  }

  // Field 8: mac_header
  if (_has_field_[8]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(8, mac_header_, msg);
  }

  // Field 9: mac_header_valid
  if (_has_field_[9]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(9, mac_header_valid_, msg);
  }

  // Field 10: name
  if (_has_field_[10]) {
    ::protozero::internal::gen_helpers::SerializeString(10, name_, msg);
  }

  // Field 11: napi_id
  if (_has_field_[11]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(11, napi_id_, msg);
  }

  // Field 12: nr_frags
  if (_has_field_[12]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(12, nr_frags_, msg);
  }

  // Field 13: protocol
  if (_has_field_[13]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(13, protocol_, msg);
  }

  // Field 14: queue_mapping
  if (_has_field_[14]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(14, queue_mapping_, msg);
  }

  // Field 15: skbaddr
  if (_has_field_[15]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(15, skbaddr_, msg);
  }

  // Field 16: truesize
  if (_has_field_[16]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(16, truesize_, msg);
  }

  // Field 17: vlan_proto
  if (_has_field_[17]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(17, vlan_proto_, msg);
  }

  // Field 18: vlan_tagged
  if (_has_field_[18]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(18, vlan_tagged_, msg);
  }

  // Field 19: vlan_tci
  if (_has_field_[19]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(19, vlan_tci_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


NetDevXmitFtraceEvent::NetDevXmitFtraceEvent() = default;
NetDevXmitFtraceEvent::~NetDevXmitFtraceEvent() = default;
NetDevXmitFtraceEvent::NetDevXmitFtraceEvent(const NetDevXmitFtraceEvent&) = default;
NetDevXmitFtraceEvent& NetDevXmitFtraceEvent::operator=(const NetDevXmitFtraceEvent&) = default;
NetDevXmitFtraceEvent::NetDevXmitFtraceEvent(NetDevXmitFtraceEvent&&) noexcept = default;
NetDevXmitFtraceEvent& NetDevXmitFtraceEvent::operator=(NetDevXmitFtraceEvent&&) = default;

bool NetDevXmitFtraceEvent::operator==(const NetDevXmitFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(rc_, other.rc_)
   && ::protozero::internal::gen_helpers::EqualsField(skbaddr_, other.skbaddr_);
}

bool NetDevXmitFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* len */:
        field.get(&len_);
        break;
      case 2 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 3 /* rc */:
        field.get(&rc_);
        break;
      case 4 /* skbaddr */:
        field.get(&skbaddr_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NetDevXmitFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NetDevXmitFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NetDevXmitFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: len
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, len_, msg);
  }

  // Field 2: name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, name_, msg);
  }

  // Field 3: rc
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, rc_, msg);
  }

  // Field 4: skbaddr
  if (_has_field_[4]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(4, skbaddr_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}


NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent() = default;
NetifReceiveSkbFtraceEvent::~NetifReceiveSkbFtraceEvent() = default;
NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent(const NetifReceiveSkbFtraceEvent&) = default;
NetifReceiveSkbFtraceEvent& NetifReceiveSkbFtraceEvent::operator=(const NetifReceiveSkbFtraceEvent&) = default;
NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent(NetifReceiveSkbFtraceEvent&&) noexcept = default;
NetifReceiveSkbFtraceEvent& NetifReceiveSkbFtraceEvent::operator=(NetifReceiveSkbFtraceEvent&&) = default;

bool NetifReceiveSkbFtraceEvent::operator==(const NetifReceiveSkbFtraceEvent& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(len_, other.len_)
   && ::protozero::internal::gen_helpers::EqualsField(name_, other.name_)
   && ::protozero::internal::gen_helpers::EqualsField(skbaddr_, other.skbaddr_);
}

bool NetifReceiveSkbFtraceEvent::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 1 /* len */:
        field.get(&len_);
        break;
      case 2 /* name */:
        ::protozero::internal::gen_helpers::DeserializeString(field, &name_);
        break;
      case 3 /* skbaddr */:
        field.get(&skbaddr_);
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string NetifReceiveSkbFtraceEvent::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> NetifReceiveSkbFtraceEvent::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void NetifReceiveSkbFtraceEvent::Serialize(::protozero::Message* msg) const {
  // Field 1: len
  if (_has_field_[1]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(1, len_, msg);
  }

  // Field 2: name
  if (_has_field_[2]) {
    ::protozero::internal::gen_helpers::SerializeString(2, name_, msg);
  }

  // Field 3: skbaddr
  if (_has_field_[3]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(3, skbaddr_, msg);
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
