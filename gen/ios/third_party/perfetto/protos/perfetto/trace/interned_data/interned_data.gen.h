// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_INTERNED_DATA_INTERNED_DATA_PROTO_CPP_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_INTERNED_DATA_INTERNED_DATA_PROTO_CPP_H_

#include <stdint.h>
#include <bitset>
#include <vector>
#include <string>
#include <type_traits>

#include "perfetto/protozero/cpp_message_obj.h"
#include "perfetto/protozero/copyable_ptr.h"
#include "perfetto/base/export.h"

namespace perfetto {
namespace protos {
namespace gen {
class InternedData;
class InternedString;
class InternedV8Isolate;
class InternedV8Isolate_CodeRange;
class InternedV8WasmScript;
class InternedV8JsScript;
class V8String;
class InternedV8JsFunction;
class InternedV8String;
class NetworkPacketContext;
class NetworkPacketEvent;
class InternedGpuRenderStageSpecification;
class InternedGraphicsContext;
class Callstack;
class Frame;
class Mapping;
class ProfiledFrameSymbols;
class HistogramName;
class LogMessageBody;
class UnsymbolizedSourceLocation;
class SourceLocation;
class DebugAnnotationValueTypeName;
class DebugAnnotationName;
class EventName;
class EventCategory;
enum InternedV8JsScript_Type : int;
enum InternedV8JsFunction_Kind : int;
enum TrafficDirection : int;
enum InternedGpuRenderStageSpecification_RenderStageCategory : int;
enum InternedGraphicsContext_Api : int;
}  // namespace perfetto
}  // namespace protos
}  // namespace gen

namespace protozero {
class Message;
}  // namespace protozero

namespace perfetto {
namespace protos {
namespace gen {

class PERFETTO_EXPORT_COMPONENT InternedData : public ::protozero::CppMessageObj {
 public:
  enum FieldNumbers {
    kEventCategoriesFieldNumber = 1,
    kEventNamesFieldNumber = 2,
    kDebugAnnotationNamesFieldNumber = 3,
    kDebugAnnotationValueTypeNamesFieldNumber = 27,
    kSourceLocationsFieldNumber = 4,
    kUnsymbolizedSourceLocationsFieldNumber = 28,
    kLogMessageBodyFieldNumber = 20,
    kHistogramNamesFieldNumber = 25,
    kBuildIdsFieldNumber = 16,
    kMappingPathsFieldNumber = 17,
    kSourcePathsFieldNumber = 18,
    kFunctionNamesFieldNumber = 5,
    kProfiledFrameSymbolsFieldNumber = 21,
    kMappingsFieldNumber = 19,
    kFramesFieldNumber = 6,
    kCallstacksFieldNumber = 7,
    kVulkanMemoryKeysFieldNumber = 22,
    kGraphicsContextsFieldNumber = 23,
    kGpuSpecificationsFieldNumber = 24,
    kKernelSymbolsFieldNumber = 26,
    kDebugAnnotationStringValuesFieldNumber = 29,
    kPacketContextFieldNumber = 30,
    kV8JsFunctionNameFieldNumber = 31,
    kV8JsFunctionFieldNumber = 32,
    kV8JsScriptFieldNumber = 33,
    kV8WasmScriptFieldNumber = 34,
    kV8IsolateFieldNumber = 35,
    kProtologStringArgsFieldNumber = 36,
    kProtologStacktraceFieldNumber = 37,
    kViewcapturePackageNameFieldNumber = 38,
    kViewcaptureWindowNameFieldNumber = 39,
    kViewcaptureViewIdFieldNumber = 40,
    kViewcaptureClassNameFieldNumber = 41,
  };

  InternedData();
  ~InternedData() override;
  InternedData(InternedData&&) noexcept;
  InternedData& operator=(InternedData&&);
  InternedData(const InternedData&);
  InternedData& operator=(const InternedData&);
  bool operator==(const InternedData&) const;
  bool operator!=(const InternedData& other) const { return !(*this == other); }

  bool ParseFromArray(const void*, size_t) override;
  std::string SerializeAsString() const override;
  std::vector<uint8_t> SerializeAsArray() const override;
  void Serialize(::protozero::Message*) const;

  const std::vector<EventCategory>& event_categories() const { return event_categories_; }
  std::vector<EventCategory>* mutable_event_categories() { return &event_categories_; }
  int event_categories_size() const;
  void clear_event_categories();
  EventCategory* add_event_categories();

  const std::vector<EventName>& event_names() const { return event_names_; }
  std::vector<EventName>* mutable_event_names() { return &event_names_; }
  int event_names_size() const;
  void clear_event_names();
  EventName* add_event_names();

  const std::vector<DebugAnnotationName>& debug_annotation_names() const { return debug_annotation_names_; }
  std::vector<DebugAnnotationName>* mutable_debug_annotation_names() { return &debug_annotation_names_; }
  int debug_annotation_names_size() const;
  void clear_debug_annotation_names();
  DebugAnnotationName* add_debug_annotation_names();

  const std::vector<DebugAnnotationValueTypeName>& debug_annotation_value_type_names() const { return debug_annotation_value_type_names_; }
  std::vector<DebugAnnotationValueTypeName>* mutable_debug_annotation_value_type_names() { return &debug_annotation_value_type_names_; }
  int debug_annotation_value_type_names_size() const;
  void clear_debug_annotation_value_type_names();
  DebugAnnotationValueTypeName* add_debug_annotation_value_type_names();

  const std::vector<SourceLocation>& source_locations() const { return source_locations_; }
  std::vector<SourceLocation>* mutable_source_locations() { return &source_locations_; }
  int source_locations_size() const;
  void clear_source_locations();
  SourceLocation* add_source_locations();

  const std::vector<UnsymbolizedSourceLocation>& unsymbolized_source_locations() const { return unsymbolized_source_locations_; }
  std::vector<UnsymbolizedSourceLocation>* mutable_unsymbolized_source_locations() { return &unsymbolized_source_locations_; }
  int unsymbolized_source_locations_size() const;
  void clear_unsymbolized_source_locations();
  UnsymbolizedSourceLocation* add_unsymbolized_source_locations();

  const std::vector<LogMessageBody>& log_message_body() const { return log_message_body_; }
  std::vector<LogMessageBody>* mutable_log_message_body() { return &log_message_body_; }
  int log_message_body_size() const;
  void clear_log_message_body();
  LogMessageBody* add_log_message_body();

  const std::vector<HistogramName>& histogram_names() const { return histogram_names_; }
  std::vector<HistogramName>* mutable_histogram_names() { return &histogram_names_; }
  int histogram_names_size() const;
  void clear_histogram_names();
  HistogramName* add_histogram_names();

  const std::vector<InternedString>& build_ids() const { return build_ids_; }
  std::vector<InternedString>* mutable_build_ids() { return &build_ids_; }
  int build_ids_size() const;
  void clear_build_ids();
  InternedString* add_build_ids();

  const std::vector<InternedString>& mapping_paths() const { return mapping_paths_; }
  std::vector<InternedString>* mutable_mapping_paths() { return &mapping_paths_; }
  int mapping_paths_size() const;
  void clear_mapping_paths();
  InternedString* add_mapping_paths();

  const std::vector<InternedString>& source_paths() const { return source_paths_; }
  std::vector<InternedString>* mutable_source_paths() { return &source_paths_; }
  int source_paths_size() const;
  void clear_source_paths();
  InternedString* add_source_paths();

  const std::vector<InternedString>& function_names() const { return function_names_; }
  std::vector<InternedString>* mutable_function_names() { return &function_names_; }
  int function_names_size() const;
  void clear_function_names();
  InternedString* add_function_names();

  const std::vector<ProfiledFrameSymbols>& profiled_frame_symbols() const { return profiled_frame_symbols_; }
  std::vector<ProfiledFrameSymbols>* mutable_profiled_frame_symbols() { return &profiled_frame_symbols_; }
  int profiled_frame_symbols_size() const;
  void clear_profiled_frame_symbols();
  ProfiledFrameSymbols* add_profiled_frame_symbols();

  const std::vector<Mapping>& mappings() const { return mappings_; }
  std::vector<Mapping>* mutable_mappings() { return &mappings_; }
  int mappings_size() const;
  void clear_mappings();
  Mapping* add_mappings();

  const std::vector<Frame>& frames() const { return frames_; }
  std::vector<Frame>* mutable_frames() { return &frames_; }
  int frames_size() const;
  void clear_frames();
  Frame* add_frames();

  const std::vector<Callstack>& callstacks() const { return callstacks_; }
  std::vector<Callstack>* mutable_callstacks() { return &callstacks_; }
  int callstacks_size() const;
  void clear_callstacks();
  Callstack* add_callstacks();

  const std::vector<InternedString>& vulkan_memory_keys() const { return vulkan_memory_keys_; }
  std::vector<InternedString>* mutable_vulkan_memory_keys() { return &vulkan_memory_keys_; }
  int vulkan_memory_keys_size() const;
  void clear_vulkan_memory_keys();
  InternedString* add_vulkan_memory_keys();

  const std::vector<InternedGraphicsContext>& graphics_contexts() const { return graphics_contexts_; }
  std::vector<InternedGraphicsContext>* mutable_graphics_contexts() { return &graphics_contexts_; }
  int graphics_contexts_size() const;
  void clear_graphics_contexts();
  InternedGraphicsContext* add_graphics_contexts();

  const std::vector<InternedGpuRenderStageSpecification>& gpu_specifications() const { return gpu_specifications_; }
  std::vector<InternedGpuRenderStageSpecification>* mutable_gpu_specifications() { return &gpu_specifications_; }
  int gpu_specifications_size() const;
  void clear_gpu_specifications();
  InternedGpuRenderStageSpecification* add_gpu_specifications();

  const std::vector<InternedString>& kernel_symbols() const { return kernel_symbols_; }
  std::vector<InternedString>* mutable_kernel_symbols() { return &kernel_symbols_; }
  int kernel_symbols_size() const;
  void clear_kernel_symbols();
  InternedString* add_kernel_symbols();

  const std::vector<InternedString>& debug_annotation_string_values() const { return debug_annotation_string_values_; }
  std::vector<InternedString>* mutable_debug_annotation_string_values() { return &debug_annotation_string_values_; }
  int debug_annotation_string_values_size() const;
  void clear_debug_annotation_string_values();
  InternedString* add_debug_annotation_string_values();

  const std::vector<NetworkPacketContext>& packet_context() const { return packet_context_; }
  std::vector<NetworkPacketContext>* mutable_packet_context() { return &packet_context_; }
  int packet_context_size() const;
  void clear_packet_context();
  NetworkPacketContext* add_packet_context();

  const std::vector<InternedV8String>& v8_js_function_name() const { return v8_js_function_name_; }
  std::vector<InternedV8String>* mutable_v8_js_function_name() { return &v8_js_function_name_; }
  int v8_js_function_name_size() const;
  void clear_v8_js_function_name();
  InternedV8String* add_v8_js_function_name();

  const std::vector<InternedV8JsFunction>& v8_js_function() const { return v8_js_function_; }
  std::vector<InternedV8JsFunction>* mutable_v8_js_function() { return &v8_js_function_; }
  int v8_js_function_size() const;
  void clear_v8_js_function();
  InternedV8JsFunction* add_v8_js_function();

  const std::vector<InternedV8JsScript>& v8_js_script() const { return v8_js_script_; }
  std::vector<InternedV8JsScript>* mutable_v8_js_script() { return &v8_js_script_; }
  int v8_js_script_size() const;
  void clear_v8_js_script();
  InternedV8JsScript* add_v8_js_script();

  const std::vector<InternedV8WasmScript>& v8_wasm_script() const { return v8_wasm_script_; }
  std::vector<InternedV8WasmScript>* mutable_v8_wasm_script() { return &v8_wasm_script_; }
  int v8_wasm_script_size() const;
  void clear_v8_wasm_script();
  InternedV8WasmScript* add_v8_wasm_script();

  const std::vector<InternedV8Isolate>& v8_isolate() const { return v8_isolate_; }
  std::vector<InternedV8Isolate>* mutable_v8_isolate() { return &v8_isolate_; }
  int v8_isolate_size() const;
  void clear_v8_isolate();
  InternedV8Isolate* add_v8_isolate();

  const std::vector<InternedString>& protolog_string_args() const { return protolog_string_args_; }
  std::vector<InternedString>* mutable_protolog_string_args() { return &protolog_string_args_; }
  int protolog_string_args_size() const;
  void clear_protolog_string_args();
  InternedString* add_protolog_string_args();

  const std::vector<InternedString>& protolog_stacktrace() const { return protolog_stacktrace_; }
  std::vector<InternedString>* mutable_protolog_stacktrace() { return &protolog_stacktrace_; }
  int protolog_stacktrace_size() const;
  void clear_protolog_stacktrace();
  InternedString* add_protolog_stacktrace();

  const std::vector<InternedString>& viewcapture_package_name() const { return viewcapture_package_name_; }
  std::vector<InternedString>* mutable_viewcapture_package_name() { return &viewcapture_package_name_; }
  int viewcapture_package_name_size() const;
  void clear_viewcapture_package_name();
  InternedString* add_viewcapture_package_name();

  const std::vector<InternedString>& viewcapture_window_name() const { return viewcapture_window_name_; }
  std::vector<InternedString>* mutable_viewcapture_window_name() { return &viewcapture_window_name_; }
  int viewcapture_window_name_size() const;
  void clear_viewcapture_window_name();
  InternedString* add_viewcapture_window_name();

  const std::vector<InternedString>& viewcapture_view_id() const { return viewcapture_view_id_; }
  std::vector<InternedString>* mutable_viewcapture_view_id() { return &viewcapture_view_id_; }
  int viewcapture_view_id_size() const;
  void clear_viewcapture_view_id();
  InternedString* add_viewcapture_view_id();

  const std::vector<InternedString>& viewcapture_class_name() const { return viewcapture_class_name_; }
  std::vector<InternedString>* mutable_viewcapture_class_name() { return &viewcapture_class_name_; }
  int viewcapture_class_name_size() const;
  void clear_viewcapture_class_name();
  InternedString* add_viewcapture_class_name();

 private:
  std::vector<EventCategory> event_categories_;
  std::vector<EventName> event_names_;
  std::vector<DebugAnnotationName> debug_annotation_names_;
  std::vector<DebugAnnotationValueTypeName> debug_annotation_value_type_names_;
  std::vector<SourceLocation> source_locations_;
  std::vector<UnsymbolizedSourceLocation> unsymbolized_source_locations_;
  std::vector<LogMessageBody> log_message_body_;
  std::vector<HistogramName> histogram_names_;
  std::vector<InternedString> build_ids_;
  std::vector<InternedString> mapping_paths_;
  std::vector<InternedString> source_paths_;
  std::vector<InternedString> function_names_;
  std::vector<ProfiledFrameSymbols> profiled_frame_symbols_;
  std::vector<Mapping> mappings_;
  std::vector<Frame> frames_;
  std::vector<Callstack> callstacks_;
  std::vector<InternedString> vulkan_memory_keys_;
  std::vector<InternedGraphicsContext> graphics_contexts_;
  std::vector<InternedGpuRenderStageSpecification> gpu_specifications_;
  std::vector<InternedString> kernel_symbols_;
  std::vector<InternedString> debug_annotation_string_values_;
  std::vector<NetworkPacketContext> packet_context_;
  std::vector<InternedV8String> v8_js_function_name_;
  std::vector<InternedV8JsFunction> v8_js_function_;
  std::vector<InternedV8JsScript> v8_js_script_;
  std::vector<InternedV8WasmScript> v8_wasm_script_;
  std::vector<InternedV8Isolate> v8_isolate_;
  std::vector<InternedString> protolog_string_args_;
  std::vector<InternedString> protolog_stacktrace_;
  std::vector<InternedString> viewcapture_package_name_;
  std::vector<InternedString> viewcapture_window_name_;
  std::vector<InternedString> viewcapture_view_id_;
  std::vector<InternedString> viewcapture_class_name_;

  // Allows to preserve unknown protobuf fields for compatibility
  // with future versions of .proto files.
  std::string unknown_fields_;

  std::bitset<42> _has_field_{};
};

}  // namespace perfetto
}  // namespace protos
}  // namespace gen

#endif  // PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_INTERNED_DATA_INTERNED_DATA_PROTO_CPP_H_
