// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_process_descriptor.proto

#include "protos/perfetto/trace/track_event/chrome_process_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace perfetto {
namespace protos {
PROTOBUF_CONSTEXPR ChromeProcessDescriptor::ChromeProcessDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host_app_package_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_type_)*/0
  , /*decltype(_impl_.process_priority_)*/0
  , /*decltype(_impl_.crash_trace_id_)*/uint64_t{0u}
  , /*decltype(_impl_.legacy_sort_index_)*/0} {}
struct ChromeProcessDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeProcessDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeProcessDescriptorDefaultTypeInternal() {}
  union {
    ChromeProcessDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeProcessDescriptorDefaultTypeInternal _ChromeProcessDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace perfetto {
namespace protos {
bool ChromeProcessDescriptor_ProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeProcessDescriptor_ProcessType_strings[42] = {};

static const char ChromeProcessDescriptor_ProcessType_names[] =
  "PROCESS_BROWSER"
  "PROCESS_GPU"
  "PROCESS_PPAPI_BROKER"
  "PROCESS_PPAPI_PLUGIN"
  "PROCESS_RENDERER"
  "PROCESS_RENDERER_EXTENSION"
  "PROCESS_SANDBOX_HELPER"
  "PROCESS_SERVICE_AUDIO"
  "PROCESS_SERVICE_CDM"
  "PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER"
  "PROCESS_SERVICE_CROS_LOCALSEARCH"
  "PROCESS_SERVICE_DATA_DECODER"
  "PROCESS_SERVICE_FILEPATCHER"
  "PROCESS_SERVICE_FILEUTIL"
  "PROCESS_SERVICE_IME"
  "PROCESS_SERVICE_LANGUAGEDETECTION"
  "PROCESS_SERVICE_MEDIAPARSER"
  "PROCESS_SERVICE_MEDIA_FOUNDATION"
  "PROCESS_SERVICE_MIRRORING"
  "PROCESS_SERVICE_NETWORK"
  "PROCESS_SERVICE_PAINTPREVIEW"
  "PROCESS_SERVICE_PRINTCOMPOSITOR"
  "PROCESS_SERVICE_PRINTING"
  "PROCESS_SERVICE_PROFILEIMPORT"
  "PROCESS_SERVICE_PROXY_RESOLVER"
  "PROCESS_SERVICE_QRCODEGENERATOR"
  "PROCESS_SERVICE_QUARANTINE"
  "PROCESS_SERVICE_READICON"
  "PROCESS_SERVICE_RECORDING"
  "PROCESS_SERVICE_SHAPEDETECTION"
  "PROCESS_SERVICE_SHARING"
  "PROCESS_SERVICE_SPEECHRECOGNITION"
  "PROCESS_SERVICE_STORAGE"
  "PROCESS_SERVICE_TRACING"
  "PROCESS_SERVICE_TTS"
  "PROCESS_SERVICE_UNZIPPER"
  "PROCESS_SERVICE_UTIL_WIN"
  "PROCESS_SERVICE_VIDEO_CAPTURE"
  "PROCESS_SERVICE_XRDEVICE"
  "PROCESS_UNSPECIFIED"
  "PROCESS_UTILITY"
  "PROCESS_ZYGOTE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeProcessDescriptor_ProcessType_entries[] = {
  { {ChromeProcessDescriptor_ProcessType_names + 0, 15}, 1 },
  { {ChromeProcessDescriptor_ProcessType_names + 15, 11}, 6 },
  { {ChromeProcessDescriptor_ProcessType_names + 26, 20}, 8 },
  { {ChromeProcessDescriptor_ProcessType_names + 46, 20}, 7 },
  { {ChromeProcessDescriptor_ProcessType_names + 66, 16}, 2 },
  { {ChromeProcessDescriptor_ProcessType_names + 82, 26}, 40 },
  { {ChromeProcessDescriptor_ProcessType_names + 108, 22}, 5 },
  { {ChromeProcessDescriptor_ProcessType_names + 130, 21}, 12 },
  { {ChromeProcessDescriptor_ProcessType_names + 151, 19}, 16 },
  { {ChromeProcessDescriptor_ProcessType_names + 170, 44}, 25 },
  { {ChromeProcessDescriptor_ProcessType_names + 214, 32}, 24 },
  { {ChromeProcessDescriptor_ProcessType_names + 246, 28}, 13 },
  { {ChromeProcessDescriptor_ProcessType_names + 274, 27}, 20 },
  { {ChromeProcessDescriptor_ProcessType_names + 301, 24}, 26 },
  { {ChromeProcessDescriptor_ProcessType_names + 325, 19}, 37 },
  { {ChromeProcessDescriptor_ProcessType_names + 344, 33}, 32 },
  { {ChromeProcessDescriptor_ProcessType_names + 377, 27}, 34 },
  { {ChromeProcessDescriptor_ProcessType_names + 404, 32}, 41 },
  { {ChromeProcessDescriptor_ProcessType_names + 436, 25}, 19 },
  { {ChromeProcessDescriptor_ProcessType_names + 461, 23}, 9 },
  { {ChromeProcessDescriptor_ProcessType_names + 484, 28}, 28 },
  { {ChromeProcessDescriptor_ProcessType_names + 512, 31}, 27 },
  { {ChromeProcessDescriptor_ProcessType_names + 543, 24}, 22 },
  { {ChromeProcessDescriptor_ProcessType_names + 567, 29}, 36 },
  { {ChromeProcessDescriptor_ProcessType_names + 596, 30}, 15 },
  { {ChromeProcessDescriptor_ProcessType_names + 626, 31}, 35 },
  { {ChromeProcessDescriptor_ProcessType_names + 657, 26}, 23 },
  { {ChromeProcessDescriptor_ProcessType_names + 683, 24}, 31 },
  { {ChromeProcessDescriptor_ProcessType_names + 707, 25}, 38 },
  { {ChromeProcessDescriptor_ProcessType_names + 732, 30}, 39 },
  { {ChromeProcessDescriptor_ProcessType_names + 762, 23}, 33 },
  { {ChromeProcessDescriptor_ProcessType_names + 785, 33}, 29 },
  { {ChromeProcessDescriptor_ProcessType_names + 818, 23}, 11 },
  { {ChromeProcessDescriptor_ProcessType_names + 841, 23}, 10 },
  { {ChromeProcessDescriptor_ProcessType_names + 864, 19}, 21 },
  { {ChromeProcessDescriptor_ProcessType_names + 883, 24}, 18 },
  { {ChromeProcessDescriptor_ProcessType_names + 907, 24}, 14 },
  { {ChromeProcessDescriptor_ProcessType_names + 931, 29}, 17 },
  { {ChromeProcessDescriptor_ProcessType_names + 960, 24}, 30 },
  { {ChromeProcessDescriptor_ProcessType_names + 984, 19}, 0 },
  { {ChromeProcessDescriptor_ProcessType_names + 1003, 15}, 3 },
  { {ChromeProcessDescriptor_ProcessType_names + 1018, 14}, 4 },
};

static const int ChromeProcessDescriptor_ProcessType_entries_by_number[] = {
  39, // 0 -> PROCESS_UNSPECIFIED
  0, // 1 -> PROCESS_BROWSER
  4, // 2 -> PROCESS_RENDERER
  40, // 3 -> PROCESS_UTILITY
  41, // 4 -> PROCESS_ZYGOTE
  6, // 5 -> PROCESS_SANDBOX_HELPER
  1, // 6 -> PROCESS_GPU
  3, // 7 -> PROCESS_PPAPI_PLUGIN
  2, // 8 -> PROCESS_PPAPI_BROKER
  19, // 9 -> PROCESS_SERVICE_NETWORK
  33, // 10 -> PROCESS_SERVICE_TRACING
  32, // 11 -> PROCESS_SERVICE_STORAGE
  7, // 12 -> PROCESS_SERVICE_AUDIO
  11, // 13 -> PROCESS_SERVICE_DATA_DECODER
  36, // 14 -> PROCESS_SERVICE_UTIL_WIN
  24, // 15 -> PROCESS_SERVICE_PROXY_RESOLVER
  8, // 16 -> PROCESS_SERVICE_CDM
  37, // 17 -> PROCESS_SERVICE_VIDEO_CAPTURE
  35, // 18 -> PROCESS_SERVICE_UNZIPPER
  18, // 19 -> PROCESS_SERVICE_MIRRORING
  12, // 20 -> PROCESS_SERVICE_FILEPATCHER
  34, // 21 -> PROCESS_SERVICE_TTS
  22, // 22 -> PROCESS_SERVICE_PRINTING
  26, // 23 -> PROCESS_SERVICE_QUARANTINE
  10, // 24 -> PROCESS_SERVICE_CROS_LOCALSEARCH
  9, // 25 -> PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER
  13, // 26 -> PROCESS_SERVICE_FILEUTIL
  21, // 27 -> PROCESS_SERVICE_PRINTCOMPOSITOR
  20, // 28 -> PROCESS_SERVICE_PAINTPREVIEW
  31, // 29 -> PROCESS_SERVICE_SPEECHRECOGNITION
  38, // 30 -> PROCESS_SERVICE_XRDEVICE
  27, // 31 -> PROCESS_SERVICE_READICON
  15, // 32 -> PROCESS_SERVICE_LANGUAGEDETECTION
  30, // 33 -> PROCESS_SERVICE_SHARING
  16, // 34 -> PROCESS_SERVICE_MEDIAPARSER
  25, // 35 -> PROCESS_SERVICE_QRCODEGENERATOR
  23, // 36 -> PROCESS_SERVICE_PROFILEIMPORT
  14, // 37 -> PROCESS_SERVICE_IME
  28, // 38 -> PROCESS_SERVICE_RECORDING
  29, // 39 -> PROCESS_SERVICE_SHAPEDETECTION
  5, // 40 -> PROCESS_RENDERER_EXTENSION
  17, // 41 -> PROCESS_SERVICE_MEDIA_FOUNDATION
};

const std::string& ChromeProcessDescriptor_ProcessType_Name(
    ChromeProcessDescriptor_ProcessType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeProcessDescriptor_ProcessType_entries,
          ChromeProcessDescriptor_ProcessType_entries_by_number,
          42, ChromeProcessDescriptor_ProcessType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeProcessDescriptor_ProcessType_entries,
      ChromeProcessDescriptor_ProcessType_entries_by_number,
      42, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeProcessDescriptor_ProcessType_strings[idx].get();
}
bool ChromeProcessDescriptor_ProcessType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeProcessDescriptor_ProcessType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeProcessDescriptor_ProcessType_entries, 42, name, &int_value);
  if (success) {
    *value = static_cast<ChromeProcessDescriptor_ProcessType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_UNSPECIFIED;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_BROWSER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_RENDERER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_UTILITY;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_ZYGOTE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SANDBOX_HELPER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_GPU;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_PPAPI_PLUGIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_PPAPI_BROKER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_NETWORK;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_TRACING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_STORAGE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_AUDIO;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_DATA_DECODER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_UTIL_WIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PROXY_RESOLVER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CDM;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_VIDEO_CAPTURE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_UNZIPPER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_MIRRORING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_FILEPATCHER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_TTS;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PRINTING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_QUARANTINE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CROS_LOCALSEARCH;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_FILEUTIL;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PRINTCOMPOSITOR;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PAINTPREVIEW;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SPEECHRECOGNITION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_XRDEVICE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_READICON;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_LANGUAGEDETECTION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SHARING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_MEDIAPARSER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_QRCODEGENERATOR;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PROFILEIMPORT;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_IME;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_RECORDING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SHAPEDETECTION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_RENDERER_EXTENSION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_MEDIA_FOUNDATION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::ProcessType_MIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::ProcessType_MAX;
constexpr int ChromeProcessDescriptor::ProcessType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChromeProcessDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeProcessDescriptor>()._impl_._has_bits_);
  static void set_has_process_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_legacy_sort_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_host_app_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChromeProcessDescriptor::ChromeProcessDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeProcessDescriptor)
}
ChromeProcessDescriptor::ChromeProcessDescriptor(const ChromeProcessDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChromeProcessDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_app_package_name_){}
    , decltype(_impl_.process_type_){}
    , decltype(_impl_.process_priority_){}
    , decltype(_impl_.crash_trace_id_){}
    , decltype(_impl_.legacy_sort_index_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.host_app_package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_app_package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_app_package_name()) {
    _this->_impl_.host_app_package_name_.Set(from._internal_host_app_package_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.process_type_, &from._impl_.process_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.legacy_sort_index_) -
    reinterpret_cast<char*>(&_impl_.process_type_)) + sizeof(_impl_.legacy_sort_index_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeProcessDescriptor)
}

inline void ChromeProcessDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_app_package_name_){}
    , decltype(_impl_.process_type_){0}
    , decltype(_impl_.process_priority_){0}
    , decltype(_impl_.crash_trace_id_){uint64_t{0u}}
    , decltype(_impl_.legacy_sort_index_){0}
  };
  _impl_.host_app_package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_app_package_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeProcessDescriptor::~ChromeProcessDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeProcessDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeProcessDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_app_package_name_.Destroy();
}

void ChromeProcessDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeProcessDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeProcessDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.host_app_package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.process_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_sort_index_) -
        reinterpret_cast<char*>(&_impl_.process_type_)) + sizeof(_impl_.legacy_sort_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeProcessDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeProcessDescriptor_ProcessType_IsValid(val))) {
            _internal_set_process_type(static_cast<::perfetto::protos::ChromeProcessDescriptor_ProcessType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 process_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_process_priority(&has_bits);
          _impl_.process_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 legacy_sort_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_legacy_sort_index(&has_bits);
          _impl_.legacy_sort_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string host_app_package_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_host_app_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 crash_trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_crash_trace_id(&has_bits);
          _impl_.crash_trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeProcessDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeProcessDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_process_type(), target);
  }

  // optional int32 process_priority = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_process_priority(), target);
  }

  // optional int32 legacy_sort_index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_legacy_sort_index(), target);
  }

  // optional string host_app_package_name = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host_app_package_name(), target);
  }

  // optional uint64 crash_trace_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_crash_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeProcessDescriptor)
  return target;
}

size_t ChromeProcessDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeProcessDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string host_app_package_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_app_package_name());
    }

    // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_process_type());
    }

    // optional int32 process_priority = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process_priority());
    }

    // optional uint64 crash_trace_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_crash_trace_id());
    }

    // optional int32 legacy_sort_index = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_legacy_sort_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeProcessDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeProcessDescriptor*>(
      &from));
}

void ChromeProcessDescriptor::MergeFrom(const ChromeProcessDescriptor& from) {
  ChromeProcessDescriptor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeProcessDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host_app_package_name(from._internal_host_app_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.process_type_ = from._impl_.process_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.process_priority_ = from._impl_.process_priority_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.crash_trace_id_ = from._impl_.crash_trace_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_sort_index_ = from._impl_.legacy_sort_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeProcessDescriptor::CopyFrom(const ChromeProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeProcessDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeProcessDescriptor::IsInitialized() const {
  return true;
}

void ChromeProcessDescriptor::InternalSwap(ChromeProcessDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_app_package_name_, lhs_arena,
      &other->_impl_.host_app_package_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeProcessDescriptor, _impl_.legacy_sort_index_)
      + sizeof(ChromeProcessDescriptor::_impl_.legacy_sort_index_)
      - PROTOBUF_FIELD_OFFSET(ChromeProcessDescriptor, _impl_.process_type_)>(
          reinterpret_cast<char*>(&_impl_.process_type_),
          reinterpret_cast<char*>(&other->_impl_.process_type_));
}

std::string ChromeProcessDescriptor::GetTypeName() const {
  return "perfetto.protos.ChromeProcessDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeProcessDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeProcessDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeProcessDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
