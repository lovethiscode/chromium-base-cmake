// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "protos/perfetto/trace/track_event/debug_annotation.pb.h"
#include "protos/perfetto/trace/track_event/log_message.pb.h"
#include "protos/perfetto/trace/track_event/task_execution.pb.h"
#include "protos/perfetto/trace/track_event/chrome_active_processes.pb.h"
#include "protos/perfetto/trace/track_event/chrome_application_state_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.pb.h"
#include "protos/perfetto/trace/track_event/chrome_content_settings_event_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_frame_reporter.pb.h"
#include "protos/perfetto/trace/track_event/chrome_histogram_sample.pb.h"
#include "protos/perfetto/trace/track_event/chrome_keyed_service.pb.h"
#include "protos/perfetto/trace/track_event/chrome_latency_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_legacy_ipc.pb.h"
#include "protos/perfetto/trace/track_event/chrome_message_pump.pb.h"
#include "protos/perfetto/trace/track_event/chrome_mojo_event_info.pb.h"
#include "protos/perfetto/trace/track_event/chrome_renderer_scheduler_state.pb.h"
#include "protos/perfetto/trace/track_event/chrome_user_event.pb.h"
#include "protos/perfetto/trace/track_event/chrome_window_handle_event_info.pb.h"
#include "protos/perfetto/trace/track_event/pixel_modem.pb.h"
#include "protos/perfetto/trace/track_event/screenshot.pb.h"
#include "protos/perfetto/trace/track_event/source_location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class EventCategory;
struct EventCategoryDefaultTypeInternal;
extern EventCategoryDefaultTypeInternal _EventCategory_default_instance_;
class EventName;
struct EventNameDefaultTypeInternal;
extern EventNameDefaultTypeInternal _EventName_default_instance_;
class TrackEvent;
struct TrackEventDefaultTypeInternal;
extern TrackEventDefaultTypeInternal _TrackEvent_default_instance_;
class TrackEventDefaults;
struct TrackEventDefaultsDefaultTypeInternal;
extern TrackEventDefaultsDefaultTypeInternal _TrackEventDefaults_default_instance_;
class TrackEvent_LegacyEvent;
struct TrackEvent_LegacyEventDefaultTypeInternal;
extern TrackEvent_LegacyEventDefaultTypeInternal _TrackEvent_LegacyEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::EventCategory* Arena::CreateMaybeMessage<::perfetto::protos::EventCategory>(Arena*);
template<> ::perfetto::protos::EventName* Arena::CreateMaybeMessage<::perfetto::protos::EventName>(Arena*);
template<> ::perfetto::protos::TrackEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrackEvent>(Arena*);
template<> ::perfetto::protos::TrackEventDefaults* Arena::CreateMaybeMessage<::perfetto::protos::TrackEventDefaults>(Arena*);
template<> ::perfetto::protos::TrackEvent_LegacyEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrackEvent_LegacyEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum TrackEvent_LegacyEvent_FlowDirection : int {
  TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED = 0,
  TrackEvent_LegacyEvent_FlowDirection_FLOW_IN = 1,
  TrackEvent_LegacyEvent_FlowDirection_FLOW_OUT = 2,
  TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT = 3
};
bool TrackEvent_LegacyEvent_FlowDirection_IsValid(int value);
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MIN = TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MAX = TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT;
constexpr int TrackEvent_LegacyEvent_FlowDirection_FlowDirection_ARRAYSIZE = TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MAX + 1;

const std::string& TrackEvent_LegacyEvent_FlowDirection_Name(TrackEvent_LegacyEvent_FlowDirection value);
template<typename T>
inline const std::string& TrackEvent_LegacyEvent_FlowDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackEvent_LegacyEvent_FlowDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackEvent_LegacyEvent_FlowDirection_Name.");
  return TrackEvent_LegacyEvent_FlowDirection_Name(static_cast<TrackEvent_LegacyEvent_FlowDirection>(enum_t_value));
}
bool TrackEvent_LegacyEvent_FlowDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackEvent_LegacyEvent_FlowDirection* value);
enum TrackEvent_LegacyEvent_InstantEventScope : int {
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED = 0,
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_GLOBAL = 1,
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_PROCESS = 2,
  TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD = 3
};
bool TrackEvent_LegacyEvent_InstantEventScope_IsValid(int value);
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MIN = TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MAX = TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD;
constexpr int TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_ARRAYSIZE = TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MAX + 1;

const std::string& TrackEvent_LegacyEvent_InstantEventScope_Name(TrackEvent_LegacyEvent_InstantEventScope value);
template<typename T>
inline const std::string& TrackEvent_LegacyEvent_InstantEventScope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackEvent_LegacyEvent_InstantEventScope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackEvent_LegacyEvent_InstantEventScope_Name.");
  return TrackEvent_LegacyEvent_InstantEventScope_Name(static_cast<TrackEvent_LegacyEvent_InstantEventScope>(enum_t_value));
}
bool TrackEvent_LegacyEvent_InstantEventScope_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackEvent_LegacyEvent_InstantEventScope* value);
enum TrackEvent_Type : int {
  TrackEvent_Type_TYPE_UNSPECIFIED = 0,
  TrackEvent_Type_TYPE_SLICE_BEGIN = 1,
  TrackEvent_Type_TYPE_SLICE_END = 2,
  TrackEvent_Type_TYPE_INSTANT = 3,
  TrackEvent_Type_TYPE_COUNTER = 4
};
bool TrackEvent_Type_IsValid(int value);
constexpr TrackEvent_Type TrackEvent_Type_Type_MIN = TrackEvent_Type_TYPE_UNSPECIFIED;
constexpr TrackEvent_Type TrackEvent_Type_Type_MAX = TrackEvent_Type_TYPE_COUNTER;
constexpr int TrackEvent_Type_Type_ARRAYSIZE = TrackEvent_Type_Type_MAX + 1;

const std::string& TrackEvent_Type_Name(TrackEvent_Type value);
template<typename T>
inline const std::string& TrackEvent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackEvent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackEvent_Type_Name.");
  return TrackEvent_Type_Name(static_cast<TrackEvent_Type>(enum_t_value));
}
bool TrackEvent_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackEvent_Type* value);
// ===================================================================

class TrackEvent_LegacyEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEvent.LegacyEvent) */ {
 public:
  inline TrackEvent_LegacyEvent() : TrackEvent_LegacyEvent(nullptr) {}
  ~TrackEvent_LegacyEvent() override;
  explicit PROTOBUF_CONSTEXPR TrackEvent_LegacyEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackEvent_LegacyEvent(const TrackEvent_LegacyEvent& from);
  TrackEvent_LegacyEvent(TrackEvent_LegacyEvent&& from) noexcept
    : TrackEvent_LegacyEvent() {
    *this = ::std::move(from);
  }

  inline TrackEvent_LegacyEvent& operator=(const TrackEvent_LegacyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEvent_LegacyEvent& operator=(TrackEvent_LegacyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrackEvent_LegacyEvent& default_instance() {
    return *internal_default_instance();
  }
  enum IdCase {
    kUnscopedId = 6,
    kLocalId = 10,
    kGlobalId = 11,
    ID_NOT_SET = 0,
  };

  static inline const TrackEvent_LegacyEvent* internal_default_instance() {
    return reinterpret_cast<const TrackEvent_LegacyEvent*>(
               &_TrackEvent_LegacyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackEvent_LegacyEvent& a, TrackEvent_LegacyEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrackEvent_LegacyEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackEvent_LegacyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackEvent_LegacyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackEvent_LegacyEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrackEvent_LegacyEvent& from);
  void MergeFrom(const TrackEvent_LegacyEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEvent_LegacyEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEvent.LegacyEvent";
  }
  protected:
  explicit TrackEvent_LegacyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TrackEvent_LegacyEvent_FlowDirection FlowDirection;
  static constexpr FlowDirection FLOW_UNSPECIFIED =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_UNSPECIFIED;
  static constexpr FlowDirection FLOW_IN =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_IN;
  static constexpr FlowDirection FLOW_OUT =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_OUT;
  static constexpr FlowDirection FLOW_INOUT =
    TrackEvent_LegacyEvent_FlowDirection_FLOW_INOUT;
  static inline bool FlowDirection_IsValid(int value) {
    return TrackEvent_LegacyEvent_FlowDirection_IsValid(value);
  }
  static constexpr FlowDirection FlowDirection_MIN =
    TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MIN;
  static constexpr FlowDirection FlowDirection_MAX =
    TrackEvent_LegacyEvent_FlowDirection_FlowDirection_MAX;
  static constexpr int FlowDirection_ARRAYSIZE =
    TrackEvent_LegacyEvent_FlowDirection_FlowDirection_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FlowDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FlowDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FlowDirection_Name.");
    return TrackEvent_LegacyEvent_FlowDirection_Name(enum_t_value);
  }
  static inline bool FlowDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FlowDirection* value) {
    return TrackEvent_LegacyEvent_FlowDirection_Parse(name, value);
  }

  typedef TrackEvent_LegacyEvent_InstantEventScope InstantEventScope;
  static constexpr InstantEventScope SCOPE_UNSPECIFIED =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_UNSPECIFIED;
  static constexpr InstantEventScope SCOPE_GLOBAL =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_GLOBAL;
  static constexpr InstantEventScope SCOPE_PROCESS =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_PROCESS;
  static constexpr InstantEventScope SCOPE_THREAD =
    TrackEvent_LegacyEvent_InstantEventScope_SCOPE_THREAD;
  static inline bool InstantEventScope_IsValid(int value) {
    return TrackEvent_LegacyEvent_InstantEventScope_IsValid(value);
  }
  static constexpr InstantEventScope InstantEventScope_MIN =
    TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MIN;
  static constexpr InstantEventScope InstantEventScope_MAX =
    TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_MAX;
  static constexpr int InstantEventScope_ARRAYSIZE =
    TrackEvent_LegacyEvent_InstantEventScope_InstantEventScope_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InstantEventScope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstantEventScope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstantEventScope_Name.");
    return TrackEvent_LegacyEvent_InstantEventScope_Name(enum_t_value);
  }
  static inline bool InstantEventScope_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InstantEventScope* value) {
    return TrackEvent_LegacyEvent_InstantEventScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdScopeFieldNumber = 7,
    kNameIidFieldNumber = 1,
    kDurationUsFieldNumber = 3,
    kThreadDurationUsFieldNumber = 4,
    kPhaseFieldNumber = 2,
    kUseAsyncTtsFieldNumber = 9,
    kBindToEnclosingFieldNumber = 12,
    kBindIdFieldNumber = 8,
    kFlowDirectionFieldNumber = 13,
    kInstantEventScopeFieldNumber = 14,
    kThreadInstructionDeltaFieldNumber = 15,
    kPidOverrideFieldNumber = 18,
    kTidOverrideFieldNumber = 19,
    kUnscopedIdFieldNumber = 6,
    kLocalIdFieldNumber = 10,
    kGlobalIdFieldNumber = 11,
  };
  // optional string id_scope = 7;
  bool has_id_scope() const;
  private:
  bool _internal_has_id_scope() const;
  public:
  void clear_id_scope();
  const std::string& id_scope() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_scope(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_scope();
  PROTOBUF_NODISCARD std::string* release_id_scope();
  void set_allocated_id_scope(std::string* id_scope);
  private:
  const std::string& _internal_id_scope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_scope(const std::string& value);
  std::string* _internal_mutable_id_scope();
  public:

  // optional uint64 name_iid = 1;
  bool has_name_iid() const;
  private:
  bool _internal_has_name_iid() const;
  public:
  void clear_name_iid();
  uint64_t name_iid() const;
  void set_name_iid(uint64_t value);
  private:
  uint64_t _internal_name_iid() const;
  void _internal_set_name_iid(uint64_t value);
  public:

  // optional int64 duration_us = 3;
  bool has_duration_us() const;
  private:
  bool _internal_has_duration_us() const;
  public:
  void clear_duration_us();
  int64_t duration_us() const;
  void set_duration_us(int64_t value);
  private:
  int64_t _internal_duration_us() const;
  void _internal_set_duration_us(int64_t value);
  public:

  // optional int64 thread_duration_us = 4;
  bool has_thread_duration_us() const;
  private:
  bool _internal_has_thread_duration_us() const;
  public:
  void clear_thread_duration_us();
  int64_t thread_duration_us() const;
  void set_thread_duration_us(int64_t value);
  private:
  int64_t _internal_thread_duration_us() const;
  void _internal_set_thread_duration_us(int64_t value);
  public:

  // optional int32 phase = 2;
  bool has_phase() const;
  private:
  bool _internal_has_phase() const;
  public:
  void clear_phase();
  int32_t phase() const;
  void set_phase(int32_t value);
  private:
  int32_t _internal_phase() const;
  void _internal_set_phase(int32_t value);
  public:

  // optional bool use_async_tts = 9;
  bool has_use_async_tts() const;
  private:
  bool _internal_has_use_async_tts() const;
  public:
  void clear_use_async_tts();
  bool use_async_tts() const;
  void set_use_async_tts(bool value);
  private:
  bool _internal_use_async_tts() const;
  void _internal_set_use_async_tts(bool value);
  public:

  // optional bool bind_to_enclosing = 12;
  bool has_bind_to_enclosing() const;
  private:
  bool _internal_has_bind_to_enclosing() const;
  public:
  void clear_bind_to_enclosing();
  bool bind_to_enclosing() const;
  void set_bind_to_enclosing(bool value);
  private:
  bool _internal_bind_to_enclosing() const;
  void _internal_set_bind_to_enclosing(bool value);
  public:

  // optional uint64 bind_id = 8;
  bool has_bind_id() const;
  private:
  bool _internal_has_bind_id() const;
  public:
  void clear_bind_id();
  uint64_t bind_id() const;
  void set_bind_id(uint64_t value);
  private:
  uint64_t _internal_bind_id() const;
  void _internal_set_bind_id(uint64_t value);
  public:

  // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
  bool has_flow_direction() const;
  private:
  bool _internal_has_flow_direction() const;
  public:
  void clear_flow_direction();
  ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection flow_direction() const;
  void set_flow_direction(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection value);
  private:
  ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection _internal_flow_direction() const;
  void _internal_set_flow_direction(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection value);
  public:

  // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
  bool has_instant_event_scope() const;
  private:
  bool _internal_has_instant_event_scope() const;
  public:
  void clear_instant_event_scope();
  ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope instant_event_scope() const;
  void set_instant_event_scope(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope value);
  private:
  ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope _internal_instant_event_scope() const;
  void _internal_set_instant_event_scope(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope value);
  public:

  // optional int64 thread_instruction_delta = 15;
  bool has_thread_instruction_delta() const;
  private:
  bool _internal_has_thread_instruction_delta() const;
  public:
  void clear_thread_instruction_delta();
  int64_t thread_instruction_delta() const;
  void set_thread_instruction_delta(int64_t value);
  private:
  int64_t _internal_thread_instruction_delta() const;
  void _internal_set_thread_instruction_delta(int64_t value);
  public:

  // optional int32 pid_override = 18;
  bool has_pid_override() const;
  private:
  bool _internal_has_pid_override() const;
  public:
  void clear_pid_override();
  int32_t pid_override() const;
  void set_pid_override(int32_t value);
  private:
  int32_t _internal_pid_override() const;
  void _internal_set_pid_override(int32_t value);
  public:

  // optional int32 tid_override = 19;
  bool has_tid_override() const;
  private:
  bool _internal_has_tid_override() const;
  public:
  void clear_tid_override();
  int32_t tid_override() const;
  void set_tid_override(int32_t value);
  private:
  int32_t _internal_tid_override() const;
  void _internal_set_tid_override(int32_t value);
  public:

  // uint64 unscoped_id = 6;
  bool has_unscoped_id() const;
  private:
  bool _internal_has_unscoped_id() const;
  public:
  void clear_unscoped_id();
  uint64_t unscoped_id() const;
  void set_unscoped_id(uint64_t value);
  private:
  uint64_t _internal_unscoped_id() const;
  void _internal_set_unscoped_id(uint64_t value);
  public:

  // uint64 local_id = 10;
  bool has_local_id() const;
  private:
  bool _internal_has_local_id() const;
  public:
  void clear_local_id();
  uint64_t local_id() const;
  void set_local_id(uint64_t value);
  private:
  uint64_t _internal_local_id() const;
  void _internal_set_local_id(uint64_t value);
  public:

  // uint64 global_id = 11;
  bool has_global_id() const;
  private:
  bool _internal_has_global_id() const;
  public:
  void clear_global_id();
  uint64_t global_id() const;
  void set_global_id(uint64_t value);
  private:
  uint64_t _internal_global_id() const;
  void _internal_set_global_id(uint64_t value);
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEvent.LegacyEvent)
 private:
  class _Internal;
  void set_has_unscoped_id();
  void set_has_local_id();
  void set_has_global_id();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_scope_;
    uint64_t name_iid_;
    int64_t duration_us_;
    int64_t thread_duration_us_;
    int32_t phase_;
    bool use_async_tts_;
    bool bind_to_enclosing_;
    uint64_t bind_id_;
    int flow_direction_;
    int instant_event_scope_;
    int64_t thread_instruction_delta_;
    int32_t pid_override_;
    int32_t tid_override_;
    union IdUnion {
      constexpr IdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t unscoped_id_;
      uint64_t local_id_;
      uint64_t global_id_;
    } id_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class TrackEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEvent) */ {
 public:
  inline TrackEvent() : TrackEvent(nullptr) {}
  ~TrackEvent() override;
  explicit PROTOBUF_CONSTEXPR TrackEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackEvent(const TrackEvent& from);
  TrackEvent(TrackEvent&& from) noexcept
    : TrackEvent() {
    *this = ::std::move(from);
  }

  inline TrackEvent& operator=(const TrackEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEvent& operator=(TrackEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrackEvent& default_instance() {
    return *internal_default_instance();
  }
  enum NameFieldCase {
    kNameIid = 10,
    kName = 23,
    NAME_FIELD_NOT_SET = 0,
  };

  enum CounterValueFieldCase {
    kCounterValue = 30,
    kDoubleCounterValue = 44,
    COUNTER_VALUE_FIELD_NOT_SET = 0,
  };

  enum SourceLocationFieldCase {
    kSourceLocation = 33,
    kSourceLocationIid = 34,
    SOURCE_LOCATION_FIELD_NOT_SET = 0,
  };

  enum TimestampCase {
    kTimestampDeltaUs = 1,
    kTimestampAbsoluteUs = 16,
    TIMESTAMP_NOT_SET = 0,
  };

  enum ThreadTimeCase {
    kThreadTimeDeltaUs = 2,
    kThreadTimeAbsoluteUs = 17,
    THREAD_TIME_NOT_SET = 0,
  };

  enum ThreadInstructionCountCase {
    kThreadInstructionCountDelta = 8,
    kThreadInstructionCountAbsolute = 20,
    THREAD_INSTRUCTION_COUNT_NOT_SET = 0,
  };

  static inline const TrackEvent* internal_default_instance() {
    return reinterpret_cast<const TrackEvent*>(
               &_TrackEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrackEvent& a, TrackEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrackEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrackEvent& from);
  void MergeFrom(const TrackEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEvent";
  }
  protected:
  explicit TrackEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TrackEvent_LegacyEvent LegacyEvent;

  typedef TrackEvent_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    TrackEvent_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_SLICE_BEGIN =
    TrackEvent_Type_TYPE_SLICE_BEGIN;
  static constexpr Type TYPE_SLICE_END =
    TrackEvent_Type_TYPE_SLICE_END;
  static constexpr Type TYPE_INSTANT =
    TrackEvent_Type_TYPE_INSTANT;
  static constexpr Type TYPE_COUNTER =
    TrackEvent_Type_TYPE_COUNTER;
  static inline bool Type_IsValid(int value) {
    return TrackEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TrackEvent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TrackEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TrackEvent_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TrackEvent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TrackEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryIidsFieldNumber = 3,
    kDebugAnnotationsFieldNumber = 4,
    kExtraCounterValuesFieldNumber = 12,
    kCategoriesFieldNumber = 22,
    kExtraCounterTrackUuidsFieldNumber = 31,
    kFlowIdsOldFieldNumber = 36,
    kTerminatingFlowIdsOldFieldNumber = 42,
    kExtraDoubleCounterTrackUuidsFieldNumber = 45,
    kExtraDoubleCounterValuesFieldNumber = 46,
    kFlowIdsFieldNumber = 47,
    kTerminatingFlowIdsFieldNumber = 48,
    kTaskExecutionFieldNumber = 5,
    kLegacyEventFieldNumber = 6,
    kLogMessageFieldNumber = 21,
    kCcSchedulerStateFieldNumber = 24,
    kChromeUserEventFieldNumber = 25,
    kChromeKeyedServiceFieldNumber = 26,
    kChromeLegacyIpcFieldNumber = 27,
    kChromeHistogramSampleFieldNumber = 28,
    kChromeLatencyInfoFieldNumber = 29,
    kChromeFrameReporterFieldNumber = 32,
    kChromeMessagePumpFieldNumber = 35,
    kChromeMojoEventInfoFieldNumber = 38,
    kChromeApplicationStateInfoFieldNumber = 39,
    kChromeRendererSchedulerStateFieldNumber = 40,
    kChromeWindowHandleEventInfoFieldNumber = 41,
    kChromeContentSettingsEventInfoFieldNumber = 43,
    kChromeActiveProcessesFieldNumber = 49,
    kScreenshotFieldNumber = 50,
    kPixelModemEventInsightFieldNumber = 51,
    kTrackUuidFieldNumber = 11,
    kTypeFieldNumber = 9,
    kNameIidFieldNumber = 10,
    kNameFieldNumber = 23,
    kCounterValueFieldNumber = 30,
    kDoubleCounterValueFieldNumber = 44,
    kSourceLocationFieldNumber = 33,
    kSourceLocationIidFieldNumber = 34,
    kTimestampDeltaUsFieldNumber = 1,
    kTimestampAbsoluteUsFieldNumber = 16,
    kThreadTimeDeltaUsFieldNumber = 2,
    kThreadTimeAbsoluteUsFieldNumber = 17,
    kThreadInstructionCountDeltaFieldNumber = 8,
    kThreadInstructionCountAbsoluteFieldNumber = 20,
  };
  // repeated uint64 category_iids = 3;
  int category_iids_size() const;
  private:
  int _internal_category_iids_size() const;
  public:
  void clear_category_iids();
  private:
  uint64_t _internal_category_iids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_category_iids() const;
  void _internal_add_category_iids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_category_iids();
  public:
  uint64_t category_iids(int index) const;
  void set_category_iids(int index, uint64_t value);
  void add_category_iids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      category_iids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_category_iids();

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
  int debug_annotations_size() const;
  private:
  int _internal_debug_annotations_size() const;
  public:
  void clear_debug_annotations();
  ::perfetto::protos::DebugAnnotation* mutable_debug_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
      mutable_debug_annotations();
  private:
  const ::perfetto::protos::DebugAnnotation& _internal_debug_annotations(int index) const;
  ::perfetto::protos::DebugAnnotation* _internal_add_debug_annotations();
  public:
  const ::perfetto::protos::DebugAnnotation& debug_annotations(int index) const;
  ::perfetto::protos::DebugAnnotation* add_debug_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
      debug_annotations() const;

  // repeated int64 extra_counter_values = 12;
  int extra_counter_values_size() const;
  private:
  int _internal_extra_counter_values_size() const;
  public:
  void clear_extra_counter_values();
  private:
  int64_t _internal_extra_counter_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_extra_counter_values() const;
  void _internal_add_extra_counter_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_extra_counter_values();
  public:
  int64_t extra_counter_values(int index) const;
  void set_extra_counter_values(int index, int64_t value);
  void add_extra_counter_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      extra_counter_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_extra_counter_values();

  // repeated string categories = 22;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();
  private:
  const std::string& _internal_categories(int index) const;
  std::string* _internal_add_categories();
  public:

  // repeated uint64 extra_counter_track_uuids = 31;
  int extra_counter_track_uuids_size() const;
  private:
  int _internal_extra_counter_track_uuids_size() const;
  public:
  void clear_extra_counter_track_uuids();
  private:
  uint64_t _internal_extra_counter_track_uuids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_extra_counter_track_uuids() const;
  void _internal_add_extra_counter_track_uuids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_extra_counter_track_uuids();
  public:
  uint64_t extra_counter_track_uuids(int index) const;
  void set_extra_counter_track_uuids(int index, uint64_t value);
  void add_extra_counter_track_uuids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      extra_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_extra_counter_track_uuids();

  // repeated uint64 flow_ids_old = 36 [deprecated = true];
  PROTOBUF_DEPRECATED int flow_ids_old_size() const;
  private:
  int _internal_flow_ids_old_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_flow_ids_old();
  private:
  uint64_t _internal_flow_ids_old(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_flow_ids_old() const;
  void _internal_add_flow_ids_old(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_flow_ids_old();
  public:
  PROTOBUF_DEPRECATED uint64_t flow_ids_old(int index) const;
  PROTOBUF_DEPRECATED void set_flow_ids_old(int index, uint64_t value);
  PROTOBUF_DEPRECATED void add_flow_ids_old(uint64_t value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      flow_ids_old() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_flow_ids_old();

  // repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];
  PROTOBUF_DEPRECATED int terminating_flow_ids_old_size() const;
  private:
  int _internal_terminating_flow_ids_old_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_terminating_flow_ids_old();
  private:
  uint64_t _internal_terminating_flow_ids_old(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_terminating_flow_ids_old() const;
  void _internal_add_terminating_flow_ids_old(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_terminating_flow_ids_old();
  public:
  PROTOBUF_DEPRECATED uint64_t terminating_flow_ids_old(int index) const;
  PROTOBUF_DEPRECATED void set_terminating_flow_ids_old(int index, uint64_t value);
  PROTOBUF_DEPRECATED void add_terminating_flow_ids_old(uint64_t value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      terminating_flow_ids_old() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_terminating_flow_ids_old();

  // repeated uint64 extra_double_counter_track_uuids = 45;
  int extra_double_counter_track_uuids_size() const;
  private:
  int _internal_extra_double_counter_track_uuids_size() const;
  public:
  void clear_extra_double_counter_track_uuids();
  private:
  uint64_t _internal_extra_double_counter_track_uuids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_extra_double_counter_track_uuids() const;
  void _internal_add_extra_double_counter_track_uuids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_extra_double_counter_track_uuids();
  public:
  uint64_t extra_double_counter_track_uuids(int index) const;
  void set_extra_double_counter_track_uuids(int index, uint64_t value);
  void add_extra_double_counter_track_uuids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      extra_double_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_extra_double_counter_track_uuids();

  // repeated double extra_double_counter_values = 46;
  int extra_double_counter_values_size() const;
  private:
  int _internal_extra_double_counter_values_size() const;
  public:
  void clear_extra_double_counter_values();
  private:
  double _internal_extra_double_counter_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_extra_double_counter_values() const;
  void _internal_add_extra_double_counter_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_extra_double_counter_values();
  public:
  double extra_double_counter_values(int index) const;
  void set_extra_double_counter_values(int index, double value);
  void add_extra_double_counter_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      extra_double_counter_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_extra_double_counter_values();

  // repeated fixed64 flow_ids = 47;
  int flow_ids_size() const;
  private:
  int _internal_flow_ids_size() const;
  public:
  void clear_flow_ids();
  private:
  uint64_t _internal_flow_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_flow_ids() const;
  void _internal_add_flow_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_flow_ids();
  public:
  uint64_t flow_ids(int index) const;
  void set_flow_ids(int index, uint64_t value);
  void add_flow_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      flow_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_flow_ids();

  // repeated fixed64 terminating_flow_ids = 48;
  int terminating_flow_ids_size() const;
  private:
  int _internal_terminating_flow_ids_size() const;
  public:
  void clear_terminating_flow_ids();
  private:
  uint64_t _internal_terminating_flow_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_terminating_flow_ids() const;
  void _internal_add_terminating_flow_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_terminating_flow_ids();
  public:
  uint64_t terminating_flow_ids(int index) const;
  void set_terminating_flow_ids(int index, uint64_t value);
  void add_terminating_flow_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      terminating_flow_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_terminating_flow_ids();

  // optional .perfetto.protos.TaskExecution task_execution = 5;
  bool has_task_execution() const;
  private:
  bool _internal_has_task_execution() const;
  public:
  void clear_task_execution();
  const ::perfetto::protos::TaskExecution& task_execution() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TaskExecution* release_task_execution();
  ::perfetto::protos::TaskExecution* mutable_task_execution();
  void set_allocated_task_execution(::perfetto::protos::TaskExecution* task_execution);
  private:
  const ::perfetto::protos::TaskExecution& _internal_task_execution() const;
  ::perfetto::protos::TaskExecution* _internal_mutable_task_execution();
  public:
  void unsafe_arena_set_allocated_task_execution(
      ::perfetto::protos::TaskExecution* task_execution);
  ::perfetto::protos::TaskExecution* unsafe_arena_release_task_execution();

  // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
  bool has_legacy_event() const;
  private:
  bool _internal_has_legacy_event() const;
  public:
  void clear_legacy_event();
  const ::perfetto::protos::TrackEvent_LegacyEvent& legacy_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrackEvent_LegacyEvent* release_legacy_event();
  ::perfetto::protos::TrackEvent_LegacyEvent* mutable_legacy_event();
  void set_allocated_legacy_event(::perfetto::protos::TrackEvent_LegacyEvent* legacy_event);
  private:
  const ::perfetto::protos::TrackEvent_LegacyEvent& _internal_legacy_event() const;
  ::perfetto::protos::TrackEvent_LegacyEvent* _internal_mutable_legacy_event();
  public:
  void unsafe_arena_set_allocated_legacy_event(
      ::perfetto::protos::TrackEvent_LegacyEvent* legacy_event);
  ::perfetto::protos::TrackEvent_LegacyEvent* unsafe_arena_release_legacy_event();

  // optional .perfetto.protos.LogMessage log_message = 21;
  bool has_log_message() const;
  private:
  bool _internal_has_log_message() const;
  public:
  void clear_log_message();
  const ::perfetto::protos::LogMessage& log_message() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LogMessage* release_log_message();
  ::perfetto::protos::LogMessage* mutable_log_message();
  void set_allocated_log_message(::perfetto::protos::LogMessage* log_message);
  private:
  const ::perfetto::protos::LogMessage& _internal_log_message() const;
  ::perfetto::protos::LogMessage* _internal_mutable_log_message();
  public:
  void unsafe_arena_set_allocated_log_message(
      ::perfetto::protos::LogMessage* log_message);
  ::perfetto::protos::LogMessage* unsafe_arena_release_log_message();

  // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
  bool has_cc_scheduler_state() const;
  private:
  bool _internal_has_cc_scheduler_state() const;
  public:
  void clear_cc_scheduler_state();
  const ::perfetto::protos::ChromeCompositorSchedulerState& cc_scheduler_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeCompositorSchedulerState* release_cc_scheduler_state();
  ::perfetto::protos::ChromeCompositorSchedulerState* mutable_cc_scheduler_state();
  void set_allocated_cc_scheduler_state(::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state);
  private:
  const ::perfetto::protos::ChromeCompositorSchedulerState& _internal_cc_scheduler_state() const;
  ::perfetto::protos::ChromeCompositorSchedulerState* _internal_mutable_cc_scheduler_state();
  public:
  void unsafe_arena_set_allocated_cc_scheduler_state(
      ::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state);
  ::perfetto::protos::ChromeCompositorSchedulerState* unsafe_arena_release_cc_scheduler_state();

  // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
  bool has_chrome_user_event() const;
  private:
  bool _internal_has_chrome_user_event() const;
  public:
  void clear_chrome_user_event();
  const ::perfetto::protos::ChromeUserEvent& chrome_user_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeUserEvent* release_chrome_user_event();
  ::perfetto::protos::ChromeUserEvent* mutable_chrome_user_event();
  void set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEvent* chrome_user_event);
  private:
  const ::perfetto::protos::ChromeUserEvent& _internal_chrome_user_event() const;
  ::perfetto::protos::ChromeUserEvent* _internal_mutable_chrome_user_event();
  public:
  void unsafe_arena_set_allocated_chrome_user_event(
      ::perfetto::protos::ChromeUserEvent* chrome_user_event);
  ::perfetto::protos::ChromeUserEvent* unsafe_arena_release_chrome_user_event();

  // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
  bool has_chrome_keyed_service() const;
  private:
  bool _internal_has_chrome_keyed_service() const;
  public:
  void clear_chrome_keyed_service();
  const ::perfetto::protos::ChromeKeyedService& chrome_keyed_service() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeKeyedService* release_chrome_keyed_service();
  ::perfetto::protos::ChromeKeyedService* mutable_chrome_keyed_service();
  void set_allocated_chrome_keyed_service(::perfetto::protos::ChromeKeyedService* chrome_keyed_service);
  private:
  const ::perfetto::protos::ChromeKeyedService& _internal_chrome_keyed_service() const;
  ::perfetto::protos::ChromeKeyedService* _internal_mutable_chrome_keyed_service();
  public:
  void unsafe_arena_set_allocated_chrome_keyed_service(
      ::perfetto::protos::ChromeKeyedService* chrome_keyed_service);
  ::perfetto::protos::ChromeKeyedService* unsafe_arena_release_chrome_keyed_service();

  // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
  bool has_chrome_legacy_ipc() const;
  private:
  bool _internal_has_chrome_legacy_ipc() const;
  public:
  void clear_chrome_legacy_ipc();
  const ::perfetto::protos::ChromeLegacyIpc& chrome_legacy_ipc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeLegacyIpc* release_chrome_legacy_ipc();
  ::perfetto::protos::ChromeLegacyIpc* mutable_chrome_legacy_ipc();
  void set_allocated_chrome_legacy_ipc(::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc);
  private:
  const ::perfetto::protos::ChromeLegacyIpc& _internal_chrome_legacy_ipc() const;
  ::perfetto::protos::ChromeLegacyIpc* _internal_mutable_chrome_legacy_ipc();
  public:
  void unsafe_arena_set_allocated_chrome_legacy_ipc(
      ::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc);
  ::perfetto::protos::ChromeLegacyIpc* unsafe_arena_release_chrome_legacy_ipc();

  // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
  bool has_chrome_histogram_sample() const;
  private:
  bool _internal_has_chrome_histogram_sample() const;
  public:
  void clear_chrome_histogram_sample();
  const ::perfetto::protos::ChromeHistogramSample& chrome_histogram_sample() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeHistogramSample* release_chrome_histogram_sample();
  ::perfetto::protos::ChromeHistogramSample* mutable_chrome_histogram_sample();
  void set_allocated_chrome_histogram_sample(::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample);
  private:
  const ::perfetto::protos::ChromeHistogramSample& _internal_chrome_histogram_sample() const;
  ::perfetto::protos::ChromeHistogramSample* _internal_mutable_chrome_histogram_sample();
  public:
  void unsafe_arena_set_allocated_chrome_histogram_sample(
      ::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample);
  ::perfetto::protos::ChromeHistogramSample* unsafe_arena_release_chrome_histogram_sample();

  // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
  bool has_chrome_latency_info() const;
  private:
  bool _internal_has_chrome_latency_info() const;
  public:
  void clear_chrome_latency_info();
  const ::perfetto::protos::ChromeLatencyInfo& chrome_latency_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeLatencyInfo* release_chrome_latency_info();
  ::perfetto::protos::ChromeLatencyInfo* mutable_chrome_latency_info();
  void set_allocated_chrome_latency_info(::perfetto::protos::ChromeLatencyInfo* chrome_latency_info);
  private:
  const ::perfetto::protos::ChromeLatencyInfo& _internal_chrome_latency_info() const;
  ::perfetto::protos::ChromeLatencyInfo* _internal_mutable_chrome_latency_info();
  public:
  void unsafe_arena_set_allocated_chrome_latency_info(
      ::perfetto::protos::ChromeLatencyInfo* chrome_latency_info);
  ::perfetto::protos::ChromeLatencyInfo* unsafe_arena_release_chrome_latency_info();

  // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
  bool has_chrome_frame_reporter() const;
  private:
  bool _internal_has_chrome_frame_reporter() const;
  public:
  void clear_chrome_frame_reporter();
  const ::perfetto::protos::ChromeFrameReporter& chrome_frame_reporter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeFrameReporter* release_chrome_frame_reporter();
  ::perfetto::protos::ChromeFrameReporter* mutable_chrome_frame_reporter();
  void set_allocated_chrome_frame_reporter(::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter);
  private:
  const ::perfetto::protos::ChromeFrameReporter& _internal_chrome_frame_reporter() const;
  ::perfetto::protos::ChromeFrameReporter* _internal_mutable_chrome_frame_reporter();
  public:
  void unsafe_arena_set_allocated_chrome_frame_reporter(
      ::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter);
  ::perfetto::protos::ChromeFrameReporter* unsafe_arena_release_chrome_frame_reporter();

  // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
  bool has_chrome_message_pump() const;
  private:
  bool _internal_has_chrome_message_pump() const;
  public:
  void clear_chrome_message_pump();
  const ::perfetto::protos::ChromeMessagePump& chrome_message_pump() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeMessagePump* release_chrome_message_pump();
  ::perfetto::protos::ChromeMessagePump* mutable_chrome_message_pump();
  void set_allocated_chrome_message_pump(::perfetto::protos::ChromeMessagePump* chrome_message_pump);
  private:
  const ::perfetto::protos::ChromeMessagePump& _internal_chrome_message_pump() const;
  ::perfetto::protos::ChromeMessagePump* _internal_mutable_chrome_message_pump();
  public:
  void unsafe_arena_set_allocated_chrome_message_pump(
      ::perfetto::protos::ChromeMessagePump* chrome_message_pump);
  ::perfetto::protos::ChromeMessagePump* unsafe_arena_release_chrome_message_pump();

  // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
  bool has_chrome_mojo_event_info() const;
  private:
  bool _internal_has_chrome_mojo_event_info() const;
  public:
  void clear_chrome_mojo_event_info();
  const ::perfetto::protos::ChromeMojoEventInfo& chrome_mojo_event_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeMojoEventInfo* release_chrome_mojo_event_info();
  ::perfetto::protos::ChromeMojoEventInfo* mutable_chrome_mojo_event_info();
  void set_allocated_chrome_mojo_event_info(::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info);
  private:
  const ::perfetto::protos::ChromeMojoEventInfo& _internal_chrome_mojo_event_info() const;
  ::perfetto::protos::ChromeMojoEventInfo* _internal_mutable_chrome_mojo_event_info();
  public:
  void unsafe_arena_set_allocated_chrome_mojo_event_info(
      ::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info);
  ::perfetto::protos::ChromeMojoEventInfo* unsafe_arena_release_chrome_mojo_event_info();

  // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
  bool has_chrome_application_state_info() const;
  private:
  bool _internal_has_chrome_application_state_info() const;
  public:
  void clear_chrome_application_state_info();
  const ::perfetto::protos::ChromeApplicationStateInfo& chrome_application_state_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeApplicationStateInfo* release_chrome_application_state_info();
  ::perfetto::protos::ChromeApplicationStateInfo* mutable_chrome_application_state_info();
  void set_allocated_chrome_application_state_info(::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info);
  private:
  const ::perfetto::protos::ChromeApplicationStateInfo& _internal_chrome_application_state_info() const;
  ::perfetto::protos::ChromeApplicationStateInfo* _internal_mutable_chrome_application_state_info();
  public:
  void unsafe_arena_set_allocated_chrome_application_state_info(
      ::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info);
  ::perfetto::protos::ChromeApplicationStateInfo* unsafe_arena_release_chrome_application_state_info();

  // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
  bool has_chrome_renderer_scheduler_state() const;
  private:
  bool _internal_has_chrome_renderer_scheduler_state() const;
  public:
  void clear_chrome_renderer_scheduler_state();
  const ::perfetto::protos::ChromeRendererSchedulerState& chrome_renderer_scheduler_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeRendererSchedulerState* release_chrome_renderer_scheduler_state();
  ::perfetto::protos::ChromeRendererSchedulerState* mutable_chrome_renderer_scheduler_state();
  void set_allocated_chrome_renderer_scheduler_state(::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state);
  private:
  const ::perfetto::protos::ChromeRendererSchedulerState& _internal_chrome_renderer_scheduler_state() const;
  ::perfetto::protos::ChromeRendererSchedulerState* _internal_mutable_chrome_renderer_scheduler_state();
  public:
  void unsafe_arena_set_allocated_chrome_renderer_scheduler_state(
      ::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state);
  ::perfetto::protos::ChromeRendererSchedulerState* unsafe_arena_release_chrome_renderer_scheduler_state();

  // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
  bool has_chrome_window_handle_event_info() const;
  private:
  bool _internal_has_chrome_window_handle_event_info() const;
  public:
  void clear_chrome_window_handle_event_info();
  const ::perfetto::protos::ChromeWindowHandleEventInfo& chrome_window_handle_event_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeWindowHandleEventInfo* release_chrome_window_handle_event_info();
  ::perfetto::protos::ChromeWindowHandleEventInfo* mutable_chrome_window_handle_event_info();
  void set_allocated_chrome_window_handle_event_info(::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info);
  private:
  const ::perfetto::protos::ChromeWindowHandleEventInfo& _internal_chrome_window_handle_event_info() const;
  ::perfetto::protos::ChromeWindowHandleEventInfo* _internal_mutable_chrome_window_handle_event_info();
  public:
  void unsafe_arena_set_allocated_chrome_window_handle_event_info(
      ::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info);
  ::perfetto::protos::ChromeWindowHandleEventInfo* unsafe_arena_release_chrome_window_handle_event_info();

  // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
  bool has_chrome_content_settings_event_info() const;
  private:
  bool _internal_has_chrome_content_settings_event_info() const;
  public:
  void clear_chrome_content_settings_event_info();
  const ::perfetto::protos::ChromeContentSettingsEventInfo& chrome_content_settings_event_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeContentSettingsEventInfo* release_chrome_content_settings_event_info();
  ::perfetto::protos::ChromeContentSettingsEventInfo* mutable_chrome_content_settings_event_info();
  void set_allocated_chrome_content_settings_event_info(::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info);
  private:
  const ::perfetto::protos::ChromeContentSettingsEventInfo& _internal_chrome_content_settings_event_info() const;
  ::perfetto::protos::ChromeContentSettingsEventInfo* _internal_mutable_chrome_content_settings_event_info();
  public:
  void unsafe_arena_set_allocated_chrome_content_settings_event_info(
      ::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info);
  ::perfetto::protos::ChromeContentSettingsEventInfo* unsafe_arena_release_chrome_content_settings_event_info();

  // optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;
  bool has_chrome_active_processes() const;
  private:
  bool _internal_has_chrome_active_processes() const;
  public:
  void clear_chrome_active_processes();
  const ::perfetto::protos::ChromeActiveProcesses& chrome_active_processes() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeActiveProcesses* release_chrome_active_processes();
  ::perfetto::protos::ChromeActiveProcesses* mutable_chrome_active_processes();
  void set_allocated_chrome_active_processes(::perfetto::protos::ChromeActiveProcesses* chrome_active_processes);
  private:
  const ::perfetto::protos::ChromeActiveProcesses& _internal_chrome_active_processes() const;
  ::perfetto::protos::ChromeActiveProcesses* _internal_mutable_chrome_active_processes();
  public:
  void unsafe_arena_set_allocated_chrome_active_processes(
      ::perfetto::protos::ChromeActiveProcesses* chrome_active_processes);
  ::perfetto::protos::ChromeActiveProcesses* unsafe_arena_release_chrome_active_processes();

  // optional .perfetto.protos.Screenshot screenshot = 50;
  bool has_screenshot() const;
  private:
  bool _internal_has_screenshot() const;
  public:
  void clear_screenshot();
  const ::perfetto::protos::Screenshot& screenshot() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Screenshot* release_screenshot();
  ::perfetto::protos::Screenshot* mutable_screenshot();
  void set_allocated_screenshot(::perfetto::protos::Screenshot* screenshot);
  private:
  const ::perfetto::protos::Screenshot& _internal_screenshot() const;
  ::perfetto::protos::Screenshot* _internal_mutable_screenshot();
  public:
  void unsafe_arena_set_allocated_screenshot(
      ::perfetto::protos::Screenshot* screenshot);
  ::perfetto::protos::Screenshot* unsafe_arena_release_screenshot();

  // optional .perfetto.protos.PixelModemEventInsight pixel_modem_event_insight = 51;
  bool has_pixel_modem_event_insight() const;
  private:
  bool _internal_has_pixel_modem_event_insight() const;
  public:
  void clear_pixel_modem_event_insight();
  const ::perfetto::protos::PixelModemEventInsight& pixel_modem_event_insight() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PixelModemEventInsight* release_pixel_modem_event_insight();
  ::perfetto::protos::PixelModemEventInsight* mutable_pixel_modem_event_insight();
  void set_allocated_pixel_modem_event_insight(::perfetto::protos::PixelModemEventInsight* pixel_modem_event_insight);
  private:
  const ::perfetto::protos::PixelModemEventInsight& _internal_pixel_modem_event_insight() const;
  ::perfetto::protos::PixelModemEventInsight* _internal_mutable_pixel_modem_event_insight();
  public:
  void unsafe_arena_set_allocated_pixel_modem_event_insight(
      ::perfetto::protos::PixelModemEventInsight* pixel_modem_event_insight);
  ::perfetto::protos::PixelModemEventInsight* unsafe_arena_release_pixel_modem_event_insight();

  // optional uint64 track_uuid = 11;
  bool has_track_uuid() const;
  private:
  bool _internal_has_track_uuid() const;
  public:
  void clear_track_uuid();
  uint64_t track_uuid() const;
  void set_track_uuid(uint64_t value);
  private:
  uint64_t _internal_track_uuid() const;
  void _internal_set_track_uuid(uint64_t value);
  public:

  // optional .perfetto.protos.TrackEvent.Type type = 9;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::perfetto::protos::TrackEvent_Type type() const;
  void set_type(::perfetto::protos::TrackEvent_Type value);
  private:
  ::perfetto::protos::TrackEvent_Type _internal_type() const;
  void _internal_set_type(::perfetto::protos::TrackEvent_Type value);
  public:

  // uint64 name_iid = 10;
  bool has_name_iid() const;
  private:
  bool _internal_has_name_iid() const;
  public:
  void clear_name_iid();
  uint64_t name_iid() const;
  void set_name_iid(uint64_t value);
  private:
  uint64_t _internal_name_iid() const;
  void _internal_set_name_iid(uint64_t value);
  public:

  // string name = 23;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 counter_value = 30;
  bool has_counter_value() const;
  private:
  bool _internal_has_counter_value() const;
  public:
  void clear_counter_value();
  int64_t counter_value() const;
  void set_counter_value(int64_t value);
  private:
  int64_t _internal_counter_value() const;
  void _internal_set_counter_value(int64_t value);
  public:

  // double double_counter_value = 44;
  bool has_double_counter_value() const;
  private:
  bool _internal_has_double_counter_value() const;
  public:
  void clear_double_counter_value();
  double double_counter_value() const;
  void set_double_counter_value(double value);
  private:
  double _internal_double_counter_value() const;
  void _internal_set_double_counter_value(double value);
  public:

  // .perfetto.protos.SourceLocation source_location = 33;
  bool has_source_location() const;
  private:
  bool _internal_has_source_location() const;
  public:
  void clear_source_location();
  const ::perfetto::protos::SourceLocation& source_location() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SourceLocation* release_source_location();
  ::perfetto::protos::SourceLocation* mutable_source_location();
  void set_allocated_source_location(::perfetto::protos::SourceLocation* source_location);
  private:
  const ::perfetto::protos::SourceLocation& _internal_source_location() const;
  ::perfetto::protos::SourceLocation* _internal_mutable_source_location();
  public:
  void unsafe_arena_set_allocated_source_location(
      ::perfetto::protos::SourceLocation* source_location);
  ::perfetto::protos::SourceLocation* unsafe_arena_release_source_location();

  // uint64 source_location_iid = 34;
  bool has_source_location_iid() const;
  private:
  bool _internal_has_source_location_iid() const;
  public:
  void clear_source_location_iid();
  uint64_t source_location_iid() const;
  void set_source_location_iid(uint64_t value);
  private:
  uint64_t _internal_source_location_iid() const;
  void _internal_set_source_location_iid(uint64_t value);
  public:

  // int64 timestamp_delta_us = 1;
  bool has_timestamp_delta_us() const;
  private:
  bool _internal_has_timestamp_delta_us() const;
  public:
  void clear_timestamp_delta_us();
  int64_t timestamp_delta_us() const;
  void set_timestamp_delta_us(int64_t value);
  private:
  int64_t _internal_timestamp_delta_us() const;
  void _internal_set_timestamp_delta_us(int64_t value);
  public:

  // int64 timestamp_absolute_us = 16;
  bool has_timestamp_absolute_us() const;
  private:
  bool _internal_has_timestamp_absolute_us() const;
  public:
  void clear_timestamp_absolute_us();
  int64_t timestamp_absolute_us() const;
  void set_timestamp_absolute_us(int64_t value);
  private:
  int64_t _internal_timestamp_absolute_us() const;
  void _internal_set_timestamp_absolute_us(int64_t value);
  public:

  // int64 thread_time_delta_us = 2;
  bool has_thread_time_delta_us() const;
  private:
  bool _internal_has_thread_time_delta_us() const;
  public:
  void clear_thread_time_delta_us();
  int64_t thread_time_delta_us() const;
  void set_thread_time_delta_us(int64_t value);
  private:
  int64_t _internal_thread_time_delta_us() const;
  void _internal_set_thread_time_delta_us(int64_t value);
  public:

  // int64 thread_time_absolute_us = 17;
  bool has_thread_time_absolute_us() const;
  private:
  bool _internal_has_thread_time_absolute_us() const;
  public:
  void clear_thread_time_absolute_us();
  int64_t thread_time_absolute_us() const;
  void set_thread_time_absolute_us(int64_t value);
  private:
  int64_t _internal_thread_time_absolute_us() const;
  void _internal_set_thread_time_absolute_us(int64_t value);
  public:

  // int64 thread_instruction_count_delta = 8;
  bool has_thread_instruction_count_delta() const;
  private:
  bool _internal_has_thread_instruction_count_delta() const;
  public:
  void clear_thread_instruction_count_delta();
  int64_t thread_instruction_count_delta() const;
  void set_thread_instruction_count_delta(int64_t value);
  private:
  int64_t _internal_thread_instruction_count_delta() const;
  void _internal_set_thread_instruction_count_delta(int64_t value);
  public:

  // int64 thread_instruction_count_absolute = 20;
  bool has_thread_instruction_count_absolute() const;
  private:
  bool _internal_has_thread_instruction_count_absolute() const;
  public:
  void clear_thread_instruction_count_absolute();
  int64_t thread_instruction_count_absolute() const;
  void set_thread_instruction_count_absolute(int64_t value);
  private:
  int64_t _internal_thread_instruction_count_absolute() const;
  void _internal_set_thread_instruction_count_absolute(int64_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TrackEvent, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  void clear_name_field();
  NameFieldCase name_field_case() const;
  void clear_counter_value_field();
  CounterValueFieldCase counter_value_field_case() const;
  void clear_source_location_field();
  SourceLocationFieldCase source_location_field_case() const;
  void clear_timestamp();
  TimestampCase timestamp_case() const;
  void clear_thread_time();
  ThreadTimeCase thread_time_case() const;
  void clear_thread_instruction_count();
  ThreadInstructionCountCase thread_instruction_count_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEvent)
 private:
  class _Internal;
  void set_has_name_iid();
  void set_has_name();
  void set_has_counter_value();
  void set_has_double_counter_value();
  void set_has_source_location();
  void set_has_source_location_iid();
  void set_has_timestamp_delta_us();
  void set_has_timestamp_absolute_us();
  void set_has_thread_time_delta_us();
  void set_has_thread_time_absolute_us();
  void set_has_thread_instruction_count_delta();
  void set_has_thread_instruction_count_absolute();

  inline bool has_name_field() const;
  inline void clear_has_name_field();

  inline bool has_counter_value_field() const;
  inline void clear_has_counter_value_field();

  inline bool has_source_location_field() const;
  inline void clear_has_source_location_field();

  inline bool has_timestamp() const;
  inline void clear_has_timestamp();

  inline bool has_thread_time() const;
  inline void clear_has_thread_time();

  inline bool has_thread_instruction_count() const;
  inline void clear_has_thread_instruction_count();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > category_iids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation > debug_annotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > extra_counter_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > extra_counter_track_uuids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > flow_ids_old_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > terminating_flow_ids_old_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > extra_double_counter_track_uuids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > extra_double_counter_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > flow_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > terminating_flow_ids_;
    ::perfetto::protos::TaskExecution* task_execution_;
    ::perfetto::protos::TrackEvent_LegacyEvent* legacy_event_;
    ::perfetto::protos::LogMessage* log_message_;
    ::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state_;
    ::perfetto::protos::ChromeUserEvent* chrome_user_event_;
    ::perfetto::protos::ChromeKeyedService* chrome_keyed_service_;
    ::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc_;
    ::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample_;
    ::perfetto::protos::ChromeLatencyInfo* chrome_latency_info_;
    ::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter_;
    ::perfetto::protos::ChromeMessagePump* chrome_message_pump_;
    ::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info_;
    ::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info_;
    ::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state_;
    ::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info_;
    ::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info_;
    ::perfetto::protos::ChromeActiveProcesses* chrome_active_processes_;
    ::perfetto::protos::Screenshot* screenshot_;
    ::perfetto::protos::PixelModemEventInsight* pixel_modem_event_insight_;
    uint64_t track_uuid_;
    int type_;
    union NameFieldUnion {
      constexpr NameFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t name_iid_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } name_field_;
    union CounterValueFieldUnion {
      constexpr CounterValueFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t counter_value_;
      double double_counter_value_;
    } counter_value_field_;
    union SourceLocationFieldUnion {
      constexpr SourceLocationFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::SourceLocation* source_location_;
      uint64_t source_location_iid_;
    } source_location_field_;
    union TimestampUnion {
      constexpr TimestampUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t timestamp_delta_us_;
      int64_t timestamp_absolute_us_;
    } timestamp_;
    union ThreadTimeUnion {
      constexpr ThreadTimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t thread_time_delta_us_;
      int64_t thread_time_absolute_us_;
    } thread_time_;
    union ThreadInstructionCountUnion {
      constexpr ThreadInstructionCountUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t thread_instruction_count_delta_;
      int64_t thread_instruction_count_absolute_;
    } thread_instruction_count_;
    uint32_t _oneof_case_[6];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class TrackEventDefaults final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackEventDefaults) */ {
 public:
  inline TrackEventDefaults() : TrackEventDefaults(nullptr) {}
  ~TrackEventDefaults() override;
  explicit PROTOBUF_CONSTEXPR TrackEventDefaults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackEventDefaults(const TrackEventDefaults& from);
  TrackEventDefaults(TrackEventDefaults&& from) noexcept
    : TrackEventDefaults() {
    *this = ::std::move(from);
  }

  inline TrackEventDefaults& operator=(const TrackEventDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEventDefaults& operator=(TrackEventDefaults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrackEventDefaults& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackEventDefaults* internal_default_instance() {
    return reinterpret_cast<const TrackEventDefaults*>(
               &_TrackEventDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackEventDefaults& a, TrackEventDefaults& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrackEventDefaults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackEventDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackEventDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackEventDefaults>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrackEventDefaults& from);
  void MergeFrom(const TrackEventDefaults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackEventDefaults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackEventDefaults";
  }
  protected:
  explicit TrackEventDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraCounterTrackUuidsFieldNumber = 31,
    kExtraDoubleCounterTrackUuidsFieldNumber = 45,
    kTrackUuidFieldNumber = 11,
  };
  // repeated uint64 extra_counter_track_uuids = 31;
  int extra_counter_track_uuids_size() const;
  private:
  int _internal_extra_counter_track_uuids_size() const;
  public:
  void clear_extra_counter_track_uuids();
  private:
  uint64_t _internal_extra_counter_track_uuids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_extra_counter_track_uuids() const;
  void _internal_add_extra_counter_track_uuids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_extra_counter_track_uuids();
  public:
  uint64_t extra_counter_track_uuids(int index) const;
  void set_extra_counter_track_uuids(int index, uint64_t value);
  void add_extra_counter_track_uuids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      extra_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_extra_counter_track_uuids();

  // repeated uint64 extra_double_counter_track_uuids = 45;
  int extra_double_counter_track_uuids_size() const;
  private:
  int _internal_extra_double_counter_track_uuids_size() const;
  public:
  void clear_extra_double_counter_track_uuids();
  private:
  uint64_t _internal_extra_double_counter_track_uuids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_extra_double_counter_track_uuids() const;
  void _internal_add_extra_double_counter_track_uuids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_extra_double_counter_track_uuids();
  public:
  uint64_t extra_double_counter_track_uuids(int index) const;
  void set_extra_double_counter_track_uuids(int index, uint64_t value);
  void add_extra_double_counter_track_uuids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      extra_double_counter_track_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_extra_double_counter_track_uuids();

  // optional uint64 track_uuid = 11;
  bool has_track_uuid() const;
  private:
  bool _internal_has_track_uuid() const;
  public:
  void clear_track_uuid();
  uint64_t track_uuid() const;
  void set_track_uuid(uint64_t value);
  private:
  uint64_t _internal_track_uuid() const;
  void _internal_set_track_uuid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackEventDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > extra_counter_track_uuids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > extra_double_counter_track_uuids_;
    uint64_t track_uuid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class EventCategory final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.EventCategory) */ {
 public:
  inline EventCategory() : EventCategory(nullptr) {}
  ~EventCategory() override;
  explicit PROTOBUF_CONSTEXPR EventCategory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventCategory(const EventCategory& from);
  EventCategory(EventCategory&& from) noexcept
    : EventCategory() {
    *this = ::std::move(from);
  }

  inline EventCategory& operator=(const EventCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCategory& operator=(EventCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EventCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCategory* internal_default_instance() {
    return reinterpret_cast<const EventCategory*>(
               &_EventCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventCategory& a, EventCategory& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EventCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCategory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventCategory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EventCategory& from);
  void MergeFrom(const EventCategory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventCategory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.EventCategory";
  }
  protected:
  explicit EventCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 iid = 1;
  bool has_iid() const;
  private:
  bool _internal_has_iid() const;
  public:
  void clear_iid();
  uint64_t iid() const;
  void set_iid(uint64_t value);
  private:
  uint64_t _internal_iid() const;
  void _internal_set_iid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.EventCategory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// -------------------------------------------------------------------

class EventName final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.EventName) */ {
 public:
  inline EventName() : EventName(nullptr) {}
  ~EventName() override;
  explicit PROTOBUF_CONSTEXPR EventName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventName(const EventName& from);
  EventName(EventName&& from) noexcept
    : EventName() {
    *this = ::std::move(from);
  }

  inline EventName& operator=(const EventName& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventName& operator=(EventName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EventName& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventName* internal_default_instance() {
    return reinterpret_cast<const EventName*>(
               &_EventName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventName& a, EventName& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EventName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventName>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EventName& from);
  void MergeFrom(const EventName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.EventName";
  }
  protected:
  explicit EventName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 iid = 1;
  bool has_iid() const;
  private:
  bool _internal_has_iid() const;
  public:
  void clear_iid();
  uint64_t iid() const;
  void set_iid(uint64_t value);
  private:
  uint64_t _internal_iid() const;
  void _internal_set_iid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.EventName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackEvent_LegacyEvent

// optional uint64 name_iid = 1;
inline bool TrackEvent_LegacyEvent::_internal_has_name_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_name_iid() const {
  return _internal_has_name_iid();
}
inline void TrackEvent_LegacyEvent::clear_name_iid() {
  _impl_.name_iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TrackEvent_LegacyEvent::_internal_name_iid() const {
  return _impl_.name_iid_;
}
inline uint64_t TrackEvent_LegacyEvent::name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.name_iid)
  return _internal_name_iid();
}
inline void TrackEvent_LegacyEvent::_internal_set_name_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_iid_ = value;
}
inline void TrackEvent_LegacyEvent::set_name_iid(uint64_t value) {
  _internal_set_name_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.name_iid)
}

// optional int32 phase = 2;
inline bool TrackEvent_LegacyEvent::_internal_has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_phase() const {
  return _internal_has_phase();
}
inline void TrackEvent_LegacyEvent::clear_phase() {
  _impl_.phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t TrackEvent_LegacyEvent::_internal_phase() const {
  return _impl_.phase_;
}
inline int32_t TrackEvent_LegacyEvent::phase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.phase)
  return _internal_phase();
}
inline void TrackEvent_LegacyEvent::_internal_set_phase(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.phase_ = value;
}
inline void TrackEvent_LegacyEvent::set_phase(int32_t value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.phase)
}

// optional int64 duration_us = 3;
inline bool TrackEvent_LegacyEvent::_internal_has_duration_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_duration_us() const {
  return _internal_has_duration_us();
}
inline void TrackEvent_LegacyEvent::clear_duration_us() {
  _impl_.duration_us_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t TrackEvent_LegacyEvent::_internal_duration_us() const {
  return _impl_.duration_us_;
}
inline int64_t TrackEvent_LegacyEvent::duration_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.duration_us)
  return _internal_duration_us();
}
inline void TrackEvent_LegacyEvent::_internal_set_duration_us(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_us_ = value;
}
inline void TrackEvent_LegacyEvent::set_duration_us(int64_t value) {
  _internal_set_duration_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.duration_us)
}

// optional int64 thread_duration_us = 4;
inline bool TrackEvent_LegacyEvent::_internal_has_thread_duration_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_thread_duration_us() const {
  return _internal_has_thread_duration_us();
}
inline void TrackEvent_LegacyEvent::clear_thread_duration_us() {
  _impl_.thread_duration_us_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t TrackEvent_LegacyEvent::_internal_thread_duration_us() const {
  return _impl_.thread_duration_us_;
}
inline int64_t TrackEvent_LegacyEvent::thread_duration_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.thread_duration_us)
  return _internal_thread_duration_us();
}
inline void TrackEvent_LegacyEvent::_internal_set_thread_duration_us(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.thread_duration_us_ = value;
}
inline void TrackEvent_LegacyEvent::set_thread_duration_us(int64_t value) {
  _internal_set_thread_duration_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.thread_duration_us)
}

// optional int64 thread_instruction_delta = 15;
inline bool TrackEvent_LegacyEvent::_internal_has_thread_instruction_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_thread_instruction_delta() const {
  return _internal_has_thread_instruction_delta();
}
inline void TrackEvent_LegacyEvent::clear_thread_instruction_delta() {
  _impl_.thread_instruction_delta_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int64_t TrackEvent_LegacyEvent::_internal_thread_instruction_delta() const {
  return _impl_.thread_instruction_delta_;
}
inline int64_t TrackEvent_LegacyEvent::thread_instruction_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.thread_instruction_delta)
  return _internal_thread_instruction_delta();
}
inline void TrackEvent_LegacyEvent::_internal_set_thread_instruction_delta(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.thread_instruction_delta_ = value;
}
inline void TrackEvent_LegacyEvent::set_thread_instruction_delta(int64_t value) {
  _internal_set_thread_instruction_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.thread_instruction_delta)
}

// uint64 unscoped_id = 6;
inline bool TrackEvent_LegacyEvent::_internal_has_unscoped_id() const {
  return id_case() == kUnscopedId;
}
inline bool TrackEvent_LegacyEvent::has_unscoped_id() const {
  return _internal_has_unscoped_id();
}
inline void TrackEvent_LegacyEvent::set_has_unscoped_id() {
  _impl_._oneof_case_[0] = kUnscopedId;
}
inline void TrackEvent_LegacyEvent::clear_unscoped_id() {
  if (_internal_has_unscoped_id()) {
    _impl_.id_.unscoped_id_ = uint64_t{0u};
    clear_has_id();
  }
}
inline uint64_t TrackEvent_LegacyEvent::_internal_unscoped_id() const {
  if (_internal_has_unscoped_id()) {
    return _impl_.id_.unscoped_id_;
  }
  return uint64_t{0u};
}
inline void TrackEvent_LegacyEvent::_internal_set_unscoped_id(uint64_t value) {
  if (!_internal_has_unscoped_id()) {
    clear_id();
    set_has_unscoped_id();
  }
  _impl_.id_.unscoped_id_ = value;
}
inline uint64_t TrackEvent_LegacyEvent::unscoped_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.unscoped_id)
  return _internal_unscoped_id();
}
inline void TrackEvent_LegacyEvent::set_unscoped_id(uint64_t value) {
  _internal_set_unscoped_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.unscoped_id)
}

// uint64 local_id = 10;
inline bool TrackEvent_LegacyEvent::_internal_has_local_id() const {
  return id_case() == kLocalId;
}
inline bool TrackEvent_LegacyEvent::has_local_id() const {
  return _internal_has_local_id();
}
inline void TrackEvent_LegacyEvent::set_has_local_id() {
  _impl_._oneof_case_[0] = kLocalId;
}
inline void TrackEvent_LegacyEvent::clear_local_id() {
  if (_internal_has_local_id()) {
    _impl_.id_.local_id_ = uint64_t{0u};
    clear_has_id();
  }
}
inline uint64_t TrackEvent_LegacyEvent::_internal_local_id() const {
  if (_internal_has_local_id()) {
    return _impl_.id_.local_id_;
  }
  return uint64_t{0u};
}
inline void TrackEvent_LegacyEvent::_internal_set_local_id(uint64_t value) {
  if (!_internal_has_local_id()) {
    clear_id();
    set_has_local_id();
  }
  _impl_.id_.local_id_ = value;
}
inline uint64_t TrackEvent_LegacyEvent::local_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.local_id)
  return _internal_local_id();
}
inline void TrackEvent_LegacyEvent::set_local_id(uint64_t value) {
  _internal_set_local_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.local_id)
}

// uint64 global_id = 11;
inline bool TrackEvent_LegacyEvent::_internal_has_global_id() const {
  return id_case() == kGlobalId;
}
inline bool TrackEvent_LegacyEvent::has_global_id() const {
  return _internal_has_global_id();
}
inline void TrackEvent_LegacyEvent::set_has_global_id() {
  _impl_._oneof_case_[0] = kGlobalId;
}
inline void TrackEvent_LegacyEvent::clear_global_id() {
  if (_internal_has_global_id()) {
    _impl_.id_.global_id_ = uint64_t{0u};
    clear_has_id();
  }
}
inline uint64_t TrackEvent_LegacyEvent::_internal_global_id() const {
  if (_internal_has_global_id()) {
    return _impl_.id_.global_id_;
  }
  return uint64_t{0u};
}
inline void TrackEvent_LegacyEvent::_internal_set_global_id(uint64_t value) {
  if (!_internal_has_global_id()) {
    clear_id();
    set_has_global_id();
  }
  _impl_.id_.global_id_ = value;
}
inline uint64_t TrackEvent_LegacyEvent::global_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.global_id)
  return _internal_global_id();
}
inline void TrackEvent_LegacyEvent::set_global_id(uint64_t value) {
  _internal_set_global_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.global_id)
}

// optional string id_scope = 7;
inline bool TrackEvent_LegacyEvent::_internal_has_id_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_id_scope() const {
  return _internal_has_id_scope();
}
inline void TrackEvent_LegacyEvent::clear_id_scope() {
  _impl_.id_scope_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackEvent_LegacyEvent::id_scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
  return _internal_id_scope();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrackEvent_LegacyEvent::set_id_scope(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_scope_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
}
inline std::string* TrackEvent_LegacyEvent::mutable_id_scope() {
  std::string* _s = _internal_mutable_id_scope();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
  return _s;
}
inline const std::string& TrackEvent_LegacyEvent::_internal_id_scope() const {
  return _impl_.id_scope_.Get();
}
inline void TrackEvent_LegacyEvent::_internal_set_id_scope(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_scope_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackEvent_LegacyEvent::_internal_mutable_id_scope() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_scope_.Mutable(GetArenaForAllocation());
}
inline std::string* TrackEvent_LegacyEvent::release_id_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
  if (!_internal_has_id_scope()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_scope_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_scope_.IsDefault()) {
    _impl_.id_scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrackEvent_LegacyEvent::set_allocated_id_scope(std::string* id_scope) {
  if (id_scope != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_scope_.SetAllocated(id_scope, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_scope_.IsDefault()) {
    _impl_.id_scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.LegacyEvent.id_scope)
}

// optional bool use_async_tts = 9;
inline bool TrackEvent_LegacyEvent::_internal_has_use_async_tts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_use_async_tts() const {
  return _internal_has_use_async_tts();
}
inline void TrackEvent_LegacyEvent::clear_use_async_tts() {
  _impl_.use_async_tts_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool TrackEvent_LegacyEvent::_internal_use_async_tts() const {
  return _impl_.use_async_tts_;
}
inline bool TrackEvent_LegacyEvent::use_async_tts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.use_async_tts)
  return _internal_use_async_tts();
}
inline void TrackEvent_LegacyEvent::_internal_set_use_async_tts(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.use_async_tts_ = value;
}
inline void TrackEvent_LegacyEvent::set_use_async_tts(bool value) {
  _internal_set_use_async_tts(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.use_async_tts)
}

// optional uint64 bind_id = 8;
inline bool TrackEvent_LegacyEvent::_internal_has_bind_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_bind_id() const {
  return _internal_has_bind_id();
}
inline void TrackEvent_LegacyEvent::clear_bind_id() {
  _impl_.bind_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t TrackEvent_LegacyEvent::_internal_bind_id() const {
  return _impl_.bind_id_;
}
inline uint64_t TrackEvent_LegacyEvent::bind_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.bind_id)
  return _internal_bind_id();
}
inline void TrackEvent_LegacyEvent::_internal_set_bind_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bind_id_ = value;
}
inline void TrackEvent_LegacyEvent::set_bind_id(uint64_t value) {
  _internal_set_bind_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.bind_id)
}

// optional bool bind_to_enclosing = 12;
inline bool TrackEvent_LegacyEvent::_internal_has_bind_to_enclosing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_bind_to_enclosing() const {
  return _internal_has_bind_to_enclosing();
}
inline void TrackEvent_LegacyEvent::clear_bind_to_enclosing() {
  _impl_.bind_to_enclosing_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool TrackEvent_LegacyEvent::_internal_bind_to_enclosing() const {
  return _impl_.bind_to_enclosing_;
}
inline bool TrackEvent_LegacyEvent::bind_to_enclosing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.bind_to_enclosing)
  return _internal_bind_to_enclosing();
}
inline void TrackEvent_LegacyEvent::_internal_set_bind_to_enclosing(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bind_to_enclosing_ = value;
}
inline void TrackEvent_LegacyEvent::set_bind_to_enclosing(bool value) {
  _internal_set_bind_to_enclosing(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.bind_to_enclosing)
}

// optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
inline bool TrackEvent_LegacyEvent::_internal_has_flow_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_flow_direction() const {
  return _internal_has_flow_direction();
}
inline void TrackEvent_LegacyEvent::clear_flow_direction() {
  _impl_.flow_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::_internal_flow_direction() const {
  return static_cast< ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection >(_impl_.flow_direction_);
}
inline ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::flow_direction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.flow_direction)
  return _internal_flow_direction();
}
inline void TrackEvent_LegacyEvent::_internal_set_flow_direction(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection value) {
  assert(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.flow_direction_ = value;
}
inline void TrackEvent_LegacyEvent::set_flow_direction(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection value) {
  _internal_set_flow_direction(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.flow_direction)
}

// optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
inline bool TrackEvent_LegacyEvent::_internal_has_instant_event_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_instant_event_scope() const {
  return _internal_has_instant_event_scope();
}
inline void TrackEvent_LegacyEvent::clear_instant_event_scope() {
  _impl_.instant_event_scope_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::_internal_instant_event_scope() const {
  return static_cast< ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope >(_impl_.instant_event_scope_);
}
inline ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::instant_event_scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.instant_event_scope)
  return _internal_instant_event_scope();
}
inline void TrackEvent_LegacyEvent::_internal_set_instant_event_scope(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope value) {
  assert(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.instant_event_scope_ = value;
}
inline void TrackEvent_LegacyEvent::set_instant_event_scope(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope value) {
  _internal_set_instant_event_scope(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.instant_event_scope)
}

// optional int32 pid_override = 18;
inline bool TrackEvent_LegacyEvent::_internal_has_pid_override() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_pid_override() const {
  return _internal_has_pid_override();
}
inline void TrackEvent_LegacyEvent::clear_pid_override() {
  _impl_.pid_override_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t TrackEvent_LegacyEvent::_internal_pid_override() const {
  return _impl_.pid_override_;
}
inline int32_t TrackEvent_LegacyEvent::pid_override() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.pid_override)
  return _internal_pid_override();
}
inline void TrackEvent_LegacyEvent::_internal_set_pid_override(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.pid_override_ = value;
}
inline void TrackEvent_LegacyEvent::set_pid_override(int32_t value) {
  _internal_set_pid_override(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.pid_override)
}

// optional int32 tid_override = 19;
inline bool TrackEvent_LegacyEvent::_internal_has_tid_override() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrackEvent_LegacyEvent::has_tid_override() const {
  return _internal_has_tid_override();
}
inline void TrackEvent_LegacyEvent::clear_tid_override() {
  _impl_.tid_override_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t TrackEvent_LegacyEvent::_internal_tid_override() const {
  return _impl_.tid_override_;
}
inline int32_t TrackEvent_LegacyEvent::tid_override() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.LegacyEvent.tid_override)
  return _internal_tid_override();
}
inline void TrackEvent_LegacyEvent::_internal_set_tid_override(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tid_override_ = value;
}
inline void TrackEvent_LegacyEvent::set_tid_override(int32_t value) {
  _internal_set_tid_override(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.LegacyEvent.tid_override)
}

inline bool TrackEvent_LegacyEvent::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TrackEvent_LegacyEvent::clear_has_id() {
  _impl_._oneof_case_[0] = ID_NOT_SET;
}
inline TrackEvent_LegacyEvent::IdCase TrackEvent_LegacyEvent::id_case() const {
  return TrackEvent_LegacyEvent::IdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TrackEvent

// repeated uint64 category_iids = 3;
inline int TrackEvent::_internal_category_iids_size() const {
  return _impl_.category_iids_.size();
}
inline int TrackEvent::category_iids_size() const {
  return _internal_category_iids_size();
}
inline void TrackEvent::clear_category_iids() {
  _impl_.category_iids_.Clear();
}
inline uint64_t TrackEvent::_internal_category_iids(int index) const {
  return _impl_.category_iids_.Get(index);
}
inline uint64_t TrackEvent::category_iids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.category_iids)
  return _internal_category_iids(index);
}
inline void TrackEvent::set_category_iids(int index, uint64_t value) {
  _impl_.category_iids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.category_iids)
}
inline void TrackEvent::_internal_add_category_iids(uint64_t value) {
  _impl_.category_iids_.Add(value);
}
inline void TrackEvent::add_category_iids(uint64_t value) {
  _internal_add_category_iids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.category_iids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::_internal_category_iids() const {
  return _impl_.category_iids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::category_iids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.category_iids)
  return _internal_category_iids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::_internal_mutable_category_iids() {
  return &_impl_.category_iids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::mutable_category_iids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.category_iids)
  return _internal_mutable_category_iids();
}

// repeated string categories = 22;
inline int TrackEvent::_internal_categories_size() const {
  return _impl_.categories_.size();
}
inline int TrackEvent::categories_size() const {
  return _internal_categories_size();
}
inline void TrackEvent::clear_categories() {
  _impl_.categories_.Clear();
}
inline std::string* TrackEvent::add_categories() {
  std::string* _s = _internal_add_categories();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TrackEvent.categories)
  return _s;
}
inline const std::string& TrackEvent::_internal_categories(int index) const {
  return _impl_.categories_.Get(index);
}
inline const std::string& TrackEvent::categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.categories)
  return _internal_categories(index);
}
inline std::string* TrackEvent::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.categories)
  return _impl_.categories_.Mutable(index);
}
inline void TrackEvent::set_categories(int index, const std::string& value) {
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::set_categories(int index, std::string&& value) {
  _impl_.categories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::set_categories(int index, const char* value, size_t size) {
  _impl_.categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TrackEvent.categories)
}
inline std::string* TrackEvent::_internal_add_categories() {
  return _impl_.categories_.Add();
}
inline void TrackEvent::add_categories(const std::string& value) {
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::add_categories(std::string&& value) {
  _impl_.categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TrackEvent.categories)
}
inline void TrackEvent::add_categories(const char* value, size_t size) {
  _impl_.categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TrackEvent.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrackEvent::categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.categories)
  return _impl_.categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrackEvent::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.categories)
  return &_impl_.categories_;
}

// uint64 name_iid = 10;
inline bool TrackEvent::_internal_has_name_iid() const {
  return name_field_case() == kNameIid;
}
inline bool TrackEvent::has_name_iid() const {
  return _internal_has_name_iid();
}
inline void TrackEvent::set_has_name_iid() {
  _impl_._oneof_case_[0] = kNameIid;
}
inline void TrackEvent::clear_name_iid() {
  if (_internal_has_name_iid()) {
    _impl_.name_field_.name_iid_ = uint64_t{0u};
    clear_has_name_field();
  }
}
inline uint64_t TrackEvent::_internal_name_iid() const {
  if (_internal_has_name_iid()) {
    return _impl_.name_field_.name_iid_;
  }
  return uint64_t{0u};
}
inline void TrackEvent::_internal_set_name_iid(uint64_t value) {
  if (!_internal_has_name_iid()) {
    clear_name_field();
    set_has_name_iid();
  }
  _impl_.name_field_.name_iid_ = value;
}
inline uint64_t TrackEvent::name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.name_iid)
  return _internal_name_iid();
}
inline void TrackEvent::set_name_iid(uint64_t value) {
  _internal_set_name_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.name_iid)
}

// string name = 23;
inline bool TrackEvent::_internal_has_name() const {
  return name_field_case() == kName;
}
inline bool TrackEvent::has_name() const {
  return _internal_has_name();
}
inline void TrackEvent::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void TrackEvent::clear_name() {
  if (_internal_has_name()) {
    _impl_.name_field_.name_.Destroy();
    clear_has_name_field();
  }
}
inline const std::string& TrackEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void TrackEvent::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_name_field();
    set_has_name();
    _impl_.name_field_.name_.InitDefault();
  }
  _impl_.name_field_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.name)
}
inline std::string* TrackEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.name)
  return _s;
}
inline const std::string& TrackEvent::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.name_field_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrackEvent::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_name_field();
    set_has_name();
    _impl_.name_field_.name_.InitDefault();
  }
  _impl_.name_field_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackEvent::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_name_field();
    set_has_name();
    _impl_.name_field_.name_.InitDefault();
  }
  return _impl_.name_field_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrackEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.name)
  if (_internal_has_name()) {
    clear_has_name_field();
    return _impl_.name_field_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void TrackEvent::set_allocated_name(std::string* name) {
  if (has_name_field()) {
    clear_name_field();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.name_field_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.name)
}

// optional .perfetto.protos.TrackEvent.Type type = 9;
inline bool TrackEvent::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TrackEvent::has_type() const {
  return _internal_has_type();
}
inline void TrackEvent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::perfetto::protos::TrackEvent_Type TrackEvent::_internal_type() const {
  return static_cast< ::perfetto::protos::TrackEvent_Type >(_impl_.type_);
}
inline ::perfetto::protos::TrackEvent_Type TrackEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.type)
  return _internal_type();
}
inline void TrackEvent::_internal_set_type(::perfetto::protos::TrackEvent_Type value) {
  assert(::perfetto::protos::TrackEvent_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.type_ = value;
}
inline void TrackEvent::set_type(::perfetto::protos::TrackEvent_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.type)
}

// optional uint64 track_uuid = 11;
inline bool TrackEvent::_internal_has_track_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TrackEvent::has_track_uuid() const {
  return _internal_has_track_uuid();
}
inline void TrackEvent::clear_track_uuid() {
  _impl_.track_uuid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint64_t TrackEvent::_internal_track_uuid() const {
  return _impl_.track_uuid_;
}
inline uint64_t TrackEvent::track_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.track_uuid)
  return _internal_track_uuid();
}
inline void TrackEvent::_internal_set_track_uuid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.track_uuid_ = value;
}
inline void TrackEvent::set_track_uuid(uint64_t value) {
  _internal_set_track_uuid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.track_uuid)
}

// int64 counter_value = 30;
inline bool TrackEvent::_internal_has_counter_value() const {
  return counter_value_field_case() == kCounterValue;
}
inline bool TrackEvent::has_counter_value() const {
  return _internal_has_counter_value();
}
inline void TrackEvent::set_has_counter_value() {
  _impl_._oneof_case_[1] = kCounterValue;
}
inline void TrackEvent::clear_counter_value() {
  if (_internal_has_counter_value()) {
    _impl_.counter_value_field_.counter_value_ = int64_t{0};
    clear_has_counter_value_field();
  }
}
inline int64_t TrackEvent::_internal_counter_value() const {
  if (_internal_has_counter_value()) {
    return _impl_.counter_value_field_.counter_value_;
  }
  return int64_t{0};
}
inline void TrackEvent::_internal_set_counter_value(int64_t value) {
  if (!_internal_has_counter_value()) {
    clear_counter_value_field();
    set_has_counter_value();
  }
  _impl_.counter_value_field_.counter_value_ = value;
}
inline int64_t TrackEvent::counter_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.counter_value)
  return _internal_counter_value();
}
inline void TrackEvent::set_counter_value(int64_t value) {
  _internal_set_counter_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.counter_value)
}

// double double_counter_value = 44;
inline bool TrackEvent::_internal_has_double_counter_value() const {
  return counter_value_field_case() == kDoubleCounterValue;
}
inline bool TrackEvent::has_double_counter_value() const {
  return _internal_has_double_counter_value();
}
inline void TrackEvent::set_has_double_counter_value() {
  _impl_._oneof_case_[1] = kDoubleCounterValue;
}
inline void TrackEvent::clear_double_counter_value() {
  if (_internal_has_double_counter_value()) {
    _impl_.counter_value_field_.double_counter_value_ = 0;
    clear_has_counter_value_field();
  }
}
inline double TrackEvent::_internal_double_counter_value() const {
  if (_internal_has_double_counter_value()) {
    return _impl_.counter_value_field_.double_counter_value_;
  }
  return 0;
}
inline void TrackEvent::_internal_set_double_counter_value(double value) {
  if (!_internal_has_double_counter_value()) {
    clear_counter_value_field();
    set_has_double_counter_value();
  }
  _impl_.counter_value_field_.double_counter_value_ = value;
}
inline double TrackEvent::double_counter_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.double_counter_value)
  return _internal_double_counter_value();
}
inline void TrackEvent::set_double_counter_value(double value) {
  _internal_set_double_counter_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.double_counter_value)
}

// repeated uint64 extra_counter_track_uuids = 31;
inline int TrackEvent::_internal_extra_counter_track_uuids_size() const {
  return _impl_.extra_counter_track_uuids_.size();
}
inline int TrackEvent::extra_counter_track_uuids_size() const {
  return _internal_extra_counter_track_uuids_size();
}
inline void TrackEvent::clear_extra_counter_track_uuids() {
  _impl_.extra_counter_track_uuids_.Clear();
}
inline uint64_t TrackEvent::_internal_extra_counter_track_uuids(int index) const {
  return _impl_.extra_counter_track_uuids_.Get(index);
}
inline uint64_t TrackEvent::extra_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_counter_track_uuids)
  return _internal_extra_counter_track_uuids(index);
}
inline void TrackEvent::set_extra_counter_track_uuids(int index, uint64_t value) {
  _impl_.extra_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_counter_track_uuids)
}
inline void TrackEvent::_internal_add_extra_counter_track_uuids(uint64_t value) {
  _impl_.extra_counter_track_uuids_.Add(value);
}
inline void TrackEvent::add_extra_counter_track_uuids(uint64_t value) {
  _internal_add_extra_counter_track_uuids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::_internal_extra_counter_track_uuids() const {
  return _impl_.extra_counter_track_uuids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::extra_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_counter_track_uuids)
  return _internal_extra_counter_track_uuids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::_internal_mutable_extra_counter_track_uuids() {
  return &_impl_.extra_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::mutable_extra_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_counter_track_uuids)
  return _internal_mutable_extra_counter_track_uuids();
}

// repeated int64 extra_counter_values = 12;
inline int TrackEvent::_internal_extra_counter_values_size() const {
  return _impl_.extra_counter_values_.size();
}
inline int TrackEvent::extra_counter_values_size() const {
  return _internal_extra_counter_values_size();
}
inline void TrackEvent::clear_extra_counter_values() {
  _impl_.extra_counter_values_.Clear();
}
inline int64_t TrackEvent::_internal_extra_counter_values(int index) const {
  return _impl_.extra_counter_values_.Get(index);
}
inline int64_t TrackEvent::extra_counter_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_counter_values)
  return _internal_extra_counter_values(index);
}
inline void TrackEvent::set_extra_counter_values(int index, int64_t value) {
  _impl_.extra_counter_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_counter_values)
}
inline void TrackEvent::_internal_add_extra_counter_values(int64_t value) {
  _impl_.extra_counter_values_.Add(value);
}
inline void TrackEvent::add_extra_counter_values(int64_t value) {
  _internal_add_extra_counter_values(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_counter_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TrackEvent::_internal_extra_counter_values() const {
  return _impl_.extra_counter_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TrackEvent::extra_counter_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_counter_values)
  return _internal_extra_counter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TrackEvent::_internal_mutable_extra_counter_values() {
  return &_impl_.extra_counter_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TrackEvent::mutable_extra_counter_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_counter_values)
  return _internal_mutable_extra_counter_values();
}

// repeated uint64 extra_double_counter_track_uuids = 45;
inline int TrackEvent::_internal_extra_double_counter_track_uuids_size() const {
  return _impl_.extra_double_counter_track_uuids_.size();
}
inline int TrackEvent::extra_double_counter_track_uuids_size() const {
  return _internal_extra_double_counter_track_uuids_size();
}
inline void TrackEvent::clear_extra_double_counter_track_uuids() {
  _impl_.extra_double_counter_track_uuids_.Clear();
}
inline uint64_t TrackEvent::_internal_extra_double_counter_track_uuids(int index) const {
  return _impl_.extra_double_counter_track_uuids_.Get(index);
}
inline uint64_t TrackEvent::extra_double_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
  return _internal_extra_double_counter_track_uuids(index);
}
inline void TrackEvent::set_extra_double_counter_track_uuids(int index, uint64_t value) {
  _impl_.extra_double_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
}
inline void TrackEvent::_internal_add_extra_double_counter_track_uuids(uint64_t value) {
  _impl_.extra_double_counter_track_uuids_.Add(value);
}
inline void TrackEvent::add_extra_double_counter_track_uuids(uint64_t value) {
  _internal_add_extra_double_counter_track_uuids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::_internal_extra_double_counter_track_uuids() const {
  return _impl_.extra_double_counter_track_uuids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::extra_double_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
  return _internal_extra_double_counter_track_uuids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::_internal_mutable_extra_double_counter_track_uuids() {
  return &_impl_.extra_double_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::mutable_extra_double_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_double_counter_track_uuids)
  return _internal_mutable_extra_double_counter_track_uuids();
}

// repeated double extra_double_counter_values = 46;
inline int TrackEvent::_internal_extra_double_counter_values_size() const {
  return _impl_.extra_double_counter_values_.size();
}
inline int TrackEvent::extra_double_counter_values_size() const {
  return _internal_extra_double_counter_values_size();
}
inline void TrackEvent::clear_extra_double_counter_values() {
  _impl_.extra_double_counter_values_.Clear();
}
inline double TrackEvent::_internal_extra_double_counter_values(int index) const {
  return _impl_.extra_double_counter_values_.Get(index);
}
inline double TrackEvent::extra_double_counter_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.extra_double_counter_values)
  return _internal_extra_double_counter_values(index);
}
inline void TrackEvent::set_extra_double_counter_values(int index, double value) {
  _impl_.extra_double_counter_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.extra_double_counter_values)
}
inline void TrackEvent::_internal_add_extra_double_counter_values(double value) {
  _impl_.extra_double_counter_values_.Add(value);
}
inline void TrackEvent::add_extra_double_counter_values(double value) {
  _internal_add_extra_double_counter_values(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.extra_double_counter_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TrackEvent::_internal_extra_double_counter_values() const {
  return _impl_.extra_double_counter_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TrackEvent::extra_double_counter_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.extra_double_counter_values)
  return _internal_extra_double_counter_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TrackEvent::_internal_mutable_extra_double_counter_values() {
  return &_impl_.extra_double_counter_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TrackEvent::mutable_extra_double_counter_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.extra_double_counter_values)
  return _internal_mutable_extra_double_counter_values();
}

// repeated uint64 flow_ids_old = 36 [deprecated = true];
inline int TrackEvent::_internal_flow_ids_old_size() const {
  return _impl_.flow_ids_old_.size();
}
inline int TrackEvent::flow_ids_old_size() const {
  return _internal_flow_ids_old_size();
}
inline void TrackEvent::clear_flow_ids_old() {
  _impl_.flow_ids_old_.Clear();
}
inline uint64_t TrackEvent::_internal_flow_ids_old(int index) const {
  return _impl_.flow_ids_old_.Get(index);
}
inline uint64_t TrackEvent::flow_ids_old(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.flow_ids_old)
  return _internal_flow_ids_old(index);
}
inline void TrackEvent::set_flow_ids_old(int index, uint64_t value) {
  _impl_.flow_ids_old_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.flow_ids_old)
}
inline void TrackEvent::_internal_add_flow_ids_old(uint64_t value) {
  _impl_.flow_ids_old_.Add(value);
}
inline void TrackEvent::add_flow_ids_old(uint64_t value) {
  _internal_add_flow_ids_old(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.flow_ids_old)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::_internal_flow_ids_old() const {
  return _impl_.flow_ids_old_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::flow_ids_old() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.flow_ids_old)
  return _internal_flow_ids_old();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::_internal_mutable_flow_ids_old() {
  return &_impl_.flow_ids_old_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::mutable_flow_ids_old() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.flow_ids_old)
  return _internal_mutable_flow_ids_old();
}

// repeated fixed64 flow_ids = 47;
inline int TrackEvent::_internal_flow_ids_size() const {
  return _impl_.flow_ids_.size();
}
inline int TrackEvent::flow_ids_size() const {
  return _internal_flow_ids_size();
}
inline void TrackEvent::clear_flow_ids() {
  _impl_.flow_ids_.Clear();
}
inline uint64_t TrackEvent::_internal_flow_ids(int index) const {
  return _impl_.flow_ids_.Get(index);
}
inline uint64_t TrackEvent::flow_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.flow_ids)
  return _internal_flow_ids(index);
}
inline void TrackEvent::set_flow_ids(int index, uint64_t value) {
  _impl_.flow_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.flow_ids)
}
inline void TrackEvent::_internal_add_flow_ids(uint64_t value) {
  _impl_.flow_ids_.Add(value);
}
inline void TrackEvent::add_flow_ids(uint64_t value) {
  _internal_add_flow_ids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.flow_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::_internal_flow_ids() const {
  return _impl_.flow_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::flow_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.flow_ids)
  return _internal_flow_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::_internal_mutable_flow_ids() {
  return &_impl_.flow_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::mutable_flow_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.flow_ids)
  return _internal_mutable_flow_ids();
}

// repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];
inline int TrackEvent::_internal_terminating_flow_ids_old_size() const {
  return _impl_.terminating_flow_ids_old_.size();
}
inline int TrackEvent::terminating_flow_ids_old_size() const {
  return _internal_terminating_flow_ids_old_size();
}
inline void TrackEvent::clear_terminating_flow_ids_old() {
  _impl_.terminating_flow_ids_old_.Clear();
}
inline uint64_t TrackEvent::_internal_terminating_flow_ids_old(int index) const {
  return _impl_.terminating_flow_ids_old_.Get(index);
}
inline uint64_t TrackEvent::terminating_flow_ids_old(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.terminating_flow_ids_old)
  return _internal_terminating_flow_ids_old(index);
}
inline void TrackEvent::set_terminating_flow_ids_old(int index, uint64_t value) {
  _impl_.terminating_flow_ids_old_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.terminating_flow_ids_old)
}
inline void TrackEvent::_internal_add_terminating_flow_ids_old(uint64_t value) {
  _impl_.terminating_flow_ids_old_.Add(value);
}
inline void TrackEvent::add_terminating_flow_ids_old(uint64_t value) {
  _internal_add_terminating_flow_ids_old(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.terminating_flow_ids_old)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::_internal_terminating_flow_ids_old() const {
  return _impl_.terminating_flow_ids_old_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::terminating_flow_ids_old() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.terminating_flow_ids_old)
  return _internal_terminating_flow_ids_old();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::_internal_mutable_terminating_flow_ids_old() {
  return &_impl_.terminating_flow_ids_old_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::mutable_terminating_flow_ids_old() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.terminating_flow_ids_old)
  return _internal_mutable_terminating_flow_ids_old();
}

// repeated fixed64 terminating_flow_ids = 48;
inline int TrackEvent::_internal_terminating_flow_ids_size() const {
  return _impl_.terminating_flow_ids_.size();
}
inline int TrackEvent::terminating_flow_ids_size() const {
  return _internal_terminating_flow_ids_size();
}
inline void TrackEvent::clear_terminating_flow_ids() {
  _impl_.terminating_flow_ids_.Clear();
}
inline uint64_t TrackEvent::_internal_terminating_flow_ids(int index) const {
  return _impl_.terminating_flow_ids_.Get(index);
}
inline uint64_t TrackEvent::terminating_flow_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.terminating_flow_ids)
  return _internal_terminating_flow_ids(index);
}
inline void TrackEvent::set_terminating_flow_ids(int index, uint64_t value) {
  _impl_.terminating_flow_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.terminating_flow_ids)
}
inline void TrackEvent::_internal_add_terminating_flow_ids(uint64_t value) {
  _impl_.terminating_flow_ids_.Add(value);
}
inline void TrackEvent::add_terminating_flow_ids(uint64_t value) {
  _internal_add_terminating_flow_ids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.terminating_flow_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::_internal_terminating_flow_ids() const {
  return _impl_.terminating_flow_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEvent::terminating_flow_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.terminating_flow_ids)
  return _internal_terminating_flow_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::_internal_mutable_terminating_flow_ids() {
  return &_impl_.terminating_flow_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEvent::mutable_terminating_flow_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.terminating_flow_ids)
  return _internal_mutable_terminating_flow_ids();
}

// repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
inline int TrackEvent::_internal_debug_annotations_size() const {
  return _impl_.debug_annotations_.size();
}
inline int TrackEvent::debug_annotations_size() const {
  return _internal_debug_annotations_size();
}
inline ::perfetto::protos::DebugAnnotation* TrackEvent::mutable_debug_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.debug_annotations)
  return _impl_.debug_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
TrackEvent::mutable_debug_annotations() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEvent.debug_annotations)
  return &_impl_.debug_annotations_;
}
inline const ::perfetto::protos::DebugAnnotation& TrackEvent::_internal_debug_annotations(int index) const {
  return _impl_.debug_annotations_.Get(index);
}
inline const ::perfetto::protos::DebugAnnotation& TrackEvent::debug_annotations(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.debug_annotations)
  return _internal_debug_annotations(index);
}
inline ::perfetto::protos::DebugAnnotation* TrackEvent::_internal_add_debug_annotations() {
  return _impl_.debug_annotations_.Add();
}
inline ::perfetto::protos::DebugAnnotation* TrackEvent::add_debug_annotations() {
  ::perfetto::protos::DebugAnnotation* _add = _internal_add_debug_annotations();
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEvent.debug_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
TrackEvent::debug_annotations() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEvent.debug_annotations)
  return _impl_.debug_annotations_;
}

// optional .perfetto.protos.TaskExecution task_execution = 5;
inline bool TrackEvent::_internal_has_task_execution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.task_execution_ != nullptr);
  return value;
}
inline bool TrackEvent::has_task_execution() const {
  return _internal_has_task_execution();
}
inline const ::perfetto::protos::TaskExecution& TrackEvent::_internal_task_execution() const {
  const ::perfetto::protos::TaskExecution* p = _impl_.task_execution_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TaskExecution&>(
      ::perfetto::protos::_TaskExecution_default_instance_);
}
inline const ::perfetto::protos::TaskExecution& TrackEvent::task_execution() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.task_execution)
  return _internal_task_execution();
}
inline void TrackEvent::unsafe_arena_set_allocated_task_execution(
    ::perfetto::protos::TaskExecution* task_execution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.task_execution_);
  }
  _impl_.task_execution_ = task_execution;
  if (task_execution) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.task_execution)
}
inline ::perfetto::protos::TaskExecution* TrackEvent::release_task_execution() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TaskExecution* temp = _impl_.task_execution_;
  _impl_.task_execution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TaskExecution* TrackEvent::unsafe_arena_release_task_execution() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.task_execution)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::TaskExecution* temp = _impl_.task_execution_;
  _impl_.task_execution_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TaskExecution* TrackEvent::_internal_mutable_task_execution() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.task_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TaskExecution>(GetArenaForAllocation());
    _impl_.task_execution_ = p;
  }
  return _impl_.task_execution_;
}
inline ::perfetto::protos::TaskExecution* TrackEvent::mutable_task_execution() {
  ::perfetto::protos::TaskExecution* _msg = _internal_mutable_task_execution();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.task_execution)
  return _msg;
}
inline void TrackEvent::set_allocated_task_execution(::perfetto::protos::TaskExecution* task_execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.task_execution_);
  }
  if (task_execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_execution));
    if (message_arena != submessage_arena) {
      task_execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_execution, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_execution_ = task_execution;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.task_execution)
}

// optional .perfetto.protos.LogMessage log_message = 21;
inline bool TrackEvent::_internal_has_log_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.log_message_ != nullptr);
  return value;
}
inline bool TrackEvent::has_log_message() const {
  return _internal_has_log_message();
}
inline const ::perfetto::protos::LogMessage& TrackEvent::_internal_log_message() const {
  const ::perfetto::protos::LogMessage* p = _impl_.log_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::LogMessage&>(
      ::perfetto::protos::_LogMessage_default_instance_);
}
inline const ::perfetto::protos::LogMessage& TrackEvent::log_message() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.log_message)
  return _internal_log_message();
}
inline void TrackEvent::unsafe_arena_set_allocated_log_message(
    ::perfetto::protos::LogMessage* log_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_message_);
  }
  _impl_.log_message_ = log_message;
  if (log_message) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.log_message)
}
inline ::perfetto::protos::LogMessage* TrackEvent::release_log_message() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::LogMessage* temp = _impl_.log_message_;
  _impl_.log_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::LogMessage* TrackEvent::unsafe_arena_release_log_message() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.log_message)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::LogMessage* temp = _impl_.log_message_;
  _impl_.log_message_ = nullptr;
  return temp;
}
inline ::perfetto::protos::LogMessage* TrackEvent::_internal_mutable_log_message() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.log_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::LogMessage>(GetArenaForAllocation());
    _impl_.log_message_ = p;
  }
  return _impl_.log_message_;
}
inline ::perfetto::protos::LogMessage* TrackEvent::mutable_log_message() {
  ::perfetto::protos::LogMessage* _msg = _internal_mutable_log_message();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.log_message)
  return _msg;
}
inline void TrackEvent::set_allocated_log_message(::perfetto::protos::LogMessage* log_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.log_message_);
  }
  if (log_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_message));
    if (message_arena != submessage_arena) {
      log_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.log_message_ = log_message;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.log_message)
}

// optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
inline bool TrackEvent::_internal_has_cc_scheduler_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cc_scheduler_state_ != nullptr);
  return value;
}
inline bool TrackEvent::has_cc_scheduler_state() const {
  return _internal_has_cc_scheduler_state();
}
inline const ::perfetto::protos::ChromeCompositorSchedulerState& TrackEvent::_internal_cc_scheduler_state() const {
  const ::perfetto::protos::ChromeCompositorSchedulerState* p = _impl_.cc_scheduler_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeCompositorSchedulerState&>(
      ::perfetto::protos::_ChromeCompositorSchedulerState_default_instance_);
}
inline const ::perfetto::protos::ChromeCompositorSchedulerState& TrackEvent::cc_scheduler_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.cc_scheduler_state)
  return _internal_cc_scheduler_state();
}
inline void TrackEvent::unsafe_arena_set_allocated_cc_scheduler_state(
    ::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cc_scheduler_state_);
  }
  _impl_.cc_scheduler_state_ = cc_scheduler_state;
  if (cc_scheduler_state) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.cc_scheduler_state)
}
inline ::perfetto::protos::ChromeCompositorSchedulerState* TrackEvent::release_cc_scheduler_state() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeCompositorSchedulerState* temp = _impl_.cc_scheduler_state_;
  _impl_.cc_scheduler_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeCompositorSchedulerState* TrackEvent::unsafe_arena_release_cc_scheduler_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.cc_scheduler_state)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeCompositorSchedulerState* temp = _impl_.cc_scheduler_state_;
  _impl_.cc_scheduler_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeCompositorSchedulerState* TrackEvent::_internal_mutable_cc_scheduler_state() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.cc_scheduler_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeCompositorSchedulerState>(GetArenaForAllocation());
    _impl_.cc_scheduler_state_ = p;
  }
  return _impl_.cc_scheduler_state_;
}
inline ::perfetto::protos::ChromeCompositorSchedulerState* TrackEvent::mutable_cc_scheduler_state() {
  ::perfetto::protos::ChromeCompositorSchedulerState* _msg = _internal_mutable_cc_scheduler_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.cc_scheduler_state)
  return _msg;
}
inline void TrackEvent::set_allocated_cc_scheduler_state(::perfetto::protos::ChromeCompositorSchedulerState* cc_scheduler_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cc_scheduler_state_);
  }
  if (cc_scheduler_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cc_scheduler_state));
    if (message_arena != submessage_arena) {
      cc_scheduler_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cc_scheduler_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.cc_scheduler_state_ = cc_scheduler_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.cc_scheduler_state)
}

// optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
inline bool TrackEvent::_internal_has_chrome_user_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_user_event_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_user_event() const {
  return _internal_has_chrome_user_event();
}
inline const ::perfetto::protos::ChromeUserEvent& TrackEvent::_internal_chrome_user_event() const {
  const ::perfetto::protos::ChromeUserEvent* p = _impl_.chrome_user_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeUserEvent&>(
      ::perfetto::protos::_ChromeUserEvent_default_instance_);
}
inline const ::perfetto::protos::ChromeUserEvent& TrackEvent::chrome_user_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_user_event)
  return _internal_chrome_user_event();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_user_event(
    ::perfetto::protos::ChromeUserEvent* chrome_user_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_user_event_);
  }
  _impl_.chrome_user_event_ = chrome_user_event;
  if (chrome_user_event) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_user_event)
}
inline ::perfetto::protos::ChromeUserEvent* TrackEvent::release_chrome_user_event() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::ChromeUserEvent* temp = _impl_.chrome_user_event_;
  _impl_.chrome_user_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeUserEvent* TrackEvent::unsafe_arena_release_chrome_user_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_user_event)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::ChromeUserEvent* temp = _impl_.chrome_user_event_;
  _impl_.chrome_user_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeUserEvent* TrackEvent::_internal_mutable_chrome_user_event() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.chrome_user_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeUserEvent>(GetArenaForAllocation());
    _impl_.chrome_user_event_ = p;
  }
  return _impl_.chrome_user_event_;
}
inline ::perfetto::protos::ChromeUserEvent* TrackEvent::mutable_chrome_user_event() {
  ::perfetto::protos::ChromeUserEvent* _msg = _internal_mutable_chrome_user_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_user_event)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEvent* chrome_user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_user_event_);
  }
  if (chrome_user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_user_event));
    if (message_arena != submessage_arena) {
      chrome_user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_user_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.chrome_user_event_ = chrome_user_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_user_event)
}

// optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
inline bool TrackEvent::_internal_has_chrome_keyed_service() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_keyed_service_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_keyed_service() const {
  return _internal_has_chrome_keyed_service();
}
inline const ::perfetto::protos::ChromeKeyedService& TrackEvent::_internal_chrome_keyed_service() const {
  const ::perfetto::protos::ChromeKeyedService* p = _impl_.chrome_keyed_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeKeyedService&>(
      ::perfetto::protos::_ChromeKeyedService_default_instance_);
}
inline const ::perfetto::protos::ChromeKeyedService& TrackEvent::chrome_keyed_service() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_keyed_service)
  return _internal_chrome_keyed_service();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_keyed_service(
    ::perfetto::protos::ChromeKeyedService* chrome_keyed_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_keyed_service_);
  }
  _impl_.chrome_keyed_service_ = chrome_keyed_service;
  if (chrome_keyed_service) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_keyed_service)
}
inline ::perfetto::protos::ChromeKeyedService* TrackEvent::release_chrome_keyed_service() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ChromeKeyedService* temp = _impl_.chrome_keyed_service_;
  _impl_.chrome_keyed_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeKeyedService* TrackEvent::unsafe_arena_release_chrome_keyed_service() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_keyed_service)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::ChromeKeyedService* temp = _impl_.chrome_keyed_service_;
  _impl_.chrome_keyed_service_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeKeyedService* TrackEvent::_internal_mutable_chrome_keyed_service() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.chrome_keyed_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeKeyedService>(GetArenaForAllocation());
    _impl_.chrome_keyed_service_ = p;
  }
  return _impl_.chrome_keyed_service_;
}
inline ::perfetto::protos::ChromeKeyedService* TrackEvent::mutable_chrome_keyed_service() {
  ::perfetto::protos::ChromeKeyedService* _msg = _internal_mutable_chrome_keyed_service();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_keyed_service)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_keyed_service(::perfetto::protos::ChromeKeyedService* chrome_keyed_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_keyed_service_);
  }
  if (chrome_keyed_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_keyed_service));
    if (message_arena != submessage_arena) {
      chrome_keyed_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_keyed_service, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.chrome_keyed_service_ = chrome_keyed_service;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_keyed_service)
}

// optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
inline bool TrackEvent::_internal_has_chrome_legacy_ipc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_legacy_ipc_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_legacy_ipc() const {
  return _internal_has_chrome_legacy_ipc();
}
inline const ::perfetto::protos::ChromeLegacyIpc& TrackEvent::_internal_chrome_legacy_ipc() const {
  const ::perfetto::protos::ChromeLegacyIpc* p = _impl_.chrome_legacy_ipc_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeLegacyIpc&>(
      ::perfetto::protos::_ChromeLegacyIpc_default_instance_);
}
inline const ::perfetto::protos::ChromeLegacyIpc& TrackEvent::chrome_legacy_ipc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_legacy_ipc)
  return _internal_chrome_legacy_ipc();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_legacy_ipc(
    ::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_legacy_ipc_);
  }
  _impl_.chrome_legacy_ipc_ = chrome_legacy_ipc;
  if (chrome_legacy_ipc) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_legacy_ipc)
}
inline ::perfetto::protos::ChromeLegacyIpc* TrackEvent::release_chrome_legacy_ipc() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::ChromeLegacyIpc* temp = _impl_.chrome_legacy_ipc_;
  _impl_.chrome_legacy_ipc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeLegacyIpc* TrackEvent::unsafe_arena_release_chrome_legacy_ipc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_legacy_ipc)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::ChromeLegacyIpc* temp = _impl_.chrome_legacy_ipc_;
  _impl_.chrome_legacy_ipc_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeLegacyIpc* TrackEvent::_internal_mutable_chrome_legacy_ipc() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.chrome_legacy_ipc_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeLegacyIpc>(GetArenaForAllocation());
    _impl_.chrome_legacy_ipc_ = p;
  }
  return _impl_.chrome_legacy_ipc_;
}
inline ::perfetto::protos::ChromeLegacyIpc* TrackEvent::mutable_chrome_legacy_ipc() {
  ::perfetto::protos::ChromeLegacyIpc* _msg = _internal_mutable_chrome_legacy_ipc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_legacy_ipc)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_legacy_ipc(::perfetto::protos::ChromeLegacyIpc* chrome_legacy_ipc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_legacy_ipc_);
  }
  if (chrome_legacy_ipc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_legacy_ipc));
    if (message_arena != submessage_arena) {
      chrome_legacy_ipc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_legacy_ipc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.chrome_legacy_ipc_ = chrome_legacy_ipc;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_legacy_ipc)
}

// optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
inline bool TrackEvent::_internal_has_chrome_histogram_sample() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_histogram_sample_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_histogram_sample() const {
  return _internal_has_chrome_histogram_sample();
}
inline const ::perfetto::protos::ChromeHistogramSample& TrackEvent::_internal_chrome_histogram_sample() const {
  const ::perfetto::protos::ChromeHistogramSample* p = _impl_.chrome_histogram_sample_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeHistogramSample&>(
      ::perfetto::protos::_ChromeHistogramSample_default_instance_);
}
inline const ::perfetto::protos::ChromeHistogramSample& TrackEvent::chrome_histogram_sample() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_histogram_sample)
  return _internal_chrome_histogram_sample();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_histogram_sample(
    ::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_histogram_sample_);
  }
  _impl_.chrome_histogram_sample_ = chrome_histogram_sample;
  if (chrome_histogram_sample) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_histogram_sample)
}
inline ::perfetto::protos::ChromeHistogramSample* TrackEvent::release_chrome_histogram_sample() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::ChromeHistogramSample* temp = _impl_.chrome_histogram_sample_;
  _impl_.chrome_histogram_sample_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeHistogramSample* TrackEvent::unsafe_arena_release_chrome_histogram_sample() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_histogram_sample)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::ChromeHistogramSample* temp = _impl_.chrome_histogram_sample_;
  _impl_.chrome_histogram_sample_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeHistogramSample* TrackEvent::_internal_mutable_chrome_histogram_sample() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.chrome_histogram_sample_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeHistogramSample>(GetArenaForAllocation());
    _impl_.chrome_histogram_sample_ = p;
  }
  return _impl_.chrome_histogram_sample_;
}
inline ::perfetto::protos::ChromeHistogramSample* TrackEvent::mutable_chrome_histogram_sample() {
  ::perfetto::protos::ChromeHistogramSample* _msg = _internal_mutable_chrome_histogram_sample();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_histogram_sample)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_histogram_sample(::perfetto::protos::ChromeHistogramSample* chrome_histogram_sample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_histogram_sample_);
  }
  if (chrome_histogram_sample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_histogram_sample));
    if (message_arena != submessage_arena) {
      chrome_histogram_sample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_histogram_sample, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.chrome_histogram_sample_ = chrome_histogram_sample;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_histogram_sample)
}

// optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
inline bool TrackEvent::_internal_has_chrome_latency_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_latency_info_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_latency_info() const {
  return _internal_has_chrome_latency_info();
}
inline const ::perfetto::protos::ChromeLatencyInfo& TrackEvent::_internal_chrome_latency_info() const {
  const ::perfetto::protos::ChromeLatencyInfo* p = _impl_.chrome_latency_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeLatencyInfo&>(
      ::perfetto::protos::_ChromeLatencyInfo_default_instance_);
}
inline const ::perfetto::protos::ChromeLatencyInfo& TrackEvent::chrome_latency_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_latency_info)
  return _internal_chrome_latency_info();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_latency_info(
    ::perfetto::protos::ChromeLatencyInfo* chrome_latency_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_latency_info_);
  }
  _impl_.chrome_latency_info_ = chrome_latency_info;
  if (chrome_latency_info) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_latency_info)
}
inline ::perfetto::protos::ChromeLatencyInfo* TrackEvent::release_chrome_latency_info() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::ChromeLatencyInfo* temp = _impl_.chrome_latency_info_;
  _impl_.chrome_latency_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeLatencyInfo* TrackEvent::unsafe_arena_release_chrome_latency_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_latency_info)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::ChromeLatencyInfo* temp = _impl_.chrome_latency_info_;
  _impl_.chrome_latency_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeLatencyInfo* TrackEvent::_internal_mutable_chrome_latency_info() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.chrome_latency_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeLatencyInfo>(GetArenaForAllocation());
    _impl_.chrome_latency_info_ = p;
  }
  return _impl_.chrome_latency_info_;
}
inline ::perfetto::protos::ChromeLatencyInfo* TrackEvent::mutable_chrome_latency_info() {
  ::perfetto::protos::ChromeLatencyInfo* _msg = _internal_mutable_chrome_latency_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_latency_info)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_latency_info(::perfetto::protos::ChromeLatencyInfo* chrome_latency_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_latency_info_);
  }
  if (chrome_latency_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_latency_info));
    if (message_arena != submessage_arena) {
      chrome_latency_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_latency_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.chrome_latency_info_ = chrome_latency_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_latency_info)
}

// optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
inline bool TrackEvent::_internal_has_chrome_frame_reporter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_frame_reporter_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_frame_reporter() const {
  return _internal_has_chrome_frame_reporter();
}
inline const ::perfetto::protos::ChromeFrameReporter& TrackEvent::_internal_chrome_frame_reporter() const {
  const ::perfetto::protos::ChromeFrameReporter* p = _impl_.chrome_frame_reporter_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeFrameReporter&>(
      ::perfetto::protos::_ChromeFrameReporter_default_instance_);
}
inline const ::perfetto::protos::ChromeFrameReporter& TrackEvent::chrome_frame_reporter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_frame_reporter)
  return _internal_chrome_frame_reporter();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_frame_reporter(
    ::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_frame_reporter_);
  }
  _impl_.chrome_frame_reporter_ = chrome_frame_reporter;
  if (chrome_frame_reporter) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_frame_reporter)
}
inline ::perfetto::protos::ChromeFrameReporter* TrackEvent::release_chrome_frame_reporter() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::ChromeFrameReporter* temp = _impl_.chrome_frame_reporter_;
  _impl_.chrome_frame_reporter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeFrameReporter* TrackEvent::unsafe_arena_release_chrome_frame_reporter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_frame_reporter)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::ChromeFrameReporter* temp = _impl_.chrome_frame_reporter_;
  _impl_.chrome_frame_reporter_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeFrameReporter* TrackEvent::_internal_mutable_chrome_frame_reporter() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.chrome_frame_reporter_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeFrameReporter>(GetArenaForAllocation());
    _impl_.chrome_frame_reporter_ = p;
  }
  return _impl_.chrome_frame_reporter_;
}
inline ::perfetto::protos::ChromeFrameReporter* TrackEvent::mutable_chrome_frame_reporter() {
  ::perfetto::protos::ChromeFrameReporter* _msg = _internal_mutable_chrome_frame_reporter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_frame_reporter)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_frame_reporter(::perfetto::protos::ChromeFrameReporter* chrome_frame_reporter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_frame_reporter_);
  }
  if (chrome_frame_reporter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_frame_reporter));
    if (message_arena != submessage_arena) {
      chrome_frame_reporter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_frame_reporter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.chrome_frame_reporter_ = chrome_frame_reporter;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_frame_reporter)
}

// optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
inline bool TrackEvent::_internal_has_chrome_application_state_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_application_state_info_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_application_state_info() const {
  return _internal_has_chrome_application_state_info();
}
inline const ::perfetto::protos::ChromeApplicationStateInfo& TrackEvent::_internal_chrome_application_state_info() const {
  const ::perfetto::protos::ChromeApplicationStateInfo* p = _impl_.chrome_application_state_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeApplicationStateInfo&>(
      ::perfetto::protos::_ChromeApplicationStateInfo_default_instance_);
}
inline const ::perfetto::protos::ChromeApplicationStateInfo& TrackEvent::chrome_application_state_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_application_state_info)
  return _internal_chrome_application_state_info();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_application_state_info(
    ::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_application_state_info_);
  }
  _impl_.chrome_application_state_info_ = chrome_application_state_info;
  if (chrome_application_state_info) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_application_state_info)
}
inline ::perfetto::protos::ChromeApplicationStateInfo* TrackEvent::release_chrome_application_state_info() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::ChromeApplicationStateInfo* temp = _impl_.chrome_application_state_info_;
  _impl_.chrome_application_state_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeApplicationStateInfo* TrackEvent::unsafe_arena_release_chrome_application_state_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_application_state_info)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::perfetto::protos::ChromeApplicationStateInfo* temp = _impl_.chrome_application_state_info_;
  _impl_.chrome_application_state_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeApplicationStateInfo* TrackEvent::_internal_mutable_chrome_application_state_info() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.chrome_application_state_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeApplicationStateInfo>(GetArenaForAllocation());
    _impl_.chrome_application_state_info_ = p;
  }
  return _impl_.chrome_application_state_info_;
}
inline ::perfetto::protos::ChromeApplicationStateInfo* TrackEvent::mutable_chrome_application_state_info() {
  ::perfetto::protos::ChromeApplicationStateInfo* _msg = _internal_mutable_chrome_application_state_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_application_state_info)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_application_state_info(::perfetto::protos::ChromeApplicationStateInfo* chrome_application_state_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_application_state_info_);
  }
  if (chrome_application_state_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_application_state_info));
    if (message_arena != submessage_arena) {
      chrome_application_state_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_application_state_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.chrome_application_state_info_ = chrome_application_state_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_application_state_info)
}

// optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
inline bool TrackEvent::_internal_has_chrome_renderer_scheduler_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_renderer_scheduler_state_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_renderer_scheduler_state() const {
  return _internal_has_chrome_renderer_scheduler_state();
}
inline const ::perfetto::protos::ChromeRendererSchedulerState& TrackEvent::_internal_chrome_renderer_scheduler_state() const {
  const ::perfetto::protos::ChromeRendererSchedulerState* p = _impl_.chrome_renderer_scheduler_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeRendererSchedulerState&>(
      ::perfetto::protos::_ChromeRendererSchedulerState_default_instance_);
}
inline const ::perfetto::protos::ChromeRendererSchedulerState& TrackEvent::chrome_renderer_scheduler_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
  return _internal_chrome_renderer_scheduler_state();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_renderer_scheduler_state(
    ::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_renderer_scheduler_state_);
  }
  _impl_.chrome_renderer_scheduler_state_ = chrome_renderer_scheduler_state;
  if (chrome_renderer_scheduler_state) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
}
inline ::perfetto::protos::ChromeRendererSchedulerState* TrackEvent::release_chrome_renderer_scheduler_state() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::ChromeRendererSchedulerState* temp = _impl_.chrome_renderer_scheduler_state_;
  _impl_.chrome_renderer_scheduler_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeRendererSchedulerState* TrackEvent::unsafe_arena_release_chrome_renderer_scheduler_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::perfetto::protos::ChromeRendererSchedulerState* temp = _impl_.chrome_renderer_scheduler_state_;
  _impl_.chrome_renderer_scheduler_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeRendererSchedulerState* TrackEvent::_internal_mutable_chrome_renderer_scheduler_state() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.chrome_renderer_scheduler_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeRendererSchedulerState>(GetArenaForAllocation());
    _impl_.chrome_renderer_scheduler_state_ = p;
  }
  return _impl_.chrome_renderer_scheduler_state_;
}
inline ::perfetto::protos::ChromeRendererSchedulerState* TrackEvent::mutable_chrome_renderer_scheduler_state() {
  ::perfetto::protos::ChromeRendererSchedulerState* _msg = _internal_mutable_chrome_renderer_scheduler_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_renderer_scheduler_state(::perfetto::protos::ChromeRendererSchedulerState* chrome_renderer_scheduler_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_renderer_scheduler_state_);
  }
  if (chrome_renderer_scheduler_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_renderer_scheduler_state));
    if (message_arena != submessage_arena) {
      chrome_renderer_scheduler_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_renderer_scheduler_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.chrome_renderer_scheduler_state_ = chrome_renderer_scheduler_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_renderer_scheduler_state)
}

// optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
inline bool TrackEvent::_internal_has_chrome_window_handle_event_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_window_handle_event_info_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_window_handle_event_info() const {
  return _internal_has_chrome_window_handle_event_info();
}
inline const ::perfetto::protos::ChromeWindowHandleEventInfo& TrackEvent::_internal_chrome_window_handle_event_info() const {
  const ::perfetto::protos::ChromeWindowHandleEventInfo* p = _impl_.chrome_window_handle_event_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeWindowHandleEventInfo&>(
      ::perfetto::protos::_ChromeWindowHandleEventInfo_default_instance_);
}
inline const ::perfetto::protos::ChromeWindowHandleEventInfo& TrackEvent::chrome_window_handle_event_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
  return _internal_chrome_window_handle_event_info();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_window_handle_event_info(
    ::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_window_handle_event_info_);
  }
  _impl_.chrome_window_handle_event_info_ = chrome_window_handle_event_info;
  if (chrome_window_handle_event_info) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
}
inline ::perfetto::protos::ChromeWindowHandleEventInfo* TrackEvent::release_chrome_window_handle_event_info() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::ChromeWindowHandleEventInfo* temp = _impl_.chrome_window_handle_event_info_;
  _impl_.chrome_window_handle_event_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeWindowHandleEventInfo* TrackEvent::unsafe_arena_release_chrome_window_handle_event_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::perfetto::protos::ChromeWindowHandleEventInfo* temp = _impl_.chrome_window_handle_event_info_;
  _impl_.chrome_window_handle_event_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeWindowHandleEventInfo* TrackEvent::_internal_mutable_chrome_window_handle_event_info() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.chrome_window_handle_event_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeWindowHandleEventInfo>(GetArenaForAllocation());
    _impl_.chrome_window_handle_event_info_ = p;
  }
  return _impl_.chrome_window_handle_event_info_;
}
inline ::perfetto::protos::ChromeWindowHandleEventInfo* TrackEvent::mutable_chrome_window_handle_event_info() {
  ::perfetto::protos::ChromeWindowHandleEventInfo* _msg = _internal_mutable_chrome_window_handle_event_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_window_handle_event_info(::perfetto::protos::ChromeWindowHandleEventInfo* chrome_window_handle_event_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_window_handle_event_info_);
  }
  if (chrome_window_handle_event_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_window_handle_event_info));
    if (message_arena != submessage_arena) {
      chrome_window_handle_event_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_window_handle_event_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.chrome_window_handle_event_info_ = chrome_window_handle_event_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_window_handle_event_info)
}

// optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
inline bool TrackEvent::_internal_has_chrome_content_settings_event_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_content_settings_event_info_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_content_settings_event_info() const {
  return _internal_has_chrome_content_settings_event_info();
}
inline const ::perfetto::protos::ChromeContentSettingsEventInfo& TrackEvent::_internal_chrome_content_settings_event_info() const {
  const ::perfetto::protos::ChromeContentSettingsEventInfo* p = _impl_.chrome_content_settings_event_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeContentSettingsEventInfo&>(
      ::perfetto::protos::_ChromeContentSettingsEventInfo_default_instance_);
}
inline const ::perfetto::protos::ChromeContentSettingsEventInfo& TrackEvent::chrome_content_settings_event_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
  return _internal_chrome_content_settings_event_info();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_content_settings_event_info(
    ::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_content_settings_event_info_);
  }
  _impl_.chrome_content_settings_event_info_ = chrome_content_settings_event_info;
  if (chrome_content_settings_event_info) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
}
inline ::perfetto::protos::ChromeContentSettingsEventInfo* TrackEvent::release_chrome_content_settings_event_info() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::ChromeContentSettingsEventInfo* temp = _impl_.chrome_content_settings_event_info_;
  _impl_.chrome_content_settings_event_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeContentSettingsEventInfo* TrackEvent::unsafe_arena_release_chrome_content_settings_event_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::perfetto::protos::ChromeContentSettingsEventInfo* temp = _impl_.chrome_content_settings_event_info_;
  _impl_.chrome_content_settings_event_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeContentSettingsEventInfo* TrackEvent::_internal_mutable_chrome_content_settings_event_info() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.chrome_content_settings_event_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeContentSettingsEventInfo>(GetArenaForAllocation());
    _impl_.chrome_content_settings_event_info_ = p;
  }
  return _impl_.chrome_content_settings_event_info_;
}
inline ::perfetto::protos::ChromeContentSettingsEventInfo* TrackEvent::mutable_chrome_content_settings_event_info() {
  ::perfetto::protos::ChromeContentSettingsEventInfo* _msg = _internal_mutable_chrome_content_settings_event_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_content_settings_event_info(::perfetto::protos::ChromeContentSettingsEventInfo* chrome_content_settings_event_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_content_settings_event_info_);
  }
  if (chrome_content_settings_event_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_content_settings_event_info));
    if (message_arena != submessage_arena) {
      chrome_content_settings_event_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_content_settings_event_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.chrome_content_settings_event_info_ = chrome_content_settings_event_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_content_settings_event_info)
}

// optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;
inline bool TrackEvent::_internal_has_chrome_active_processes() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_active_processes_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_active_processes() const {
  return _internal_has_chrome_active_processes();
}
inline const ::perfetto::protos::ChromeActiveProcesses& TrackEvent::_internal_chrome_active_processes() const {
  const ::perfetto::protos::ChromeActiveProcesses* p = _impl_.chrome_active_processes_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeActiveProcesses&>(
      ::perfetto::protos::_ChromeActiveProcesses_default_instance_);
}
inline const ::perfetto::protos::ChromeActiveProcesses& TrackEvent::chrome_active_processes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_active_processes)
  return _internal_chrome_active_processes();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_active_processes(
    ::perfetto::protos::ChromeActiveProcesses* chrome_active_processes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_active_processes_);
  }
  _impl_.chrome_active_processes_ = chrome_active_processes;
  if (chrome_active_processes) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_active_processes)
}
inline ::perfetto::protos::ChromeActiveProcesses* TrackEvent::release_chrome_active_processes() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::perfetto::protos::ChromeActiveProcesses* temp = _impl_.chrome_active_processes_;
  _impl_.chrome_active_processes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeActiveProcesses* TrackEvent::unsafe_arena_release_chrome_active_processes() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_active_processes)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::perfetto::protos::ChromeActiveProcesses* temp = _impl_.chrome_active_processes_;
  _impl_.chrome_active_processes_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeActiveProcesses* TrackEvent::_internal_mutable_chrome_active_processes() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.chrome_active_processes_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeActiveProcesses>(GetArenaForAllocation());
    _impl_.chrome_active_processes_ = p;
  }
  return _impl_.chrome_active_processes_;
}
inline ::perfetto::protos::ChromeActiveProcesses* TrackEvent::mutable_chrome_active_processes() {
  ::perfetto::protos::ChromeActiveProcesses* _msg = _internal_mutable_chrome_active_processes();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_active_processes)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_active_processes(::perfetto::protos::ChromeActiveProcesses* chrome_active_processes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_active_processes_);
  }
  if (chrome_active_processes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_active_processes));
    if (message_arena != submessage_arena) {
      chrome_active_processes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_active_processes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.chrome_active_processes_ = chrome_active_processes;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_active_processes)
}

// optional .perfetto.protos.Screenshot screenshot = 50;
inline bool TrackEvent::_internal_has_screenshot() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.screenshot_ != nullptr);
  return value;
}
inline bool TrackEvent::has_screenshot() const {
  return _internal_has_screenshot();
}
inline const ::perfetto::protos::Screenshot& TrackEvent::_internal_screenshot() const {
  const ::perfetto::protos::Screenshot* p = _impl_.screenshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::Screenshot&>(
      ::perfetto::protos::_Screenshot_default_instance_);
}
inline const ::perfetto::protos::Screenshot& TrackEvent::screenshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.screenshot)
  return _internal_screenshot();
}
inline void TrackEvent::unsafe_arena_set_allocated_screenshot(
    ::perfetto::protos::Screenshot* screenshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.screenshot_);
  }
  _impl_.screenshot_ = screenshot;
  if (screenshot) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.screenshot)
}
inline ::perfetto::protos::Screenshot* TrackEvent::release_screenshot() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::perfetto::protos::Screenshot* temp = _impl_.screenshot_;
  _impl_.screenshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::Screenshot* TrackEvent::unsafe_arena_release_screenshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.screenshot)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::perfetto::protos::Screenshot* temp = _impl_.screenshot_;
  _impl_.screenshot_ = nullptr;
  return temp;
}
inline ::perfetto::protos::Screenshot* TrackEvent::_internal_mutable_screenshot() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.screenshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::Screenshot>(GetArenaForAllocation());
    _impl_.screenshot_ = p;
  }
  return _impl_.screenshot_;
}
inline ::perfetto::protos::Screenshot* TrackEvent::mutable_screenshot() {
  ::perfetto::protos::Screenshot* _msg = _internal_mutable_screenshot();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.screenshot)
  return _msg;
}
inline void TrackEvent::set_allocated_screenshot(::perfetto::protos::Screenshot* screenshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.screenshot_);
  }
  if (screenshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screenshot));
    if (message_arena != submessage_arena) {
      screenshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.screenshot_ = screenshot;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.screenshot)
}

// optional .perfetto.protos.PixelModemEventInsight pixel_modem_event_insight = 51;
inline bool TrackEvent::_internal_has_pixel_modem_event_insight() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pixel_modem_event_insight_ != nullptr);
  return value;
}
inline bool TrackEvent::has_pixel_modem_event_insight() const {
  return _internal_has_pixel_modem_event_insight();
}
inline const ::perfetto::protos::PixelModemEventInsight& TrackEvent::_internal_pixel_modem_event_insight() const {
  const ::perfetto::protos::PixelModemEventInsight* p = _impl_.pixel_modem_event_insight_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PixelModemEventInsight&>(
      ::perfetto::protos::_PixelModemEventInsight_default_instance_);
}
inline const ::perfetto::protos::PixelModemEventInsight& TrackEvent::pixel_modem_event_insight() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.pixel_modem_event_insight)
  return _internal_pixel_modem_event_insight();
}
inline void TrackEvent::unsafe_arena_set_allocated_pixel_modem_event_insight(
    ::perfetto::protos::PixelModemEventInsight* pixel_modem_event_insight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_modem_event_insight_);
  }
  _impl_.pixel_modem_event_insight_ = pixel_modem_event_insight;
  if (pixel_modem_event_insight) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.pixel_modem_event_insight)
}
inline ::perfetto::protos::PixelModemEventInsight* TrackEvent::release_pixel_modem_event_insight() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::perfetto::protos::PixelModemEventInsight* temp = _impl_.pixel_modem_event_insight_;
  _impl_.pixel_modem_event_insight_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PixelModemEventInsight* TrackEvent::unsafe_arena_release_pixel_modem_event_insight() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.pixel_modem_event_insight)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::perfetto::protos::PixelModemEventInsight* temp = _impl_.pixel_modem_event_insight_;
  _impl_.pixel_modem_event_insight_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PixelModemEventInsight* TrackEvent::_internal_mutable_pixel_modem_event_insight() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.pixel_modem_event_insight_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PixelModemEventInsight>(GetArenaForAllocation());
    _impl_.pixel_modem_event_insight_ = p;
  }
  return _impl_.pixel_modem_event_insight_;
}
inline ::perfetto::protos::PixelModemEventInsight* TrackEvent::mutable_pixel_modem_event_insight() {
  ::perfetto::protos::PixelModemEventInsight* _msg = _internal_mutable_pixel_modem_event_insight();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.pixel_modem_event_insight)
  return _msg;
}
inline void TrackEvent::set_allocated_pixel_modem_event_insight(::perfetto::protos::PixelModemEventInsight* pixel_modem_event_insight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pixel_modem_event_insight_);
  }
  if (pixel_modem_event_insight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pixel_modem_event_insight));
    if (message_arena != submessage_arena) {
      pixel_modem_event_insight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pixel_modem_event_insight, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.pixel_modem_event_insight_ = pixel_modem_event_insight;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.pixel_modem_event_insight)
}

// .perfetto.protos.SourceLocation source_location = 33;
inline bool TrackEvent::_internal_has_source_location() const {
  return source_location_field_case() == kSourceLocation;
}
inline bool TrackEvent::has_source_location() const {
  return _internal_has_source_location();
}
inline void TrackEvent::set_has_source_location() {
  _impl_._oneof_case_[2] = kSourceLocation;
}
inline ::perfetto::protos::SourceLocation* TrackEvent::release_source_location() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.source_location)
  if (_internal_has_source_location()) {
    clear_has_source_location_field();
    ::perfetto::protos::SourceLocation* temp = _impl_.source_location_field_.source_location_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_location_field_.source_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SourceLocation& TrackEvent::_internal_source_location() const {
  return _internal_has_source_location()
      ? *_impl_.source_location_field_.source_location_
      : reinterpret_cast< ::perfetto::protos::SourceLocation&>(::perfetto::protos::_SourceLocation_default_instance_);
}
inline const ::perfetto::protos::SourceLocation& TrackEvent::source_location() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.source_location)
  return _internal_source_location();
}
inline ::perfetto::protos::SourceLocation* TrackEvent::unsafe_arena_release_source_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TrackEvent.source_location)
  if (_internal_has_source_location()) {
    clear_has_source_location_field();
    ::perfetto::protos::SourceLocation* temp = _impl_.source_location_field_.source_location_;
    _impl_.source_location_field_.source_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TrackEvent::unsafe_arena_set_allocated_source_location(::perfetto::protos::SourceLocation* source_location) {
  clear_source_location_field();
  if (source_location) {
    set_has_source_location();
    _impl_.source_location_field_.source_location_ = source_location;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.source_location)
}
inline ::perfetto::protos::SourceLocation* TrackEvent::_internal_mutable_source_location() {
  if (!_internal_has_source_location()) {
    clear_source_location_field();
    set_has_source_location();
    _impl_.source_location_field_.source_location_ = CreateMaybeMessage< ::perfetto::protos::SourceLocation >(GetArenaForAllocation());
  }
  return _impl_.source_location_field_.source_location_;
}
inline ::perfetto::protos::SourceLocation* TrackEvent::mutable_source_location() {
  ::perfetto::protos::SourceLocation* _msg = _internal_mutable_source_location();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.source_location)
  return _msg;
}

// uint64 source_location_iid = 34;
inline bool TrackEvent::_internal_has_source_location_iid() const {
  return source_location_field_case() == kSourceLocationIid;
}
inline bool TrackEvent::has_source_location_iid() const {
  return _internal_has_source_location_iid();
}
inline void TrackEvent::set_has_source_location_iid() {
  _impl_._oneof_case_[2] = kSourceLocationIid;
}
inline void TrackEvent::clear_source_location_iid() {
  if (_internal_has_source_location_iid()) {
    _impl_.source_location_field_.source_location_iid_ = uint64_t{0u};
    clear_has_source_location_field();
  }
}
inline uint64_t TrackEvent::_internal_source_location_iid() const {
  if (_internal_has_source_location_iid()) {
    return _impl_.source_location_field_.source_location_iid_;
  }
  return uint64_t{0u};
}
inline void TrackEvent::_internal_set_source_location_iid(uint64_t value) {
  if (!_internal_has_source_location_iid()) {
    clear_source_location_field();
    set_has_source_location_iid();
  }
  _impl_.source_location_field_.source_location_iid_ = value;
}
inline uint64_t TrackEvent::source_location_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.source_location_iid)
  return _internal_source_location_iid();
}
inline void TrackEvent::set_source_location_iid(uint64_t value) {
  _internal_set_source_location_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.source_location_iid)
}

// optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
inline bool TrackEvent::_internal_has_chrome_message_pump() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_message_pump_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_message_pump() const {
  return _internal_has_chrome_message_pump();
}
inline const ::perfetto::protos::ChromeMessagePump& TrackEvent::_internal_chrome_message_pump() const {
  const ::perfetto::protos::ChromeMessagePump* p = _impl_.chrome_message_pump_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeMessagePump&>(
      ::perfetto::protos::_ChromeMessagePump_default_instance_);
}
inline const ::perfetto::protos::ChromeMessagePump& TrackEvent::chrome_message_pump() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_message_pump)
  return _internal_chrome_message_pump();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_message_pump(
    ::perfetto::protos::ChromeMessagePump* chrome_message_pump) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_message_pump_);
  }
  _impl_.chrome_message_pump_ = chrome_message_pump;
  if (chrome_message_pump) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_message_pump)
}
inline ::perfetto::protos::ChromeMessagePump* TrackEvent::release_chrome_message_pump() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::ChromeMessagePump* temp = _impl_.chrome_message_pump_;
  _impl_.chrome_message_pump_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeMessagePump* TrackEvent::unsafe_arena_release_chrome_message_pump() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_message_pump)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::ChromeMessagePump* temp = _impl_.chrome_message_pump_;
  _impl_.chrome_message_pump_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeMessagePump* TrackEvent::_internal_mutable_chrome_message_pump() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.chrome_message_pump_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeMessagePump>(GetArenaForAllocation());
    _impl_.chrome_message_pump_ = p;
  }
  return _impl_.chrome_message_pump_;
}
inline ::perfetto::protos::ChromeMessagePump* TrackEvent::mutable_chrome_message_pump() {
  ::perfetto::protos::ChromeMessagePump* _msg = _internal_mutable_chrome_message_pump();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_message_pump)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_message_pump(::perfetto::protos::ChromeMessagePump* chrome_message_pump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_message_pump_);
  }
  if (chrome_message_pump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_message_pump));
    if (message_arena != submessage_arena) {
      chrome_message_pump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_message_pump, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.chrome_message_pump_ = chrome_message_pump;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_message_pump)
}

// optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
inline bool TrackEvent::_internal_has_chrome_mojo_event_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_mojo_event_info_ != nullptr);
  return value;
}
inline bool TrackEvent::has_chrome_mojo_event_info() const {
  return _internal_has_chrome_mojo_event_info();
}
inline const ::perfetto::protos::ChromeMojoEventInfo& TrackEvent::_internal_chrome_mojo_event_info() const {
  const ::perfetto::protos::ChromeMojoEventInfo* p = _impl_.chrome_mojo_event_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeMojoEventInfo&>(
      ::perfetto::protos::_ChromeMojoEventInfo_default_instance_);
}
inline const ::perfetto::protos::ChromeMojoEventInfo& TrackEvent::chrome_mojo_event_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.chrome_mojo_event_info)
  return _internal_chrome_mojo_event_info();
}
inline void TrackEvent::unsafe_arena_set_allocated_chrome_mojo_event_info(
    ::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_mojo_event_info_);
  }
  _impl_.chrome_mojo_event_info_ = chrome_mojo_event_info;
  if (chrome_mojo_event_info) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.chrome_mojo_event_info)
}
inline ::perfetto::protos::ChromeMojoEventInfo* TrackEvent::release_chrome_mojo_event_info() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::ChromeMojoEventInfo* temp = _impl_.chrome_mojo_event_info_;
  _impl_.chrome_mojo_event_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeMojoEventInfo* TrackEvent::unsafe_arena_release_chrome_mojo_event_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.chrome_mojo_event_info)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::perfetto::protos::ChromeMojoEventInfo* temp = _impl_.chrome_mojo_event_info_;
  _impl_.chrome_mojo_event_info_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeMojoEventInfo* TrackEvent::_internal_mutable_chrome_mojo_event_info() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.chrome_mojo_event_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeMojoEventInfo>(GetArenaForAllocation());
    _impl_.chrome_mojo_event_info_ = p;
  }
  return _impl_.chrome_mojo_event_info_;
}
inline ::perfetto::protos::ChromeMojoEventInfo* TrackEvent::mutable_chrome_mojo_event_info() {
  ::perfetto::protos::ChromeMojoEventInfo* _msg = _internal_mutable_chrome_mojo_event_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.chrome_mojo_event_info)
  return _msg;
}
inline void TrackEvent::set_allocated_chrome_mojo_event_info(::perfetto::protos::ChromeMojoEventInfo* chrome_mojo_event_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_mojo_event_info_);
  }
  if (chrome_mojo_event_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_mojo_event_info));
    if (message_arena != submessage_arena) {
      chrome_mojo_event_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_mojo_event_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.chrome_mojo_event_info_ = chrome_mojo_event_info;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.chrome_mojo_event_info)
}

// int64 timestamp_delta_us = 1;
inline bool TrackEvent::_internal_has_timestamp_delta_us() const {
  return timestamp_case() == kTimestampDeltaUs;
}
inline bool TrackEvent::has_timestamp_delta_us() const {
  return _internal_has_timestamp_delta_us();
}
inline void TrackEvent::set_has_timestamp_delta_us() {
  _impl_._oneof_case_[3] = kTimestampDeltaUs;
}
inline void TrackEvent::clear_timestamp_delta_us() {
  if (_internal_has_timestamp_delta_us()) {
    _impl_.timestamp_.timestamp_delta_us_ = int64_t{0};
    clear_has_timestamp();
  }
}
inline int64_t TrackEvent::_internal_timestamp_delta_us() const {
  if (_internal_has_timestamp_delta_us()) {
    return _impl_.timestamp_.timestamp_delta_us_;
  }
  return int64_t{0};
}
inline void TrackEvent::_internal_set_timestamp_delta_us(int64_t value) {
  if (!_internal_has_timestamp_delta_us()) {
    clear_timestamp();
    set_has_timestamp_delta_us();
  }
  _impl_.timestamp_.timestamp_delta_us_ = value;
}
inline int64_t TrackEvent::timestamp_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.timestamp_delta_us)
  return _internal_timestamp_delta_us();
}
inline void TrackEvent::set_timestamp_delta_us(int64_t value) {
  _internal_set_timestamp_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.timestamp_delta_us)
}

// int64 timestamp_absolute_us = 16;
inline bool TrackEvent::_internal_has_timestamp_absolute_us() const {
  return timestamp_case() == kTimestampAbsoluteUs;
}
inline bool TrackEvent::has_timestamp_absolute_us() const {
  return _internal_has_timestamp_absolute_us();
}
inline void TrackEvent::set_has_timestamp_absolute_us() {
  _impl_._oneof_case_[3] = kTimestampAbsoluteUs;
}
inline void TrackEvent::clear_timestamp_absolute_us() {
  if (_internal_has_timestamp_absolute_us()) {
    _impl_.timestamp_.timestamp_absolute_us_ = int64_t{0};
    clear_has_timestamp();
  }
}
inline int64_t TrackEvent::_internal_timestamp_absolute_us() const {
  if (_internal_has_timestamp_absolute_us()) {
    return _impl_.timestamp_.timestamp_absolute_us_;
  }
  return int64_t{0};
}
inline void TrackEvent::_internal_set_timestamp_absolute_us(int64_t value) {
  if (!_internal_has_timestamp_absolute_us()) {
    clear_timestamp();
    set_has_timestamp_absolute_us();
  }
  _impl_.timestamp_.timestamp_absolute_us_ = value;
}
inline int64_t TrackEvent::timestamp_absolute_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.timestamp_absolute_us)
  return _internal_timestamp_absolute_us();
}
inline void TrackEvent::set_timestamp_absolute_us(int64_t value) {
  _internal_set_timestamp_absolute_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.timestamp_absolute_us)
}

// int64 thread_time_delta_us = 2;
inline bool TrackEvent::_internal_has_thread_time_delta_us() const {
  return thread_time_case() == kThreadTimeDeltaUs;
}
inline bool TrackEvent::has_thread_time_delta_us() const {
  return _internal_has_thread_time_delta_us();
}
inline void TrackEvent::set_has_thread_time_delta_us() {
  _impl_._oneof_case_[4] = kThreadTimeDeltaUs;
}
inline void TrackEvent::clear_thread_time_delta_us() {
  if (_internal_has_thread_time_delta_us()) {
    _impl_.thread_time_.thread_time_delta_us_ = int64_t{0};
    clear_has_thread_time();
  }
}
inline int64_t TrackEvent::_internal_thread_time_delta_us() const {
  if (_internal_has_thread_time_delta_us()) {
    return _impl_.thread_time_.thread_time_delta_us_;
  }
  return int64_t{0};
}
inline void TrackEvent::_internal_set_thread_time_delta_us(int64_t value) {
  if (!_internal_has_thread_time_delta_us()) {
    clear_thread_time();
    set_has_thread_time_delta_us();
  }
  _impl_.thread_time_.thread_time_delta_us_ = value;
}
inline int64_t TrackEvent::thread_time_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_time_delta_us)
  return _internal_thread_time_delta_us();
}
inline void TrackEvent::set_thread_time_delta_us(int64_t value) {
  _internal_set_thread_time_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_time_delta_us)
}

// int64 thread_time_absolute_us = 17;
inline bool TrackEvent::_internal_has_thread_time_absolute_us() const {
  return thread_time_case() == kThreadTimeAbsoluteUs;
}
inline bool TrackEvent::has_thread_time_absolute_us() const {
  return _internal_has_thread_time_absolute_us();
}
inline void TrackEvent::set_has_thread_time_absolute_us() {
  _impl_._oneof_case_[4] = kThreadTimeAbsoluteUs;
}
inline void TrackEvent::clear_thread_time_absolute_us() {
  if (_internal_has_thread_time_absolute_us()) {
    _impl_.thread_time_.thread_time_absolute_us_ = int64_t{0};
    clear_has_thread_time();
  }
}
inline int64_t TrackEvent::_internal_thread_time_absolute_us() const {
  if (_internal_has_thread_time_absolute_us()) {
    return _impl_.thread_time_.thread_time_absolute_us_;
  }
  return int64_t{0};
}
inline void TrackEvent::_internal_set_thread_time_absolute_us(int64_t value) {
  if (!_internal_has_thread_time_absolute_us()) {
    clear_thread_time();
    set_has_thread_time_absolute_us();
  }
  _impl_.thread_time_.thread_time_absolute_us_ = value;
}
inline int64_t TrackEvent::thread_time_absolute_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_time_absolute_us)
  return _internal_thread_time_absolute_us();
}
inline void TrackEvent::set_thread_time_absolute_us(int64_t value) {
  _internal_set_thread_time_absolute_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_time_absolute_us)
}

// int64 thread_instruction_count_delta = 8;
inline bool TrackEvent::_internal_has_thread_instruction_count_delta() const {
  return thread_instruction_count_case() == kThreadInstructionCountDelta;
}
inline bool TrackEvent::has_thread_instruction_count_delta() const {
  return _internal_has_thread_instruction_count_delta();
}
inline void TrackEvent::set_has_thread_instruction_count_delta() {
  _impl_._oneof_case_[5] = kThreadInstructionCountDelta;
}
inline void TrackEvent::clear_thread_instruction_count_delta() {
  if (_internal_has_thread_instruction_count_delta()) {
    _impl_.thread_instruction_count_.thread_instruction_count_delta_ = int64_t{0};
    clear_has_thread_instruction_count();
  }
}
inline int64_t TrackEvent::_internal_thread_instruction_count_delta() const {
  if (_internal_has_thread_instruction_count_delta()) {
    return _impl_.thread_instruction_count_.thread_instruction_count_delta_;
  }
  return int64_t{0};
}
inline void TrackEvent::_internal_set_thread_instruction_count_delta(int64_t value) {
  if (!_internal_has_thread_instruction_count_delta()) {
    clear_thread_instruction_count();
    set_has_thread_instruction_count_delta();
  }
  _impl_.thread_instruction_count_.thread_instruction_count_delta_ = value;
}
inline int64_t TrackEvent::thread_instruction_count_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_instruction_count_delta)
  return _internal_thread_instruction_count_delta();
}
inline void TrackEvent::set_thread_instruction_count_delta(int64_t value) {
  _internal_set_thread_instruction_count_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_instruction_count_delta)
}

// int64 thread_instruction_count_absolute = 20;
inline bool TrackEvent::_internal_has_thread_instruction_count_absolute() const {
  return thread_instruction_count_case() == kThreadInstructionCountAbsolute;
}
inline bool TrackEvent::has_thread_instruction_count_absolute() const {
  return _internal_has_thread_instruction_count_absolute();
}
inline void TrackEvent::set_has_thread_instruction_count_absolute() {
  _impl_._oneof_case_[5] = kThreadInstructionCountAbsolute;
}
inline void TrackEvent::clear_thread_instruction_count_absolute() {
  if (_internal_has_thread_instruction_count_absolute()) {
    _impl_.thread_instruction_count_.thread_instruction_count_absolute_ = int64_t{0};
    clear_has_thread_instruction_count();
  }
}
inline int64_t TrackEvent::_internal_thread_instruction_count_absolute() const {
  if (_internal_has_thread_instruction_count_absolute()) {
    return _impl_.thread_instruction_count_.thread_instruction_count_absolute_;
  }
  return int64_t{0};
}
inline void TrackEvent::_internal_set_thread_instruction_count_absolute(int64_t value) {
  if (!_internal_has_thread_instruction_count_absolute()) {
    clear_thread_instruction_count();
    set_has_thread_instruction_count_absolute();
  }
  _impl_.thread_instruction_count_.thread_instruction_count_absolute_ = value;
}
inline int64_t TrackEvent::thread_instruction_count_absolute() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.thread_instruction_count_absolute)
  return _internal_thread_instruction_count_absolute();
}
inline void TrackEvent::set_thread_instruction_count_absolute(int64_t value) {
  _internal_set_thread_instruction_count_absolute(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEvent.thread_instruction_count_absolute)
}

// optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
inline bool TrackEvent::_internal_has_legacy_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legacy_event_ != nullptr);
  return value;
}
inline bool TrackEvent::has_legacy_event() const {
  return _internal_has_legacy_event();
}
inline void TrackEvent::clear_legacy_event() {
  if (_impl_.legacy_event_ != nullptr) _impl_.legacy_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::TrackEvent_LegacyEvent& TrackEvent::_internal_legacy_event() const {
  const ::perfetto::protos::TrackEvent_LegacyEvent* p = _impl_.legacy_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TrackEvent_LegacyEvent&>(
      ::perfetto::protos::_TrackEvent_LegacyEvent_default_instance_);
}
inline const ::perfetto::protos::TrackEvent_LegacyEvent& TrackEvent::legacy_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEvent.legacy_event)
  return _internal_legacy_event();
}
inline void TrackEvent::unsafe_arena_set_allocated_legacy_event(
    ::perfetto::protos::TrackEvent_LegacyEvent* legacy_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legacy_event_);
  }
  _impl_.legacy_event_ = legacy_event;
  if (legacy_event) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackEvent.legacy_event)
}
inline ::perfetto::protos::TrackEvent_LegacyEvent* TrackEvent::release_legacy_event() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TrackEvent_LegacyEvent* temp = _impl_.legacy_event_;
  _impl_.legacy_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent* TrackEvent::unsafe_arena_release_legacy_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackEvent.legacy_event)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TrackEvent_LegacyEvent* temp = _impl_.legacy_event_;
  _impl_.legacy_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent* TrackEvent::_internal_mutable_legacy_event() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.legacy_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TrackEvent_LegacyEvent>(GetArenaForAllocation());
    _impl_.legacy_event_ = p;
  }
  return _impl_.legacy_event_;
}
inline ::perfetto::protos::TrackEvent_LegacyEvent* TrackEvent::mutable_legacy_event() {
  ::perfetto::protos::TrackEvent_LegacyEvent* _msg = _internal_mutable_legacy_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackEvent.legacy_event)
  return _msg;
}
inline void TrackEvent::set_allocated_legacy_event(::perfetto::protos::TrackEvent_LegacyEvent* legacy_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.legacy_event_;
  }
  if (legacy_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(legacy_event);
    if (message_arena != submessage_arena) {
      legacy_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legacy_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.legacy_event_ = legacy_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.legacy_event)
}

inline bool TrackEvent::has_name_field() const {
  return name_field_case() != NAME_FIELD_NOT_SET;
}
inline void TrackEvent::clear_has_name_field() {
  _impl_._oneof_case_[0] = NAME_FIELD_NOT_SET;
}
inline bool TrackEvent::has_counter_value_field() const {
  return counter_value_field_case() != COUNTER_VALUE_FIELD_NOT_SET;
}
inline void TrackEvent::clear_has_counter_value_field() {
  _impl_._oneof_case_[1] = COUNTER_VALUE_FIELD_NOT_SET;
}
inline bool TrackEvent::has_source_location_field() const {
  return source_location_field_case() != SOURCE_LOCATION_FIELD_NOT_SET;
}
inline void TrackEvent::clear_has_source_location_field() {
  _impl_._oneof_case_[2] = SOURCE_LOCATION_FIELD_NOT_SET;
}
inline bool TrackEvent::has_timestamp() const {
  return timestamp_case() != TIMESTAMP_NOT_SET;
}
inline void TrackEvent::clear_has_timestamp() {
  _impl_._oneof_case_[3] = TIMESTAMP_NOT_SET;
}
inline bool TrackEvent::has_thread_time() const {
  return thread_time_case() != THREAD_TIME_NOT_SET;
}
inline void TrackEvent::clear_has_thread_time() {
  _impl_._oneof_case_[4] = THREAD_TIME_NOT_SET;
}
inline bool TrackEvent::has_thread_instruction_count() const {
  return thread_instruction_count_case() != THREAD_INSTRUCTION_COUNT_NOT_SET;
}
inline void TrackEvent::clear_has_thread_instruction_count() {
  _impl_._oneof_case_[5] = THREAD_INSTRUCTION_COUNT_NOT_SET;
}
inline TrackEvent::NameFieldCase TrackEvent::name_field_case() const {
  return TrackEvent::NameFieldCase(_impl_._oneof_case_[0]);
}
inline TrackEvent::CounterValueFieldCase TrackEvent::counter_value_field_case() const {
  return TrackEvent::CounterValueFieldCase(_impl_._oneof_case_[1]);
}
inline TrackEvent::SourceLocationFieldCase TrackEvent::source_location_field_case() const {
  return TrackEvent::SourceLocationFieldCase(_impl_._oneof_case_[2]);
}
inline TrackEvent::TimestampCase TrackEvent::timestamp_case() const {
  return TrackEvent::TimestampCase(_impl_._oneof_case_[3]);
}
inline TrackEvent::ThreadTimeCase TrackEvent::thread_time_case() const {
  return TrackEvent::ThreadTimeCase(_impl_._oneof_case_[4]);
}
inline TrackEvent::ThreadInstructionCountCase TrackEvent::thread_instruction_count_case() const {
  return TrackEvent::ThreadInstructionCountCase(_impl_._oneof_case_[5]);
}
// -------------------------------------------------------------------

// TrackEventDefaults

// optional uint64 track_uuid = 11;
inline bool TrackEventDefaults::_internal_has_track_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackEventDefaults::has_track_uuid() const {
  return _internal_has_track_uuid();
}
inline void TrackEventDefaults::clear_track_uuid() {
  _impl_.track_uuid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TrackEventDefaults::_internal_track_uuid() const {
  return _impl_.track_uuid_;
}
inline uint64_t TrackEventDefaults::track_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventDefaults.track_uuid)
  return _internal_track_uuid();
}
inline void TrackEventDefaults::_internal_set_track_uuid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.track_uuid_ = value;
}
inline void TrackEventDefaults::set_track_uuid(uint64_t value) {
  _internal_set_track_uuid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventDefaults.track_uuid)
}

// repeated uint64 extra_counter_track_uuids = 31;
inline int TrackEventDefaults::_internal_extra_counter_track_uuids_size() const {
  return _impl_.extra_counter_track_uuids_.size();
}
inline int TrackEventDefaults::extra_counter_track_uuids_size() const {
  return _internal_extra_counter_track_uuids_size();
}
inline void TrackEventDefaults::clear_extra_counter_track_uuids() {
  _impl_.extra_counter_track_uuids_.Clear();
}
inline uint64_t TrackEventDefaults::_internal_extra_counter_track_uuids(int index) const {
  return _impl_.extra_counter_track_uuids_.Get(index);
}
inline uint64_t TrackEventDefaults::extra_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
  return _internal_extra_counter_track_uuids(index);
}
inline void TrackEventDefaults::set_extra_counter_track_uuids(int index, uint64_t value) {
  _impl_.extra_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
}
inline void TrackEventDefaults::_internal_add_extra_counter_track_uuids(uint64_t value) {
  _impl_.extra_counter_track_uuids_.Add(value);
}
inline void TrackEventDefaults::add_extra_counter_track_uuids(uint64_t value) {
  _internal_add_extra_counter_track_uuids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEventDefaults::_internal_extra_counter_track_uuids() const {
  return _impl_.extra_counter_track_uuids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEventDefaults::extra_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
  return _internal_extra_counter_track_uuids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEventDefaults::_internal_mutable_extra_counter_track_uuids() {
  return &_impl_.extra_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEventDefaults::mutable_extra_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventDefaults.extra_counter_track_uuids)
  return _internal_mutable_extra_counter_track_uuids();
}

// repeated uint64 extra_double_counter_track_uuids = 45;
inline int TrackEventDefaults::_internal_extra_double_counter_track_uuids_size() const {
  return _impl_.extra_double_counter_track_uuids_.size();
}
inline int TrackEventDefaults::extra_double_counter_track_uuids_size() const {
  return _internal_extra_double_counter_track_uuids_size();
}
inline void TrackEventDefaults::clear_extra_double_counter_track_uuids() {
  _impl_.extra_double_counter_track_uuids_.Clear();
}
inline uint64_t TrackEventDefaults::_internal_extra_double_counter_track_uuids(int index) const {
  return _impl_.extra_double_counter_track_uuids_.Get(index);
}
inline uint64_t TrackEventDefaults::extra_double_counter_track_uuids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
  return _internal_extra_double_counter_track_uuids(index);
}
inline void TrackEventDefaults::set_extra_double_counter_track_uuids(int index, uint64_t value) {
  _impl_.extra_double_counter_track_uuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
}
inline void TrackEventDefaults::_internal_add_extra_double_counter_track_uuids(uint64_t value) {
  _impl_.extra_double_counter_track_uuids_.Add(value);
}
inline void TrackEventDefaults::add_extra_double_counter_track_uuids(uint64_t value) {
  _internal_add_extra_double_counter_track_uuids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEventDefaults::_internal_extra_double_counter_track_uuids() const {
  return _impl_.extra_double_counter_track_uuids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TrackEventDefaults::extra_double_counter_track_uuids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
  return _internal_extra_double_counter_track_uuids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEventDefaults::_internal_mutable_extra_double_counter_track_uuids() {
  return &_impl_.extra_double_counter_track_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TrackEventDefaults::mutable_extra_double_counter_track_uuids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TrackEventDefaults.extra_double_counter_track_uuids)
  return _internal_mutable_extra_double_counter_track_uuids();
}

// -------------------------------------------------------------------

// EventCategory

// optional uint64 iid = 1;
inline bool EventCategory::_internal_has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EventCategory::has_iid() const {
  return _internal_has_iid();
}
inline void EventCategory::clear_iid() {
  _impl_.iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t EventCategory::_internal_iid() const {
  return _impl_.iid_;
}
inline uint64_t EventCategory::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventCategory.iid)
  return _internal_iid();
}
inline void EventCategory::_internal_set_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iid_ = value;
}
inline void EventCategory::set_iid(uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EventCategory.iid)
}

// optional string name = 2;
inline bool EventCategory::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EventCategory::has_name() const {
  return _internal_has_name();
}
inline void EventCategory::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventCategory::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventCategory.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventCategory::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.EventCategory.name)
}
inline std::string* EventCategory::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EventCategory.name)
  return _s;
}
inline const std::string& EventCategory::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EventCategory::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EventCategory::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EventCategory::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EventCategory.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EventCategory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.EventCategory.name)
}

// -------------------------------------------------------------------

// EventName

// optional uint64 iid = 1;
inline bool EventName::_internal_has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EventName::has_iid() const {
  return _internal_has_iid();
}
inline void EventName::clear_iid() {
  _impl_.iid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t EventName::_internal_iid() const {
  return _impl_.iid_;
}
inline uint64_t EventName::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventName.iid)
  return _internal_iid();
}
inline void EventName::_internal_set_iid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iid_ = value;
}
inline void EventName::set_iid(uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EventName.iid)
}

// optional string name = 2;
inline bool EventName::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EventName::has_name() const {
  return _internal_has_name();
}
inline void EventName::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventName::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EventName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventName::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.EventName.name)
}
inline std::string* EventName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EventName.name)
  return _s;
}
inline const std::string& EventName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EventName::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EventName::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EventName::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EventName.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EventName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.EventName.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::TrackEvent_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto
