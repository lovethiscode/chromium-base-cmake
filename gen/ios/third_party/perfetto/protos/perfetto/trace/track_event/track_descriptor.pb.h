// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/track_event/chrome_process_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/chrome_thread_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/process_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/thread_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/counter_descriptor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class TrackDescriptor;
struct TrackDescriptorDefaultTypeInternal;
extern TrackDescriptorDefaultTypeInternal _TrackDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TrackDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::TrackDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TrackDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TrackDescriptor) */ {
 public:
  inline TrackDescriptor() : TrackDescriptor(nullptr) {}
  ~TrackDescriptor() override;
  explicit PROTOBUF_CONSTEXPR TrackDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackDescriptor(const TrackDescriptor& from);
  TrackDescriptor(TrackDescriptor&& from) noexcept
    : TrackDescriptor() {
    *this = ::std::move(from);
  }

  inline TrackDescriptor& operator=(const TrackDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackDescriptor& operator=(TrackDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrackDescriptor& default_instance() {
    return *internal_default_instance();
  }
  enum StaticOrDynamicNameCase {
    kName = 2,
    kStaticName = 10,
    STATIC_OR_DYNAMIC_NAME_NOT_SET = 0,
  };

  static inline const TrackDescriptor* internal_default_instance() {
    return reinterpret_cast<const TrackDescriptor*>(
               &_TrackDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackDescriptor& a, TrackDescriptor& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TrackDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TrackDescriptor& from);
  void MergeFrom(const TrackDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TrackDescriptor";
  }
  protected:
  explicit TrackDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 3,
    kThreadFieldNumber = 4,
    kChromeProcessFieldNumber = 6,
    kChromeThreadFieldNumber = 7,
    kCounterFieldNumber = 8,
    kUuidFieldNumber = 1,
    kParentUuidFieldNumber = 5,
    kDisallowMergingWithSystemTracksFieldNumber = 9,
    kNameFieldNumber = 2,
    kStaticNameFieldNumber = 10,
  };
  // optional .perfetto.protos.ProcessDescriptor process = 3;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::perfetto::protos::ProcessDescriptor& process() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProcessDescriptor* release_process();
  ::perfetto::protos::ProcessDescriptor* mutable_process();
  void set_allocated_process(::perfetto::protos::ProcessDescriptor* process);
  private:
  const ::perfetto::protos::ProcessDescriptor& _internal_process() const;
  ::perfetto::protos::ProcessDescriptor* _internal_mutable_process();
  public:
  void unsafe_arena_set_allocated_process(
      ::perfetto::protos::ProcessDescriptor* process);
  ::perfetto::protos::ProcessDescriptor* unsafe_arena_release_process();

  // optional .perfetto.protos.ThreadDescriptor thread = 4;
  bool has_thread() const;
  private:
  bool _internal_has_thread() const;
  public:
  void clear_thread();
  const ::perfetto::protos::ThreadDescriptor& thread() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ThreadDescriptor* release_thread();
  ::perfetto::protos::ThreadDescriptor* mutable_thread();
  void set_allocated_thread(::perfetto::protos::ThreadDescriptor* thread);
  private:
  const ::perfetto::protos::ThreadDescriptor& _internal_thread() const;
  ::perfetto::protos::ThreadDescriptor* _internal_mutable_thread();
  public:
  void unsafe_arena_set_allocated_thread(
      ::perfetto::protos::ThreadDescriptor* thread);
  ::perfetto::protos::ThreadDescriptor* unsafe_arena_release_thread();

  // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
  bool has_chrome_process() const;
  private:
  bool _internal_has_chrome_process() const;
  public:
  void clear_chrome_process();
  const ::perfetto::protos::ChromeProcessDescriptor& chrome_process() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeProcessDescriptor* release_chrome_process();
  ::perfetto::protos::ChromeProcessDescriptor* mutable_chrome_process();
  void set_allocated_chrome_process(::perfetto::protos::ChromeProcessDescriptor* chrome_process);
  private:
  const ::perfetto::protos::ChromeProcessDescriptor& _internal_chrome_process() const;
  ::perfetto::protos::ChromeProcessDescriptor* _internal_mutable_chrome_process();
  public:
  void unsafe_arena_set_allocated_chrome_process(
      ::perfetto::protos::ChromeProcessDescriptor* chrome_process);
  ::perfetto::protos::ChromeProcessDescriptor* unsafe_arena_release_chrome_process();

  // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
  bool has_chrome_thread() const;
  private:
  bool _internal_has_chrome_thread() const;
  public:
  void clear_chrome_thread();
  const ::perfetto::protos::ChromeThreadDescriptor& chrome_thread() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeThreadDescriptor* release_chrome_thread();
  ::perfetto::protos::ChromeThreadDescriptor* mutable_chrome_thread();
  void set_allocated_chrome_thread(::perfetto::protos::ChromeThreadDescriptor* chrome_thread);
  private:
  const ::perfetto::protos::ChromeThreadDescriptor& _internal_chrome_thread() const;
  ::perfetto::protos::ChromeThreadDescriptor* _internal_mutable_chrome_thread();
  public:
  void unsafe_arena_set_allocated_chrome_thread(
      ::perfetto::protos::ChromeThreadDescriptor* chrome_thread);
  ::perfetto::protos::ChromeThreadDescriptor* unsafe_arena_release_chrome_thread();

  // optional .perfetto.protos.CounterDescriptor counter = 8;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  const ::perfetto::protos::CounterDescriptor& counter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CounterDescriptor* release_counter();
  ::perfetto::protos::CounterDescriptor* mutable_counter();
  void set_allocated_counter(::perfetto::protos::CounterDescriptor* counter);
  private:
  const ::perfetto::protos::CounterDescriptor& _internal_counter() const;
  ::perfetto::protos::CounterDescriptor* _internal_mutable_counter();
  public:
  void unsafe_arena_set_allocated_counter(
      ::perfetto::protos::CounterDescriptor* counter);
  ::perfetto::protos::CounterDescriptor* unsafe_arena_release_counter();

  // optional uint64 uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  uint64_t uuid() const;
  void set_uuid(uint64_t value);
  private:
  uint64_t _internal_uuid() const;
  void _internal_set_uuid(uint64_t value);
  public:

  // optional uint64 parent_uuid = 5;
  bool has_parent_uuid() const;
  private:
  bool _internal_has_parent_uuid() const;
  public:
  void clear_parent_uuid();
  uint64_t parent_uuid() const;
  void set_parent_uuid(uint64_t value);
  private:
  uint64_t _internal_parent_uuid() const;
  void _internal_set_parent_uuid(uint64_t value);
  public:

  // optional bool disallow_merging_with_system_tracks = 9;
  bool has_disallow_merging_with_system_tracks() const;
  private:
  bool _internal_has_disallow_merging_with_system_tracks() const;
  public:
  void clear_disallow_merging_with_system_tracks();
  bool disallow_merging_with_system_tracks() const;
  void set_disallow_merging_with_system_tracks(bool value);
  private:
  bool _internal_disallow_merging_with_system_tracks() const;
  void _internal_set_disallow_merging_with_system_tracks(bool value);
  public:

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string static_name = 10;
  bool has_static_name() const;
  private:
  bool _internal_has_static_name() const;
  public:
  void clear_static_name();
  const std::string& static_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_static_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_static_name();
  PROTOBUF_NODISCARD std::string* release_static_name();
  void set_allocated_static_name(std::string* static_name);
  private:
  const std::string& _internal_static_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_static_name(const std::string& value);
  std::string* _internal_mutable_static_name();
  public:

  void clear_static_or_dynamic_name();
  StaticOrDynamicNameCase static_or_dynamic_name_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrackDescriptor)
 private:
  class _Internal;
  void set_has_name();
  void set_has_static_name();

  inline bool has_static_or_dynamic_name() const;
  inline void clear_has_static_or_dynamic_name();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::ProcessDescriptor* process_;
    ::perfetto::protos::ThreadDescriptor* thread_;
    ::perfetto::protos::ChromeProcessDescriptor* chrome_process_;
    ::perfetto::protos::ChromeThreadDescriptor* chrome_thread_;
    ::perfetto::protos::CounterDescriptor* counter_;
    uint64_t uuid_;
    uint64_t parent_uuid_;
    bool disallow_merging_with_system_tracks_;
    union StaticOrDynamicNameUnion {
      constexpr StaticOrDynamicNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr static_name_;
    } static_or_dynamic_name_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackDescriptor

// optional uint64 uuid = 1;
inline bool TrackDescriptor::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackDescriptor::has_uuid() const {
  return _internal_has_uuid();
}
inline void TrackDescriptor::clear_uuid() {
  _impl_.uuid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t TrackDescriptor::_internal_uuid() const {
  return _impl_.uuid_;
}
inline uint64_t TrackDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.uuid)
  return _internal_uuid();
}
inline void TrackDescriptor::_internal_set_uuid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.uuid_ = value;
}
inline void TrackDescriptor::set_uuid(uint64_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.uuid)
}

// optional uint64 parent_uuid = 5;
inline bool TrackDescriptor::_internal_has_parent_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackDescriptor::has_parent_uuid() const {
  return _internal_has_parent_uuid();
}
inline void TrackDescriptor::clear_parent_uuid() {
  _impl_.parent_uuid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t TrackDescriptor::_internal_parent_uuid() const {
  return _impl_.parent_uuid_;
}
inline uint64_t TrackDescriptor::parent_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.parent_uuid)
  return _internal_parent_uuid();
}
inline void TrackDescriptor::_internal_set_parent_uuid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.parent_uuid_ = value;
}
inline void TrackDescriptor::set_parent_uuid(uint64_t value) {
  _internal_set_parent_uuid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.parent_uuid)
}

// string name = 2;
inline bool TrackDescriptor::_internal_has_name() const {
  return static_or_dynamic_name_case() == kName;
}
inline bool TrackDescriptor::has_name() const {
  return _internal_has_name();
}
inline void TrackDescriptor::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void TrackDescriptor::clear_name() {
  if (_internal_has_name()) {
    _impl_.static_or_dynamic_name_.name_.Destroy();
    clear_has_static_or_dynamic_name();
  }
}
inline const std::string& TrackDescriptor::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void TrackDescriptor::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_static_or_dynamic_name();
    set_has_name();
    _impl_.static_or_dynamic_name_.name_.InitDefault();
  }
  _impl_.static_or_dynamic_name_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.name)
}
inline std::string* TrackDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.name)
  return _s;
}
inline const std::string& TrackDescriptor::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.static_or_dynamic_name_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrackDescriptor::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_static_or_dynamic_name();
    set_has_name();
    _impl_.static_or_dynamic_name_.name_.InitDefault();
  }
  _impl_.static_or_dynamic_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackDescriptor::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_static_or_dynamic_name();
    set_has_name();
    _impl_.static_or_dynamic_name_.name_.InitDefault();
  }
  return _impl_.static_or_dynamic_name_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrackDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.name)
  if (_internal_has_name()) {
    clear_has_static_or_dynamic_name();
    return _impl_.static_or_dynamic_name_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void TrackDescriptor::set_allocated_name(std::string* name) {
  if (has_static_or_dynamic_name()) {
    clear_static_or_dynamic_name();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.static_or_dynamic_name_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.name)
}

// string static_name = 10;
inline bool TrackDescriptor::_internal_has_static_name() const {
  return static_or_dynamic_name_case() == kStaticName;
}
inline bool TrackDescriptor::has_static_name() const {
  return _internal_has_static_name();
}
inline void TrackDescriptor::set_has_static_name() {
  _impl_._oneof_case_[0] = kStaticName;
}
inline void TrackDescriptor::clear_static_name() {
  if (_internal_has_static_name()) {
    _impl_.static_or_dynamic_name_.static_name_.Destroy();
    clear_has_static_or_dynamic_name();
  }
}
inline const std::string& TrackDescriptor::static_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.static_name)
  return _internal_static_name();
}
template <typename ArgT0, typename... ArgT>
inline void TrackDescriptor::set_static_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_static_name()) {
    clear_static_or_dynamic_name();
    set_has_static_name();
    _impl_.static_or_dynamic_name_.static_name_.InitDefault();
  }
  _impl_.static_or_dynamic_name_.static_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.static_name)
}
inline std::string* TrackDescriptor::mutable_static_name() {
  std::string* _s = _internal_mutable_static_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.static_name)
  return _s;
}
inline const std::string& TrackDescriptor::_internal_static_name() const {
  if (_internal_has_static_name()) {
    return _impl_.static_or_dynamic_name_.static_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrackDescriptor::_internal_set_static_name(const std::string& value) {
  if (!_internal_has_static_name()) {
    clear_static_or_dynamic_name();
    set_has_static_name();
    _impl_.static_or_dynamic_name_.static_name_.InitDefault();
  }
  _impl_.static_or_dynamic_name_.static_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackDescriptor::_internal_mutable_static_name() {
  if (!_internal_has_static_name()) {
    clear_static_or_dynamic_name();
    set_has_static_name();
    _impl_.static_or_dynamic_name_.static_name_.InitDefault();
  }
  return _impl_.static_or_dynamic_name_.static_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TrackDescriptor::release_static_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.static_name)
  if (_internal_has_static_name()) {
    clear_has_static_or_dynamic_name();
    return _impl_.static_or_dynamic_name_.static_name_.Release();
  } else {
    return nullptr;
  }
}
inline void TrackDescriptor::set_allocated_static_name(std::string* static_name) {
  if (has_static_or_dynamic_name()) {
    clear_static_or_dynamic_name();
  }
  if (static_name != nullptr) {
    set_has_static_name();
    _impl_.static_or_dynamic_name_.static_name_.InitAllocated(static_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.static_name)
}

// optional .perfetto.protos.ProcessDescriptor process = 3;
inline bool TrackDescriptor::_internal_has_process() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.process_ != nullptr);
  return value;
}
inline bool TrackDescriptor::has_process() const {
  return _internal_has_process();
}
inline const ::perfetto::protos::ProcessDescriptor& TrackDescriptor::_internal_process() const {
  const ::perfetto::protos::ProcessDescriptor* p = _impl_.process_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ProcessDescriptor&>(
      ::perfetto::protos::_ProcessDescriptor_default_instance_);
}
inline const ::perfetto::protos::ProcessDescriptor& TrackDescriptor::process() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.process)
  return _internal_process();
}
inline void TrackDescriptor::unsafe_arena_set_allocated_process(
    ::perfetto::protos::ProcessDescriptor* process) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.process_);
  }
  _impl_.process_ = process;
  if (process) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackDescriptor.process)
}
inline ::perfetto::protos::ProcessDescriptor* TrackDescriptor::release_process() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ProcessDescriptor* temp = _impl_.process_;
  _impl_.process_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ProcessDescriptor* TrackDescriptor::unsafe_arena_release_process() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.process)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ProcessDescriptor* temp = _impl_.process_;
  _impl_.process_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProcessDescriptor* TrackDescriptor::_internal_mutable_process() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.process_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProcessDescriptor>(GetArenaForAllocation());
    _impl_.process_ = p;
  }
  return _impl_.process_;
}
inline ::perfetto::protos::ProcessDescriptor* TrackDescriptor::mutable_process() {
  ::perfetto::protos::ProcessDescriptor* _msg = _internal_mutable_process();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.process)
  return _msg;
}
inline void TrackDescriptor::set_allocated_process(::perfetto::protos::ProcessDescriptor* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.process_);
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process));
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.process_ = process;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.process)
}

// optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
inline bool TrackDescriptor::_internal_has_chrome_process() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_process_ != nullptr);
  return value;
}
inline bool TrackDescriptor::has_chrome_process() const {
  return _internal_has_chrome_process();
}
inline const ::perfetto::protos::ChromeProcessDescriptor& TrackDescriptor::_internal_chrome_process() const {
  const ::perfetto::protos::ChromeProcessDescriptor* p = _impl_.chrome_process_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeProcessDescriptor&>(
      ::perfetto::protos::_ChromeProcessDescriptor_default_instance_);
}
inline const ::perfetto::protos::ChromeProcessDescriptor& TrackDescriptor::chrome_process() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.chrome_process)
  return _internal_chrome_process();
}
inline void TrackDescriptor::unsafe_arena_set_allocated_chrome_process(
    ::perfetto::protos::ChromeProcessDescriptor* chrome_process) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_process_);
  }
  _impl_.chrome_process_ = chrome_process;
  if (chrome_process) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackDescriptor.chrome_process)
}
inline ::perfetto::protos::ChromeProcessDescriptor* TrackDescriptor::release_chrome_process() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::ChromeProcessDescriptor* temp = _impl_.chrome_process_;
  _impl_.chrome_process_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeProcessDescriptor* TrackDescriptor::unsafe_arena_release_chrome_process() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.chrome_process)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::ChromeProcessDescriptor* temp = _impl_.chrome_process_;
  _impl_.chrome_process_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeProcessDescriptor* TrackDescriptor::_internal_mutable_chrome_process() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.chrome_process_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeProcessDescriptor>(GetArenaForAllocation());
    _impl_.chrome_process_ = p;
  }
  return _impl_.chrome_process_;
}
inline ::perfetto::protos::ChromeProcessDescriptor* TrackDescriptor::mutable_chrome_process() {
  ::perfetto::protos::ChromeProcessDescriptor* _msg = _internal_mutable_chrome_process();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.chrome_process)
  return _msg;
}
inline void TrackDescriptor::set_allocated_chrome_process(::perfetto::protos::ChromeProcessDescriptor* chrome_process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_process_);
  }
  if (chrome_process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_process));
    if (message_arena != submessage_arena) {
      chrome_process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_process, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.chrome_process_ = chrome_process;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.chrome_process)
}

// optional .perfetto.protos.ThreadDescriptor thread = 4;
inline bool TrackDescriptor::_internal_has_thread() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.thread_ != nullptr);
  return value;
}
inline bool TrackDescriptor::has_thread() const {
  return _internal_has_thread();
}
inline const ::perfetto::protos::ThreadDescriptor& TrackDescriptor::_internal_thread() const {
  const ::perfetto::protos::ThreadDescriptor* p = _impl_.thread_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ThreadDescriptor&>(
      ::perfetto::protos::_ThreadDescriptor_default_instance_);
}
inline const ::perfetto::protos::ThreadDescriptor& TrackDescriptor::thread() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.thread)
  return _internal_thread();
}
inline void TrackDescriptor::unsafe_arena_set_allocated_thread(
    ::perfetto::protos::ThreadDescriptor* thread) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thread_);
  }
  _impl_.thread_ = thread;
  if (thread) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackDescriptor.thread)
}
inline ::perfetto::protos::ThreadDescriptor* TrackDescriptor::release_thread() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ThreadDescriptor* temp = _impl_.thread_;
  _impl_.thread_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ThreadDescriptor* TrackDescriptor::unsafe_arena_release_thread() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.thread)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ThreadDescriptor* temp = _impl_.thread_;
  _impl_.thread_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ThreadDescriptor* TrackDescriptor::_internal_mutable_thread() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.thread_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ThreadDescriptor>(GetArenaForAllocation());
    _impl_.thread_ = p;
  }
  return _impl_.thread_;
}
inline ::perfetto::protos::ThreadDescriptor* TrackDescriptor::mutable_thread() {
  ::perfetto::protos::ThreadDescriptor* _msg = _internal_mutable_thread();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.thread)
  return _msg;
}
inline void TrackDescriptor::set_allocated_thread(::perfetto::protos::ThreadDescriptor* thread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thread_);
  }
  if (thread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread));
    if (message_arena != submessage_arena) {
      thread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.thread_ = thread;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.thread)
}

// optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
inline bool TrackDescriptor::_internal_has_chrome_thread() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chrome_thread_ != nullptr);
  return value;
}
inline bool TrackDescriptor::has_chrome_thread() const {
  return _internal_has_chrome_thread();
}
inline const ::perfetto::protos::ChromeThreadDescriptor& TrackDescriptor::_internal_chrome_thread() const {
  const ::perfetto::protos::ChromeThreadDescriptor* p = _impl_.chrome_thread_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeThreadDescriptor&>(
      ::perfetto::protos::_ChromeThreadDescriptor_default_instance_);
}
inline const ::perfetto::protos::ChromeThreadDescriptor& TrackDescriptor::chrome_thread() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.chrome_thread)
  return _internal_chrome_thread();
}
inline void TrackDescriptor::unsafe_arena_set_allocated_chrome_thread(
    ::perfetto::protos::ChromeThreadDescriptor* chrome_thread) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_thread_);
  }
  _impl_.chrome_thread_ = chrome_thread;
  if (chrome_thread) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackDescriptor.chrome_thread)
}
inline ::perfetto::protos::ChromeThreadDescriptor* TrackDescriptor::release_chrome_thread() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeThreadDescriptor* temp = _impl_.chrome_thread_;
  _impl_.chrome_thread_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeThreadDescriptor* TrackDescriptor::unsafe_arena_release_chrome_thread() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.chrome_thread)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::ChromeThreadDescriptor* temp = _impl_.chrome_thread_;
  _impl_.chrome_thread_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeThreadDescriptor* TrackDescriptor::_internal_mutable_chrome_thread() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.chrome_thread_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeThreadDescriptor>(GetArenaForAllocation());
    _impl_.chrome_thread_ = p;
  }
  return _impl_.chrome_thread_;
}
inline ::perfetto::protos::ChromeThreadDescriptor* TrackDescriptor::mutable_chrome_thread() {
  ::perfetto::protos::ChromeThreadDescriptor* _msg = _internal_mutable_chrome_thread();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.chrome_thread)
  return _msg;
}
inline void TrackDescriptor::set_allocated_chrome_thread(::perfetto::protos::ChromeThreadDescriptor* chrome_thread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chrome_thread_);
  }
  if (chrome_thread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_thread));
    if (message_arena != submessage_arena) {
      chrome_thread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_thread, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.chrome_thread_ = chrome_thread;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.chrome_thread)
}

// optional .perfetto.protos.CounterDescriptor counter = 8;
inline bool TrackDescriptor::_internal_has_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counter_ != nullptr);
  return value;
}
inline bool TrackDescriptor::has_counter() const {
  return _internal_has_counter();
}
inline const ::perfetto::protos::CounterDescriptor& TrackDescriptor::_internal_counter() const {
  const ::perfetto::protos::CounterDescriptor* p = _impl_.counter_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::CounterDescriptor&>(
      ::perfetto::protos::_CounterDescriptor_default_instance_);
}
inline const ::perfetto::protos::CounterDescriptor& TrackDescriptor::counter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.counter)
  return _internal_counter();
}
inline void TrackDescriptor::unsafe_arena_set_allocated_counter(
    ::perfetto::protos::CounterDescriptor* counter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counter_);
  }
  _impl_.counter_ = counter;
  if (counter) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TrackDescriptor.counter)
}
inline ::perfetto::protos::CounterDescriptor* TrackDescriptor::release_counter() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::CounterDescriptor* temp = _impl_.counter_;
  _impl_.counter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::CounterDescriptor* TrackDescriptor::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrackDescriptor.counter)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::CounterDescriptor* temp = _impl_.counter_;
  _impl_.counter_ = nullptr;
  return temp;
}
inline ::perfetto::protos::CounterDescriptor* TrackDescriptor::_internal_mutable_counter() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::CounterDescriptor>(GetArenaForAllocation());
    _impl_.counter_ = p;
  }
  return _impl_.counter_;
}
inline ::perfetto::protos::CounterDescriptor* TrackDescriptor::mutable_counter() {
  ::perfetto::protos::CounterDescriptor* _msg = _internal_mutable_counter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrackDescriptor.counter)
  return _msg;
}
inline void TrackDescriptor::set_allocated_counter(::perfetto::protos::CounterDescriptor* counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counter_);
  }
  if (counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counter));
    if (message_arena != submessage_arena) {
      counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.counter_ = counter;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackDescriptor.counter)
}

// optional bool disallow_merging_with_system_tracks = 9;
inline bool TrackDescriptor::_internal_has_disallow_merging_with_system_tracks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackDescriptor::has_disallow_merging_with_system_tracks() const {
  return _internal_has_disallow_merging_with_system_tracks();
}
inline void TrackDescriptor::clear_disallow_merging_with_system_tracks() {
  _impl_.disallow_merging_with_system_tracks_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool TrackDescriptor::_internal_disallow_merging_with_system_tracks() const {
  return _impl_.disallow_merging_with_system_tracks_;
}
inline bool TrackDescriptor::disallow_merging_with_system_tracks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrackDescriptor.disallow_merging_with_system_tracks)
  return _internal_disallow_merging_with_system_tracks();
}
inline void TrackDescriptor::_internal_set_disallow_merging_with_system_tracks(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.disallow_merging_with_system_tracks_ = value;
}
inline void TrackDescriptor::set_disallow_merging_with_system_tracks(bool value) {
  _internal_set_disallow_merging_with_system_tracks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrackDescriptor.disallow_merging_with_system_tracks)
}

inline bool TrackDescriptor::has_static_or_dynamic_name() const {
  return static_or_dynamic_name_case() != STATIC_OR_DYNAMIC_NAME_NOT_SET;
}
inline void TrackDescriptor::clear_has_static_or_dynamic_name() {
  _impl_._oneof_case_[0] = STATIC_OR_DYNAMIC_NAME_NOT_SET;
}
inline TrackDescriptor::StaticOrDynamicNameCase TrackDescriptor::static_or_dynamic_name_case() const {
  return TrackDescriptor::StaticOrDynamicNameCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto
