#include "perfetto/protozero/gen_field_helpers.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/scattered_heap_buffer.h"
// DO NOT EDIT. Autogenerated by Perfetto cppgen_plugin
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
#include "protos/perfetto/trace/trace_packet_defaults.gen.h"
#include "protos/perfetto/trace/track_event/track_event.gen.h"
#include "protos/perfetto/trace/track_event/source_location.gen.h"
#include "protos/perfetto/trace/track_event/screenshot.gen.h"
#include "protos/perfetto/trace/track_event/pixel_modem.gen.h"
#include "protos/perfetto/trace/track_event/chrome_window_handle_event_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_user_event.gen.h"
#include "protos/perfetto/trace/track_event/chrome_renderer_scheduler_state.gen.h"
#include "protos/perfetto/trace/track_event/chrome_mojo_event_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_message_pump.gen.h"
#include "protos/perfetto/trace/track_event/chrome_legacy_ipc.gen.h"
#include "protos/perfetto/trace/track_event/chrome_latency_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_keyed_service.gen.h"
#include "protos/perfetto/trace/track_event/chrome_histogram_sample.gen.h"
#include "protos/perfetto/trace/track_event/chrome_frame_reporter.gen.h"
#include "protos/perfetto/trace/track_event/chrome_content_settings_event_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.gen.h"
#include "protos/perfetto/trace/track_event/chrome_application_state_info.gen.h"
#include "protos/perfetto/trace/track_event/chrome_active_processes.gen.h"
#include "protos/perfetto/trace/track_event/task_execution.gen.h"
#include "protos/perfetto/trace/track_event/log_message.gen.h"
#include "protos/perfetto/trace/track_event/debug_annotation.gen.h"
#include "protos/perfetto/trace/profiling/profile_packet.gen.h"
#include "protos/perfetto/trace/profiling/profile_common.gen.h"
#include "protos/perfetto/common/perf_events.gen.h"
#include "protos/perfetto/trace/chrome/v8.gen.h"

namespace perfetto {
namespace protos {
namespace gen {

TracePacketDefaults::TracePacketDefaults() = default;
TracePacketDefaults::~TracePacketDefaults() = default;
TracePacketDefaults::TracePacketDefaults(const TracePacketDefaults&) = default;
TracePacketDefaults& TracePacketDefaults::operator=(const TracePacketDefaults&) = default;
TracePacketDefaults::TracePacketDefaults(TracePacketDefaults&&) noexcept = default;
TracePacketDefaults& TracePacketDefaults::operator=(TracePacketDefaults&&) = default;

bool TracePacketDefaults::operator==(const TracePacketDefaults& other) const {
  return ::protozero::internal::gen_helpers::EqualsField(unknown_fields_, other.unknown_fields_)
   && ::protozero::internal::gen_helpers::EqualsField(timestamp_clock_id_, other.timestamp_clock_id_)
   && ::protozero::internal::gen_helpers::EqualsField(track_event_defaults_, other.track_event_defaults_)
   && ::protozero::internal::gen_helpers::EqualsField(perf_sample_defaults_, other.perf_sample_defaults_)
   && ::protozero::internal::gen_helpers::EqualsField(v8_code_defaults_, other.v8_code_defaults_);
}

bool TracePacketDefaults::ParseFromArray(const void* raw, size_t size) {
  unknown_fields_.clear();
  bool packed_error = false;

  ::protozero::ProtoDecoder dec(raw, size);
  for (auto field = dec.ReadField(); field.valid(); field = dec.ReadField()) {
    if (field.id() < _has_field_.size()) {
      _has_field_.set(field.id());
    }
    switch (field.id()) {
      case 58 /* timestamp_clock_id */:
        field.get(&timestamp_clock_id_);
        break;
      case 11 /* track_event_defaults */:
        (*track_event_defaults_).ParseFromArray(field.data(), field.size());
        break;
      case 12 /* perf_sample_defaults */:
        (*perf_sample_defaults_).ParseFromArray(field.data(), field.size());
        break;
      case 99 /* v8_code_defaults */:
        (*v8_code_defaults_).ParseFromArray(field.data(), field.size());
        break;
      default:
        field.SerializeAndAppendTo(&unknown_fields_);
        break;
    }
  }
  return !packed_error && !dec.bytes_left();
}

std::string TracePacketDefaults::SerializeAsString() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsString();
}

std::vector<uint8_t> TracePacketDefaults::SerializeAsArray() const {
  ::protozero::internal::gen_helpers::MessageSerializer msg;
  Serialize(msg.get());
  return msg.SerializeAsArray();
}

void TracePacketDefaults::Serialize(::protozero::Message* msg) const {
  // Field 58: timestamp_clock_id
  if (_has_field_[58]) {
    ::protozero::internal::gen_helpers::SerializeVarInt(58, timestamp_clock_id_, msg);
  }

  // Field 11: track_event_defaults
  if (_has_field_[11]) {
    (*track_event_defaults_).Serialize(msg->BeginNestedMessage<::protozero::Message>(11));
  }

  // Field 12: perf_sample_defaults
  if (_has_field_[12]) {
    (*perf_sample_defaults_).Serialize(msg->BeginNestedMessage<::protozero::Message>(12));
  }

  // Field 99: v8_code_defaults
  if (_has_field_[99]) {
    (*v8_code_defaults_).Serialize(msg->BeginNestedMessage<::protozero::Message>(99));
  }

  protozero::internal::gen_helpers::SerializeUnknownFields(unknown_fields_, msg);
}

}  // namespace perfetto
}  // namespace protos
}  // namespace gen
#if defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif
