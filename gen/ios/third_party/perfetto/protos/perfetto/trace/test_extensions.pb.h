// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/test_extensions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/trace/track_event/track_event.pb.h"
#include "protos/perfetto/trace/track_event/debug_annotation.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto {
  static const uint32_t offsets[];
};
namespace perfetto {
namespace protos {
class TestExtension;
struct TestExtensionDefaultTypeInternal;
extern TestExtensionDefaultTypeInternal _TestExtension_default_instance_;
class TestExtensionChild;
struct TestExtensionChildDefaultTypeInternal;
extern TestExtensionChildDefaultTypeInternal _TestExtensionChild_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::TestExtension* Arena::CreateMaybeMessage<::perfetto::protos::TestExtension>(Arena*);
template<> ::perfetto::protos::TestExtensionChild* Arena::CreateMaybeMessage<::perfetto::protos::TestExtensionChild>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class TestExtension final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestExtension) */ {
 public:
  inline TestExtension() : TestExtension(nullptr) {}
  ~TestExtension() override;
  explicit PROTOBUF_CONSTEXPR TestExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtension(const TestExtension& from);
  TestExtension(TestExtension&& from) noexcept
    : TestExtension() {
    *this = ::std::move(from);
  }

  inline TestExtension& operator=(const TestExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtension& operator=(TestExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TestExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtension* internal_default_instance() {
    return reinterpret_cast<const TestExtension*>(
               &_TestExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestExtension& a, TestExtension& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TestExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TestExtension& from);
  void MergeFrom(const TestExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestExtension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TestExtension";
  }
  protected:
  explicit TestExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kStringExtensionForTestingFieldNumber = 9900;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    string_extension_for_testing;
  static const int kStringExtensionForTesting2FieldNumber = 9905;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    string_extension_for_testing2;
  static const int kIntExtensionForTestingFieldNumber = 9901;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, false >
    int_extension_for_testing;
  static const int kOmittedExtensionForTestingFieldNumber = 9902;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    omitted_extension_for_testing;
  static const int kNestedMessageExtensionForTestingFieldNumber = 9903;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::perfetto::protos::TestExtensionChild >, 11, false >
    nested_message_extension_for_testing;
  static const int kUintExtensionForTestingFieldNumber = 9904;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
    uint_extension_for_testing;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TestExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class TestExtensionChild final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.TestExtensionChild) */ {
 public:
  inline TestExtensionChild() : TestExtensionChild(nullptr) {}
  ~TestExtensionChild() override;
  explicit PROTOBUF_CONSTEXPR TestExtensionChild(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtensionChild(const TestExtensionChild& from);
  TestExtensionChild(TestExtensionChild&& from) noexcept
    : TestExtensionChild() {
    *this = ::std::move(from);
  }

  inline TestExtensionChild& operator=(const TestExtensionChild& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtensionChild& operator=(TestExtensionChild&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TestExtensionChild& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtensionChild* internal_default_instance() {
    return reinterpret_cast<const TestExtensionChild*>(
               &_TestExtensionChild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestExtensionChild& a, TestExtensionChild& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(TestExtensionChild* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtensionChild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtensionChild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtensionChild>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TestExtensionChild& from);
  void MergeFrom(const TestExtensionChild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestExtensionChild* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.TestExtensionChild";
  }
  protected:
  explicit TestExtensionChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugAnnotationsFieldNumber = 99,
    kChildFieldForTestingFieldNumber = 1,
  };
  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 99;
  int debug_annotations_size() const;
  private:
  int _internal_debug_annotations_size() const;
  public:
  void clear_debug_annotations();
  ::perfetto::protos::DebugAnnotation* mutable_debug_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
      mutable_debug_annotations();
  private:
  const ::perfetto::protos::DebugAnnotation& _internal_debug_annotations(int index) const;
  ::perfetto::protos::DebugAnnotation* _internal_add_debug_annotations();
  public:
  const ::perfetto::protos::DebugAnnotation& debug_annotations(int index) const;
  ::perfetto::protos::DebugAnnotation* add_debug_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
      debug_annotations() const;

  // optional string child_field_for_testing = 1;
  bool has_child_field_for_testing() const;
  private:
  bool _internal_has_child_field_for_testing() const;
  public:
  void clear_child_field_for_testing();
  const std::string& child_field_for_testing() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child_field_for_testing(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child_field_for_testing();
  PROTOBUF_NODISCARD std::string* release_child_field_for_testing();
  void set_allocated_child_field_for_testing(std::string* child_field_for_testing);
  private:
  const std::string& _internal_child_field_for_testing() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_field_for_testing(const std::string& value);
  std::string* _internal_mutable_child_field_for_testing();
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.TestExtensionChild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation > debug_annotations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_field_for_testing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestExtension

// -------------------------------------------------------------------

// TestExtensionChild

// optional string child_field_for_testing = 1;
inline bool TestExtensionChild::_internal_has_child_field_for_testing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestExtensionChild::has_child_field_for_testing() const {
  return _internal_has_child_field_for_testing();
}
inline void TestExtensionChild::clear_child_field_for_testing() {
  _impl_.child_field_for_testing_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestExtensionChild::child_field_for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestExtensionChild.child_field_for_testing)
  return _internal_child_field_for_testing();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtensionChild::set_child_field_for_testing(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.child_field_for_testing_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TestExtensionChild.child_field_for_testing)
}
inline std::string* TestExtensionChild::mutable_child_field_for_testing() {
  std::string* _s = _internal_mutable_child_field_for_testing();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestExtensionChild.child_field_for_testing)
  return _s;
}
inline const std::string& TestExtensionChild::_internal_child_field_for_testing() const {
  return _impl_.child_field_for_testing_.Get();
}
inline void TestExtensionChild::_internal_set_child_field_for_testing(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.child_field_for_testing_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtensionChild::_internal_mutable_child_field_for_testing() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.child_field_for_testing_.Mutable(GetArenaForAllocation());
}
inline std::string* TestExtensionChild::release_child_field_for_testing() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestExtensionChild.child_field_for_testing)
  if (!_internal_has_child_field_for_testing()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.child_field_for_testing_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.child_field_for_testing_.IsDefault()) {
    _impl_.child_field_for_testing_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestExtensionChild::set_allocated_child_field_for_testing(std::string* child_field_for_testing) {
  if (child_field_for_testing != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.child_field_for_testing_.SetAllocated(child_field_for_testing, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.child_field_for_testing_.IsDefault()) {
    _impl_.child_field_for_testing_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestExtensionChild.child_field_for_testing)
}

// repeated .perfetto.protos.DebugAnnotation debug_annotations = 99;
inline int TestExtensionChild::_internal_debug_annotations_size() const {
  return _impl_.debug_annotations_.size();
}
inline int TestExtensionChild::debug_annotations_size() const {
  return _internal_debug_annotations_size();
}
inline ::perfetto::protos::DebugAnnotation* TestExtensionChild::mutable_debug_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestExtensionChild.debug_annotations)
  return _impl_.debug_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
TestExtensionChild::mutable_debug_annotations() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TestExtensionChild.debug_annotations)
  return &_impl_.debug_annotations_;
}
inline const ::perfetto::protos::DebugAnnotation& TestExtensionChild::_internal_debug_annotations(int index) const {
  return _impl_.debug_annotations_.Get(index);
}
inline const ::perfetto::protos::DebugAnnotation& TestExtensionChild::debug_annotations(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestExtensionChild.debug_annotations)
  return _internal_debug_annotations(index);
}
inline ::perfetto::protos::DebugAnnotation* TestExtensionChild::_internal_add_debug_annotations() {
  return _impl_.debug_annotations_.Add();
}
inline ::perfetto::protos::DebugAnnotation* TestExtensionChild::add_debug_annotations() {
  ::perfetto::protos::DebugAnnotation* _add = _internal_add_debug_annotations();
  // @@protoc_insertion_point(field_add:perfetto.protos.TestExtensionChild.debug_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
TestExtensionChild::debug_annotations() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TestExtensionChild.debug_annotations)
  return _impl_.debug_annotations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto
