// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_CHROME_TRACK_EVENT_PROTO_H_
#define PERFETTO_PROTOS_CHROME_TRACK_EVENT_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"
#include "protos/perfetto/trace/track_event/debug_annotation.pbzero.h"
#include "protos/perfetto/trace/track_event/source_location.pbzero.h"
#include "protos/perfetto/trace/track_event/track_event.pbzero.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class ActiveProcesses;
class AndroidActivity;
class AndroidIPC;
class AndroidToolbar;
class AndroidView;
class AndroidViewDump;
class AnimationFrameScriptTimingInfo;
class AnimationFrameTimingInfo;
class BackForwardCacheCanStoreDocumentResult;
class BeginFrameArgsV2;
class BeginFrameObserverStateV2;
class BeginFrameSourceStateV2;
class BeginImplFrameArgsV2;
class BeginImplFrameArgsV2_TimestampsInUs;
class BlinkExecutionContext;
class BlinkHighEntropyAPI;
class BlinkHighEntropyAPI_CalledJsApi;
class BlinkHighEntropyAPI_FontLookup;
class BlinkHighEntropyAPI_JSFunctionArgument;
class BlinkSourceLocation;
class BlinkTaskScope;
class BrowsingContextState;
class ChildProcessLauncherPriority;
class ChromeBrowserContext;
class ChromeCompositorSchedulerStateV2;
class ChromeCompositorStateMachineV2;
class ChromeCompositorStateMachineV2_MajorStateV2;
class ChromeCompositorStateMachineV2_MinorStateV2;
class ChromeExtensionId;
class ChromeGraphicsPipeline;
class ChromeHashedPerformanceMark;
class ChromeMemoryPressureNotification;
class ChromeMessagePumpForUI;
class ChromeProfileDestroyer;
class ChromeRasterTask;
class ChromeSamplingProfilerSampleCollected;
class ChromeSqlDiagnostics;
class ChromeTaskAnnotator;
class ChromeTaskPostedToDisabledQueue;
class ChromeThreadPoolTask;
class ChromeUnguessableToken;
class ChromeWebAppBadNavigate;
class CompositorTimingHistoryV2;
class CrasUnified;
class EventForwarder;
class EventLatency;
class FrameSinkId;
class FrameTreeNodeInfo;
class GlobalRenderFrameHostId;
class LibunwindstackUnwinder;
class LinuxAlsaOutput;
class LinuxPulseOutput;
class LocalSurfaceId;
class MacAUHALStream;
class NavigationHandle;
class PageLoad;
class ParkableStringCompressInBackground;
class ParkableStringUnpark;
class ProcessSingleton;
class RenderFrameHost;
class RenderFrameImplDeletion;
class RenderFrameProxyHost;
class RenderProcessHost;
class RenderProcessHostCleanup;
class RenderProcessHostListener;
class RenderViewHost;
class RendererMainThreadTaskExecution;
class ResourceBundle;
class ScrollDeltas;
class ScrollPredictorMetrics;
class ScrollPredictorMetrics_EventFrameValue;
class SendBeginMainFrameToCommitBreakdown;
class SequenceManagerTask;
class ShouldSwapBrowsingInstancesResult;
class SiteInstance;
class SiteInstanceGroup;
class StartUp;
class TabSwitchMeasurement;
class TouchDispositionGestureFilter;
class UkmPageLoadTimingUpdate;
class V8StackFrame;
class V8StackFrame_ScriptLocation;
class ViewClassName;
class WebContentInteraction;
class WebViewStartup;
class WinRenderAudioFromSource;
namespace perfetto_pbzero_enum_AndroidToolbar {
enum AllowCaptureReason : int32_t;
}  // namespace perfetto_pbzero_enum_AndroidToolbar
using AndroidToolbar_AllowCaptureReason = perfetto_pbzero_enum_AndroidToolbar::AllowCaptureReason;
namespace perfetto_pbzero_enum_AndroidToolbar {
enum BlockCaptureReason : int32_t;
}  // namespace perfetto_pbzero_enum_AndroidToolbar
using AndroidToolbar_BlockCaptureReason = perfetto_pbzero_enum_AndroidToolbar::BlockCaptureReason;
namespace perfetto_pbzero_enum_AndroidToolbar {
enum SnapshotDifference : int32_t;
}  // namespace perfetto_pbzero_enum_AndroidToolbar
using AndroidToolbar_SnapshotDifference = perfetto_pbzero_enum_AndroidToolbar::SnapshotDifference;
namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo {
enum InvokerType : int32_t;
}  // namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo
using AnimationFrameScriptTimingInfo_InvokerType = perfetto_pbzero_enum_AnimationFrameScriptTimingInfo::InvokerType;
namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo {
enum ThirdPartyTechnology : int32_t;
}  // namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo
using AnimationFrameScriptTimingInfo_ThirdPartyTechnology = perfetto_pbzero_enum_AnimationFrameScriptTimingInfo::ThirdPartyTechnology;
namespace perfetto_pbzero_enum_BackForwardCacheCanStoreDocumentResult {
enum BackForwardCacheNotRestoredReason : int32_t;
}  // namespace perfetto_pbzero_enum_BackForwardCacheCanStoreDocumentResult
using BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason = perfetto_pbzero_enum_BackForwardCacheCanStoreDocumentResult::BackForwardCacheNotRestoredReason;
namespace perfetto_pbzero_enum_BeginFrameArgsV2 {
enum BeginFrameArgsType : int32_t;
}  // namespace perfetto_pbzero_enum_BeginFrameArgsV2
using BeginFrameArgsV2_BeginFrameArgsType = perfetto_pbzero_enum_BeginFrameArgsV2::BeginFrameArgsType;
namespace perfetto_pbzero_enum_BeginImplFrameArgsV2 {
enum State : int32_t;
}  // namespace perfetto_pbzero_enum_BeginImplFrameArgsV2
using BeginImplFrameArgsV2_State = perfetto_pbzero_enum_BeginImplFrameArgsV2::State;
namespace perfetto_pbzero_enum_BlinkExecutionContext {
enum ContextType : int32_t;
}  // namespace perfetto_pbzero_enum_BlinkExecutionContext
using BlinkExecutionContext_ContextType = perfetto_pbzero_enum_BlinkExecutionContext::ContextType;
namespace perfetto_pbzero_enum_BlinkExecutionContext {
enum WorldType : int32_t;
}  // namespace perfetto_pbzero_enum_BlinkExecutionContext
using BlinkExecutionContext_WorldType = perfetto_pbzero_enum_BlinkExecutionContext::WorldType;
namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_FontLookup {
enum FontLookupType : int32_t;
}  // namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_FontLookup
using BlinkHighEntropyAPI_FontLookup_FontLookupType = perfetto_pbzero_enum_BlinkHighEntropyAPI_FontLookup::FontLookupType;
namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_JSFunctionArgument {
enum ArgumentType : int32_t;
}  // namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_JSFunctionArgument
using BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType = perfetto_pbzero_enum_BlinkHighEntropyAPI_JSFunctionArgument::ArgumentType;
namespace perfetto_pbzero_enum_BlinkTaskScope {
enum TaskScopeType : int32_t;
}  // namespace perfetto_pbzero_enum_BlinkTaskScope
using BlinkTaskScope_TaskScopeType = perfetto_pbzero_enum_BlinkTaskScope::TaskScopeType;
namespace perfetto_pbzero_enum_ChildProcessLauncherPriority {
enum Importance : int32_t;
}  // namespace perfetto_pbzero_enum_ChildProcessLauncherPriority
using ChildProcessLauncherPriority_Importance = perfetto_pbzero_enum_ChildProcessLauncherPriority::Importance;
enum ChromeCompositorSchedulerActionV2 : int32_t;
namespace perfetto_pbzero_enum_ChromeCompositorSchedulerStateV2 {
enum BeginImplFrameDeadlineMode : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeCompositorSchedulerStateV2
using ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode = perfetto_pbzero_enum_ChromeCompositorSchedulerStateV2::BeginImplFrameDeadlineMode;
namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum BeginImplFrameState : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::BeginImplFrameState;
namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum BeginMainFrameState : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::BeginMainFrameState;
namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum ForcedRedrawOnTimeoutState : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::ForcedRedrawOnTimeoutState;
namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum LayerTreeFrameSinkState : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::LayerTreeFrameSinkState;
namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2 {
enum ScrollHandlerState : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2
using ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2::ScrollHandlerState;
namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2 {
enum TreePriority : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2
using ChromeCompositorStateMachineV2_MinorStateV2_TreePriority = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2::TreePriority;
namespace perfetto_pbzero_enum_ChromeGraphicsPipeline {
enum FrameSkippedReason : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeGraphicsPipeline
using ChromeGraphicsPipeline_FrameSkippedReason = perfetto_pbzero_enum_ChromeGraphicsPipeline::FrameSkippedReason;
namespace perfetto_pbzero_enum_ChromeGraphicsPipeline {
enum StepName : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeGraphicsPipeline
using ChromeGraphicsPipeline_StepName = perfetto_pbzero_enum_ChromeGraphicsPipeline::StepName;
namespace perfetto_pbzero_enum_ChromeSamplingProfilerSampleCollected {
enum WriteStatus : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeSamplingProfilerSampleCollected
using ChromeSamplingProfilerSampleCollected_WriteStatus = perfetto_pbzero_enum_ChromeSamplingProfilerSampleCollected::WriteStatus;
namespace perfetto_pbzero_enum_ChromeTaskAnnotator {
enum DelayPolicy : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeTaskAnnotator
using ChromeTaskAnnotator_DelayPolicy = perfetto_pbzero_enum_ChromeTaskAnnotator::DelayPolicy;
namespace perfetto_pbzero_enum_ChromeThreadPoolTask {
enum ExecutionMode : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeThreadPoolTask
using ChromeThreadPoolTask_ExecutionMode = perfetto_pbzero_enum_ChromeThreadPoolTask::ExecutionMode;
namespace perfetto_pbzero_enum_ChromeThreadPoolTask {
enum Priority : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeThreadPoolTask
using ChromeThreadPoolTask_Priority = perfetto_pbzero_enum_ChromeThreadPoolTask::Priority;
namespace perfetto_pbzero_enum_ChromeThreadPoolTask {
enum ShutdownBehavior : int32_t;
}  // namespace perfetto_pbzero_enum_ChromeThreadPoolTask
using ChromeThreadPoolTask_ShutdownBehavior = perfetto_pbzero_enum_ChromeThreadPoolTask::ShutdownBehavior;
namespace perfetto_pbzero_enum_EventLatency {
enum EventType : int32_t;
}  // namespace perfetto_pbzero_enum_EventLatency
using EventLatency_EventType = perfetto_pbzero_enum_EventLatency::EventType;
enum FrameDeleteIntention : int32_t;
namespace perfetto_pbzero_enum_FrameTreeNodeInfo {
enum FrameType : int32_t;
}  // namespace perfetto_pbzero_enum_FrameTreeNodeInfo
using FrameTreeNodeInfo_FrameType = perfetto_pbzero_enum_FrameTreeNodeInfo::FrameType;
namespace perfetto_pbzero_enum_LibunwindstackUnwinder {
enum ErrorCode : int32_t;
}  // namespace perfetto_pbzero_enum_LibunwindstackUnwinder
using LibunwindstackUnwinder_ErrorCode = perfetto_pbzero_enum_LibunwindstackUnwinder::ErrorCode;
enum MemoryPressureLevel : int32_t;
namespace perfetto_pbzero_enum_ProcessSingleton {
enum RemoteHungProcessTerminateReason : int32_t;
}  // namespace perfetto_pbzero_enum_ProcessSingleton
using ProcessSingleton_RemoteHungProcessTerminateReason = perfetto_pbzero_enum_ProcessSingleton::RemoteHungProcessTerminateReason;
namespace perfetto_pbzero_enum_ProcessSingleton {
enum RemoteProcessInteractionResult : int32_t;
}  // namespace perfetto_pbzero_enum_ProcessSingleton
using ProcessSingleton_RemoteProcessInteractionResult = perfetto_pbzero_enum_ProcessSingleton::RemoteProcessInteractionResult;
namespace perfetto_pbzero_enum_RenderFrameHost {
enum LifecycleState : int32_t;
}  // namespace perfetto_pbzero_enum_RenderFrameHost
using RenderFrameHost_LifecycleState = perfetto_pbzero_enum_RenderFrameHost::LifecycleState;
namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution {
enum FrameType : int32_t;
}  // namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution
using RendererMainThreadTaskExecution_FrameType = perfetto_pbzero_enum_RendererMainThreadTaskExecution::FrameType;
namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution {
enum TaskType : int32_t;
}  // namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution
using RendererMainThreadTaskExecution_TaskType = perfetto_pbzero_enum_RendererMainThreadTaskExecution::TaskType;
namespace perfetto_pbzero_enum_SequenceManagerTask {
enum Priority : int32_t;
}  // namespace perfetto_pbzero_enum_SequenceManagerTask
using SequenceManagerTask_Priority = perfetto_pbzero_enum_SequenceManagerTask::Priority;
namespace perfetto_pbzero_enum_SequenceManagerTask {
enum QueueName : int32_t;
}  // namespace perfetto_pbzero_enum_SequenceManagerTask
using SequenceManagerTask_QueueName = perfetto_pbzero_enum_SequenceManagerTask::QueueName;
enum ShouldSwapBrowsingInstance : int32_t;
namespace perfetto_pbzero_enum_StartUp {
enum LaunchCauseType : int32_t;
}  // namespace perfetto_pbzero_enum_StartUp
using StartUp_LaunchCauseType = perfetto_pbzero_enum_StartUp::LaunchCauseType;
namespace perfetto_pbzero_enum_TabSwitchMeasurement {
enum Result : int32_t;
}  // namespace perfetto_pbzero_enum_TabSwitchMeasurement
using TabSwitchMeasurement_Result = perfetto_pbzero_enum_TabSwitchMeasurement::Result;
namespace perfetto_pbzero_enum_TabSwitchMeasurement {
enum TabState : int32_t;
}  // namespace perfetto_pbzero_enum_TabSwitchMeasurement
using TabSwitchMeasurement_TabState = perfetto_pbzero_enum_TabSwitchMeasurement::TabState;
namespace perfetto_pbzero_enum_WebContentInteraction {
enum Type : int32_t;
}  // namespace perfetto_pbzero_enum_WebContentInteraction
using WebContentInteraction_Type = perfetto_pbzero_enum_WebContentInteraction::Type;
namespace perfetto_pbzero_enum_WebViewStartup {
enum CallSite : int32_t;
}  // namespace perfetto_pbzero_enum_WebViewStartup
using WebViewStartup_CallSite = perfetto_pbzero_enum_WebViewStartup::CallSite;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

enum ChromeAppState : int32_t {
  APP_STATE_FOREGROUND = 1,
  APP_STATE_BACKGROUND = 2,
};

constexpr ChromeAppState ChromeAppState_MIN = ChromeAppState::APP_STATE_FOREGROUND;
constexpr ChromeAppState ChromeAppState_MAX = ChromeAppState::APP_STATE_BACKGROUND;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeAppState_Name(::perfetto::protos::pbzero::ChromeAppState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeAppState::APP_STATE_FOREGROUND:
    return "APP_STATE_FOREGROUND";

  case ::perfetto::protos::pbzero::ChromeAppState::APP_STATE_BACKGROUND:
    return "APP_STATE_BACKGROUND";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

enum MemoryPressureLevel : int32_t {
  MEMORY_PRESSURE_LEVEL_NONE = 0,
  MEMORY_PRESSURE_LEVEL_MODERATE = 1,
  MEMORY_PRESSURE_LEVEL_CRITICAL = 2,
};

constexpr MemoryPressureLevel MemoryPressureLevel_MIN = MemoryPressureLevel::MEMORY_PRESSURE_LEVEL_NONE;
constexpr MemoryPressureLevel MemoryPressureLevel_MAX = MemoryPressureLevel::MEMORY_PRESSURE_LEVEL_CRITICAL;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* MemoryPressureLevel_Name(::perfetto::protos::pbzero::MemoryPressureLevel value) {
  switch (value) {
  case ::perfetto::protos::pbzero::MemoryPressureLevel::MEMORY_PRESSURE_LEVEL_NONE:
    return "MEMORY_PRESSURE_LEVEL_NONE";

  case ::perfetto::protos::pbzero::MemoryPressureLevel::MEMORY_PRESSURE_LEVEL_MODERATE:
    return "MEMORY_PRESSURE_LEVEL_MODERATE";

  case ::perfetto::protos::pbzero::MemoryPressureLevel::MEMORY_PRESSURE_LEVEL_CRITICAL:
    return "MEMORY_PRESSURE_LEVEL_CRITICAL";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

enum FrameDeleteIntention : int32_t {
  FRAME_DELETE_INTENTION_NOT_MAIN_FRAME = 0,
  FRAME_DELETE_INTENTION_SPECULATIVE_MAIN_FRAME_FOR_SHUTDOWN = 1,
  FRAME_DELETE_INTENTION_SPECULATIVE_MAIN_FRAME_FOR_NAVIGATION_CANCELLED = 2,
};

constexpr FrameDeleteIntention FrameDeleteIntention_MIN = FrameDeleteIntention::FRAME_DELETE_INTENTION_NOT_MAIN_FRAME;
constexpr FrameDeleteIntention FrameDeleteIntention_MAX = FrameDeleteIntention::FRAME_DELETE_INTENTION_SPECULATIVE_MAIN_FRAME_FOR_NAVIGATION_CANCELLED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* FrameDeleteIntention_Name(::perfetto::protos::pbzero::FrameDeleteIntention value) {
  switch (value) {
  case ::perfetto::protos::pbzero::FrameDeleteIntention::FRAME_DELETE_INTENTION_NOT_MAIN_FRAME:
    return "FRAME_DELETE_INTENTION_NOT_MAIN_FRAME";

  case ::perfetto::protos::pbzero::FrameDeleteIntention::FRAME_DELETE_INTENTION_SPECULATIVE_MAIN_FRAME_FOR_SHUTDOWN:
    return "FRAME_DELETE_INTENTION_SPECULATIVE_MAIN_FRAME_FOR_SHUTDOWN";

  case ::perfetto::protos::pbzero::FrameDeleteIntention::FRAME_DELETE_INTENTION_SPECULATIVE_MAIN_FRAME_FOR_NAVIGATION_CANCELLED:
    return "FRAME_DELETE_INTENTION_SPECULATIVE_MAIN_FRAME_FOR_NAVIGATION_CANCELLED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

enum ShouldSwapBrowsingInstance : int32_t {
  SHOULD_SWAP_BROWSING_INSTANCE_NO = 0,
  SHOULD_SWAP_BROWSING_INSTANCE_YES_FORCE_SWAP = 1,
  SHOULD_SWAP_BROWSING_INSTANCE_YES_CROSS_SITE_PROACTIVE_SWAP = 2,
  SHOULD_SWAP_BROWSING_INSTANCE_YES_SAME_SITE_PROACTIVE_SWAP = 3,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_PROACTIVE_SWAP_DISABLED = 4,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_MAIN_FRAME = 5,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_HAS_RELATED_ACTIVE_CONTENTS = 6,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_DOES_NOT_HAVE_SITE = 7,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_SOURCE_URL_SCHEME_NOT_HTTP_OR_HTTPS = 8,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_DESTINATION_URL_SCHEME_NOT_HTTP_OR_HTTPS = 9,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_SITE_NAVIGATION = 10,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_RELOADING_ERROR_PAGE = 11,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_ALREADY_HAS_MATCHING_BROWSING_INSTANCE = 12,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_RENDERER_DEBUG_URL = 13,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_NEEDED_FOR_BACK_FORWARD_CACHE = 14,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_DOCUMENT_NAVIGATION = 15,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_URL_NAVIGATION = 16,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_WILL_REPLACE_ENTRY = 17,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_RELOAD = 18,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_GUEST = 19,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_HAS_NOT_COMMITTED_ANY_NAVIGATION = 20,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_UNLOAD_HANDLER_EXISTS_ON_SAME_SITE_NAVIGATION = 21,
  SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_PRIMARY_MAIN_FRAME = 22,
};

constexpr ShouldSwapBrowsingInstance ShouldSwapBrowsingInstance_MIN = ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO;
constexpr ShouldSwapBrowsingInstance ShouldSwapBrowsingInstance_MAX = ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_PRIMARY_MAIN_FRAME;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ShouldSwapBrowsingInstance_Name(::perfetto::protos::pbzero::ShouldSwapBrowsingInstance value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_YES_FORCE_SWAP:
    return "SHOULD_SWAP_BROWSING_INSTANCE_YES_FORCE_SWAP";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_YES_CROSS_SITE_PROACTIVE_SWAP:
    return "SHOULD_SWAP_BROWSING_INSTANCE_YES_CROSS_SITE_PROACTIVE_SWAP";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_YES_SAME_SITE_PROACTIVE_SWAP:
    return "SHOULD_SWAP_BROWSING_INSTANCE_YES_SAME_SITE_PROACTIVE_SWAP";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_PROACTIVE_SWAP_DISABLED:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_PROACTIVE_SWAP_DISABLED";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_MAIN_FRAME:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_MAIN_FRAME";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_HAS_RELATED_ACTIVE_CONTENTS:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_HAS_RELATED_ACTIVE_CONTENTS";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_DOES_NOT_HAVE_SITE:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_DOES_NOT_HAVE_SITE";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_SOURCE_URL_SCHEME_NOT_HTTP_OR_HTTPS:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_SOURCE_URL_SCHEME_NOT_HTTP_OR_HTTPS";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_DESTINATION_URL_SCHEME_NOT_HTTP_OR_HTTPS:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_DESTINATION_URL_SCHEME_NOT_HTTP_OR_HTTPS";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_SITE_NAVIGATION:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_SITE_NAVIGATION";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_RELOADING_ERROR_PAGE:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_RELOADING_ERROR_PAGE";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_ALREADY_HAS_MATCHING_BROWSING_INSTANCE:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_ALREADY_HAS_MATCHING_BROWSING_INSTANCE";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_RENDERER_DEBUG_URL:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_RENDERER_DEBUG_URL";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_NEEDED_FOR_BACK_FORWARD_CACHE:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_NEEDED_FOR_BACK_FORWARD_CACHE";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_DOCUMENT_NAVIGATION:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_DOCUMENT_NAVIGATION";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_URL_NAVIGATION:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_SAME_URL_NAVIGATION";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_WILL_REPLACE_ENTRY:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_WILL_REPLACE_ENTRY";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_RELOAD:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_RELOAD";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_GUEST:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_GUEST";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_HAS_NOT_COMMITTED_ANY_NAVIGATION:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_HAS_NOT_COMMITTED_ANY_NAVIGATION";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_UNLOAD_HANDLER_EXISTS_ON_SAME_SITE_NAVIGATION:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_UNLOAD_HANDLER_EXISTS_ON_SAME_SITE_NAVIGATION";

  case ::perfetto::protos::pbzero::ShouldSwapBrowsingInstance::SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_PRIMARY_MAIN_FRAME:
    return "SHOULD_SWAP_BROWSING_INSTANCE_NO_NOT_PRIMARY_MAIN_FRAME";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

enum DeviceThermalState : int32_t {
  DEVICE_THERMAL_STATE_UNKNOWN = 0,
  DEVICE_THERMAL_STATE_NOMINAL = 1,
  DEVICE_THERMAL_STATE_FAIR = 2,
  DEVICE_THERMAL_STATE_SERIOUS = 3,
  DEVICE_THERMAL_STATE_CRITICAL = 4,
};

constexpr DeviceThermalState DeviceThermalState_MIN = DeviceThermalState::DEVICE_THERMAL_STATE_UNKNOWN;
constexpr DeviceThermalState DeviceThermalState_MAX = DeviceThermalState::DEVICE_THERMAL_STATE_CRITICAL;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* DeviceThermalState_Name(::perfetto::protos::pbzero::DeviceThermalState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::DeviceThermalState::DEVICE_THERMAL_STATE_UNKNOWN:
    return "DEVICE_THERMAL_STATE_UNKNOWN";

  case ::perfetto::protos::pbzero::DeviceThermalState::DEVICE_THERMAL_STATE_NOMINAL:
    return "DEVICE_THERMAL_STATE_NOMINAL";

  case ::perfetto::protos::pbzero::DeviceThermalState::DEVICE_THERMAL_STATE_FAIR:
    return "DEVICE_THERMAL_STATE_FAIR";

  case ::perfetto::protos::pbzero::DeviceThermalState::DEVICE_THERMAL_STATE_SERIOUS:
    return "DEVICE_THERMAL_STATE_SERIOUS";

  case ::perfetto::protos::pbzero::DeviceThermalState::DEVICE_THERMAL_STATE_CRITICAL:
    return "DEVICE_THERMAL_STATE_CRITICAL";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

enum ChromeCompositorSchedulerActionV2 : int32_t {
  CC_SCHEDULER_ACTION_V2_UNSPECIFIED = 0,
  CC_SCHEDULER_ACTION_V2_NONE = 1,
  CC_SCHEDULER_ACTION_V2_SEND_BEGIN_MAIN_FRAME = 2,
  CC_SCHEDULER_ACTION_V2_COMMIT = 3,
  CC_SCHEDULER_ACTION_V2_POST_COMMIT = 14,
  CC_SCHEDULER_ACTION_V2_ACTIVATE_SYNC_TREE = 4,
  CC_SCHEDULER_ACTION_V2_DRAW_IF_POSSIBLE = 5,
  CC_SCHEDULER_ACTION_V2_DRAW_FORCED = 6,
  CC_SCHEDULER_ACTION_V2_DRAW_ABORT = 7,
  CC_SCHEDULER_ACTION_V2_UPDATE_DISPLAY_TREE = 15,
  CC_SCHEDULER_ACTION_V2_BEGIN_LAYER_TREE_FRAME_SINK_CREATION = 8,
  CC_SCHEDULER_ACTION_V2_PREPARE_TILES = 9,
  CC_SCHEDULER_ACTION_V2_INVALIDATE_LAYER_TREE_FRAME_SINK = 10,
  CC_SCHEDULER_ACTION_V2_PERFORM_IMPL_SIDE_INVALIDATION = 11,
  CC_SCHEDULER_ACTION_V2_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL = 12,
  CC_SCHEDULER_ACTION_V2_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON = 13,
};

constexpr ChromeCompositorSchedulerActionV2 ChromeCompositorSchedulerActionV2_MIN = ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_UNSPECIFIED;
constexpr ChromeCompositorSchedulerActionV2 ChromeCompositorSchedulerActionV2_MAX = ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_UPDATE_DISPLAY_TREE;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorSchedulerActionV2_Name(::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2 value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_UNSPECIFIED:
    return "CC_SCHEDULER_ACTION_V2_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_NONE:
    return "CC_SCHEDULER_ACTION_V2_NONE";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_SEND_BEGIN_MAIN_FRAME:
    return "CC_SCHEDULER_ACTION_V2_SEND_BEGIN_MAIN_FRAME";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_COMMIT:
    return "CC_SCHEDULER_ACTION_V2_COMMIT";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_POST_COMMIT:
    return "CC_SCHEDULER_ACTION_V2_POST_COMMIT";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_ACTIVATE_SYNC_TREE:
    return "CC_SCHEDULER_ACTION_V2_ACTIVATE_SYNC_TREE";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_DRAW_IF_POSSIBLE:
    return "CC_SCHEDULER_ACTION_V2_DRAW_IF_POSSIBLE";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_DRAW_FORCED:
    return "CC_SCHEDULER_ACTION_V2_DRAW_FORCED";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_DRAW_ABORT:
    return "CC_SCHEDULER_ACTION_V2_DRAW_ABORT";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_UPDATE_DISPLAY_TREE:
    return "CC_SCHEDULER_ACTION_V2_UPDATE_DISPLAY_TREE";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_BEGIN_LAYER_TREE_FRAME_SINK_CREATION:
    return "CC_SCHEDULER_ACTION_V2_BEGIN_LAYER_TREE_FRAME_SINK_CREATION";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_PREPARE_TILES:
    return "CC_SCHEDULER_ACTION_V2_PREPARE_TILES";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_INVALIDATE_LAYER_TREE_FRAME_SINK:
    return "CC_SCHEDULER_ACTION_V2_INVALIDATE_LAYER_TREE_FRAME_SINK";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_PERFORM_IMPL_SIDE_INVALIDATION:
    return "CC_SCHEDULER_ACTION_V2_PERFORM_IMPL_SIDE_INVALIDATION";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL:
    return "CC_SCHEDULER_ACTION_V2_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerActionV2::CC_SCHEDULER_ACTION_V2_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON:
    return "CC_SCHEDULER_ACTION_V2_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo {
enum InvokerType : int32_t {
  UNDEFINED = 0,
  CLASSIC_SCRIPT = 1,
  MODULE_SCRIPT = 2,
  USER_CALLBACK = 3,
  EVENT_HANDLER = 4,
  PROMISE_RESOLVE = 5,
  PROMISE_REJECT = 6,
};
} // namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo
using AnimationFrameScriptTimingInfo_InvokerType = perfetto_pbzero_enum_AnimationFrameScriptTimingInfo::InvokerType;


constexpr AnimationFrameScriptTimingInfo_InvokerType AnimationFrameScriptTimingInfo_InvokerType_MIN = AnimationFrameScriptTimingInfo_InvokerType::UNDEFINED;
constexpr AnimationFrameScriptTimingInfo_InvokerType AnimationFrameScriptTimingInfo_InvokerType_MAX = AnimationFrameScriptTimingInfo_InvokerType::PROMISE_REJECT;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* AnimationFrameScriptTimingInfo_InvokerType_Name(::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType::UNDEFINED:
    return "UNDEFINED";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType::CLASSIC_SCRIPT:
    return "CLASSIC_SCRIPT";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType::MODULE_SCRIPT:
    return "MODULE_SCRIPT";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType::USER_CALLBACK:
    return "USER_CALLBACK";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType::EVENT_HANDLER:
    return "EVENT_HANDLER";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType::PROMISE_RESOLVE:
    return "PROMISE_RESOLVE";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType::PROMISE_REJECT:
    return "PROMISE_REJECT";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo {
enum ThirdPartyTechnology : int32_t {
  UNSPECIFIED = 0,
  NONE = 1,
  WORD_PRESS = 2,
  GOOGLE_ANALYTICS = 3,
  GOOGLE_FONT_API = 4,
};
} // namespace perfetto_pbzero_enum_AnimationFrameScriptTimingInfo
using AnimationFrameScriptTimingInfo_ThirdPartyTechnology = perfetto_pbzero_enum_AnimationFrameScriptTimingInfo::ThirdPartyTechnology;


constexpr AnimationFrameScriptTimingInfo_ThirdPartyTechnology AnimationFrameScriptTimingInfo_ThirdPartyTechnology_MIN = AnimationFrameScriptTimingInfo_ThirdPartyTechnology::UNSPECIFIED;
constexpr AnimationFrameScriptTimingInfo_ThirdPartyTechnology AnimationFrameScriptTimingInfo_ThirdPartyTechnology_MAX = AnimationFrameScriptTimingInfo_ThirdPartyTechnology::GOOGLE_FONT_API;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* AnimationFrameScriptTimingInfo_ThirdPartyTechnology_Name(::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology value) {
  switch (value) {
  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology::UNSPECIFIED:
    return "UNSPECIFIED";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology::NONE:
    return "NONE";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology::WORD_PRESS:
    return "WORD_PRESS";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology::GOOGLE_ANALYTICS:
    return "GOOGLE_ANALYTICS";

  case ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology::GOOGLE_FONT_API:
    return "GOOGLE_FONT_API";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_WebViewStartup {
enum CallSite : int32_t {
  GET_AW_TRACING_CONTROLLER = 0,
  GET_AW_PROXY_CONTROLLER = 1,
  WEBVIEW_INSTANCE = 2,
  GET_STATICS = 3,
  GET_DEFAULT_GEOLOCATION_PERMISSIONS = 4,
  GET_DEFAULT_SERVICE_WORKER_CONTROLLER = 5,
  GET_WEB_ICON_DATABASE = 6,
  GET_DEFAULT_WEB_STORAGE = 7,
  GET_DEFAULT_WEBVIEW_DATABASE = 8,
  GET_TRACING_CONTROLLER = 9,
};
} // namespace perfetto_pbzero_enum_WebViewStartup
using WebViewStartup_CallSite = perfetto_pbzero_enum_WebViewStartup::CallSite;


constexpr WebViewStartup_CallSite WebViewStartup_CallSite_MIN = WebViewStartup_CallSite::GET_AW_TRACING_CONTROLLER;
constexpr WebViewStartup_CallSite WebViewStartup_CallSite_MAX = WebViewStartup_CallSite::GET_TRACING_CONTROLLER;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* WebViewStartup_CallSite_Name(::perfetto::protos::pbzero::WebViewStartup_CallSite value) {
  switch (value) {
  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_AW_TRACING_CONTROLLER:
    return "GET_AW_TRACING_CONTROLLER";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_AW_PROXY_CONTROLLER:
    return "GET_AW_PROXY_CONTROLLER";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::WEBVIEW_INSTANCE:
    return "WEBVIEW_INSTANCE";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_STATICS:
    return "GET_STATICS";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_DEFAULT_GEOLOCATION_PERMISSIONS:
    return "GET_DEFAULT_GEOLOCATION_PERMISSIONS";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_DEFAULT_SERVICE_WORKER_CONTROLLER:
    return "GET_DEFAULT_SERVICE_WORKER_CONTROLLER";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_WEB_ICON_DATABASE:
    return "GET_WEB_ICON_DATABASE";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_DEFAULT_WEB_STORAGE:
    return "GET_DEFAULT_WEB_STORAGE";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_DEFAULT_WEBVIEW_DATABASE:
    return "GET_DEFAULT_WEBVIEW_DATABASE";

  case ::perfetto::protos::pbzero::WebViewStartup_CallSite::GET_TRACING_CONTROLLER:
    return "GET_TRACING_CONTROLLER";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BeginImplFrameArgsV2 {
enum State : int32_t {
  BEGIN_FRAME_FINISHED = 0,
  BEGIN_FRAME_USING = 1,
};
} // namespace perfetto_pbzero_enum_BeginImplFrameArgsV2
using BeginImplFrameArgsV2_State = perfetto_pbzero_enum_BeginImplFrameArgsV2::State;


constexpr BeginImplFrameArgsV2_State BeginImplFrameArgsV2_State_MIN = BeginImplFrameArgsV2_State::BEGIN_FRAME_FINISHED;
constexpr BeginImplFrameArgsV2_State BeginImplFrameArgsV2_State_MAX = BeginImplFrameArgsV2_State::BEGIN_FRAME_USING;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BeginImplFrameArgsV2_State_Name(::perfetto::protos::pbzero::BeginImplFrameArgsV2_State value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BeginImplFrameArgsV2_State::BEGIN_FRAME_FINISHED:
    return "BEGIN_FRAME_FINISHED";

  case ::perfetto::protos::pbzero::BeginImplFrameArgsV2_State::BEGIN_FRAME_USING:
    return "BEGIN_FRAME_USING";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BeginFrameArgsV2 {
enum BeginFrameArgsType : int32_t {
  BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED = 0,
  BEGIN_FRAME_ARGS_TYPE_INVALID = 1,
  BEGIN_FRAME_ARGS_TYPE_NORMAL = 2,
  BEGIN_FRAME_ARGS_TYPE_MISSED = 3,
};
} // namespace perfetto_pbzero_enum_BeginFrameArgsV2
using BeginFrameArgsV2_BeginFrameArgsType = perfetto_pbzero_enum_BeginFrameArgsV2::BeginFrameArgsType;


constexpr BeginFrameArgsV2_BeginFrameArgsType BeginFrameArgsV2_BeginFrameArgsType_MIN = BeginFrameArgsV2_BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED;
constexpr BeginFrameArgsV2_BeginFrameArgsType BeginFrameArgsV2_BeginFrameArgsType_MAX = BeginFrameArgsV2_BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_MISSED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BeginFrameArgsV2_BeginFrameArgsType_Name(::perfetto::protos::pbzero::BeginFrameArgsV2_BeginFrameArgsType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BeginFrameArgsV2_BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED:
    return "BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED";

  case ::perfetto::protos::pbzero::BeginFrameArgsV2_BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_INVALID:
    return "BEGIN_FRAME_ARGS_TYPE_INVALID";

  case ::perfetto::protos::pbzero::BeginFrameArgsV2_BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_NORMAL:
    return "BEGIN_FRAME_ARGS_TYPE_NORMAL";

  case ::perfetto::protos::pbzero::BeginFrameArgsV2_BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_MISSED:
    return "BEGIN_FRAME_ARGS_TYPE_MISSED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2 {
enum TreePriority : int32_t {
  TREE_PRIORITY_UNSPECIFIED = 0,
  TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES = 1,
  TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY = 2,
  TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY = 3,
};
} // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2
using ChromeCompositorStateMachineV2_MinorStateV2_TreePriority = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2::TreePriority;


constexpr ChromeCompositorStateMachineV2_MinorStateV2_TreePriority ChromeCompositorStateMachineV2_MinorStateV2_TreePriority_MIN = ChromeCompositorStateMachineV2_MinorStateV2_TreePriority::TREE_PRIORITY_UNSPECIFIED;
constexpr ChromeCompositorStateMachineV2_MinorStateV2_TreePriority ChromeCompositorStateMachineV2_MinorStateV2_TreePriority_MAX = ChromeCompositorStateMachineV2_MinorStateV2_TreePriority::TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorStateMachineV2_MinorStateV2_TreePriority_Name(::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_TreePriority value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_TreePriority::TREE_PRIORITY_UNSPECIFIED:
    return "TREE_PRIORITY_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_TreePriority::TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES:
    return "TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_TreePriority::TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY:
    return "TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_TreePriority::TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY:
    return "TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2 {
enum ScrollHandlerState : int32_t {
  SCROLL_HANDLER_UNSPECIFIED = 0,
  SCROLL_AFFECTS_SCROLL_HANDLER = 1,
  SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER = 2,
};
} // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2
using ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MinorStateV2::ScrollHandlerState;


constexpr ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState_MIN = ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState::SCROLL_HANDLER_UNSPECIFIED;
constexpr ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState_MAX = ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState::SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState_Name(::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState::SCROLL_HANDLER_UNSPECIFIED:
    return "SCROLL_HANDLER_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState::SCROLL_AFFECTS_SCROLL_HANDLER:
    return "SCROLL_AFFECTS_SCROLL_HANDLER";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState::SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER:
    return "SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum BeginImplFrameState : int32_t {
  BEGIN_IMPL_FRAME_UNSPECIFIED = 0,
  BEGIN_IMPL_FRAME_IDLE = 1,
  BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME = 2,
  BEGIN_IMPL_FRAME_INSIDE_DEADLINE = 3,
};
} // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::BeginImplFrameState;


constexpr ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState_MIN = ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState::BEGIN_IMPL_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState_MAX = ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState::BEGIN_IMPL_FRAME_INSIDE_DEADLINE;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState_Name(::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState::BEGIN_IMPL_FRAME_UNSPECIFIED:
    return "BEGIN_IMPL_FRAME_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState::BEGIN_IMPL_FRAME_IDLE:
    return "BEGIN_IMPL_FRAME_IDLE";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState::BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME:
    return "BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState::BEGIN_IMPL_FRAME_INSIDE_DEADLINE:
    return "BEGIN_IMPL_FRAME_INSIDE_DEADLINE";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum BeginMainFrameState : int32_t {
  BEGIN_MAIN_FRAME_UNSPECIFIED = 0,
  BEGIN_MAIN_FRAME_IDLE = 1,
  BEGIN_MAIN_FRAME_SENT = 2,
  BEGIN_MAIN_FRAME_READY_TO_COMMIT = 3,
};
} // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::BeginMainFrameState;


constexpr ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState_MIN = ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState::BEGIN_MAIN_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState_MAX = ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState::BEGIN_MAIN_FRAME_READY_TO_COMMIT;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState_Name(::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState::BEGIN_MAIN_FRAME_UNSPECIFIED:
    return "BEGIN_MAIN_FRAME_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState::BEGIN_MAIN_FRAME_IDLE:
    return "BEGIN_MAIN_FRAME_IDLE";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState::BEGIN_MAIN_FRAME_SENT:
    return "BEGIN_MAIN_FRAME_SENT";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState::BEGIN_MAIN_FRAME_READY_TO_COMMIT:
    return "BEGIN_MAIN_FRAME_READY_TO_COMMIT";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum LayerTreeFrameSinkState : int32_t {
  LAYER_TREE_FRAME_UNSPECIFIED = 0,
  LAYER_TREE_FRAME_NONE = 1,
  LAYER_TREE_FRAME_ACTIVE = 2,
  LAYER_TREE_FRAME_CREATING = 3,
  LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT = 4,
  LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION = 5,
};
} // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::LayerTreeFrameSinkState;


constexpr ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState_MIN = ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_UNSPECIFIED;
constexpr ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState_MAX = ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState_Name(::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_UNSPECIFIED:
    return "LAYER_TREE_FRAME_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_NONE:
    return "LAYER_TREE_FRAME_NONE";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_ACTIVE:
    return "LAYER_TREE_FRAME_ACTIVE";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_CREATING:
    return "LAYER_TREE_FRAME_CREATING";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT:
    return "LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION:
    return "LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2 {
enum ForcedRedrawOnTimeoutState : int32_t {
  FORCED_REDRAW_UNSPECIFIED = 0,
  FORCED_REDRAW_IDLE = 1,
  FORCED_REDRAW_WAITING_FOR_COMMIT = 2,
  FORCED_REDRAW_WAITING_FOR_ACTIVATION = 3,
  FORCED_REDRAW_WAITING_FOR_DRAW = 4,
};
} // namespace perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2
using ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState = perfetto_pbzero_enum_ChromeCompositorStateMachineV2_MajorStateV2::ForcedRedrawOnTimeoutState;


constexpr ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState_MIN = ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState::FORCED_REDRAW_UNSPECIFIED;
constexpr ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState_MAX = ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState::FORCED_REDRAW_WAITING_FOR_DRAW;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState_Name(::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState::FORCED_REDRAW_UNSPECIFIED:
    return "FORCED_REDRAW_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState::FORCED_REDRAW_IDLE:
    return "FORCED_REDRAW_IDLE";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState::FORCED_REDRAW_WAITING_FOR_COMMIT:
    return "FORCED_REDRAW_WAITING_FOR_COMMIT";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState::FORCED_REDRAW_WAITING_FOR_ACTIVATION:
    return "FORCED_REDRAW_WAITING_FOR_ACTIVATION";

  case ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState::FORCED_REDRAW_WAITING_FOR_DRAW:
    return "FORCED_REDRAW_WAITING_FOR_DRAW";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeCompositorSchedulerStateV2 {
enum BeginImplFrameDeadlineMode : int32_t {
  DEADLINE_MODE_UNSPECIFIED = 0,
  DEADLINE_MODE_NONE = 1,
  DEADLINE_MODE_IMMEDIATE = 2,
  DEADLINE_MODE_REGULAR = 3,
  DEADLINE_MODE_LATE = 4,
  DEADLINE_MODE_BLOCKED = 5,
  DEADLINE_MODE_WAIT_FOR_SCROLL = 6,
};
} // namespace perfetto_pbzero_enum_ChromeCompositorSchedulerStateV2
using ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode = perfetto_pbzero_enum_ChromeCompositorSchedulerStateV2::BeginImplFrameDeadlineMode;


constexpr ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode_MIN = ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_UNSPECIFIED;
constexpr ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode_MAX = ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_WAIT_FOR_SCROLL;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode_Name(::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_UNSPECIFIED:
    return "DEADLINE_MODE_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_NONE:
    return "DEADLINE_MODE_NONE";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_IMMEDIATE:
    return "DEADLINE_MODE_IMMEDIATE";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_REGULAR:
    return "DEADLINE_MODE_REGULAR";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_LATE:
    return "DEADLINE_MODE_LATE";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_BLOCKED:
    return "DEADLINE_MODE_BLOCKED";

  case ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode::DEADLINE_MODE_WAIT_FOR_SCROLL:
    return "DEADLINE_MODE_WAIT_FOR_SCROLL";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_WebContentInteraction {
enum Type : int32_t {
  INTERACTION_UNSPECIFIED = 0,
  INTERACTION_KEYBOARD = 1,
  INTERACTION_CLICK_TAP = 2,
  INTERACTION_DRAG = 3,
};
} // namespace perfetto_pbzero_enum_WebContentInteraction
using WebContentInteraction_Type = perfetto_pbzero_enum_WebContentInteraction::Type;


constexpr WebContentInteraction_Type WebContentInteraction_Type_MIN = WebContentInteraction_Type::INTERACTION_UNSPECIFIED;
constexpr WebContentInteraction_Type WebContentInteraction_Type_MAX = WebContentInteraction_Type::INTERACTION_DRAG;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* WebContentInteraction_Type_Name(::perfetto::protos::pbzero::WebContentInteraction_Type value) {
  switch (value) {
  case ::perfetto::protos::pbzero::WebContentInteraction_Type::INTERACTION_UNSPECIFIED:
    return "INTERACTION_UNSPECIFIED";

  case ::perfetto::protos::pbzero::WebContentInteraction_Type::INTERACTION_KEYBOARD:
    return "INTERACTION_KEYBOARD";

  case ::perfetto::protos::pbzero::WebContentInteraction_Type::INTERACTION_CLICK_TAP:
    return "INTERACTION_CLICK_TAP";

  case ::perfetto::protos::pbzero::WebContentInteraction_Type::INTERACTION_DRAG:
    return "INTERACTION_DRAG";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_StartUp {
enum LaunchCauseType : int32_t {
  OTHER = 0,
  CUSTOM_TAB = 1,
  TWA = 2,
  RECENTS = 3,
  RECENTS_OR_BACK = 4,
  FOREGROUND_WHEN_LOCKED = 5,
  MAIN_LAUNCHER_ICON = 6,
  MAIN_LAUNCHER_ICON_SHORTCUT = 7,
  HOME_SCREEN_WIDGET = 8,
  OPEN_IN_BROWSER_FROM_MENU = 9,
  EXTERNAL_SEARCH_ACTION_INTENT = 10,
  NOTIFICATION = 11,
  EXTERNAL_VIEW_INTENT = 12,
  OTHER_CHROME = 13,
  WEBAPK_CHROME_DISTRIBUTOR = 14,
  WEBAPK_OTHER_DISTRIBUTOR = 15,
  HOME_SCREEN_SHORTCUT = 16,
  SHARE_INTENT = 17,
  NFC = 18,
};
} // namespace perfetto_pbzero_enum_StartUp
using StartUp_LaunchCauseType = perfetto_pbzero_enum_StartUp::LaunchCauseType;


constexpr StartUp_LaunchCauseType StartUp_LaunchCauseType_MIN = StartUp_LaunchCauseType::OTHER;
constexpr StartUp_LaunchCauseType StartUp_LaunchCauseType_MAX = StartUp_LaunchCauseType::NFC;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* StartUp_LaunchCauseType_Name(::perfetto::protos::pbzero::StartUp_LaunchCauseType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::OTHER:
    return "OTHER";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::CUSTOM_TAB:
    return "CUSTOM_TAB";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::TWA:
    return "TWA";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::RECENTS:
    return "RECENTS";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::RECENTS_OR_BACK:
    return "RECENTS_OR_BACK";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::FOREGROUND_WHEN_LOCKED:
    return "FOREGROUND_WHEN_LOCKED";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::MAIN_LAUNCHER_ICON:
    return "MAIN_LAUNCHER_ICON";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::MAIN_LAUNCHER_ICON_SHORTCUT:
    return "MAIN_LAUNCHER_ICON_SHORTCUT";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::HOME_SCREEN_WIDGET:
    return "HOME_SCREEN_WIDGET";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::OPEN_IN_BROWSER_FROM_MENU:
    return "OPEN_IN_BROWSER_FROM_MENU";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::EXTERNAL_SEARCH_ACTION_INTENT:
    return "EXTERNAL_SEARCH_ACTION_INTENT";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::NOTIFICATION:
    return "NOTIFICATION";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::EXTERNAL_VIEW_INTENT:
    return "EXTERNAL_VIEW_INTENT";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::OTHER_CHROME:
    return "OTHER_CHROME";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::WEBAPK_CHROME_DISTRIBUTOR:
    return "WEBAPK_CHROME_DISTRIBUTOR";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::WEBAPK_OTHER_DISTRIBUTOR:
    return "WEBAPK_OTHER_DISTRIBUTOR";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::HOME_SCREEN_SHORTCUT:
    return "HOME_SCREEN_SHORTCUT";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::SHARE_INTENT:
    return "SHARE_INTENT";

  case ::perfetto::protos::pbzero::StartUp_LaunchCauseType::NFC:
    return "NFC";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_LibunwindstackUnwinder {
enum ErrorCode : int32_t {
  ERROR_NONE = 0,
  ERROR_MEMORY_INVALID = 1,
  ERROR_UNWIND_INFO = 2,
  ERROR_UNSUPPORTED = 3,
  ERROR_INVALID_MAP = 4,
  ERROR_MAX_FRAMES_EXCEEDED = 5,
  ERROR_REPEATED_FRAME = 6,
  ERROR_INVALID_ELF = 7,
  ERROR_THREAD_DOES_NOT_EXIST = 8,
  ERROR_THREAD_TIMEOUT = 9,
  ERROR_SYSTEM_CALL = 10,
  ERROR_BAD_ARCH = 11,
  ERROR_MAPS_PARSE = 12,
  ERROR_INVALID_PARAMETER_LIBUNWINDSTACK = 13,
  ERROR_PTRACE_CALL = 14,
};
} // namespace perfetto_pbzero_enum_LibunwindstackUnwinder
using LibunwindstackUnwinder_ErrorCode = perfetto_pbzero_enum_LibunwindstackUnwinder::ErrorCode;


constexpr LibunwindstackUnwinder_ErrorCode LibunwindstackUnwinder_ErrorCode_MIN = LibunwindstackUnwinder_ErrorCode::ERROR_NONE;
constexpr LibunwindstackUnwinder_ErrorCode LibunwindstackUnwinder_ErrorCode_MAX = LibunwindstackUnwinder_ErrorCode::ERROR_PTRACE_CALL;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* LibunwindstackUnwinder_ErrorCode_Name(::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode value) {
  switch (value) {
  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_NONE:
    return "ERROR_NONE";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_MEMORY_INVALID:
    return "ERROR_MEMORY_INVALID";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_UNWIND_INFO:
    return "ERROR_UNWIND_INFO";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_UNSUPPORTED:
    return "ERROR_UNSUPPORTED";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_INVALID_MAP:
    return "ERROR_INVALID_MAP";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_MAX_FRAMES_EXCEEDED:
    return "ERROR_MAX_FRAMES_EXCEEDED";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_REPEATED_FRAME:
    return "ERROR_REPEATED_FRAME";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_INVALID_ELF:
    return "ERROR_INVALID_ELF";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_THREAD_DOES_NOT_EXIST:
    return "ERROR_THREAD_DOES_NOT_EXIST";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_THREAD_TIMEOUT:
    return "ERROR_THREAD_TIMEOUT";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_SYSTEM_CALL:
    return "ERROR_SYSTEM_CALL";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_BAD_ARCH:
    return "ERROR_BAD_ARCH";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_MAPS_PARSE:
    return "ERROR_MAPS_PARSE";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_INVALID_PARAMETER_LIBUNWINDSTACK:
    return "ERROR_INVALID_PARAMETER_LIBUNWINDSTACK";

  case ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode::ERROR_PTRACE_CALL:
    return "ERROR_PTRACE_CALL";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeGraphicsPipeline {
enum StepName : int32_t {
  STEP_UNKNOWN = 0,
  STEP_DID_NOT_PRODUCE_FRAME = 1,
  STEP_GENERATE_COMPOSITOR_FRAME = 2,
  STEP_GENERATE_RENDER_PASS = 3,
  STEP_ISSUE_BEGIN_FRAME = 4,
  STEP_RECEIVE_COMPOSITOR_FRAME = 5,
  STEP_RECEIVE_BEGIN_FRAME = 6,
  STEP_RECEIVE_BEGIN_FRAME_DISCARD = 7,
  STEP_SEND_BEGIN_MAIN_FRAME = 8,
  STEP_SUBMIT_COMPOSITOR_FRAME = 9,
  STEP_SURFACE_AGGREGATION = 10,
  STEP_SEND_BUFFER_SWAP = 11,
  STEP_BUFFER_SWAP_POST_SUBMIT = 12,
  STEP_FINISH_BUFFER_SWAP = 13,
  STEP_SWAP_BUFFERS_ACK = 14,
  STEP_EXO_CONSTRUCT_COMPOSITOR_FRAME = 15,
  STEP_EXO_SUBMIT_COMPOSITOR_FRAME = 16,
  STEP_EXO_DISCARD_COMPOSITOR_FRAME = 17,
  STEP_BACKEND_SEND_BUFFER_SWAP = 18,
  STEP_BACKEND_SEND_BUFFER_POST_SUBMIT = 19,
  STEP_BACKEND_FINISH_BUFFER_SWAP = 20,
};
} // namespace perfetto_pbzero_enum_ChromeGraphicsPipeline
using ChromeGraphicsPipeline_StepName = perfetto_pbzero_enum_ChromeGraphicsPipeline::StepName;


constexpr ChromeGraphicsPipeline_StepName ChromeGraphicsPipeline_StepName_MIN = ChromeGraphicsPipeline_StepName::STEP_UNKNOWN;
constexpr ChromeGraphicsPipeline_StepName ChromeGraphicsPipeline_StepName_MAX = ChromeGraphicsPipeline_StepName::STEP_BACKEND_FINISH_BUFFER_SWAP;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeGraphicsPipeline_StepName_Name(::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_UNKNOWN:
    return "STEP_UNKNOWN";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_DID_NOT_PRODUCE_FRAME:
    return "STEP_DID_NOT_PRODUCE_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_GENERATE_COMPOSITOR_FRAME:
    return "STEP_GENERATE_COMPOSITOR_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_GENERATE_RENDER_PASS:
    return "STEP_GENERATE_RENDER_PASS";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_ISSUE_BEGIN_FRAME:
    return "STEP_ISSUE_BEGIN_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_RECEIVE_COMPOSITOR_FRAME:
    return "STEP_RECEIVE_COMPOSITOR_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_RECEIVE_BEGIN_FRAME:
    return "STEP_RECEIVE_BEGIN_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_RECEIVE_BEGIN_FRAME_DISCARD:
    return "STEP_RECEIVE_BEGIN_FRAME_DISCARD";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_SEND_BEGIN_MAIN_FRAME:
    return "STEP_SEND_BEGIN_MAIN_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_SUBMIT_COMPOSITOR_FRAME:
    return "STEP_SUBMIT_COMPOSITOR_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_SURFACE_AGGREGATION:
    return "STEP_SURFACE_AGGREGATION";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_SEND_BUFFER_SWAP:
    return "STEP_SEND_BUFFER_SWAP";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_BUFFER_SWAP_POST_SUBMIT:
    return "STEP_BUFFER_SWAP_POST_SUBMIT";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_FINISH_BUFFER_SWAP:
    return "STEP_FINISH_BUFFER_SWAP";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_SWAP_BUFFERS_ACK:
    return "STEP_SWAP_BUFFERS_ACK";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_EXO_CONSTRUCT_COMPOSITOR_FRAME:
    return "STEP_EXO_CONSTRUCT_COMPOSITOR_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_EXO_SUBMIT_COMPOSITOR_FRAME:
    return "STEP_EXO_SUBMIT_COMPOSITOR_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_EXO_DISCARD_COMPOSITOR_FRAME:
    return "STEP_EXO_DISCARD_COMPOSITOR_FRAME";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_BACKEND_SEND_BUFFER_SWAP:
    return "STEP_BACKEND_SEND_BUFFER_SWAP";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_BACKEND_SEND_BUFFER_POST_SUBMIT:
    return "STEP_BACKEND_SEND_BUFFER_POST_SUBMIT";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName::STEP_BACKEND_FINISH_BUFFER_SWAP:
    return "STEP_BACKEND_FINISH_BUFFER_SWAP";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeGraphicsPipeline {
enum FrameSkippedReason : int32_t {
  SKIPPED_REASON_UNKNOWN = 0,
  SKIPPED_REASON_RECOVER_LATENCY = 1,
  SKIPPED_REASON_NO_DAMAGE = 2,
  SKIPPED_REASON_WAITING_ON_MAIN = 3,
  SKIPPED_REASON_DRAW_THROTTLED = 4,
};
} // namespace perfetto_pbzero_enum_ChromeGraphicsPipeline
using ChromeGraphicsPipeline_FrameSkippedReason = perfetto_pbzero_enum_ChromeGraphicsPipeline::FrameSkippedReason;


constexpr ChromeGraphicsPipeline_FrameSkippedReason ChromeGraphicsPipeline_FrameSkippedReason_MIN = ChromeGraphicsPipeline_FrameSkippedReason::SKIPPED_REASON_UNKNOWN;
constexpr ChromeGraphicsPipeline_FrameSkippedReason ChromeGraphicsPipeline_FrameSkippedReason_MAX = ChromeGraphicsPipeline_FrameSkippedReason::SKIPPED_REASON_DRAW_THROTTLED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeGraphicsPipeline_FrameSkippedReason_Name(::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason::SKIPPED_REASON_UNKNOWN:
    return "SKIPPED_REASON_UNKNOWN";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason::SKIPPED_REASON_RECOVER_LATENCY:
    return "SKIPPED_REASON_RECOVER_LATENCY";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason::SKIPPED_REASON_NO_DAMAGE:
    return "SKIPPED_REASON_NO_DAMAGE";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason::SKIPPED_REASON_WAITING_ON_MAIN:
    return "SKIPPED_REASON_WAITING_ON_MAIN";

  case ::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason::SKIPPED_REASON_DRAW_THROTTLED:
    return "SKIPPED_REASON_DRAW_THROTTLED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_TabSwitchMeasurement {
enum Result : int32_t {
  RESULT_UNSPECIFIED = 0,
  RESULT_SUCCESS = 1,
  RESULT_INCOMPLETE = 2,
  RESULT_MISSED_TAB_HIDE = 3,
};
} // namespace perfetto_pbzero_enum_TabSwitchMeasurement
using TabSwitchMeasurement_Result = perfetto_pbzero_enum_TabSwitchMeasurement::Result;


constexpr TabSwitchMeasurement_Result TabSwitchMeasurement_Result_MIN = TabSwitchMeasurement_Result::RESULT_UNSPECIFIED;
constexpr TabSwitchMeasurement_Result TabSwitchMeasurement_Result_MAX = TabSwitchMeasurement_Result::RESULT_MISSED_TAB_HIDE;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* TabSwitchMeasurement_Result_Name(::perfetto::protos::pbzero::TabSwitchMeasurement_Result value) {
  switch (value) {
  case ::perfetto::protos::pbzero::TabSwitchMeasurement_Result::RESULT_UNSPECIFIED:
    return "RESULT_UNSPECIFIED";

  case ::perfetto::protos::pbzero::TabSwitchMeasurement_Result::RESULT_SUCCESS:
    return "RESULT_SUCCESS";

  case ::perfetto::protos::pbzero::TabSwitchMeasurement_Result::RESULT_INCOMPLETE:
    return "RESULT_INCOMPLETE";

  case ::perfetto::protos::pbzero::TabSwitchMeasurement_Result::RESULT_MISSED_TAB_HIDE:
    return "RESULT_MISSED_TAB_HIDE";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_TabSwitchMeasurement {
enum TabState : int32_t {
  STATE_UNSPECIFIED = 0,
  STATE_WITH_SAVED_FRAMES = 1,
  STATE_LOADED_NO_SAVED_FRAMES = 2,
  STATE_NOT_LOADED_NO_SAVED_FRAMES = 3,
};
} // namespace perfetto_pbzero_enum_TabSwitchMeasurement
using TabSwitchMeasurement_TabState = perfetto_pbzero_enum_TabSwitchMeasurement::TabState;


constexpr TabSwitchMeasurement_TabState TabSwitchMeasurement_TabState_MIN = TabSwitchMeasurement_TabState::STATE_UNSPECIFIED;
constexpr TabSwitchMeasurement_TabState TabSwitchMeasurement_TabState_MAX = TabSwitchMeasurement_TabState::STATE_NOT_LOADED_NO_SAVED_FRAMES;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* TabSwitchMeasurement_TabState_Name(::perfetto::protos::pbzero::TabSwitchMeasurement_TabState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::TabSwitchMeasurement_TabState::STATE_UNSPECIFIED:
    return "STATE_UNSPECIFIED";

  case ::perfetto::protos::pbzero::TabSwitchMeasurement_TabState::STATE_WITH_SAVED_FRAMES:
    return "STATE_WITH_SAVED_FRAMES";

  case ::perfetto::protos::pbzero::TabSwitchMeasurement_TabState::STATE_LOADED_NO_SAVED_FRAMES:
    return "STATE_LOADED_NO_SAVED_FRAMES";

  case ::perfetto::protos::pbzero::TabSwitchMeasurement_TabState::STATE_NOT_LOADED_NO_SAVED_FRAMES:
    return "STATE_NOT_LOADED_NO_SAVED_FRAMES";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_FontLookup {
enum FontLookupType : int32_t {
  FONT_LOOKUP_UNKNOWN_TYPE = 0,
  FONT_LOOKUP_UNIQUE_OR_FAMILY_NAME = 1,
  FONT_LOOKUP_UNIQUE_NAME_ONLY = 2,
};
} // namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_FontLookup
using BlinkHighEntropyAPI_FontLookup_FontLookupType = perfetto_pbzero_enum_BlinkHighEntropyAPI_FontLookup::FontLookupType;


constexpr BlinkHighEntropyAPI_FontLookup_FontLookupType BlinkHighEntropyAPI_FontLookup_FontLookupType_MIN = BlinkHighEntropyAPI_FontLookup_FontLookupType::FONT_LOOKUP_UNKNOWN_TYPE;
constexpr BlinkHighEntropyAPI_FontLookup_FontLookupType BlinkHighEntropyAPI_FontLookup_FontLookupType_MAX = BlinkHighEntropyAPI_FontLookup_FontLookupType::FONT_LOOKUP_UNIQUE_NAME_ONLY;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BlinkHighEntropyAPI_FontLookup_FontLookupType_Name(::perfetto::protos::pbzero::BlinkHighEntropyAPI_FontLookup_FontLookupType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_FontLookup_FontLookupType::FONT_LOOKUP_UNKNOWN_TYPE:
    return "FONT_LOOKUP_UNKNOWN_TYPE";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_FontLookup_FontLookupType::FONT_LOOKUP_UNIQUE_OR_FAMILY_NAME:
    return "FONT_LOOKUP_UNIQUE_OR_FAMILY_NAME";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_FontLookup_FontLookupType::FONT_LOOKUP_UNIQUE_NAME_ONLY:
    return "FONT_LOOKUP_UNIQUE_NAME_ONLY";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_JSFunctionArgument {
enum ArgumentType : int32_t {
  UNKNOWN_TYPE = 0,
  NULL_TYPE = 1,
  UNDEFINED = 2,
  BIGINT = 3,
  BOOLEAN = 4,
  FUNCTION = 5,
  NUMBER = 6,
  STRING = 7,
  SYMBOL = 8,
  OBJECT = 9,
};
} // namespace perfetto_pbzero_enum_BlinkHighEntropyAPI_JSFunctionArgument
using BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType = perfetto_pbzero_enum_BlinkHighEntropyAPI_JSFunctionArgument::ArgumentType;


constexpr BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType_MIN = BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::UNKNOWN_TYPE;
constexpr BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType_MAX = BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::OBJECT;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType_Name(::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::UNKNOWN_TYPE:
    return "UNKNOWN_TYPE";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::NULL_TYPE:
    return "NULL_TYPE";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::UNDEFINED:
    return "UNDEFINED";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::BIGINT:
    return "BIGINT";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::BOOLEAN:
    return "BOOLEAN";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::FUNCTION:
    return "FUNCTION";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::NUMBER:
    return "NUMBER";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::STRING:
    return "STRING";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::SYMBOL:
    return "SYMBOL";

  case ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType::OBJECT:
    return "OBJECT";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BlinkExecutionContext {
enum ContextType : int32_t {
  UNKNOWN_CONTEXT = 0,
  WINDOW = 1,
  WORKLET = 2,
  DEDICATED_WORKER = 3,
  SHARED_WORKER = 4,
  SERVICE_WORKER = 5,
};
} // namespace perfetto_pbzero_enum_BlinkExecutionContext
using BlinkExecutionContext_ContextType = perfetto_pbzero_enum_BlinkExecutionContext::ContextType;


constexpr BlinkExecutionContext_ContextType BlinkExecutionContext_ContextType_MIN = BlinkExecutionContext_ContextType::UNKNOWN_CONTEXT;
constexpr BlinkExecutionContext_ContextType BlinkExecutionContext_ContextType_MAX = BlinkExecutionContext_ContextType::SERVICE_WORKER;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BlinkExecutionContext_ContextType_Name(::perfetto::protos::pbzero::BlinkExecutionContext_ContextType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType::UNKNOWN_CONTEXT:
    return "UNKNOWN_CONTEXT";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType::WINDOW:
    return "WINDOW";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType::WORKLET:
    return "WORKLET";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType::DEDICATED_WORKER:
    return "DEDICATED_WORKER";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType::SHARED_WORKER:
    return "SHARED_WORKER";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType::SERVICE_WORKER:
    return "SERVICE_WORKER";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BlinkExecutionContext {
enum WorldType : int32_t {
  WORLD_UNKNOWN = 0,
  WORLD_MAIN = 1,
  WORLD_ISOLATED = 2,
  WORLD_INSPECTOR_ISOLATED = 3,
  WORLD_REG_EXP = 4,
  WORLD_FOR_V8_CONTEXT_SNAPSHOT_NON_MAIN = 5,
  WORLD_WORKER = 6,
  WORLD_SHADOW_REALM = 7,
};
} // namespace perfetto_pbzero_enum_BlinkExecutionContext
using BlinkExecutionContext_WorldType = perfetto_pbzero_enum_BlinkExecutionContext::WorldType;


constexpr BlinkExecutionContext_WorldType BlinkExecutionContext_WorldType_MIN = BlinkExecutionContext_WorldType::WORLD_UNKNOWN;
constexpr BlinkExecutionContext_WorldType BlinkExecutionContext_WorldType_MAX = BlinkExecutionContext_WorldType::WORLD_SHADOW_REALM;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BlinkExecutionContext_WorldType_Name(::perfetto::protos::pbzero::BlinkExecutionContext_WorldType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_UNKNOWN:
    return "WORLD_UNKNOWN";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_MAIN:
    return "WORLD_MAIN";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_ISOLATED:
    return "WORLD_ISOLATED";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_INSPECTOR_ISOLATED:
    return "WORLD_INSPECTOR_ISOLATED";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_REG_EXP:
    return "WORLD_REG_EXP";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_FOR_V8_CONTEXT_SNAPSHOT_NON_MAIN:
    return "WORLD_FOR_V8_CONTEXT_SNAPSHOT_NON_MAIN";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_WORKER:
    return "WORLD_WORKER";

  case ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType::WORLD_SHADOW_REALM:
    return "WORLD_SHADOW_REALM";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_AndroidToolbar {
enum BlockCaptureReason : int32_t {
  BLOCKED_UNKNOWN = 0,
  BLOCKED_TOOLBAR_OR_RESULT_NULL = 1,
  BLOCKED_VIEW_NOT_DIRTY = 2,
  BLOCKED_SNAPSHOT_SAME = 3,
  BLOCKED_URL_BAR_HAS_FOCUS = 4,
  BLOCKED_URL_BAR_FOCUS_IN_PROGRESS = 5,
  BLOCKED_OPTIONAL_BUTTON_ANIMATION_IN_PROGRESS = 6,
  BLOCKED_STATUS_ICON_ANIMATION_IN_PROGRESS = 7,
  BLOCKED_SCROLL_ABLATION = 8,
  BLOCKED_BROWSER_CONTROLS_LOCKED = 9,
  BLOCKED_TAB_SWITCHER_MODE = 10,
  BLOCKED_COMPOSITOR_IN_MOTION = 11,
  BLOCKED_NTP_Y_TRANSLATION = 12,
  BLOCKED_FULLSCREEN = 13,
};
} // namespace perfetto_pbzero_enum_AndroidToolbar
using AndroidToolbar_BlockCaptureReason = perfetto_pbzero_enum_AndroidToolbar::BlockCaptureReason;


constexpr AndroidToolbar_BlockCaptureReason AndroidToolbar_BlockCaptureReason_MIN = AndroidToolbar_BlockCaptureReason::BLOCKED_UNKNOWN;
constexpr AndroidToolbar_BlockCaptureReason AndroidToolbar_BlockCaptureReason_MAX = AndroidToolbar_BlockCaptureReason::BLOCKED_FULLSCREEN;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* AndroidToolbar_BlockCaptureReason_Name(::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason value) {
  switch (value) {
  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_UNKNOWN:
    return "BLOCKED_UNKNOWN";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_TOOLBAR_OR_RESULT_NULL:
    return "BLOCKED_TOOLBAR_OR_RESULT_NULL";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_VIEW_NOT_DIRTY:
    return "BLOCKED_VIEW_NOT_DIRTY";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_SNAPSHOT_SAME:
    return "BLOCKED_SNAPSHOT_SAME";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_URL_BAR_HAS_FOCUS:
    return "BLOCKED_URL_BAR_HAS_FOCUS";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_URL_BAR_FOCUS_IN_PROGRESS:
    return "BLOCKED_URL_BAR_FOCUS_IN_PROGRESS";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_OPTIONAL_BUTTON_ANIMATION_IN_PROGRESS:
    return "BLOCKED_OPTIONAL_BUTTON_ANIMATION_IN_PROGRESS";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_STATUS_ICON_ANIMATION_IN_PROGRESS:
    return "BLOCKED_STATUS_ICON_ANIMATION_IN_PROGRESS";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_SCROLL_ABLATION:
    return "BLOCKED_SCROLL_ABLATION";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_BROWSER_CONTROLS_LOCKED:
    return "BLOCKED_BROWSER_CONTROLS_LOCKED";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_TAB_SWITCHER_MODE:
    return "BLOCKED_TAB_SWITCHER_MODE";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_COMPOSITOR_IN_MOTION:
    return "BLOCKED_COMPOSITOR_IN_MOTION";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_NTP_Y_TRANSLATION:
    return "BLOCKED_NTP_Y_TRANSLATION";

  case ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason::BLOCKED_FULLSCREEN:
    return "BLOCKED_FULLSCREEN";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_AndroidToolbar {
enum AllowCaptureReason : int32_t {
  ALLOWED_UNKNOWN = 0,
  ALLOWED_FORCE_CAPTURE = 1,
  ALLOWED_SNAPSHOT_DIFFERENCE = 2,
};
} // namespace perfetto_pbzero_enum_AndroidToolbar
using AndroidToolbar_AllowCaptureReason = perfetto_pbzero_enum_AndroidToolbar::AllowCaptureReason;


constexpr AndroidToolbar_AllowCaptureReason AndroidToolbar_AllowCaptureReason_MIN = AndroidToolbar_AllowCaptureReason::ALLOWED_UNKNOWN;
constexpr AndroidToolbar_AllowCaptureReason AndroidToolbar_AllowCaptureReason_MAX = AndroidToolbar_AllowCaptureReason::ALLOWED_SNAPSHOT_DIFFERENCE;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* AndroidToolbar_AllowCaptureReason_Name(::perfetto::protos::pbzero::AndroidToolbar_AllowCaptureReason value) {
  switch (value) {
  case ::perfetto::protos::pbzero::AndroidToolbar_AllowCaptureReason::ALLOWED_UNKNOWN:
    return "ALLOWED_UNKNOWN";

  case ::perfetto::protos::pbzero::AndroidToolbar_AllowCaptureReason::ALLOWED_FORCE_CAPTURE:
    return "ALLOWED_FORCE_CAPTURE";

  case ::perfetto::protos::pbzero::AndroidToolbar_AllowCaptureReason::ALLOWED_SNAPSHOT_DIFFERENCE:
    return "ALLOWED_SNAPSHOT_DIFFERENCE";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_AndroidToolbar {
enum SnapshotDifference : int32_t {
  DIFF_NONE = 0,
  DIFF_NULL = 1,
  DIFF_TINT = 2,
  DIFF_TAB_COUNT = 3,
  DIFF_OPTIONAL_BUTTON = 4,
  DIFF_VISUAL_STATE = 5,
  DIFF_SECURITY_ICON = 6,
  DIFF_SHOWING_UPDATE_BADGE = 7,
  DIFF_PAINT_PREVIEW = 8,
  DIFF_PROGRESS = 9,
  DIFF_LOCATION_BAR_WIDTH = 10,
  DIFF_URL_TEXT = 11,
  DIFF_HOME_BUTTON = 12,
  DIFF_TITLE_TEXT = 13,
  DIFF_CCT_ANIMATION = 14,
  DIFF_BOOKMARK_BUTTON = 15,
  DIFF_BACK_BUTTON = 16,
  DIFF_FORWARD_BUTTON = 17,
  DIFF_RELOAD_BUTTON = 18,
};
} // namespace perfetto_pbzero_enum_AndroidToolbar
using AndroidToolbar_SnapshotDifference = perfetto_pbzero_enum_AndroidToolbar::SnapshotDifference;


constexpr AndroidToolbar_SnapshotDifference AndroidToolbar_SnapshotDifference_MIN = AndroidToolbar_SnapshotDifference::DIFF_NONE;
constexpr AndroidToolbar_SnapshotDifference AndroidToolbar_SnapshotDifference_MAX = AndroidToolbar_SnapshotDifference::DIFF_RELOAD_BUTTON;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* AndroidToolbar_SnapshotDifference_Name(::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference value) {
  switch (value) {
  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_NONE:
    return "DIFF_NONE";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_NULL:
    return "DIFF_NULL";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_TINT:
    return "DIFF_TINT";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_TAB_COUNT:
    return "DIFF_TAB_COUNT";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_OPTIONAL_BUTTON:
    return "DIFF_OPTIONAL_BUTTON";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_VISUAL_STATE:
    return "DIFF_VISUAL_STATE";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_SECURITY_ICON:
    return "DIFF_SECURITY_ICON";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_SHOWING_UPDATE_BADGE:
    return "DIFF_SHOWING_UPDATE_BADGE";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_PAINT_PREVIEW:
    return "DIFF_PAINT_PREVIEW";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_PROGRESS:
    return "DIFF_PROGRESS";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_LOCATION_BAR_WIDTH:
    return "DIFF_LOCATION_BAR_WIDTH";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_URL_TEXT:
    return "DIFF_URL_TEXT";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_HOME_BUTTON:
    return "DIFF_HOME_BUTTON";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_TITLE_TEXT:
    return "DIFF_TITLE_TEXT";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_CCT_ANIMATION:
    return "DIFF_CCT_ANIMATION";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_BOOKMARK_BUTTON:
    return "DIFF_BOOKMARK_BUTTON";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_BACK_BUTTON:
    return "DIFF_BACK_BUTTON";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_FORWARD_BUTTON:
    return "DIFF_FORWARD_BUTTON";

  case ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference::DIFF_RELOAD_BUTTON:
    return "DIFF_RELOAD_BUTTON";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_SequenceManagerTask {
enum Priority : int32_t {
  UNKNOWN = 0,
  CONTROL_PRIORITY = 1,
  HIGHEST_PRIORITY = 2,
  VERY_HIGH_PRIORITY = 3,
  HIGH_PRIORITY = 4,
  NORMAL_PRIORITY = 5,
  LOW_PRIORITY = 6,
  BEST_EFFORT_PRIORITY = 7,
  HIGH_PRIORITY_CONTINUATION = 8,
  NORMAL_PRIORITY_CONTINUATION = 9,
  LOW_PRIORITY_CONTINUATION = 10,
  EXTREMELY_HIGH_PRIORITY = 11,
};
} // namespace perfetto_pbzero_enum_SequenceManagerTask
using SequenceManagerTask_Priority = perfetto_pbzero_enum_SequenceManagerTask::Priority;


constexpr SequenceManagerTask_Priority SequenceManagerTask_Priority_MIN = SequenceManagerTask_Priority::UNKNOWN;
constexpr SequenceManagerTask_Priority SequenceManagerTask_Priority_MAX = SequenceManagerTask_Priority::EXTREMELY_HIGH_PRIORITY;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* SequenceManagerTask_Priority_Name(::perfetto::protos::pbzero::SequenceManagerTask_Priority value) {
  switch (value) {
  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::UNKNOWN:
    return "UNKNOWN";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::CONTROL_PRIORITY:
    return "CONTROL_PRIORITY";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::HIGHEST_PRIORITY:
    return "HIGHEST_PRIORITY";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::VERY_HIGH_PRIORITY:
    return "VERY_HIGH_PRIORITY";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::HIGH_PRIORITY:
    return "HIGH_PRIORITY";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::NORMAL_PRIORITY:
    return "NORMAL_PRIORITY";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::LOW_PRIORITY:
    return "LOW_PRIORITY";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::BEST_EFFORT_PRIORITY:
    return "BEST_EFFORT_PRIORITY";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::HIGH_PRIORITY_CONTINUATION:
    return "HIGH_PRIORITY_CONTINUATION";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::NORMAL_PRIORITY_CONTINUATION:
    return "NORMAL_PRIORITY_CONTINUATION";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::LOW_PRIORITY_CONTINUATION:
    return "LOW_PRIORITY_CONTINUATION";

  case ::perfetto::protos::pbzero::SequenceManagerTask_Priority::EXTREMELY_HIGH_PRIORITY:
    return "EXTREMELY_HIGH_PRIORITY";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_SequenceManagerTask {
enum QueueName : int32_t {
  UNKNOWN_TQ = 0,
  DEFAULT_TQ = 1,
  TASK_ENVIRONMENT_DEFAULT_TQ = 2,
  TEST2_TQ = 3,
  TEST_TQ = 4,
  CONTROL_TQ = 5,
  SUBTHREAD_CONTROL_TQ = 6,
  SUBTHREAD_DEFAULT_TQ = 7,
  SUBTHREAD_INPUT_TQ = 8,
  UI_BEST_EFFORT_TQ = 9,
  UI_BOOTSTRAP_TQ = 10,
  UI_CONTROL_TQ = 11,
  UI_DEFAULT_TQ = 12,
  UI_NAVIGATION_NETWORK_RESPONSE_TQ = 13,
  UI_RUN_ALL_PENDING_TQ = 14,
  UI_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ = 15,
  UI_THREAD_TQ = 16,
  UI_USER_BLOCKING_TQ = 17,
  UI_USER_INPUT_TQ = 18,
  UI_USER_VISIBLE_TQ = 19,
  IO_BEST_EFFORT_TQ = 20,
  IO_BOOTSTRAP_TQ = 21,
  IO_CONTROL_TQ = 22,
  IO_DEFAULT_TQ = 23,
  IO_NAVIGATION_NETWORK_RESPONSE_TQ = 24,
  IO_RUN_ALL_PENDING_TQ = 25,
  IO_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ = 26,
  IO_THREAD_TQ = 27,
  IO_USER_BLOCKING_TQ = 28,
  IO_USER_INPUT_TQ = 29,
  IO_USER_VISIBLE_TQ = 30,
  COMPOSITOR_TQ = 31,
  DETACHED_TQ = 32,
  FRAME_DEFERRABLE_TQ = 33,
  FRAME_LOADING_CONTROL_TQ = 34,
  FRAME_LOADING_TQ = 35,
  FRAME_PAUSABLE_TQ = 36,
  FRAME_THROTTLEABLE_TQ = 37,
  FRAME_UNPAUSABLE_TQ = 38,
  IDLE_TQ = 39,
  INPUT_TQ = 40,
  IPC_TRACKING_FOR_CACHED_PAGES_TQ = 41,
  NON_WAKING_TQ = 42,
  OTHER_TQ = 43,
  V8_TQ = 44,
  WEB_SCHEDULING_TQ = 45,
  WORKER_IDLE_TQ = 46,
  WORKER_PAUSABLE_TQ = 47,
  WORKER_THREAD_INTERNAL_TQ = 48,
  WORKER_THROTTLEABLE_TQ = 49,
  WORKER_UNPAUSABLE_TQ = 50,
  WORKER_WEB_SCHEDULING_TQ = 51,
  UI_USER_BLOCKING_DEFERRABLE_TQ = 52,
  IO_USER_BLOCKING_DEFERRABLE_TQ = 53,
  UI_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ = 54,
  IO_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ = 55,
  V8_LOW_PRIORITY_TQ = 56,
};
} // namespace perfetto_pbzero_enum_SequenceManagerTask
using SequenceManagerTask_QueueName = perfetto_pbzero_enum_SequenceManagerTask::QueueName;


constexpr SequenceManagerTask_QueueName SequenceManagerTask_QueueName_MIN = SequenceManagerTask_QueueName::UNKNOWN_TQ;
constexpr SequenceManagerTask_QueueName SequenceManagerTask_QueueName_MAX = SequenceManagerTask_QueueName::V8_LOW_PRIORITY_TQ;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* SequenceManagerTask_QueueName_Name(::perfetto::protos::pbzero::SequenceManagerTask_QueueName value) {
  switch (value) {
  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UNKNOWN_TQ:
    return "UNKNOWN_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::DEFAULT_TQ:
    return "DEFAULT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::TASK_ENVIRONMENT_DEFAULT_TQ:
    return "TASK_ENVIRONMENT_DEFAULT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::TEST2_TQ:
    return "TEST2_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::TEST_TQ:
    return "TEST_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::CONTROL_TQ:
    return "CONTROL_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::SUBTHREAD_CONTROL_TQ:
    return "SUBTHREAD_CONTROL_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::SUBTHREAD_DEFAULT_TQ:
    return "SUBTHREAD_DEFAULT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::SUBTHREAD_INPUT_TQ:
    return "SUBTHREAD_INPUT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_BEST_EFFORT_TQ:
    return "UI_BEST_EFFORT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_BOOTSTRAP_TQ:
    return "UI_BOOTSTRAP_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_CONTROL_TQ:
    return "UI_CONTROL_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_DEFAULT_TQ:
    return "UI_DEFAULT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_NAVIGATION_NETWORK_RESPONSE_TQ:
    return "UI_NAVIGATION_NETWORK_RESPONSE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_RUN_ALL_PENDING_TQ:
    return "UI_RUN_ALL_PENDING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ:
    return "UI_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_THREAD_TQ:
    return "UI_THREAD_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_USER_BLOCKING_TQ:
    return "UI_USER_BLOCKING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_USER_INPUT_TQ:
    return "UI_USER_INPUT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_USER_VISIBLE_TQ:
    return "UI_USER_VISIBLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_BEST_EFFORT_TQ:
    return "IO_BEST_EFFORT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_BOOTSTRAP_TQ:
    return "IO_BOOTSTRAP_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_CONTROL_TQ:
    return "IO_CONTROL_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_DEFAULT_TQ:
    return "IO_DEFAULT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_NAVIGATION_NETWORK_RESPONSE_TQ:
    return "IO_NAVIGATION_NETWORK_RESPONSE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_RUN_ALL_PENDING_TQ:
    return "IO_RUN_ALL_PENDING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ:
    return "IO_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_THREAD_TQ:
    return "IO_THREAD_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_USER_BLOCKING_TQ:
    return "IO_USER_BLOCKING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_USER_INPUT_TQ:
    return "IO_USER_INPUT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_USER_VISIBLE_TQ:
    return "IO_USER_VISIBLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::COMPOSITOR_TQ:
    return "COMPOSITOR_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::DETACHED_TQ:
    return "DETACHED_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::FRAME_DEFERRABLE_TQ:
    return "FRAME_DEFERRABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::FRAME_LOADING_CONTROL_TQ:
    return "FRAME_LOADING_CONTROL_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::FRAME_LOADING_TQ:
    return "FRAME_LOADING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::FRAME_PAUSABLE_TQ:
    return "FRAME_PAUSABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::FRAME_THROTTLEABLE_TQ:
    return "FRAME_THROTTLEABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::FRAME_UNPAUSABLE_TQ:
    return "FRAME_UNPAUSABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IDLE_TQ:
    return "IDLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::INPUT_TQ:
    return "INPUT_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IPC_TRACKING_FOR_CACHED_PAGES_TQ:
    return "IPC_TRACKING_FOR_CACHED_PAGES_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::NON_WAKING_TQ:
    return "NON_WAKING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::OTHER_TQ:
    return "OTHER_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::V8_TQ:
    return "V8_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::WEB_SCHEDULING_TQ:
    return "WEB_SCHEDULING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::WORKER_IDLE_TQ:
    return "WORKER_IDLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::WORKER_PAUSABLE_TQ:
    return "WORKER_PAUSABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::WORKER_THREAD_INTERNAL_TQ:
    return "WORKER_THREAD_INTERNAL_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::WORKER_THROTTLEABLE_TQ:
    return "WORKER_THROTTLEABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::WORKER_UNPAUSABLE_TQ:
    return "WORKER_UNPAUSABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::WORKER_WEB_SCHEDULING_TQ:
    return "WORKER_WEB_SCHEDULING_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_USER_BLOCKING_DEFERRABLE_TQ:
    return "UI_USER_BLOCKING_DEFERRABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_USER_BLOCKING_DEFERRABLE_TQ:
    return "IO_USER_BLOCKING_DEFERRABLE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::UI_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ:
    return "UI_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::IO_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ:
    return "IO_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ";

  case ::perfetto::protos::pbzero::SequenceManagerTask_QueueName::V8_LOW_PRIORITY_TQ:
    return "V8_LOW_PRIORITY_TQ";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ProcessSingleton {
enum RemoteProcessInteractionResult : int32_t {
  INTERACTION_RESULT_UNSPECIFIED = 0,
  TERMINATE_FAILED = 1,
  REMOTE_PROCESS_NOT_FOUND = 2,
  TERMINATE_WAIT_TIMEOUT = 3,
  RUNNING_PROCESS_NOTIFY_ERROR = 4,
  TERMINATE_NOT_ENOUGH_PERMISSIONS = 5,
  REMOTE_PROCESS_SHUTTING_DOWN = 6,
  PROFILE_UNLOCKED = 7,
  PROFILE_UNLOCKED_BEFORE_KILL = 8,
  SAME_BROWSER_INSTANCE = 9,
  SAME_BROWSER_INSTANCE_BEFORE_KILL = 10,
  FAILED_TO_EXTRACT_PID = 11,
  INVALID_LOCK_FILE = 12,
  ORPHANED_LOCK_FILE = 13,
  USER_REFUSED_TERMINATION = 14,
  TERMINATE_SUCCEEDED = 100,
};
} // namespace perfetto_pbzero_enum_ProcessSingleton
using ProcessSingleton_RemoteProcessInteractionResult = perfetto_pbzero_enum_ProcessSingleton::RemoteProcessInteractionResult;


constexpr ProcessSingleton_RemoteProcessInteractionResult ProcessSingleton_RemoteProcessInteractionResult_MIN = ProcessSingleton_RemoteProcessInteractionResult::INTERACTION_RESULT_UNSPECIFIED;
constexpr ProcessSingleton_RemoteProcessInteractionResult ProcessSingleton_RemoteProcessInteractionResult_MAX = ProcessSingleton_RemoteProcessInteractionResult::TERMINATE_SUCCEEDED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ProcessSingleton_RemoteProcessInteractionResult_Name(::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::INTERACTION_RESULT_UNSPECIFIED:
    return "INTERACTION_RESULT_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::TERMINATE_FAILED:
    return "TERMINATE_FAILED";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::REMOTE_PROCESS_NOT_FOUND:
    return "REMOTE_PROCESS_NOT_FOUND";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::TERMINATE_WAIT_TIMEOUT:
    return "TERMINATE_WAIT_TIMEOUT";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::RUNNING_PROCESS_NOTIFY_ERROR:
    return "RUNNING_PROCESS_NOTIFY_ERROR";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::TERMINATE_NOT_ENOUGH_PERMISSIONS:
    return "TERMINATE_NOT_ENOUGH_PERMISSIONS";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::REMOTE_PROCESS_SHUTTING_DOWN:
    return "REMOTE_PROCESS_SHUTTING_DOWN";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::PROFILE_UNLOCKED:
    return "PROFILE_UNLOCKED";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::PROFILE_UNLOCKED_BEFORE_KILL:
    return "PROFILE_UNLOCKED_BEFORE_KILL";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::SAME_BROWSER_INSTANCE:
    return "SAME_BROWSER_INSTANCE";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::SAME_BROWSER_INSTANCE_BEFORE_KILL:
    return "SAME_BROWSER_INSTANCE_BEFORE_KILL";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::FAILED_TO_EXTRACT_PID:
    return "FAILED_TO_EXTRACT_PID";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::INVALID_LOCK_FILE:
    return "INVALID_LOCK_FILE";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::ORPHANED_LOCK_FILE:
    return "ORPHANED_LOCK_FILE";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::USER_REFUSED_TERMINATION:
    return "USER_REFUSED_TERMINATION";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult::TERMINATE_SUCCEEDED:
    return "TERMINATE_SUCCEEDED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ProcessSingleton {
enum RemoteHungProcessTerminateReason : int32_t {
  TERMINATE_REASON_UNSPECIFIED = 0,
  USER_ACCEPTED_TERMINATION = 1,
  NO_VISIBLE_WINDOW_FOUND = 2,
  NOTIFY_ATTEMPTS_EXCEEDED = 3,
  SOCKET_WRITE_FAILED = 4,
  SOCKET_READ_FAILED = 5,
};
} // namespace perfetto_pbzero_enum_ProcessSingleton
using ProcessSingleton_RemoteHungProcessTerminateReason = perfetto_pbzero_enum_ProcessSingleton::RemoteHungProcessTerminateReason;


constexpr ProcessSingleton_RemoteHungProcessTerminateReason ProcessSingleton_RemoteHungProcessTerminateReason_MIN = ProcessSingleton_RemoteHungProcessTerminateReason::TERMINATE_REASON_UNSPECIFIED;
constexpr ProcessSingleton_RemoteHungProcessTerminateReason ProcessSingleton_RemoteHungProcessTerminateReason_MAX = ProcessSingleton_RemoteHungProcessTerminateReason::SOCKET_READ_FAILED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ProcessSingleton_RemoteHungProcessTerminateReason_Name(::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason::TERMINATE_REASON_UNSPECIFIED:
    return "TERMINATE_REASON_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason::USER_ACCEPTED_TERMINATION:
    return "USER_ACCEPTED_TERMINATION";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason::NO_VISIBLE_WINDOW_FOUND:
    return "NO_VISIBLE_WINDOW_FOUND";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason::NOTIFY_ATTEMPTS_EXCEEDED:
    return "NOTIFY_ATTEMPTS_EXCEEDED";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason::SOCKET_WRITE_FAILED:
    return "SOCKET_WRITE_FAILED";

  case ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason::SOCKET_READ_FAILED:
    return "SOCKET_READ_FAILED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_EventLatency {
enum EventType : int32_t {
  EVENT_TYPE_UNSPECIFIED = 0,
  MOUSE_PRESSED = 1,
  MOUSE_RELEASED = 2,
  MOUSE_WHEEL = 3,
  KEY_PRESSED = 4,
  KEY_RELEASED = 5,
  TOUCH_PRESSED = 6,
  TOUCH_RELEASED = 7,
  TOUCH_MOVED = 8,
  GESTURE_SCROLL_BEGIN = 9,
  GESTURE_SCROLL_UPDATE = 10,
  GESTURE_SCROLL_END = 11,
  GESTURE_DOUBLE_TAP = 12,
  GESTURE_LONG_PRESS = 13,
  GESTURE_LONG_TAP = 14,
  GESTURE_SHOW_PRESS = 15,
  GESTURE_TAP = 16,
  GESTURE_TAP_CANCEL = 17,
  GESTURE_TAP_DOWN = 18,
  GESTURE_TAP_UNCONFIRMED = 19,
  GESTURE_TWO_FINGER_TAP = 20,
  FIRST_GESTURE_SCROLL_UPDATE = 21,
  MOUSE_DRAGGED = 22,
  GESTURE_PINCH_BEGIN = 23,
  GESTURE_PINCH_END = 24,
  GESTURE_PINCH_UPDATE = 25,
  INERTIAL_GESTURE_SCROLL_UPDATE = 26,
  MOUSE_MOVED_EVENT = 27,
};
} // namespace perfetto_pbzero_enum_EventLatency
using EventLatency_EventType = perfetto_pbzero_enum_EventLatency::EventType;


constexpr EventLatency_EventType EventLatency_EventType_MIN = EventLatency_EventType::EVENT_TYPE_UNSPECIFIED;
constexpr EventLatency_EventType EventLatency_EventType_MAX = EventLatency_EventType::MOUSE_MOVED_EVENT;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* EventLatency_EventType_Name(::perfetto::protos::pbzero::EventLatency_EventType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::EventLatency_EventType::EVENT_TYPE_UNSPECIFIED:
    return "EVENT_TYPE_UNSPECIFIED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::MOUSE_PRESSED:
    return "MOUSE_PRESSED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::MOUSE_RELEASED:
    return "MOUSE_RELEASED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::MOUSE_WHEEL:
    return "MOUSE_WHEEL";

  case ::perfetto::protos::pbzero::EventLatency_EventType::KEY_PRESSED:
    return "KEY_PRESSED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::KEY_RELEASED:
    return "KEY_RELEASED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::TOUCH_PRESSED:
    return "TOUCH_PRESSED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::TOUCH_RELEASED:
    return "TOUCH_RELEASED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::TOUCH_MOVED:
    return "TOUCH_MOVED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_SCROLL_BEGIN:
    return "GESTURE_SCROLL_BEGIN";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_SCROLL_UPDATE:
    return "GESTURE_SCROLL_UPDATE";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_SCROLL_END:
    return "GESTURE_SCROLL_END";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_DOUBLE_TAP:
    return "GESTURE_DOUBLE_TAP";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_LONG_PRESS:
    return "GESTURE_LONG_PRESS";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_LONG_TAP:
    return "GESTURE_LONG_TAP";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_SHOW_PRESS:
    return "GESTURE_SHOW_PRESS";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_TAP:
    return "GESTURE_TAP";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_TAP_CANCEL:
    return "GESTURE_TAP_CANCEL";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_TAP_DOWN:
    return "GESTURE_TAP_DOWN";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_TAP_UNCONFIRMED:
    return "GESTURE_TAP_UNCONFIRMED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_TWO_FINGER_TAP:
    return "GESTURE_TWO_FINGER_TAP";

  case ::perfetto::protos::pbzero::EventLatency_EventType::FIRST_GESTURE_SCROLL_UPDATE:
    return "FIRST_GESTURE_SCROLL_UPDATE";

  case ::perfetto::protos::pbzero::EventLatency_EventType::MOUSE_DRAGGED:
    return "MOUSE_DRAGGED";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_PINCH_BEGIN:
    return "GESTURE_PINCH_BEGIN";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_PINCH_END:
    return "GESTURE_PINCH_END";

  case ::perfetto::protos::pbzero::EventLatency_EventType::GESTURE_PINCH_UPDATE:
    return "GESTURE_PINCH_UPDATE";

  case ::perfetto::protos::pbzero::EventLatency_EventType::INERTIAL_GESTURE_SCROLL_UPDATE:
    return "INERTIAL_GESTURE_SCROLL_UPDATE";

  case ::perfetto::protos::pbzero::EventLatency_EventType::MOUSE_MOVED_EVENT:
    return "MOUSE_MOVED_EVENT";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution {
enum TaskType : int32_t {
  TASK_TYPE_UNKNOWN = 0,
  TASK_TYPE_DOM_MANIPULATION = 1,
  TASK_TYPE_USER_INTERACTION = 2,
  TASK_TYPE_NETWORKING = 3,
  TASK_TYPE_NETWORKING_CONTROL = 4,
  TASK_TYPE_HISTORY_TRAVERSAL = 5,
  TASK_TYPE_EMBED = 6,
  TASK_TYPE_MEDIA_ELEMENT_EVENT = 7,
  TASK_TYPE_CANVAS_BLOB_SERIALIZATION = 8,
  TASK_TYPE_MICROTASK = 9,
  TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_HIGH_NESTING = 10,
  TASK_TYPE_REMOTE_EVENT = 11,
  TASK_TYPE_WEB_SOCKET = 12,
  TASK_TYPE_POSTED_MESSAGE = 13,
  TASK_TYPE_UNSHIPPED_PORT_MESSAGE = 14,
  TASK_TYPE_FILE_READING = 15,
  TASK_TYPE_DATABASE_ACCESS = 16,
  TASK_TYPE_PRESENTATION = 17,
  TASK_TYPE_SENSOR = 18,
  TASK_TYPE_PERFORMANCE_TIMELINE = 19,
  TASK_TYPE_WEB_GL = 20,
  TASK_TYPE_IDLE_TASK = 21,
  TASK_TYPE_MISC_PLATFORM_API = 22,
  TASK_TYPE_INTERNAL_DEFAULT = 23,
  TASK_TYPE_INTERNAL_LOADING = 24,
  TASK_TYPE_INTERNAL_TEST = 26,
  TASK_TYPE_INTERNAL_WEB_CRYPTO = 27,
  TASK_TYPE_INTERNAL_MEDIA = 29,
  TASK_TYPE_INTERNAL_MEDIA_REALTIME = 30,
  TASK_TYPE_INTERNAL_USER_INTERACTION = 32,
  TASK_TYPE_INTERNAL_INSPECTOR = 33,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8 = 37,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_COMPOSITOR = 38,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_DEFAULT = 39,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_INPUT = 40,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IDLE = 41,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_CONTROL = 43,
  TASK_TYPE_INTERNAL_INTERSECTION_OBSERVER = 44,
  TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_DEFAULT = 45,
  TASK_TYPE_WORKER_THREAD_TASK_QUEUE_DEFAULT = 46,
  TASK_TYPE_WORKER_THREAD_TASK_QUEUE_V8 = 47,
  TASK_TYPE_WORKER_THREAD_TASK_QUEUE_COMPOSITOR = 48,
  TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_INPUT = 49,
  TASK_TYPE_NETWORKING_WITH_URL_LOADER_ANNOTATION = 50,
  TASK_TYPE_WORKER_ANIMATION = 51,
  TASK_TYPE_INTERNAL_TRANSLATION = 55,
  TASK_TYPE_FONT_LOADING = 56,
  TASK_TYPE_APPLICATION_LIFECYCLE = 57,
  TASK_TYPE_BACKGROUND_FETCH = 58,
  TASK_TYPE_PERMISSION = 59,
  TASK_TYPE_SERVICE_WORKER_CLIENT_MESSAGE = 60,
  TASK_TYPE_INTERNAL_CONTENT_CAPTURE = 61,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_MEMORY_PURGE = 62,
  TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED = 63,
  TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED_UNFREEZABLE = 64,
  TASK_TYPE_INTERNAL_CONTINUE_SCRIPT_LOADING = 65,
  TASK_TYPE_WEB_LOCKS = 66,
  TASK_TYPE_WEB_SCHEDULING_POSTED_TASK = 67,
  TASK_TYPE_INTERNAL_FRAME_LIFE_CYCLE_CONTROL = 68,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_NON_WAKING = 69,
  TASK_TYPE_INTERNAL_FIND_IN_PAGE = 70,
  TASK_TYPE_INTERNAL_HIGH_PRIORITY_LOCAL_FRAME = 71,
  TASK_TYPE_JAVASCRIPT_TIMER_IMMEDIATE = 72,
  TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_LOW_NESTING = 73,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IPC_TRACKING = 74,
  TASK_TYPE_NETWORKING_UNFREEZABLE = 75,
  TASK_TYPE_WAKE_LOCK = 76,
  TASK_TYPE_INTERNAL_INPUT_BLOCKING = 77,
  TASK_TYPE_WEB_GPU = 78,
  TASK_TYPE_INTERNAL_POST_MESSAGE_FORWARDING = 79,
  TASK_TYPE_INTERNAL_NAVIGATION_CANCELLATION = 80,
  TASK_TYPE_LOW_PRIORITY_SCRIPT_EXECUTION = 81,
  TASK_TYPE_STORAGE = 82,
  TASK_TYPE_NETWORKING_UNFREEZABLE_RENDER_BLOCKING_LOADING = 83,
  TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8_LOW_PRIORITY = 84,
  TASK_TYPE_CLIPBOARD = 85,
  TASK_TYPE_MACHINE_LEARNING = 86,
};
} // namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution
using RendererMainThreadTaskExecution_TaskType = perfetto_pbzero_enum_RendererMainThreadTaskExecution::TaskType;


constexpr RendererMainThreadTaskExecution_TaskType RendererMainThreadTaskExecution_TaskType_MIN = RendererMainThreadTaskExecution_TaskType::TASK_TYPE_UNKNOWN;
constexpr RendererMainThreadTaskExecution_TaskType RendererMainThreadTaskExecution_TaskType_MAX = RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MACHINE_LEARNING;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* RendererMainThreadTaskExecution_TaskType_Name(::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_UNKNOWN:
    return "TASK_TYPE_UNKNOWN";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_DOM_MANIPULATION:
    return "TASK_TYPE_DOM_MANIPULATION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_USER_INTERACTION:
    return "TASK_TYPE_USER_INTERACTION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_NETWORKING:
    return "TASK_TYPE_NETWORKING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_NETWORKING_CONTROL:
    return "TASK_TYPE_NETWORKING_CONTROL";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_HISTORY_TRAVERSAL:
    return "TASK_TYPE_HISTORY_TRAVERSAL";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_EMBED:
    return "TASK_TYPE_EMBED";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MEDIA_ELEMENT_EVENT:
    return "TASK_TYPE_MEDIA_ELEMENT_EVENT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_CANVAS_BLOB_SERIALIZATION:
    return "TASK_TYPE_CANVAS_BLOB_SERIALIZATION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MICROTASK:
    return "TASK_TYPE_MICROTASK";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_HIGH_NESTING:
    return "TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_HIGH_NESTING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_REMOTE_EVENT:
    return "TASK_TYPE_REMOTE_EVENT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WEB_SOCKET:
    return "TASK_TYPE_WEB_SOCKET";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_POSTED_MESSAGE:
    return "TASK_TYPE_POSTED_MESSAGE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_UNSHIPPED_PORT_MESSAGE:
    return "TASK_TYPE_UNSHIPPED_PORT_MESSAGE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_FILE_READING:
    return "TASK_TYPE_FILE_READING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_DATABASE_ACCESS:
    return "TASK_TYPE_DATABASE_ACCESS";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_PRESENTATION:
    return "TASK_TYPE_PRESENTATION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_SENSOR:
    return "TASK_TYPE_SENSOR";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_PERFORMANCE_TIMELINE:
    return "TASK_TYPE_PERFORMANCE_TIMELINE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WEB_GL:
    return "TASK_TYPE_WEB_GL";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_IDLE_TASK:
    return "TASK_TYPE_IDLE_TASK";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MISC_PLATFORM_API:
    return "TASK_TYPE_MISC_PLATFORM_API";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_DEFAULT:
    return "TASK_TYPE_INTERNAL_DEFAULT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_LOADING:
    return "TASK_TYPE_INTERNAL_LOADING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_TEST:
    return "TASK_TYPE_INTERNAL_TEST";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_WEB_CRYPTO:
    return "TASK_TYPE_INTERNAL_WEB_CRYPTO";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_MEDIA:
    return "TASK_TYPE_INTERNAL_MEDIA";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_MEDIA_REALTIME:
    return "TASK_TYPE_INTERNAL_MEDIA_REALTIME";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_USER_INTERACTION:
    return "TASK_TYPE_INTERNAL_USER_INTERACTION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_INSPECTOR:
    return "TASK_TYPE_INTERNAL_INSPECTOR";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_COMPOSITOR:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_COMPOSITOR";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_DEFAULT:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_DEFAULT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_INPUT:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_INPUT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IDLE:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IDLE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_CONTROL:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_CONTROL";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_INTERSECTION_OBSERVER:
    return "TASK_TYPE_INTERNAL_INTERSECTION_OBSERVER";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_DEFAULT:
    return "TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_DEFAULT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WORKER_THREAD_TASK_QUEUE_DEFAULT:
    return "TASK_TYPE_WORKER_THREAD_TASK_QUEUE_DEFAULT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WORKER_THREAD_TASK_QUEUE_V8:
    return "TASK_TYPE_WORKER_THREAD_TASK_QUEUE_V8";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WORKER_THREAD_TASK_QUEUE_COMPOSITOR:
    return "TASK_TYPE_WORKER_THREAD_TASK_QUEUE_COMPOSITOR";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_INPUT:
    return "TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_INPUT";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_NETWORKING_WITH_URL_LOADER_ANNOTATION:
    return "TASK_TYPE_NETWORKING_WITH_URL_LOADER_ANNOTATION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WORKER_ANIMATION:
    return "TASK_TYPE_WORKER_ANIMATION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_TRANSLATION:
    return "TASK_TYPE_INTERNAL_TRANSLATION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_FONT_LOADING:
    return "TASK_TYPE_FONT_LOADING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_APPLICATION_LIFECYCLE:
    return "TASK_TYPE_APPLICATION_LIFECYCLE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_BACKGROUND_FETCH:
    return "TASK_TYPE_BACKGROUND_FETCH";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_PERMISSION:
    return "TASK_TYPE_PERMISSION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_SERVICE_WORKER_CLIENT_MESSAGE:
    return "TASK_TYPE_SERVICE_WORKER_CLIENT_MESSAGE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_CONTENT_CAPTURE:
    return "TASK_TYPE_INTERNAL_CONTENT_CAPTURE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_MEMORY_PURGE:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_MEMORY_PURGE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED:
    return "TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED_UNFREEZABLE:
    return "TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED_UNFREEZABLE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_CONTINUE_SCRIPT_LOADING:
    return "TASK_TYPE_INTERNAL_CONTINUE_SCRIPT_LOADING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WEB_LOCKS:
    return "TASK_TYPE_WEB_LOCKS";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WEB_SCHEDULING_POSTED_TASK:
    return "TASK_TYPE_WEB_SCHEDULING_POSTED_TASK";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_FRAME_LIFE_CYCLE_CONTROL:
    return "TASK_TYPE_INTERNAL_FRAME_LIFE_CYCLE_CONTROL";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_NON_WAKING:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_NON_WAKING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_FIND_IN_PAGE:
    return "TASK_TYPE_INTERNAL_FIND_IN_PAGE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_HIGH_PRIORITY_LOCAL_FRAME:
    return "TASK_TYPE_INTERNAL_HIGH_PRIORITY_LOCAL_FRAME";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_JAVASCRIPT_TIMER_IMMEDIATE:
    return "TASK_TYPE_JAVASCRIPT_TIMER_IMMEDIATE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_LOW_NESTING:
    return "TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_LOW_NESTING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IPC_TRACKING:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IPC_TRACKING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_NETWORKING_UNFREEZABLE:
    return "TASK_TYPE_NETWORKING_UNFREEZABLE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WAKE_LOCK:
    return "TASK_TYPE_WAKE_LOCK";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_INPUT_BLOCKING:
    return "TASK_TYPE_INTERNAL_INPUT_BLOCKING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_WEB_GPU:
    return "TASK_TYPE_WEB_GPU";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_POST_MESSAGE_FORWARDING:
    return "TASK_TYPE_INTERNAL_POST_MESSAGE_FORWARDING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_INTERNAL_NAVIGATION_CANCELLATION:
    return "TASK_TYPE_INTERNAL_NAVIGATION_CANCELLATION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_LOW_PRIORITY_SCRIPT_EXECUTION:
    return "TASK_TYPE_LOW_PRIORITY_SCRIPT_EXECUTION";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_STORAGE:
    return "TASK_TYPE_STORAGE";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_NETWORKING_UNFREEZABLE_RENDER_BLOCKING_LOADING:
    return "TASK_TYPE_NETWORKING_UNFREEZABLE_RENDER_BLOCKING_LOADING";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8_LOW_PRIORITY:
    return "TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8_LOW_PRIORITY";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_CLIPBOARD:
    return "TASK_TYPE_CLIPBOARD";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType::TASK_TYPE_MACHINE_LEARNING:
    return "TASK_TYPE_MACHINE_LEARNING";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution {
enum FrameType : int32_t {
  FRAME_TYPE_UNSPECIFIED = 0,
  FRAME_TYPE_MAIN_FRAME = 1,
  FRAME_TYPE_SAME_ORIGIN_SUBFRAME = 2,
  FRAME_TYPE_CROSS_ORIGIN_SUBFRAME = 3,
};
} // namespace perfetto_pbzero_enum_RendererMainThreadTaskExecution
using RendererMainThreadTaskExecution_FrameType = perfetto_pbzero_enum_RendererMainThreadTaskExecution::FrameType;


constexpr RendererMainThreadTaskExecution_FrameType RendererMainThreadTaskExecution_FrameType_MIN = RendererMainThreadTaskExecution_FrameType::FRAME_TYPE_UNSPECIFIED;
constexpr RendererMainThreadTaskExecution_FrameType RendererMainThreadTaskExecution_FrameType_MAX = RendererMainThreadTaskExecution_FrameType::FRAME_TYPE_CROSS_ORIGIN_SUBFRAME;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* RendererMainThreadTaskExecution_FrameType_Name(::perfetto::protos::pbzero::RendererMainThreadTaskExecution_FrameType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_FrameType::FRAME_TYPE_UNSPECIFIED:
    return "FRAME_TYPE_UNSPECIFIED";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_FrameType::FRAME_TYPE_MAIN_FRAME:
    return "FRAME_TYPE_MAIN_FRAME";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_FrameType::FRAME_TYPE_SAME_ORIGIN_SUBFRAME:
    return "FRAME_TYPE_SAME_ORIGIN_SUBFRAME";

  case ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_FrameType::FRAME_TYPE_CROSS_ORIGIN_SUBFRAME:
    return "FRAME_TYPE_CROSS_ORIGIN_SUBFRAME";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BackForwardCacheCanStoreDocumentResult {
enum BackForwardCacheNotRestoredReason : int32_t {
  NOT_MAIN_FRAME = 1,
  BACK_FORWARD_CACHE_DISABLED = 2,
  RELATED_ACTIVE_CONTENTS_EXIST = 3,
  HTTP_STATUS_NOT_OK = 4,
  SCHEME_NOT_HTTP_OR_HTTPS = 5,
  LOADING = 6,
  WAS_GRANTED_MEDIA_ACCESS = 7,
  BLOCKLISTED_FEATURES = 8,
  DISABLE_FOR_RENDER_FRAME_HOST_CALLED = 9,
  DOMAIN_NOT_ALLOWED = 10,
  HTTP_METHOD_NOT_GET = 11,
  SUBFRAME_IS_NAVIGATING = 12,
  TIMEOUT = 13,
  CACHE_LIMIT = 14,
  JAVASCRIPT_EXECUTION = 15,
  RENDERER_PROCESS_KILLED = 16,
  RENDERER_PROCESS_CRASHED = 17,
  GRANTED_MEDIA_STREAM_ACCESS = 19,
  SCHEDULER_TRACKED_FEATURE_USED = 20,
  CONFLICTING_BROWSING_INSTANCE = 21,
  CACHE_FLUSHED = 22,
  SERVICE_WORKER_VERSION_ACTIVATION = 23,
  SESSION_RESTORED = 24,
  UNKNOWN = 25,
  SERVICE_WORKER_POST_MESSAGE = 26,
  ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED = 27,
  NOT_MOST_RECENT_NAVIGATION_ENTRY = 28,
  SERVICE_WORKER_CLAIM = 29,
  IGNORE_EVENT_AND_EVICT = 30,
  HAVE_INNER_CONTENTS = 31,
  TIMEOUT_PUTTING_IN_CACHE = 32,
  BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY = 33,
  BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE = 34,
  NETWORK_REQUEST_REDIRECTED = 35,
  NETWORK_REQUEST_TIMEOUT = 36,
  NETWORK_EXCEEDS_BUFFER_LIMIT = 37,
  NAVIGATION_CANCELLED_WHILE_RESTORING = 38,
  BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER = 39,
  USER_AGENT_OVERRIDE_DIFFERS = 40,
  NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER = 41,
  FOREGROUND_CACHE_LIMIT = 42,
  BROWSING_INSTANCE_NOT_SWAPPED = 43,
  BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE = 44,
  OPT_IN_UNLOAD_HEADER_NOT_PRESENT = 45,
  UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME = 46,
  UNLOAD_HANDLER_EXISTS_IN_SUBFRAME = 47,
  SERVICE_WORKER_UNREGISTRATION = 48,
  CACHE_CONTROL_NO_STORE = 49,
  CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED = 50,
  CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED = 51,
  NO_RESPONSE_HEAD = 52,
  ACTIVATION_NAVIGATION_DISALLOWED_FOR_BUG_1234857 = 53,
  ERROR_DOCUMENT = 54,
  FENCED_FRAMES_EMBEDDER = 55,
  COOKIE_DISABLED = 56,
  HTTP_AUTH_REQUIRED = 57,
  COOKIE_FLUSHED = 58,
  BROADCAST_CHANNEL_ON_MESSAGE = 59,
  WEBVIEW_SETTINGS_CHANGED = 60,
  WEBVIEW_JAVASCRIPT_OBJECT_CHANGED = 61,
  WEBVIEW_MESSAGE_LISTENER_INJECTED = 62,
  WEBVIEW_SAFE_BROWSING_ALLOWLIST_CHANGED = 63,
  WEBVIEW_DOCUMENT_START_JAVASCRIPT_CHANGED = 64,
};
} // namespace perfetto_pbzero_enum_BackForwardCacheCanStoreDocumentResult
using BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason = perfetto_pbzero_enum_BackForwardCacheCanStoreDocumentResult::BackForwardCacheNotRestoredReason;


constexpr BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason_MIN = BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NOT_MAIN_FRAME;
constexpr BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason_MAX = BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::WEBVIEW_DOCUMENT_START_JAVASCRIPT_CHANGED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason_Name(::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NOT_MAIN_FRAME:
    return "NOT_MAIN_FRAME";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED:
    return "BACK_FORWARD_CACHE_DISABLED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::RELATED_ACTIVE_CONTENTS_EXIST:
    return "RELATED_ACTIVE_CONTENTS_EXIST";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::HTTP_STATUS_NOT_OK:
    return "HTTP_STATUS_NOT_OK";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SCHEME_NOT_HTTP_OR_HTTPS:
    return "SCHEME_NOT_HTTP_OR_HTTPS";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::LOADING:
    return "LOADING";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::WAS_GRANTED_MEDIA_ACCESS:
    return "WAS_GRANTED_MEDIA_ACCESS";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BLOCKLISTED_FEATURES:
    return "BLOCKLISTED_FEATURES";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::DISABLE_FOR_RENDER_FRAME_HOST_CALLED:
    return "DISABLE_FOR_RENDER_FRAME_HOST_CALLED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::DOMAIN_NOT_ALLOWED:
    return "DOMAIN_NOT_ALLOWED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::HTTP_METHOD_NOT_GET:
    return "HTTP_METHOD_NOT_GET";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SUBFRAME_IS_NAVIGATING:
    return "SUBFRAME_IS_NAVIGATING";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::TIMEOUT:
    return "TIMEOUT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::CACHE_LIMIT:
    return "CACHE_LIMIT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::JAVASCRIPT_EXECUTION:
    return "JAVASCRIPT_EXECUTION";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::RENDERER_PROCESS_KILLED:
    return "RENDERER_PROCESS_KILLED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::RENDERER_PROCESS_CRASHED:
    return "RENDERER_PROCESS_CRASHED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::GRANTED_MEDIA_STREAM_ACCESS:
    return "GRANTED_MEDIA_STREAM_ACCESS";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SCHEDULER_TRACKED_FEATURE_USED:
    return "SCHEDULER_TRACKED_FEATURE_USED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::CONFLICTING_BROWSING_INSTANCE:
    return "CONFLICTING_BROWSING_INSTANCE";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::CACHE_FLUSHED:
    return "CACHE_FLUSHED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SERVICE_WORKER_VERSION_ACTIVATION:
    return "SERVICE_WORKER_VERSION_ACTIVATION";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SESSION_RESTORED:
    return "SESSION_RESTORED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::UNKNOWN:
    return "UNKNOWN";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SERVICE_WORKER_POST_MESSAGE:
    return "SERVICE_WORKER_POST_MESSAGE";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED:
    return "ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NOT_MOST_RECENT_NAVIGATION_ENTRY:
    return "NOT_MOST_RECENT_NAVIGATION_ENTRY";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SERVICE_WORKER_CLAIM:
    return "SERVICE_WORKER_CLAIM";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::IGNORE_EVENT_AND_EVICT:
    return "IGNORE_EVENT_AND_EVICT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::HAVE_INNER_CONTENTS:
    return "HAVE_INNER_CONTENTS";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::TIMEOUT_PUTTING_IN_CACHE:
    return "TIMEOUT_PUTTING_IN_CACHE";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY:
    return "BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE:
    return "BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NETWORK_REQUEST_REDIRECTED:
    return "NETWORK_REQUEST_REDIRECTED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NETWORK_REQUEST_TIMEOUT:
    return "NETWORK_REQUEST_TIMEOUT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NETWORK_EXCEEDS_BUFFER_LIMIT:
    return "NETWORK_EXCEEDS_BUFFER_LIMIT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NAVIGATION_CANCELLED_WHILE_RESTORING:
    return "NAVIGATION_CANCELLED_WHILE_RESTORING";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER:
    return "BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::USER_AGENT_OVERRIDE_DIFFERS:
    return "USER_AGENT_OVERRIDE_DIFFERS";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER:
    return "NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::FOREGROUND_CACHE_LIMIT:
    return "FOREGROUND_CACHE_LIMIT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BROWSING_INSTANCE_NOT_SWAPPED:
    return "BROWSING_INSTANCE_NOT_SWAPPED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE:
    return "BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::OPT_IN_UNLOAD_HEADER_NOT_PRESENT:
    return "OPT_IN_UNLOAD_HEADER_NOT_PRESENT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME:
    return "UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::UNLOAD_HANDLER_EXISTS_IN_SUBFRAME:
    return "UNLOAD_HANDLER_EXISTS_IN_SUBFRAME";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::SERVICE_WORKER_UNREGISTRATION:
    return "SERVICE_WORKER_UNREGISTRATION";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::CACHE_CONTROL_NO_STORE:
    return "CACHE_CONTROL_NO_STORE";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED:
    return "CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED:
    return "CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::NO_RESPONSE_HEAD:
    return "NO_RESPONSE_HEAD";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::ACTIVATION_NAVIGATION_DISALLOWED_FOR_BUG_1234857:
    return "ACTIVATION_NAVIGATION_DISALLOWED_FOR_BUG_1234857";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::ERROR_DOCUMENT:
    return "ERROR_DOCUMENT";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::FENCED_FRAMES_EMBEDDER:
    return "FENCED_FRAMES_EMBEDDER";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::COOKIE_DISABLED:
    return "COOKIE_DISABLED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::HTTP_AUTH_REQUIRED:
    return "HTTP_AUTH_REQUIRED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::COOKIE_FLUSHED:
    return "COOKIE_FLUSHED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::BROADCAST_CHANNEL_ON_MESSAGE:
    return "BROADCAST_CHANNEL_ON_MESSAGE";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::WEBVIEW_SETTINGS_CHANGED:
    return "WEBVIEW_SETTINGS_CHANGED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::WEBVIEW_JAVASCRIPT_OBJECT_CHANGED:
    return "WEBVIEW_JAVASCRIPT_OBJECT_CHANGED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::WEBVIEW_MESSAGE_LISTENER_INJECTED:
    return "WEBVIEW_MESSAGE_LISTENER_INJECTED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::WEBVIEW_SAFE_BROWSING_ALLOWLIST_CHANGED:
    return "WEBVIEW_SAFE_BROWSING_ALLOWLIST_CHANGED";

  case ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason::WEBVIEW_DOCUMENT_START_JAVASCRIPT_CHANGED:
    return "WEBVIEW_DOCUMENT_START_JAVASCRIPT_CHANGED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeThreadPoolTask {
enum Priority : int32_t {
  PRIORITY_UNSPECIFIED = 0,
  PRIORITY_BEST_EFFORT = 1,
  PRIORITY_USER_VISIBLE = 2,
  PRIORITY_USER_BLOCKING = 3,
};
} // namespace perfetto_pbzero_enum_ChromeThreadPoolTask
using ChromeThreadPoolTask_Priority = perfetto_pbzero_enum_ChromeThreadPoolTask::Priority;


constexpr ChromeThreadPoolTask_Priority ChromeThreadPoolTask_Priority_MIN = ChromeThreadPoolTask_Priority::PRIORITY_UNSPECIFIED;
constexpr ChromeThreadPoolTask_Priority ChromeThreadPoolTask_Priority_MAX = ChromeThreadPoolTask_Priority::PRIORITY_USER_BLOCKING;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeThreadPoolTask_Priority_Name(::perfetto::protos::pbzero::ChromeThreadPoolTask_Priority value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_Priority::PRIORITY_UNSPECIFIED:
    return "PRIORITY_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_Priority::PRIORITY_BEST_EFFORT:
    return "PRIORITY_BEST_EFFORT";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_Priority::PRIORITY_USER_VISIBLE:
    return "PRIORITY_USER_VISIBLE";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_Priority::PRIORITY_USER_BLOCKING:
    return "PRIORITY_USER_BLOCKING";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeThreadPoolTask {
enum ExecutionMode : int32_t {
  EXECTUION_MODE_UNSPECIFIED = 0,
  EXECUTION_MODE_PARALLEL = 1,
  EXECUTION_MODE_SEQUENCED = 2,
  EXECUTION_MODE_SINGLE_THREAD = 3,
  EXECUTION_MODE_JOB = 4,
};
} // namespace perfetto_pbzero_enum_ChromeThreadPoolTask
using ChromeThreadPoolTask_ExecutionMode = perfetto_pbzero_enum_ChromeThreadPoolTask::ExecutionMode;


constexpr ChromeThreadPoolTask_ExecutionMode ChromeThreadPoolTask_ExecutionMode_MIN = ChromeThreadPoolTask_ExecutionMode::EXECTUION_MODE_UNSPECIFIED;
constexpr ChromeThreadPoolTask_ExecutionMode ChromeThreadPoolTask_ExecutionMode_MAX = ChromeThreadPoolTask_ExecutionMode::EXECUTION_MODE_JOB;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeThreadPoolTask_ExecutionMode_Name(::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode::EXECTUION_MODE_UNSPECIFIED:
    return "EXECTUION_MODE_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode::EXECUTION_MODE_PARALLEL:
    return "EXECUTION_MODE_PARALLEL";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode::EXECUTION_MODE_SEQUENCED:
    return "EXECUTION_MODE_SEQUENCED";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode::EXECUTION_MODE_SINGLE_THREAD:
    return "EXECUTION_MODE_SINGLE_THREAD";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode::EXECUTION_MODE_JOB:
    return "EXECUTION_MODE_JOB";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeThreadPoolTask {
enum ShutdownBehavior : int32_t {
  SHUTDOWN_BEHAVIOR_UNSPECIFIED = 0,
  SHUTDOWN_BEHAVIOR_CONTINUE_ON_SHUTDOWN = 1,
  SHUTDOWN_BEHAVIOR_SKIP_ON_SHUTDOWN = 2,
  SHUTDOWN_BEHAVIOR_BLOCK_SHUTDOWN = 3,
};
} // namespace perfetto_pbzero_enum_ChromeThreadPoolTask
using ChromeThreadPoolTask_ShutdownBehavior = perfetto_pbzero_enum_ChromeThreadPoolTask::ShutdownBehavior;


constexpr ChromeThreadPoolTask_ShutdownBehavior ChromeThreadPoolTask_ShutdownBehavior_MIN = ChromeThreadPoolTask_ShutdownBehavior::SHUTDOWN_BEHAVIOR_UNSPECIFIED;
constexpr ChromeThreadPoolTask_ShutdownBehavior ChromeThreadPoolTask_ShutdownBehavior_MAX = ChromeThreadPoolTask_ShutdownBehavior::SHUTDOWN_BEHAVIOR_BLOCK_SHUTDOWN;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeThreadPoolTask_ShutdownBehavior_Name(::perfetto::protos::pbzero::ChromeThreadPoolTask_ShutdownBehavior value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ShutdownBehavior::SHUTDOWN_BEHAVIOR_UNSPECIFIED:
    return "SHUTDOWN_BEHAVIOR_UNSPECIFIED";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ShutdownBehavior::SHUTDOWN_BEHAVIOR_CONTINUE_ON_SHUTDOWN:
    return "SHUTDOWN_BEHAVIOR_CONTINUE_ON_SHUTDOWN";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ShutdownBehavior::SHUTDOWN_BEHAVIOR_SKIP_ON_SHUTDOWN:
    return "SHUTDOWN_BEHAVIOR_SKIP_ON_SHUTDOWN";

  case ::perfetto::protos::pbzero::ChromeThreadPoolTask_ShutdownBehavior::SHUTDOWN_BEHAVIOR_BLOCK_SHUTDOWN:
    return "SHUTDOWN_BEHAVIOR_BLOCK_SHUTDOWN";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_RenderFrameHost {
enum LifecycleState : int32_t {
  UNSPECIFIED = 0,
  SPECULATIVE = 1,
  PENDING_COMMIT = 2,
  PRERENDERING = 3,
  ACTIVE = 4,
  IN_BACK_FORWARD_CACHE = 5,
  RUNNING_UNLOAD_HANDLERS = 6,
  READY_TO_BE_DELETED = 7,
};
} // namespace perfetto_pbzero_enum_RenderFrameHost
using RenderFrameHost_LifecycleState = perfetto_pbzero_enum_RenderFrameHost::LifecycleState;


constexpr RenderFrameHost_LifecycleState RenderFrameHost_LifecycleState_MIN = RenderFrameHost_LifecycleState::UNSPECIFIED;
constexpr RenderFrameHost_LifecycleState RenderFrameHost_LifecycleState_MAX = RenderFrameHost_LifecycleState::READY_TO_BE_DELETED;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* RenderFrameHost_LifecycleState_Name(::perfetto::protos::pbzero::RenderFrameHost_LifecycleState value) {
  switch (value) {
  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::UNSPECIFIED:
    return "UNSPECIFIED";

  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::SPECULATIVE:
    return "SPECULATIVE";

  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::PENDING_COMMIT:
    return "PENDING_COMMIT";

  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::PRERENDERING:
    return "PRERENDERING";

  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::ACTIVE:
    return "ACTIVE";

  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::IN_BACK_FORWARD_CACHE:
    return "IN_BACK_FORWARD_CACHE";

  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::RUNNING_UNLOAD_HANDLERS:
    return "RUNNING_UNLOAD_HANDLERS";

  case ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState::READY_TO_BE_DELETED:
    return "READY_TO_BE_DELETED";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeSamplingProfilerSampleCollected {
enum WriteStatus : int32_t {
  WRITE_STATUS_NONE = 0,
  WRITE_STATUS_BUFFERING_SAMPLE = 1,
  WRITE_STATUS_WRITING_BUFFERED = 2,
  WRITE_STATUS_WRITING_TO_TRACE = 3,
};
} // namespace perfetto_pbzero_enum_ChromeSamplingProfilerSampleCollected
using ChromeSamplingProfilerSampleCollected_WriteStatus = perfetto_pbzero_enum_ChromeSamplingProfilerSampleCollected::WriteStatus;


constexpr ChromeSamplingProfilerSampleCollected_WriteStatus ChromeSamplingProfilerSampleCollected_WriteStatus_MIN = ChromeSamplingProfilerSampleCollected_WriteStatus::WRITE_STATUS_NONE;
constexpr ChromeSamplingProfilerSampleCollected_WriteStatus ChromeSamplingProfilerSampleCollected_WriteStatus_MAX = ChromeSamplingProfilerSampleCollected_WriteStatus::WRITE_STATUS_WRITING_TO_TRACE;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeSamplingProfilerSampleCollected_WriteStatus_Name(::perfetto::protos::pbzero::ChromeSamplingProfilerSampleCollected_WriteStatus value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeSamplingProfilerSampleCollected_WriteStatus::WRITE_STATUS_NONE:
    return "WRITE_STATUS_NONE";

  case ::perfetto::protos::pbzero::ChromeSamplingProfilerSampleCollected_WriteStatus::WRITE_STATUS_BUFFERING_SAMPLE:
    return "WRITE_STATUS_BUFFERING_SAMPLE";

  case ::perfetto::protos::pbzero::ChromeSamplingProfilerSampleCollected_WriteStatus::WRITE_STATUS_WRITING_BUFFERED:
    return "WRITE_STATUS_WRITING_BUFFERED";

  case ::perfetto::protos::pbzero::ChromeSamplingProfilerSampleCollected_WriteStatus::WRITE_STATUS_WRITING_TO_TRACE:
    return "WRITE_STATUS_WRITING_TO_TRACE";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChildProcessLauncherPriority {
enum Importance : int32_t {
  IMPORTANCE_NORMAL = 1,
  IMPORTANCE_MODERATE = 2,
  IMPORTANCE_IMPORTANT = 3,
};
} // namespace perfetto_pbzero_enum_ChildProcessLauncherPriority
using ChildProcessLauncherPriority_Importance = perfetto_pbzero_enum_ChildProcessLauncherPriority::Importance;


constexpr ChildProcessLauncherPriority_Importance ChildProcessLauncherPriority_Importance_MIN = ChildProcessLauncherPriority_Importance::IMPORTANCE_NORMAL;
constexpr ChildProcessLauncherPriority_Importance ChildProcessLauncherPriority_Importance_MAX = ChildProcessLauncherPriority_Importance::IMPORTANCE_IMPORTANT;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChildProcessLauncherPriority_Importance_Name(::perfetto::protos::pbzero::ChildProcessLauncherPriority_Importance value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChildProcessLauncherPriority_Importance::IMPORTANCE_NORMAL:
    return "IMPORTANCE_NORMAL";

  case ::perfetto::protos::pbzero::ChildProcessLauncherPriority_Importance::IMPORTANCE_MODERATE:
    return "IMPORTANCE_MODERATE";

  case ::perfetto::protos::pbzero::ChildProcessLauncherPriority_Importance::IMPORTANCE_IMPORTANT:
    return "IMPORTANCE_IMPORTANT";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_FrameTreeNodeInfo {
enum FrameType : int32_t {
  UNSPECIFIED_FRAME_TYPE = 0,
  SUBFRAME = 1,
  PRIMARY_MAIN_FRAME = 2,
  PRERENDER_MAIN_FRAME = 3,
  FENCED_FRAME_ROOT = 4,
};
} // namespace perfetto_pbzero_enum_FrameTreeNodeInfo
using FrameTreeNodeInfo_FrameType = perfetto_pbzero_enum_FrameTreeNodeInfo::FrameType;


constexpr FrameTreeNodeInfo_FrameType FrameTreeNodeInfo_FrameType_MIN = FrameTreeNodeInfo_FrameType::UNSPECIFIED_FRAME_TYPE;
constexpr FrameTreeNodeInfo_FrameType FrameTreeNodeInfo_FrameType_MAX = FrameTreeNodeInfo_FrameType::FENCED_FRAME_ROOT;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* FrameTreeNodeInfo_FrameType_Name(::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType::UNSPECIFIED_FRAME_TYPE:
    return "UNSPECIFIED_FRAME_TYPE";

  case ::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType::SUBFRAME:
    return "SUBFRAME";

  case ::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType::PRIMARY_MAIN_FRAME:
    return "PRIMARY_MAIN_FRAME";

  case ::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType::PRERENDER_MAIN_FRAME:
    return "PRERENDER_MAIN_FRAME";

  case ::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType::FENCED_FRAME_ROOT:
    return "FENCED_FRAME_ROOT";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_ChromeTaskAnnotator {
enum DelayPolicy : int32_t {
  FLEXIBLE_NO_SOONER = 0,
  FLEXIBLE_PREFER_EARLY = 1,
  PRECISE = 2,
};
} // namespace perfetto_pbzero_enum_ChromeTaskAnnotator
using ChromeTaskAnnotator_DelayPolicy = perfetto_pbzero_enum_ChromeTaskAnnotator::DelayPolicy;


constexpr ChromeTaskAnnotator_DelayPolicy ChromeTaskAnnotator_DelayPolicy_MIN = ChromeTaskAnnotator_DelayPolicy::FLEXIBLE_NO_SOONER;
constexpr ChromeTaskAnnotator_DelayPolicy ChromeTaskAnnotator_DelayPolicy_MAX = ChromeTaskAnnotator_DelayPolicy::PRECISE;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* ChromeTaskAnnotator_DelayPolicy_Name(::perfetto::protos::pbzero::ChromeTaskAnnotator_DelayPolicy value) {
  switch (value) {
  case ::perfetto::protos::pbzero::ChromeTaskAnnotator_DelayPolicy::FLEXIBLE_NO_SOONER:
    return "FLEXIBLE_NO_SOONER";

  case ::perfetto::protos::pbzero::ChromeTaskAnnotator_DelayPolicy::FLEXIBLE_PREFER_EARLY:
    return "FLEXIBLE_PREFER_EARLY";

  case ::perfetto::protos::pbzero::ChromeTaskAnnotator_DelayPolicy::PRECISE:
    return "PRECISE";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

namespace perfetto_pbzero_enum_BlinkTaskScope {
enum TaskScopeType : int32_t {
  TASK_SCOPE_UNKNOWN = 0,
  TASK_SCOPE_CALLBACK = 1,
  TASK_SCOPE_SCHEDULED_ACTION = 2,
  TASK_SCOPE_SCRIPT_EXECUTION = 3,
  TASK_SCOPE_POST_MESSAGE = 4,
  TASK_SCOPE_POP_STATE = 5,
  TASK_SCOPE_SCHEDULER_POST_TASK = 6,
  TASK_SCOPE_REQUEST_IDLE_CALLBACK = 7,
  TASK_SCOPE_XML_HTTP_REQUEST = 8,
  TASK_SCOPE_SOFT_NAVIGATION = 9,
};
} // namespace perfetto_pbzero_enum_BlinkTaskScope
using BlinkTaskScope_TaskScopeType = perfetto_pbzero_enum_BlinkTaskScope::TaskScopeType;


constexpr BlinkTaskScope_TaskScopeType BlinkTaskScope_TaskScopeType_MIN = BlinkTaskScope_TaskScopeType::TASK_SCOPE_UNKNOWN;
constexpr BlinkTaskScope_TaskScopeType BlinkTaskScope_TaskScopeType_MAX = BlinkTaskScope_TaskScopeType::TASK_SCOPE_SOFT_NAVIGATION;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* BlinkTaskScope_TaskScopeType_Name(::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType value) {
  switch (value) {
  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_UNKNOWN:
    return "TASK_SCOPE_UNKNOWN";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_CALLBACK:
    return "TASK_SCOPE_CALLBACK";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_SCHEDULED_ACTION:
    return "TASK_SCOPE_SCHEDULED_ACTION";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_SCRIPT_EXECUTION:
    return "TASK_SCOPE_SCRIPT_EXECUTION";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_POST_MESSAGE:
    return "TASK_SCOPE_POST_MESSAGE";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_POP_STATE:
    return "TASK_SCOPE_POP_STATE";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_SCHEDULER_POST_TASK:
    return "TASK_SCOPE_SCHEDULER_POST_TASK";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_REQUEST_IDLE_CALLBACK:
    return "TASK_SCOPE_REQUEST_IDLE_CALLBACK";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_XML_HTTP_REQUEST:
    return "TASK_SCOPE_XML_HTTP_REQUEST";

  case ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType::TASK_SCOPE_SOFT_NAVIGATION:
    return "TASK_SCOPE_SOFT_NAVIGATION";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

class AnimationFrameScriptTimingInfo_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/10, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AnimationFrameScriptTimingInfo_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AnimationFrameScriptTimingInfo_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AnimationFrameScriptTimingInfo_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_style_duration_ms() const { return at<1>().valid(); }
  int64_t style_duration_ms() const { return at<1>().as_int64(); }
  bool has_layout_duration_ms() const { return at<2>().valid(); }
  int64_t layout_duration_ms() const { return at<2>().as_int64(); }
  bool has_pause_duration_ms() const { return at<3>().valid(); }
  int64_t pause_duration_ms() const { return at<3>().as_int64(); }
  bool has_class_like_name() const { return at<4>().valid(); }
  ::protozero::ConstChars class_like_name() const { return at<4>().as_string(); }
  bool has_property_like_name() const { return at<5>().valid(); }
  ::protozero::ConstChars property_like_name() const { return at<5>().as_string(); }
  bool has_source_location_url() const { return at<6>().valid(); }
  ::protozero::ConstChars source_location_url() const { return at<6>().as_string(); }
  bool has_source_location_function_name() const { return at<7>().valid(); }
  ::protozero::ConstChars source_location_function_name() const { return at<7>().as_string(); }
  bool has_source_location_char_position() const { return at<8>().valid(); }
  int64_t source_location_char_position() const { return at<8>().as_int64(); }
  bool has_invoker_type() const { return at<9>().valid(); }
  int32_t invoker_type() const { return at<9>().as_int32(); }
  bool has_third_party_technology() const { return at<10>().valid(); }
  int32_t third_party_technology() const { return at<10>().as_int32(); }
};

class AnimationFrameScriptTimingInfo : public ::protozero::Message {
 public:
  using Decoder = AnimationFrameScriptTimingInfo_Decoder;
  enum : int32_t {
    kStyleDurationMsFieldNumber = 1,
    kLayoutDurationMsFieldNumber = 2,
    kPauseDurationMsFieldNumber = 3,
    kClassLikeNameFieldNumber = 4,
    kPropertyLikeNameFieldNumber = 5,
    kSourceLocationUrlFieldNumber = 6,
    kSourceLocationFunctionNameFieldNumber = 7,
    kSourceLocationCharPositionFieldNumber = 8,
    kInvokerTypeFieldNumber = 9,
    kThirdPartyTechnologyFieldNumber = 10,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AnimationFrameScriptTimingInfo"; }


  using InvokerType = ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType;
  static inline const char* InvokerType_Name(InvokerType value) {
    return ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_InvokerType_Name(value);
  }

  using ThirdPartyTechnology = ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology;
  static inline const char* ThirdPartyTechnology_Name(ThirdPartyTechnology value) {
    return ::perfetto::protos::pbzero::AnimationFrameScriptTimingInfo_ThirdPartyTechnology_Name(value);
  }
  static inline const InvokerType UNDEFINED = InvokerType::UNDEFINED;
  static inline const InvokerType CLASSIC_SCRIPT = InvokerType::CLASSIC_SCRIPT;
  static inline const InvokerType MODULE_SCRIPT = InvokerType::MODULE_SCRIPT;
  static inline const InvokerType USER_CALLBACK = InvokerType::USER_CALLBACK;
  static inline const InvokerType EVENT_HANDLER = InvokerType::EVENT_HANDLER;
  static inline const InvokerType PROMISE_RESOLVE = InvokerType::PROMISE_RESOLVE;
  static inline const InvokerType PROMISE_REJECT = InvokerType::PROMISE_REJECT;
  static inline const ThirdPartyTechnology UNSPECIFIED = ThirdPartyTechnology::UNSPECIFIED;
  static inline const ThirdPartyTechnology NONE = ThirdPartyTechnology::NONE;
  static inline const ThirdPartyTechnology WORD_PRESS = ThirdPartyTechnology::WORD_PRESS;
  static inline const ThirdPartyTechnology GOOGLE_ANALYTICS = ThirdPartyTechnology::GOOGLE_ANALYTICS;
  static inline const ThirdPartyTechnology GOOGLE_FONT_API = ThirdPartyTechnology::GOOGLE_FONT_API;

  using FieldMetadata_StyleDurationMs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_StyleDurationMs kStyleDurationMs{};
  void set_style_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_StyleDurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayoutDurationMs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_LayoutDurationMs kLayoutDurationMs{};
  void set_layout_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayoutDurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PauseDurationMs =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_PauseDurationMs kPauseDurationMs{};
  void set_pause_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PauseDurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ClassLikeName =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_ClassLikeName kClassLikeName{};
  void set_class_like_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_ClassLikeName::kFieldId, data, size);
  }
  void set_class_like_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_ClassLikeName::kFieldId, chars.data, chars.size);
  }
  void set_class_like_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_ClassLikeName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PropertyLikeName =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_PropertyLikeName kPropertyLikeName{};
  void set_property_like_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_PropertyLikeName::kFieldId, data, size);
  }
  void set_property_like_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_PropertyLikeName::kFieldId, chars.data, chars.size);
  }
  void set_property_like_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_PropertyLikeName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceLocationUrl =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_SourceLocationUrl kSourceLocationUrl{};
  void set_source_location_url(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SourceLocationUrl::kFieldId, data, size);
  }
  void set_source_location_url(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SourceLocationUrl::kFieldId, chars.data, chars.size);
  }
  void set_source_location_url(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceLocationUrl::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceLocationFunctionName =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_SourceLocationFunctionName kSourceLocationFunctionName{};
  void set_source_location_function_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SourceLocationFunctionName::kFieldId, data, size);
  }
  void set_source_location_function_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SourceLocationFunctionName::kFieldId, chars.data, chars.size);
  }
  void set_source_location_function_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceLocationFunctionName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceLocationCharPosition =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_SourceLocationCharPosition kSourceLocationCharPosition{};
  void set_source_location_char_position(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceLocationCharPosition::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InvokerType =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      AnimationFrameScriptTimingInfo_InvokerType,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_InvokerType kInvokerType{};
  void set_invoker_type(AnimationFrameScriptTimingInfo_InvokerType value) {
    static constexpr uint32_t field_id = FieldMetadata_InvokerType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ThirdPartyTechnology =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      AnimationFrameScriptTimingInfo_ThirdPartyTechnology,
      AnimationFrameScriptTimingInfo>;

  static constexpr FieldMetadata_ThirdPartyTechnology kThirdPartyTechnology{};
  void set_third_party_technology(AnimationFrameScriptTimingInfo_ThirdPartyTechnology value) {
    static constexpr uint32_t field_id = FieldMetadata_ThirdPartyTechnology::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class AnimationFrameTimingInfo_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AnimationFrameTimingInfo_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AnimationFrameTimingInfo_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AnimationFrameTimingInfo_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_blocking_duration_ms() const { return at<1>().valid(); }
  int64_t blocking_duration_ms() const { return at<1>().as_int64(); }
  bool has_duration_ms() const { return at<2>().valid(); }
  int64_t duration_ms() const { return at<2>().as_int64(); }
  bool has_num_scripts() const { return at<3>().valid(); }
  int64_t num_scripts() const { return at<3>().as_int64(); }
};

class AnimationFrameTimingInfo : public ::protozero::Message {
 public:
  using Decoder = AnimationFrameTimingInfo_Decoder;
  enum : int32_t {
    kBlockingDurationMsFieldNumber = 1,
    kDurationMsFieldNumber = 2,
    kNumScriptsFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AnimationFrameTimingInfo"; }


  using FieldMetadata_BlockingDurationMs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AnimationFrameTimingInfo>;

  static constexpr FieldMetadata_BlockingDurationMs kBlockingDurationMs{};
  void set_blocking_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BlockingDurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DurationMs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AnimationFrameTimingInfo>;

  static constexpr FieldMetadata_DurationMs kDurationMs{};
  void set_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NumScripts =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AnimationFrameTimingInfo>;

  static constexpr FieldMetadata_NumScripts kNumScripts{};
  void set_num_scripts(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NumScripts::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class WebViewStartup_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  WebViewStartup_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit WebViewStartup_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit WebViewStartup_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_from_ui_thread() const { return at<1>().valid(); }
  bool from_ui_thread() const { return at<1>().as_bool(); }
  bool has_call_site() const { return at<2>().valid(); }
  int32_t call_site() const { return at<2>().as_int32(); }
};

class WebViewStartup : public ::protozero::Message {
 public:
  using Decoder = WebViewStartup_Decoder;
  enum : int32_t {
    kFromUiThreadFieldNumber = 1,
    kCallSiteFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.WebViewStartup"; }


  using CallSite = ::perfetto::protos::pbzero::WebViewStartup_CallSite;
  static inline const char* CallSite_Name(CallSite value) {
    return ::perfetto::protos::pbzero::WebViewStartup_CallSite_Name(value);
  }
  static inline const CallSite GET_AW_TRACING_CONTROLLER = CallSite::GET_AW_TRACING_CONTROLLER;
  static inline const CallSite GET_AW_PROXY_CONTROLLER = CallSite::GET_AW_PROXY_CONTROLLER;
  static inline const CallSite WEBVIEW_INSTANCE = CallSite::WEBVIEW_INSTANCE;
  static inline const CallSite GET_STATICS = CallSite::GET_STATICS;
  static inline const CallSite GET_DEFAULT_GEOLOCATION_PERMISSIONS = CallSite::GET_DEFAULT_GEOLOCATION_PERMISSIONS;
  static inline const CallSite GET_DEFAULT_SERVICE_WORKER_CONTROLLER = CallSite::GET_DEFAULT_SERVICE_WORKER_CONTROLLER;
  static inline const CallSite GET_WEB_ICON_DATABASE = CallSite::GET_WEB_ICON_DATABASE;
  static inline const CallSite GET_DEFAULT_WEB_STORAGE = CallSite::GET_DEFAULT_WEB_STORAGE;
  static inline const CallSite GET_DEFAULT_WEBVIEW_DATABASE = CallSite::GET_DEFAULT_WEBVIEW_DATABASE;
  static inline const CallSite GET_TRACING_CONTROLLER = CallSite::GET_TRACING_CONTROLLER;

  using FieldMetadata_FromUiThread =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      WebViewStartup>;

  static constexpr FieldMetadata_FromUiThread kFromUiThread{};
  void set_from_ui_thread(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_FromUiThread::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CallSite =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      WebViewStartup_CallSite,
      WebViewStartup>;

  static constexpr FieldMetadata_CallSite kCallSite{};
  void set_call_site(WebViewStartup_CallSite value) {
    static constexpr uint32_t field_id = FieldMetadata_CallSite::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class CompositorTimingHistoryV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  CompositorTimingHistoryV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit CompositorTimingHistoryV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit CompositorTimingHistoryV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_begin_main_frame_queue_critical_estimate_delta_us() const { return at<1>().valid(); }
  int64_t begin_main_frame_queue_critical_estimate_delta_us() const { return at<1>().as_int64(); }
  bool has_begin_main_frame_queue_not_critical_estimate_delta_us() const { return at<2>().valid(); }
  int64_t begin_main_frame_queue_not_critical_estimate_delta_us() const { return at<2>().as_int64(); }
  bool has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const { return at<3>().valid(); }
  int64_t begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const { return at<3>().as_int64(); }
  bool has_commit_to_ready_to_activate_estimate_delta_us() const { return at<4>().valid(); }
  int64_t commit_to_ready_to_activate_estimate_delta_us() const { return at<4>().as_int64(); }
  bool has_prepare_tiles_estimate_delta_us() const { return at<5>().valid(); }
  int64_t prepare_tiles_estimate_delta_us() const { return at<5>().as_int64(); }
  bool has_activate_estimate_delta_us() const { return at<6>().valid(); }
  int64_t activate_estimate_delta_us() const { return at<6>().as_int64(); }
  bool has_draw_estimate_delta_us() const { return at<7>().valid(); }
  int64_t draw_estimate_delta_us() const { return at<7>().as_int64(); }
};

class CompositorTimingHistoryV2 : public ::protozero::Message {
 public:
  using Decoder = CompositorTimingHistoryV2_Decoder;
  enum : int32_t {
    kBeginMainFrameQueueCriticalEstimateDeltaUsFieldNumber = 1,
    kBeginMainFrameQueueNotCriticalEstimateDeltaUsFieldNumber = 2,
    kBeginMainFrameStartToReadyToCommitEstimateDeltaUsFieldNumber = 3,
    kCommitToReadyToActivateEstimateDeltaUsFieldNumber = 4,
    kPrepareTilesEstimateDeltaUsFieldNumber = 5,
    kActivateEstimateDeltaUsFieldNumber = 6,
    kDrawEstimateDeltaUsFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.CompositorTimingHistoryV2"; }


  using FieldMetadata_BeginMainFrameQueueCriticalEstimateDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CompositorTimingHistoryV2>;

  static constexpr FieldMetadata_BeginMainFrameQueueCriticalEstimateDeltaUs kBeginMainFrameQueueCriticalEstimateDeltaUs{};
  void set_begin_main_frame_queue_critical_estimate_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginMainFrameQueueCriticalEstimateDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginMainFrameQueueNotCriticalEstimateDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CompositorTimingHistoryV2>;

  static constexpr FieldMetadata_BeginMainFrameQueueNotCriticalEstimateDeltaUs kBeginMainFrameQueueNotCriticalEstimateDeltaUs{};
  void set_begin_main_frame_queue_not_critical_estimate_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginMainFrameQueueNotCriticalEstimateDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginMainFrameStartToReadyToCommitEstimateDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CompositorTimingHistoryV2>;

  static constexpr FieldMetadata_BeginMainFrameStartToReadyToCommitEstimateDeltaUs kBeginMainFrameStartToReadyToCommitEstimateDeltaUs{};
  void set_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginMainFrameStartToReadyToCommitEstimateDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CommitToReadyToActivateEstimateDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CompositorTimingHistoryV2>;

  static constexpr FieldMetadata_CommitToReadyToActivateEstimateDeltaUs kCommitToReadyToActivateEstimateDeltaUs{};
  void set_commit_to_ready_to_activate_estimate_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CommitToReadyToActivateEstimateDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PrepareTilesEstimateDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CompositorTimingHistoryV2>;

  static constexpr FieldMetadata_PrepareTilesEstimateDeltaUs kPrepareTilesEstimateDeltaUs{};
  void set_prepare_tiles_estimate_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PrepareTilesEstimateDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ActivateEstimateDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CompositorTimingHistoryV2>;

  static constexpr FieldMetadata_ActivateEstimateDeltaUs kActivateEstimateDeltaUs{};
  void set_activate_estimate_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ActivateEstimateDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DrawEstimateDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CompositorTimingHistoryV2>;

  static constexpr FieldMetadata_DrawEstimateDeltaUs kDrawEstimateDeltaUs{};
  void set_draw_estimate_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DrawEstimateDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class BeginFrameSourceStateV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BeginFrameSourceStateV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BeginFrameSourceStateV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BeginFrameSourceStateV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_source_id() const { return at<1>().valid(); }
  uint32_t source_id() const { return at<1>().as_uint32(); }
  bool has_paused() const { return at<2>().valid(); }
  bool paused() const { return at<2>().as_bool(); }
  bool has_num_observers() const { return at<3>().valid(); }
  uint32_t num_observers() const { return at<3>().as_uint32(); }
  bool has_last_begin_frame_args() const { return at<4>().valid(); }
  ::protozero::ConstBytes last_begin_frame_args() const { return at<4>().as_bytes(); }
};

class BeginFrameSourceStateV2 : public ::protozero::Message {
 public:
  using Decoder = BeginFrameSourceStateV2_Decoder;
  enum : int32_t {
    kSourceIdFieldNumber = 1,
    kPausedFieldNumber = 2,
    kNumObserversFieldNumber = 3,
    kLastBeginFrameArgsFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BeginFrameSourceStateV2"; }


  using FieldMetadata_SourceId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      BeginFrameSourceStateV2>;

  static constexpr FieldMetadata_SourceId kSourceId{};
  void set_source_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Paused =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      BeginFrameSourceStateV2>;

  static constexpr FieldMetadata_Paused kPaused{};
  void set_paused(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_Paused::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NumObservers =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      BeginFrameSourceStateV2>;

  static constexpr FieldMetadata_NumObservers kNumObservers{};
  void set_num_observers(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NumObservers::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastBeginFrameArgs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginFrameArgsV2,
      BeginFrameSourceStateV2>;

  static constexpr FieldMetadata_LastBeginFrameArgs kLastBeginFrameArgs{};
  template <typename T = BeginFrameArgsV2> T* set_last_begin_frame_args() {
    return BeginNestedMessage<T>(4);
  }

};

class BeginFrameObserverStateV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BeginFrameObserverStateV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BeginFrameObserverStateV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BeginFrameObserverStateV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_dropped_begin_frame_args() const { return at<1>().valid(); }
  int64_t dropped_begin_frame_args() const { return at<1>().as_int64(); }
  bool has_last_begin_frame_args() const { return at<2>().valid(); }
  ::protozero::ConstBytes last_begin_frame_args() const { return at<2>().as_bytes(); }
};

class BeginFrameObserverStateV2 : public ::protozero::Message {
 public:
  using Decoder = BeginFrameObserverStateV2_Decoder;
  enum : int32_t {
    kDroppedBeginFrameArgsFieldNumber = 1,
    kLastBeginFrameArgsFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BeginFrameObserverStateV2"; }


  using FieldMetadata_DroppedBeginFrameArgs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginFrameObserverStateV2>;

  static constexpr FieldMetadata_DroppedBeginFrameArgs kDroppedBeginFrameArgs{};
  void set_dropped_begin_frame_args(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DroppedBeginFrameArgs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastBeginFrameArgs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginFrameArgsV2,
      BeginFrameObserverStateV2>;

  static constexpr FieldMetadata_LastBeginFrameArgs kLastBeginFrameArgs{};
  template <typename T = BeginFrameArgsV2> T* set_last_begin_frame_args() {
    return BeginNestedMessage<T>(2);
  }

};

class BeginImplFrameArgsV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BeginImplFrameArgsV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BeginImplFrameArgsV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BeginImplFrameArgsV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_updated_at_us() const { return at<1>().valid(); }
  int64_t updated_at_us() const { return at<1>().as_int64(); }
  bool has_finished_at_us() const { return at<2>().valid(); }
  int64_t finished_at_us() const { return at<2>().as_int64(); }
  bool has_state() const { return at<3>().valid(); }
  int32_t state() const { return at<3>().as_int32(); }
  bool has_current_args() const { return at<4>().valid(); }
  ::protozero::ConstBytes current_args() const { return at<4>().as_bytes(); }
  bool has_last_args() const { return at<5>().valid(); }
  ::protozero::ConstBytes last_args() const { return at<5>().as_bytes(); }
  bool has_timestamps_in_us() const { return at<6>().valid(); }
  ::protozero::ConstBytes timestamps_in_us() const { return at<6>().as_bytes(); }
};

class BeginImplFrameArgsV2 : public ::protozero::Message {
 public:
  using Decoder = BeginImplFrameArgsV2_Decoder;
  enum : int32_t {
    kUpdatedAtUsFieldNumber = 1,
    kFinishedAtUsFieldNumber = 2,
    kStateFieldNumber = 3,
    kCurrentArgsFieldNumber = 4,
    kLastArgsFieldNumber = 5,
    kTimestampsInUsFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BeginImplFrameArgsV2"; }

  using TimestampsInUs = ::perfetto::protos::pbzero::BeginImplFrameArgsV2_TimestampsInUs;

  using State = ::perfetto::protos::pbzero::BeginImplFrameArgsV2_State;
  static inline const char* State_Name(State value) {
    return ::perfetto::protos::pbzero::BeginImplFrameArgsV2_State_Name(value);
  }
  static inline const State BEGIN_FRAME_FINISHED = State::BEGIN_FRAME_FINISHED;
  static inline const State BEGIN_FRAME_USING = State::BEGIN_FRAME_USING;

  using FieldMetadata_UpdatedAtUs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2>;

  static constexpr FieldMetadata_UpdatedAtUs kUpdatedAtUs{};
  void set_updated_at_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_UpdatedAtUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FinishedAtUs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2>;

  static constexpr FieldMetadata_FinishedAtUs kFinishedAtUs{};
  void set_finished_at_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FinishedAtUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_State =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BeginImplFrameArgsV2_State,
      BeginImplFrameArgsV2>;

  static constexpr FieldMetadata_State kState{};
  void set_state(BeginImplFrameArgsV2_State value) {
    static constexpr uint32_t field_id = FieldMetadata_State::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CurrentArgs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginFrameArgsV2,
      BeginImplFrameArgsV2>;

  static constexpr FieldMetadata_CurrentArgs kCurrentArgs{};
  template <typename T = BeginFrameArgsV2> T* set_current_args() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_LastArgs =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginFrameArgsV2,
      BeginImplFrameArgsV2>;

  static constexpr FieldMetadata_LastArgs kLastArgs{};
  template <typename T = BeginFrameArgsV2> T* set_last_args() {
    return BeginNestedMessage<T>(5);
  }


  using FieldMetadata_TimestampsInUs =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginImplFrameArgsV2_TimestampsInUs,
      BeginImplFrameArgsV2>;

  static constexpr FieldMetadata_TimestampsInUs kTimestampsInUs{};
  template <typename T = BeginImplFrameArgsV2_TimestampsInUs> T* set_timestamps_in_us() {
    return BeginNestedMessage<T>(6);
  }

};

class BeginImplFrameArgsV2_TimestampsInUs_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BeginImplFrameArgsV2_TimestampsInUs_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BeginImplFrameArgsV2_TimestampsInUs_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BeginImplFrameArgsV2_TimestampsInUs_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_interval_delta() const { return at<1>().valid(); }
  int64_t interval_delta() const { return at<1>().as_int64(); }
  bool has_now_to_deadline_delta() const { return at<2>().valid(); }
  int64_t now_to_deadline_delta() const { return at<2>().as_int64(); }
  bool has_frame_time_to_now_delta() const { return at<3>().valid(); }
  int64_t frame_time_to_now_delta() const { return at<3>().as_int64(); }
  bool has_frame_time_to_deadline_delta() const { return at<4>().valid(); }
  int64_t frame_time_to_deadline_delta() const { return at<4>().as_int64(); }
  bool has_now() const { return at<5>().valid(); }
  int64_t now() const { return at<5>().as_int64(); }
  bool has_frame_time() const { return at<6>().valid(); }
  int64_t frame_time() const { return at<6>().as_int64(); }
  bool has_deadline() const { return at<7>().valid(); }
  int64_t deadline() const { return at<7>().as_int64(); }
};

class BeginImplFrameArgsV2_TimestampsInUs : public ::protozero::Message {
 public:
  using Decoder = BeginImplFrameArgsV2_TimestampsInUs_Decoder;
  enum : int32_t {
    kIntervalDeltaFieldNumber = 1,
    kNowToDeadlineDeltaFieldNumber = 2,
    kFrameTimeToNowDeltaFieldNumber = 3,
    kFrameTimeToDeadlineDeltaFieldNumber = 4,
    kNowFieldNumber = 5,
    kFrameTimeFieldNumber = 6,
    kDeadlineFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BeginImplFrameArgsV2.TimestampsInUs"; }


  using FieldMetadata_IntervalDelta =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2_TimestampsInUs>;

  static constexpr FieldMetadata_IntervalDelta kIntervalDelta{};
  void set_interval_delta(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IntervalDelta::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NowToDeadlineDelta =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2_TimestampsInUs>;

  static constexpr FieldMetadata_NowToDeadlineDelta kNowToDeadlineDelta{};
  void set_now_to_deadline_delta(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NowToDeadlineDelta::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameTimeToNowDelta =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2_TimestampsInUs>;

  static constexpr FieldMetadata_FrameTimeToNowDelta kFrameTimeToNowDelta{};
  void set_frame_time_to_now_delta(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTimeToNowDelta::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameTimeToDeadlineDelta =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2_TimestampsInUs>;

  static constexpr FieldMetadata_FrameTimeToDeadlineDelta kFrameTimeToDeadlineDelta{};
  void set_frame_time_to_deadline_delta(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTimeToDeadlineDelta::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Now =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2_TimestampsInUs>;

  static constexpr FieldMetadata_Now kNow{};
  void set_now(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Now::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameTime =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2_TimestampsInUs>;

  static constexpr FieldMetadata_FrameTime kFrameTime{};
  void set_frame_time(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTime::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Deadline =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginImplFrameArgsV2_TimestampsInUs>;

  static constexpr FieldMetadata_Deadline kDeadline{};
  void set_deadline(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Deadline::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class BeginFrameArgsV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/11, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BeginFrameArgsV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BeginFrameArgsV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BeginFrameArgsV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_type() const { return at<1>().valid(); }
  int32_t type() const { return at<1>().as_int32(); }
  bool has_source_id() const { return at<2>().valid(); }
  uint64_t source_id() const { return at<2>().as_uint64(); }
  bool has_sequence_number() const { return at<3>().valid(); }
  uint64_t sequence_number() const { return at<3>().as_uint64(); }
  bool has_frame_time_us() const { return at<4>().valid(); }
  int64_t frame_time_us() const { return at<4>().as_int64(); }
  bool has_deadline_us() const { return at<5>().valid(); }
  int64_t deadline_us() const { return at<5>().as_int64(); }
  bool has_interval_delta_us() const { return at<6>().valid(); }
  int64_t interval_delta_us() const { return at<6>().as_int64(); }
  bool has_on_critical_path() const { return at<7>().valid(); }
  bool on_critical_path() const { return at<7>().as_bool(); }
  bool has_animate_only() const { return at<8>().valid(); }
  bool animate_only() const { return at<8>().as_bool(); }
  bool has_source_location_iid() const { return at<9>().valid(); }
  uint64_t source_location_iid() const { return at<9>().as_uint64(); }
  bool has_source_location() const { return at<10>().valid(); }
  ::protozero::ConstBytes source_location() const { return at<10>().as_bytes(); }
  bool has_frames_throttled_since_last() const { return at<11>().valid(); }
  int64_t frames_throttled_since_last() const { return at<11>().as_int64(); }
};

class BeginFrameArgsV2 : public ::protozero::Message {
 public:
  using Decoder = BeginFrameArgsV2_Decoder;
  enum : int32_t {
    kTypeFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kSequenceNumberFieldNumber = 3,
    kFrameTimeUsFieldNumber = 4,
    kDeadlineUsFieldNumber = 5,
    kIntervalDeltaUsFieldNumber = 6,
    kOnCriticalPathFieldNumber = 7,
    kAnimateOnlyFieldNumber = 8,
    kSourceLocationIidFieldNumber = 9,
    kSourceLocationFieldNumber = 10,
    kFramesThrottledSinceLastFieldNumber = 11,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BeginFrameArgsV2"; }


  using BeginFrameArgsType = ::perfetto::protos::pbzero::BeginFrameArgsV2_BeginFrameArgsType;
  static inline const char* BeginFrameArgsType_Name(BeginFrameArgsType value) {
    return ::perfetto::protos::pbzero::BeginFrameArgsV2_BeginFrameArgsType_Name(value);
  }
  static inline const BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED = BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED;
  static inline const BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_INVALID = BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_INVALID;
  static inline const BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_NORMAL = BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_NORMAL;
  static inline const BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_MISSED = BeginFrameArgsType::BEGIN_FRAME_ARGS_TYPE_MISSED;

  using FieldMetadata_Type =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BeginFrameArgsV2_BeginFrameArgsType,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_Type kType{};
  void set_type(BeginFrameArgsV2_BeginFrameArgsType value) {
    static constexpr uint32_t field_id = FieldMetadata_Type::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_SourceId kSourceId{};
  void set_source_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SequenceNumber =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_SequenceNumber kSequenceNumber{};
  void set_sequence_number(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SequenceNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameTimeUs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_FrameTimeUs kFrameTimeUs{};
  void set_frame_time_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTimeUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DeadlineUs =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_DeadlineUs kDeadlineUs{};
  void set_deadline_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DeadlineUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IntervalDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_IntervalDeltaUs kIntervalDeltaUs{};
  void set_interval_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IntervalDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OnCriticalPath =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_OnCriticalPath kOnCriticalPath{};
  void set_on_critical_path(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_OnCriticalPath::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AnimateOnly =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_AnimateOnly kAnimateOnly{};
  void set_animate_only(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_AnimateOnly::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceLocationIid =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_SourceLocationIid kSourceLocationIid{};
  void set_source_location_iid(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceLocationIid::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceLocation =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SourceLocation,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_SourceLocation kSourceLocation{};
  template <typename T = SourceLocation> T* set_source_location() {
    return BeginNestedMessage<T>(10);
  }


  using FieldMetadata_FramesThrottledSinceLast =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BeginFrameArgsV2>;

  static constexpr FieldMetadata_FramesThrottledSinceLast kFramesThrottledSinceLast{};
  void set_frames_throttled_since_last(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FramesThrottledSinceLast::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class ChromeCompositorStateMachineV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeCompositorStateMachineV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeCompositorStateMachineV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeCompositorStateMachineV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_major_state() const { return at<1>().valid(); }
  ::protozero::ConstBytes major_state() const { return at<1>().as_bytes(); }
  bool has_minor_state() const { return at<2>().valid(); }
  ::protozero::ConstBytes minor_state() const { return at<2>().as_bytes(); }
};

class ChromeCompositorStateMachineV2 : public ::protozero::Message {
 public:
  using Decoder = ChromeCompositorStateMachineV2_Decoder;
  enum : int32_t {
    kMajorStateFieldNumber = 1,
    kMinorStateFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeCompositorStateMachineV2"; }

  using MajorStateV2 = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2;
  using MinorStateV2 = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2;

  using FieldMetadata_MajorState =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeCompositorStateMachineV2_MajorStateV2,
      ChromeCompositorStateMachineV2>;

  static constexpr FieldMetadata_MajorState kMajorState{};
  template <typename T = ChromeCompositorStateMachineV2_MajorStateV2> T* set_major_state() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_MinorState =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeCompositorStateMachineV2_MinorStateV2,
      ChromeCompositorStateMachineV2>;

  static constexpr FieldMetadata_MinorState kMinorState{};
  template <typename T = ChromeCompositorStateMachineV2_MinorStateV2> T* set_minor_state() {
    return BeginNestedMessage<T>(2);
  }

};

class ChromeCompositorStateMachineV2_MinorStateV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/47, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeCompositorStateMachineV2_MinorStateV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeCompositorStateMachineV2_MinorStateV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeCompositorStateMachineV2_MinorStateV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_commit_count() const { return at<1>().valid(); }
  int32_t commit_count() const { return at<1>().as_int32(); }
  bool has_current_frame_number() const { return at<2>().valid(); }
  int32_t current_frame_number() const { return at<2>().as_int32(); }
  bool has_last_frame_number_submit_performed() const { return at<3>().valid(); }
  int32_t last_frame_number_submit_performed() const { return at<3>().as_int32(); }
  bool has_last_frame_number_draw_performed() const { return at<4>().valid(); }
  int32_t last_frame_number_draw_performed() const { return at<4>().as_int32(); }
  bool has_last_frame_number_begin_main_frame_sent() const { return at<5>().valid(); }
  int32_t last_frame_number_begin_main_frame_sent() const { return at<5>().as_int32(); }
  bool has_did_draw() const { return at<6>().valid(); }
  bool did_draw() const { return at<6>().as_bool(); }
  bool has_did_send_begin_main_frame_for_current_frame() const { return at<7>().valid(); }
  bool did_send_begin_main_frame_for_current_frame() const { return at<7>().as_bool(); }
  bool has_did_notify_begin_main_frame_not_expected_until() const { return at<8>().valid(); }
  bool did_notify_begin_main_frame_not_expected_until() const { return at<8>().as_bool(); }
  bool has_did_notify_begin_main_frame_not_expected_soon() const { return at<9>().valid(); }
  bool did_notify_begin_main_frame_not_expected_soon() const { return at<9>().as_bool(); }
  bool has_wants_begin_main_frame_not_expected() const { return at<10>().valid(); }
  bool wants_begin_main_frame_not_expected() const { return at<10>().as_bool(); }
  bool has_did_commit_during_frame() const { return at<11>().valid(); }
  bool did_commit_during_frame() const { return at<11>().as_bool(); }
  bool has_did_invalidate_layer_tree_frame_sink() const { return at<12>().valid(); }
  bool did_invalidate_layer_tree_frame_sink() const { return at<12>().as_bool(); }
  bool has_did_perform_impl_side_invalidaion() const { return at<13>().valid(); }
  bool did_perform_impl_side_invalidaion() const { return at<13>().as_bool(); }
  bool has_did_prepare_tiles() const { return at<14>().valid(); }
  bool did_prepare_tiles() const { return at<14>().as_bool(); }
  bool has_consecutive_checkerboard_animations() const { return at<15>().valid(); }
  int32_t consecutive_checkerboard_animations() const { return at<15>().as_int32(); }
  bool has_pending_submit_frames() const { return at<16>().valid(); }
  int32_t pending_submit_frames() const { return at<16>().as_int32(); }
  bool has_submit_frames_with_current_layer_tree_frame_sink() const { return at<17>().valid(); }
  int32_t submit_frames_with_current_layer_tree_frame_sink() const { return at<17>().as_int32(); }
  bool has_needs_redraw() const { return at<18>().valid(); }
  bool needs_redraw() const { return at<18>().as_bool(); }
  bool has_needs_prepare_tiles() const { return at<19>().valid(); }
  bool needs_prepare_tiles() const { return at<19>().as_bool(); }
  bool has_needs_begin_main_frame() const { return at<20>().valid(); }
  bool needs_begin_main_frame() const { return at<20>().as_bool(); }
  bool has_needs_one_begin_impl_frame() const { return at<21>().valid(); }
  bool needs_one_begin_impl_frame() const { return at<21>().as_bool(); }
  bool has_visible() const { return at<22>().valid(); }
  bool visible() const { return at<22>().as_bool(); }
  bool has_begin_frame_source_paused() const { return at<23>().valid(); }
  bool begin_frame_source_paused() const { return at<23>().as_bool(); }
  bool has_can_draw() const { return at<24>().valid(); }
  bool can_draw() const { return at<24>().as_bool(); }
  bool has_resourceless_draw() const { return at<25>().valid(); }
  bool resourceless_draw() const { return at<25>().as_bool(); }
  bool has_has_pending_tree() const { return at<26>().valid(); }
  bool has_pending_tree() const { return at<26>().as_bool(); }
  bool has_pending_tree_is_ready_for_activation() const { return at<27>().valid(); }
  bool pending_tree_is_ready_for_activation() const { return at<27>().as_bool(); }
  bool has_active_tree_needs_first_draw() const { return at<28>().valid(); }
  bool active_tree_needs_first_draw() const { return at<28>().as_bool(); }
  bool has_active_tree_is_ready_to_draw() const { return at<29>().valid(); }
  bool active_tree_is_ready_to_draw() const { return at<29>().as_bool(); }
  bool has_did_create_and_initialize_first_layer_tree_frame_sink() const { return at<30>().valid(); }
  bool did_create_and_initialize_first_layer_tree_frame_sink() const { return at<30>().as_bool(); }
  bool has_tree_priority() const { return at<31>().valid(); }
  int32_t tree_priority() const { return at<31>().as_int32(); }
  bool has_scroll_handler_state() const { return at<32>().valid(); }
  int32_t scroll_handler_state() const { return at<32>().as_int32(); }
  bool has_critical_begin_main_frame_to_activate_is_fast() const { return at<33>().valid(); }
  bool critical_begin_main_frame_to_activate_is_fast() const { return at<33>().as_bool(); }
  bool has_main_thread_missed_last_deadline() const { return at<34>().valid(); }
  bool main_thread_missed_last_deadline() const { return at<34>().as_bool(); }
  bool has_video_needs_begin_frames() const { return at<36>().valid(); }
  bool video_needs_begin_frames() const { return at<36>().as_bool(); }
  bool has_defer_begin_main_frame() const { return at<37>().valid(); }
  bool defer_begin_main_frame() const { return at<37>().as_bool(); }
  bool has_last_commit_had_no_updates() const { return at<38>().valid(); }
  bool last_commit_had_no_updates() const { return at<38>().as_bool(); }
  bool has_did_draw_in_last_frame() const { return at<39>().valid(); }
  bool did_draw_in_last_frame() const { return at<39>().as_bool(); }
  bool has_did_submit_in_last_frame() const { return at<40>().valid(); }
  bool did_submit_in_last_frame() const { return at<40>().as_bool(); }
  bool has_needs_impl_side_invalidation() const { return at<41>().valid(); }
  bool needs_impl_side_invalidation() const { return at<41>().as_bool(); }
  bool has_current_pending_tree_is_impl_side() const { return at<42>().valid(); }
  bool current_pending_tree_is_impl_side() const { return at<42>().as_bool(); }
  bool has_previous_pending_tree_was_impl_side() const { return at<43>().valid(); }
  bool previous_pending_tree_was_impl_side() const { return at<43>().as_bool(); }
  bool has_processing_animation_worklets_for_active_tree() const { return at<44>().valid(); }
  bool processing_animation_worklets_for_active_tree() const { return at<44>().as_bool(); }
  bool has_processing_animation_worklets_for_pending_tree() const { return at<45>().valid(); }
  bool processing_animation_worklets_for_pending_tree() const { return at<45>().as_bool(); }
  bool has_processing_paint_worklets_for_pending_tree() const { return at<46>().valid(); }
  bool processing_paint_worklets_for_pending_tree() const { return at<46>().as_bool(); }
  bool has_should_warm_up() const { return at<47>().valid(); }
  bool should_warm_up() const { return at<47>().as_bool(); }
};

class ChromeCompositorStateMachineV2_MinorStateV2 : public ::protozero::Message {
 public:
  using Decoder = ChromeCompositorStateMachineV2_MinorStateV2_Decoder;
  enum : int32_t {
    kCommitCountFieldNumber = 1,
    kCurrentFrameNumberFieldNumber = 2,
    kLastFrameNumberSubmitPerformedFieldNumber = 3,
    kLastFrameNumberDrawPerformedFieldNumber = 4,
    kLastFrameNumberBeginMainFrameSentFieldNumber = 5,
    kDidDrawFieldNumber = 6,
    kDidSendBeginMainFrameForCurrentFrameFieldNumber = 7,
    kDidNotifyBeginMainFrameNotExpectedUntilFieldNumber = 8,
    kDidNotifyBeginMainFrameNotExpectedSoonFieldNumber = 9,
    kWantsBeginMainFrameNotExpectedFieldNumber = 10,
    kDidCommitDuringFrameFieldNumber = 11,
    kDidInvalidateLayerTreeFrameSinkFieldNumber = 12,
    kDidPerformImplSideInvalidaionFieldNumber = 13,
    kDidPrepareTilesFieldNumber = 14,
    kConsecutiveCheckerboardAnimationsFieldNumber = 15,
    kPendingSubmitFramesFieldNumber = 16,
    kSubmitFramesWithCurrentLayerTreeFrameSinkFieldNumber = 17,
    kNeedsRedrawFieldNumber = 18,
    kNeedsPrepareTilesFieldNumber = 19,
    kNeedsBeginMainFrameFieldNumber = 20,
    kNeedsOneBeginImplFrameFieldNumber = 21,
    kVisibleFieldNumber = 22,
    kBeginFrameSourcePausedFieldNumber = 23,
    kCanDrawFieldNumber = 24,
    kResourcelessDrawFieldNumber = 25,
    kHasPendingTreeFieldNumber = 26,
    kPendingTreeIsReadyForActivationFieldNumber = 27,
    kActiveTreeNeedsFirstDrawFieldNumber = 28,
    kActiveTreeIsReadyToDrawFieldNumber = 29,
    kDidCreateAndInitializeFirstLayerTreeFrameSinkFieldNumber = 30,
    kTreePriorityFieldNumber = 31,
    kScrollHandlerStateFieldNumber = 32,
    kCriticalBeginMainFrameToActivateIsFastFieldNumber = 33,
    kMainThreadMissedLastDeadlineFieldNumber = 34,
    kVideoNeedsBeginFramesFieldNumber = 36,
    kDeferBeginMainFrameFieldNumber = 37,
    kLastCommitHadNoUpdatesFieldNumber = 38,
    kDidDrawInLastFrameFieldNumber = 39,
    kDidSubmitInLastFrameFieldNumber = 40,
    kNeedsImplSideInvalidationFieldNumber = 41,
    kCurrentPendingTreeIsImplSideFieldNumber = 42,
    kPreviousPendingTreeWasImplSideFieldNumber = 43,
    kProcessingAnimationWorkletsForActiveTreeFieldNumber = 44,
    kProcessingAnimationWorkletsForPendingTreeFieldNumber = 45,
    kProcessingPaintWorkletsForPendingTreeFieldNumber = 46,
    kShouldWarmUpFieldNumber = 47,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeCompositorStateMachineV2.MinorStateV2"; }


  using TreePriority = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_TreePriority;
  static inline const char* TreePriority_Name(TreePriority value) {
    return ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_TreePriority_Name(value);
  }

  using ScrollHandlerState = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState;
  static inline const char* ScrollHandlerState_Name(ScrollHandlerState value) {
    return ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState_Name(value);
  }
  static inline const TreePriority TREE_PRIORITY_UNSPECIFIED = TreePriority::TREE_PRIORITY_UNSPECIFIED;
  static inline const TreePriority TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES = TreePriority::TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES;
  static inline const TreePriority TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY = TreePriority::TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY;
  static inline const TreePriority TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY = TreePriority::TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY;
  static inline const ScrollHandlerState SCROLL_HANDLER_UNSPECIFIED = ScrollHandlerState::SCROLL_HANDLER_UNSPECIFIED;
  static inline const ScrollHandlerState SCROLL_AFFECTS_SCROLL_HANDLER = ScrollHandlerState::SCROLL_AFFECTS_SCROLL_HANDLER;
  static inline const ScrollHandlerState SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER = ScrollHandlerState::SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER;

  using FieldMetadata_CommitCount =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_CommitCount kCommitCount{};
  void set_commit_count(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CommitCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CurrentFrameNumber =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_CurrentFrameNumber kCurrentFrameNumber{};
  void set_current_frame_number(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CurrentFrameNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastFrameNumberSubmitPerformed =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_LastFrameNumberSubmitPerformed kLastFrameNumberSubmitPerformed{};
  void set_last_frame_number_submit_performed(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LastFrameNumberSubmitPerformed::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastFrameNumberDrawPerformed =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_LastFrameNumberDrawPerformed kLastFrameNumberDrawPerformed{};
  void set_last_frame_number_draw_performed(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LastFrameNumberDrawPerformed::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastFrameNumberBeginMainFrameSent =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_LastFrameNumberBeginMainFrameSent kLastFrameNumberBeginMainFrameSent{};
  void set_last_frame_number_begin_main_frame_sent(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LastFrameNumberBeginMainFrameSent::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidDraw =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidDraw kDidDraw{};
  void set_did_draw(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidDraw::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidSendBeginMainFrameForCurrentFrame =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidSendBeginMainFrameForCurrentFrame kDidSendBeginMainFrameForCurrentFrame{};
  void set_did_send_begin_main_frame_for_current_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidSendBeginMainFrameForCurrentFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidNotifyBeginMainFrameNotExpectedUntil =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidNotifyBeginMainFrameNotExpectedUntil kDidNotifyBeginMainFrameNotExpectedUntil{};
  void set_did_notify_begin_main_frame_not_expected_until(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidNotifyBeginMainFrameNotExpectedUntil::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidNotifyBeginMainFrameNotExpectedSoon =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidNotifyBeginMainFrameNotExpectedSoon kDidNotifyBeginMainFrameNotExpectedSoon{};
  void set_did_notify_begin_main_frame_not_expected_soon(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidNotifyBeginMainFrameNotExpectedSoon::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WantsBeginMainFrameNotExpected =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_WantsBeginMainFrameNotExpected kWantsBeginMainFrameNotExpected{};
  void set_wants_begin_main_frame_not_expected(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_WantsBeginMainFrameNotExpected::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidCommitDuringFrame =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidCommitDuringFrame kDidCommitDuringFrame{};
  void set_did_commit_during_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidCommitDuringFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidInvalidateLayerTreeFrameSink =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidInvalidateLayerTreeFrameSink kDidInvalidateLayerTreeFrameSink{};
  void set_did_invalidate_layer_tree_frame_sink(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidInvalidateLayerTreeFrameSink::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidPerformImplSideInvalidaion =
    ::protozero::proto_utils::FieldMetadata<
      13,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidPerformImplSideInvalidaion kDidPerformImplSideInvalidaion{};
  void set_did_perform_impl_side_invalidaion(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidPerformImplSideInvalidaion::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidPrepareTiles =
    ::protozero::proto_utils::FieldMetadata<
      14,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidPrepareTiles kDidPrepareTiles{};
  void set_did_prepare_tiles(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidPrepareTiles::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ConsecutiveCheckerboardAnimations =
    ::protozero::proto_utils::FieldMetadata<
      15,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ConsecutiveCheckerboardAnimations kConsecutiveCheckerboardAnimations{};
  void set_consecutive_checkerboard_animations(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ConsecutiveCheckerboardAnimations::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PendingSubmitFrames =
    ::protozero::proto_utils::FieldMetadata<
      16,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_PendingSubmitFrames kPendingSubmitFrames{};
  void set_pending_submit_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PendingSubmitFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SubmitFramesWithCurrentLayerTreeFrameSink =
    ::protozero::proto_utils::FieldMetadata<
      17,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_SubmitFramesWithCurrentLayerTreeFrameSink kSubmitFramesWithCurrentLayerTreeFrameSink{};
  void set_submit_frames_with_current_layer_tree_frame_sink(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SubmitFramesWithCurrentLayerTreeFrameSink::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NeedsRedraw =
    ::protozero::proto_utils::FieldMetadata<
      18,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_NeedsRedraw kNeedsRedraw{};
  void set_needs_redraw(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_NeedsRedraw::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NeedsPrepareTiles =
    ::protozero::proto_utils::FieldMetadata<
      19,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_NeedsPrepareTiles kNeedsPrepareTiles{};
  void set_needs_prepare_tiles(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_NeedsPrepareTiles::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NeedsBeginMainFrame =
    ::protozero::proto_utils::FieldMetadata<
      20,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_NeedsBeginMainFrame kNeedsBeginMainFrame{};
  void set_needs_begin_main_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_NeedsBeginMainFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NeedsOneBeginImplFrame =
    ::protozero::proto_utils::FieldMetadata<
      21,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_NeedsOneBeginImplFrame kNeedsOneBeginImplFrame{};
  void set_needs_one_begin_impl_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_NeedsOneBeginImplFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Visible =
    ::protozero::proto_utils::FieldMetadata<
      22,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_Visible kVisible{};
  void set_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_Visible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginFrameSourcePaused =
    ::protozero::proto_utils::FieldMetadata<
      23,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_BeginFrameSourcePaused kBeginFrameSourcePaused{};
  void set_begin_frame_source_paused(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginFrameSourcePaused::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CanDraw =
    ::protozero::proto_utils::FieldMetadata<
      24,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_CanDraw kCanDraw{};
  void set_can_draw(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_CanDraw::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ResourcelessDraw =
    ::protozero::proto_utils::FieldMetadata<
      25,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ResourcelessDraw kResourcelessDraw{};
  void set_resourceless_draw(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ResourcelessDraw::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasPendingTree =
    ::protozero::proto_utils::FieldMetadata<
      26,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_HasPendingTree kHasPendingTree{};
  void set_has_pending_tree(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasPendingTree::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PendingTreeIsReadyForActivation =
    ::protozero::proto_utils::FieldMetadata<
      27,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_PendingTreeIsReadyForActivation kPendingTreeIsReadyForActivation{};
  void set_pending_tree_is_ready_for_activation(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_PendingTreeIsReadyForActivation::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ActiveTreeNeedsFirstDraw =
    ::protozero::proto_utils::FieldMetadata<
      28,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ActiveTreeNeedsFirstDraw kActiveTreeNeedsFirstDraw{};
  void set_active_tree_needs_first_draw(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ActiveTreeNeedsFirstDraw::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ActiveTreeIsReadyToDraw =
    ::protozero::proto_utils::FieldMetadata<
      29,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ActiveTreeIsReadyToDraw kActiveTreeIsReadyToDraw{};
  void set_active_tree_is_ready_to_draw(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ActiveTreeIsReadyToDraw::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidCreateAndInitializeFirstLayerTreeFrameSink =
    ::protozero::proto_utils::FieldMetadata<
      30,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidCreateAndInitializeFirstLayerTreeFrameSink kDidCreateAndInitializeFirstLayerTreeFrameSink{};
  void set_did_create_and_initialize_first_layer_tree_frame_sink(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidCreateAndInitializeFirstLayerTreeFrameSink::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TreePriority =
    ::protozero::proto_utils::FieldMetadata<
      31,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorStateMachineV2_MinorStateV2_TreePriority,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_TreePriority kTreePriority{};
  void set_tree_priority(ChromeCompositorStateMachineV2_MinorStateV2_TreePriority value) {
    static constexpr uint32_t field_id = FieldMetadata_TreePriority::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ScrollHandlerState =
    ::protozero::proto_utils::FieldMetadata<
      32,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ScrollHandlerState kScrollHandlerState{};
  void set_scroll_handler_state(ChromeCompositorStateMachineV2_MinorStateV2_ScrollHandlerState value) {
    static constexpr uint32_t field_id = FieldMetadata_ScrollHandlerState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CriticalBeginMainFrameToActivateIsFast =
    ::protozero::proto_utils::FieldMetadata<
      33,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_CriticalBeginMainFrameToActivateIsFast kCriticalBeginMainFrameToActivateIsFast{};
  void set_critical_begin_main_frame_to_activate_is_fast(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_CriticalBeginMainFrameToActivateIsFast::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_MainThreadMissedLastDeadline =
    ::protozero::proto_utils::FieldMetadata<
      34,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_MainThreadMissedLastDeadline kMainThreadMissedLastDeadline{};
  void set_main_thread_missed_last_deadline(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_MainThreadMissedLastDeadline::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VideoNeedsBeginFrames =
    ::protozero::proto_utils::FieldMetadata<
      36,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_VideoNeedsBeginFrames kVideoNeedsBeginFrames{};
  void set_video_needs_begin_frames(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_VideoNeedsBeginFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DeferBeginMainFrame =
    ::protozero::proto_utils::FieldMetadata<
      37,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DeferBeginMainFrame kDeferBeginMainFrame{};
  void set_defer_begin_main_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DeferBeginMainFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastCommitHadNoUpdates =
    ::protozero::proto_utils::FieldMetadata<
      38,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_LastCommitHadNoUpdates kLastCommitHadNoUpdates{};
  void set_last_commit_had_no_updates(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_LastCommitHadNoUpdates::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidDrawInLastFrame =
    ::protozero::proto_utils::FieldMetadata<
      39,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidDrawInLastFrame kDidDrawInLastFrame{};
  void set_did_draw_in_last_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidDrawInLastFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DidSubmitInLastFrame =
    ::protozero::proto_utils::FieldMetadata<
      40,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_DidSubmitInLastFrame kDidSubmitInLastFrame{};
  void set_did_submit_in_last_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_DidSubmitInLastFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NeedsImplSideInvalidation =
    ::protozero::proto_utils::FieldMetadata<
      41,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_NeedsImplSideInvalidation kNeedsImplSideInvalidation{};
  void set_needs_impl_side_invalidation(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_NeedsImplSideInvalidation::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CurrentPendingTreeIsImplSide =
    ::protozero::proto_utils::FieldMetadata<
      42,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_CurrentPendingTreeIsImplSide kCurrentPendingTreeIsImplSide{};
  void set_current_pending_tree_is_impl_side(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_CurrentPendingTreeIsImplSide::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PreviousPendingTreeWasImplSide =
    ::protozero::proto_utils::FieldMetadata<
      43,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_PreviousPendingTreeWasImplSide kPreviousPendingTreeWasImplSide{};
  void set_previous_pending_tree_was_impl_side(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_PreviousPendingTreeWasImplSide::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProcessingAnimationWorkletsForActiveTree =
    ::protozero::proto_utils::FieldMetadata<
      44,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ProcessingAnimationWorkletsForActiveTree kProcessingAnimationWorkletsForActiveTree{};
  void set_processing_animation_worklets_for_active_tree(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ProcessingAnimationWorkletsForActiveTree::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProcessingAnimationWorkletsForPendingTree =
    ::protozero::proto_utils::FieldMetadata<
      45,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ProcessingAnimationWorkletsForPendingTree kProcessingAnimationWorkletsForPendingTree{};
  void set_processing_animation_worklets_for_pending_tree(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ProcessingAnimationWorkletsForPendingTree::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProcessingPaintWorkletsForPendingTree =
    ::protozero::proto_utils::FieldMetadata<
      46,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ProcessingPaintWorkletsForPendingTree kProcessingPaintWorkletsForPendingTree{};
  void set_processing_paint_worklets_for_pending_tree(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ProcessingPaintWorkletsForPendingTree::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ShouldWarmUp =
    ::protozero::proto_utils::FieldMetadata<
      47,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorStateMachineV2_MinorStateV2>;

  static constexpr FieldMetadata_ShouldWarmUp kShouldWarmUp{};
  void set_should_warm_up(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ShouldWarmUp::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }
};

class ChromeCompositorStateMachineV2_MajorStateV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeCompositorStateMachineV2_MajorStateV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeCompositorStateMachineV2_MajorStateV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeCompositorStateMachineV2_MajorStateV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_next_action() const { return at<1>().valid(); }
  int32_t next_action() const { return at<1>().as_int32(); }
  bool has_begin_impl_frame_state() const { return at<2>().valid(); }
  int32_t begin_impl_frame_state() const { return at<2>().as_int32(); }
  bool has_begin_main_frame_state() const { return at<3>().valid(); }
  int32_t begin_main_frame_state() const { return at<3>().as_int32(); }
  bool has_layer_tree_frame_sink_state() const { return at<4>().valid(); }
  int32_t layer_tree_frame_sink_state() const { return at<4>().as_int32(); }
  bool has_forced_redraw_state() const { return at<5>().valid(); }
  int32_t forced_redraw_state() const { return at<5>().as_int32(); }
};

class ChromeCompositorStateMachineV2_MajorStateV2 : public ::protozero::Message {
 public:
  using Decoder = ChromeCompositorStateMachineV2_MajorStateV2_Decoder;
  enum : int32_t {
    kNextActionFieldNumber = 1,
    kBeginImplFrameStateFieldNumber = 2,
    kBeginMainFrameStateFieldNumber = 3,
    kLayerTreeFrameSinkStateFieldNumber = 4,
    kForcedRedrawStateFieldNumber = 5,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeCompositorStateMachineV2.MajorStateV2"; }


  using BeginImplFrameState = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState;
  static inline const char* BeginImplFrameState_Name(BeginImplFrameState value) {
    return ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState_Name(value);
  }

  using BeginMainFrameState = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState;
  static inline const char* BeginMainFrameState_Name(BeginMainFrameState value) {
    return ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState_Name(value);
  }

  using LayerTreeFrameSinkState = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState;
  static inline const char* LayerTreeFrameSinkState_Name(LayerTreeFrameSinkState value) {
    return ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState_Name(value);
  }

  using ForcedRedrawOnTimeoutState = ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState;
  static inline const char* ForcedRedrawOnTimeoutState_Name(ForcedRedrawOnTimeoutState value) {
    return ::perfetto::protos::pbzero::ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState_Name(value);
  }
  static inline const BeginImplFrameState BEGIN_IMPL_FRAME_UNSPECIFIED = BeginImplFrameState::BEGIN_IMPL_FRAME_UNSPECIFIED;
  static inline const BeginImplFrameState BEGIN_IMPL_FRAME_IDLE = BeginImplFrameState::BEGIN_IMPL_FRAME_IDLE;
  static inline const BeginImplFrameState BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME = BeginImplFrameState::BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME;
  static inline const BeginImplFrameState BEGIN_IMPL_FRAME_INSIDE_DEADLINE = BeginImplFrameState::BEGIN_IMPL_FRAME_INSIDE_DEADLINE;
  static inline const BeginMainFrameState BEGIN_MAIN_FRAME_UNSPECIFIED = BeginMainFrameState::BEGIN_MAIN_FRAME_UNSPECIFIED;
  static inline const BeginMainFrameState BEGIN_MAIN_FRAME_IDLE = BeginMainFrameState::BEGIN_MAIN_FRAME_IDLE;
  static inline const BeginMainFrameState BEGIN_MAIN_FRAME_SENT = BeginMainFrameState::BEGIN_MAIN_FRAME_SENT;
  static inline const BeginMainFrameState BEGIN_MAIN_FRAME_READY_TO_COMMIT = BeginMainFrameState::BEGIN_MAIN_FRAME_READY_TO_COMMIT;
  static inline const LayerTreeFrameSinkState LAYER_TREE_FRAME_UNSPECIFIED = LayerTreeFrameSinkState::LAYER_TREE_FRAME_UNSPECIFIED;
  static inline const LayerTreeFrameSinkState LAYER_TREE_FRAME_NONE = LayerTreeFrameSinkState::LAYER_TREE_FRAME_NONE;
  static inline const LayerTreeFrameSinkState LAYER_TREE_FRAME_ACTIVE = LayerTreeFrameSinkState::LAYER_TREE_FRAME_ACTIVE;
  static inline const LayerTreeFrameSinkState LAYER_TREE_FRAME_CREATING = LayerTreeFrameSinkState::LAYER_TREE_FRAME_CREATING;
  static inline const LayerTreeFrameSinkState LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT = LayerTreeFrameSinkState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT;
  static inline const LayerTreeFrameSinkState LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION = LayerTreeFrameSinkState::LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION;
  static inline const ForcedRedrawOnTimeoutState FORCED_REDRAW_UNSPECIFIED = ForcedRedrawOnTimeoutState::FORCED_REDRAW_UNSPECIFIED;
  static inline const ForcedRedrawOnTimeoutState FORCED_REDRAW_IDLE = ForcedRedrawOnTimeoutState::FORCED_REDRAW_IDLE;
  static inline const ForcedRedrawOnTimeoutState FORCED_REDRAW_WAITING_FOR_COMMIT = ForcedRedrawOnTimeoutState::FORCED_REDRAW_WAITING_FOR_COMMIT;
  static inline const ForcedRedrawOnTimeoutState FORCED_REDRAW_WAITING_FOR_ACTIVATION = ForcedRedrawOnTimeoutState::FORCED_REDRAW_WAITING_FOR_ACTIVATION;
  static inline const ForcedRedrawOnTimeoutState FORCED_REDRAW_WAITING_FOR_DRAW = ForcedRedrawOnTimeoutState::FORCED_REDRAW_WAITING_FOR_DRAW;

  using FieldMetadata_NextAction =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorSchedulerActionV2,
      ChromeCompositorStateMachineV2_MajorStateV2>;

  static constexpr FieldMetadata_NextAction kNextAction{};
  void set_next_action(ChromeCompositorSchedulerActionV2 value) {
    static constexpr uint32_t field_id = FieldMetadata_NextAction::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginImplFrameState =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState,
      ChromeCompositorStateMachineV2_MajorStateV2>;

  static constexpr FieldMetadata_BeginImplFrameState kBeginImplFrameState{};
  void set_begin_impl_frame_state(ChromeCompositorStateMachineV2_MajorStateV2_BeginImplFrameState value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginImplFrameState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginMainFrameState =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState,
      ChromeCompositorStateMachineV2_MajorStateV2>;

  static constexpr FieldMetadata_BeginMainFrameState kBeginMainFrameState{};
  void set_begin_main_frame_state(ChromeCompositorStateMachineV2_MajorStateV2_BeginMainFrameState value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginMainFrameState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayerTreeFrameSinkState =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState,
      ChromeCompositorStateMachineV2_MajorStateV2>;

  static constexpr FieldMetadata_LayerTreeFrameSinkState kLayerTreeFrameSinkState{};
  void set_layer_tree_frame_sink_state(ChromeCompositorStateMachineV2_MajorStateV2_LayerTreeFrameSinkState value) {
    static constexpr uint32_t field_id = FieldMetadata_LayerTreeFrameSinkState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ForcedRedrawState =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState,
      ChromeCompositorStateMachineV2_MajorStateV2>;

  static constexpr FieldMetadata_ForcedRedrawState kForcedRedrawState{};
  void set_forced_redraw_state(ChromeCompositorStateMachineV2_MajorStateV2_ForcedRedrawOnTimeoutState value) {
    static constexpr uint32_t field_id = FieldMetadata_ForcedRedrawState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class ChromeCompositorSchedulerStateV2_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/17, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeCompositorSchedulerStateV2_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeCompositorSchedulerStateV2_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeCompositorSchedulerStateV2_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_state_machine() const { return at<1>().valid(); }
  ::protozero::ConstBytes state_machine() const { return at<1>().as_bytes(); }
  bool has_observing_begin_frame_source() const { return at<2>().valid(); }
  bool observing_begin_frame_source() const { return at<2>().as_bool(); }
  bool has_begin_impl_frame_deadline_task() const { return at<3>().valid(); }
  bool begin_impl_frame_deadline_task() const { return at<3>().as_bool(); }
  bool has_pending_begin_frame_task() const { return at<4>().valid(); }
  bool pending_begin_frame_task() const { return at<4>().as_bool(); }
  bool has_skipped_last_frame_missed_exceeded_deadline() const { return at<5>().valid(); }
  bool skipped_last_frame_missed_exceeded_deadline() const { return at<5>().as_bool(); }
  bool has_inside_action() const { return at<7>().valid(); }
  int32_t inside_action() const { return at<7>().as_int32(); }
  bool has_deadline_mode() const { return at<8>().valid(); }
  int32_t deadline_mode() const { return at<8>().as_int32(); }
  bool has_deadline_us() const { return at<9>().valid(); }
  int64_t deadline_us() const { return at<9>().as_int64(); }
  bool has_deadline_scheduled_at_us() const { return at<10>().valid(); }
  int64_t deadline_scheduled_at_us() const { return at<10>().as_int64(); }
  bool has_now_us() const { return at<11>().valid(); }
  int64_t now_us() const { return at<11>().as_int64(); }
  bool has_now_to_deadline_delta_us() const { return at<12>().valid(); }
  int64_t now_to_deadline_delta_us() const { return at<12>().as_int64(); }
  bool has_now_to_deadline_scheduled_at_delta_us() const { return at<13>().valid(); }
  int64_t now_to_deadline_scheduled_at_delta_us() const { return at<13>().as_int64(); }
  bool has_begin_impl_frame_args() const { return at<14>().valid(); }
  ::protozero::ConstBytes begin_impl_frame_args() const { return at<14>().as_bytes(); }
  bool has_begin_frame_observer_state() const { return at<15>().valid(); }
  ::protozero::ConstBytes begin_frame_observer_state() const { return at<15>().as_bytes(); }
  bool has_begin_frame_source_state() const { return at<16>().valid(); }
  ::protozero::ConstBytes begin_frame_source_state() const { return at<16>().as_bytes(); }
  bool has_compositor_timing_history() const { return at<17>().valid(); }
  ::protozero::ConstBytes compositor_timing_history() const { return at<17>().as_bytes(); }
};

class ChromeCompositorSchedulerStateV2 : public ::protozero::Message {
 public:
  using Decoder = ChromeCompositorSchedulerStateV2_Decoder;
  enum : int32_t {
    kStateMachineFieldNumber = 1,
    kObservingBeginFrameSourceFieldNumber = 2,
    kBeginImplFrameDeadlineTaskFieldNumber = 3,
    kPendingBeginFrameTaskFieldNumber = 4,
    kSkippedLastFrameMissedExceededDeadlineFieldNumber = 5,
    kInsideActionFieldNumber = 7,
    kDeadlineModeFieldNumber = 8,
    kDeadlineUsFieldNumber = 9,
    kDeadlineScheduledAtUsFieldNumber = 10,
    kNowUsFieldNumber = 11,
    kNowToDeadlineDeltaUsFieldNumber = 12,
    kNowToDeadlineScheduledAtDeltaUsFieldNumber = 13,
    kBeginImplFrameArgsFieldNumber = 14,
    kBeginFrameObserverStateFieldNumber = 15,
    kBeginFrameSourceStateFieldNumber = 16,
    kCompositorTimingHistoryFieldNumber = 17,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeCompositorSchedulerStateV2"; }


  using BeginImplFrameDeadlineMode = ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode;
  static inline const char* BeginImplFrameDeadlineMode_Name(BeginImplFrameDeadlineMode value) {
    return ::perfetto::protos::pbzero::ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode_Name(value);
  }
  static inline const BeginImplFrameDeadlineMode DEADLINE_MODE_UNSPECIFIED = BeginImplFrameDeadlineMode::DEADLINE_MODE_UNSPECIFIED;
  static inline const BeginImplFrameDeadlineMode DEADLINE_MODE_NONE = BeginImplFrameDeadlineMode::DEADLINE_MODE_NONE;
  static inline const BeginImplFrameDeadlineMode DEADLINE_MODE_IMMEDIATE = BeginImplFrameDeadlineMode::DEADLINE_MODE_IMMEDIATE;
  static inline const BeginImplFrameDeadlineMode DEADLINE_MODE_REGULAR = BeginImplFrameDeadlineMode::DEADLINE_MODE_REGULAR;
  static inline const BeginImplFrameDeadlineMode DEADLINE_MODE_LATE = BeginImplFrameDeadlineMode::DEADLINE_MODE_LATE;
  static inline const BeginImplFrameDeadlineMode DEADLINE_MODE_BLOCKED = BeginImplFrameDeadlineMode::DEADLINE_MODE_BLOCKED;
  static inline const BeginImplFrameDeadlineMode DEADLINE_MODE_WAIT_FOR_SCROLL = BeginImplFrameDeadlineMode::DEADLINE_MODE_WAIT_FOR_SCROLL;

  using FieldMetadata_StateMachine =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeCompositorStateMachineV2,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_StateMachine kStateMachine{};
  template <typename T = ChromeCompositorStateMachineV2> T* set_state_machine() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_ObservingBeginFrameSource =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_ObservingBeginFrameSource kObservingBeginFrameSource{};
  void set_observing_begin_frame_source(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_ObservingBeginFrameSource::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginImplFrameDeadlineTask =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_BeginImplFrameDeadlineTask kBeginImplFrameDeadlineTask{};
  void set_begin_impl_frame_deadline_task(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginImplFrameDeadlineTask::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PendingBeginFrameTask =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_PendingBeginFrameTask kPendingBeginFrameTask{};
  void set_pending_begin_frame_task(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_PendingBeginFrameTask::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SkippedLastFrameMissedExceededDeadline =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_SkippedLastFrameMissedExceededDeadline kSkippedLastFrameMissedExceededDeadline{};
  void set_skipped_last_frame_missed_exceeded_deadline(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_SkippedLastFrameMissedExceededDeadline::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InsideAction =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorSchedulerActionV2,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_InsideAction kInsideAction{};
  void set_inside_action(ChromeCompositorSchedulerActionV2 value) {
    static constexpr uint32_t field_id = FieldMetadata_InsideAction::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DeadlineMode =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_DeadlineMode kDeadlineMode{};
  void set_deadline_mode(ChromeCompositorSchedulerStateV2_BeginImplFrameDeadlineMode value) {
    static constexpr uint32_t field_id = FieldMetadata_DeadlineMode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DeadlineUs =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_DeadlineUs kDeadlineUs{};
  void set_deadline_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DeadlineUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DeadlineScheduledAtUs =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_DeadlineScheduledAtUs kDeadlineScheduledAtUs{};
  void set_deadline_scheduled_at_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DeadlineScheduledAtUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NowUs =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_NowUs kNowUs{};
  void set_now_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NowUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NowToDeadlineDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_NowToDeadlineDeltaUs kNowToDeadlineDeltaUs{};
  void set_now_to_deadline_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NowToDeadlineDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NowToDeadlineScheduledAtDeltaUs =
    ::protozero::proto_utils::FieldMetadata<
      13,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_NowToDeadlineScheduledAtDeltaUs kNowToDeadlineScheduledAtDeltaUs{};
  void set_now_to_deadline_scheduled_at_delta_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NowToDeadlineScheduledAtDeltaUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginImplFrameArgs =
    ::protozero::proto_utils::FieldMetadata<
      14,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginImplFrameArgsV2,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_BeginImplFrameArgs kBeginImplFrameArgs{};
  template <typename T = BeginImplFrameArgsV2> T* set_begin_impl_frame_args() {
    return BeginNestedMessage<T>(14);
  }


  using FieldMetadata_BeginFrameObserverState =
    ::protozero::proto_utils::FieldMetadata<
      15,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginFrameObserverStateV2,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_BeginFrameObserverState kBeginFrameObserverState{};
  template <typename T = BeginFrameObserverStateV2> T* set_begin_frame_observer_state() {
    return BeginNestedMessage<T>(15);
  }


  using FieldMetadata_BeginFrameSourceState =
    ::protozero::proto_utils::FieldMetadata<
      16,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BeginFrameSourceStateV2,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_BeginFrameSourceState kBeginFrameSourceState{};
  template <typename T = BeginFrameSourceStateV2> T* set_begin_frame_source_state() {
    return BeginNestedMessage<T>(16);
  }


  using FieldMetadata_CompositorTimingHistory =
    ::protozero::proto_utils::FieldMetadata<
      17,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      CompositorTimingHistoryV2,
      ChromeCompositorSchedulerStateV2>;

  static constexpr FieldMetadata_CompositorTimingHistory kCompositorTimingHistory{};
  template <typename T = CompositorTimingHistoryV2> T* set_compositor_timing_history() {
    return BeginNestedMessage<T>(17);
  }

};

class ViewClassName_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ViewClassName_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ViewClassName_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ViewClassName_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_name() const { return at<1>().valid(); }
  ::protozero::ConstChars name() const { return at<1>().as_string(); }
};

class ViewClassName : public ::protozero::Message {
 public:
  using Decoder = ViewClassName_Decoder;
  enum : int32_t {
    kNameFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ViewClassName"; }


  using FieldMetadata_Name =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ViewClassName>;

  static constexpr FieldMetadata_Name kName{};
  void set_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Name::kFieldId, data, size);
  }
  void set_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Name::kFieldId, chars.data, chars.size);
  }
  void set_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Name::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

class TouchDispositionGestureFilter_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  TouchDispositionGestureFilter_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit TouchDispositionGestureFilter_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit TouchDispositionGestureFilter_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_gesture_count() const { return at<1>().valid(); }
  int32_t gesture_count() const { return at<1>().as_int32(); }
};

class TouchDispositionGestureFilter : public ::protozero::Message {
 public:
  using Decoder = TouchDispositionGestureFilter_Decoder;
  enum : int32_t {
    kGestureCountFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.TouchDispositionGestureFilter"; }


  using FieldMetadata_GestureCount =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      TouchDispositionGestureFilter>;

  static constexpr FieldMetadata_GestureCount kGestureCount{};
  void set_gesture_count(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_GestureCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class EventForwarder_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  EventForwarder_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit EventForwarder_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit EventForwarder_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_history_size() const { return at<1>().valid(); }
  int32_t history_size() const { return at<1>().as_int32(); }
  bool has_oldest_time_ns() const { return at<2>().valid(); }
  int64_t oldest_time_ns() const { return at<2>().as_int64(); }
  bool has_latest_time_ns() const { return at<5>().valid(); }
  int64_t latest_time_ns() const { return at<5>().as_int64(); }
  bool has_x_pixel() const { return at<3>().valid(); }
  float x_pixel() const { return at<3>().as_float(); }
  bool has_y_pixel() const { return at<4>().valid(); }
  float y_pixel() const { return at<4>().as_float(); }
  bool has_has_x_movement() const { return at<6>().valid(); }
  bool has_x_movement() const { return at<6>().as_bool(); }
  bool has_has_y_movement() const { return at<7>().valid(); }
  bool has_y_movement() const { return at<7>().as_bool(); }
};

class EventForwarder : public ::protozero::Message {
 public:
  using Decoder = EventForwarder_Decoder;
  enum : int32_t {
    kHistorySizeFieldNumber = 1,
    kOldestTimeNsFieldNumber = 2,
    kLatestTimeNsFieldNumber = 5,
    kXPixelFieldNumber = 3,
    kYPixelFieldNumber = 4,
    kHasXMovementFieldNumber = 6,
    kHasYMovementFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.EventForwarder"; }


  using FieldMetadata_HistorySize =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      EventForwarder>;

  static constexpr FieldMetadata_HistorySize kHistorySize{};
  void set_history_size(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_HistorySize::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OldestTimeNs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      EventForwarder>;

  static constexpr FieldMetadata_OldestTimeNs kOldestTimeNs{};
  void set_oldest_time_ns(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_OldestTimeNs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LatestTimeNs =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      EventForwarder>;

  static constexpr FieldMetadata_LatestTimeNs kLatestTimeNs{};
  void set_latest_time_ns(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LatestTimeNs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_XPixel =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      EventForwarder>;

  static constexpr FieldMetadata_XPixel kXPixel{};
  void set_x_pixel(float value) {
    static constexpr uint32_t field_id = FieldMetadata_XPixel::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_YPixel =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      EventForwarder>;

  static constexpr FieldMetadata_YPixel kYPixel{};
  void set_y_pixel(float value) {
    static constexpr uint32_t field_id = FieldMetadata_YPixel::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasXMovement =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      EventForwarder>;

  static constexpr FieldMetadata_HasXMovement kHasXMovement{};
  void set_has_x_movement(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasXMovement::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasYMovement =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      EventForwarder>;

  static constexpr FieldMetadata_HasYMovement kHasYMovement{};
  void set_has_y_movement(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasYMovement::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }
};

class WebContentInteraction_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  WebContentInteraction_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit WebContentInteraction_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit WebContentInteraction_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_type() const { return at<1>().valid(); }
  int32_t type() const { return at<1>().as_int32(); }
  bool has_total_duration_ms() const { return at<2>().valid(); }
  int64_t total_duration_ms() const { return at<2>().as_int64(); }
};

class WebContentInteraction : public ::protozero::Message {
 public:
  using Decoder = WebContentInteraction_Decoder;
  enum : int32_t {
    kTypeFieldNumber = 1,
    kTotalDurationMsFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.WebContentInteraction"; }


  using Type = ::perfetto::protos::pbzero::WebContentInteraction_Type;
  static inline const char* Type_Name(Type value) {
    return ::perfetto::protos::pbzero::WebContentInteraction_Type_Name(value);
  }
  static inline const Type INTERACTION_UNSPECIFIED = Type::INTERACTION_UNSPECIFIED;
  static inline const Type INTERACTION_KEYBOARD = Type::INTERACTION_KEYBOARD;
  static inline const Type INTERACTION_CLICK_TAP = Type::INTERACTION_CLICK_TAP;
  static inline const Type INTERACTION_DRAG = Type::INTERACTION_DRAG;

  using FieldMetadata_Type =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      WebContentInteraction_Type,
      WebContentInteraction>;

  static constexpr FieldMetadata_Type kType{};
  void set_type(WebContentInteraction_Type value) {
    static constexpr uint32_t field_id = FieldMetadata_Type::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TotalDurationMs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      WebContentInteraction>;

  static constexpr FieldMetadata_TotalDurationMs kTotalDurationMs{};
  void set_total_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TotalDurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class StartUp_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  StartUp_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit StartUp_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit StartUp_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_activity_id() const { return at<1>().valid(); }
  int64_t activity_id() const { return at<1>().as_int64(); }
  bool has_launch_cause() const { return at<3>().valid(); }
  int32_t launch_cause() const { return at<3>().as_int32(); }
};

class StartUp : public ::protozero::Message {
 public:
  using Decoder = StartUp_Decoder;
  enum : int32_t {
    kActivityIdFieldNumber = 1,
    kLaunchCauseFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.StartUp"; }


  using LaunchCauseType = ::perfetto::protos::pbzero::StartUp_LaunchCauseType;
  static inline const char* LaunchCauseType_Name(LaunchCauseType value) {
    return ::perfetto::protos::pbzero::StartUp_LaunchCauseType_Name(value);
  }
  static inline const LaunchCauseType OTHER = LaunchCauseType::OTHER;
  static inline const LaunchCauseType CUSTOM_TAB = LaunchCauseType::CUSTOM_TAB;
  static inline const LaunchCauseType TWA = LaunchCauseType::TWA;
  static inline const LaunchCauseType RECENTS = LaunchCauseType::RECENTS;
  static inline const LaunchCauseType RECENTS_OR_BACK = LaunchCauseType::RECENTS_OR_BACK;
  static inline const LaunchCauseType FOREGROUND_WHEN_LOCKED = LaunchCauseType::FOREGROUND_WHEN_LOCKED;
  static inline const LaunchCauseType MAIN_LAUNCHER_ICON = LaunchCauseType::MAIN_LAUNCHER_ICON;
  static inline const LaunchCauseType MAIN_LAUNCHER_ICON_SHORTCUT = LaunchCauseType::MAIN_LAUNCHER_ICON_SHORTCUT;
  static inline const LaunchCauseType HOME_SCREEN_WIDGET = LaunchCauseType::HOME_SCREEN_WIDGET;
  static inline const LaunchCauseType OPEN_IN_BROWSER_FROM_MENU = LaunchCauseType::OPEN_IN_BROWSER_FROM_MENU;
  static inline const LaunchCauseType EXTERNAL_SEARCH_ACTION_INTENT = LaunchCauseType::EXTERNAL_SEARCH_ACTION_INTENT;
  static inline const LaunchCauseType NOTIFICATION = LaunchCauseType::NOTIFICATION;
  static inline const LaunchCauseType EXTERNAL_VIEW_INTENT = LaunchCauseType::EXTERNAL_VIEW_INTENT;
  static inline const LaunchCauseType OTHER_CHROME = LaunchCauseType::OTHER_CHROME;
  static inline const LaunchCauseType WEBAPK_CHROME_DISTRIBUTOR = LaunchCauseType::WEBAPK_CHROME_DISTRIBUTOR;
  static inline const LaunchCauseType WEBAPK_OTHER_DISTRIBUTOR = LaunchCauseType::WEBAPK_OTHER_DISTRIBUTOR;
  static inline const LaunchCauseType HOME_SCREEN_SHORTCUT = LaunchCauseType::HOME_SCREEN_SHORTCUT;
  static inline const LaunchCauseType SHARE_INTENT = LaunchCauseType::SHARE_INTENT;
  static inline const LaunchCauseType NFC = LaunchCauseType::NFC;

  using FieldMetadata_ActivityId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      StartUp>;

  static constexpr FieldMetadata_ActivityId kActivityId{};
  void set_activity_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ActivityId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LaunchCause =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      StartUp_LaunchCauseType,
      StartUp>;

  static constexpr FieldMetadata_LaunchCause kLaunchCause{};
  void set_launch_cause(StartUp_LaunchCauseType value) {
    static constexpr uint32_t field_id = FieldMetadata_LaunchCause::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class PageLoad_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  PageLoad_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PageLoad_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PageLoad_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_navigation_id() const { return at<1>().valid(); }
  int64_t navigation_id() const { return at<1>().as_int64(); }
  bool has_url() const { return at<2>().valid(); }
  ::protozero::ConstChars url() const { return at<2>().as_string(); }
};

class PageLoad : public ::protozero::Message {
 public:
  using Decoder = PageLoad_Decoder;
  enum : int32_t {
    kNavigationIdFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.PageLoad"; }


  using FieldMetadata_NavigationId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      PageLoad>;

  static constexpr FieldMetadata_NavigationId kNavigationId{};
  void set_navigation_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NavigationId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Url =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      PageLoad>;

  static constexpr FieldMetadata_Url kUrl{};
  void set_url(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Url::kFieldId, data, size);
  }
  void set_url(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Url::kFieldId, chars.data, chars.size);
  }
  void set_url(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Url::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

class ScrollPredictorMetrics_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ScrollPredictorMetrics_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ScrollPredictorMetrics_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ScrollPredictorMetrics_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_prev_event_frame_value() const { return at<1>().valid(); }
  ::protozero::ConstBytes prev_event_frame_value() const { return at<1>().as_bytes(); }
  bool has_cur_event_frame_value() const { return at<2>().valid(); }
  ::protozero::ConstBytes cur_event_frame_value() const { return at<2>().as_bytes(); }
  bool has_next_event_frame_value() const { return at<3>().valid(); }
  ::protozero::ConstBytes next_event_frame_value() const { return at<3>().as_bytes(); }
  bool has_janky_value_pixels() const { return at<4>().valid(); }
  float janky_value_pixels() const { return at<4>().as_float(); }
  bool has_has_missed_vsyncs() const { return at<5>().valid(); }
  bool has_missed_vsyncs() const { return at<5>().as_bool(); }
  bool has_is_slow_scroll() const { return at<6>().valid(); }
  bool is_slow_scroll() const { return at<6>().as_bool(); }
};

class ScrollPredictorMetrics : public ::protozero::Message {
 public:
  using Decoder = ScrollPredictorMetrics_Decoder;
  enum : int32_t {
    kPrevEventFrameValueFieldNumber = 1,
    kCurEventFrameValueFieldNumber = 2,
    kNextEventFrameValueFieldNumber = 3,
    kJankyValuePixelsFieldNumber = 4,
    kHasMissedVsyncsFieldNumber = 5,
    kIsSlowScrollFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ScrollPredictorMetrics"; }

  using EventFrameValue = ::perfetto::protos::pbzero::ScrollPredictorMetrics_EventFrameValue;

  using FieldMetadata_PrevEventFrameValue =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ScrollPredictorMetrics_EventFrameValue,
      ScrollPredictorMetrics>;

  static constexpr FieldMetadata_PrevEventFrameValue kPrevEventFrameValue{};
  template <typename T = ScrollPredictorMetrics_EventFrameValue> T* set_prev_event_frame_value() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_CurEventFrameValue =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ScrollPredictorMetrics_EventFrameValue,
      ScrollPredictorMetrics>;

  static constexpr FieldMetadata_CurEventFrameValue kCurEventFrameValue{};
  template <typename T = ScrollPredictorMetrics_EventFrameValue> T* set_cur_event_frame_value() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_NextEventFrameValue =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ScrollPredictorMetrics_EventFrameValue,
      ScrollPredictorMetrics>;

  static constexpr FieldMetadata_NextEventFrameValue kNextEventFrameValue{};
  template <typename T = ScrollPredictorMetrics_EventFrameValue> T* set_next_event_frame_value() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_JankyValuePixels =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollPredictorMetrics>;

  static constexpr FieldMetadata_JankyValuePixels kJankyValuePixels{};
  void set_janky_value_pixels(float value) {
    static constexpr uint32_t field_id = FieldMetadata_JankyValuePixels::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasMissedVsyncs =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ScrollPredictorMetrics>;

  static constexpr FieldMetadata_HasMissedVsyncs kHasMissedVsyncs{};
  void set_has_missed_vsyncs(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasMissedVsyncs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsSlowScroll =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ScrollPredictorMetrics>;

  static constexpr FieldMetadata_IsSlowScroll kIsSlowScroll{};
  void set_is_slow_scroll(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsSlowScroll::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }
};

class ScrollPredictorMetrics_EventFrameValue_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ScrollPredictorMetrics_EventFrameValue_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ScrollPredictorMetrics_EventFrameValue_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ScrollPredictorMetrics_EventFrameValue_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_event_trace_id() const { return at<1>().valid(); }
  int64_t event_trace_id() const { return at<1>().as_int64(); }
  bool has_delta_value_pixels() const { return at<2>().valid(); }
  float delta_value_pixels() const { return at<2>().as_float(); }
};

class ScrollPredictorMetrics_EventFrameValue : public ::protozero::Message {
 public:
  using Decoder = ScrollPredictorMetrics_EventFrameValue_Decoder;
  enum : int32_t {
    kEventTraceIdFieldNumber = 1,
    kDeltaValuePixelsFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ScrollPredictorMetrics.EventFrameValue"; }


  using FieldMetadata_EventTraceId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ScrollPredictorMetrics_EventFrameValue>;

  static constexpr FieldMetadata_EventTraceId kEventTraceId{};
  void set_event_trace_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_EventTraceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DeltaValuePixels =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollPredictorMetrics_EventFrameValue>;

  static constexpr FieldMetadata_DeltaValuePixels kDeltaValuePixels{};
  void set_delta_value_pixels(float value) {
    static constexpr uint32_t field_id = FieldMetadata_DeltaValuePixels::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }
};

class LibunwindstackUnwinder_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LibunwindstackUnwinder_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LibunwindstackUnwinder_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LibunwindstackUnwinder_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_error_code() const { return at<1>().valid(); }
  int32_t error_code() const { return at<1>().as_int32(); }
  bool has_num_frames() const { return at<2>().valid(); }
  int32_t num_frames() const { return at<2>().as_int32(); }
};

class LibunwindstackUnwinder : public ::protozero::Message {
 public:
  using Decoder = LibunwindstackUnwinder_Decoder;
  enum : int32_t {
    kErrorCodeFieldNumber = 1,
    kNumFramesFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LibunwindstackUnwinder"; }


  using ErrorCode = ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode;
  static inline const char* ErrorCode_Name(ErrorCode value) {
    return ::perfetto::protos::pbzero::LibunwindstackUnwinder_ErrorCode_Name(value);
  }
  static inline const ErrorCode ERROR_NONE = ErrorCode::ERROR_NONE;
  static inline const ErrorCode ERROR_MEMORY_INVALID = ErrorCode::ERROR_MEMORY_INVALID;
  static inline const ErrorCode ERROR_UNWIND_INFO = ErrorCode::ERROR_UNWIND_INFO;
  static inline const ErrorCode ERROR_UNSUPPORTED = ErrorCode::ERROR_UNSUPPORTED;
  static inline const ErrorCode ERROR_INVALID_MAP = ErrorCode::ERROR_INVALID_MAP;
  static inline const ErrorCode ERROR_MAX_FRAMES_EXCEEDED = ErrorCode::ERROR_MAX_FRAMES_EXCEEDED;
  static inline const ErrorCode ERROR_REPEATED_FRAME = ErrorCode::ERROR_REPEATED_FRAME;
  static inline const ErrorCode ERROR_INVALID_ELF = ErrorCode::ERROR_INVALID_ELF;
  static inline const ErrorCode ERROR_THREAD_DOES_NOT_EXIST = ErrorCode::ERROR_THREAD_DOES_NOT_EXIST;
  static inline const ErrorCode ERROR_THREAD_TIMEOUT = ErrorCode::ERROR_THREAD_TIMEOUT;
  static inline const ErrorCode ERROR_SYSTEM_CALL = ErrorCode::ERROR_SYSTEM_CALL;
  static inline const ErrorCode ERROR_BAD_ARCH = ErrorCode::ERROR_BAD_ARCH;
  static inline const ErrorCode ERROR_MAPS_PARSE = ErrorCode::ERROR_MAPS_PARSE;
  static inline const ErrorCode ERROR_INVALID_PARAMETER_LIBUNWINDSTACK = ErrorCode::ERROR_INVALID_PARAMETER_LIBUNWINDSTACK;
  static inline const ErrorCode ERROR_PTRACE_CALL = ErrorCode::ERROR_PTRACE_CALL;

  using FieldMetadata_ErrorCode =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      LibunwindstackUnwinder_ErrorCode,
      LibunwindstackUnwinder>;

  static constexpr FieldMetadata_ErrorCode kErrorCode{};
  void set_error_code(LibunwindstackUnwinder_ErrorCode value) {
    static constexpr uint32_t field_id = FieldMetadata_ErrorCode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NumFrames =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LibunwindstackUnwinder>;

  static constexpr FieldMetadata_NumFrames kNumFrames{};
  void set_num_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NumFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class ChromeGraphicsPipeline_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeGraphicsPipeline_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeGraphicsPipeline_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeGraphicsPipeline_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_step() const { return at<1>().valid(); }
  int32_t step() const { return at<1>().as_int32(); }
  bool has_frame_sink_id() const { return at<2>().valid(); }
  ::protozero::ConstBytes frame_sink_id() const { return at<2>().as_bytes(); }
  bool has_display_trace_id() const { return at<3>().valid(); }
  int64_t display_trace_id() const { return at<3>().as_int64(); }
  bool has_local_surface_id() const { return at<4>().valid(); }
  ::protozero::ConstBytes local_surface_id() const { return at<4>().as_bytes(); }
  bool has_frame_sequence() const { return at<5>().valid(); }
  int64_t frame_sequence() const { return at<5>().as_int64(); }
  bool has_frame_skipped_reason() const { return at<6>().valid(); }
  int32_t frame_skipped_reason() const { return at<6>().as_int32(); }
  bool has_backend_frame_id() const { return at<7>().valid(); }
  int64_t backend_frame_id() const { return at<7>().as_int64(); }
};

class ChromeGraphicsPipeline : public ::protozero::Message {
 public:
  using Decoder = ChromeGraphicsPipeline_Decoder;
  enum : int32_t {
    kStepFieldNumber = 1,
    kFrameSinkIdFieldNumber = 2,
    kDisplayTraceIdFieldNumber = 3,
    kLocalSurfaceIdFieldNumber = 4,
    kFrameSequenceFieldNumber = 5,
    kFrameSkippedReasonFieldNumber = 6,
    kBackendFrameIdFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeGraphicsPipeline"; }


  using StepName = ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName;
  static inline const char* StepName_Name(StepName value) {
    return ::perfetto::protos::pbzero::ChromeGraphicsPipeline_StepName_Name(value);
  }

  using FrameSkippedReason = ::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason;
  static inline const char* FrameSkippedReason_Name(FrameSkippedReason value) {
    return ::perfetto::protos::pbzero::ChromeGraphicsPipeline_FrameSkippedReason_Name(value);
  }
  static inline const StepName STEP_UNKNOWN = StepName::STEP_UNKNOWN;
  static inline const StepName STEP_DID_NOT_PRODUCE_FRAME = StepName::STEP_DID_NOT_PRODUCE_FRAME;
  static inline const StepName STEP_GENERATE_COMPOSITOR_FRAME = StepName::STEP_GENERATE_COMPOSITOR_FRAME;
  static inline const StepName STEP_GENERATE_RENDER_PASS = StepName::STEP_GENERATE_RENDER_PASS;
  static inline const StepName STEP_ISSUE_BEGIN_FRAME = StepName::STEP_ISSUE_BEGIN_FRAME;
  static inline const StepName STEP_RECEIVE_COMPOSITOR_FRAME = StepName::STEP_RECEIVE_COMPOSITOR_FRAME;
  static inline const StepName STEP_RECEIVE_BEGIN_FRAME = StepName::STEP_RECEIVE_BEGIN_FRAME;
  static inline const StepName STEP_RECEIVE_BEGIN_FRAME_DISCARD = StepName::STEP_RECEIVE_BEGIN_FRAME_DISCARD;
  static inline const StepName STEP_SEND_BEGIN_MAIN_FRAME = StepName::STEP_SEND_BEGIN_MAIN_FRAME;
  static inline const StepName STEP_SUBMIT_COMPOSITOR_FRAME = StepName::STEP_SUBMIT_COMPOSITOR_FRAME;
  static inline const StepName STEP_SURFACE_AGGREGATION = StepName::STEP_SURFACE_AGGREGATION;
  static inline const StepName STEP_SEND_BUFFER_SWAP = StepName::STEP_SEND_BUFFER_SWAP;
  static inline const StepName STEP_BUFFER_SWAP_POST_SUBMIT = StepName::STEP_BUFFER_SWAP_POST_SUBMIT;
  static inline const StepName STEP_FINISH_BUFFER_SWAP = StepName::STEP_FINISH_BUFFER_SWAP;
  static inline const StepName STEP_SWAP_BUFFERS_ACK = StepName::STEP_SWAP_BUFFERS_ACK;
  static inline const StepName STEP_EXO_CONSTRUCT_COMPOSITOR_FRAME = StepName::STEP_EXO_CONSTRUCT_COMPOSITOR_FRAME;
  static inline const StepName STEP_EXO_SUBMIT_COMPOSITOR_FRAME = StepName::STEP_EXO_SUBMIT_COMPOSITOR_FRAME;
  static inline const StepName STEP_EXO_DISCARD_COMPOSITOR_FRAME = StepName::STEP_EXO_DISCARD_COMPOSITOR_FRAME;
  static inline const StepName STEP_BACKEND_SEND_BUFFER_SWAP = StepName::STEP_BACKEND_SEND_BUFFER_SWAP;
  static inline const StepName STEP_BACKEND_SEND_BUFFER_POST_SUBMIT = StepName::STEP_BACKEND_SEND_BUFFER_POST_SUBMIT;
  static inline const StepName STEP_BACKEND_FINISH_BUFFER_SWAP = StepName::STEP_BACKEND_FINISH_BUFFER_SWAP;
  static inline const FrameSkippedReason SKIPPED_REASON_UNKNOWN = FrameSkippedReason::SKIPPED_REASON_UNKNOWN;
  static inline const FrameSkippedReason SKIPPED_REASON_RECOVER_LATENCY = FrameSkippedReason::SKIPPED_REASON_RECOVER_LATENCY;
  static inline const FrameSkippedReason SKIPPED_REASON_NO_DAMAGE = FrameSkippedReason::SKIPPED_REASON_NO_DAMAGE;
  static inline const FrameSkippedReason SKIPPED_REASON_WAITING_ON_MAIN = FrameSkippedReason::SKIPPED_REASON_WAITING_ON_MAIN;
  static inline const FrameSkippedReason SKIPPED_REASON_DRAW_THROTTLED = FrameSkippedReason::SKIPPED_REASON_DRAW_THROTTLED;

  using FieldMetadata_Step =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeGraphicsPipeline_StepName,
      ChromeGraphicsPipeline>;

  static constexpr FieldMetadata_Step kStep{};
  void set_step(ChromeGraphicsPipeline_StepName value) {
    static constexpr uint32_t field_id = FieldMetadata_Step::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameSinkId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      FrameSinkId,
      ChromeGraphicsPipeline>;

  static constexpr FieldMetadata_FrameSinkId kFrameSinkId{};
  template <typename T = FrameSinkId> T* set_frame_sink_id() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_DisplayTraceId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeGraphicsPipeline>;

  static constexpr FieldMetadata_DisplayTraceId kDisplayTraceId{};
  void set_display_trace_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DisplayTraceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LocalSurfaceId =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LocalSurfaceId,
      ChromeGraphicsPipeline>;

  static constexpr FieldMetadata_LocalSurfaceId kLocalSurfaceId{};
  template <typename T = LocalSurfaceId> T* set_local_surface_id() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_FrameSequence =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeGraphicsPipeline>;

  static constexpr FieldMetadata_FrameSequence kFrameSequence{};
  void set_frame_sequence(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameSequence::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameSkippedReason =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeGraphicsPipeline_FrameSkippedReason,
      ChromeGraphicsPipeline>;

  static constexpr FieldMetadata_FrameSkippedReason kFrameSkippedReason{};
  void set_frame_skipped_reason(ChromeGraphicsPipeline_FrameSkippedReason value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameSkippedReason::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BackendFrameId =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeGraphicsPipeline>;

  static constexpr FieldMetadata_BackendFrameId kBackendFrameId{};
  void set_backend_frame_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BackendFrameId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class LocalSurfaceId_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LocalSurfaceId_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LocalSurfaceId_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LocalSurfaceId_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_parent_sequence_number() const { return at<1>().valid(); }
  uint32_t parent_sequence_number() const { return at<1>().as_uint32(); }
  bool has_child_sequence_number() const { return at<2>().valid(); }
  uint32_t child_sequence_number() const { return at<2>().as_uint32(); }
  bool has_unguessable_token() const { return at<3>().valid(); }
  ::protozero::ConstBytes unguessable_token() const { return at<3>().as_bytes(); }
};

class LocalSurfaceId : public ::protozero::Message {
 public:
  using Decoder = LocalSurfaceId_Decoder;
  enum : int32_t {
    kParentSequenceNumberFieldNumber = 1,
    kChildSequenceNumberFieldNumber = 2,
    kUnguessableTokenFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LocalSurfaceId"; }


  using FieldMetadata_ParentSequenceNumber =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LocalSurfaceId>;

  static constexpr FieldMetadata_ParentSequenceNumber kParentSequenceNumber{};
  void set_parent_sequence_number(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ParentSequenceNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ChildSequenceNumber =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LocalSurfaceId>;

  static constexpr FieldMetadata_ChildSequenceNumber kChildSequenceNumber{};
  void set_child_sequence_number(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ChildSequenceNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_UnguessableToken =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeUnguessableToken,
      LocalSurfaceId>;

  static constexpr FieldMetadata_UnguessableToken kUnguessableToken{};
  template <typename T = ChromeUnguessableToken> T* set_unguessable_token() {
    return BeginNestedMessage<T>(3);
  }

};

class FrameSinkId_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  FrameSinkId_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit FrameSinkId_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit FrameSinkId_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_frame_sink_client_id() const { return at<1>().valid(); }
  uint32_t frame_sink_client_id() const { return at<1>().as_uint32(); }
  bool has_frame_sink_id() const { return at<2>().valid(); }
  uint32_t frame_sink_id() const { return at<2>().as_uint32(); }
};

class FrameSinkId : public ::protozero::Message {
 public:
  using Decoder = FrameSinkId_Decoder;
  enum : int32_t {
    kFrameSinkClientIdFieldNumber = 1,
    kFrameSinkIdFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.FrameSinkId"; }


  using FieldMetadata_FrameSinkClientId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      FrameSinkId>;

  static constexpr FieldMetadata_FrameSinkClientId kFrameSinkClientId{};
  void set_frame_sink_client_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameSinkClientId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameSinkId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      FrameSinkId>;

  static constexpr FieldMetadata_FrameSinkId kFrameSinkId{};
  void set_frame_sink_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameSinkId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class ChromeUnguessableToken_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeUnguessableToken_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeUnguessableToken_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeUnguessableToken_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_low_token() const { return at<1>().valid(); }
  uint64_t low_token() const { return at<1>().as_uint64(); }
  bool has_high_token() const { return at<2>().valid(); }
  uint64_t high_token() const { return at<2>().as_uint64(); }
};

class ChromeUnguessableToken : public ::protozero::Message {
 public:
  using Decoder = ChromeUnguessableToken_Decoder;
  enum : int32_t {
    kLowTokenFieldNumber = 1,
    kHighTokenFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeUnguessableToken"; }


  using FieldMetadata_LowToken =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      ChromeUnguessableToken>;

  static constexpr FieldMetadata_LowToken kLowToken{};
  void set_low_token(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LowToken::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HighToken =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      ChromeUnguessableToken>;

  static constexpr FieldMetadata_HighToken kHighToken{};
  void set_high_token(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_HighToken::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class CrasUnified_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  CrasUnified_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit CrasUnified_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit CrasUnified_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_underrun_duration_us() const { return at<1>().valid(); }
  int64_t underrun_duration_us() const { return at<1>().as_int64(); }
  bool has_last_underrun_duration_us() const { return at<2>().valid(); }
  int64_t last_underrun_duration_us() const { return at<2>().as_int64(); }
  bool has_underrun_glitch_duration_us() const { return at<3>().valid(); }
  int64_t underrun_glitch_duration_us() const { return at<3>().as_int64(); }
  bool has_latency_us() const { return at<4>().valid(); }
  int64_t latency_us() const { return at<4>().as_int64(); }
  bool has_requested_frames() const { return at<5>().valid(); }
  int32_t requested_frames() const { return at<5>().as_int32(); }
  bool has_filled_frames() const { return at<6>().valid(); }
  uint32_t filled_frames() const { return at<6>().as_uint32(); }
  bool has_sample_rate() const { return at<7>().valid(); }
  int32_t sample_rate() const { return at<7>().as_int32(); }
};

class CrasUnified : public ::protozero::Message {
 public:
  using Decoder = CrasUnified_Decoder;
  enum : int32_t {
    kUnderrunDurationUsFieldNumber = 1,
    kLastUnderrunDurationUsFieldNumber = 2,
    kUnderrunGlitchDurationUsFieldNumber = 3,
    kLatencyUsFieldNumber = 4,
    kRequestedFramesFieldNumber = 5,
    kFilledFramesFieldNumber = 6,
    kSampleRateFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.CrasUnified"; }


  using FieldMetadata_UnderrunDurationUs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CrasUnified>;

  static constexpr FieldMetadata_UnderrunDurationUs kUnderrunDurationUs{};
  void set_underrun_duration_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_UnderrunDurationUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastUnderrunDurationUs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CrasUnified>;

  static constexpr FieldMetadata_LastUnderrunDurationUs kLastUnderrunDurationUs{};
  void set_last_underrun_duration_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LastUnderrunDurationUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_UnderrunGlitchDurationUs =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CrasUnified>;

  static constexpr FieldMetadata_UnderrunGlitchDurationUs kUnderrunGlitchDurationUs{};
  void set_underrun_glitch_duration_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_UnderrunGlitchDurationUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LatencyUs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      CrasUnified>;

  static constexpr FieldMetadata_LatencyUs kLatencyUs{};
  void set_latency_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LatencyUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RequestedFrames =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      CrasUnified>;

  static constexpr FieldMetadata_RequestedFrames kRequestedFrames{};
  void set_requested_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RequestedFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FilledFrames =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      CrasUnified>;

  static constexpr FieldMetadata_FilledFrames kFilledFrames{};
  void set_filled_frames(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FilledFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SampleRate =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      CrasUnified>;

  static constexpr FieldMetadata_SampleRate kSampleRate{};
  void set_sample_rate(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SampleRate::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class LinuxPulseOutput_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LinuxPulseOutput_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LinuxPulseOutput_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LinuxPulseOutput_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_source_request_playout_delay_us() const { return at<1>().valid(); }
  int64_t source_request_playout_delay_us() const { return at<1>().as_int64(); }
  bool has_sample_rate() const { return at<2>().valid(); }
  int32_t sample_rate() const { return at<2>().as_int32(); }
  bool has_input_buffer_size_frames() const { return at<3>().valid(); }
  int32_t input_buffer_size_frames() const { return at<3>().as_int32(); }
  bool has_stream_request_bytes() const { return at<4>().valid(); }
  uint32_t stream_request_bytes() const { return at<4>().as_uint32(); }
  bool has_frame_size_bytes() const { return at<5>().valid(); }
  uint32_t frame_size_bytes() const { return at<5>().as_uint32(); }
};

class LinuxPulseOutput : public ::protozero::Message {
 public:
  using Decoder = LinuxPulseOutput_Decoder;
  enum : int32_t {
    kSourceRequestPlayoutDelayUsFieldNumber = 1,
    kSampleRateFieldNumber = 2,
    kInputBufferSizeFramesFieldNumber = 3,
    kStreamRequestBytesFieldNumber = 4,
    kFrameSizeBytesFieldNumber = 5,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LinuxPulseOutput"; }


  using FieldMetadata_SourceRequestPlayoutDelayUs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      LinuxPulseOutput>;

  static constexpr FieldMetadata_SourceRequestPlayoutDelayUs kSourceRequestPlayoutDelayUs{};
  void set_source_request_playout_delay_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceRequestPlayoutDelayUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SampleRate =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxPulseOutput>;

  static constexpr FieldMetadata_SampleRate kSampleRate{};
  void set_sample_rate(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SampleRate::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_InputBufferSizeFrames =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxPulseOutput>;

  static constexpr FieldMetadata_InputBufferSizeFrames kInputBufferSizeFrames{};
  void set_input_buffer_size_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_InputBufferSizeFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_StreamRequestBytes =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LinuxPulseOutput>;

  static constexpr FieldMetadata_StreamRequestBytes kStreamRequestBytes{};
  void set_stream_request_bytes(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_StreamRequestBytes::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameSizeBytes =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      LinuxPulseOutput>;

  static constexpr FieldMetadata_FrameSizeBytes kFrameSizeBytes{};
  void set_frame_size_bytes(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameSizeBytes::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class LinuxAlsaOutput_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LinuxAlsaOutput_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LinuxAlsaOutput_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LinuxAlsaOutput_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_source_request_playout_delay_us() const { return at<1>().valid(); }
  int64_t source_request_playout_delay_us() const { return at<1>().as_int64(); }
  bool has_forward_bytes() const { return at<2>().valid(); }
  int32_t forward_bytes() const { return at<2>().as_int32(); }
  bool has_sample_rate() const { return at<3>().valid(); }
  int32_t sample_rate() const { return at<3>().as_int32(); }
  bool has_getcurrentdelay_pcm_delay_frames() const { return at<4>().valid(); }
  int32_t getcurrentdelay_pcm_delay_frames() const { return at<4>().as_int32(); }
  bool has_getcurrentdelay_alsa_buffer_frames() const { return at<5>().valid(); }
  int32_t getcurrentdelay_alsa_buffer_frames() const { return at<5>().as_int32(); }
  bool has_getcurrentdelay_available_frames() const { return at<6>().valid(); }
  int32_t getcurrentdelay_available_frames() const { return at<6>().as_int32(); }
  bool has_getcurrentdelay_final_delay_frames() const { return at<7>().valid(); }
  int32_t getcurrentdelay_final_delay_frames() const { return at<7>().as_int32(); }
};

class LinuxAlsaOutput : public ::protozero::Message {
 public:
  using Decoder = LinuxAlsaOutput_Decoder;
  enum : int32_t {
    kSourceRequestPlayoutDelayUsFieldNumber = 1,
    kForwardBytesFieldNumber = 2,
    kSampleRateFieldNumber = 3,
    kGetcurrentdelayPcmDelayFramesFieldNumber = 4,
    kGetcurrentdelayAlsaBufferFramesFieldNumber = 5,
    kGetcurrentdelayAvailableFramesFieldNumber = 6,
    kGetcurrentdelayFinalDelayFramesFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LinuxAlsaOutput"; }


  using FieldMetadata_SourceRequestPlayoutDelayUs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      LinuxAlsaOutput>;

  static constexpr FieldMetadata_SourceRequestPlayoutDelayUs kSourceRequestPlayoutDelayUs{};
  void set_source_request_playout_delay_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceRequestPlayoutDelayUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ForwardBytes =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxAlsaOutput>;

  static constexpr FieldMetadata_ForwardBytes kForwardBytes{};
  void set_forward_bytes(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ForwardBytes::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SampleRate =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxAlsaOutput>;

  static constexpr FieldMetadata_SampleRate kSampleRate{};
  void set_sample_rate(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SampleRate::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_GetcurrentdelayPcmDelayFrames =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxAlsaOutput>;

  static constexpr FieldMetadata_GetcurrentdelayPcmDelayFrames kGetcurrentdelayPcmDelayFrames{};
  void set_getcurrentdelay_pcm_delay_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_GetcurrentdelayPcmDelayFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_GetcurrentdelayAlsaBufferFrames =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxAlsaOutput>;

  static constexpr FieldMetadata_GetcurrentdelayAlsaBufferFrames kGetcurrentdelayAlsaBufferFrames{};
  void set_getcurrentdelay_alsa_buffer_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_GetcurrentdelayAlsaBufferFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_GetcurrentdelayAvailableFrames =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxAlsaOutput>;

  static constexpr FieldMetadata_GetcurrentdelayAvailableFrames kGetcurrentdelayAvailableFrames{};
  void set_getcurrentdelay_available_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_GetcurrentdelayAvailableFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_GetcurrentdelayFinalDelayFrames =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      LinuxAlsaOutput>;

  static constexpr FieldMetadata_GetcurrentdelayFinalDelayFrames kGetcurrentdelayFinalDelayFrames{};
  void set_getcurrentdelay_final_delay_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_GetcurrentdelayFinalDelayFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class MacAUHALStream_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/14, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  MacAUHALStream_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit MacAUHALStream_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit MacAUHALStream_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_input_buffer_size() const { return at<1>().valid(); }
  int32_t input_buffer_size() const { return at<1>().as_int32(); }
  bool has_output_buffer_size() const { return at<2>().valid(); }
  uint32_t output_buffer_size() const { return at<2>().as_uint32(); }
  bool has_sample_rate() const { return at<3>().valid(); }
  int32_t sample_rate() const { return at<3>().as_int32(); }
  bool has_os_request_playout_timeticks_us() const { return at<4>().valid(); }
  int64_t os_request_playout_timeticks_us() const { return at<4>().as_int64(); }
  bool has_source_request_frames() const { return at<5>().valid(); }
  int32_t source_request_frames() const { return at<5>().as_int32(); }
  bool has_source_request_playout_delay_us() const { return at<6>().valid(); }
  int64_t source_request_playout_delay_us() const { return at<6>().as_int64(); }
  bool has_source_request_playout_timeticks_us() const { return at<7>().valid(); }
  int64_t source_request_playout_timeticks_us() const { return at<7>().as_int64(); }
  bool has_source_request_current_timeticks_us() const { return at<8>().valid(); }
  int64_t source_request_current_timeticks_us() const { return at<8>().as_int64(); }
  bool has_hardware_latency_us() const { return at<9>().valid(); }
  int64_t hardware_latency_us() const { return at<9>().as_int64(); }
  bool has_audiotimestamp_host_time_valid() const { return at<10>().valid(); }
  bool audiotimestamp_host_time_valid() const { return at<10>().as_bool(); }
  bool has_audiotimestamp_mach_timeticks_us() const { return at<11>().valid(); }
  int64_t audiotimestamp_mach_timeticks_us() const { return at<11>().as_int64(); }
  bool has_audiotimestamp_sample_time_frames() const { return at<12>().valid(); }
  double audiotimestamp_sample_time_frames() const { return at<12>().as_double(); }
  bool has_audiotimestamp_last_sample_time_frames() const { return at<13>().valid(); }
  double audiotimestamp_last_sample_time_frames() const { return at<13>().as_double(); }
  bool has_lost_audio_duration_us() const { return at<14>().valid(); }
  int64_t lost_audio_duration_us() const { return at<14>().as_int64(); }
};

class MacAUHALStream : public ::protozero::Message {
 public:
  using Decoder = MacAUHALStream_Decoder;
  enum : int32_t {
    kInputBufferSizeFieldNumber = 1,
    kOutputBufferSizeFieldNumber = 2,
    kSampleRateFieldNumber = 3,
    kOsRequestPlayoutTimeticksUsFieldNumber = 4,
    kSourceRequestFramesFieldNumber = 5,
    kSourceRequestPlayoutDelayUsFieldNumber = 6,
    kSourceRequestPlayoutTimeticksUsFieldNumber = 7,
    kSourceRequestCurrentTimeticksUsFieldNumber = 8,
    kHardwareLatencyUsFieldNumber = 9,
    kAudiotimestampHostTimeValidFieldNumber = 10,
    kAudiotimestampMachTimeticksUsFieldNumber = 11,
    kAudiotimestampSampleTimeFramesFieldNumber = 12,
    kAudiotimestampLastSampleTimeFramesFieldNumber = 13,
    kLostAudioDurationUsFieldNumber = 14,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.MacAUHALStream"; }


  using FieldMetadata_InputBufferSize =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_InputBufferSize kInputBufferSize{};
  void set_input_buffer_size(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_InputBufferSize::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OutputBufferSize =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_OutputBufferSize kOutputBufferSize{};
  void set_output_buffer_size(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_OutputBufferSize::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SampleRate =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_SampleRate kSampleRate{};
  void set_sample_rate(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SampleRate::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OsRequestPlayoutTimeticksUs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_OsRequestPlayoutTimeticksUs kOsRequestPlayoutTimeticksUs{};
  void set_os_request_playout_timeticks_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_OsRequestPlayoutTimeticksUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceRequestFrames =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_SourceRequestFrames kSourceRequestFrames{};
  void set_source_request_frames(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceRequestFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceRequestPlayoutDelayUs =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_SourceRequestPlayoutDelayUs kSourceRequestPlayoutDelayUs{};
  void set_source_request_playout_delay_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceRequestPlayoutDelayUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceRequestPlayoutTimeticksUs =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_SourceRequestPlayoutTimeticksUs kSourceRequestPlayoutTimeticksUs{};
  void set_source_request_playout_timeticks_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceRequestPlayoutTimeticksUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceRequestCurrentTimeticksUs =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_SourceRequestCurrentTimeticksUs kSourceRequestCurrentTimeticksUs{};
  void set_source_request_current_timeticks_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceRequestCurrentTimeticksUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HardwareLatencyUs =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_HardwareLatencyUs kHardwareLatencyUs{};
  void set_hardware_latency_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_HardwareLatencyUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AudiotimestampHostTimeValid =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      MacAUHALStream>;

  static constexpr FieldMetadata_AudiotimestampHostTimeValid kAudiotimestampHostTimeValid{};
  void set_audiotimestamp_host_time_valid(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_AudiotimestampHostTimeValid::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AudiotimestampMachTimeticksUs =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_AudiotimestampMachTimeticksUs kAudiotimestampMachTimeticksUs{};
  void set_audiotimestamp_mach_timeticks_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_AudiotimestampMachTimeticksUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AudiotimestampSampleTimeFrames =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kDouble,
      double,
      MacAUHALStream>;

  static constexpr FieldMetadata_AudiotimestampSampleTimeFrames kAudiotimestampSampleTimeFrames{};
  void set_audiotimestamp_sample_time_frames(double value) {
    static constexpr uint32_t field_id = FieldMetadata_AudiotimestampSampleTimeFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kDouble>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AudiotimestampLastSampleTimeFrames =
    ::protozero::proto_utils::FieldMetadata<
      13,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kDouble,
      double,
      MacAUHALStream>;

  static constexpr FieldMetadata_AudiotimestampLastSampleTimeFrames kAudiotimestampLastSampleTimeFrames{};
  void set_audiotimestamp_last_sample_time_frames(double value) {
    static constexpr uint32_t field_id = FieldMetadata_AudiotimestampLastSampleTimeFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kDouble>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LostAudioDurationUs =
    ::protozero::proto_utils::FieldMetadata<
      14,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MacAUHALStream>;

  static constexpr FieldMetadata_LostAudioDurationUs kLostAudioDurationUs{};
  void set_lost_audio_duration_us(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LostAudioDurationUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class WinRenderAudioFromSource_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/11, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  WinRenderAudioFromSource_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit WinRenderAudioFromSource_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit WinRenderAudioFromSource_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_iaudioclient_buffer_size_frames() const { return at<1>().valid(); }
  uint32_t iaudioclient_buffer_size_frames() const { return at<1>().as_uint32(); }
  bool has_iaudioclient_buffer_unfilled_frames() const { return at<2>().valid(); }
  uint32_t iaudioclient_buffer_unfilled_frames() const { return at<2>().as_uint32(); }
  bool has_packet_size_frames() const { return at<3>().valid(); }
  uint32_t packet_size_frames() const { return at<3>().as_uint32(); }
  bool has_num_written_frames() const { return at<4>().valid(); }
  uint64_t num_written_frames() const { return at<4>().as_uint64(); }
  bool has_num_played_out_frames() const { return at<5>().valid(); }
  uint64_t num_played_out_frames() const { return at<5>().as_uint64(); }
  bool has_iaudioclock_device_frequency() const { return at<6>().valid(); }
  uint64_t iaudioclock_device_frequency() const { return at<6>().as_uint64(); }
  bool has_iaudioclock_stream_position() const { return at<7>().valid(); }
  uint64_t iaudioclock_stream_position() const { return at<7>().as_uint64(); }
  bool has_iaudioclock_qpc_position() const { return at<8>().valid(); }
  uint64_t iaudioclock_qpc_position() const { return at<8>().as_uint64(); }
  bool has_iaudioclock_stream_position_increase_ms() const { return at<9>().valid(); }
  int64_t iaudioclock_stream_position_increase_ms() const { return at<9>().as_int64(); }
  bool has_iaudioclock_qpc_position_increase_ms() const { return at<10>().valid(); }
  int64_t iaudioclock_qpc_position_increase_ms() const { return at<10>().as_int64(); }
  bool has_playout_delay_ms() const { return at<11>().valid(); }
  int64_t playout_delay_ms() const { return at<11>().as_int64(); }
};

class WinRenderAudioFromSource : public ::protozero::Message {
 public:
  using Decoder = WinRenderAudioFromSource_Decoder;
  enum : int32_t {
    kIaudioclientBufferSizeFramesFieldNumber = 1,
    kIaudioclientBufferUnfilledFramesFieldNumber = 2,
    kPacketSizeFramesFieldNumber = 3,
    kNumWrittenFramesFieldNumber = 4,
    kNumPlayedOutFramesFieldNumber = 5,
    kIaudioclockDeviceFrequencyFieldNumber = 6,
    kIaudioclockStreamPositionFieldNumber = 7,
    kIaudioclockQpcPositionFieldNumber = 8,
    kIaudioclockStreamPositionIncreaseMsFieldNumber = 9,
    kIaudioclockQpcPositionIncreaseMsFieldNumber = 10,
    kPlayoutDelayMsFieldNumber = 11,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.WinRenderAudioFromSource"; }


  using FieldMetadata_IaudioclientBufferSizeFrames =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_IaudioclientBufferSizeFrames kIaudioclientBufferSizeFrames{};
  void set_iaudioclient_buffer_size_frames(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IaudioclientBufferSizeFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IaudioclientBufferUnfilledFrames =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_IaudioclientBufferUnfilledFrames kIaudioclientBufferUnfilledFrames{};
  void set_iaudioclient_buffer_unfilled_frames(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IaudioclientBufferUnfilledFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PacketSizeFrames =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_PacketSizeFrames kPacketSizeFrames{};
  void set_packet_size_frames(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PacketSizeFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NumWrittenFrames =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_NumWrittenFrames kNumWrittenFrames{};
  void set_num_written_frames(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NumWrittenFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NumPlayedOutFrames =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_NumPlayedOutFrames kNumPlayedOutFrames{};
  void set_num_played_out_frames(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NumPlayedOutFrames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IaudioclockDeviceFrequency =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_IaudioclockDeviceFrequency kIaudioclockDeviceFrequency{};
  void set_iaudioclock_device_frequency(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IaudioclockDeviceFrequency::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IaudioclockStreamPosition =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_IaudioclockStreamPosition kIaudioclockStreamPosition{};
  void set_iaudioclock_stream_position(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IaudioclockStreamPosition::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IaudioclockQpcPosition =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_IaudioclockQpcPosition kIaudioclockQpcPosition{};
  void set_iaudioclock_qpc_position(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IaudioclockQpcPosition::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IaudioclockStreamPositionIncreaseMs =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_IaudioclockStreamPositionIncreaseMs kIaudioclockStreamPositionIncreaseMs{};
  void set_iaudioclock_stream_position_increase_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IaudioclockStreamPositionIncreaseMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IaudioclockQpcPositionIncreaseMs =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_IaudioclockQpcPositionIncreaseMs kIaudioclockQpcPositionIncreaseMs{};
  void set_iaudioclock_qpc_position_increase_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IaudioclockQpcPositionIncreaseMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PlayoutDelayMs =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      WinRenderAudioFromSource>;

  static constexpr FieldMetadata_PlayoutDelayMs kPlayoutDelayMs{};
  void set_playout_delay_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PlayoutDelayMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class ScrollDeltas_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/14, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  ScrollDeltas_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ScrollDeltas_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ScrollDeltas_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_trace_id() const { return at<1>().valid(); }
  int64_t trace_id() const { return at<1>().as_int64(); }
  bool has_original_delta_x() const { return at<2>().valid(); }
  float original_delta_x() const { return at<2>().as_float(); }
  bool has_original_delta_y() const { return at<3>().valid(); }
  float original_delta_y() const { return at<3>().as_float(); }
  bool has_coalesced_to_trace_id() const { return at<4>().valid(); }
  int64_t coalesced_to_trace_id() const { return at<4>().as_int64(); }
  bool has_provided_to_compositor_delta_x() const { return at<5>().valid(); }
  float provided_to_compositor_delta_x() const { return at<5>().as_float(); }
  bool has_provided_to_compositor_delta_y() const { return at<6>().valid(); }
  float provided_to_compositor_delta_y() const { return at<6>().as_float(); }
  bool has_visual_offset_x() const { return at<7>().valid(); }
  int64_t visual_offset_x() const { return at<7>().as_int64(); }
  bool has_visual_offset_y() const { return at<8>().valid(); }
  int64_t visual_offset_y() const { return at<8>().as_int64(); }
  bool has_event_count_in_gpu_frame() const { return at<9>().valid(); }
  int32_t event_count_in_gpu_frame() const { return at<9>().as_int32(); }
  bool has_trace_ids_in_gpu_frame() const { return at<10>().valid(); }
  ::protozero::RepeatedFieldIterator<int64_t> trace_ids_in_gpu_frame() const { return GetRepeated<int64_t>(10); }
  bool has_original_delta_in_gpu_frame_y() const { return at<11>().valid(); }
  float original_delta_in_gpu_frame_y() const { return at<11>().as_float(); }
  bool has_predicted_delta_in_gpu_frame_y() const { return at<12>().valid(); }
  float predicted_delta_in_gpu_frame_y() const { return at<12>().as_float(); }
  bool has_segregated_original_deltas_in_gpu_frame_y() const { return at<13>().valid(); }
  ::protozero::RepeatedFieldIterator<float> segregated_original_deltas_in_gpu_frame_y() const { return GetRepeated<float>(13); }
  bool has_segregated_predicted_deltas_in_gpu_frame_y() const { return at<14>().valid(); }
  ::protozero::RepeatedFieldIterator<float> segregated_predicted_deltas_in_gpu_frame_y() const { return GetRepeated<float>(14); }
};

class ScrollDeltas : public ::protozero::Message {
 public:
  using Decoder = ScrollDeltas_Decoder;
  enum : int32_t {
    kTraceIdFieldNumber = 1,
    kOriginalDeltaXFieldNumber = 2,
    kOriginalDeltaYFieldNumber = 3,
    kCoalescedToTraceIdFieldNumber = 4,
    kProvidedToCompositorDeltaXFieldNumber = 5,
    kProvidedToCompositorDeltaYFieldNumber = 6,
    kVisualOffsetXFieldNumber = 7,
    kVisualOffsetYFieldNumber = 8,
    kEventCountInGpuFrameFieldNumber = 9,
    kTraceIdsInGpuFrameFieldNumber = 10,
    kOriginalDeltaInGpuFrameYFieldNumber = 11,
    kPredictedDeltaInGpuFrameYFieldNumber = 12,
    kSegregatedOriginalDeltasInGpuFrameYFieldNumber = 13,
    kSegregatedPredictedDeltasInGpuFrameYFieldNumber = 14,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ScrollDeltas"; }


  using FieldMetadata_TraceId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ScrollDeltas>;

  static constexpr FieldMetadata_TraceId kTraceId{};
  void set_trace_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TraceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OriginalDeltaX =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_OriginalDeltaX kOriginalDeltaX{};
  void set_original_delta_x(float value) {
    static constexpr uint32_t field_id = FieldMetadata_OriginalDeltaX::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OriginalDeltaY =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_OriginalDeltaY kOriginalDeltaY{};
  void set_original_delta_y(float value) {
    static constexpr uint32_t field_id = FieldMetadata_OriginalDeltaY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CoalescedToTraceId =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ScrollDeltas>;

  static constexpr FieldMetadata_CoalescedToTraceId kCoalescedToTraceId{};
  void set_coalesced_to_trace_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CoalescedToTraceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProvidedToCompositorDeltaX =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_ProvidedToCompositorDeltaX kProvidedToCompositorDeltaX{};
  void set_provided_to_compositor_delta_x(float value) {
    static constexpr uint32_t field_id = FieldMetadata_ProvidedToCompositorDeltaX::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProvidedToCompositorDeltaY =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_ProvidedToCompositorDeltaY kProvidedToCompositorDeltaY{};
  void set_provided_to_compositor_delta_y(float value) {
    static constexpr uint32_t field_id = FieldMetadata_ProvidedToCompositorDeltaY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VisualOffsetX =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ScrollDeltas>;

  static constexpr FieldMetadata_VisualOffsetX kVisualOffsetX{};
  void set_visual_offset_x(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_VisualOffsetX::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VisualOffsetY =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ScrollDeltas>;

  static constexpr FieldMetadata_VisualOffsetY kVisualOffsetY{};
  void set_visual_offset_y(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_VisualOffsetY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_EventCountInGpuFrame =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ScrollDeltas>;

  static constexpr FieldMetadata_EventCountInGpuFrame kEventCountInGpuFrame{};
  void set_event_count_in_gpu_frame(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_EventCountInGpuFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TraceIdsInGpuFrame =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ScrollDeltas>;

  static constexpr FieldMetadata_TraceIdsInGpuFrame kTraceIdsInGpuFrame{};
  void add_trace_ids_in_gpu_frame(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TraceIdsInGpuFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OriginalDeltaInGpuFrameY =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_OriginalDeltaInGpuFrameY kOriginalDeltaInGpuFrameY{};
  void set_original_delta_in_gpu_frame_y(float value) {
    static constexpr uint32_t field_id = FieldMetadata_OriginalDeltaInGpuFrameY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PredictedDeltaInGpuFrameY =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_PredictedDeltaInGpuFrameY kPredictedDeltaInGpuFrameY{};
  void set_predicted_delta_in_gpu_frame_y(float value) {
    static constexpr uint32_t field_id = FieldMetadata_PredictedDeltaInGpuFrameY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SegregatedOriginalDeltasInGpuFrameY =
    ::protozero::proto_utils::FieldMetadata<
      13,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_SegregatedOriginalDeltasInGpuFrameY kSegregatedOriginalDeltasInGpuFrameY{};
  void add_segregated_original_deltas_in_gpu_frame_y(float value) {
    static constexpr uint32_t field_id = FieldMetadata_SegregatedOriginalDeltasInGpuFrameY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SegregatedPredictedDeltasInGpuFrameY =
    ::protozero::proto_utils::FieldMetadata<
      14,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      ScrollDeltas>;

  static constexpr FieldMetadata_SegregatedPredictedDeltasInGpuFrameY kSegregatedPredictedDeltasInGpuFrameY{};
  void add_segregated_predicted_deltas_in_gpu_frame_y(float value) {
    static constexpr uint32_t field_id = FieldMetadata_SegregatedPredictedDeltasInGpuFrameY::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }
};

class TabSwitchMeasurement_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  TabSwitchMeasurement_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit TabSwitchMeasurement_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit TabSwitchMeasurement_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_result() const { return at<1>().valid(); }
  int32_t result() const { return at<1>().as_int32(); }
  bool has_tab_state() const { return at<2>().valid(); }
  int32_t tab_state() const { return at<2>().as_int32(); }
};

class TabSwitchMeasurement : public ::protozero::Message {
 public:
  using Decoder = TabSwitchMeasurement_Decoder;
  enum : int32_t {
    kResultFieldNumber = 1,
    kTabStateFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.TabSwitchMeasurement"; }


  using Result = ::perfetto::protos::pbzero::TabSwitchMeasurement_Result;
  static inline const char* Result_Name(Result value) {
    return ::perfetto::protos::pbzero::TabSwitchMeasurement_Result_Name(value);
  }

  using TabState = ::perfetto::protos::pbzero::TabSwitchMeasurement_TabState;
  static inline const char* TabState_Name(TabState value) {
    return ::perfetto::protos::pbzero::TabSwitchMeasurement_TabState_Name(value);
  }
  static inline const Result RESULT_UNSPECIFIED = Result::RESULT_UNSPECIFIED;
  static inline const Result RESULT_SUCCESS = Result::RESULT_SUCCESS;
  static inline const Result RESULT_INCOMPLETE = Result::RESULT_INCOMPLETE;
  static inline const Result RESULT_MISSED_TAB_HIDE = Result::RESULT_MISSED_TAB_HIDE;
  static inline const TabState STATE_UNSPECIFIED = TabState::STATE_UNSPECIFIED;
  static inline const TabState STATE_WITH_SAVED_FRAMES = TabState::STATE_WITH_SAVED_FRAMES;
  static inline const TabState STATE_LOADED_NO_SAVED_FRAMES = TabState::STATE_LOADED_NO_SAVED_FRAMES;
  static inline const TabState STATE_NOT_LOADED_NO_SAVED_FRAMES = TabState::STATE_NOT_LOADED_NO_SAVED_FRAMES;

  using FieldMetadata_Result =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      TabSwitchMeasurement_Result,
      TabSwitchMeasurement>;

  static constexpr FieldMetadata_Result kResult{};
  void set_result(TabSwitchMeasurement_Result value) {
    static constexpr uint32_t field_id = FieldMetadata_Result::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TabState =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      TabSwitchMeasurement_TabState,
      TabSwitchMeasurement>;

  static constexpr FieldMetadata_TabState kTabState{};
  void set_tab_state(TabSwitchMeasurement_TabState value) {
    static constexpr uint32_t field_id = FieldMetadata_TabState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class BlinkHighEntropyAPI_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BlinkHighEntropyAPI_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BlinkHighEntropyAPI_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BlinkHighEntropyAPI_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_execution_context() const { return at<1>().valid(); }
  ::protozero::ConstBytes execution_context() const { return at<1>().as_bytes(); }
  bool has_called_api() const { return at<2>().valid(); }
  ::protozero::ConstBytes called_api() const { return at<2>().as_bytes(); }
  bool has_source_location() const { return at<3>().valid(); }
  ::protozero::ConstBytes source_location() const { return at<3>().as_bytes(); }
  bool has_font_lookup() const { return at<4>().valid(); }
  ::protozero::ConstBytes font_lookup() const { return at<4>().as_bytes(); }
};

class BlinkHighEntropyAPI : public ::protozero::Message {
 public:
  using Decoder = BlinkHighEntropyAPI_Decoder;
  enum : int32_t {
    kExecutionContextFieldNumber = 1,
    kCalledApiFieldNumber = 2,
    kSourceLocationFieldNumber = 3,
    kFontLookupFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BlinkHighEntropyAPI"; }

  using JSFunctionArgument = ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument;
  using CalledJsApi = ::perfetto::protos::pbzero::BlinkHighEntropyAPI_CalledJsApi;
  using FontLookup = ::perfetto::protos::pbzero::BlinkHighEntropyAPI_FontLookup;

  using FieldMetadata_ExecutionContext =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkExecutionContext,
      BlinkHighEntropyAPI>;

  static constexpr FieldMetadata_ExecutionContext kExecutionContext{};
  template <typename T = BlinkExecutionContext> T* set_execution_context() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_CalledApi =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkHighEntropyAPI_CalledJsApi,
      BlinkHighEntropyAPI>;

  static constexpr FieldMetadata_CalledApi kCalledApi{};
  template <typename T = BlinkHighEntropyAPI_CalledJsApi> T* set_called_api() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_SourceLocation =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkSourceLocation,
      BlinkHighEntropyAPI>;

  static constexpr FieldMetadata_SourceLocation kSourceLocation{};
  template <typename T = BlinkSourceLocation> T* set_source_location() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_FontLookup =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkHighEntropyAPI_FontLookup,
      BlinkHighEntropyAPI>;

  static constexpr FieldMetadata_FontLookup kFontLookup{};
  template <typename T = BlinkHighEntropyAPI_FontLookup> T* set_font_lookup() {
    return BeginNestedMessage<T>(4);
  }

};

class BlinkHighEntropyAPI_FontLookup_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BlinkHighEntropyAPI_FontLookup_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BlinkHighEntropyAPI_FontLookup_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BlinkHighEntropyAPI_FontLookup_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_type() const { return at<1>().valid(); }
  int32_t type() const { return at<1>().as_int32(); }
  bool has_name() const { return at<2>().valid(); }
  ::protozero::ConstChars name() const { return at<2>().as_string(); }
  bool has_weight() const { return at<3>().valid(); }
  uint64_t weight() const { return at<3>().as_uint64(); }
  bool has_width() const { return at<4>().valid(); }
  uint64_t width() const { return at<4>().as_uint64(); }
  bool has_slope() const { return at<5>().valid(); }
  uint64_t slope() const { return at<5>().as_uint64(); }
};

class BlinkHighEntropyAPI_FontLookup : public ::protozero::Message {
 public:
  using Decoder = BlinkHighEntropyAPI_FontLookup_Decoder;
  enum : int32_t {
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kWeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kSlopeFieldNumber = 5,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BlinkHighEntropyAPI.FontLookup"; }


  using FontLookupType = ::perfetto::protos::pbzero::BlinkHighEntropyAPI_FontLookup_FontLookupType;
  static inline const char* FontLookupType_Name(FontLookupType value) {
    return ::perfetto::protos::pbzero::BlinkHighEntropyAPI_FontLookup_FontLookupType_Name(value);
  }
  static inline const FontLookupType FONT_LOOKUP_UNKNOWN_TYPE = FontLookupType::FONT_LOOKUP_UNKNOWN_TYPE;
  static inline const FontLookupType FONT_LOOKUP_UNIQUE_OR_FAMILY_NAME = FontLookupType::FONT_LOOKUP_UNIQUE_OR_FAMILY_NAME;
  static inline const FontLookupType FONT_LOOKUP_UNIQUE_NAME_ONLY = FontLookupType::FONT_LOOKUP_UNIQUE_NAME_ONLY;

  using FieldMetadata_Type =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BlinkHighEntropyAPI_FontLookup_FontLookupType,
      BlinkHighEntropyAPI_FontLookup>;

  static constexpr FieldMetadata_Type kType{};
  void set_type(BlinkHighEntropyAPI_FontLookup_FontLookupType value) {
    static constexpr uint32_t field_id = FieldMetadata_Type::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Name =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkHighEntropyAPI_FontLookup>;

  static constexpr FieldMetadata_Name kName{};
  void set_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Name::kFieldId, data, size);
  }
  void set_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Name::kFieldId, chars.data, chars.size);
  }
  void set_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Name::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Weight =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      BlinkHighEntropyAPI_FontLookup>;

  static constexpr FieldMetadata_Weight kWeight{};
  void set_weight(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Weight::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Width =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      BlinkHighEntropyAPI_FontLookup>;

  static constexpr FieldMetadata_Width kWidth{};
  void set_width(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Width::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Slope =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      BlinkHighEntropyAPI_FontLookup>;

  static constexpr FieldMetadata_Slope kSlope{};
  void set_slope(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Slope::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class BlinkHighEntropyAPI_CalledJsApi_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  BlinkHighEntropyAPI_CalledJsApi_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BlinkHighEntropyAPI_CalledJsApi_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BlinkHighEntropyAPI_CalledJsApi_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_identifier() const { return at<1>().valid(); }
  ::protozero::ConstChars identifier() const { return at<1>().as_string(); }
  bool has_func_arguments() const { return at<2>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> func_arguments() const { return GetRepeated<::protozero::ConstBytes>(2); }
  bool has_source_location() const { return at<3>().valid(); }
  ::protozero::ConstBytes source_location() const { return at<3>().as_bytes(); }
};

class BlinkHighEntropyAPI_CalledJsApi : public ::protozero::Message {
 public:
  using Decoder = BlinkHighEntropyAPI_CalledJsApi_Decoder;
  enum : int32_t {
    kIdentifierFieldNumber = 1,
    kFuncArgumentsFieldNumber = 2,
    kSourceLocationFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BlinkHighEntropyAPI.CalledJsApi"; }


  using FieldMetadata_Identifier =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkHighEntropyAPI_CalledJsApi>;

  static constexpr FieldMetadata_Identifier kIdentifier{};
  void set_identifier(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Identifier::kFieldId, data, size);
  }
  void set_identifier(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Identifier::kFieldId, chars.data, chars.size);
  }
  void set_identifier(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Identifier::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FuncArguments =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkHighEntropyAPI_JSFunctionArgument,
      BlinkHighEntropyAPI_CalledJsApi>;

  static constexpr FieldMetadata_FuncArguments kFuncArguments{};
  template <typename T = BlinkHighEntropyAPI_JSFunctionArgument> T* add_func_arguments() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_SourceLocation =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkSourceLocation,
      BlinkHighEntropyAPI_CalledJsApi>;

  static constexpr FieldMetadata_SourceLocation kSourceLocation{};
  template <typename T = BlinkSourceLocation> T* set_source_location() {
    return BeginNestedMessage<T>(3);
  }

};

class BlinkHighEntropyAPI_JSFunctionArgument_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BlinkHighEntropyAPI_JSFunctionArgument_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BlinkHighEntropyAPI_JSFunctionArgument_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BlinkHighEntropyAPI_JSFunctionArgument_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_type() const { return at<1>().valid(); }
  int32_t type() const { return at<1>().as_int32(); }
  bool has_value() const { return at<2>().valid(); }
  ::protozero::ConstChars value() const { return at<2>().as_string(); }
};

class BlinkHighEntropyAPI_JSFunctionArgument : public ::protozero::Message {
 public:
  using Decoder = BlinkHighEntropyAPI_JSFunctionArgument_Decoder;
  enum : int32_t {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BlinkHighEntropyAPI.JSFunctionArgument"; }


  using ArgumentType = ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType;
  static inline const char* ArgumentType_Name(ArgumentType value) {
    return ::perfetto::protos::pbzero::BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType_Name(value);
  }
  static inline const ArgumentType UNKNOWN_TYPE = ArgumentType::UNKNOWN_TYPE;
  static inline const ArgumentType NULL_TYPE = ArgumentType::NULL_TYPE;
  static inline const ArgumentType UNDEFINED = ArgumentType::UNDEFINED;
  static inline const ArgumentType BIGINT = ArgumentType::BIGINT;
  static inline const ArgumentType BOOLEAN = ArgumentType::BOOLEAN;
  static inline const ArgumentType FUNCTION = ArgumentType::FUNCTION;
  static inline const ArgumentType NUMBER = ArgumentType::NUMBER;
  static inline const ArgumentType STRING = ArgumentType::STRING;
  static inline const ArgumentType SYMBOL = ArgumentType::SYMBOL;
  static inline const ArgumentType OBJECT = ArgumentType::OBJECT;

  using FieldMetadata_Type =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType,
      BlinkHighEntropyAPI_JSFunctionArgument>;

  static constexpr FieldMetadata_Type kType{};
  void set_type(BlinkHighEntropyAPI_JSFunctionArgument_ArgumentType value) {
    static constexpr uint32_t field_id = FieldMetadata_Type::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Value =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkHighEntropyAPI_JSFunctionArgument>;

  static constexpr FieldMetadata_Value kValue{};
  void set_value(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Value::kFieldId, data, size);
  }
  void set_value(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Value::kFieldId, chars.data, chars.size);
  }
  void set_value(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Value::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

class BlinkSourceLocation_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  BlinkSourceLocation_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BlinkSourceLocation_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BlinkSourceLocation_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_function_name() const { return at<1>().valid(); }
  ::protozero::ConstChars function_name() const { return at<1>().as_string(); }
  bool has_script_id() const { return at<2>().valid(); }
  int32_t script_id() const { return at<2>().as_int32(); }
  bool has_url() const { return at<3>().valid(); }
  ::protozero::ConstChars url() const { return at<3>().as_string(); }
  bool has_line_number() const { return at<4>().valid(); }
  int32_t line_number() const { return at<4>().as_int32(); }
  bool has_column_number() const { return at<5>().valid(); }
  int32_t column_number() const { return at<5>().as_int32(); }
  bool has_stack_trace() const { return at<6>().valid(); }
  ::protozero::ConstChars stack_trace() const { return at<6>().as_string(); }
  bool has_stack_frames() const { return at<7>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> stack_frames() const { return GetRepeated<::protozero::ConstBytes>(7); }
};

class BlinkSourceLocation : public ::protozero::Message {
 public:
  using Decoder = BlinkSourceLocation_Decoder;
  enum : int32_t {
    kFunctionNameFieldNumber = 1,
    kScriptIdFieldNumber = 2,
    kUrlFieldNumber = 3,
    kLineNumberFieldNumber = 4,
    kColumnNumberFieldNumber = 5,
    kStackTraceFieldNumber = 6,
    kStackFramesFieldNumber = 7,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BlinkSourceLocation"; }


  using FieldMetadata_FunctionName =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkSourceLocation>;

  static constexpr FieldMetadata_FunctionName kFunctionName{};
  void set_function_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_FunctionName::kFieldId, data, size);
  }
  void set_function_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_FunctionName::kFieldId, chars.data, chars.size);
  }
  void set_function_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_FunctionName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ScriptId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BlinkSourceLocation>;

  static constexpr FieldMetadata_ScriptId kScriptId{};
  void set_script_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ScriptId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Url =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkSourceLocation>;

  static constexpr FieldMetadata_Url kUrl{};
  void set_url(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Url::kFieldId, data, size);
  }
  void set_url(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Url::kFieldId, chars.data, chars.size);
  }
  void set_url(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Url::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LineNumber =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BlinkSourceLocation>;

  static constexpr FieldMetadata_LineNumber kLineNumber{};
  void set_line_number(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LineNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ColumnNumber =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BlinkSourceLocation>;

  static constexpr FieldMetadata_ColumnNumber kColumnNumber{};
  void set_column_number(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ColumnNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_StackTrace =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkSourceLocation>;

  static constexpr FieldMetadata_StackTrace kStackTrace{};
  void set_stack_trace(const char* data, size_t size) {
    AppendBytes(FieldMetadata_StackTrace::kFieldId, data, size);
  }
  void set_stack_trace(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_StackTrace::kFieldId, chars.data, chars.size);
  }
  void set_stack_trace(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_StackTrace::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_StackFrames =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      V8StackFrame,
      BlinkSourceLocation>;

  static constexpr FieldMetadata_StackFrames kStackFrames{};
  template <typename T = V8StackFrame> T* add_stack_frames() {
    return BeginNestedMessage<T>(7);
  }

};

class BlinkExecutionContext_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BlinkExecutionContext_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BlinkExecutionContext_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BlinkExecutionContext_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_type() const { return at<1>().valid(); }
  int32_t type() const { return at<1>().as_int32(); }
  bool has_url() const { return at<2>().valid(); }
  ::protozero::ConstChars url() const { return at<2>().as_string(); }
  bool has_origin() const { return at<3>().valid(); }
  ::protozero::ConstChars origin() const { return at<3>().as_string(); }
  bool has_world_type() const { return at<4>().valid(); }
  int32_t world_type() const { return at<4>().as_int32(); }
};

class BlinkExecutionContext : public ::protozero::Message {
 public:
  using Decoder = BlinkExecutionContext_Decoder;
  enum : int32_t {
    kTypeFieldNumber = 1,
    kUrlFieldNumber = 2,
    kOriginFieldNumber = 3,
    kWorldTypeFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BlinkExecutionContext"; }


  using ContextType = ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType;
  static inline const char* ContextType_Name(ContextType value) {
    return ::perfetto::protos::pbzero::BlinkExecutionContext_ContextType_Name(value);
  }

  using WorldType = ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType;
  static inline const char* WorldType_Name(WorldType value) {
    return ::perfetto::protos::pbzero::BlinkExecutionContext_WorldType_Name(value);
  }
  static inline const ContextType UNKNOWN_CONTEXT = ContextType::UNKNOWN_CONTEXT;
  static inline const ContextType WINDOW = ContextType::WINDOW;
  static inline const ContextType WORKLET = ContextType::WORKLET;
  static inline const ContextType DEDICATED_WORKER = ContextType::DEDICATED_WORKER;
  static inline const ContextType SHARED_WORKER = ContextType::SHARED_WORKER;
  static inline const ContextType SERVICE_WORKER = ContextType::SERVICE_WORKER;
  static inline const WorldType WORLD_UNKNOWN = WorldType::WORLD_UNKNOWN;
  static inline const WorldType WORLD_MAIN = WorldType::WORLD_MAIN;
  static inline const WorldType WORLD_ISOLATED = WorldType::WORLD_ISOLATED;
  static inline const WorldType WORLD_INSPECTOR_ISOLATED = WorldType::WORLD_INSPECTOR_ISOLATED;
  static inline const WorldType WORLD_REG_EXP = WorldType::WORLD_REG_EXP;
  static inline const WorldType WORLD_FOR_V8_CONTEXT_SNAPSHOT_NON_MAIN = WorldType::WORLD_FOR_V8_CONTEXT_SNAPSHOT_NON_MAIN;
  static inline const WorldType WORLD_WORKER = WorldType::WORLD_WORKER;
  static inline const WorldType WORLD_SHADOW_REALM = WorldType::WORLD_SHADOW_REALM;

  using FieldMetadata_Type =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BlinkExecutionContext_ContextType,
      BlinkExecutionContext>;

  static constexpr FieldMetadata_Type kType{};
  void set_type(BlinkExecutionContext_ContextType value) {
    static constexpr uint32_t field_id = FieldMetadata_Type::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Url =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkExecutionContext>;

  static constexpr FieldMetadata_Url kUrl{};
  void set_url(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Url::kFieldId, data, size);
  }
  void set_url(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Url::kFieldId, chars.data, chars.size);
  }
  void set_url(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Url::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Origin =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BlinkExecutionContext>;

  static constexpr FieldMetadata_Origin kOrigin{};
  void set_origin(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Origin::kFieldId, data, size);
  }
  void set_origin(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Origin::kFieldId, chars.data, chars.size);
  }
  void set_origin(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Origin::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WorldType =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BlinkExecutionContext_WorldType,
      BlinkExecutionContext>;

  static constexpr FieldMetadata_WorldType kWorldType{};
  void set_world_type(BlinkExecutionContext_WorldType value) {
    static constexpr uint32_t field_id = FieldMetadata_WorldType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class V8StackFrame_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  V8StackFrame_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit V8StackFrame_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit V8StackFrame_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_function_name() const { return at<1>().valid(); }
  ::protozero::ConstChars function_name() const { return at<1>().as_string(); }
  bool has_script_location() const { return at<2>().valid(); }
  ::protozero::ConstBytes script_location() const { return at<2>().as_bytes(); }
};

class V8StackFrame : public ::protozero::Message {
 public:
  using Decoder = V8StackFrame_Decoder;
  enum : int32_t {
    kFunctionNameFieldNumber = 1,
    kScriptLocationFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.V8StackFrame"; }

  using ScriptLocation = ::perfetto::protos::pbzero::V8StackFrame_ScriptLocation;

  using FieldMetadata_FunctionName =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      V8StackFrame>;

  static constexpr FieldMetadata_FunctionName kFunctionName{};
  void set_function_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_FunctionName::kFieldId, data, size);
  }
  void set_function_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_FunctionName::kFieldId, chars.data, chars.size);
  }
  void set_function_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_FunctionName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ScriptLocation =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      V8StackFrame_ScriptLocation,
      V8StackFrame>;

  static constexpr FieldMetadata_ScriptLocation kScriptLocation{};
  template <typename T = V8StackFrame_ScriptLocation> T* set_script_location() {
    return BeginNestedMessage<T>(2);
  }

};

class V8StackFrame_ScriptLocation_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  V8StackFrame_ScriptLocation_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit V8StackFrame_ScriptLocation_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit V8StackFrame_ScriptLocation_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_source_url() const { return at<1>().valid(); }
  ::protozero::ConstChars source_url() const { return at<1>().as_string(); }
  bool has_line_number() const { return at<2>().valid(); }
  int64_t line_number() const { return at<2>().as_int64(); }
  bool has_column_number() const { return at<3>().valid(); }
  int64_t column_number() const { return at<3>().as_int64(); }
};

class V8StackFrame_ScriptLocation : public ::protozero::Message {
 public:
  using Decoder = V8StackFrame_ScriptLocation_Decoder;
  enum : int32_t {
    kSourceUrlFieldNumber = 1,
    kLineNumberFieldNumber = 2,
    kColumnNumberFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.V8StackFrame.ScriptLocation"; }


  using FieldMetadata_SourceUrl =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      V8StackFrame_ScriptLocation>;

  static constexpr FieldMetadata_SourceUrl kSourceUrl{};
  void set_source_url(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SourceUrl::kFieldId, data, size);
  }
  void set_source_url(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SourceUrl::kFieldId, chars.data, chars.size);
  }
  void set_source_url(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceUrl::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LineNumber =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      V8StackFrame_ScriptLocation>;

  static constexpr FieldMetadata_LineNumber kLineNumber{};
  void set_line_number(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LineNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ColumnNumber =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      V8StackFrame_ScriptLocation>;

  static constexpr FieldMetadata_ColumnNumber kColumnNumber{};
  void set_column_number(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ColumnNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class UkmPageLoadTimingUpdate_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  UkmPageLoadTimingUpdate_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit UkmPageLoadTimingUpdate_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit UkmPageLoadTimingUpdate_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_ukm_source_id() const { return at<1>().valid(); }
  int64_t ukm_source_id() const { return at<1>().as_int64(); }
  bool has_latest_url() const { return at<2>().valid(); }
  ::protozero::ConstChars latest_url() const { return at<2>().as_string(); }
  bool has_latest_cumulative_layout_shift() const { return at<3>().valid(); }
  float latest_cumulative_layout_shift() const { return at<3>().as_float(); }
  bool has_latest_largest_contentful_paint_ms() const { return at<4>().valid(); }
  double latest_largest_contentful_paint_ms() const { return at<4>().as_double(); }
  bool has_first_contentful_paint_ms() const { return at<5>().valid(); }
  double first_contentful_paint_ms() const { return at<5>().as_double(); }
};

class UkmPageLoadTimingUpdate : public ::protozero::Message {
 public:
  using Decoder = UkmPageLoadTimingUpdate_Decoder;
  enum : int32_t {
    kUkmSourceIdFieldNumber = 1,
    kLatestUrlFieldNumber = 2,
    kLatestCumulativeLayoutShiftFieldNumber = 3,
    kLatestLargestContentfulPaintMsFieldNumber = 4,
    kFirstContentfulPaintMsFieldNumber = 5,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.UkmPageLoadTimingUpdate"; }


  using FieldMetadata_UkmSourceId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      UkmPageLoadTimingUpdate>;

  static constexpr FieldMetadata_UkmSourceId kUkmSourceId{};
  void set_ukm_source_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_UkmSourceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LatestUrl =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      UkmPageLoadTimingUpdate>;

  static constexpr FieldMetadata_LatestUrl kLatestUrl{};
  void set_latest_url(const char* data, size_t size) {
    AppendBytes(FieldMetadata_LatestUrl::kFieldId, data, size);
  }
  void set_latest_url(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_LatestUrl::kFieldId, chars.data, chars.size);
  }
  void set_latest_url(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_LatestUrl::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LatestCumulativeLayoutShift =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      UkmPageLoadTimingUpdate>;

  static constexpr FieldMetadata_LatestCumulativeLayoutShift kLatestCumulativeLayoutShift{};
  void set_latest_cumulative_layout_shift(float value) {
    static constexpr uint32_t field_id = FieldMetadata_LatestCumulativeLayoutShift::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LatestLargestContentfulPaintMs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kDouble,
      double,
      UkmPageLoadTimingUpdate>;

  static constexpr FieldMetadata_LatestLargestContentfulPaintMs kLatestLargestContentfulPaintMs{};
  void set_latest_largest_contentful_paint_ms(double value) {
    static constexpr uint32_t field_id = FieldMetadata_LatestLargestContentfulPaintMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kDouble>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FirstContentfulPaintMs =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kDouble,
      double,
      UkmPageLoadTimingUpdate>;

  static constexpr FieldMetadata_FirstContentfulPaintMs kFirstContentfulPaintMs{};
  void set_first_contentful_paint_ms(double value) {
    static constexpr uint32_t field_id = FieldMetadata_FirstContentfulPaintMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kDouble>
        ::Append(*this, field_id, value);
  }
};

class ActiveProcesses_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  ActiveProcesses_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ActiveProcesses_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ActiveProcesses_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_pid() const { return at<1>().valid(); }
  ::protozero::RepeatedFieldIterator<int32_t> pid() const { return GetRepeated<int32_t>(1); }
};

class ActiveProcesses : public ::protozero::Message {
 public:
  using Decoder = ActiveProcesses_Decoder;
  enum : int32_t {
    kPidFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ActiveProcesses"; }


  using FieldMetadata_Pid =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ActiveProcesses>;

  static constexpr FieldMetadata_Pid kPid{};
  void add_pid(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Pid::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class AndroidToolbar_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AndroidToolbar_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AndroidToolbar_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AndroidToolbar_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_block_capture_reason() const { return at<1>().valid(); }
  int32_t block_capture_reason() const { return at<1>().as_int32(); }
  bool has_allow_capture_reason() const { return at<2>().valid(); }
  int32_t allow_capture_reason() const { return at<2>().as_int32(); }
  bool has_snapshot_difference() const { return at<3>().valid(); }
  int32_t snapshot_difference() const { return at<3>().as_int32(); }
};

class AndroidToolbar : public ::protozero::Message {
 public:
  using Decoder = AndroidToolbar_Decoder;
  enum : int32_t {
    kBlockCaptureReasonFieldNumber = 1,
    kAllowCaptureReasonFieldNumber = 2,
    kSnapshotDifferenceFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AndroidToolbar"; }


  using BlockCaptureReason = ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason;
  static inline const char* BlockCaptureReason_Name(BlockCaptureReason value) {
    return ::perfetto::protos::pbzero::AndroidToolbar_BlockCaptureReason_Name(value);
  }

  using AllowCaptureReason = ::perfetto::protos::pbzero::AndroidToolbar_AllowCaptureReason;
  static inline const char* AllowCaptureReason_Name(AllowCaptureReason value) {
    return ::perfetto::protos::pbzero::AndroidToolbar_AllowCaptureReason_Name(value);
  }

  using SnapshotDifference = ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference;
  static inline const char* SnapshotDifference_Name(SnapshotDifference value) {
    return ::perfetto::protos::pbzero::AndroidToolbar_SnapshotDifference_Name(value);
  }
  static inline const BlockCaptureReason BLOCKED_UNKNOWN = BlockCaptureReason::BLOCKED_UNKNOWN;
  static inline const BlockCaptureReason BLOCKED_TOOLBAR_OR_RESULT_NULL = BlockCaptureReason::BLOCKED_TOOLBAR_OR_RESULT_NULL;
  static inline const BlockCaptureReason BLOCKED_VIEW_NOT_DIRTY = BlockCaptureReason::BLOCKED_VIEW_NOT_DIRTY;
  static inline const BlockCaptureReason BLOCKED_SNAPSHOT_SAME = BlockCaptureReason::BLOCKED_SNAPSHOT_SAME;
  static inline const BlockCaptureReason BLOCKED_URL_BAR_HAS_FOCUS = BlockCaptureReason::BLOCKED_URL_BAR_HAS_FOCUS;
  static inline const BlockCaptureReason BLOCKED_URL_BAR_FOCUS_IN_PROGRESS = BlockCaptureReason::BLOCKED_URL_BAR_FOCUS_IN_PROGRESS;
  static inline const BlockCaptureReason BLOCKED_OPTIONAL_BUTTON_ANIMATION_IN_PROGRESS = BlockCaptureReason::BLOCKED_OPTIONAL_BUTTON_ANIMATION_IN_PROGRESS;
  static inline const BlockCaptureReason BLOCKED_STATUS_ICON_ANIMATION_IN_PROGRESS = BlockCaptureReason::BLOCKED_STATUS_ICON_ANIMATION_IN_PROGRESS;
  static inline const BlockCaptureReason BLOCKED_SCROLL_ABLATION = BlockCaptureReason::BLOCKED_SCROLL_ABLATION;
  static inline const BlockCaptureReason BLOCKED_BROWSER_CONTROLS_LOCKED = BlockCaptureReason::BLOCKED_BROWSER_CONTROLS_LOCKED;
  static inline const BlockCaptureReason BLOCKED_TAB_SWITCHER_MODE = BlockCaptureReason::BLOCKED_TAB_SWITCHER_MODE;
  static inline const BlockCaptureReason BLOCKED_COMPOSITOR_IN_MOTION = BlockCaptureReason::BLOCKED_COMPOSITOR_IN_MOTION;
  static inline const BlockCaptureReason BLOCKED_NTP_Y_TRANSLATION = BlockCaptureReason::BLOCKED_NTP_Y_TRANSLATION;
  static inline const BlockCaptureReason BLOCKED_FULLSCREEN = BlockCaptureReason::BLOCKED_FULLSCREEN;
  static inline const AllowCaptureReason ALLOWED_UNKNOWN = AllowCaptureReason::ALLOWED_UNKNOWN;
  static inline const AllowCaptureReason ALLOWED_FORCE_CAPTURE = AllowCaptureReason::ALLOWED_FORCE_CAPTURE;
  static inline const AllowCaptureReason ALLOWED_SNAPSHOT_DIFFERENCE = AllowCaptureReason::ALLOWED_SNAPSHOT_DIFFERENCE;
  static inline const SnapshotDifference DIFF_NONE = SnapshotDifference::DIFF_NONE;
  static inline const SnapshotDifference DIFF_NULL = SnapshotDifference::DIFF_NULL;
  static inline const SnapshotDifference DIFF_TINT = SnapshotDifference::DIFF_TINT;
  static inline const SnapshotDifference DIFF_TAB_COUNT = SnapshotDifference::DIFF_TAB_COUNT;
  static inline const SnapshotDifference DIFF_OPTIONAL_BUTTON = SnapshotDifference::DIFF_OPTIONAL_BUTTON;
  static inline const SnapshotDifference DIFF_VISUAL_STATE = SnapshotDifference::DIFF_VISUAL_STATE;
  static inline const SnapshotDifference DIFF_SECURITY_ICON = SnapshotDifference::DIFF_SECURITY_ICON;
  static inline const SnapshotDifference DIFF_SHOWING_UPDATE_BADGE = SnapshotDifference::DIFF_SHOWING_UPDATE_BADGE;
  static inline const SnapshotDifference DIFF_PAINT_PREVIEW = SnapshotDifference::DIFF_PAINT_PREVIEW;
  static inline const SnapshotDifference DIFF_PROGRESS = SnapshotDifference::DIFF_PROGRESS;
  static inline const SnapshotDifference DIFF_LOCATION_BAR_WIDTH = SnapshotDifference::DIFF_LOCATION_BAR_WIDTH;
  static inline const SnapshotDifference DIFF_URL_TEXT = SnapshotDifference::DIFF_URL_TEXT;
  static inline const SnapshotDifference DIFF_HOME_BUTTON = SnapshotDifference::DIFF_HOME_BUTTON;
  static inline const SnapshotDifference DIFF_TITLE_TEXT = SnapshotDifference::DIFF_TITLE_TEXT;
  static inline const SnapshotDifference DIFF_CCT_ANIMATION = SnapshotDifference::DIFF_CCT_ANIMATION;
  static inline const SnapshotDifference DIFF_BOOKMARK_BUTTON = SnapshotDifference::DIFF_BOOKMARK_BUTTON;
  static inline const SnapshotDifference DIFF_BACK_BUTTON = SnapshotDifference::DIFF_BACK_BUTTON;
  static inline const SnapshotDifference DIFF_FORWARD_BUTTON = SnapshotDifference::DIFF_FORWARD_BUTTON;
  static inline const SnapshotDifference DIFF_RELOAD_BUTTON = SnapshotDifference::DIFF_RELOAD_BUTTON;

  using FieldMetadata_BlockCaptureReason =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      AndroidToolbar_BlockCaptureReason,
      AndroidToolbar>;

  static constexpr FieldMetadata_BlockCaptureReason kBlockCaptureReason{};
  void set_block_capture_reason(AndroidToolbar_BlockCaptureReason value) {
    static constexpr uint32_t field_id = FieldMetadata_BlockCaptureReason::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AllowCaptureReason =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      AndroidToolbar_AllowCaptureReason,
      AndroidToolbar>;

  static constexpr FieldMetadata_AllowCaptureReason kAllowCaptureReason{};
  void set_allow_capture_reason(AndroidToolbar_AllowCaptureReason value) {
    static constexpr uint32_t field_id = FieldMetadata_AllowCaptureReason::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SnapshotDifference =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      AndroidToolbar_SnapshotDifference,
      AndroidToolbar>;

  static constexpr FieldMetadata_SnapshotDifference kSnapshotDifference{};
  void set_snapshot_difference(AndroidToolbar_SnapshotDifference value) {
    static constexpr uint32_t field_id = FieldMetadata_SnapshotDifference::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class SequenceManagerTask_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  SequenceManagerTask_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit SequenceManagerTask_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit SequenceManagerTask_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_priority() const { return at<1>().valid(); }
  int32_t priority() const { return at<1>().as_int32(); }
  bool has_queue_name() const { return at<2>().valid(); }
  int32_t queue_name() const { return at<2>().as_int32(); }
};

class SequenceManagerTask : public ::protozero::Message {
 public:
  using Decoder = SequenceManagerTask_Decoder;
  enum : int32_t {
    kPriorityFieldNumber = 1,
    kQueueNameFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.SequenceManagerTask"; }


  using Priority = ::perfetto::protos::pbzero::SequenceManagerTask_Priority;
  static inline const char* Priority_Name(Priority value) {
    return ::perfetto::protos::pbzero::SequenceManagerTask_Priority_Name(value);
  }

  using QueueName = ::perfetto::protos::pbzero::SequenceManagerTask_QueueName;
  static inline const char* QueueName_Name(QueueName value) {
    return ::perfetto::protos::pbzero::SequenceManagerTask_QueueName_Name(value);
  }
  static inline const Priority UNKNOWN = Priority::UNKNOWN;
  static inline const Priority CONTROL_PRIORITY = Priority::CONTROL_PRIORITY;
  static inline const Priority HIGHEST_PRIORITY = Priority::HIGHEST_PRIORITY;
  static inline const Priority VERY_HIGH_PRIORITY = Priority::VERY_HIGH_PRIORITY;
  static inline const Priority HIGH_PRIORITY = Priority::HIGH_PRIORITY;
  static inline const Priority NORMAL_PRIORITY = Priority::NORMAL_PRIORITY;
  static inline const Priority LOW_PRIORITY = Priority::LOW_PRIORITY;
  static inline const Priority BEST_EFFORT_PRIORITY = Priority::BEST_EFFORT_PRIORITY;
  static inline const Priority HIGH_PRIORITY_CONTINUATION = Priority::HIGH_PRIORITY_CONTINUATION;
  static inline const Priority NORMAL_PRIORITY_CONTINUATION = Priority::NORMAL_PRIORITY_CONTINUATION;
  static inline const Priority LOW_PRIORITY_CONTINUATION = Priority::LOW_PRIORITY_CONTINUATION;
  static inline const Priority EXTREMELY_HIGH_PRIORITY = Priority::EXTREMELY_HIGH_PRIORITY;
  static inline const QueueName UNKNOWN_TQ = QueueName::UNKNOWN_TQ;
  static inline const QueueName DEFAULT_TQ = QueueName::DEFAULT_TQ;
  static inline const QueueName TASK_ENVIRONMENT_DEFAULT_TQ = QueueName::TASK_ENVIRONMENT_DEFAULT_TQ;
  static inline const QueueName TEST2_TQ = QueueName::TEST2_TQ;
  static inline const QueueName TEST_TQ = QueueName::TEST_TQ;
  static inline const QueueName CONTROL_TQ = QueueName::CONTROL_TQ;
  static inline const QueueName SUBTHREAD_CONTROL_TQ = QueueName::SUBTHREAD_CONTROL_TQ;
  static inline const QueueName SUBTHREAD_DEFAULT_TQ = QueueName::SUBTHREAD_DEFAULT_TQ;
  static inline const QueueName SUBTHREAD_INPUT_TQ = QueueName::SUBTHREAD_INPUT_TQ;
  static inline const QueueName UI_BEST_EFFORT_TQ = QueueName::UI_BEST_EFFORT_TQ;
  static inline const QueueName UI_BOOTSTRAP_TQ = QueueName::UI_BOOTSTRAP_TQ;
  static inline const QueueName UI_CONTROL_TQ = QueueName::UI_CONTROL_TQ;
  static inline const QueueName UI_DEFAULT_TQ = QueueName::UI_DEFAULT_TQ;
  static inline const QueueName UI_NAVIGATION_NETWORK_RESPONSE_TQ = QueueName::UI_NAVIGATION_NETWORK_RESPONSE_TQ;
  static inline const QueueName UI_RUN_ALL_PENDING_TQ = QueueName::UI_RUN_ALL_PENDING_TQ;
  static inline const QueueName UI_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ = QueueName::UI_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ;
  static inline const QueueName UI_THREAD_TQ = QueueName::UI_THREAD_TQ;
  static inline const QueueName UI_USER_BLOCKING_TQ = QueueName::UI_USER_BLOCKING_TQ;
  static inline const QueueName UI_USER_INPUT_TQ = QueueName::UI_USER_INPUT_TQ;
  static inline const QueueName UI_USER_VISIBLE_TQ = QueueName::UI_USER_VISIBLE_TQ;
  static inline const QueueName IO_BEST_EFFORT_TQ = QueueName::IO_BEST_EFFORT_TQ;
  static inline const QueueName IO_BOOTSTRAP_TQ = QueueName::IO_BOOTSTRAP_TQ;
  static inline const QueueName IO_CONTROL_TQ = QueueName::IO_CONTROL_TQ;
  static inline const QueueName IO_DEFAULT_TQ = QueueName::IO_DEFAULT_TQ;
  static inline const QueueName IO_NAVIGATION_NETWORK_RESPONSE_TQ = QueueName::IO_NAVIGATION_NETWORK_RESPONSE_TQ;
  static inline const QueueName IO_RUN_ALL_PENDING_TQ = QueueName::IO_RUN_ALL_PENDING_TQ;
  static inline const QueueName IO_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ = QueueName::IO_SERVICE_WORKER_STORAGE_CONTROL_RESPONSE_TQ;
  static inline const QueueName IO_THREAD_TQ = QueueName::IO_THREAD_TQ;
  static inline const QueueName IO_USER_BLOCKING_TQ = QueueName::IO_USER_BLOCKING_TQ;
  static inline const QueueName IO_USER_INPUT_TQ = QueueName::IO_USER_INPUT_TQ;
  static inline const QueueName IO_USER_VISIBLE_TQ = QueueName::IO_USER_VISIBLE_TQ;
  static inline const QueueName COMPOSITOR_TQ = QueueName::COMPOSITOR_TQ;
  static inline const QueueName DETACHED_TQ = QueueName::DETACHED_TQ;
  static inline const QueueName FRAME_DEFERRABLE_TQ = QueueName::FRAME_DEFERRABLE_TQ;
  static inline const QueueName FRAME_LOADING_CONTROL_TQ = QueueName::FRAME_LOADING_CONTROL_TQ;
  static inline const QueueName FRAME_LOADING_TQ = QueueName::FRAME_LOADING_TQ;
  static inline const QueueName FRAME_PAUSABLE_TQ = QueueName::FRAME_PAUSABLE_TQ;
  static inline const QueueName FRAME_THROTTLEABLE_TQ = QueueName::FRAME_THROTTLEABLE_TQ;
  static inline const QueueName FRAME_UNPAUSABLE_TQ = QueueName::FRAME_UNPAUSABLE_TQ;
  static inline const QueueName IDLE_TQ = QueueName::IDLE_TQ;
  static inline const QueueName INPUT_TQ = QueueName::INPUT_TQ;
  static inline const QueueName IPC_TRACKING_FOR_CACHED_PAGES_TQ = QueueName::IPC_TRACKING_FOR_CACHED_PAGES_TQ;
  static inline const QueueName NON_WAKING_TQ = QueueName::NON_WAKING_TQ;
  static inline const QueueName OTHER_TQ = QueueName::OTHER_TQ;
  static inline const QueueName V8_TQ = QueueName::V8_TQ;
  static inline const QueueName WEB_SCHEDULING_TQ = QueueName::WEB_SCHEDULING_TQ;
  static inline const QueueName WORKER_IDLE_TQ = QueueName::WORKER_IDLE_TQ;
  static inline const QueueName WORKER_PAUSABLE_TQ = QueueName::WORKER_PAUSABLE_TQ;
  static inline const QueueName WORKER_THREAD_INTERNAL_TQ = QueueName::WORKER_THREAD_INTERNAL_TQ;
  static inline const QueueName WORKER_THROTTLEABLE_TQ = QueueName::WORKER_THROTTLEABLE_TQ;
  static inline const QueueName WORKER_UNPAUSABLE_TQ = QueueName::WORKER_UNPAUSABLE_TQ;
  static inline const QueueName WORKER_WEB_SCHEDULING_TQ = QueueName::WORKER_WEB_SCHEDULING_TQ;
  static inline const QueueName UI_USER_BLOCKING_DEFERRABLE_TQ = QueueName::UI_USER_BLOCKING_DEFERRABLE_TQ;
  static inline const QueueName IO_USER_BLOCKING_DEFERRABLE_TQ = QueueName::IO_USER_BLOCKING_DEFERRABLE_TQ;
  static inline const QueueName UI_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ = QueueName::UI_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ;
  static inline const QueueName IO_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ = QueueName::IO_BEFORE_UNLOAD_BROWSER_RESPONSE_TQ;
  static inline const QueueName V8_LOW_PRIORITY_TQ = QueueName::V8_LOW_PRIORITY_TQ;

  using FieldMetadata_Priority =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      SequenceManagerTask_Priority,
      SequenceManagerTask>;

  static constexpr FieldMetadata_Priority kPriority{};
  void set_priority(SequenceManagerTask_Priority value) {
    static constexpr uint32_t field_id = FieldMetadata_Priority::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_QueueName =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      SequenceManagerTask_QueueName,
      SequenceManagerTask>;

  static constexpr FieldMetadata_QueueName kQueueName{};
  void set_queue_name(SequenceManagerTask_QueueName value) {
    static constexpr uint32_t field_id = FieldMetadata_QueueName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class AndroidIPC_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AndroidIPC_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AndroidIPC_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AndroidIPC_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_name() const { return at<1>().valid(); }
  ::protozero::ConstChars name() const { return at<1>().as_string(); }
  bool has_dur_ms() const { return at<2>().valid(); }
  int64_t dur_ms() const { return at<2>().as_int64(); }
};

class AndroidIPC : public ::protozero::Message {
 public:
  using Decoder = AndroidIPC_Decoder;
  enum : int32_t {
    kNameFieldNumber = 1,
    kDurMsFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AndroidIPC"; }


  using FieldMetadata_Name =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AndroidIPC>;

  static constexpr FieldMetadata_Name kName{};
  void set_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Name::kFieldId, data, size);
  }
  void set_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Name::kFieldId, chars.data, chars.size);
  }
  void set_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Name::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DurMs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AndroidIPC>;

  static constexpr FieldMetadata_DurMs kDurMs{};
  void set_dur_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DurMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class NavigationHandle_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  NavigationHandle_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit NavigationHandle_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit NavigationHandle_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_navigation_id() const { return at<1>().valid(); }
  int64_t navigation_id() const { return at<1>().as_int64(); }
  bool has_has_committed() const { return at<2>().valid(); }
  bool has_committed() const { return at<2>().as_bool(); }
  bool has_is_error_page() const { return at<3>().valid(); }
  bool is_error_page() const { return at<3>().as_bool(); }
  bool has_frame_tree_node() const { return at<4>().valid(); }
  ::protozero::ConstBytes frame_tree_node() const { return at<4>().as_bytes(); }
  bool has_render_frame_host() const { return at<5>().valid(); }
  ::protozero::ConstBytes render_frame_host() const { return at<5>().as_bytes(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class NavigationHandle : public ::protozero::Message {
 public:
  using Decoder = NavigationHandle_Decoder;
  enum : int32_t {
    kNavigationIdFieldNumber = 1,
    kHasCommittedFieldNumber = 2,
    kIsErrorPageFieldNumber = 3,
    kFrameTreeNodeFieldNumber = 4,
    kRenderFrameHostFieldNumber = 5,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.NavigationHandle"; }


  using FieldMetadata_NavigationId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      NavigationHandle>;

  static constexpr FieldMetadata_NavigationId kNavigationId{};
  void set_navigation_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NavigationId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasCommitted =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      NavigationHandle>;

  static constexpr FieldMetadata_HasCommitted kHasCommitted{};
  void set_has_committed(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasCommitted::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsErrorPage =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      NavigationHandle>;

  static constexpr FieldMetadata_IsErrorPage kIsErrorPage{};
  void set_is_error_page(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsErrorPage::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameTreeNode =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      FrameTreeNodeInfo,
      NavigationHandle>;

  static constexpr FieldMetadata_FrameTreeNode kFrameTreeNode{};
  template <typename T = FrameTreeNodeInfo> T* set_frame_tree_node() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_RenderFrameHost =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameHost,
      NavigationHandle>;

  static constexpr FieldMetadata_RenderFrameHost kRenderFrameHost{};
  template <typename T = RenderFrameHost> T* set_render_frame_host() {
    return BeginNestedMessage<T>(5);
  }


  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      NavigationHandle>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class ProcessSingleton_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ProcessSingleton_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ProcessSingleton_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ProcessSingleton_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_remote_process_interaction_result() const { return at<1>().valid(); }
  int32_t remote_process_interaction_result() const { return at<1>().as_int32(); }
  bool has_remote_process_terminate_reason() const { return at<2>().valid(); }
  int32_t remote_process_terminate_reason() const { return at<2>().as_int32(); }
};

class ProcessSingleton : public ::protozero::Message {
 public:
  using Decoder = ProcessSingleton_Decoder;
  enum : int32_t {
    kRemoteProcessInteractionResultFieldNumber = 1,
    kRemoteProcessTerminateReasonFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ProcessSingleton"; }


  using RemoteProcessInteractionResult = ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult;
  static inline const char* RemoteProcessInteractionResult_Name(RemoteProcessInteractionResult value) {
    return ::perfetto::protos::pbzero::ProcessSingleton_RemoteProcessInteractionResult_Name(value);
  }

  using RemoteHungProcessTerminateReason = ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason;
  static inline const char* RemoteHungProcessTerminateReason_Name(RemoteHungProcessTerminateReason value) {
    return ::perfetto::protos::pbzero::ProcessSingleton_RemoteHungProcessTerminateReason_Name(value);
  }
  static inline const RemoteProcessInteractionResult INTERACTION_RESULT_UNSPECIFIED = RemoteProcessInteractionResult::INTERACTION_RESULT_UNSPECIFIED;
  static inline const RemoteProcessInteractionResult TERMINATE_FAILED = RemoteProcessInteractionResult::TERMINATE_FAILED;
  static inline const RemoteProcessInteractionResult REMOTE_PROCESS_NOT_FOUND = RemoteProcessInteractionResult::REMOTE_PROCESS_NOT_FOUND;
  static inline const RemoteProcessInteractionResult TERMINATE_WAIT_TIMEOUT = RemoteProcessInteractionResult::TERMINATE_WAIT_TIMEOUT;
  static inline const RemoteProcessInteractionResult RUNNING_PROCESS_NOTIFY_ERROR = RemoteProcessInteractionResult::RUNNING_PROCESS_NOTIFY_ERROR;
  static inline const RemoteProcessInteractionResult TERMINATE_NOT_ENOUGH_PERMISSIONS = RemoteProcessInteractionResult::TERMINATE_NOT_ENOUGH_PERMISSIONS;
  static inline const RemoteProcessInteractionResult REMOTE_PROCESS_SHUTTING_DOWN = RemoteProcessInteractionResult::REMOTE_PROCESS_SHUTTING_DOWN;
  static inline const RemoteProcessInteractionResult PROFILE_UNLOCKED = RemoteProcessInteractionResult::PROFILE_UNLOCKED;
  static inline const RemoteProcessInteractionResult PROFILE_UNLOCKED_BEFORE_KILL = RemoteProcessInteractionResult::PROFILE_UNLOCKED_BEFORE_KILL;
  static inline const RemoteProcessInteractionResult SAME_BROWSER_INSTANCE = RemoteProcessInteractionResult::SAME_BROWSER_INSTANCE;
  static inline const RemoteProcessInteractionResult SAME_BROWSER_INSTANCE_BEFORE_KILL = RemoteProcessInteractionResult::SAME_BROWSER_INSTANCE_BEFORE_KILL;
  static inline const RemoteProcessInteractionResult FAILED_TO_EXTRACT_PID = RemoteProcessInteractionResult::FAILED_TO_EXTRACT_PID;
  static inline const RemoteProcessInteractionResult INVALID_LOCK_FILE = RemoteProcessInteractionResult::INVALID_LOCK_FILE;
  static inline const RemoteProcessInteractionResult ORPHANED_LOCK_FILE = RemoteProcessInteractionResult::ORPHANED_LOCK_FILE;
  static inline const RemoteProcessInteractionResult USER_REFUSED_TERMINATION = RemoteProcessInteractionResult::USER_REFUSED_TERMINATION;
  static inline const RemoteProcessInteractionResult TERMINATE_SUCCEEDED = RemoteProcessInteractionResult::TERMINATE_SUCCEEDED;
  static inline const RemoteHungProcessTerminateReason TERMINATE_REASON_UNSPECIFIED = RemoteHungProcessTerminateReason::TERMINATE_REASON_UNSPECIFIED;
  static inline const RemoteHungProcessTerminateReason USER_ACCEPTED_TERMINATION = RemoteHungProcessTerminateReason::USER_ACCEPTED_TERMINATION;
  static inline const RemoteHungProcessTerminateReason NO_VISIBLE_WINDOW_FOUND = RemoteHungProcessTerminateReason::NO_VISIBLE_WINDOW_FOUND;
  static inline const RemoteHungProcessTerminateReason NOTIFY_ATTEMPTS_EXCEEDED = RemoteHungProcessTerminateReason::NOTIFY_ATTEMPTS_EXCEEDED;
  static inline const RemoteHungProcessTerminateReason SOCKET_WRITE_FAILED = RemoteHungProcessTerminateReason::SOCKET_WRITE_FAILED;
  static inline const RemoteHungProcessTerminateReason SOCKET_READ_FAILED = RemoteHungProcessTerminateReason::SOCKET_READ_FAILED;

  using FieldMetadata_RemoteProcessInteractionResult =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ProcessSingleton_RemoteProcessInteractionResult,
      ProcessSingleton>;

  static constexpr FieldMetadata_RemoteProcessInteractionResult kRemoteProcessInteractionResult{};
  void set_remote_process_interaction_result(ProcessSingleton_RemoteProcessInteractionResult value) {
    static constexpr uint32_t field_id = FieldMetadata_RemoteProcessInteractionResult::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RemoteProcessTerminateReason =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ProcessSingleton_RemoteHungProcessTerminateReason,
      ProcessSingleton>;

  static constexpr FieldMetadata_RemoteProcessTerminateReason kRemoteProcessTerminateReason{};
  void set_remote_process_terminate_reason(ProcessSingleton_RemoteHungProcessTerminateReason value) {
    static constexpr uint32_t field_id = FieldMetadata_RemoteProcessTerminateReason::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class EventLatency_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  EventLatency_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit EventLatency_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit EventLatency_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_event_type() const { return at<1>().valid(); }
  int32_t event_type() const { return at<1>().as_int32(); }
  bool has_has_high_latency() const { return at<2>().valid(); }
  bool has_high_latency() const { return at<2>().as_bool(); }
  bool has_high_latency_stage() const { return at<3>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> high_latency_stage() const { return GetRepeated<::protozero::ConstChars>(3); }
  bool has_event_latency_id() const { return at<4>().valid(); }
  int64_t event_latency_id() const { return at<4>().as_int64(); }
  bool has_is_janky_scrolled_frame() const { return at<5>().valid(); }
  bool is_janky_scrolled_frame() const { return at<5>().as_bool(); }
  bool has_vsync_interval_ms() const { return at<6>().valid(); }
  double vsync_interval_ms() const { return at<6>().as_double(); }
};

class EventLatency : public ::protozero::Message {
 public:
  using Decoder = EventLatency_Decoder;
  enum : int32_t {
    kEventTypeFieldNumber = 1,
    kHasHighLatencyFieldNumber = 2,
    kHighLatencyStageFieldNumber = 3,
    kEventLatencyIdFieldNumber = 4,
    kIsJankyScrolledFrameFieldNumber = 5,
    kVsyncIntervalMsFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.EventLatency"; }


  using EventType = ::perfetto::protos::pbzero::EventLatency_EventType;
  static inline const char* EventType_Name(EventType value) {
    return ::perfetto::protos::pbzero::EventLatency_EventType_Name(value);
  }
  static inline const EventType EVENT_TYPE_UNSPECIFIED = EventType::EVENT_TYPE_UNSPECIFIED;
  static inline const EventType MOUSE_PRESSED = EventType::MOUSE_PRESSED;
  static inline const EventType MOUSE_RELEASED = EventType::MOUSE_RELEASED;
  static inline const EventType MOUSE_WHEEL = EventType::MOUSE_WHEEL;
  static inline const EventType KEY_PRESSED = EventType::KEY_PRESSED;
  static inline const EventType KEY_RELEASED = EventType::KEY_RELEASED;
  static inline const EventType TOUCH_PRESSED = EventType::TOUCH_PRESSED;
  static inline const EventType TOUCH_RELEASED = EventType::TOUCH_RELEASED;
  static inline const EventType TOUCH_MOVED = EventType::TOUCH_MOVED;
  static inline const EventType GESTURE_SCROLL_BEGIN = EventType::GESTURE_SCROLL_BEGIN;
  static inline const EventType GESTURE_SCROLL_UPDATE = EventType::GESTURE_SCROLL_UPDATE;
  static inline const EventType GESTURE_SCROLL_END = EventType::GESTURE_SCROLL_END;
  static inline const EventType GESTURE_DOUBLE_TAP = EventType::GESTURE_DOUBLE_TAP;
  static inline const EventType GESTURE_LONG_PRESS = EventType::GESTURE_LONG_PRESS;
  static inline const EventType GESTURE_LONG_TAP = EventType::GESTURE_LONG_TAP;
  static inline const EventType GESTURE_SHOW_PRESS = EventType::GESTURE_SHOW_PRESS;
  static inline const EventType GESTURE_TAP = EventType::GESTURE_TAP;
  static inline const EventType GESTURE_TAP_CANCEL = EventType::GESTURE_TAP_CANCEL;
  static inline const EventType GESTURE_TAP_DOWN = EventType::GESTURE_TAP_DOWN;
  static inline const EventType GESTURE_TAP_UNCONFIRMED = EventType::GESTURE_TAP_UNCONFIRMED;
  static inline const EventType GESTURE_TWO_FINGER_TAP = EventType::GESTURE_TWO_FINGER_TAP;
  static inline const EventType FIRST_GESTURE_SCROLL_UPDATE = EventType::FIRST_GESTURE_SCROLL_UPDATE;
  static inline const EventType MOUSE_DRAGGED = EventType::MOUSE_DRAGGED;
  static inline const EventType GESTURE_PINCH_BEGIN = EventType::GESTURE_PINCH_BEGIN;
  static inline const EventType GESTURE_PINCH_END = EventType::GESTURE_PINCH_END;
  static inline const EventType GESTURE_PINCH_UPDATE = EventType::GESTURE_PINCH_UPDATE;
  static inline const EventType INERTIAL_GESTURE_SCROLL_UPDATE = EventType::INERTIAL_GESTURE_SCROLL_UPDATE;
  static inline const EventType MOUSE_MOVED_EVENT = EventType::MOUSE_MOVED_EVENT;

  using FieldMetadata_EventType =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      EventLatency_EventType,
      EventLatency>;

  static constexpr FieldMetadata_EventType kEventType{};
  void set_event_type(EventLatency_EventType value) {
    static constexpr uint32_t field_id = FieldMetadata_EventType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasHighLatency =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      EventLatency>;

  static constexpr FieldMetadata_HasHighLatency kHasHighLatency{};
  void set_has_high_latency(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasHighLatency::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HighLatencyStage =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      EventLatency>;

  static constexpr FieldMetadata_HighLatencyStage kHighLatencyStage{};
  void add_high_latency_stage(const char* data, size_t size) {
    AppendBytes(FieldMetadata_HighLatencyStage::kFieldId, data, size);
  }
  void add_high_latency_stage(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_HighLatencyStage::kFieldId, chars.data, chars.size);
  }
  void add_high_latency_stage(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_HighLatencyStage::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_EventLatencyId =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      EventLatency>;

  static constexpr FieldMetadata_EventLatencyId kEventLatencyId{};
  void set_event_latency_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_EventLatencyId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsJankyScrolledFrame =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      EventLatency>;

  static constexpr FieldMetadata_IsJankyScrolledFrame kIsJankyScrolledFrame{};
  void set_is_janky_scrolled_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsJankyScrolledFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_VsyncIntervalMs =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kDouble,
      double,
      EventLatency>;

  static constexpr FieldMetadata_VsyncIntervalMs kVsyncIntervalMs{};
  void set_vsync_interval_ms(double value) {
    static constexpr uint32_t field_id = FieldMetadata_VsyncIntervalMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kDouble>
        ::Append(*this, field_id, value);
  }
};

class RendererMainThreadTaskExecution_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  RendererMainThreadTaskExecution_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RendererMainThreadTaskExecution_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RendererMainThreadTaskExecution_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_task_type() const { return at<1>().valid(); }
  int32_t task_type() const { return at<1>().as_int32(); }
  bool has_frame_visible() const { return at<2>().valid(); }
  bool frame_visible() const { return at<2>().as_bool(); }
  bool has_page_visible() const { return at<3>().valid(); }
  bool page_visible() const { return at<3>().as_bool(); }
  bool has_frame_type() const { return at<4>().valid(); }
  int32_t frame_type() const { return at<4>().as_int32(); }
  bool has_is_ad_frame() const { return at<5>().valid(); }
  bool is_ad_frame() const { return at<5>().as_bool(); }
};

class RendererMainThreadTaskExecution : public ::protozero::Message {
 public:
  using Decoder = RendererMainThreadTaskExecution_Decoder;
  enum : int32_t {
    kTaskTypeFieldNumber = 1,
    kFrameVisibleFieldNumber = 2,
    kPageVisibleFieldNumber = 3,
    kFrameTypeFieldNumber = 4,
    kIsAdFrameFieldNumber = 5,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RendererMainThreadTaskExecution"; }


  using TaskType = ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType;
  static inline const char* TaskType_Name(TaskType value) {
    return ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_TaskType_Name(value);
  }

  using FrameType = ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_FrameType;
  static inline const char* FrameType_Name(FrameType value) {
    return ::perfetto::protos::pbzero::RendererMainThreadTaskExecution_FrameType_Name(value);
  }
  static inline const TaskType TASK_TYPE_UNKNOWN = TaskType::TASK_TYPE_UNKNOWN;
  static inline const TaskType TASK_TYPE_DOM_MANIPULATION = TaskType::TASK_TYPE_DOM_MANIPULATION;
  static inline const TaskType TASK_TYPE_USER_INTERACTION = TaskType::TASK_TYPE_USER_INTERACTION;
  static inline const TaskType TASK_TYPE_NETWORKING = TaskType::TASK_TYPE_NETWORKING;
  static inline const TaskType TASK_TYPE_NETWORKING_CONTROL = TaskType::TASK_TYPE_NETWORKING_CONTROL;
  static inline const TaskType TASK_TYPE_HISTORY_TRAVERSAL = TaskType::TASK_TYPE_HISTORY_TRAVERSAL;
  static inline const TaskType TASK_TYPE_EMBED = TaskType::TASK_TYPE_EMBED;
  static inline const TaskType TASK_TYPE_MEDIA_ELEMENT_EVENT = TaskType::TASK_TYPE_MEDIA_ELEMENT_EVENT;
  static inline const TaskType TASK_TYPE_CANVAS_BLOB_SERIALIZATION = TaskType::TASK_TYPE_CANVAS_BLOB_SERIALIZATION;
  static inline const TaskType TASK_TYPE_MICROTASK = TaskType::TASK_TYPE_MICROTASK;
  static inline const TaskType TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_HIGH_NESTING = TaskType::TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_HIGH_NESTING;
  static inline const TaskType TASK_TYPE_REMOTE_EVENT = TaskType::TASK_TYPE_REMOTE_EVENT;
  static inline const TaskType TASK_TYPE_WEB_SOCKET = TaskType::TASK_TYPE_WEB_SOCKET;
  static inline const TaskType TASK_TYPE_POSTED_MESSAGE = TaskType::TASK_TYPE_POSTED_MESSAGE;
  static inline const TaskType TASK_TYPE_UNSHIPPED_PORT_MESSAGE = TaskType::TASK_TYPE_UNSHIPPED_PORT_MESSAGE;
  static inline const TaskType TASK_TYPE_FILE_READING = TaskType::TASK_TYPE_FILE_READING;
  static inline const TaskType TASK_TYPE_DATABASE_ACCESS = TaskType::TASK_TYPE_DATABASE_ACCESS;
  static inline const TaskType TASK_TYPE_PRESENTATION = TaskType::TASK_TYPE_PRESENTATION;
  static inline const TaskType TASK_TYPE_SENSOR = TaskType::TASK_TYPE_SENSOR;
  static inline const TaskType TASK_TYPE_PERFORMANCE_TIMELINE = TaskType::TASK_TYPE_PERFORMANCE_TIMELINE;
  static inline const TaskType TASK_TYPE_WEB_GL = TaskType::TASK_TYPE_WEB_GL;
  static inline const TaskType TASK_TYPE_IDLE_TASK = TaskType::TASK_TYPE_IDLE_TASK;
  static inline const TaskType TASK_TYPE_MISC_PLATFORM_API = TaskType::TASK_TYPE_MISC_PLATFORM_API;
  static inline const TaskType TASK_TYPE_INTERNAL_DEFAULT = TaskType::TASK_TYPE_INTERNAL_DEFAULT;
  static inline const TaskType TASK_TYPE_INTERNAL_LOADING = TaskType::TASK_TYPE_INTERNAL_LOADING;
  static inline const TaskType TASK_TYPE_INTERNAL_TEST = TaskType::TASK_TYPE_INTERNAL_TEST;
  static inline const TaskType TASK_TYPE_INTERNAL_WEB_CRYPTO = TaskType::TASK_TYPE_INTERNAL_WEB_CRYPTO;
  static inline const TaskType TASK_TYPE_INTERNAL_MEDIA = TaskType::TASK_TYPE_INTERNAL_MEDIA;
  static inline const TaskType TASK_TYPE_INTERNAL_MEDIA_REALTIME = TaskType::TASK_TYPE_INTERNAL_MEDIA_REALTIME;
  static inline const TaskType TASK_TYPE_INTERNAL_USER_INTERACTION = TaskType::TASK_TYPE_INTERNAL_USER_INTERACTION;
  static inline const TaskType TASK_TYPE_INTERNAL_INSPECTOR = TaskType::TASK_TYPE_INTERNAL_INSPECTOR;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8 = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_COMPOSITOR = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_COMPOSITOR;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_DEFAULT = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_DEFAULT;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_INPUT = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_INPUT;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IDLE = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IDLE;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_CONTROL = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_CONTROL;
  static inline const TaskType TASK_TYPE_INTERNAL_INTERSECTION_OBSERVER = TaskType::TASK_TYPE_INTERNAL_INTERSECTION_OBSERVER;
  static inline const TaskType TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_DEFAULT = TaskType::TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_DEFAULT;
  static inline const TaskType TASK_TYPE_WORKER_THREAD_TASK_QUEUE_DEFAULT = TaskType::TASK_TYPE_WORKER_THREAD_TASK_QUEUE_DEFAULT;
  static inline const TaskType TASK_TYPE_WORKER_THREAD_TASK_QUEUE_V8 = TaskType::TASK_TYPE_WORKER_THREAD_TASK_QUEUE_V8;
  static inline const TaskType TASK_TYPE_WORKER_THREAD_TASK_QUEUE_COMPOSITOR = TaskType::TASK_TYPE_WORKER_THREAD_TASK_QUEUE_COMPOSITOR;
  static inline const TaskType TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_INPUT = TaskType::TASK_TYPE_COMPOSITOR_THREAD_TASK_QUEUE_INPUT;
  static inline const TaskType TASK_TYPE_NETWORKING_WITH_URL_LOADER_ANNOTATION = TaskType::TASK_TYPE_NETWORKING_WITH_URL_LOADER_ANNOTATION;
  static inline const TaskType TASK_TYPE_WORKER_ANIMATION = TaskType::TASK_TYPE_WORKER_ANIMATION;
  static inline const TaskType TASK_TYPE_INTERNAL_TRANSLATION = TaskType::TASK_TYPE_INTERNAL_TRANSLATION;
  static inline const TaskType TASK_TYPE_FONT_LOADING = TaskType::TASK_TYPE_FONT_LOADING;
  static inline const TaskType TASK_TYPE_APPLICATION_LIFECYCLE = TaskType::TASK_TYPE_APPLICATION_LIFECYCLE;
  static inline const TaskType TASK_TYPE_BACKGROUND_FETCH = TaskType::TASK_TYPE_BACKGROUND_FETCH;
  static inline const TaskType TASK_TYPE_PERMISSION = TaskType::TASK_TYPE_PERMISSION;
  static inline const TaskType TASK_TYPE_SERVICE_WORKER_CLIENT_MESSAGE = TaskType::TASK_TYPE_SERVICE_WORKER_CLIENT_MESSAGE;
  static inline const TaskType TASK_TYPE_INTERNAL_CONTENT_CAPTURE = TaskType::TASK_TYPE_INTERNAL_CONTENT_CAPTURE;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_MEMORY_PURGE = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_MEMORY_PURGE;
  static inline const TaskType TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED = TaskType::TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED;
  static inline const TaskType TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED_UNFREEZABLE = TaskType::TASK_TYPE_INTERNAL_NAVIGATION_ASSOCIATED_UNFREEZABLE;
  static inline const TaskType TASK_TYPE_INTERNAL_CONTINUE_SCRIPT_LOADING = TaskType::TASK_TYPE_INTERNAL_CONTINUE_SCRIPT_LOADING;
  static inline const TaskType TASK_TYPE_WEB_LOCKS = TaskType::TASK_TYPE_WEB_LOCKS;
  static inline const TaskType TASK_TYPE_WEB_SCHEDULING_POSTED_TASK = TaskType::TASK_TYPE_WEB_SCHEDULING_POSTED_TASK;
  static inline const TaskType TASK_TYPE_INTERNAL_FRAME_LIFE_CYCLE_CONTROL = TaskType::TASK_TYPE_INTERNAL_FRAME_LIFE_CYCLE_CONTROL;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_NON_WAKING = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_NON_WAKING;
  static inline const TaskType TASK_TYPE_INTERNAL_FIND_IN_PAGE = TaskType::TASK_TYPE_INTERNAL_FIND_IN_PAGE;
  static inline const TaskType TASK_TYPE_INTERNAL_HIGH_PRIORITY_LOCAL_FRAME = TaskType::TASK_TYPE_INTERNAL_HIGH_PRIORITY_LOCAL_FRAME;
  static inline const TaskType TASK_TYPE_JAVASCRIPT_TIMER_IMMEDIATE = TaskType::TASK_TYPE_JAVASCRIPT_TIMER_IMMEDIATE;
  static inline const TaskType TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_LOW_NESTING = TaskType::TASK_TYPE_JAVASCRIPT_TIMER_DELAYED_LOW_NESTING;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IPC_TRACKING = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_IPC_TRACKING;
  static inline const TaskType TASK_TYPE_NETWORKING_UNFREEZABLE = TaskType::TASK_TYPE_NETWORKING_UNFREEZABLE;
  static inline const TaskType TASK_TYPE_WAKE_LOCK = TaskType::TASK_TYPE_WAKE_LOCK;
  static inline const TaskType TASK_TYPE_INTERNAL_INPUT_BLOCKING = TaskType::TASK_TYPE_INTERNAL_INPUT_BLOCKING;
  static inline const TaskType TASK_TYPE_WEB_GPU = TaskType::TASK_TYPE_WEB_GPU;
  static inline const TaskType TASK_TYPE_INTERNAL_POST_MESSAGE_FORWARDING = TaskType::TASK_TYPE_INTERNAL_POST_MESSAGE_FORWARDING;
  static inline const TaskType TASK_TYPE_INTERNAL_NAVIGATION_CANCELLATION = TaskType::TASK_TYPE_INTERNAL_NAVIGATION_CANCELLATION;
  static inline const TaskType TASK_TYPE_LOW_PRIORITY_SCRIPT_EXECUTION = TaskType::TASK_TYPE_LOW_PRIORITY_SCRIPT_EXECUTION;
  static inline const TaskType TASK_TYPE_STORAGE = TaskType::TASK_TYPE_STORAGE;
  static inline const TaskType TASK_TYPE_NETWORKING_UNFREEZABLE_RENDER_BLOCKING_LOADING = TaskType::TASK_TYPE_NETWORKING_UNFREEZABLE_RENDER_BLOCKING_LOADING;
  static inline const TaskType TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8_LOW_PRIORITY = TaskType::TASK_TYPE_MAIN_THREAD_TASK_QUEUE_V8_LOW_PRIORITY;
  static inline const TaskType TASK_TYPE_CLIPBOARD = TaskType::TASK_TYPE_CLIPBOARD;
  static inline const TaskType TASK_TYPE_MACHINE_LEARNING = TaskType::TASK_TYPE_MACHINE_LEARNING;
  static inline const FrameType FRAME_TYPE_UNSPECIFIED = FrameType::FRAME_TYPE_UNSPECIFIED;
  static inline const FrameType FRAME_TYPE_MAIN_FRAME = FrameType::FRAME_TYPE_MAIN_FRAME;
  static inline const FrameType FRAME_TYPE_SAME_ORIGIN_SUBFRAME = FrameType::FRAME_TYPE_SAME_ORIGIN_SUBFRAME;
  static inline const FrameType FRAME_TYPE_CROSS_ORIGIN_SUBFRAME = FrameType::FRAME_TYPE_CROSS_ORIGIN_SUBFRAME;

  using FieldMetadata_TaskType =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      RendererMainThreadTaskExecution_TaskType,
      RendererMainThreadTaskExecution>;

  static constexpr FieldMetadata_TaskType kTaskType{};
  void set_task_type(RendererMainThreadTaskExecution_TaskType value) {
    static constexpr uint32_t field_id = FieldMetadata_TaskType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameVisible =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RendererMainThreadTaskExecution>;

  static constexpr FieldMetadata_FrameVisible kFrameVisible{};
  void set_frame_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameVisible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PageVisible =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RendererMainThreadTaskExecution>;

  static constexpr FieldMetadata_PageVisible kPageVisible{};
  void set_page_visible(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_PageVisible::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameType =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      RendererMainThreadTaskExecution_FrameType,
      RendererMainThreadTaskExecution>;

  static constexpr FieldMetadata_FrameType kFrameType{};
  void set_frame_type(RendererMainThreadTaskExecution_FrameType value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsAdFrame =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RendererMainThreadTaskExecution>;

  static constexpr FieldMetadata_IsAdFrame kIsAdFrame{};
  void set_is_ad_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsAdFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }
};

class BackForwardCacheCanStoreDocumentResult_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BackForwardCacheCanStoreDocumentResult_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BackForwardCacheCanStoreDocumentResult_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BackForwardCacheCanStoreDocumentResult_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_back_forward_cache_not_restored_reason() const { return at<1>().valid(); }
  int32_t back_forward_cache_not_restored_reason() const { return at<1>().as_int32(); }
};

class BackForwardCacheCanStoreDocumentResult : public ::protozero::Message {
 public:
  using Decoder = BackForwardCacheCanStoreDocumentResult_Decoder;
  enum : int32_t {
    kBackForwardCacheNotRestoredReasonFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BackForwardCacheCanStoreDocumentResult"; }


  using BackForwardCacheNotRestoredReason = ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason;
  static inline const char* BackForwardCacheNotRestoredReason_Name(BackForwardCacheNotRestoredReason value) {
    return ::perfetto::protos::pbzero::BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason_Name(value);
  }
  static inline const BackForwardCacheNotRestoredReason NOT_MAIN_FRAME = BackForwardCacheNotRestoredReason::NOT_MAIN_FRAME;
  static inline const BackForwardCacheNotRestoredReason BACK_FORWARD_CACHE_DISABLED = BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED;
  static inline const BackForwardCacheNotRestoredReason RELATED_ACTIVE_CONTENTS_EXIST = BackForwardCacheNotRestoredReason::RELATED_ACTIVE_CONTENTS_EXIST;
  static inline const BackForwardCacheNotRestoredReason HTTP_STATUS_NOT_OK = BackForwardCacheNotRestoredReason::HTTP_STATUS_NOT_OK;
  static inline const BackForwardCacheNotRestoredReason SCHEME_NOT_HTTP_OR_HTTPS = BackForwardCacheNotRestoredReason::SCHEME_NOT_HTTP_OR_HTTPS;
  static inline const BackForwardCacheNotRestoredReason LOADING = BackForwardCacheNotRestoredReason::LOADING;
  static inline const BackForwardCacheNotRestoredReason WAS_GRANTED_MEDIA_ACCESS = BackForwardCacheNotRestoredReason::WAS_GRANTED_MEDIA_ACCESS;
  static inline const BackForwardCacheNotRestoredReason BLOCKLISTED_FEATURES = BackForwardCacheNotRestoredReason::BLOCKLISTED_FEATURES;
  static inline const BackForwardCacheNotRestoredReason DISABLE_FOR_RENDER_FRAME_HOST_CALLED = BackForwardCacheNotRestoredReason::DISABLE_FOR_RENDER_FRAME_HOST_CALLED;
  static inline const BackForwardCacheNotRestoredReason DOMAIN_NOT_ALLOWED = BackForwardCacheNotRestoredReason::DOMAIN_NOT_ALLOWED;
  static inline const BackForwardCacheNotRestoredReason HTTP_METHOD_NOT_GET = BackForwardCacheNotRestoredReason::HTTP_METHOD_NOT_GET;
  static inline const BackForwardCacheNotRestoredReason SUBFRAME_IS_NAVIGATING = BackForwardCacheNotRestoredReason::SUBFRAME_IS_NAVIGATING;
  static inline const BackForwardCacheNotRestoredReason TIMEOUT = BackForwardCacheNotRestoredReason::TIMEOUT;
  static inline const BackForwardCacheNotRestoredReason CACHE_LIMIT = BackForwardCacheNotRestoredReason::CACHE_LIMIT;
  static inline const BackForwardCacheNotRestoredReason JAVASCRIPT_EXECUTION = BackForwardCacheNotRestoredReason::JAVASCRIPT_EXECUTION;
  static inline const BackForwardCacheNotRestoredReason RENDERER_PROCESS_KILLED = BackForwardCacheNotRestoredReason::RENDERER_PROCESS_KILLED;
  static inline const BackForwardCacheNotRestoredReason RENDERER_PROCESS_CRASHED = BackForwardCacheNotRestoredReason::RENDERER_PROCESS_CRASHED;
  static inline const BackForwardCacheNotRestoredReason GRANTED_MEDIA_STREAM_ACCESS = BackForwardCacheNotRestoredReason::GRANTED_MEDIA_STREAM_ACCESS;
  static inline const BackForwardCacheNotRestoredReason SCHEDULER_TRACKED_FEATURE_USED = BackForwardCacheNotRestoredReason::SCHEDULER_TRACKED_FEATURE_USED;
  static inline const BackForwardCacheNotRestoredReason CONFLICTING_BROWSING_INSTANCE = BackForwardCacheNotRestoredReason::CONFLICTING_BROWSING_INSTANCE;
  static inline const BackForwardCacheNotRestoredReason CACHE_FLUSHED = BackForwardCacheNotRestoredReason::CACHE_FLUSHED;
  static inline const BackForwardCacheNotRestoredReason SERVICE_WORKER_VERSION_ACTIVATION = BackForwardCacheNotRestoredReason::SERVICE_WORKER_VERSION_ACTIVATION;
  static inline const BackForwardCacheNotRestoredReason SESSION_RESTORED = BackForwardCacheNotRestoredReason::SESSION_RESTORED;
  static inline const BackForwardCacheNotRestoredReason UNKNOWN = BackForwardCacheNotRestoredReason::UNKNOWN;
  static inline const BackForwardCacheNotRestoredReason SERVICE_WORKER_POST_MESSAGE = BackForwardCacheNotRestoredReason::SERVICE_WORKER_POST_MESSAGE;
  static inline const BackForwardCacheNotRestoredReason ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED = BackForwardCacheNotRestoredReason::ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED;
  static inline const BackForwardCacheNotRestoredReason NOT_MOST_RECENT_NAVIGATION_ENTRY = BackForwardCacheNotRestoredReason::NOT_MOST_RECENT_NAVIGATION_ENTRY;
  static inline const BackForwardCacheNotRestoredReason SERVICE_WORKER_CLAIM = BackForwardCacheNotRestoredReason::SERVICE_WORKER_CLAIM;
  static inline const BackForwardCacheNotRestoredReason IGNORE_EVENT_AND_EVICT = BackForwardCacheNotRestoredReason::IGNORE_EVENT_AND_EVICT;
  static inline const BackForwardCacheNotRestoredReason HAVE_INNER_CONTENTS = BackForwardCacheNotRestoredReason::HAVE_INNER_CONTENTS;
  static inline const BackForwardCacheNotRestoredReason TIMEOUT_PUTTING_IN_CACHE = BackForwardCacheNotRestoredReason::TIMEOUT_PUTTING_IN_CACHE;
  static inline const BackForwardCacheNotRestoredReason BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY = BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY;
  static inline const BackForwardCacheNotRestoredReason BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE = BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE;
  static inline const BackForwardCacheNotRestoredReason NETWORK_REQUEST_REDIRECTED = BackForwardCacheNotRestoredReason::NETWORK_REQUEST_REDIRECTED;
  static inline const BackForwardCacheNotRestoredReason NETWORK_REQUEST_TIMEOUT = BackForwardCacheNotRestoredReason::NETWORK_REQUEST_TIMEOUT;
  static inline const BackForwardCacheNotRestoredReason NETWORK_EXCEEDS_BUFFER_LIMIT = BackForwardCacheNotRestoredReason::NETWORK_EXCEEDS_BUFFER_LIMIT;
  static inline const BackForwardCacheNotRestoredReason NAVIGATION_CANCELLED_WHILE_RESTORING = BackForwardCacheNotRestoredReason::NAVIGATION_CANCELLED_WHILE_RESTORING;
  static inline const BackForwardCacheNotRestoredReason BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER = BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER;
  static inline const BackForwardCacheNotRestoredReason USER_AGENT_OVERRIDE_DIFFERS = BackForwardCacheNotRestoredReason::USER_AGENT_OVERRIDE_DIFFERS;
  static inline const BackForwardCacheNotRestoredReason NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER = BackForwardCacheNotRestoredReason::NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER;
  static inline const BackForwardCacheNotRestoredReason FOREGROUND_CACHE_LIMIT = BackForwardCacheNotRestoredReason::FOREGROUND_CACHE_LIMIT;
  static inline const BackForwardCacheNotRestoredReason BROWSING_INSTANCE_NOT_SWAPPED = BackForwardCacheNotRestoredReason::BROWSING_INSTANCE_NOT_SWAPPED;
  static inline const BackForwardCacheNotRestoredReason BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE = BackForwardCacheNotRestoredReason::BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE;
  static inline const BackForwardCacheNotRestoredReason OPT_IN_UNLOAD_HEADER_NOT_PRESENT = BackForwardCacheNotRestoredReason::OPT_IN_UNLOAD_HEADER_NOT_PRESENT;
  static inline const BackForwardCacheNotRestoredReason UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME = BackForwardCacheNotRestoredReason::UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME;
  static inline const BackForwardCacheNotRestoredReason UNLOAD_HANDLER_EXISTS_IN_SUBFRAME = BackForwardCacheNotRestoredReason::UNLOAD_HANDLER_EXISTS_IN_SUBFRAME;
  static inline const BackForwardCacheNotRestoredReason SERVICE_WORKER_UNREGISTRATION = BackForwardCacheNotRestoredReason::SERVICE_WORKER_UNREGISTRATION;
  static inline const BackForwardCacheNotRestoredReason CACHE_CONTROL_NO_STORE = BackForwardCacheNotRestoredReason::CACHE_CONTROL_NO_STORE;
  static inline const BackForwardCacheNotRestoredReason CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED = BackForwardCacheNotRestoredReason::CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED;
  static inline const BackForwardCacheNotRestoredReason CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED = BackForwardCacheNotRestoredReason::CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED;
  static inline const BackForwardCacheNotRestoredReason NO_RESPONSE_HEAD = BackForwardCacheNotRestoredReason::NO_RESPONSE_HEAD;
  static inline const BackForwardCacheNotRestoredReason ACTIVATION_NAVIGATION_DISALLOWED_FOR_BUG_1234857 = BackForwardCacheNotRestoredReason::ACTIVATION_NAVIGATION_DISALLOWED_FOR_BUG_1234857;
  static inline const BackForwardCacheNotRestoredReason ERROR_DOCUMENT = BackForwardCacheNotRestoredReason::ERROR_DOCUMENT;
  static inline const BackForwardCacheNotRestoredReason FENCED_FRAMES_EMBEDDER = BackForwardCacheNotRestoredReason::FENCED_FRAMES_EMBEDDER;
  static inline const BackForwardCacheNotRestoredReason COOKIE_DISABLED = BackForwardCacheNotRestoredReason::COOKIE_DISABLED;
  static inline const BackForwardCacheNotRestoredReason HTTP_AUTH_REQUIRED = BackForwardCacheNotRestoredReason::HTTP_AUTH_REQUIRED;
  static inline const BackForwardCacheNotRestoredReason COOKIE_FLUSHED = BackForwardCacheNotRestoredReason::COOKIE_FLUSHED;
  static inline const BackForwardCacheNotRestoredReason BROADCAST_CHANNEL_ON_MESSAGE = BackForwardCacheNotRestoredReason::BROADCAST_CHANNEL_ON_MESSAGE;
  static inline const BackForwardCacheNotRestoredReason WEBVIEW_SETTINGS_CHANGED = BackForwardCacheNotRestoredReason::WEBVIEW_SETTINGS_CHANGED;
  static inline const BackForwardCacheNotRestoredReason WEBVIEW_JAVASCRIPT_OBJECT_CHANGED = BackForwardCacheNotRestoredReason::WEBVIEW_JAVASCRIPT_OBJECT_CHANGED;
  static inline const BackForwardCacheNotRestoredReason WEBVIEW_MESSAGE_LISTENER_INJECTED = BackForwardCacheNotRestoredReason::WEBVIEW_MESSAGE_LISTENER_INJECTED;
  static inline const BackForwardCacheNotRestoredReason WEBVIEW_SAFE_BROWSING_ALLOWLIST_CHANGED = BackForwardCacheNotRestoredReason::WEBVIEW_SAFE_BROWSING_ALLOWLIST_CHANGED;
  static inline const BackForwardCacheNotRestoredReason WEBVIEW_DOCUMENT_START_JAVASCRIPT_CHANGED = BackForwardCacheNotRestoredReason::WEBVIEW_DOCUMENT_START_JAVASCRIPT_CHANGED;

  using FieldMetadata_BackForwardCacheNotRestoredReason =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason,
      BackForwardCacheCanStoreDocumentResult>;

  static constexpr FieldMetadata_BackForwardCacheNotRestoredReason kBackForwardCacheNotRestoredReason{};
  void set_back_forward_cache_not_restored_reason(BackForwardCacheCanStoreDocumentResult_BackForwardCacheNotRestoredReason value) {
    static constexpr uint32_t field_id = FieldMetadata_BackForwardCacheNotRestoredReason::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class ChromeThreadPoolTask_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeThreadPoolTask_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeThreadPoolTask_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeThreadPoolTask_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_task_priority() const { return at<1>().valid(); }
  int32_t task_priority() const { return at<1>().as_int32(); }
  bool has_execution_mode() const { return at<2>().valid(); }
  int32_t execution_mode() const { return at<2>().as_int32(); }
  bool has_sequence_token() const { return at<3>().valid(); }
  int64_t sequence_token() const { return at<3>().as_int64(); }
  bool has_shutdown_behavior() const { return at<4>().valid(); }
  int32_t shutdown_behavior() const { return at<4>().as_int32(); }
};

class ChromeThreadPoolTask : public ::protozero::Message {
 public:
  using Decoder = ChromeThreadPoolTask_Decoder;
  enum : int32_t {
    kTaskPriorityFieldNumber = 1,
    kExecutionModeFieldNumber = 2,
    kSequenceTokenFieldNumber = 3,
    kShutdownBehaviorFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeThreadPoolTask"; }


  using Priority = ::perfetto::protos::pbzero::ChromeThreadPoolTask_Priority;
  static inline const char* Priority_Name(Priority value) {
    return ::perfetto::protos::pbzero::ChromeThreadPoolTask_Priority_Name(value);
  }

  using ExecutionMode = ::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode;
  static inline const char* ExecutionMode_Name(ExecutionMode value) {
    return ::perfetto::protos::pbzero::ChromeThreadPoolTask_ExecutionMode_Name(value);
  }

  using ShutdownBehavior = ::perfetto::protos::pbzero::ChromeThreadPoolTask_ShutdownBehavior;
  static inline const char* ShutdownBehavior_Name(ShutdownBehavior value) {
    return ::perfetto::protos::pbzero::ChromeThreadPoolTask_ShutdownBehavior_Name(value);
  }
  static inline const Priority PRIORITY_UNSPECIFIED = Priority::PRIORITY_UNSPECIFIED;
  static inline const Priority PRIORITY_BEST_EFFORT = Priority::PRIORITY_BEST_EFFORT;
  static inline const Priority PRIORITY_USER_VISIBLE = Priority::PRIORITY_USER_VISIBLE;
  static inline const Priority PRIORITY_USER_BLOCKING = Priority::PRIORITY_USER_BLOCKING;
  static inline const ExecutionMode EXECTUION_MODE_UNSPECIFIED = ExecutionMode::EXECTUION_MODE_UNSPECIFIED;
  static inline const ExecutionMode EXECUTION_MODE_PARALLEL = ExecutionMode::EXECUTION_MODE_PARALLEL;
  static inline const ExecutionMode EXECUTION_MODE_SEQUENCED = ExecutionMode::EXECUTION_MODE_SEQUENCED;
  static inline const ExecutionMode EXECUTION_MODE_SINGLE_THREAD = ExecutionMode::EXECUTION_MODE_SINGLE_THREAD;
  static inline const ExecutionMode EXECUTION_MODE_JOB = ExecutionMode::EXECUTION_MODE_JOB;
  static inline const ShutdownBehavior SHUTDOWN_BEHAVIOR_UNSPECIFIED = ShutdownBehavior::SHUTDOWN_BEHAVIOR_UNSPECIFIED;
  static inline const ShutdownBehavior SHUTDOWN_BEHAVIOR_CONTINUE_ON_SHUTDOWN = ShutdownBehavior::SHUTDOWN_BEHAVIOR_CONTINUE_ON_SHUTDOWN;
  static inline const ShutdownBehavior SHUTDOWN_BEHAVIOR_SKIP_ON_SHUTDOWN = ShutdownBehavior::SHUTDOWN_BEHAVIOR_SKIP_ON_SHUTDOWN;
  static inline const ShutdownBehavior SHUTDOWN_BEHAVIOR_BLOCK_SHUTDOWN = ShutdownBehavior::SHUTDOWN_BEHAVIOR_BLOCK_SHUTDOWN;

  using FieldMetadata_TaskPriority =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeThreadPoolTask_Priority,
      ChromeThreadPoolTask>;

  static constexpr FieldMetadata_TaskPriority kTaskPriority{};
  void set_task_priority(ChromeThreadPoolTask_Priority value) {
    static constexpr uint32_t field_id = FieldMetadata_TaskPriority::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ExecutionMode =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeThreadPoolTask_ExecutionMode,
      ChromeThreadPoolTask>;

  static constexpr FieldMetadata_ExecutionMode kExecutionMode{};
  void set_execution_mode(ChromeThreadPoolTask_ExecutionMode value) {
    static constexpr uint32_t field_id = FieldMetadata_ExecutionMode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SequenceToken =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeThreadPoolTask>;

  static constexpr FieldMetadata_SequenceToken kSequenceToken{};
  void set_sequence_token(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SequenceToken::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ShutdownBehavior =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeThreadPoolTask_ShutdownBehavior,
      ChromeThreadPoolTask>;

  static constexpr FieldMetadata_ShutdownBehavior kShutdownBehavior{};
  void set_shutdown_behavior(ChromeThreadPoolTask_ShutdownBehavior value) {
    static constexpr uint32_t field_id = FieldMetadata_ShutdownBehavior::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class RenderFrameHost_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  RenderFrameHost_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RenderFrameHost_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RenderFrameHost_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_process() const { return at<1>().valid(); }
  ::protozero::ConstBytes process() const { return at<1>().as_bytes(); }
  bool has_render_frame_host_id() const { return at<2>().valid(); }
  ::protozero::ConstBytes render_frame_host_id() const { return at<2>().as_bytes(); }
  bool has_lifecycle_state() const { return at<3>().valid(); }
  int32_t lifecycle_state() const { return at<3>().as_int32(); }
  bool has_origin() const { return at<4>().valid(); }
  ::protozero::ConstChars origin() const { return at<4>().as_string(); }
  bool has_url() const { return at<5>().valid(); }
  ::protozero::ConstChars url() const { return at<5>().as_string(); }
  bool has_frame_tree_node_id() const { return at<6>().valid(); }
  uint64_t frame_tree_node_id() const { return at<6>().as_uint64(); }
  bool has_site_instance() const { return at<7>().valid(); }
  ::protozero::ConstBytes site_instance() const { return at<7>().as_bytes(); }
  bool has_parent() const { return at<8>().valid(); }
  ::protozero::ConstBytes parent() const { return at<8>().as_bytes(); }
  bool has_outer_document() const { return at<9>().valid(); }
  ::protozero::ConstBytes outer_document() const { return at<9>().as_bytes(); }
  bool has_embedder() const { return at<10>().valid(); }
  ::protozero::ConstBytes embedder() const { return at<10>().as_bytes(); }
  bool has_browsing_context_state() const { return at<11>().valid(); }
  ::protozero::ConstBytes browsing_context_state() const { return at<11>().as_bytes(); }
  bool has_frame_type() const { return at<12>().valid(); }
  int32_t frame_type() const { return at<12>().as_int32(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class RenderFrameHost : public ::protozero::Message {
 public:
  using Decoder = RenderFrameHost_Decoder;
  enum : int32_t {
    kProcessFieldNumber = 1,
    kRenderFrameHostIdFieldNumber = 2,
    kLifecycleStateFieldNumber = 3,
    kOriginFieldNumber = 4,
    kUrlFieldNumber = 5,
    kFrameTreeNodeIdFieldNumber = 6,
    kSiteInstanceFieldNumber = 7,
    kParentFieldNumber = 8,
    kOuterDocumentFieldNumber = 9,
    kEmbedderFieldNumber = 10,
    kBrowsingContextStateFieldNumber = 11,
    kFrameTypeFieldNumber = 12,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RenderFrameHost"; }


  using LifecycleState = ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState;
  static inline const char* LifecycleState_Name(LifecycleState value) {
    return ::perfetto::protos::pbzero::RenderFrameHost_LifecycleState_Name(value);
  }
  static inline const LifecycleState UNSPECIFIED = LifecycleState::UNSPECIFIED;
  static inline const LifecycleState SPECULATIVE = LifecycleState::SPECULATIVE;
  static inline const LifecycleState PENDING_COMMIT = LifecycleState::PENDING_COMMIT;
  static inline const LifecycleState PRERENDERING = LifecycleState::PRERENDERING;
  static inline const LifecycleState ACTIVE = LifecycleState::ACTIVE;
  static inline const LifecycleState IN_BACK_FORWARD_CACHE = LifecycleState::IN_BACK_FORWARD_CACHE;
  static inline const LifecycleState RUNNING_UNLOAD_HANDLERS = LifecycleState::RUNNING_UNLOAD_HANDLERS;
  static inline const LifecycleState READY_TO_BE_DELETED = LifecycleState::READY_TO_BE_DELETED;

  using FieldMetadata_Process =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderProcessHost,
      RenderFrameHost>;

  static constexpr FieldMetadata_Process kProcess{};
  template <typename T = RenderProcessHost> T* set_process() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_RenderFrameHostId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      GlobalRenderFrameHostId,
      RenderFrameHost>;

  static constexpr FieldMetadata_RenderFrameHostId kRenderFrameHostId{};
  template <typename T = GlobalRenderFrameHostId> T* set_render_frame_host_id() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_LifecycleState =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      RenderFrameHost_LifecycleState,
      RenderFrameHost>;

  static constexpr FieldMetadata_LifecycleState kLifecycleState{};
  void set_lifecycle_state(RenderFrameHost_LifecycleState value) {
    static constexpr uint32_t field_id = FieldMetadata_LifecycleState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Origin =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      RenderFrameHost>;

  static constexpr FieldMetadata_Origin kOrigin{};
  void set_origin(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Origin::kFieldId, data, size);
  }
  void set_origin(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Origin::kFieldId, chars.data, chars.size);
  }
  void set_origin(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Origin::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Url =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      RenderFrameHost>;

  static constexpr FieldMetadata_Url kUrl{};
  void set_url(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Url::kFieldId, data, size);
  }
  void set_url(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Url::kFieldId, chars.data, chars.size);
  }
  void set_url(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Url::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameTreeNodeId =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      RenderFrameHost>;

  static constexpr FieldMetadata_FrameTreeNodeId kFrameTreeNodeId{};
  void set_frame_tree_node_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTreeNodeId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SiteInstance =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SiteInstance,
      RenderFrameHost>;

  static constexpr FieldMetadata_SiteInstance kSiteInstance{};
  template <typename T = SiteInstance> T* set_site_instance() {
    return BeginNestedMessage<T>(7);
  }


  using FieldMetadata_Parent =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameHost,
      RenderFrameHost>;

  static constexpr FieldMetadata_Parent kParent{};
  template <typename T = RenderFrameHost> T* set_parent() {
    return BeginNestedMessage<T>(8);
  }


  using FieldMetadata_OuterDocument =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameHost,
      RenderFrameHost>;

  static constexpr FieldMetadata_OuterDocument kOuterDocument{};
  template <typename T = RenderFrameHost> T* set_outer_document() {
    return BeginNestedMessage<T>(9);
  }


  using FieldMetadata_Embedder =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameHost,
      RenderFrameHost>;

  static constexpr FieldMetadata_Embedder kEmbedder{};
  template <typename T = RenderFrameHost> T* set_embedder() {
    return BeginNestedMessage<T>(10);
  }


  using FieldMetadata_BrowsingContextState =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BrowsingContextState,
      RenderFrameHost>;

  static constexpr FieldMetadata_BrowsingContextState kBrowsingContextState{};
  template <typename T = BrowsingContextState> T* set_browsing_context_state() {
    return BeginNestedMessage<T>(11);
  }


  using FieldMetadata_FrameType =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      FrameTreeNodeInfo_FrameType,
      RenderFrameHost>;

  static constexpr FieldMetadata_FrameType kFrameType{};
  void set_frame_type(FrameTreeNodeInfo_FrameType value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      RenderFrameHost>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class BrowsingContextState_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  BrowsingContextState_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BrowsingContextState_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BrowsingContextState_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_browsing_instance_id() const { return at<1>().valid(); }
  int32_t browsing_instance_id() const { return at<1>().as_int32(); }
  bool has_coop_related_group_id() const { return at<2>().valid(); }
  int32_t coop_related_group_id() const { return at<2>().as_int32(); }
  bool has_coop_related_group_token() const { return at<3>().valid(); }
  ::protozero::ConstChars coop_related_group_token() const { return at<3>().as_string(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class BrowsingContextState : public ::protozero::Message {
 public:
  using Decoder = BrowsingContextState_Decoder;
  enum : int32_t {
    kBrowsingInstanceIdFieldNumber = 1,
    kCoopRelatedGroupIdFieldNumber = 2,
    kCoopRelatedGroupTokenFieldNumber = 3,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BrowsingContextState"; }


  using FieldMetadata_BrowsingInstanceId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BrowsingContextState>;

  static constexpr FieldMetadata_BrowsingInstanceId kBrowsingInstanceId{};
  void set_browsing_instance_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BrowsingInstanceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CoopRelatedGroupId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      BrowsingContextState>;

  static constexpr FieldMetadata_CoopRelatedGroupId kCoopRelatedGroupId{};
  void set_coop_related_group_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CoopRelatedGroupId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CoopRelatedGroupToken =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      BrowsingContextState>;

  static constexpr FieldMetadata_CoopRelatedGroupToken kCoopRelatedGroupToken{};
  void set_coop_related_group_token(const char* data, size_t size) {
    AppendBytes(FieldMetadata_CoopRelatedGroupToken::kFieldId, data, size);
  }
  void set_coop_related_group_token(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_CoopRelatedGroupToken::kFieldId, chars.data, chars.size);
  }
  void set_coop_related_group_token(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_CoopRelatedGroupToken::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      BrowsingContextState>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class GlobalRenderFrameHostId_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  GlobalRenderFrameHostId_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit GlobalRenderFrameHostId_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit GlobalRenderFrameHostId_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_routing_id() const { return at<1>().valid(); }
  int32_t routing_id() const { return at<1>().as_int32(); }
  bool has_process_id() const { return at<2>().valid(); }
  int32_t process_id() const { return at<2>().as_int32(); }
};

class GlobalRenderFrameHostId : public ::protozero::Message {
 public:
  using Decoder = GlobalRenderFrameHostId_Decoder;
  enum : int32_t {
    kRoutingIdFieldNumber = 1,
    kProcessIdFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.GlobalRenderFrameHostId"; }


  using FieldMetadata_RoutingId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      GlobalRenderFrameHostId>;

  static constexpr FieldMetadata_RoutingId kRoutingId{};
  void set_routing_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RoutingId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProcessId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      GlobalRenderFrameHostId>;

  static constexpr FieldMetadata_ProcessId kProcessId{};
  void set_process_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ProcessId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class SendBeginMainFrameToCommitBreakdown_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/12, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  SendBeginMainFrameToCommitBreakdown_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit SendBeginMainFrameToCommitBreakdown_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit SendBeginMainFrameToCommitBreakdown_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_handle_input_events_us() const { return at<1>().valid(); }
  uint64_t handle_input_events_us() const { return at<1>().as_uint64(); }
  bool has_animate_us() const { return at<2>().valid(); }
  uint64_t animate_us() const { return at<2>().as_uint64(); }
  bool has_style_update_us() const { return at<3>().valid(); }
  uint64_t style_update_us() const { return at<3>().as_uint64(); }
  bool has_layout_update_us() const { return at<4>().valid(); }
  uint64_t layout_update_us() const { return at<4>().as_uint64(); }
  bool has_accessibility_update_us() const { return at<12>().valid(); }
  uint64_t accessibility_update_us() const { return at<12>().as_uint64(); }
  bool has_prepaint_us() const { return at<5>().valid(); }
  uint64_t prepaint_us() const { return at<5>().as_uint64(); }
  bool has_compositing_inputs_us() const { return at<6>().valid(); }
  uint64_t compositing_inputs_us() const { return at<6>().as_uint64(); }
  bool has_compositing_assignments_us() const { return at<7>().valid(); }
  uint64_t compositing_assignments_us() const { return at<7>().as_uint64(); }
  bool has_paint_us() const { return at<8>().valid(); }
  uint64_t paint_us() const { return at<8>().as_uint64(); }
  bool has_composite_commit_us() const { return at<9>().valid(); }
  uint64_t composite_commit_us() const { return at<9>().as_uint64(); }
  bool has_update_layers_us() const { return at<10>().valid(); }
  uint64_t update_layers_us() const { return at<10>().as_uint64(); }
  bool has_begin_main_sent_to_started_us() const { return at<11>().valid(); }
  uint64_t begin_main_sent_to_started_us() const { return at<11>().as_uint64(); }
};

class SendBeginMainFrameToCommitBreakdown : public ::protozero::Message {
 public:
  using Decoder = SendBeginMainFrameToCommitBreakdown_Decoder;
  enum : int32_t {
    kHandleInputEventsUsFieldNumber = 1,
    kAnimateUsFieldNumber = 2,
    kStyleUpdateUsFieldNumber = 3,
    kLayoutUpdateUsFieldNumber = 4,
    kAccessibilityUpdateUsFieldNumber = 12,
    kPrepaintUsFieldNumber = 5,
    kCompositingInputsUsFieldNumber = 6,
    kCompositingAssignmentsUsFieldNumber = 7,
    kPaintUsFieldNumber = 8,
    kCompositeCommitUsFieldNumber = 9,
    kUpdateLayersUsFieldNumber = 10,
    kBeginMainSentToStartedUsFieldNumber = 11,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.SendBeginMainFrameToCommitBreakdown"; }


  using FieldMetadata_HandleInputEventsUs =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_HandleInputEventsUs kHandleInputEventsUs{};
  void set_handle_input_events_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_HandleInputEventsUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AnimateUs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_AnimateUs kAnimateUs{};
  void set_animate_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_AnimateUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_StyleUpdateUs =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_StyleUpdateUs kStyleUpdateUs{};
  void set_style_update_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_StyleUpdateUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LayoutUpdateUs =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_LayoutUpdateUs kLayoutUpdateUs{};
  void set_layout_update_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LayoutUpdateUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AccessibilityUpdateUs =
    ::protozero::proto_utils::FieldMetadata<
      12,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_AccessibilityUpdateUs kAccessibilityUpdateUs{};
  void set_accessibility_update_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_AccessibilityUpdateUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PrepaintUs =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_PrepaintUs kPrepaintUs{};
  void set_prepaint_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PrepaintUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CompositingInputsUs =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_CompositingInputsUs kCompositingInputsUs{};
  void set_compositing_inputs_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CompositingInputsUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CompositingAssignmentsUs =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_CompositingAssignmentsUs kCompositingAssignmentsUs{};
  void set_compositing_assignments_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CompositingAssignmentsUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PaintUs =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_PaintUs kPaintUs{};
  void set_paint_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PaintUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CompositeCommitUs =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_CompositeCommitUs kCompositeCommitUs{};
  void set_composite_commit_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CompositeCommitUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_UpdateLayersUs =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_UpdateLayersUs kUpdateLayersUs{};
  void set_update_layers_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_UpdateLayersUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BeginMainSentToStartedUs =
    ::protozero::proto_utils::FieldMetadata<
      11,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      SendBeginMainFrameToCommitBreakdown>;

  static constexpr FieldMetadata_BeginMainSentToStartedUs kBeginMainSentToStartedUs{};
  void set_begin_main_sent_to_started_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BeginMainSentToStartedUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class ChromeSamplingProfilerSampleCollected_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeSamplingProfilerSampleCollected_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeSamplingProfilerSampleCollected_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeSamplingProfilerSampleCollected_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_frame_count() const { return at<1>().valid(); }
  int32_t frame_count() const { return at<1>().as_int32(); }
  bool has_write_status() const { return at<2>().valid(); }
  int32_t write_status() const { return at<2>().as_int32(); }
  bool has_sampled_thread_id() const { return at<3>().valid(); }
  int32_t sampled_thread_id() const { return at<3>().as_int32(); }
};

class ChromeSamplingProfilerSampleCollected : public ::protozero::Message {
 public:
  using Decoder = ChromeSamplingProfilerSampleCollected_Decoder;
  enum : int32_t {
    kFrameCountFieldNumber = 1,
    kWriteStatusFieldNumber = 2,
    kSampledThreadIdFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeSamplingProfilerSampleCollected"; }


  using WriteStatus = ::perfetto::protos::pbzero::ChromeSamplingProfilerSampleCollected_WriteStatus;
  static inline const char* WriteStatus_Name(WriteStatus value) {
    return ::perfetto::protos::pbzero::ChromeSamplingProfilerSampleCollected_WriteStatus_Name(value);
  }
  static inline const WriteStatus WRITE_STATUS_NONE = WriteStatus::WRITE_STATUS_NONE;
  static inline const WriteStatus WRITE_STATUS_BUFFERING_SAMPLE = WriteStatus::WRITE_STATUS_BUFFERING_SAMPLE;
  static inline const WriteStatus WRITE_STATUS_WRITING_BUFFERED = WriteStatus::WRITE_STATUS_WRITING_BUFFERED;
  static inline const WriteStatus WRITE_STATUS_WRITING_TO_TRACE = WriteStatus::WRITE_STATUS_WRITING_TO_TRACE;

  using FieldMetadata_FrameCount =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeSamplingProfilerSampleCollected>;

  static constexpr FieldMetadata_FrameCount kFrameCount{};
  void set_frame_count(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WriteStatus =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeSamplingProfilerSampleCollected_WriteStatus,
      ChromeSamplingProfilerSampleCollected>;

  static constexpr FieldMetadata_WriteStatus kWriteStatus{};
  void set_write_status(ChromeSamplingProfilerSampleCollected_WriteStatus value) {
    static constexpr uint32_t field_id = FieldMetadata_WriteStatus::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SampledThreadId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeSamplingProfilerSampleCollected>;

  static constexpr FieldMetadata_SampledThreadId kSampledThreadId{};
  void set_sampled_thread_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SampledThreadId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class ParkableStringUnpark_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ParkableStringUnpark_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ParkableStringUnpark_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ParkableStringUnpark_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_size_bytes() const { return at<1>().valid(); }
  int32_t size_bytes() const { return at<1>().as_int32(); }
  bool has_time_since_last_disk_write_sec() const { return at<2>().valid(); }
  int32_t time_since_last_disk_write_sec() const { return at<2>().as_int32(); }
};

class ParkableStringUnpark : public ::protozero::Message {
 public:
  using Decoder = ParkableStringUnpark_Decoder;
  enum : int32_t {
    kSizeBytesFieldNumber = 1,
    kTimeSinceLastDiskWriteSecFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ParkableStringUnpark"; }


  using FieldMetadata_SizeBytes =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ParkableStringUnpark>;

  static constexpr FieldMetadata_SizeBytes kSizeBytes{};
  void set_size_bytes(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SizeBytes::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TimeSinceLastDiskWriteSec =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ParkableStringUnpark>;

  static constexpr FieldMetadata_TimeSinceLastDiskWriteSec kTimeSinceLastDiskWriteSec{};
  void set_time_since_last_disk_write_sec(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TimeSinceLastDiskWriteSec::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class ParkableStringCompressInBackground_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ParkableStringCompressInBackground_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ParkableStringCompressInBackground_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ParkableStringCompressInBackground_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_size_bytes() const { return at<1>().valid(); }
  int32_t size_bytes() const { return at<1>().as_int32(); }
};

class ParkableStringCompressInBackground : public ::protozero::Message {
 public:
  using Decoder = ParkableStringCompressInBackground_Decoder;
  enum : int32_t {
    kSizeBytesFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ParkableStringCompressInBackground"; }


  using FieldMetadata_SizeBytes =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ParkableStringCompressInBackground>;

  static constexpr FieldMetadata_SizeBytes kSizeBytes{};
  void set_size_bytes(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SizeBytes::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }
};

class AndroidViewDump_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  AndroidViewDump_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AndroidViewDump_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AndroidViewDump_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_activity() const { return at<1>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> activity() const { return GetRepeated<::protozero::ConstBytes>(1); }
};

class AndroidViewDump : public ::protozero::Message {
 public:
  using Decoder = AndroidViewDump_Decoder;
  enum : int32_t {
    kActivityFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AndroidViewDump"; }


  using FieldMetadata_Activity =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AndroidActivity,
      AndroidViewDump>;

  static constexpr FieldMetadata_Activity kActivity{};
  template <typename T = AndroidActivity> T* add_activity() {
    return BeginNestedMessage<T>(1);
  }

};

class AndroidActivity_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  AndroidActivity_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AndroidActivity_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AndroidActivity_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_name() const { return at<1>().valid(); }
  ::protozero::ConstChars name() const { return at<1>().as_string(); }
  bool has_view() const { return at<2>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> view() const { return GetRepeated<::protozero::ConstBytes>(2); }
};

class AndroidActivity : public ::protozero::Message {
 public:
  using Decoder = AndroidActivity_Decoder;
  enum : int32_t {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AndroidActivity"; }


  using FieldMetadata_Name =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AndroidActivity>;

  static constexpr FieldMetadata_Name kName{};
  void set_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Name::kFieldId, data, size);
  }
  void set_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Name::kFieldId, chars.data, chars.size);
  }
  void set_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Name::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_View =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AndroidView,
      AndroidActivity>;

  static constexpr FieldMetadata_View kView{};
  template <typename T = AndroidView> T* add_view() {
    return BeginNestedMessage<T>(2);
  }

};

class AndroidView_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AndroidView_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AndroidView_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AndroidView_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_id() const { return at<1>().valid(); }
  int32_t id() const { return at<1>().as_int32(); }
  bool has_parent_id() const { return at<2>().valid(); }
  int32_t parent_id() const { return at<2>().as_int32(); }
  bool has_is_shown() const { return at<3>().valid(); }
  bool is_shown() const { return at<3>().as_bool(); }
  bool has_is_dirty() const { return at<4>().valid(); }
  bool is_dirty() const { return at<4>().as_bool(); }
  bool has_class_name() const { return at<5>().valid(); }
  ::protozero::ConstChars class_name() const { return at<5>().as_string(); }
  bool has_resource_name() const { return at<6>().valid(); }
  ::protozero::ConstChars resource_name() const { return at<6>().as_string(); }
};

class AndroidView : public ::protozero::Message {
 public:
  using Decoder = AndroidView_Decoder;
  enum : int32_t {
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kIsShownFieldNumber = 3,
    kIsDirtyFieldNumber = 4,
    kClassNameFieldNumber = 5,
    kResourceNameFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AndroidView"; }


  using FieldMetadata_Id =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      AndroidView>;

  static constexpr FieldMetadata_Id kId{};
  void set_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Id::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ParentId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      AndroidView>;

  static constexpr FieldMetadata_ParentId kParentId{};
  void set_parent_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ParentId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsShown =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      AndroidView>;

  static constexpr FieldMetadata_IsShown kIsShown{};
  void set_is_shown(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsShown::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsDirty =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      AndroidView>;

  static constexpr FieldMetadata_IsDirty kIsDirty{};
  void set_is_dirty(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsDirty::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ClassName =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AndroidView>;

  static constexpr FieldMetadata_ClassName kClassName{};
  void set_class_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_ClassName::kFieldId, data, size);
  }
  void set_class_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_ClassName::kFieldId, chars.data, chars.size);
  }
  void set_class_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_ClassName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ResourceName =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      AndroidView>;

  static constexpr FieldMetadata_ResourceName kResourceName{};
  void set_resource_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_ResourceName::kFieldId, data, size);
  }
  void set_resource_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_ResourceName::kFieldId, chars.data, chars.size);
  }
  void set_resource_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_ResourceName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

class RenderFrameProxyHost_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  RenderFrameProxyHost_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RenderFrameProxyHost_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RenderFrameProxyHost_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_routing_id() const { return at<1>().valid(); }
  int32_t routing_id() const { return at<1>().as_int32(); }
  bool has_process_id() const { return at<2>().valid(); }
  int32_t process_id() const { return at<2>().as_int32(); }
  bool has_rvh_map_id() const { return at<3>().valid(); }
  int32_t rvh_map_id() const { return at<3>().as_int32(); }
  bool has_site_instance_id() const { return at<4>().valid(); }
  int32_t site_instance_id() const { return at<4>().as_int32(); }
  bool has_is_render_frame_proxy_live() const { return at<5>().valid(); }
  bool is_render_frame_proxy_live() const { return at<5>().as_bool(); }
  bool has_site_instance_group_id() const { return at<6>().valid(); }
  int32_t site_instance_group_id() const { return at<6>().as_int32(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class RenderFrameProxyHost : public ::protozero::Message {
 public:
  using Decoder = RenderFrameProxyHost_Decoder;
  enum : int32_t {
    kRoutingIdFieldNumber = 1,
    kProcessIdFieldNumber = 2,
    kRvhMapIdFieldNumber = 3,
    kSiteInstanceIdFieldNumber = 4,
    kIsRenderFrameProxyLiveFieldNumber = 5,
    kSiteInstanceGroupIdFieldNumber = 6,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RenderFrameProxyHost"; }


  using FieldMetadata_RoutingId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderFrameProxyHost>;

  static constexpr FieldMetadata_RoutingId kRoutingId{};
  void set_routing_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RoutingId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProcessId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderFrameProxyHost>;

  static constexpr FieldMetadata_ProcessId kProcessId{};
  void set_process_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ProcessId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RvhMapId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderFrameProxyHost>;

  static constexpr FieldMetadata_RvhMapId kRvhMapId{};
  void set_rvh_map_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RvhMapId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SiteInstanceId =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderFrameProxyHost>;

  static constexpr FieldMetadata_SiteInstanceId kSiteInstanceId{};
  void set_site_instance_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SiteInstanceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsRenderFrameProxyLive =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RenderFrameProxyHost>;

  static constexpr FieldMetadata_IsRenderFrameProxyLive kIsRenderFrameProxyLive{};
  void set_is_render_frame_proxy_live(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsRenderFrameProxyLive::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SiteInstanceGroupId =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderFrameProxyHost>;

  static constexpr FieldMetadata_SiteInstanceGroupId kSiteInstanceGroupId{};
  void set_site_instance_group_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SiteInstanceGroupId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      RenderFrameProxyHost>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class RenderViewHost_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  RenderViewHost_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RenderViewHost_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RenderViewHost_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_rvh_map_id() const { return at<1>().valid(); }
  int32_t rvh_map_id() const { return at<1>().as_int32(); }
  bool has_routing_id() const { return at<2>().valid(); }
  int32_t routing_id() const { return at<2>().as_int32(); }
  bool has_process_id() const { return at<3>().valid(); }
  int32_t process_id() const { return at<3>().as_int32(); }
  bool has_process() const { return at<6>().valid(); }
  ::protozero::ConstBytes process() const { return at<6>().as_bytes(); }
  bool has_is_in_back_forward_cache() const { return at<4>().valid(); }
  bool is_in_back_forward_cache() const { return at<4>().as_bool(); }
  bool has_renderer_view_created() const { return at<5>().valid(); }
  bool renderer_view_created() const { return at<5>().as_bool(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class RenderViewHost : public ::protozero::Message {
 public:
  using Decoder = RenderViewHost_Decoder;
  enum : int32_t {
    kRvhMapIdFieldNumber = 1,
    kRoutingIdFieldNumber = 2,
    kProcessIdFieldNumber = 3,
    kProcessFieldNumber = 6,
    kIsInBackForwardCacheFieldNumber = 4,
    kRendererViewCreatedFieldNumber = 5,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RenderViewHost"; }


  using FieldMetadata_RvhMapId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderViewHost>;

  static constexpr FieldMetadata_RvhMapId kRvhMapId{};
  void set_rvh_map_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RvhMapId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RoutingId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderViewHost>;

  static constexpr FieldMetadata_RoutingId kRoutingId{};
  void set_routing_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RoutingId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProcessId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderViewHost>;

  static constexpr FieldMetadata_ProcessId kProcessId{};
  void set_process_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ProcessId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Process =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderProcessHost,
      RenderViewHost>;

  static constexpr FieldMetadata_Process kProcess{};
  template <typename T = RenderProcessHost> T* set_process() {
    return BeginNestedMessage<T>(6);
  }


  using FieldMetadata_IsInBackForwardCache =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RenderViewHost>;

  static constexpr FieldMetadata_IsInBackForwardCache kIsInBackForwardCache{};
  void set_is_in_back_forward_cache(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsInBackForwardCache::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RendererViewCreated =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RenderViewHost>;

  static constexpr FieldMetadata_RendererViewCreated kRendererViewCreated{};
  void set_renderer_view_created(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_RendererViewCreated::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      RenderViewHost>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class SiteInstanceGroup_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  SiteInstanceGroup_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit SiteInstanceGroup_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit SiteInstanceGroup_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_site_instance_group_id() const { return at<1>().valid(); }
  int32_t site_instance_group_id() const { return at<1>().as_int32(); }
  bool has_active_frame_count() const { return at<2>().valid(); }
  int32_t active_frame_count() const { return at<2>().as_int32(); }
  bool has_process() const { return at<3>().valid(); }
  ::protozero::ConstBytes process() const { return at<3>().as_bytes(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class SiteInstanceGroup : public ::protozero::Message {
 public:
  using Decoder = SiteInstanceGroup_Decoder;
  enum : int32_t {
    kSiteInstanceGroupIdFieldNumber = 1,
    kActiveFrameCountFieldNumber = 2,
    kProcessFieldNumber = 3,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.SiteInstanceGroup"; }


  using FieldMetadata_SiteInstanceGroupId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      SiteInstanceGroup>;

  static constexpr FieldMetadata_SiteInstanceGroupId kSiteInstanceGroupId{};
  void set_site_instance_group_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SiteInstanceGroupId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ActiveFrameCount =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      SiteInstanceGroup>;

  static constexpr FieldMetadata_ActiveFrameCount kActiveFrameCount{};
  void set_active_frame_count(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ActiveFrameCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Process =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderProcessHost,
      SiteInstanceGroup>;

  static constexpr FieldMetadata_Process kProcess{};
  template <typename T = RenderProcessHost> T* set_process() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      SiteInstanceGroup>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class SiteInstance_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  SiteInstance_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit SiteInstance_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit SiteInstance_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_site_instance_id() const { return at<1>().valid(); }
  int32_t site_instance_id() const { return at<1>().as_int32(); }
  bool has_browsing_instance_id() const { return at<2>().valid(); }
  int32_t browsing_instance_id() const { return at<2>().as_int32(); }
  bool has_is_default() const { return at<3>().valid(); }
  bool is_default() const { return at<3>().as_bool(); }
  bool has_has_process() const { return at<4>().valid(); }
  bool has_process() const { return at<4>().as_bool(); }
  bool has_related_active_contents_count() const { return at<5>().valid(); }
  int32_t related_active_contents_count() const { return at<5>().as_int32(); }
  bool has_active_rfh_count() const { return at<6>().valid(); }
  int32_t active_rfh_count() const { return at<6>().as_int32(); }
  bool has_site_instance_group() const { return at<7>().valid(); }
  ::protozero::ConstBytes site_instance_group() const { return at<7>().as_bytes(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class SiteInstance : public ::protozero::Message {
 public:
  using Decoder = SiteInstance_Decoder;
  enum : int32_t {
    kSiteInstanceIdFieldNumber = 1,
    kBrowsingInstanceIdFieldNumber = 2,
    kIsDefaultFieldNumber = 3,
    kHasProcessFieldNumber = 4,
    kRelatedActiveContentsCountFieldNumber = 5,
    kActiveRfhCountFieldNumber = 6,
    kSiteInstanceGroupFieldNumber = 7,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.SiteInstance"; }


  using FieldMetadata_SiteInstanceId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      SiteInstance>;

  static constexpr FieldMetadata_SiteInstanceId kSiteInstanceId{};
  void set_site_instance_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SiteInstanceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BrowsingInstanceId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      SiteInstance>;

  static constexpr FieldMetadata_BrowsingInstanceId kBrowsingInstanceId{};
  void set_browsing_instance_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_BrowsingInstanceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsDefault =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      SiteInstance>;

  static constexpr FieldMetadata_IsDefault kIsDefault{};
  void set_is_default(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsDefault::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasProcess =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      SiteInstance>;

  static constexpr FieldMetadata_HasProcess kHasProcess{};
  void set_has_process(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasProcess::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RelatedActiveContentsCount =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      SiteInstance>;

  static constexpr FieldMetadata_RelatedActiveContentsCount kRelatedActiveContentsCount{};
  void set_related_active_contents_count(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RelatedActiveContentsCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ActiveRfhCount =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      SiteInstance>;

  static constexpr FieldMetadata_ActiveRfhCount kActiveRfhCount{};
  void set_active_rfh_count(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ActiveRfhCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SiteInstanceGroup =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SiteInstanceGroup,
      SiteInstance>;

  static constexpr FieldMetadata_SiteInstanceGroup kSiteInstanceGroup{};
  template <typename T = SiteInstanceGroup> T* set_site_instance_group() {
    return BeginNestedMessage<T>(7);
  }


  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      SiteInstance>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class ChromeExtensionId_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeExtensionId_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeExtensionId_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeExtensionId_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_extension_id() const { return at<1>().valid(); }
  ::protozero::ConstChars extension_id() const { return at<1>().as_string(); }
  bool has_pseudonymized_extension_id() const { return at<2>().valid(); }
  uint32_t pseudonymized_extension_id() const { return at<2>().as_uint32(); }
};

class ChromeExtensionId : public ::protozero::Message {
 public:
  using Decoder = ChromeExtensionId_Decoder;
  enum : int32_t {
    kExtensionIdFieldNumber = 1,
    kPseudonymizedExtensionIdFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeExtensionId"; }


  using FieldMetadata_ExtensionId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeExtensionId>;

  static constexpr FieldMetadata_ExtensionId kExtensionId{};
  void set_extension_id(const char* data, size_t size) {
    AppendBytes(FieldMetadata_ExtensionId::kFieldId, data, size);
  }
  void set_extension_id(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_ExtensionId::kFieldId, chars.data, chars.size);
  }
  void set_extension_id(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_ExtensionId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PseudonymizedExtensionId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeExtensionId>;

  static constexpr FieldMetadata_PseudonymizedExtensionId kPseudonymizedExtensionId{};
  void set_pseudonymized_extension_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PseudonymizedExtensionId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class ChildProcessLauncherPriority_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChildProcessLauncherPriority_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChildProcessLauncherPriority_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChildProcessLauncherPriority_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_is_backgrounded() const { return at<1>().valid(); }
  bool is_backgrounded() const { return at<1>().as_bool(); }
  bool has_has_pending_views() const { return at<2>().valid(); }
  bool has_pending_views() const { return at<2>().as_bool(); }
  bool has_importance() const { return at<3>().valid(); }
  int32_t importance() const { return at<3>().as_int32(); }
};

class ChildProcessLauncherPriority : public ::protozero::Message {
 public:
  using Decoder = ChildProcessLauncherPriority_Decoder;
  enum : int32_t {
    kIsBackgroundedFieldNumber = 1,
    kHasPendingViewsFieldNumber = 2,
    kImportanceFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChildProcessLauncherPriority"; }


  using Importance = ::perfetto::protos::pbzero::ChildProcessLauncherPriority_Importance;
  static inline const char* Importance_Name(Importance value) {
    return ::perfetto::protos::pbzero::ChildProcessLauncherPriority_Importance_Name(value);
  }
  static inline const Importance IMPORTANCE_NORMAL = Importance::IMPORTANCE_NORMAL;
  static inline const Importance IMPORTANCE_MODERATE = Importance::IMPORTANCE_MODERATE;
  static inline const Importance IMPORTANCE_IMPORTANT = Importance::IMPORTANCE_IMPORTANT;

  using FieldMetadata_IsBackgrounded =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChildProcessLauncherPriority>;

  static constexpr FieldMetadata_IsBackgrounded kIsBackgrounded{};
  void set_is_backgrounded(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsBackgrounded::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasPendingViews =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChildProcessLauncherPriority>;

  static constexpr FieldMetadata_HasPendingViews kHasPendingViews{};
  void set_has_pending_views(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasPendingViews::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Importance =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChildProcessLauncherPriority_Importance,
      ChildProcessLauncherPriority>;

  static constexpr FieldMetadata_Importance kImportance{};
  void set_importance(ChildProcessLauncherPriority_Importance value) {
    static constexpr uint32_t field_id = FieldMetadata_Importance::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class RenderProcessHostCleanup_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  RenderProcessHostCleanup_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RenderProcessHostCleanup_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RenderProcessHostCleanup_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_listener_count() const { return at<1>().valid(); }
  uint32_t listener_count() const { return at<1>().as_uint32(); }
  bool has_keep_alive_ref_count() const { return at<2>().valid(); }
  uint32_t keep_alive_ref_count() const { return at<2>().as_uint32(); }
  bool has_shutdown_delay_ref_count() const { return at<3>().valid(); }
  uint32_t shutdown_delay_ref_count() const { return at<3>().as_uint32(); }
  bool has_worker_ref_count() const { return at<4>().valid(); }
  uint32_t worker_ref_count() const { return at<4>().as_uint32(); }
  bool has_pending_reuse_ref_count() const { return at<5>().valid(); }
  uint32_t pending_reuse_ref_count() const { return at<5>().as_uint32(); }
  bool has_navigation_state_keepalive_count() const { return at<6>().valid(); }
  uint32_t navigation_state_keepalive_count() const { return at<6>().as_uint32(); }
};

class RenderProcessHostCleanup : public ::protozero::Message {
 public:
  using Decoder = RenderProcessHostCleanup_Decoder;
  enum : int32_t {
    kListenerCountFieldNumber = 1,
    kKeepAliveRefCountFieldNumber = 2,
    kShutdownDelayRefCountFieldNumber = 3,
    kWorkerRefCountFieldNumber = 4,
    kPendingReuseRefCountFieldNumber = 5,
    kNavigationStateKeepaliveCountFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RenderProcessHostCleanup"; }


  using FieldMetadata_ListenerCount =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHostCleanup>;

  static constexpr FieldMetadata_ListenerCount kListenerCount{};
  void set_listener_count(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ListenerCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_KeepAliveRefCount =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHostCleanup>;

  static constexpr FieldMetadata_KeepAliveRefCount kKeepAliveRefCount{};
  void set_keep_alive_ref_count(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_KeepAliveRefCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ShutdownDelayRefCount =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHostCleanup>;

  static constexpr FieldMetadata_ShutdownDelayRefCount kShutdownDelayRefCount{};
  void set_shutdown_delay_ref_count(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ShutdownDelayRefCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WorkerRefCount =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHostCleanup>;

  static constexpr FieldMetadata_WorkerRefCount kWorkerRefCount{};
  void set_worker_ref_count(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_WorkerRefCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_PendingReuseRefCount =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHostCleanup>;

  static constexpr FieldMetadata_PendingReuseRefCount kPendingReuseRefCount{};
  void set_pending_reuse_ref_count(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_PendingReuseRefCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_NavigationStateKeepaliveCount =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHostCleanup>;

  static constexpr FieldMetadata_NavigationStateKeepaliveCount kNavigationStateKeepaliveCount{};
  void set_navigation_state_keepalive_count(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_NavigationStateKeepaliveCount::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class RenderProcessHostListener_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  RenderProcessHostListener_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RenderProcessHostListener_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RenderProcessHostListener_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_routing_id() const { return at<1>().valid(); }
  uint32_t routing_id() const { return at<1>().as_uint32(); }
};

class RenderProcessHostListener : public ::protozero::Message {
 public:
  using Decoder = RenderProcessHostListener_Decoder;
  enum : int32_t {
    kRoutingIdFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RenderProcessHostListener"; }


  using FieldMetadata_RoutingId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHostListener>;

  static constexpr FieldMetadata_RoutingId kRoutingId{};
  void set_routing_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RoutingId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class RenderProcessHost_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  RenderProcessHost_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RenderProcessHost_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RenderProcessHost_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_id() const { return at<1>().valid(); }
  uint32_t id() const { return at<1>().as_uint32(); }
  bool has_process_lock() const { return at<2>().valid(); }
  ::protozero::ConstChars process_lock() const { return at<2>().as_string(); }
  bool has_child_process_id() const { return at<3>().valid(); }
  int32_t child_process_id() const { return at<3>().as_int32(); }
  bool has_browser_context() const { return at<4>().valid(); }
  ::protozero::ConstBytes browser_context() const { return at<4>().as_bytes(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class RenderProcessHost : public ::protozero::Message {
 public:
  using Decoder = RenderProcessHost_Decoder;
  enum : int32_t {
    kIdFieldNumber = 1,
    kProcessLockFieldNumber = 2,
    kChildProcessIdFieldNumber = 3,
    kBrowserContextFieldNumber = 4,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RenderProcessHost"; }


  using FieldMetadata_Id =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      RenderProcessHost>;

  static constexpr FieldMetadata_Id kId{};
  void set_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Id::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ProcessLock =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      RenderProcessHost>;

  static constexpr FieldMetadata_ProcessLock kProcessLock{};
  void set_process_lock(const char* data, size_t size) {
    AppendBytes(FieldMetadata_ProcessLock::kFieldId, data, size);
  }
  void set_process_lock(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_ProcessLock::kFieldId, chars.data, chars.size);
  }
  void set_process_lock(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_ProcessLock::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ChildProcessId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      RenderProcessHost>;

  static constexpr FieldMetadata_ChildProcessId kChildProcessId{};
  void set_child_process_id(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ChildProcessId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_BrowserContext =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeBrowserContext,
      RenderProcessHost>;

  static constexpr FieldMetadata_BrowserContext kBrowserContext{};
  template <typename T = ChromeBrowserContext> T* set_browser_context() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      RenderProcessHost>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class ResourceBundle_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ResourceBundle_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ResourceBundle_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ResourceBundle_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_resource_id() const { return at<1>().valid(); }
  uint32_t resource_id() const { return at<1>().as_uint32(); }
};

class ResourceBundle : public ::protozero::Message {
 public:
  using Decoder = ResourceBundle_Decoder;
  enum : int32_t {
    kResourceIdFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ResourceBundle"; }


  using FieldMetadata_ResourceId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ResourceBundle>;

  static constexpr FieldMetadata_ResourceId kResourceId{};
  void set_resource_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ResourceId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class ChromeWebAppBadNavigate_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeWebAppBadNavigate_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeWebAppBadNavigate_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeWebAppBadNavigate_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_is_kiosk() const { return at<1>().valid(); }
  bool is_kiosk() const { return at<1>().as_bool(); }
  bool has_has_hosted_app_controller() const { return at<2>().valid(); }
  bool has_hosted_app_controller() const { return at<2>().as_bool(); }
  bool has_app_name() const { return at<3>().valid(); }
  ::protozero::ConstChars app_name() const { return at<3>().as_string(); }
  bool has_system_app_type() const { return at<4>().valid(); }
  uint32_t system_app_type() const { return at<4>().as_uint32(); }
  bool has_web_app_provider_registry_ready() const { return at<5>().valid(); }
  bool web_app_provider_registry_ready() const { return at<5>().as_bool(); }
  bool has_system_web_app_manager_synchronized() const { return at<6>().valid(); }
  bool system_web_app_manager_synchronized() const { return at<6>().as_bool(); }
};

class ChromeWebAppBadNavigate : public ::protozero::Message {
 public:
  using Decoder = ChromeWebAppBadNavigate_Decoder;
  enum : int32_t {
    kIsKioskFieldNumber = 1,
    kHasHostedAppControllerFieldNumber = 2,
    kAppNameFieldNumber = 3,
    kSystemAppTypeFieldNumber = 4,
    kWebAppProviderRegistryReadyFieldNumber = 5,
    kSystemWebAppManagerSynchronizedFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeWebAppBadNavigate"; }


  using FieldMetadata_IsKiosk =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeWebAppBadNavigate>;

  static constexpr FieldMetadata_IsKiosk kIsKiosk{};
  void set_is_kiosk(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsKiosk::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasHostedAppController =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeWebAppBadNavigate>;

  static constexpr FieldMetadata_HasHostedAppController kHasHostedAppController{};
  void set_has_hosted_app_controller(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasHostedAppController::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AppName =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeWebAppBadNavigate>;

  static constexpr FieldMetadata_AppName kAppName{};
  void set_app_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_AppName::kFieldId, data, size);
  }
  void set_app_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_AppName::kFieldId, chars.data, chars.size);
  }
  void set_app_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_AppName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SystemAppType =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeWebAppBadNavigate>;

  static constexpr FieldMetadata_SystemAppType kSystemAppType{};
  void set_system_app_type(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SystemAppType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WebAppProviderRegistryReady =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeWebAppBadNavigate>;

  static constexpr FieldMetadata_WebAppProviderRegistryReady kWebAppProviderRegistryReady{};
  void set_web_app_provider_registry_ready(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_WebAppProviderRegistryReady::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SystemWebAppManagerSynchronized =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeWebAppBadNavigate>;

  static constexpr FieldMetadata_SystemWebAppManagerSynchronized kSystemWebAppManagerSynchronized{};
  void set_system_web_app_manager_synchronized(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_SystemWebAppManagerSynchronized::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }
};

class ChromeSqlDiagnostics_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/10, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  ChromeSqlDiagnostics_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeSqlDiagnostics_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeSqlDiagnostics_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_reported_sqlite_error_code() const { return at<1>().valid(); }
  int32_t reported_sqlite_error_code() const { return at<1>().as_int32(); }
  bool has_error_code() const { return at<2>().valid(); }
  int32_t error_code() const { return at<2>().as_int32(); }
  bool has_last_errno() const { return at<3>().valid(); }
  int32_t last_errno() const { return at<3>().as_int32(); }
  bool has_sql_statement() const { return at<4>().valid(); }
  ::protozero::ConstChars sql_statement() const { return at<4>().as_string(); }
  bool has_version() const { return at<5>().valid(); }
  int32_t version() const { return at<5>().as_int32(); }
  bool has_schema_sql_rows() const { return at<6>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> schema_sql_rows() const { return GetRepeated<::protozero::ConstChars>(6); }
  bool has_schema_other_row_names() const { return at<7>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> schema_other_row_names() const { return GetRepeated<::protozero::ConstChars>(7); }
  bool has_has_valid_header() const { return at<8>().valid(); }
  bool has_valid_header() const { return at<8>().as_bool(); }
  bool has_has_valid_schema() const { return at<9>().valid(); }
  bool has_valid_schema() const { return at<9>().as_bool(); }
  bool has_error_message() const { return at<10>().valid(); }
  ::protozero::ConstChars error_message() const { return at<10>().as_string(); }
};

class ChromeSqlDiagnostics : public ::protozero::Message {
 public:
  using Decoder = ChromeSqlDiagnostics_Decoder;
  enum : int32_t {
    kReportedSqliteErrorCodeFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
    kLastErrnoFieldNumber = 3,
    kSqlStatementFieldNumber = 4,
    kVersionFieldNumber = 5,
    kSchemaSqlRowsFieldNumber = 6,
    kSchemaOtherRowNamesFieldNumber = 7,
    kHasValidHeaderFieldNumber = 8,
    kHasValidSchemaFieldNumber = 9,
    kErrorMessageFieldNumber = 10,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeSqlDiagnostics"; }


  using FieldMetadata_ReportedSqliteErrorCode =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_ReportedSqliteErrorCode kReportedSqliteErrorCode{};
  void set_reported_sqlite_error_code(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ReportedSqliteErrorCode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ErrorCode =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_ErrorCode kErrorCode{};
  void set_error_code(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ErrorCode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_LastErrno =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_LastErrno kLastErrno{};
  void set_last_errno(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_LastErrno::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SqlStatement =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_SqlStatement kSqlStatement{};
  void set_sql_statement(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SqlStatement::kFieldId, data, size);
  }
  void set_sql_statement(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SqlStatement::kFieldId, chars.data, chars.size);
  }
  void set_sql_statement(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SqlStatement::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Version =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_Version kVersion{};
  void set_version(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_Version::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SchemaSqlRows =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_SchemaSqlRows kSchemaSqlRows{};
  void add_schema_sql_rows(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SchemaSqlRows::kFieldId, data, size);
  }
  void add_schema_sql_rows(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SchemaSqlRows::kFieldId, chars.data, chars.size);
  }
  void add_schema_sql_rows(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SchemaSqlRows::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SchemaOtherRowNames =
    ::protozero::proto_utils::FieldMetadata<
      7,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_SchemaOtherRowNames kSchemaOtherRowNames{};
  void add_schema_other_row_names(const char* data, size_t size) {
    AppendBytes(FieldMetadata_SchemaOtherRowNames::kFieldId, data, size);
  }
  void add_schema_other_row_names(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_SchemaOtherRowNames::kFieldId, chars.data, chars.size);
  }
  void add_schema_other_row_names(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_SchemaOtherRowNames::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasValidHeader =
    ::protozero::proto_utils::FieldMetadata<
      8,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_HasValidHeader kHasValidHeader{};
  void set_has_valid_header(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasValidHeader::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasValidSchema =
    ::protozero::proto_utils::FieldMetadata<
      9,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_HasValidSchema kHasValidSchema{};
  void set_has_valid_schema(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasValidSchema::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ErrorMessage =
    ::protozero::proto_utils::FieldMetadata<
      10,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeSqlDiagnostics>;

  static constexpr FieldMetadata_ErrorMessage kErrorMessage{};
  void set_error_message(const char* data, size_t size) {
    AppendBytes(FieldMetadata_ErrorMessage::kFieldId, data, size);
  }
  void set_error_message(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_ErrorMessage::kFieldId, chars.data, chars.size);
  }
  void set_error_message(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_ErrorMessage::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

class ChromeHashedPerformanceMark_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeHashedPerformanceMark_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeHashedPerformanceMark_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeHashedPerformanceMark_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_site_hash() const { return at<1>().valid(); }
  uint32_t site_hash() const { return at<1>().as_uint32(); }
  bool has_site() const { return at<2>().valid(); }
  ::protozero::ConstChars site() const { return at<2>().as_string(); }
  bool has_mark_hash() const { return at<3>().valid(); }
  uint32_t mark_hash() const { return at<3>().as_uint32(); }
  bool has_mark() const { return at<4>().valid(); }
  ::protozero::ConstChars mark() const { return at<4>().as_string(); }
  bool has_execution_context_id() const { return at<5>().valid(); }
  uint32_t execution_context_id() const { return at<5>().as_uint32(); }
  bool has_sequence_number() const { return at<6>().valid(); }
  uint32_t sequence_number() const { return at<6>().as_uint32(); }
};

class ChromeHashedPerformanceMark : public ::protozero::Message {
 public:
  using Decoder = ChromeHashedPerformanceMark_Decoder;
  enum : int32_t {
    kSiteHashFieldNumber = 1,
    kSiteFieldNumber = 2,
    kMarkHashFieldNumber = 3,
    kMarkFieldNumber = 4,
    kExecutionContextIdFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeHashedPerformanceMark"; }


  using FieldMetadata_SiteHash =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeHashedPerformanceMark>;

  static constexpr FieldMetadata_SiteHash kSiteHash{};
  void set_site_hash(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SiteHash::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Site =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeHashedPerformanceMark>;

  static constexpr FieldMetadata_Site kSite{};
  void set_site(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Site::kFieldId, data, size);
  }
  void set_site(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Site::kFieldId, chars.data, chars.size);
  }
  void set_site(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Site::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_MarkHash =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeHashedPerformanceMark>;

  static constexpr FieldMetadata_MarkHash kMarkHash{};
  void set_mark_hash(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_MarkHash::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Mark =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeHashedPerformanceMark>;

  static constexpr FieldMetadata_Mark kMark{};
  void set_mark(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Mark::kFieldId, data, size);
  }
  void set_mark(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Mark::kFieldId, chars.data, chars.size);
  }
  void set_mark(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Mark::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ExecutionContextId =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeHashedPerformanceMark>;

  static constexpr FieldMetadata_ExecutionContextId kExecutionContextId{};
  void set_execution_context_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ExecutionContextId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SequenceNumber =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeHashedPerformanceMark>;

  static constexpr FieldMetadata_SequenceNumber kSequenceNumber{};
  void set_sequence_number(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SequenceNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class FrameTreeNodeInfo_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/99, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  FrameTreeNodeInfo_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit FrameTreeNodeInfo_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit FrameTreeNodeInfo_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_frame_tree_node_id() const { return at<1>().valid(); }
  uint64_t frame_tree_node_id() const { return at<1>().as_uint64(); }
  bool has_is_main_frame() const { return at<2>().valid(); }
  bool is_main_frame() const { return at<2>().as_bool(); }
  bool has_has_speculative_render_frame_host() const { return at<3>().valid(); }
  bool has_speculative_render_frame_host() const { return at<3>().as_bool(); }
  bool has_current_frame_host() const { return at<4>().valid(); }
  ::protozero::ConstBytes current_frame_host() const { return at<4>().as_bytes(); }
  bool has_speculative_frame_host() const { return at<5>().valid(); }
  ::protozero::ConstBytes speculative_frame_host() const { return at<5>().as_bytes(); }
  bool has_frame_type() const { return at<6>().valid(); }
  int32_t frame_type() const { return at<6>().as_int32(); }
  bool has_debug_annotations() const { return at<99>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> debug_annotations() const { return GetRepeated<::protozero::ConstBytes>(99); }
};

class FrameTreeNodeInfo : public ::protozero::Message {
 public:
  using Decoder = FrameTreeNodeInfo_Decoder;
  enum : int32_t {
    kFrameTreeNodeIdFieldNumber = 1,
    kIsMainFrameFieldNumber = 2,
    kHasSpeculativeRenderFrameHostFieldNumber = 3,
    kCurrentFrameHostFieldNumber = 4,
    kSpeculativeFrameHostFieldNumber = 5,
    kFrameTypeFieldNumber = 6,
    kDebugAnnotationsFieldNumber = 99,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.FrameTreeNodeInfo"; }


  using FrameType = ::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType;
  static inline const char* FrameType_Name(FrameType value) {
    return ::perfetto::protos::pbzero::FrameTreeNodeInfo_FrameType_Name(value);
  }
  static inline const FrameType UNSPECIFIED_FRAME_TYPE = FrameType::UNSPECIFIED_FRAME_TYPE;
  static inline const FrameType SUBFRAME = FrameType::SUBFRAME;
  static inline const FrameType PRIMARY_MAIN_FRAME = FrameType::PRIMARY_MAIN_FRAME;
  static inline const FrameType PRERENDER_MAIN_FRAME = FrameType::PRERENDER_MAIN_FRAME;
  static inline const FrameType FENCED_FRAME_ROOT = FrameType::FENCED_FRAME_ROOT;

  using FieldMetadata_FrameTreeNodeId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      FrameTreeNodeInfo>;

  static constexpr FieldMetadata_FrameTreeNodeId kFrameTreeNodeId{};
  void set_frame_tree_node_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTreeNodeId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsMainFrame =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      FrameTreeNodeInfo>;

  static constexpr FieldMetadata_IsMainFrame kIsMainFrame{};
  void set_is_main_frame(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsMainFrame::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasSpeculativeRenderFrameHost =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      FrameTreeNodeInfo>;

  static constexpr FieldMetadata_HasSpeculativeRenderFrameHost kHasSpeculativeRenderFrameHost{};
  void set_has_speculative_render_frame_host(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasSpeculativeRenderFrameHost::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CurrentFrameHost =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameHost,
      FrameTreeNodeInfo>;

  static constexpr FieldMetadata_CurrentFrameHost kCurrentFrameHost{};
  template <typename T = RenderFrameHost> T* set_current_frame_host() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_SpeculativeFrameHost =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameHost,
      FrameTreeNodeInfo>;

  static constexpr FieldMetadata_SpeculativeFrameHost kSpeculativeFrameHost{};
  template <typename T = RenderFrameHost> T* set_speculative_frame_host() {
    return BeginNestedMessage<T>(5);
  }


  using FieldMetadata_FrameType =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      FrameTreeNodeInfo_FrameType,
      FrameTreeNodeInfo>;

  static constexpr FieldMetadata_FrameType kFrameType{};
  void set_frame_type(FrameTreeNodeInfo_FrameType value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DebugAnnotations =
    ::protozero::proto_utils::FieldMetadata<
      99,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      DebugAnnotation,
      FrameTreeNodeInfo>;

  static constexpr FieldMetadata_DebugAnnotations kDebugAnnotations{};
  template <typename T = DebugAnnotation> T* add_debug_annotations() {
    return BeginNestedMessage<T>(99);
  }

};

class ShouldSwapBrowsingInstancesResult_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ShouldSwapBrowsingInstancesResult_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ShouldSwapBrowsingInstancesResult_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ShouldSwapBrowsingInstancesResult_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_frame_tree_node_id() const { return at<1>().valid(); }
  uint64_t frame_tree_node_id() const { return at<1>().as_uint64(); }
  bool has_result() const { return at<2>().valid(); }
  int32_t result() const { return at<2>().as_int32(); }
};

class ShouldSwapBrowsingInstancesResult : public ::protozero::Message {
 public:
  using Decoder = ShouldSwapBrowsingInstancesResult_Decoder;
  enum : int32_t {
    kFrameTreeNodeIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ShouldSwapBrowsingInstancesResult"; }


  using FieldMetadata_FrameTreeNodeId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      ShouldSwapBrowsingInstancesResult>;

  static constexpr FieldMetadata_FrameTreeNodeId kFrameTreeNodeId{};
  void set_frame_tree_node_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTreeNodeId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Result =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ShouldSwapBrowsingInstance,
      ShouldSwapBrowsingInstancesResult>;

  static constexpr FieldMetadata_Result kResult{};
  void set_result(ShouldSwapBrowsingInstance value) {
    static constexpr uint32_t field_id = FieldMetadata_Result::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class RenderFrameImplDeletion_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  RenderFrameImplDeletion_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RenderFrameImplDeletion_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RenderFrameImplDeletion_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_intent() const { return at<1>().valid(); }
  int32_t intent() const { return at<1>().as_int32(); }
  bool has_has_pending_commit() const { return at<2>().valid(); }
  bool has_pending_commit() const { return at<2>().as_bool(); }
  bool has_has_pending_cross_document_commit() const { return at<3>().valid(); }
  bool has_pending_cross_document_commit() const { return at<3>().as_bool(); }
  bool has_frame_tree_node_id() const { return at<4>().valid(); }
  uint64_t frame_tree_node_id() const { return at<4>().as_uint64(); }
};

class RenderFrameImplDeletion : public ::protozero::Message {
 public:
  using Decoder = RenderFrameImplDeletion_Decoder;
  enum : int32_t {
    kIntentFieldNumber = 1,
    kHasPendingCommitFieldNumber = 2,
    kHasPendingCrossDocumentCommitFieldNumber = 3,
    kFrameTreeNodeIdFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RenderFrameImplDeletion"; }


  using FieldMetadata_Intent =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      FrameDeleteIntention,
      RenderFrameImplDeletion>;

  static constexpr FieldMetadata_Intent kIntent{};
  void set_intent(FrameDeleteIntention value) {
    static constexpr uint32_t field_id = FieldMetadata_Intent::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasPendingCommit =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RenderFrameImplDeletion>;

  static constexpr FieldMetadata_HasPendingCommit kHasPendingCommit{};
  void set_has_pending_commit(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasPendingCommit::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HasPendingCrossDocumentCommit =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      RenderFrameImplDeletion>;

  static constexpr FieldMetadata_HasPendingCrossDocumentCommit kHasPendingCrossDocumentCommit{};
  void set_has_pending_cross_document_commit(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_HasPendingCrossDocumentCommit::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_FrameTreeNodeId =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      RenderFrameImplDeletion>;

  static constexpr FieldMetadata_FrameTreeNodeId kFrameTreeNodeId{};
  void set_frame_tree_node_id(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_FrameTreeNodeId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class ChromeMessagePumpForUI_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeMessagePumpForUI_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeMessagePumpForUI_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeMessagePumpForUI_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_message_id() const { return at<1>().valid(); }
  uint32_t message_id() const { return at<1>().as_uint32(); }
  bool has_wait_for_object_result() const { return at<2>().valid(); }
  uint32_t wait_for_object_result() const { return at<2>().as_uint32(); }
};

class ChromeMessagePumpForUI : public ::protozero::Message {
 public:
  using Decoder = ChromeMessagePumpForUI_Decoder;
  enum : int32_t {
    kMessageIdFieldNumber = 1,
    kWaitForObjectResultFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeMessagePumpForUI"; }


  using FieldMetadata_MessageId =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeMessagePumpForUI>;

  static constexpr FieldMetadata_MessageId kMessageId{};
  void set_message_id(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_MessageId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WaitForObjectResult =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeMessagePumpForUI>;

  static constexpr FieldMetadata_WaitForObjectResult kWaitForObjectResult{};
  void set_wait_for_object_result(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_WaitForObjectResult::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }
};

class ChromeRasterTask_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeRasterTask_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeRasterTask_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeRasterTask_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_source_frame_number() const { return at<1>().valid(); }
  int64_t source_frame_number() const { return at<1>().as_int64(); }
};

class ChromeRasterTask : public ::protozero::Message {
 public:
  using Decoder = ChromeRasterTask_Decoder;
  enum : int32_t {
    kSourceFrameNumberFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeRasterTask"; }


  using FieldMetadata_SourceFrameNumber =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      ChromeRasterTask>;

  static constexpr FieldMetadata_SourceFrameNumber kSourceFrameNumber{};
  void set_source_frame_number(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceFrameNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class ChromeTaskPostedToDisabledQueue_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeTaskPostedToDisabledQueue_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeTaskPostedToDisabledQueue_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeTaskPostedToDisabledQueue_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_task_queue_name() const { return at<1>().valid(); }
  ::protozero::ConstChars task_queue_name() const { return at<1>().as_string(); }
  bool has_time_since_disabled_ms() const { return at<2>().valid(); }
  uint64_t time_since_disabled_ms() const { return at<2>().as_uint64(); }
  bool has_ipc_hash() const { return at<3>().valid(); }
  uint32_t ipc_hash() const { return at<3>().as_uint32(); }
  bool has_source_location_iid() const { return at<4>().valid(); }
  uint64_t source_location_iid() const { return at<4>().as_uint64(); }
};

class ChromeTaskPostedToDisabledQueue : public ::protozero::Message {
 public:
  using Decoder = ChromeTaskPostedToDisabledQueue_Decoder;
  enum : int32_t {
    kTaskQueueNameFieldNumber = 1,
    kTimeSinceDisabledMsFieldNumber = 2,
    kIpcHashFieldNumber = 3,
    kSourceLocationIidFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeTaskPostedToDisabledQueue"; }


  using FieldMetadata_TaskQueueName =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeTaskPostedToDisabledQueue>;

  static constexpr FieldMetadata_TaskQueueName kTaskQueueName{};
  void set_task_queue_name(const char* data, size_t size) {
    AppendBytes(FieldMetadata_TaskQueueName::kFieldId, data, size);
  }
  void set_task_queue_name(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_TaskQueueName::kFieldId, chars.data, chars.size);
  }
  void set_task_queue_name(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_TaskQueueName::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TimeSinceDisabledMs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      ChromeTaskPostedToDisabledQueue>;

  static constexpr FieldMetadata_TimeSinceDisabledMs kTimeSinceDisabledMs{};
  void set_time_since_disabled_ms(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TimeSinceDisabledMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IpcHash =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeTaskPostedToDisabledQueue>;

  static constexpr FieldMetadata_IpcHash kIpcHash{};
  void set_ipc_hash(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IpcHash::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_SourceLocationIid =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      ChromeTaskPostedToDisabledQueue>;

  static constexpr FieldMetadata_SourceLocationIid kSourceLocationIid{};
  void set_source_location_iid(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_SourceLocationIid::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class ChromeProfileDestroyer_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeProfileDestroyer_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeProfileDestroyer_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeProfileDestroyer_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_profile_ptr() const { return at<1>().valid(); }
  uint64_t profile_ptr() const { return at<1>().as_uint64(); }
  bool has_is_off_the_record() const { return at<2>().valid(); }
  bool is_off_the_record() const { return at<2>().as_bool(); }
  bool has_otr_profile_id() const { return at<3>().valid(); }
  ::protozero::ConstChars otr_profile_id() const { return at<3>().as_string(); }
  bool has_host_count_at_creation() const { return at<4>().valid(); }
  uint32_t host_count_at_creation() const { return at<4>().as_uint32(); }
  bool has_host_count_at_destruction() const { return at<5>().valid(); }
  uint32_t host_count_at_destruction() const { return at<5>().as_uint32(); }
  bool has_render_process_host_ptr() const { return at<6>().valid(); }
  uint64_t render_process_host_ptr() const { return at<6>().as_uint64(); }
};

class ChromeProfileDestroyer : public ::protozero::Message {
 public:
  using Decoder = ChromeProfileDestroyer_Decoder;
  enum : int32_t {
    kProfilePtrFieldNumber = 1,
    kIsOffTheRecordFieldNumber = 2,
    kOtrProfileIdFieldNumber = 3,
    kHostCountAtCreationFieldNumber = 4,
    kHostCountAtDestructionFieldNumber = 5,
    kRenderProcessHostPtrFieldNumber = 6,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeProfileDestroyer"; }


  using FieldMetadata_ProfilePtr =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      ChromeProfileDestroyer>;

  static constexpr FieldMetadata_ProfilePtr kProfilePtr{};
  void set_profile_ptr(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ProfilePtr::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_IsOffTheRecord =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      ChromeProfileDestroyer>;

  static constexpr FieldMetadata_IsOffTheRecord kIsOffTheRecord{};
  void set_is_off_the_record(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_IsOffTheRecord::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_OtrProfileId =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeProfileDestroyer>;

  static constexpr FieldMetadata_OtrProfileId kOtrProfileId{};
  void set_otr_profile_id(const char* data, size_t size) {
    AppendBytes(FieldMetadata_OtrProfileId::kFieldId, data, size);
  }
  void set_otr_profile_id(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_OtrProfileId::kFieldId, chars.data, chars.size);
  }
  void set_otr_profile_id(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_OtrProfileId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HostCountAtCreation =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeProfileDestroyer>;

  static constexpr FieldMetadata_HostCountAtCreation kHostCountAtCreation{};
  void set_host_count_at_creation(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_HostCountAtCreation::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_HostCountAtDestruction =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeProfileDestroyer>;

  static constexpr FieldMetadata_HostCountAtDestruction kHostCountAtDestruction{};
  void set_host_count_at_destruction(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_HostCountAtDestruction::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RenderProcessHostPtr =
    ::protozero::proto_utils::FieldMetadata<
      6,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      ChromeProfileDestroyer>;

  static constexpr FieldMetadata_RenderProcessHostPtr kRenderProcessHostPtr{};
  void set_render_process_host_ptr(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RenderProcessHostPtr::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }
};

class ChromeBrowserContext_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeBrowserContext_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeBrowserContext_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeBrowserContext_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_id() const { return at<2>().valid(); }
  ::protozero::ConstChars id() const { return at<2>().as_string(); }
};

class ChromeBrowserContext : public ::protozero::Message {
 public:
  using Decoder = ChromeBrowserContext_Decoder;
  enum : int32_t {
    kIdFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeBrowserContext"; }


  using FieldMetadata_Id =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      ChromeBrowserContext>;

  static constexpr FieldMetadata_Id kId{};
  void set_id(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Id::kFieldId, data, size);
  }
  void set_id(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Id::kFieldId, chars.data, chars.size);
  }
  void set_id(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Id::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

class ChromeTaskAnnotator_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeTaskAnnotator_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeTaskAnnotator_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeTaskAnnotator_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_ipc_hash() const { return at<1>().valid(); }
  uint32_t ipc_hash() const { return at<1>().as_uint32(); }
  bool has_task_delay_us() const { return at<2>().valid(); }
  uint64_t task_delay_us() const { return at<2>().as_uint64(); }
  bool has_delay_policy() const { return at<3>().valid(); }
  int32_t delay_policy() const { return at<3>().as_int32(); }
};

class ChromeTaskAnnotator : public ::protozero::Message {
 public:
  using Decoder = ChromeTaskAnnotator_Decoder;
  enum : int32_t {
    kIpcHashFieldNumber = 1,
    kTaskDelayUsFieldNumber = 2,
    kDelayPolicyFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeTaskAnnotator"; }


  using DelayPolicy = ::perfetto::protos::pbzero::ChromeTaskAnnotator_DelayPolicy;
  static inline const char* DelayPolicy_Name(DelayPolicy value) {
    return ::perfetto::protos::pbzero::ChromeTaskAnnotator_DelayPolicy_Name(value);
  }
  static inline const DelayPolicy FLEXIBLE_NO_SOONER = DelayPolicy::FLEXIBLE_NO_SOONER;
  static inline const DelayPolicy FLEXIBLE_PREFER_EARLY = DelayPolicy::FLEXIBLE_PREFER_EARLY;
  static inline const DelayPolicy PRECISE = DelayPolicy::PRECISE;

  using FieldMetadata_IpcHash =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint32,
      uint32_t,
      ChromeTaskAnnotator>;

  static constexpr FieldMetadata_IpcHash kIpcHash{};
  void set_ipc_hash(uint32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_IpcHash::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_TaskDelayUs =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      ChromeTaskAnnotator>;

  static constexpr FieldMetadata_TaskDelayUs kTaskDelayUs{};
  void set_task_delay_us(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_TaskDelayUs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DelayPolicy =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeTaskAnnotator_DelayPolicy,
      ChromeTaskAnnotator>;

  static constexpr FieldMetadata_DelayPolicy kDelayPolicy{};
  void set_delay_policy(ChromeTaskAnnotator_DelayPolicy value) {
    static constexpr uint32_t field_id = FieldMetadata_DelayPolicy::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }
};

class BlinkTaskScope_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  BlinkTaskScope_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit BlinkTaskScope_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit BlinkTaskScope_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_type() const { return at<1>().valid(); }
  int32_t type() const { return at<1>().as_int32(); }
  bool has_scope_task_id() const { return at<2>().valid(); }
  int64_t scope_task_id() const { return at<2>().as_int64(); }
  bool has_running_task_id_to_be_restored() const { return at<3>().valid(); }
  int64_t running_task_id_to_be_restored() const { return at<3>().as_int64(); }
};

class BlinkTaskScope : public ::protozero::Message {
 public:
  using Decoder = BlinkTaskScope_Decoder;
  enum : int32_t {
    kTypeFieldNumber = 1,
    kScopeTaskIdFieldNumber = 2,
    kRunningTaskIdToBeRestoredFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.BlinkTaskScope"; }


  using TaskScopeType = ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType;
  static inline const char* TaskScopeType_Name(TaskScopeType value) {
    return ::perfetto::protos::pbzero::BlinkTaskScope_TaskScopeType_Name(value);
  }
  static inline const TaskScopeType TASK_SCOPE_UNKNOWN = TaskScopeType::TASK_SCOPE_UNKNOWN;
  static inline const TaskScopeType TASK_SCOPE_CALLBACK = TaskScopeType::TASK_SCOPE_CALLBACK;
  static inline const TaskScopeType TASK_SCOPE_SCHEDULED_ACTION = TaskScopeType::TASK_SCOPE_SCHEDULED_ACTION;
  static inline const TaskScopeType TASK_SCOPE_SCRIPT_EXECUTION = TaskScopeType::TASK_SCOPE_SCRIPT_EXECUTION;
  static inline const TaskScopeType TASK_SCOPE_POST_MESSAGE = TaskScopeType::TASK_SCOPE_POST_MESSAGE;
  static inline const TaskScopeType TASK_SCOPE_POP_STATE = TaskScopeType::TASK_SCOPE_POP_STATE;
  static inline const TaskScopeType TASK_SCOPE_SCHEDULER_POST_TASK = TaskScopeType::TASK_SCOPE_SCHEDULER_POST_TASK;
  static inline const TaskScopeType TASK_SCOPE_REQUEST_IDLE_CALLBACK = TaskScopeType::TASK_SCOPE_REQUEST_IDLE_CALLBACK;
  static inline const TaskScopeType TASK_SCOPE_XML_HTTP_REQUEST = TaskScopeType::TASK_SCOPE_XML_HTTP_REQUEST;
  static inline const TaskScopeType TASK_SCOPE_SOFT_NAVIGATION = TaskScopeType::TASK_SCOPE_SOFT_NAVIGATION;

  using FieldMetadata_Type =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      BlinkTaskScope_TaskScopeType,
      BlinkTaskScope>;

  static constexpr FieldMetadata_Type kType{};
  void set_type(BlinkTaskScope_TaskScopeType value) {
    static constexpr uint32_t field_id = FieldMetadata_Type::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ScopeTaskId =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BlinkTaskScope>;

  static constexpr FieldMetadata_ScopeTaskId kScopeTaskId{};
  void set_scope_task_id(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ScopeTaskId::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_RunningTaskIdToBeRestored =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      BlinkTaskScope>;

  static constexpr FieldMetadata_RunningTaskIdToBeRestored kRunningTaskIdToBeRestored{};
  void set_running_task_id_to_be_restored(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RunningTaskIdToBeRestored::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class ChromeMemoryPressureNotification_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  ChromeMemoryPressureNotification_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit ChromeMemoryPressureNotification_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit ChromeMemoryPressureNotification_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_level() const { return at<1>().valid(); }
  int32_t level() const { return at<1>().as_int32(); }
  bool has_creation_location_iid() const { return at<2>().valid(); }
  uint64_t creation_location_iid() const { return at<2>().as_uint64(); }
};

class ChromeMemoryPressureNotification : public ::protozero::Message {
 public:
  using Decoder = ChromeMemoryPressureNotification_Decoder;
  enum : int32_t {
    kLevelFieldNumber = 1,
    kCreationLocationIidFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.ChromeMemoryPressureNotification"; }


  using FieldMetadata_Level =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      MemoryPressureLevel,
      ChromeMemoryPressureNotification>;

  static constexpr FieldMetadata_Level kLevel{};
  void set_level(MemoryPressureLevel value) {
    static constexpr uint32_t field_id = FieldMetadata_Level::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_CreationLocationIid =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kUint64,
      uint64_t,
      ChromeMemoryPressureNotification>;

  static constexpr FieldMetadata_CreationLocationIid kCreationLocationIid{};
  void set_creation_location_iid(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_CreationLocationIid::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kUint64>
        ::Append(*this, field_id, value);
  }
};

class ChromeTrackEvent : public ::perfetto::protos::pbzero::TrackEvent {
 public:

  using FieldMetadata_ChromeAppState =
    ::protozero::proto_utils::FieldMetadata<
      1000,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      ChromeAppState,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeAppState kChromeAppState{};
  void set_chrome_app_state(ChromeAppState value) {
    static constexpr uint32_t field_id = FieldMetadata_ChromeAppState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ChromeMemoryPressureNotification =
    ::protozero::proto_utils::FieldMetadata<
      1001,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeMemoryPressureNotification,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeMemoryPressureNotification kChromeMemoryPressureNotification{};
  template <typename T = ChromeMemoryPressureNotification> T* set_chrome_memory_pressure_notification() {
    return BeginNestedMessage<T>(1001);
  }


  using FieldMetadata_ChromeTaskAnnotator =
    ::protozero::proto_utils::FieldMetadata<
      1002,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeTaskAnnotator,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeTaskAnnotator kChromeTaskAnnotator{};
  template <typename T = ChromeTaskAnnotator> T* set_chrome_task_annotator() {
    return BeginNestedMessage<T>(1002);
  }


  using FieldMetadata_ChromeBrowserContext =
    ::protozero::proto_utils::FieldMetadata<
      1003,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeBrowserContext,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeBrowserContext kChromeBrowserContext{};
  template <typename T = ChromeBrowserContext> T* set_chrome_browser_context() {
    return BeginNestedMessage<T>(1003);
  }


  using FieldMetadata_ChromeProfileDestroyer =
    ::protozero::proto_utils::FieldMetadata<
      1004,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeProfileDestroyer,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeProfileDestroyer kChromeProfileDestroyer{};
  template <typename T = ChromeProfileDestroyer> T* set_chrome_profile_destroyer() {
    return BeginNestedMessage<T>(1004);
  }


  using FieldMetadata_ChromeTaskPostedToDisabledQueue =
    ::protozero::proto_utils::FieldMetadata<
      1005,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeTaskPostedToDisabledQueue,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeTaskPostedToDisabledQueue kChromeTaskPostedToDisabledQueue{};
  template <typename T = ChromeTaskPostedToDisabledQueue> T* set_chrome_task_posted_to_disabled_queue() {
    return BeginNestedMessage<T>(1005);
  }


  using FieldMetadata_ChromeRasterTask =
    ::protozero::proto_utils::FieldMetadata<
      1006,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeRasterTask,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeRasterTask kChromeRasterTask{};
  template <typename T = ChromeRasterTask> T* set_chrome_raster_task() {
    return BeginNestedMessage<T>(1006);
  }


  using FieldMetadata_ChromeMessagePumpForUi =
    ::protozero::proto_utils::FieldMetadata<
      1007,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeMessagePumpForUI,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeMessagePumpForUi kChromeMessagePumpForUi{};
  template <typename T = ChromeMessagePumpForUI> T* set_chrome_message_pump_for_ui() {
    return BeginNestedMessage<T>(1007);
  }


  using FieldMetadata_RenderFrameImplDeletion =
    ::protozero::proto_utils::FieldMetadata<
      1008,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameImplDeletion,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RenderFrameImplDeletion kRenderFrameImplDeletion{};
  template <typename T = RenderFrameImplDeletion> T* set_render_frame_impl_deletion() {
    return BeginNestedMessage<T>(1008);
  }


  using FieldMetadata_ShouldSwapBrowsingInstancesResult =
    ::protozero::proto_utils::FieldMetadata<
      1009,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ShouldSwapBrowsingInstancesResult,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ShouldSwapBrowsingInstancesResult kShouldSwapBrowsingInstancesResult{};
  template <typename T = ShouldSwapBrowsingInstancesResult> T* set_should_swap_browsing_instances_result() {
    return BeginNestedMessage<T>(1009);
  }


  using FieldMetadata_FrameTreeNodeInfo =
    ::protozero::proto_utils::FieldMetadata<
      1010,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      FrameTreeNodeInfo,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_FrameTreeNodeInfo kFrameTreeNodeInfo{};
  template <typename T = FrameTreeNodeInfo> T* set_frame_tree_node_info() {
    return BeginNestedMessage<T>(1010);
  }


  using FieldMetadata_ChromeHashedPerformanceMark =
    ::protozero::proto_utils::FieldMetadata<
      1011,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeHashedPerformanceMark,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeHashedPerformanceMark kChromeHashedPerformanceMark{};
  template <typename T = ChromeHashedPerformanceMark> T* set_chrome_hashed_performance_mark() {
    return BeginNestedMessage<T>(1011);
  }


  using FieldMetadata_RenderProcessHost =
    ::protozero::proto_utils::FieldMetadata<
      1012,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderProcessHost,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RenderProcessHost kRenderProcessHost{};
  template <typename T = RenderProcessHost> T* set_render_process_host() {
    return BeginNestedMessage<T>(1012);
  }


  using FieldMetadata_RenderProcessHostCleanup =
    ::protozero::proto_utils::FieldMetadata<
      1013,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderProcessHostCleanup,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RenderProcessHostCleanup kRenderProcessHostCleanup{};
  template <typename T = RenderProcessHostCleanup> T* set_render_process_host_cleanup() {
    return BeginNestedMessage<T>(1013);
  }


  using FieldMetadata_RenderProcessHostListenerChanged =
    ::protozero::proto_utils::FieldMetadata<
      1014,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderProcessHostListener,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RenderProcessHostListenerChanged kRenderProcessHostListenerChanged{};
  template <typename T = RenderProcessHostListener> T* set_render_process_host_listener_changed() {
    return BeginNestedMessage<T>(1014);
  }


  using FieldMetadata_ChildProcessLauncherPriority =
    ::protozero::proto_utils::FieldMetadata<
      1015,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChildProcessLauncherPriority,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChildProcessLauncherPriority kChildProcessLauncherPriority{};
  template <typename T = ChildProcessLauncherPriority> T* set_child_process_launcher_priority() {
    return BeginNestedMessage<T>(1015);
  }


  using FieldMetadata_ResourceBundle =
    ::protozero::proto_utils::FieldMetadata<
      1016,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ResourceBundle,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ResourceBundle kResourceBundle{};
  template <typename T = ResourceBundle> T* set_resource_bundle() {
    return BeginNestedMessage<T>(1016);
  }


  using FieldMetadata_ChromeWebAppBadNavigate =
    ::protozero::proto_utils::FieldMetadata<
      1017,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeWebAppBadNavigate,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeWebAppBadNavigate kChromeWebAppBadNavigate{};
  template <typename T = ChromeWebAppBadNavigate> T* set_chrome_web_app_bad_navigate() {
    return BeginNestedMessage<T>(1017);
  }


  using FieldMetadata_ChromeExtensionId =
    ::protozero::proto_utils::FieldMetadata<
      1018,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeExtensionId,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeExtensionId kChromeExtensionId{};
  template <typename T = ChromeExtensionId> T* set_chrome_extension_id() {
    return BeginNestedMessage<T>(1018);
  }


  using FieldMetadata_SiteInstance =
    ::protozero::proto_utils::FieldMetadata<
      1019,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SiteInstance,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_SiteInstance kSiteInstance{};
  template <typename T = SiteInstance> T* set_site_instance() {
    return BeginNestedMessage<T>(1019);
  }


  using FieldMetadata_RenderViewHost =
    ::protozero::proto_utils::FieldMetadata<
      1020,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderViewHost,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RenderViewHost kRenderViewHost{};
  template <typename T = RenderViewHost> T* set_render_view_host() {
    return BeginNestedMessage<T>(1020);
  }


  using FieldMetadata_RenderFrameProxyHost =
    ::protozero::proto_utils::FieldMetadata<
      1021,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameProxyHost,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RenderFrameProxyHost kRenderFrameProxyHost{};
  template <typename T = RenderFrameProxyHost> T* set_render_frame_proxy_host() {
    return BeginNestedMessage<T>(1021);
  }


  using FieldMetadata_AndroidViewDump =
    ::protozero::proto_utils::FieldMetadata<
      1022,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AndroidViewDump,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_AndroidViewDump kAndroidViewDump{};
  template <typename T = AndroidViewDump> T* set_android_view_dump() {
    return BeginNestedMessage<T>(1022);
  }


  using FieldMetadata_ParkableStringCompressInBackground =
    ::protozero::proto_utils::FieldMetadata<
      1023,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ParkableStringCompressInBackground,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ParkableStringCompressInBackground kParkableStringCompressInBackground{};
  template <typename T = ParkableStringCompressInBackground> T* set_parkable_string_compress_in_background() {
    return BeginNestedMessage<T>(1023);
  }


  using FieldMetadata_ParkableStringUnpark =
    ::protozero::proto_utils::FieldMetadata<
      1024,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ParkableStringUnpark,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ParkableStringUnpark kParkableStringUnpark{};
  template <typename T = ParkableStringUnpark> T* set_parkable_string_unpark() {
    return BeginNestedMessage<T>(1024);
  }


  using FieldMetadata_ChromeSamplingProfilerSampleCompleted =
    ::protozero::proto_utils::FieldMetadata<
      1025,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeSamplingProfilerSampleCollected,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeSamplingProfilerSampleCompleted kChromeSamplingProfilerSampleCompleted{};
  template <typename T = ChromeSamplingProfilerSampleCollected> T* set_chrome_sampling_profiler_sample_completed() {
    return BeginNestedMessage<T>(1025);
  }


  using FieldMetadata_SendBeginMainframeToCommitBreakdown =
    ::protozero::proto_utils::FieldMetadata<
      1026,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SendBeginMainFrameToCommitBreakdown,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_SendBeginMainframeToCommitBreakdown kSendBeginMainframeToCommitBreakdown{};
  template <typename T = SendBeginMainFrameToCommitBreakdown> T* set_send_begin_mainframe_to_commit_breakdown() {
    return BeginNestedMessage<T>(1026);
  }


  using FieldMetadata_GlobalRenderFrameHostId =
    ::protozero::proto_utils::FieldMetadata<
      1027,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      GlobalRenderFrameHostId,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_GlobalRenderFrameHostId kGlobalRenderFrameHostId{};
  template <typename T = GlobalRenderFrameHostId> T* set_global_render_frame_host_id() {
    return BeginNestedMessage<T>(1027);
  }


  using FieldMetadata_RenderFrameHost =
    ::protozero::proto_utils::FieldMetadata<
      1028,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RenderFrameHost,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RenderFrameHost kRenderFrameHost{};
  template <typename T = RenderFrameHost> T* set_render_frame_host() {
    return BeginNestedMessage<T>(1028);
  }


  using FieldMetadata_ThreadPoolTask =
    ::protozero::proto_utils::FieldMetadata<
      1029,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeThreadPoolTask,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ThreadPoolTask kThreadPoolTask{};
  template <typename T = ChromeThreadPoolTask> T* set_thread_pool_task() {
    return BeginNestedMessage<T>(1029);
  }


  using FieldMetadata_BackForwardCacheCanStoreDocumentResult =
    ::protozero::proto_utils::FieldMetadata<
      1030,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BackForwardCacheCanStoreDocumentResult,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_BackForwardCacheCanStoreDocumentResult kBackForwardCacheCanStoreDocumentResult{};
  template <typename T = BackForwardCacheCanStoreDocumentResult> T* set_back_forward_cache_can_store_document_result() {
    return BeginNestedMessage<T>(1030);
  }


  using FieldMetadata_RendererMainThreadTaskExecution =
    ::protozero::proto_utils::FieldMetadata<
      1031,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RendererMainThreadTaskExecution,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_RendererMainThreadTaskExecution kRendererMainThreadTaskExecution{};
  template <typename T = RendererMainThreadTaskExecution> T* set_renderer_main_thread_task_execution() {
    return BeginNestedMessage<T>(1031);
  }


  using FieldMetadata_EventLatency =
    ::protozero::proto_utils::FieldMetadata<
      1032,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      EventLatency,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_EventLatency kEventLatency{};
  template <typename T = EventLatency> T* set_event_latency() {
    return BeginNestedMessage<T>(1032);
  }


  using FieldMetadata_ProcessSingleton =
    ::protozero::proto_utils::FieldMetadata<
      1033,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ProcessSingleton,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ProcessSingleton kProcessSingleton{};
  template <typename T = ProcessSingleton> T* set_process_singleton() {
    return BeginNestedMessage<T>(1033);
  }


  using FieldMetadata_SiteInstanceGroup =
    ::protozero::proto_utils::FieldMetadata<
      1034,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SiteInstanceGroup,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_SiteInstanceGroup kSiteInstanceGroup{};
  template <typename T = SiteInstanceGroup> T* set_site_instance_group() {
    return BeginNestedMessage<T>(1034);
  }


  using FieldMetadata_BrowsingContextState =
    ::protozero::proto_utils::FieldMetadata<
      1035,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BrowsingContextState,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_BrowsingContextState kBrowsingContextState{};
  template <typename T = BrowsingContextState> T* set_browsing_context_state() {
    return BeginNestedMessage<T>(1035);
  }


  using FieldMetadata_DeviceThermalState =
    ::protozero::proto_utils::FieldMetadata<
      1036,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      DeviceThermalState,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_DeviceThermalState kDeviceThermalState{};
  void set_device_thermal_state(DeviceThermalState value) {
    static constexpr uint32_t field_id = FieldMetadata_DeviceThermalState::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Navigation =
    ::protozero::proto_utils::FieldMetadata<
      1037,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      NavigationHandle,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_Navigation kNavigation{};
  template <typename T = NavigationHandle> T* set_navigation() {
    return BeginNestedMessage<T>(1037);
  }


  using FieldMetadata_AndroidIpc =
    ::protozero::proto_utils::FieldMetadata<
      1038,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AndroidIPC,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_AndroidIpc kAndroidIpc{};
  template <typename T = AndroidIPC> T* set_android_ipc() {
    return BeginNestedMessage<T>(1038);
  }


  using FieldMetadata_SqlDiagnostics =
    ::protozero::proto_utils::FieldMetadata<
      1039,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeSqlDiagnostics,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_SqlDiagnostics kSqlDiagnostics{};
  template <typename T = ChromeSqlDiagnostics> T* set_sql_diagnostics() {
    return BeginNestedMessage<T>(1039);
  }


  using FieldMetadata_SequenceManagerTask =
    ::protozero::proto_utils::FieldMetadata<
      1040,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SequenceManagerTask,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_SequenceManagerTask kSequenceManagerTask{};
  template <typename T = SequenceManagerTask> T* set_sequence_manager_task() {
    return BeginNestedMessage<T>(1040);
  }


  using FieldMetadata_AndroidToolbar =
    ::protozero::proto_utils::FieldMetadata<
      1041,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AndroidToolbar,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_AndroidToolbar kAndroidToolbar{};
  template <typename T = AndroidToolbar> T* set_android_toolbar() {
    return BeginNestedMessage<T>(1041);
  }


  using FieldMetadata_ActiveProcesses =
    ::protozero::proto_utils::FieldMetadata<
      1042,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ActiveProcesses,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ActiveProcesses kActiveProcesses{};
  template <typename T = ActiveProcesses> T* set_active_processes() {
    return BeginNestedMessage<T>(1042);
  }


  using FieldMetadata_BlinkTaskScope =
    ::protozero::proto_utils::FieldMetadata<
      1043,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkTaskScope,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_BlinkTaskScope kBlinkTaskScope{};
  template <typename T = BlinkTaskScope> T* set_blink_task_scope() {
    return BeginNestedMessage<T>(1043);
  }


  using FieldMetadata_UkmPageLoadTimingUpdate =
    ::protozero::proto_utils::FieldMetadata<
      1044,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      UkmPageLoadTimingUpdate,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_UkmPageLoadTimingUpdate kUkmPageLoadTimingUpdate{};
  template <typename T = UkmPageLoadTimingUpdate> T* set_ukm_page_load_timing_update() {
    return BeginNestedMessage<T>(1044);
  }


  using FieldMetadata_HighEntropyApi =
    ::protozero::proto_utils::FieldMetadata<
      1045,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      BlinkHighEntropyAPI,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_HighEntropyApi kHighEntropyApi{};
  template <typename T = BlinkHighEntropyAPI> T* set_high_entropy_api() {
    return BeginNestedMessage<T>(1045);
  }


  using FieldMetadata_TabSwitchMeasurement =
    ::protozero::proto_utils::FieldMetadata<
      1046,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      TabSwitchMeasurement,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_TabSwitchMeasurement kTabSwitchMeasurement{};
  template <typename T = TabSwitchMeasurement> T* set_tab_switch_measurement() {
    return BeginNestedMessage<T>(1046);
  }


  using FieldMetadata_ScrollDeltas =
    ::protozero::proto_utils::FieldMetadata<
      1047,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ScrollDeltas,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ScrollDeltas kScrollDeltas{};
  template <typename T = ScrollDeltas> T* set_scroll_deltas() {
    return BeginNestedMessage<T>(1047);
  }


  using FieldMetadata_WinRenderAudioFromSource =
    ::protozero::proto_utils::FieldMetadata<
      1048,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      WinRenderAudioFromSource,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_WinRenderAudioFromSource kWinRenderAudioFromSource{};
  template <typename T = WinRenderAudioFromSource> T* set_win_render_audio_from_source() {
    return BeginNestedMessage<T>(1048);
  }


  using FieldMetadata_MacAuhalStream =
    ::protozero::proto_utils::FieldMetadata<
      1049,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      MacAUHALStream,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_MacAuhalStream kMacAuhalStream{};
  template <typename T = MacAUHALStream> T* set_mac_auhal_stream() {
    return BeginNestedMessage<T>(1049);
  }


  using FieldMetadata_LinuxAlsaOutput =
    ::protozero::proto_utils::FieldMetadata<
      1050,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LinuxAlsaOutput,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_LinuxAlsaOutput kLinuxAlsaOutput{};
  template <typename T = LinuxAlsaOutput> T* set_linux_alsa_output() {
    return BeginNestedMessage<T>(1050);
  }


  using FieldMetadata_LinuxPulseOutput =
    ::protozero::proto_utils::FieldMetadata<
      1051,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LinuxPulseOutput,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_LinuxPulseOutput kLinuxPulseOutput{};
  template <typename T = LinuxPulseOutput> T* set_linux_pulse_output() {
    return BeginNestedMessage<T>(1051);
  }


  using FieldMetadata_ChromeGraphicsPipeline =
    ::protozero::proto_utils::FieldMetadata<
      1052,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeGraphicsPipeline,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeGraphicsPipeline kChromeGraphicsPipeline{};
  template <typename T = ChromeGraphicsPipeline> T* set_chrome_graphics_pipeline() {
    return BeginNestedMessage<T>(1052);
  }


  using FieldMetadata_ChromeosCrasUnified =
    ::protozero::proto_utils::FieldMetadata<
      1053,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      CrasUnified,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ChromeosCrasUnified kChromeosCrasUnified{};
  template <typename T = CrasUnified> T* set_chromeos_cras_unified() {
    return BeginNestedMessage<T>(1053);
  }


  using FieldMetadata_LibunwindstackUnwinder =
    ::protozero::proto_utils::FieldMetadata<
      1054,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LibunwindstackUnwinder,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_LibunwindstackUnwinder kLibunwindstackUnwinder{};
  template <typename T = LibunwindstackUnwinder> T* set_libunwindstack_unwinder() {
    return BeginNestedMessage<T>(1054);
  }


  using FieldMetadata_ScrollPredictorMetrics =
    ::protozero::proto_utils::FieldMetadata<
      1055,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ScrollPredictorMetrics,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ScrollPredictorMetrics kScrollPredictorMetrics{};
  template <typename T = ScrollPredictorMetrics> T* set_scroll_predictor_metrics() {
    return BeginNestedMessage<T>(1055);
  }


  using FieldMetadata_PageLoad =
    ::protozero::proto_utils::FieldMetadata<
      1056,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      PageLoad,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_PageLoad kPageLoad{};
  template <typename T = PageLoad> T* set_page_load() {
    return BeginNestedMessage<T>(1056);
  }


  using FieldMetadata_Startup =
    ::protozero::proto_utils::FieldMetadata<
      1057,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      StartUp,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_Startup kStartup{};
  template <typename T = StartUp> T* set_startup() {
    return BeginNestedMessage<T>(1057);
  }


  using FieldMetadata_WebContentInteraction =
    ::protozero::proto_utils::FieldMetadata<
      1058,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      WebContentInteraction,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_WebContentInteraction kWebContentInteraction{};
  template <typename T = WebContentInteraction> T* set_web_content_interaction() {
    return BeginNestedMessage<T>(1058);
  }


  using FieldMetadata_EventForwarder =
    ::protozero::proto_utils::FieldMetadata<
      1059,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      EventForwarder,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_EventForwarder kEventForwarder{};
  template <typename T = EventForwarder> T* set_event_forwarder() {
    return BeginNestedMessage<T>(1059);
  }


  using FieldMetadata_TouchDispositionGestureFilter =
    ::protozero::proto_utils::FieldMetadata<
      1060,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      TouchDispositionGestureFilter,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_TouchDispositionGestureFilter kTouchDispositionGestureFilter{};
  template <typename T = TouchDispositionGestureFilter> T* set_touch_disposition_gesture_filter() {
    return BeginNestedMessage<T>(1060);
  }


  using FieldMetadata_ViewClassName =
    ::protozero::proto_utils::FieldMetadata<
      1061,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ViewClassName,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_ViewClassName kViewClassName{};
  template <typename T = ViewClassName> T* set_view_class_name() {
    return BeginNestedMessage<T>(1061);
  }


  using FieldMetadata_CcSchedulerState =
    ::protozero::proto_utils::FieldMetadata<
      1062,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      ChromeCompositorSchedulerStateV2,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_CcSchedulerState kCcSchedulerState{};
  template <typename T = ChromeCompositorSchedulerStateV2> T* set_cc_scheduler_state() {
    return BeginNestedMessage<T>(1062);
  }


  using FieldMetadata_WebviewStartup =
    ::protozero::proto_utils::FieldMetadata<
      1063,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      WebViewStartup,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_WebviewStartup kWebviewStartup{};
  template <typename T = WebViewStartup> T* set_webview_startup() {
    return BeginNestedMessage<T>(1063);
  }


  using FieldMetadata_AnimationFrameTimingInfo =
    ::protozero::proto_utils::FieldMetadata<
      1064,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AnimationFrameTimingInfo,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_AnimationFrameTimingInfo kAnimationFrameTimingInfo{};
  template <typename T = AnimationFrameTimingInfo> T* set_animation_frame_timing_info() {
    return BeginNestedMessage<T>(1064);
  }


  using FieldMetadata_AnimationFrameScriptTimingInfo =
    ::protozero::proto_utils::FieldMetadata<
      1065,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AnimationFrameScriptTimingInfo,
      ChromeTrackEvent>;

  static constexpr FieldMetadata_AnimationFrameScriptTimingInfo kAnimationFrameScriptTimingInfo{};
  template <typename T = AnimationFrameScriptTimingInfo> T* set_animation_frame_script_timing_info() {
    return BeginNestedMessage<T>(1065);
  }

  enum : int32_t {
    kChromeAppStateFieldNumber = 1000,
    kChromeMemoryPressureNotificationFieldNumber = 1001,
    kChromeTaskAnnotatorFieldNumber = 1002,
    kChromeBrowserContextFieldNumber = 1003,
    kChromeProfileDestroyerFieldNumber = 1004,
    kChromeTaskPostedToDisabledQueueFieldNumber = 1005,
    kChromeRasterTaskFieldNumber = 1006,
    kChromeMessagePumpForUiFieldNumber = 1007,
    kRenderFrameImplDeletionFieldNumber = 1008,
    kShouldSwapBrowsingInstancesResultFieldNumber = 1009,
    kFrameTreeNodeInfoFieldNumber = 1010,
    kChromeHashedPerformanceMarkFieldNumber = 1011,
    kRenderProcessHostFieldNumber = 1012,
    kRenderProcessHostCleanupFieldNumber = 1013,
    kRenderProcessHostListenerChangedFieldNumber = 1014,
    kChildProcessLauncherPriorityFieldNumber = 1015,
    kResourceBundleFieldNumber = 1016,
    kChromeWebAppBadNavigateFieldNumber = 1017,
    kChromeExtensionIdFieldNumber = 1018,
    kSiteInstanceFieldNumber = 1019,
    kRenderViewHostFieldNumber = 1020,
    kRenderFrameProxyHostFieldNumber = 1021,
    kAndroidViewDumpFieldNumber = 1022,
    kParkableStringCompressInBackgroundFieldNumber = 1023,
    kParkableStringUnparkFieldNumber = 1024,
    kChromeSamplingProfilerSampleCompletedFieldNumber = 1025,
    kSendBeginMainframeToCommitBreakdownFieldNumber = 1026,
    kGlobalRenderFrameHostIdFieldNumber = 1027,
    kRenderFrameHostFieldNumber = 1028,
    kThreadPoolTaskFieldNumber = 1029,
    kBackForwardCacheCanStoreDocumentResultFieldNumber = 1030,
    kRendererMainThreadTaskExecutionFieldNumber = 1031,
    kEventLatencyFieldNumber = 1032,
    kProcessSingletonFieldNumber = 1033,
    kSiteInstanceGroupFieldNumber = 1034,
    kBrowsingContextStateFieldNumber = 1035,
    kDeviceThermalStateFieldNumber = 1036,
    kNavigationFieldNumber = 1037,
    kAndroidIpcFieldNumber = 1038,
    kSqlDiagnosticsFieldNumber = 1039,
    kSequenceManagerTaskFieldNumber = 1040,
    kAndroidToolbarFieldNumber = 1041,
    kActiveProcessesFieldNumber = 1042,
    kBlinkTaskScopeFieldNumber = 1043,
    kUkmPageLoadTimingUpdateFieldNumber = 1044,
    kHighEntropyApiFieldNumber = 1045,
    kTabSwitchMeasurementFieldNumber = 1046,
    kScrollDeltasFieldNumber = 1047,
    kWinRenderAudioFromSourceFieldNumber = 1048,
    kMacAuhalStreamFieldNumber = 1049,
    kLinuxAlsaOutputFieldNumber = 1050,
    kLinuxPulseOutputFieldNumber = 1051,
    kChromeGraphicsPipelineFieldNumber = 1052,
    kChromeosCrasUnifiedFieldNumber = 1053,
    kLibunwindstackUnwinderFieldNumber = 1054,
    kScrollPredictorMetricsFieldNumber = 1055,
    kPageLoadFieldNumber = 1056,
    kStartupFieldNumber = 1057,
    kWebContentInteractionFieldNumber = 1058,
    kEventForwarderFieldNumber = 1059,
    kTouchDispositionGestureFilterFieldNumber = 1060,
    kViewClassNameFieldNumber = 1061,
    kCcSchedulerStateFieldNumber = 1062,
    kWebviewStartupFieldNumber = 1063,
    kAnimationFrameTimingInfoFieldNumber = 1064,
    kAnimationFrameScriptTimingInfoFieldNumber = 1065,
  };
};
} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
