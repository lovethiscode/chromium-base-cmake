# Copyright 2023 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/jni_zero/jni_zero.gni")

config("jni_include_dir") {
  include_dirs = [ jni_headers_dir ]
}

config("jni_zero_defines") {
  defines = []
  if (is_robolectric) {
    defines += [ "JNI_ZERO_IS_ROBOLECTRIC" ]
  }
  if (enable_jni_multiplexing) {
    defines += [ "JNI_ZERO_MULTIPLEXING_ENABLED" ]
  }
}

generate_jni("jni_zero_jni") {
  sources = [ "java/src/org/jni_zero/JniUtil.java" ]
  visibility = [ ":*" ]
}

generate_jar_jni("system_jni") {
  classes = [
    "java/util/Arrays.class",
    "java/util/Collection.class",
  ]
  visibility = [ ":*" ]
}

# This is the public target that we intend others to use.
component("jni_zero") {
  # This is the public API.
  sources = [
    "default_conversions.h",
    "jni_zero.h",
  ]

  # These are intended to only be used within jni_zero and the code it generates.
  sources += [
    "common_apis.cc",
    "common_apis.h",
    "default_conversions.cc",
    "jni_export.h",
    "jni_zero.cc",
    "jni_zero_internal.h",
    "logging.cc",
    "logging.h",
  ]
  configs += [ ":jni_include_dir" ]
  public_configs = [ ":jni_zero_defines" ]

  if (is_android) {
    libs = [ "log" ]
  } else if (is_robolectric) {
    public_configs += [ "//third_party/jdk:jdk" ]
  }

  deps = [
    ":jni_zero_jni($default_toolchain)",
    ":system_jni($default_toolchain)",
  ]
}

if (enable_java_templates && is_android) {
  import("//build/config/android/rules.gni")

  android_library("jni_zero_java") {
    supports_android = true
    deps = [ "//build/android:build_java" ]
    sources = [
      "java/src/org/jni_zero/AccessedByNative.java",
      "java/src/org/jni_zero/CalledByNative.java",
      "java/src/org/jni_zero/CalledByNativeForTesting.java",
      "java/src/org/jni_zero/CalledByNativeUnchecked.java",
      "java/src/org/jni_zero/CheckDiscard.java",
      "java/src/org/jni_zero/JNINamespace.java",
      "java/src/org/jni_zero/JniStaticTestMocker.java",
      "java/src/org/jni_zero/JniType.java",
      "java/src/org/jni_zero/JniUtil.java",
      "java/src/org/jni_zero/NativeClassQualifiedName.java",
      "java/src/org/jni_zero/NativeLibraryLoadedStatus.java",
      "java/src/org/jni_zero/NativeMethods.java",
    ]
    proguard_configs = [ "proguard.flags" ]
  }

  group("jni_zero_tests") {
    testonly = true
    deps = [
      "//third_party/jni_zero/sample:jni_zero_sample_apk_test",
      "//third_party/jni_zero/test:jni_zero_compile_check_apk",
    ]
  }
}
